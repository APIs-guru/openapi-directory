# coding: utf-8

"""
    PdfBroker.io API

    PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.

    The version of the OpenAPI document: v1
    Contact: support@pdfbroker.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pdf_metadata_dto import PdfMetadataDto
from typing import Optional, Set
from typing_extensions import Self

class FoTransformRequestDto(BaseModel):
    """
    The XSL-FO transform document and xml data document as a Base64 encoded string with a set of resources provided with a name and the data of the resource as a Base64 encoded string.
    """ # noqa: E501
    fo_document_base64_string: Optional[StrictStr] = Field(default=None, description="This is the complete XSL-FO document provided using Base64 encoding.", alias="foDocumentBase64String")
    metadata: Optional[PdfMetadataDto] = None
    resources: Optional[Dict[str, Optional[StrictStr]]] = Field(default=None, description="This is a set of key-value pairs of digital resources like images that is referenced in the XSL-FO document. It uses the filename as key and the data is provided as a Base64 encoded string.")
    xml_data_document_base64_string: Optional[StrictStr] = Field(default=None, description="This is xml data document on which the XSL-FO transform document is applied. Provided using Base64 encoding.", alias="xmlDataDocumentBase64String")
    __properties: ClassVar[List[str]] = ["foDocumentBase64String", "metadata", "resources", "xmlDataDocumentBase64String"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FoTransformRequestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # set to None if fo_document_base64_string (nullable) is None
        # and model_fields_set contains the field
        if self.fo_document_base64_string is None and "fo_document_base64_string" in self.model_fields_set:
            _dict['foDocumentBase64String'] = None

        # set to None if resources (nullable) is None
        # and model_fields_set contains the field
        if self.resources is None and "resources" in self.model_fields_set:
            _dict['resources'] = None

        # set to None if xml_data_document_base64_string (nullable) is None
        # and model_fields_set contains the field
        if self.xml_data_document_base64_string is None and "xml_data_document_base64_string" in self.model_fields_set:
            _dict['xmlDataDocumentBase64String'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FoTransformRequestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "foDocumentBase64String": obj.get("foDocumentBase64String"),
            "metadata": PdfMetadataDto.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "resources": obj.get("resources"),
            "xmlDataDocumentBase64String": obj.get("xmlDataDocumentBase64String")
        })
        return _obj



# coding: utf-8

"""
    PdfBroker.io API

    PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.

    The version of the OpenAPI document: v1
    Contact: support@pdfbroker.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.color_dto import ColorDto
from openapi_client.models.font_dto import FontDto
from openapi_client.models.x_origin_point import XOriginPoint
from openapi_client.models.y_origin_point import YOriginPoint
from typing import Optional, Set
from typing_extensions import Self

class PdfWriteStringOptions(BaseModel):
    """
    Options for writing string in pdf page;
    """ # noqa: E501
    font: Optional[FontDto] = None
    page_number: Optional[StrictInt] = Field(default=None, description="Get or set which page in the pdf to write on, default is first page.", alias="pageNumber")
    text: Optional[StrictStr] = Field(default=None, description="The text to write in the pdf")
    text_color: Optional[ColorDto] = Field(default=None, alias="textColor")
    x_origin: Optional[XOriginPoint] = Field(default=None, alias="xOrigin")
    x_position: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Get or set the X axis position on where to write string, in reference to XOrigin.", alias="xPosition")
    y_origin: Optional[YOriginPoint] = Field(default=None, alias="yOrigin")
    y_position: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Get or set the Y axis position on where to write string, in reference to YOrigin.", alias="yPosition")
    __properties: ClassVar[List[str]] = ["font", "pageNumber", "text", "textColor", "xOrigin", "xPosition", "yOrigin", "yPosition"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PdfWriteStringOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of font
        if self.font:
            _dict['font'] = self.font.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_color
        if self.text_color:
            _dict['textColor'] = self.text_color.to_dict()
        # set to None if text (nullable) is None
        # and model_fields_set contains the field
        if self.text is None and "text" in self.model_fields_set:
            _dict['text'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PdfWriteStringOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "font": FontDto.from_dict(obj["font"]) if obj.get("font") is not None else None,
            "pageNumber": obj.get("pageNumber"),
            "text": obj.get("text"),
            "textColor": ColorDto.from_dict(obj["textColor"]) if obj.get("textColor") is not None else None,
            "xOrigin": obj.get("xOrigin"),
            "xPosition": obj.get("xPosition"),
            "yOrigin": obj.get("yOrigin"),
            "yPosition": obj.get("yPosition")
        })
        return _obj



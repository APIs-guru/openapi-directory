# coding: utf-8

"""
    PdfBroker.io API

    PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.

    The version of the OpenAPI document: v1
    Contact: support@pdfbroker.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PdfMetadataDto(BaseModel):
    """
    Enter meta data for pdf document
    """ # noqa: E501
    author: Optional[StrictStr] = Field(default=None, description="Pdf document author")
    enable_add: Optional[StrictBool] = Field(default=None, description="Enables or disables adding or modifying text annotations and interactive  form fields.", alias="enableAdd")
    enable_copy: Optional[StrictBool] = Field(default=None, description="Enables or disables copying of text and graphics.", alias="enableCopy")
    enable_modify: Optional[StrictBool] = Field(default=None, description="Enables or disables modifying document contents (other than text annotations and   interactive form fields).", alias="enableModify")
    enable_printing: Optional[StrictBool] = Field(default=None, description="Enables or disables printing.", alias="enablePrinting")
    keywords: Optional[List[StrictStr]] = Field(default=None, description="Pdf document keywords")
    owner_password: Optional[StrictStr] = Field(default=None, description="Specifies the owner password that will protect full access to any generated PDF documents.", alias="ownerPassword")
    subject: Optional[StrictStr] = Field(default=None, description="Pdf document subject")
    title: Optional[StrictStr] = Field(default=None, description="Pdf document title")
    user_password: Optional[StrictStr] = Field(default=None, description="Specifies the user password that will protect access to any generated PDF documents.", alias="userPassword")
    __properties: ClassVar[List[str]] = ["author", "enableAdd", "enableCopy", "enableModify", "enablePrinting", "keywords", "ownerPassword", "subject", "title", "userPassword"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PdfMetadataDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if author (nullable) is None
        # and model_fields_set contains the field
        if self.author is None and "author" in self.model_fields_set:
            _dict['author'] = None

        # set to None if keywords (nullable) is None
        # and model_fields_set contains the field
        if self.keywords is None and "keywords" in self.model_fields_set:
            _dict['keywords'] = None

        # set to None if owner_password (nullable) is None
        # and model_fields_set contains the field
        if self.owner_password is None and "owner_password" in self.model_fields_set:
            _dict['ownerPassword'] = None

        # set to None if subject (nullable) is None
        # and model_fields_set contains the field
        if self.subject is None and "subject" in self.model_fields_set:
            _dict['subject'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if user_password (nullable) is None
        # and model_fields_set contains the field
        if self.user_password is None and "user_password" in self.model_fields_set:
            _dict['userPassword'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PdfMetadataDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": obj.get("author"),
            "enableAdd": obj.get("enableAdd"),
            "enableCopy": obj.get("enableCopy"),
            "enableModify": obj.get("enableModify"),
            "enablePrinting": obj.get("enablePrinting"),
            "keywords": obj.get("keywords"),
            "ownerPassword": obj.get("ownerPassword"),
            "subject": obj.get("subject"),
            "title": obj.get("title"),
            "userPassword": obj.get("userPassword")
        })
        return _obj



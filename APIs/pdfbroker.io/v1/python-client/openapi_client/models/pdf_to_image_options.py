# coding: utf-8

"""
    PdfBroker.io API

    PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.

    The version of the OpenAPI document: v1
    Contact: support@pdfbroker.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PdfToImageOptions(BaseModel):
    """
    PdfToImageOptions
    """ # noqa: E501
    height: Optional[StrictInt] = Field(default=None, description="Set the height of the output image, default value is width of source document. To scale height, and keeping proportions, do not set width;")
    horizontal_resolution: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Set the horizontal resolution, default is 96 dpi;", alias="horizontalResolution")
    image_format: Optional[StrictStr] = Field(default=None, description="Valid options are \"image/jpeg\", \"image/png\" or \"image/gif\". Default is \"image/png\"", alias="imageFormat")
    jpeg_quality: Optional[StrictInt] = Field(default=None, description="Sets the quality of jpeg images, range 0 to 100, default is 75", alias="jpegQuality")
    page_number: Optional[StrictInt] = Field(default=None, description="Which page of the pdf file to generate image from, default is first page", alias="pageNumber")
    png_compression_level: Optional[StrictInt] = Field(default=None, description="Sets the png compression level, range 1 - 9, default is 6", alias="pngCompressionLevel")
    transparent: Optional[StrictBool] = Field(default=None, description="Keep the background of the image transparent. This setting is not available in JPEG-files, since transparency is not supported in the JPEG format.")
    vertical_resolution: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Set the vertical resolution, default is 96 dpi;", alias="verticalResolution")
    width: Optional[StrictInt] = Field(default=None, description="Set the width of the output image, default value is width of source document. To scale width, and keeping proportions, do not set height;")
    __properties: ClassVar[List[str]] = ["height", "horizontalResolution", "imageFormat", "jpegQuality", "pageNumber", "pngCompressionLevel", "transparent", "verticalResolution", "width"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PdfToImageOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if image_format (nullable) is None
        # and model_fields_set contains the field
        if self.image_format is None and "image_format" in self.model_fields_set:
            _dict['imageFormat'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PdfToImageOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "height": obj.get("height"),
            "horizontalResolution": obj.get("horizontalResolution"),
            "imageFormat": obj.get("imageFormat"),
            "jpegQuality": obj.get("jpegQuality"),
            "pageNumber": obj.get("pageNumber"),
            "pngCompressionLevel": obj.get("pngCompressionLevel"),
            "transparent": obj.get("transparent"),
            "verticalResolution": obj.get("verticalResolution"),
            "width": obj.get("width")
        })
        return _obj



# coding: utf-8

"""
    Catalog Inventory

    Catalog Inventory

    The version of the OpenAPI document: 1.0.0
    Contact: support@redhat.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Source(BaseModel):
    """
    Source
    """ # noqa: E501
    archived_at: Optional[datetime] = None
    availability_message: Optional[StrictStr] = None
    availability_status: Optional[StrictStr] = None
    cloud_connector_id: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    enabled: Optional[StrictBool] = False
    id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="ID of the resource")
    info: Optional[Dict[str, Any]] = None
    last_available_at: Optional[datetime] = None
    last_checked_at: Optional[datetime] = None
    last_refresh_message: Optional[StrictStr] = None
    last_successful_refresh_at: Optional[datetime] = None
    name: Optional[StrictStr] = None
    previous_sha: Optional[StrictStr] = None
    previous_size: Optional[StrictInt] = None
    refresh_finished_at: Optional[datetime] = None
    refresh_started_at: Optional[datetime] = None
    refresh_state: Optional[StrictStr] = None
    refresh_task_id: Optional[StrictStr] = None
    uid: Optional[StrictStr] = None
    updated_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["archived_at", "availability_message", "availability_status", "cloud_connector_id", "created_at", "enabled", "id", "info", "last_available_at", "last_checked_at", "last_refresh_message", "last_successful_refresh_at", "name", "previous_sha", "previous_size", "refresh_finished_at", "refresh_started_at", "refresh_state", "refresh_task_id", "uid", "updated_at"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Source from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "archived_at",
            "availability_message",
            "cloud_connector_id",
            "created_at",
            "enabled",
            "id",
            "info",
            "last_available_at",
            "last_checked_at",
            "last_refresh_message",
            "last_successful_refresh_at",
            "name",
            "previous_sha",
            "previous_size",
            "refresh_finished_at",
            "refresh_started_at",
            "refresh_task_id",
            "uid",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Source from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archived_at": obj.get("archived_at"),
            "availability_message": obj.get("availability_message"),
            "availability_status": obj.get("availability_status"),
            "cloud_connector_id": obj.get("cloud_connector_id"),
            "created_at": obj.get("created_at"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False,
            "id": obj.get("id"),
            "info": obj.get("info"),
            "last_available_at": obj.get("last_available_at"),
            "last_checked_at": obj.get("last_checked_at"),
            "last_refresh_message": obj.get("last_refresh_message"),
            "last_successful_refresh_at": obj.get("last_successful_refresh_at"),
            "name": obj.get("name"),
            "previous_sha": obj.get("previous_sha"),
            "previous_size": obj.get("previous_size"),
            "refresh_finished_at": obj.get("refresh_finished_at"),
            "refresh_started_at": obj.get("refresh_started_at"),
            "refresh_state": obj.get("refresh_state"),
            "refresh_task_id": obj.get("refresh_task_id"),
            "uid": obj.get("uid"),
            "updated_at": obj.get("updated_at")
        })
        return _obj



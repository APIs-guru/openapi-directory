# coding: utf-8

"""
    Catalog Inventory

    Catalog Inventory

    The version of the OpenAPI document: 1.0.0
    Contact: support@redhat.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Task(BaseModel):
    """
    Task
    """ # noqa: E501
    archived_at: Optional[datetime] = None
    child_task_id: Optional[StrictStr] = None
    completed_at: Optional[datetime] = None
    controller_message_id: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    id: Optional[StrictStr] = Field(default=None, description="UUID of task")
    input: Optional[Dict[str, Any]] = None
    message: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    output: Optional[Dict[str, Any]] = None
    owner: Optional[StrictStr] = None
    source_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="ID of the resource")
    state: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    target_source_ref: Optional[StrictStr] = None
    target_type: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    updated_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["archived_at", "child_task_id", "completed_at", "controller_message_id", "created_at", "id", "input", "message", "name", "output", "owner", "source_id", "state", "status", "target_source_ref", "target_type", "type", "updated_at"]

    @field_validator('source_id')
    def source_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+$/")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['pending', 'queued', 'running', 'timedout', 'completed']):
            raise ValueError("must be one of enum values ('pending', 'queued', 'running', 'timedout', 'completed')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ok', 'warn', 'unchanged', 'error']):
            raise ValueError("must be one of enum values ('ok', 'warn', 'unchanged', 'error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Task from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "archived_at",
            "child_task_id",
            "controller_message_id",
            "created_at",
            "id",
            "input",
            "owner",
            "source_id",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Task from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archived_at": obj.get("archived_at"),
            "child_task_id": obj.get("child_task_id"),
            "completed_at": obj.get("completed_at"),
            "controller_message_id": obj.get("controller_message_id"),
            "created_at": obj.get("created_at"),
            "id": obj.get("id"),
            "input": obj.get("input"),
            "message": obj.get("message"),
            "name": obj.get("name"),
            "output": obj.get("output"),
            "owner": obj.get("owner"),
            "source_id": obj.get("source_id"),
            "state": obj.get("state"),
            "status": obj.get("status"),
            "target_source_ref": obj.get("target_source_ref"),
            "target_type": obj.get("target_type"),
            "type": obj.get("type"),
            "updated_at": obj.get("updated_at")
        })
        return _obj



# coding: utf-8

"""
    Neblio REST API Suite

    APIs for Interacting with NTP1 Tokens & The Neblio Blockchain

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_token_metadata_response_metadata_of_issuance_data_user_data import GetTokenMetadataResponseMetadataOfIssuanceDataUserData
from openapi_client.models.issue_token_request_metadata_encryptions_inner import IssueTokenRequestMetadataEncryptionsInner
from openapi_client.models.issue_token_request_metadata_rules import IssueTokenRequestMetadataRules
from openapi_client.models.issue_token_request_metadata_urls_inner import IssueTokenRequestMetadataUrlsInner
from typing import Optional, Set
from typing_extensions import Self

class IssueTokenRequestMetadata(BaseModel):
    """
    Object representing all metadata at token issuance
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Long name or description of token (ex. Nibble)")
    encryptions: Optional[List[IssueTokenRequestMetadataEncryptionsInner]] = Field(default=None, description="Array of encryption instruction objects for encrypting userData")
    issuer: Optional[StrictStr] = Field(default=None, description="Name of token issuer")
    rules: Optional[IssueTokenRequestMetadataRules] = None
    token_name: Optional[StrictStr] = Field(default=None, description="Token Symbol it will be identified by (ex. NIBBL)", alias="tokenName")
    urls: Optional[List[IssueTokenRequestMetadataUrlsInner]] = None
    user_data: Optional[GetTokenMetadataResponseMetadataOfIssuanceDataUserData] = Field(default=None, alias="userData")
    __properties: ClassVar[List[str]] = ["description", "encryptions", "issuer", "rules", "tokenName", "urls", "userData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IssueTokenRequestMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in encryptions (list)
        _items = []
        if self.encryptions:
            for _item_encryptions in self.encryptions:
                if _item_encryptions:
                    _items.append(_item_encryptions.to_dict())
            _dict['encryptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of rules
        if self.rules:
            _dict['rules'] = self.rules.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in urls (list)
        _items = []
        if self.urls:
            for _item_urls in self.urls:
                if _item_urls:
                    _items.append(_item_urls.to_dict())
            _dict['urls'] = _items
        # override the default output from pydantic by calling `to_dict()` of user_data
        if self.user_data:
            _dict['userData'] = self.user_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IssueTokenRequestMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "encryptions": [IssueTokenRequestMetadataEncryptionsInner.from_dict(_item) for _item in obj["encryptions"]] if obj.get("encryptions") is not None else None,
            "issuer": obj.get("issuer"),
            "rules": IssueTokenRequestMetadataRules.from_dict(obj["rules"]) if obj.get("rules") is not None else None,
            "tokenName": obj.get("tokenName"),
            "urls": [IssueTokenRequestMetadataUrlsInner.from_dict(_item) for _item in obj["urls"]] if obj.get("urls") is not None else None,
            "userData": GetTokenMetadataResponseMetadataOfIssuanceDataUserData.from_dict(obj["userData"]) if obj.get("userData") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Neblio REST API Suite

    APIs for Interacting with NTP1 Tokens & The Neblio Blockchain

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.get_token_metadata_response_metadata_of_issuance import GetTokenMetadataResponseMetadataOfIssuance
from openapi_client.models.get_token_metadata_response_metadata_of_utxo import GetTokenMetadataResponseMetadataOfUtxo
from typing import Optional, Set
from typing_extensions import Self

class GetTokenMetadataResponse(BaseModel):
    """
    GetTokenMetadataResponse
    """ # noqa: E501
    aggregation_policy: Optional[StrictStr] = Field(default=None, description="Whether the tokens are aggregatable", alias="aggregationPolicy")
    divisibility: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Decimal places the token is divisible to")
    first_block: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Block number token was issued in", alias="firstBlock")
    initial_issuance_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total tokens issued in initial issuance", alias="initialIssuanceAmount")
    issuance_txid: Optional[StrictStr] = Field(default=None, description="TXID the token was issued with", alias="issuanceTxid")
    issue_address: Optional[StrictStr] = Field(default=None, description="Address that issued the tokens", alias="issueAddress")
    lock_status: Optional[StrictBool] = Field(default=None, description="Whether issuance of more tokens is locked", alias="lockStatus")
    metadata_of_issuance: Optional[GetTokenMetadataResponseMetadataOfIssuance] = Field(default=None, alias="metadataOfIssuance")
    metadata_of_utxo: Optional[GetTokenMetadataResponseMetadataOfUtxo] = Field(default=None, alias="metadataOfUtxo")
    num_of_burns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of times tokens have been burned", alias="numOfBurns")
    num_of_holders: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total number of addresses this token is held at", alias="numOfHolders")
    num_of_issuance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total number of times this token has been issued", alias="numOfIssuance")
    num_of_transfers: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total number of transactions of this token", alias="numOfTransfers")
    some_utxo: Optional[StrictStr] = Field(default=None, description="Example UTXO containing this token.", alias="someUtxo")
    token_id: Optional[StrictStr] = Field(default=None, description="ID of the token", alias="tokenId")
    total_supply: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total number of tokens in supply", alias="totalSupply")
    __properties: ClassVar[List[str]] = ["aggregationPolicy", "divisibility", "firstBlock", "initialIssuanceAmount", "issuanceTxid", "issueAddress", "lockStatus", "metadataOfIssuance", "metadataOfUtxo", "numOfBurns", "numOfHolders", "numOfIssuance", "numOfTransfers", "someUtxo", "tokenId", "totalSupply"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetTokenMetadataResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata_of_issuance
        if self.metadata_of_issuance:
            _dict['metadataOfIssuance'] = self.metadata_of_issuance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata_of_utxo
        if self.metadata_of_utxo:
            _dict['metadataOfUtxo'] = self.metadata_of_utxo.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetTokenMetadataResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregationPolicy": obj.get("aggregationPolicy"),
            "divisibility": obj.get("divisibility"),
            "firstBlock": obj.get("firstBlock"),
            "initialIssuanceAmount": obj.get("initialIssuanceAmount"),
            "issuanceTxid": obj.get("issuanceTxid"),
            "issueAddress": obj.get("issueAddress"),
            "lockStatus": obj.get("lockStatus"),
            "metadataOfIssuance": GetTokenMetadataResponseMetadataOfIssuance.from_dict(obj["metadataOfIssuance"]) if obj.get("metadataOfIssuance") is not None else None,
            "metadataOfUtxo": GetTokenMetadataResponseMetadataOfUtxo.from_dict(obj["metadataOfUtxo"]) if obj.get("metadataOfUtxo") is not None else None,
            "numOfBurns": obj.get("numOfBurns"),
            "numOfHolders": obj.get("numOfHolders"),
            "numOfIssuance": obj.get("numOfIssuance"),
            "numOfTransfers": obj.get("numOfTransfers"),
            "someUtxo": obj.get("someUtxo"),
            "tokenId": obj.get("tokenId"),
            "totalSupply": obj.get("totalSupply")
        })
        return _obj



# coding: utf-8

"""
    Neblio REST API Suite

    APIs for Interacting with NTP1 Tokens & The Neblio Blockchain

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.get_transaction_info_response_vin_inner_previous_output import GetTransactionInfoResponseVinInnerPreviousOutput
from openapi_client.models.get_transaction_info_response_vin_inner_script_sig import GetTransactionInfoResponseVinInnerScriptSig
from openapi_client.models.get_transaction_info_response_vin_inner_tokens_inner import GetTransactionInfoResponseVinInnerTokensInner
from typing import Optional, Set
from typing_extensions import Self

class GetTransactionInfoResponseVinInner(BaseModel):
    """
    GetTransactionInfoResponseVinInner
    """ # noqa: E501
    previous_output: Optional[GetTransactionInfoResponseVinInnerPreviousOutput] = Field(default=None, alias="previousOutput")
    script_sig: Optional[GetTransactionInfoResponseVinInnerScriptSig] = Field(default=None, alias="scriptSig")
    sequence: Optional[Union[StrictFloat, StrictInt]] = None
    tokens: Optional[List[GetTransactionInfoResponseVinInnerTokensInner]] = None
    txid: Optional[StrictStr] = Field(default=None, description="TXID of the input")
    value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value of input in NEBL satoshi")
    vout: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="output index")
    __properties: ClassVar[List[str]] = ["previousOutput", "scriptSig", "sequence", "tokens", "txid", "value", "vout"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetTransactionInfoResponseVinInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of previous_output
        if self.previous_output:
            _dict['previousOutput'] = self.previous_output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of script_sig
        if self.script_sig:
            _dict['scriptSig'] = self.script_sig.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tokens (list)
        _items = []
        if self.tokens:
            for _item_tokens in self.tokens:
                if _item_tokens:
                    _items.append(_item_tokens.to_dict())
            _dict['tokens'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetTransactionInfoResponseVinInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "previousOutput": GetTransactionInfoResponseVinInnerPreviousOutput.from_dict(obj["previousOutput"]) if obj.get("previousOutput") is not None else None,
            "scriptSig": GetTransactionInfoResponseVinInnerScriptSig.from_dict(obj["scriptSig"]) if obj.get("scriptSig") is not None else None,
            "sequence": obj.get("sequence"),
            "tokens": [GetTransactionInfoResponseVinInnerTokensInner.from_dict(_item) for _item in obj["tokens"]] if obj.get("tokens") is not None else None,
            "txid": obj.get("txid"),
            "value": obj.get("value"),
            "vout": obj.get("vout")
        })
        return _obj



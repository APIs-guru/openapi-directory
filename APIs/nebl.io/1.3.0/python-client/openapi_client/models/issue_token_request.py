# coding: utf-8

"""
    Neblio REST API Suite

    APIs for Interacting with NTP1 Tokens & The Neblio Blockchain

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.issue_token_request_flags import IssueTokenRequestFlags
from openapi_client.models.issue_token_request_metadata import IssueTokenRequestMetadata
from openapi_client.models.issue_token_request_transfer_inner import IssueTokenRequestTransferInner
from typing import Optional, Set
from typing_extensions import Self

class IssueTokenRequest(BaseModel):
    """
    IssueTokenRequest
    """ # noqa: E501
    amount: Union[StrictFloat, StrictInt] = Field(description="Number of tokens to issue")
    divisibility: Union[StrictFloat, StrictInt] = Field(description="Number of decimal places the token should be divisble by (0-7)")
    fee: Union[StrictFloat, StrictInt] = Field(description="Fee in satoshi to include in the issuance transaction min 1000000000 (10 NEBL)")
    flags: Optional[IssueTokenRequestFlags] = None
    issue_address: StrictStr = Field(description="Address issuing the token", alias="issueAddress")
    metadata: Optional[IssueTokenRequestMetadata] = None
    reissuable: StrictBool = Field(description="whether the token should be reissuable")
    transfer: List[IssueTokenRequestTransferInner]
    __properties: ClassVar[List[str]] = ["amount", "divisibility", "fee", "flags", "issueAddress", "metadata", "reissuable", "transfer"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IssueTokenRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of flags
        if self.flags:
            _dict['flags'] = self.flags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in transfer (list)
        _items = []
        if self.transfer:
            for _item_transfer in self.transfer:
                if _item_transfer:
                    _items.append(_item_transfer.to_dict())
            _dict['transfer'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IssueTokenRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "divisibility": obj.get("divisibility"),
            "fee": obj.get("fee"),
            "flags": IssueTokenRequestFlags.from_dict(obj["flags"]) if obj.get("flags") is not None else None,
            "issueAddress": obj.get("issueAddress"),
            "metadata": IssueTokenRequestMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "reissuable": obj.get("reissuable"),
            "transfer": [IssueTokenRequestTransferInner.from_dict(_item) for _item in obj["transfer"]] if obj.get("transfer") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Neblio REST API Suite

    APIs for Interacting with NTP1 Tokens & The Neblio Blockchain

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetBlockResponse(BaseModel):
    """
    GetBlockResponse
    """ # noqa: E501
    bits: Optional[StrictStr] = Field(default=None, description="Block bits")
    confirmations: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of confirmations block has")
    difficulty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Block difficulty")
    hash: Optional[StrictStr] = Field(default=None, description="Block hash")
    height: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Block height")
    merkleroot: Optional[StrictStr] = Field(default=None, description="Merkleroot of block")
    nextblockhash: Optional[StrictStr] = Field(default=None, description="Hash of the next block on the chain")
    nonce: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Block nonce")
    previousblockhash: Optional[StrictStr] = Field(default=None, description="Hash of the previous block on the chain")
    reward: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of NEBL awarded in this block")
    size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Block size in bytes")
    time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Block time relative to epoch")
    tx: Optional[List[StrictStr]] = Field(default=None, description="Array of tx ids in the block")
    version: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Block version")
    __properties: ClassVar[List[str]] = ["bits", "confirmations", "difficulty", "hash", "height", "merkleroot", "nextblockhash", "nonce", "previousblockhash", "reward", "size", "time", "tx", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetBlockResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetBlockResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bits": obj.get("bits"),
            "confirmations": obj.get("confirmations"),
            "difficulty": obj.get("difficulty"),
            "hash": obj.get("hash"),
            "height": obj.get("height"),
            "merkleroot": obj.get("merkleroot"),
            "nextblockhash": obj.get("nextblockhash"),
            "nonce": obj.get("nonce"),
            "previousblockhash": obj.get("previousblockhash"),
            "reward": obj.get("reward"),
            "size": obj.get("size"),
            "time": obj.get("time"),
            "tx": obj.get("tx"),
            "version": obj.get("version")
        })
        return _obj



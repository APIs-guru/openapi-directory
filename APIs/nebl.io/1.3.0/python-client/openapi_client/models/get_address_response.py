# coding: utf-8

"""
    Neblio REST API Suite

    APIs for Interacting with NTP1 Tokens & The Neblio Blockchain

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetAddressResponse(BaseModel):
    """
    GetAddressResponse
    """ # noqa: E501
    addr_str: Optional[StrictStr] = Field(default=None, description="Address in string form", alias="addrStr")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="NEBL balance")
    balance_sat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="NEBL balance in satoshis", alias="balanceSat")
    total_received: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total NEBL received", alias="totalReceived")
    total_received_sat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total NEBL received in satoshis", alias="totalReceivedSat")
    total_sent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total NEBL sent", alias="totalSent")
    total_sent_sat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total NEBL sent satoshis", alias="totalSentSat")
    transactions: Optional[List[StrictStr]] = Field(default=None, description="Array of transaction ids for this address")
    tx_appearances: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of transactions for this address", alias="txAppearances")
    unconfirmed_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unconfirmed NEBL balance", alias="unconfirmedBalance")
    unconfirmed_balance_sat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unconfirmed NEBL balance in satoshis", alias="unconfirmedBalanceSat")
    unconfirmed_tx_appearances: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of unconfirmed transactions for this address", alias="unconfirmedTxAppearances")
    __properties: ClassVar[List[str]] = ["addrStr", "balance", "balanceSat", "totalReceived", "totalReceivedSat", "totalSent", "totalSentSat", "transactions", "txAppearances", "unconfirmedBalance", "unconfirmedBalanceSat", "unconfirmedTxAppearances"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAddressResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAddressResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addrStr": obj.get("addrStr"),
            "balance": obj.get("balance"),
            "balanceSat": obj.get("balanceSat"),
            "totalReceived": obj.get("totalReceived"),
            "totalReceivedSat": obj.get("totalReceivedSat"),
            "totalSent": obj.get("totalSent"),
            "totalSentSat": obj.get("totalSentSat"),
            "transactions": obj.get("transactions"),
            "txAppearances": obj.get("txAppearances"),
            "unconfirmedBalance": obj.get("unconfirmedBalance"),
            "unconfirmedBalanceSat": obj.get("unconfirmedBalanceSat"),
            "unconfirmedTxAppearances": obj.get("unconfirmedTxAppearances")
        })
        return _obj



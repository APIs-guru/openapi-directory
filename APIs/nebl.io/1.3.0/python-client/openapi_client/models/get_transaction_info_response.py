# coding: utf-8

"""
    Neblio REST API Suite

    APIs for Interacting with NTP1 Tokens & The Neblio Blockchain

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.get_transaction_info_response_vin_inner import GetTransactionInfoResponseVinInner
from openapi_client.models.get_transaction_info_response_vout_inner import GetTransactionInfoResponseVoutInner
from typing import Optional, Set
from typing_extensions import Self

class GetTransactionInfoResponse(BaseModel):
    """
    GetTransactionInfoResponse
    """ # noqa: E501
    blockhash: Optional[StrictStr] = Field(default=None, description="Hash of the block this transaction is in")
    blockheight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Block height of this transaction")
    blocktime: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Block time of this transaction")
    confirmations: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of transaction confirmations")
    fee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total NEBL used as fee for this transcation in satoshis")
    hex: Optional[StrictStr] = Field(default=None, description="Transaction in raw hex")
    locktime: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Transaction locktime")
    time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Transaction time")
    totalsent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total NEBL sent in this transaction in satoshis")
    txid: Optional[StrictStr] = Field(default=None, description="TXID of transaction")
    version: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Transaction version")
    vin: Optional[List[GetTransactionInfoResponseVinInner]] = Field(default=None, description="Array of transaction inputs")
    vout: Optional[List[GetTransactionInfoResponseVoutInner]] = Field(default=None, description="Array of transaction outputs")
    __properties: ClassVar[List[str]] = ["blockhash", "blockheight", "blocktime", "confirmations", "fee", "hex", "locktime", "time", "totalsent", "txid", "version", "vin", "vout"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetTransactionInfoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in vin (list)
        _items = []
        if self.vin:
            for _item_vin in self.vin:
                if _item_vin:
                    _items.append(_item_vin.to_dict())
            _dict['vin'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vout (list)
        _items = []
        if self.vout:
            for _item_vout in self.vout:
                if _item_vout:
                    _items.append(_item_vout.to_dict())
            _dict['vout'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetTransactionInfoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blockhash": obj.get("blockhash"),
            "blockheight": obj.get("blockheight"),
            "blocktime": obj.get("blocktime"),
            "confirmations": obj.get("confirmations"),
            "fee": obj.get("fee"),
            "hex": obj.get("hex"),
            "locktime": obj.get("locktime"),
            "time": obj.get("time"),
            "totalsent": obj.get("totalsent"),
            "txid": obj.get("txid"),
            "version": obj.get("version"),
            "vin": [GetTransactionInfoResponseVinInner.from_dict(_item) for _item in obj["vin"]] if obj.get("vin") is not None else None,
            "vout": [GetTransactionInfoResponseVoutInner.from_dict(_item) for _item in obj["vout"]] if obj.get("vout") is not None else None
        })
        return _obj



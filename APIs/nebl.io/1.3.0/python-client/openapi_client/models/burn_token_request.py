# coding: utf-8

"""
    Neblio REST API Suite

    APIs for Interacting with NTP1 Tokens & The Neblio Blockchain

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.burn_token_request_burn_inner import BurnTokenRequestBurnInner
from openapi_client.models.burn_token_request_transfer_inner import BurnTokenRequestTransferInner
from typing import Optional, Set
from typing_extensions import Self

class BurnTokenRequest(BaseModel):
    """
    BurnTokenRequest
    """ # noqa: E501
    burn: List[BurnTokenRequestBurnInner] = Field(description="Array of objects representing tokens to be burned")
    fee: Union[StrictFloat, StrictInt] = Field(description="Fee in satoshi to include in the issuance transaction min 10000 (0.0001 NEBL)")
    var_from: Optional[List[StrictStr]] = Field(default=None, description="Array of addresses to send the token from", alias="from")
    transfer: Optional[List[BurnTokenRequestTransferInner]] = None
    __properties: ClassVar[List[str]] = ["burn", "fee", "from", "transfer"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BurnTokenRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in burn (list)
        _items = []
        if self.burn:
            for _item_burn in self.burn:
                if _item_burn:
                    _items.append(_item_burn.to_dict())
            _dict['burn'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transfer (list)
        _items = []
        if self.transfer:
            for _item_transfer in self.transfer:
                if _item_transfer:
                    _items.append(_item_transfer.to_dict())
            _dict['transfer'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BurnTokenRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "burn": [BurnTokenRequestBurnInner.from_dict(_item) for _item in obj["burn"]] if obj.get("burn") is not None else None,
            "fee": obj.get("fee"),
            "from": obj.get("from"),
            "transfer": [BurnTokenRequestTransferInner.from_dict(_item) for _item in obj["transfer"]] if obj.get("transfer") is not None else None
        })
        return _obj



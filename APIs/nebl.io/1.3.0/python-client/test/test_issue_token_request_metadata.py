# coding: utf-8

"""
    Neblio REST API Suite

    APIs for Interacting with NTP1 Tokens & The Neblio Blockchain

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.issue_token_request_metadata import IssueTokenRequestMetadata

class TestIssueTokenRequestMetadata(unittest.TestCase):
    """IssueTokenRequestMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IssueTokenRequestMetadata:
        """Test IssueTokenRequestMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IssueTokenRequestMetadata`
        """
        model = IssueTokenRequestMetadata()
        if include_optional:
            return IssueTokenRequestMetadata(
                description = '',
                encryptions = [
                    openapi_client.models.issue_token_request_metadata_encryptions_inner.issueTokenRequest_metadata_encryptions_inner(
                        format = '', 
                        key = '', 
                        pubkey = '', 
                        type = '', )
                    ],
                issuer = '',
                rules = openapi_client.models.issue_token_request_metadata_rules.issueTokenRequest_metadata_rules(
                    expiration = openapi_client.models.issue_token_request_metadata_rules_expiration.issueTokenRequest_metadata_rules_expiration(
                        locked = True, 
                        valid_until = 1.337, ), 
                    fees = openapi_client.models.issue_token_request_metadata_rules_fees.issueTokenRequest_metadata_rules_fees(
                        items = [
                            openapi_client.models.issue_token_request_metadata_rules_fees_items_inner.issueTokenRequest_metadata_rules_fees_items_inner(
                                address = '', 
                                token_id = '', 
                                value = '', )
                            ], 
                        locked = True, ), 
                    holders = [
                        openapi_client.models.issue_token_request_metadata_rules_holders_inner.issueTokenRequest_metadata_rules_holders_inner(
                            address = '', 
                            locked = True, )
                        ], ),
                token_name = '',
                urls = [
                    openapi_client.models.issue_token_request_metadata_urls_inner.issueTokenRequest_metadata_urls_inner(
                        data_hash = '', 
                        mime_type = '', 
                        name = '', 
                        url = '', )
                    ],
                user_data = openapi_client.models.get_token_metadata_response_metadata_of_issuance_data_user_data.getTokenMetadataResponse_metadataOfIssuance_data_userData(
                    meta = [
                        openapi_client.models.get_token_metadata_response_metadata_of_issuance_data_user_data_meta_inner.getTokenMetadataResponse_metadataOfIssuance_data_userData_meta_inner(
                            key = '', 
                            value = '', )
                        ], )
            )
        else:
            return IssueTokenRequestMetadata(
        )
        """

    def testIssueTokenRequestMetadata(self):
        """Test IssueTokenRequestMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    WINSMS

    WinSMS RESTful API

    The version of the OpenAPI document: 1.0.0
    Contact: support@winsms.co.za
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.incoming_message import IncomingMessage
from typing import Optional, Set
from typing_extensions import Self

class IncomingMessageResponse(BaseModel):
    """
    IncomingMessageResponse
    """ # noqa: E501
    incoming_messages: Optional[Annotated[List[IncomingMessage], Field(min_length=1, max_length=1000)]] = Field(default=None, description="An array of ***incomingMessage*** objects containing properties of each incoming message. ", alias="incomingMessages")
    results_limit: Optional[StrictInt] = Field(default=None, description="The number of items returned in the results. This is the value specified in the ***limit*** parameter sent to the endpoint. If the parameter was not specified, this defaults to 100. ", alias="resultsLimit")
    results_offset: Optional[StrictInt] = Field(default=None, description="The number of items skipped before the results were returned. This is the value specified in the ***offset*** parameter sent to the endpoint. If the parameter was not specified, this defaults to 0. ", alias="resultsOffset")
    results_total_available: Optional[StrictInt] = Field(default=None, description="The total number of results available for retrieval. The ***offset*** and ***limit*** properties specify which of the total available results have been returned. ", alias="resultsTotalAvailable")
    status_code: Optional[StrictInt] = Field(default=None, description="The http status code returned - reflected in the body for convenience", alias="statusCode")
    time_stamp: Optional[StrictStr] = Field(default=None, description="The date/time the request was processed, in the format YYYYMMDDhhmmssSSS", alias="timeStamp")
    version: Optional[StrictStr] = Field(default=None, description="The current version of the API of the endpoint that was called")
    __properties: ClassVar[List[str]] = ["incomingMessages", "resultsLimit", "resultsOffset", "resultsTotalAvailable", "statusCode", "timeStamp", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IncomingMessageResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in incoming_messages (list)
        _items = []
        if self.incoming_messages:
            for _item_incoming_messages in self.incoming_messages:
                if _item_incoming_messages:
                    _items.append(_item_incoming_messages.to_dict())
            _dict['incomingMessages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IncomingMessageResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "incomingMessages": [IncomingMessage.from_dict(_item) for _item in obj["incomingMessages"]] if obj.get("incomingMessages") is not None else None,
            "resultsLimit": obj.get("resultsLimit"),
            "resultsOffset": obj.get("resultsOffset"),
            "resultsTotalAvailable": obj.get("resultsTotalAvailable"),
            "statusCode": obj.get("statusCode"),
            "timeStamp": obj.get("timeStamp"),
            "version": obj.get("version")
        })
        return _obj



# coding: utf-8

"""
    WINSMS

    WinSMS RESTful API

    The version of the OpenAPI document: 1.0.0
    Contact: support@winsms.co.za
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ScheduledMessage(BaseModel):
    """
    ScheduledMessage
    """ # noqa: E501
    api_message_id: Optional[StrictInt] = Field(default=None, description="The WinSMS API Message Id identifying the SMS message.", alias="apiMessageId")
    credit_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of credits deducted from your account for the SMS to this recipient.  This is the number of credits that will be refunded if you delete this scheduled message. ", alias="creditCost")
    mobile_number: Optional[StrictStr] = Field(default=None, description="The mobile number of the recipient of the SMS message, using the international E164 (without the plus) format", alias="mobileNumber")
    scheduled_send_time: Optional[StrictStr] = Field(default=None, description="The date and time the message is scheduled to be delivered to the recipient, in the format YYYYMMDDHHmm.", alias="scheduledSendTime")
    submit_time: Optional[StrictStr] = Field(default=None, description="The date and time the message was originally submitted for scheduled delivery, in the format YYYYMMDDHHmm.", alias="submitTime")
    __properties: ClassVar[List[str]] = ["apiMessageId", "creditCost", "mobileNumber", "scheduledSendTime", "submitTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduledMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduledMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiMessageId": obj.get("apiMessageId"),
            "creditCost": obj.get("creditCost"),
            "mobileNumber": obj.get("mobileNumber"),
            "scheduledSendTime": obj.get("scheduledSendTime"),
            "submitTime": obj.get("submitTime")
        })
        return _obj



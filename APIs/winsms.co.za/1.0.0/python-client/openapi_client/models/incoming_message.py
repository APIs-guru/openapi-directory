# coding: utf-8

"""
    WINSMS

    WinSMS RESTful API

    The version of the OpenAPI document: 1.0.0
    Contact: support@winsms.co.za
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class IncomingMessage(BaseModel):
    """
    IncomingMessage
    """ # noqa: E501
    incoming_api_message_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The unique API message id assigned to this incoming message. ", alias="incomingApiMessageId")
    message_text: Optional[StrictStr] = Field(default=None, description="The text of the incoming SMS message. ", alias="messageText")
    mobile_number: Optional[StrictStr] = Field(default=None, description="The mobile number that sent the SMS message, displayed using the international E164 (without the plus) format ", alias="mobileNumber")
    outgoing_api_message_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The API message id of the most recent message sent to the mobile number that responded. ", alias="outgoingApiMessageId")
    receive_time: Optional[StrictStr] = Field(default=None, description="The date and time the message was received by WinSMS, in the format YYYYMMDDHHmm. ", alias="receiveTime")
    __properties: ClassVar[List[str]] = ["incomingApiMessageId", "messageText", "mobileNumber", "outgoingApiMessageId", "receiveTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IncomingMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IncomingMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "incomingApiMessageId": obj.get("incomingApiMessageId"),
            "messageText": obj.get("messageText"),
            "mobileNumber": obj.get("mobileNumber"),
            "outgoingApiMessageId": obj.get("outgoingApiMessageId"),
            "receiveTime": obj.get("receiveTime")
        })
        return _obj



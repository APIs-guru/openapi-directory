# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assets_returns_turbulence_partitioned_post200_response_assets_inner_asset_turbulence_partitioned_returns_inner import AssetsReturnsTurbulencePartitionedPost200ResponseAssetsInnerAssetTurbulencePartitionedReturnsInner
from openapi_server import util


class AssetsReturnsTurbulencePartitionedPost200ResponseAssetsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_turbulence_partitioned_returns: List[AssetsReturnsTurbulencePartitionedPost200ResponseAssetsInnerAssetTurbulencePartitionedReturnsInner]=None):
        """AssetsReturnsTurbulencePartitionedPost200ResponseAssetsInner - a model defined in OpenAPI

        :param asset_turbulence_partitioned_returns: The asset_turbulence_partitioned_returns of this AssetsReturnsTurbulencePartitionedPost200ResponseAssetsInner.
        """
        self.openapi_types = {
            'asset_turbulence_partitioned_returns': List[AssetsReturnsTurbulencePartitionedPost200ResponseAssetsInnerAssetTurbulencePartitionedReturnsInner]
        }

        self.attribute_map = {
            'asset_turbulence_partitioned_returns': 'assetTurbulencePartitionedReturns'
        }

        self._asset_turbulence_partitioned_returns = asset_turbulence_partitioned_returns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetsReturnsTurbulencePartitionedPost200ResponseAssetsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _assets_returns_turbulence_partitioned_post_200_response_assets_inner of this AssetsReturnsTurbulencePartitionedPost200ResponseAssetsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_turbulence_partitioned_returns(self):
        """Gets the asset_turbulence_partitioned_returns of this AssetsReturnsTurbulencePartitionedPost200ResponseAssetsInner.

        assetTurbulencePartitionedReturns[k] corresponds to all the asset returns whose turbulence index is lower than or equal to the turbulence score associated with the turbulence threshold turbulenceThresholds[k]; the length of the array assetTurbulencePartitionedReturns is equal to the length of the array turbulenceThresholds plus 1

        :return: The asset_turbulence_partitioned_returns of this AssetsReturnsTurbulencePartitionedPost200ResponseAssetsInner.
        :rtype: List[AssetsReturnsTurbulencePartitionedPost200ResponseAssetsInnerAssetTurbulencePartitionedReturnsInner]
        """
        return self._asset_turbulence_partitioned_returns

    @asset_turbulence_partitioned_returns.setter
    def asset_turbulence_partitioned_returns(self, asset_turbulence_partitioned_returns):
        """Sets the asset_turbulence_partitioned_returns of this AssetsReturnsTurbulencePartitionedPost200ResponseAssetsInner.

        assetTurbulencePartitionedReturns[k] corresponds to all the asset returns whose turbulence index is lower than or equal to the turbulence score associated with the turbulence threshold turbulenceThresholds[k]; the length of the array assetTurbulencePartitionedReturns is equal to the length of the array turbulenceThresholds plus 1

        :param asset_turbulence_partitioned_returns: The asset_turbulence_partitioned_returns of this AssetsReturnsTurbulencePartitionedPost200ResponseAssetsInner.
        :type asset_turbulence_partitioned_returns: List[AssetsReturnsTurbulencePartitionedPost200ResponseAssetsInnerAssetTurbulencePartitionedReturnsInner]
        """
        if asset_turbulence_partitioned_returns is None:
            raise ValueError("Invalid value for `asset_turbulence_partitioned_returns`, must not be `None`")
        if asset_turbulence_partitioned_returns is not None and len(asset_turbulence_partitioned_returns) > 4:
            raise ValueError("Invalid value for `asset_turbulence_partitioned_returns`, number of items must be less than or equal to `4`")
        if asset_turbulence_partitioned_returns is not None and len(asset_turbulence_partitioned_returns) < 2:
            raise ValueError("Invalid value for `asset_turbulence_partitioned_returns`, number of items must be greater than or equal to `2`")

        self._asset_turbulence_partitioned_returns = asset_turbulence_partitioned_returns

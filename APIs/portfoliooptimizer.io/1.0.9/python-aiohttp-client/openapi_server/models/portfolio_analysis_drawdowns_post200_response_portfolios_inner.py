# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.portfolio_analysis_drawdowns_post200_response_portfolios_inner_portfolio_worst_drawdowns_inner import PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner
from openapi_server import util


class PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, portfolio_drawdowns: List[float]=None, portfolio_worst_drawdowns: List[PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner]=None):
        """PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInner - a model defined in OpenAPI

        :param portfolio_drawdowns: The portfolio_drawdowns of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInner.
        :param portfolio_worst_drawdowns: The portfolio_worst_drawdowns of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInner.
        """
        self.openapi_types = {
            'portfolio_drawdowns': List[float],
            'portfolio_worst_drawdowns': List[PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner]
        }

        self.attribute_map = {
            'portfolio_drawdowns': 'portfolioDrawdowns',
            'portfolio_worst_drawdowns': 'portfolioWorstDrawdowns'
        }

        self._portfolio_drawdowns = portfolio_drawdowns
        self._portfolio_worst_drawdowns = portfolio_worst_drawdowns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _portfolio_analysis_drawdowns_post_200_response_portfolios_inner of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def portfolio_drawdowns(self):
        """Gets the portfolio_drawdowns of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInner.

        portfolioDrawdowns[t] is the value of the drawdown function at the time t

        :return: The portfolio_drawdowns of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInner.
        :rtype: List[float]
        """
        return self._portfolio_drawdowns

    @portfolio_drawdowns.setter
    def portfolio_drawdowns(self, portfolio_drawdowns):
        """Sets the portfolio_drawdowns of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInner.

        portfolioDrawdowns[t] is the value of the drawdown function at the time t

        :param portfolio_drawdowns: The portfolio_drawdowns of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInner.
        :type portfolio_drawdowns: List[float]
        """
        if portfolio_drawdowns is None:
            raise ValueError("Invalid value for `portfolio_drawdowns`, must not be `None`")
        if portfolio_drawdowns is not None and len(portfolio_drawdowns) < 1:
            raise ValueError("Invalid value for `portfolio_drawdowns`, number of items must be greater than or equal to `1`")

        self._portfolio_drawdowns = portfolio_drawdowns

    @property
    def portfolio_worst_drawdowns(self):
        """Gets the portfolio_worst_drawdowns of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInner.


        :return: The portfolio_worst_drawdowns of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInner.
        :rtype: List[PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner]
        """
        return self._portfolio_worst_drawdowns

    @portfolio_worst_drawdowns.setter
    def portfolio_worst_drawdowns(self, portfolio_worst_drawdowns):
        """Sets the portfolio_worst_drawdowns of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInner.


        :param portfolio_worst_drawdowns: The portfolio_worst_drawdowns of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInner.
        :type portfolio_worst_drawdowns: List[PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner]
        """
        if portfolio_worst_drawdowns is None:
            raise ValueError("Invalid value for `portfolio_worst_drawdowns`, must not be `None`")
        if portfolio_worst_drawdowns is not None and len(portfolio_worst_drawdowns) < 1:
            raise ValueError("Invalid value for `portfolio_worst_drawdowns`, number of items must be greater than or equal to `1`")

        self._portfolio_worst_drawdowns = portfolio_worst_drawdowns

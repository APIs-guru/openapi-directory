# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assets_volatility_post_request_one_of_assets_inner import AssetsVolatilityPostRequestOneOfAssetsInner
from openapi_server import util


class AssetsVolatilityPostRequestOneOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: List[AssetsVolatilityPostRequestOneOfAssetsInner]=None):
        """AssetsVolatilityPostRequestOneOf - a model defined in OpenAPI

        :param assets: The assets of this AssetsVolatilityPostRequestOneOf.
        """
        self.openapi_types = {
            'assets': List[AssetsVolatilityPostRequestOneOfAssetsInner]
        }

        self.attribute_map = {
            'assets': 'assets'
        }

        self._assets = assets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetsVolatilityPostRequestOneOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _assets_volatility_post_request_oneOf of this AssetsVolatilityPostRequestOneOf.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this AssetsVolatilityPostRequestOneOf.


        :return: The assets of this AssetsVolatilityPostRequestOneOf.
        :rtype: List[AssetsVolatilityPostRequestOneOfAssetsInner]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this AssetsVolatilityPostRequestOneOf.


        :param assets: The assets of this AssetsVolatilityPostRequestOneOf.
        :type assets: List[AssetsVolatilityPostRequestOneOfAssetsInner]
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")
        if assets is not None and len(assets) < 1:
            raise ValueError("Invalid value for `assets`, number of items must be greater than or equal to `1`")

        self._assets = assets

# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PortfolioAnalysisFactorsExposuresPost200ResponsePortfoliosInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, portfolio_alpha: float=None, portfolio_betas: List[float]=None, portfolio_r_squared: float=None):
        """PortfolioAnalysisFactorsExposuresPost200ResponsePortfoliosInner - a model defined in OpenAPI

        :param portfolio_alpha: The portfolio_alpha of this PortfolioAnalysisFactorsExposuresPost200ResponsePortfoliosInner.
        :param portfolio_betas: The portfolio_betas of this PortfolioAnalysisFactorsExposuresPost200ResponsePortfoliosInner.
        :param portfolio_r_squared: The portfolio_r_squared of this PortfolioAnalysisFactorsExposuresPost200ResponsePortfoliosInner.
        """
        self.openapi_types = {
            'portfolio_alpha': float,
            'portfolio_betas': List[float],
            'portfolio_r_squared': float
        }

        self.attribute_map = {
            'portfolio_alpha': 'portfolioAlpha',
            'portfolio_betas': 'portfolioBetas',
            'portfolio_r_squared': 'portfolioRSquared'
        }

        self._portfolio_alpha = portfolio_alpha
        self._portfolio_betas = portfolio_betas
        self._portfolio_r_squared = portfolio_r_squared

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioAnalysisFactorsExposuresPost200ResponsePortfoliosInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _portfolio_analysis_factors_exposures_post_200_response_portfolios_inner of this PortfolioAnalysisFactorsExposuresPost200ResponsePortfoliosInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def portfolio_alpha(self):
        """Gets the portfolio_alpha of this PortfolioAnalysisFactorsExposuresPost200ResponsePortfoliosInner.

        The portfolio alpha, which correponds to the portion of the portfolio returns that cannot be explained by the portfolio factor exposures

        :return: The portfolio_alpha of this PortfolioAnalysisFactorsExposuresPost200ResponsePortfoliosInner.
        :rtype: float
        """
        return self._portfolio_alpha

    @portfolio_alpha.setter
    def portfolio_alpha(self, portfolio_alpha):
        """Sets the portfolio_alpha of this PortfolioAnalysisFactorsExposuresPost200ResponsePortfoliosInner.

        The portfolio alpha, which correponds to the portion of the portfolio returns that cannot be explained by the portfolio factor exposures

        :param portfolio_alpha: The portfolio_alpha of this PortfolioAnalysisFactorsExposuresPost200ResponsePortfoliosInner.
        :type portfolio_alpha: float
        """
        if portfolio_alpha is None:
            raise ValueError("Invalid value for `portfolio_alpha`, must not be `None`")

        self._portfolio_alpha = portfolio_alpha

    @property
    def portfolio_betas(self):
        """Gets the portfolio_betas of this PortfolioAnalysisFactorsExposuresPost200ResponsePortfoliosInner.

        The portfolio betas, which correspond to the portfolio factor exposures

        :return: The portfolio_betas of this PortfolioAnalysisFactorsExposuresPost200ResponsePortfoliosInner.
        :rtype: List[float]
        """
        return self._portfolio_betas

    @portfolio_betas.setter
    def portfolio_betas(self, portfolio_betas):
        """Sets the portfolio_betas of this PortfolioAnalysisFactorsExposuresPost200ResponsePortfoliosInner.

        The portfolio betas, which correspond to the portfolio factor exposures

        :param portfolio_betas: The portfolio_betas of this PortfolioAnalysisFactorsExposuresPost200ResponsePortfoliosInner.
        :type portfolio_betas: List[float]
        """
        if portfolio_betas is None:
            raise ValueError("Invalid value for `portfolio_betas`, must not be `None`")
        if portfolio_betas is not None and len(portfolio_betas) < 1:
            raise ValueError("Invalid value for `portfolio_betas`, number of items must be greater than or equal to `1`")

        self._portfolio_betas = portfolio_betas

    @property
    def portfolio_r_squared(self):
        """Gets the portfolio_r_squared of this PortfolioAnalysisFactorsExposuresPost200ResponsePortfoliosInner.

        The portfolio R^2, which indicates how much of the variability in the portfolio returns can be explained by the portfolio factor exposures; generally, the higher the R^2 the better the portfolio factor exposures explain the portfolio returns

        :return: The portfolio_r_squared of this PortfolioAnalysisFactorsExposuresPost200ResponsePortfoliosInner.
        :rtype: float
        """
        return self._portfolio_r_squared

    @portfolio_r_squared.setter
    def portfolio_r_squared(self, portfolio_r_squared):
        """Sets the portfolio_r_squared of this PortfolioAnalysisFactorsExposuresPost200ResponsePortfoliosInner.

        The portfolio R^2, which indicates how much of the variability in the portfolio returns can be explained by the portfolio factor exposures; generally, the higher the R^2 the better the portfolio factor exposures explain the portfolio returns

        :param portfolio_r_squared: The portfolio_r_squared of this PortfolioAnalysisFactorsExposuresPost200ResponsePortfoliosInner.
        :type portfolio_r_squared: float
        """
        if portfolio_r_squared is None:
            raise ValueError("Invalid value for `portfolio_r_squared`, must not be `None`")

        self._portfolio_r_squared = portfolio_r_squared

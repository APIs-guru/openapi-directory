# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PortfolioOptimizationMarketCapitalizationWeightedPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: int=None, assets_market_capitalizations: List[float]=None):
        """PortfolioOptimizationMarketCapitalizationWeightedPostRequest - a model defined in OpenAPI

        :param assets: The assets of this PortfolioOptimizationMarketCapitalizationWeightedPostRequest.
        :param assets_market_capitalizations: The assets_market_capitalizations of this PortfolioOptimizationMarketCapitalizationWeightedPostRequest.
        """
        self.openapi_types = {
            'assets': int,
            'assets_market_capitalizations': List[float]
        }

        self.attribute_map = {
            'assets': 'assets',
            'assets_market_capitalizations': 'assetsMarketCapitalizations'
        }

        self._assets = assets
        self._assets_market_capitalizations = assets_market_capitalizations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioOptimizationMarketCapitalizationWeightedPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _portfolio_optimization_market_capitalization_weighted_post_request of this PortfolioOptimizationMarketCapitalizationWeightedPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this PortfolioOptimizationMarketCapitalizationWeightedPostRequest.

        The number of assets

        :return: The assets of this PortfolioOptimizationMarketCapitalizationWeightedPostRequest.
        :rtype: int
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this PortfolioOptimizationMarketCapitalizationWeightedPostRequest.

        The number of assets

        :param assets: The assets of this PortfolioOptimizationMarketCapitalizationWeightedPostRequest.
        :type assets: int
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")
        if assets is not None and assets < 2:
            raise ValueError("Invalid value for `assets`, must be a value greater than or equal to `2`")

        self._assets = assets

    @property
    def assets_market_capitalizations(self):
        """Gets the assets_market_capitalizations of this PortfolioOptimizationMarketCapitalizationWeightedPostRequest.

        assetsMarketCapitalizations[i] is the market capitalization of the asset i

        :return: The assets_market_capitalizations of this PortfolioOptimizationMarketCapitalizationWeightedPostRequest.
        :rtype: List[float]
        """
        return self._assets_market_capitalizations

    @assets_market_capitalizations.setter
    def assets_market_capitalizations(self, assets_market_capitalizations):
        """Sets the assets_market_capitalizations of this PortfolioOptimizationMarketCapitalizationWeightedPostRequest.

        assetsMarketCapitalizations[i] is the market capitalization of the asset i

        :param assets_market_capitalizations: The assets_market_capitalizations of this PortfolioOptimizationMarketCapitalizationWeightedPostRequest.
        :type assets_market_capitalizations: List[float]
        """
        if assets_market_capitalizations is None:
            raise ValueError("Invalid value for `assets_market_capitalizations`, must not be `None`")
        if assets_market_capitalizations is not None and len(assets_market_capitalizations) < 2:
            raise ValueError("Invalid value for `assets_market_capitalizations`, number of items must be greater than or equal to `2`")

        self._assets_market_capitalizations = assets_market_capitalizations

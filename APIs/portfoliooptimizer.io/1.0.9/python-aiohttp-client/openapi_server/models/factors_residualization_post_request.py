# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.factors_residualization_post_request_factors_inner import FactorsResidualizationPostRequestFactorsInner
from openapi_server import util


class FactorsResidualizationPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, factors: List[FactorsResidualizationPostRequestFactorsInner]=None, residualized_factor: int=None):
        """FactorsResidualizationPostRequest - a model defined in OpenAPI

        :param factors: The factors of this FactorsResidualizationPostRequest.
        :param residualized_factor: The residualized_factor of this FactorsResidualizationPostRequest.
        """
        self.openapi_types = {
            'factors': List[FactorsResidualizationPostRequestFactorsInner],
            'residualized_factor': int
        }

        self.attribute_map = {
            'factors': 'factors',
            'residualized_factor': 'residualizedFactor'
        }

        self._factors = factors
        self._residualized_factor = residualized_factor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FactorsResidualizationPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _factors_residualization_post_request of this FactorsResidualizationPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def factors(self):
        """Gets the factors of this FactorsResidualizationPostRequest.


        :return: The factors of this FactorsResidualizationPostRequest.
        :rtype: List[FactorsResidualizationPostRequestFactorsInner]
        """
        return self._factors

    @factors.setter
    def factors(self, factors):
        """Sets the factors of this FactorsResidualizationPostRequest.


        :param factors: The factors of this FactorsResidualizationPostRequest.
        :type factors: List[FactorsResidualizationPostRequestFactorsInner]
        """
        if factors is None:
            raise ValueError("Invalid value for `factors`, must not be `None`")
        if factors is not None and len(factors) < 2:
            raise ValueError("Invalid value for `factors`, number of items must be greater than or equal to `2`")

        self._factors = factors

    @property
    def residualized_factor(self):
        """Gets the residualized_factor of this FactorsResidualizationPostRequest.

        The index of the factor to residualize

        :return: The residualized_factor of this FactorsResidualizationPostRequest.
        :rtype: int
        """
        return self._residualized_factor

    @residualized_factor.setter
    def residualized_factor(self, residualized_factor):
        """Sets the residualized_factor of this FactorsResidualizationPostRequest.

        The index of the factor to residualize

        :param residualized_factor: The residualized_factor of this FactorsResidualizationPostRequest.
        :type residualized_factor: int
        """
        if residualized_factor is None:
            raise ValueError("Invalid value for `residualized_factor`, must not be `None`")
        if residualized_factor is not None and residualized_factor < 1:
            raise ValueError("Invalid value for `residualized_factor`, must be a value greater than or equal to `1`")

        self._residualized_factor = residualized_factor

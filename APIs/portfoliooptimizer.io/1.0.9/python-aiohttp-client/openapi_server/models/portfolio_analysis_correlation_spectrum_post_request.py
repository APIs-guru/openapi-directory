# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.portfolio_analysis_correlation_spectrum_post_request_one_of import PortfolioAnalysisCorrelationSpectrumPostRequestOneOf
from openapi_server.models.portfolio_analysis_correlation_spectrum_post_request_one_of1 import PortfolioAnalysisCorrelationSpectrumPostRequestOneOf1
from openapi_server.models.portfolio_analysis_correlation_spectrum_post_request_one_of1_assets_inner import PortfolioAnalysisCorrelationSpectrumPostRequestOneOf1AssetsInner
from openapi_server.models.portfolio_analysis_correlation_spectrum_post_request_one_of1_portfolios_inner import PortfolioAnalysisCorrelationSpectrumPostRequestOneOf1PortfoliosInner
from openapi_server import util


class PortfolioAnalysisCorrelationSpectrumPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: List[PortfolioAnalysisCorrelationSpectrumPostRequestOneOf1AssetsInner]=None, assets_covariance_matrix: List[List[float]]=None, portfolios: List[PortfolioAnalysisCorrelationSpectrumPostRequestOneOf1PortfoliosInner]=None):
        """PortfolioAnalysisCorrelationSpectrumPostRequest - a model defined in OpenAPI

        :param assets: The assets of this PortfolioAnalysisCorrelationSpectrumPostRequest.
        :param assets_covariance_matrix: The assets_covariance_matrix of this PortfolioAnalysisCorrelationSpectrumPostRequest.
        :param portfolios: The portfolios of this PortfolioAnalysisCorrelationSpectrumPostRequest.
        """
        self.openapi_types = {
            'assets': List[PortfolioAnalysisCorrelationSpectrumPostRequestOneOf1AssetsInner],
            'assets_covariance_matrix': List[List[float]],
            'portfolios': List[PortfolioAnalysisCorrelationSpectrumPostRequestOneOf1PortfoliosInner]
        }

        self.attribute_map = {
            'assets': 'assets',
            'assets_covariance_matrix': 'assetsCovarianceMatrix',
            'portfolios': 'portfolios'
        }

        self._assets = assets
        self._assets_covariance_matrix = assets_covariance_matrix
        self._portfolios = portfolios

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioAnalysisCorrelationSpectrumPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _portfolio_analysis_correlation_spectrum_post_request of this PortfolioAnalysisCorrelationSpectrumPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this PortfolioAnalysisCorrelationSpectrumPostRequest.


        :return: The assets of this PortfolioAnalysisCorrelationSpectrumPostRequest.
        :rtype: List[PortfolioAnalysisCorrelationSpectrumPostRequestOneOf1AssetsInner]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this PortfolioAnalysisCorrelationSpectrumPostRequest.


        :param assets: The assets of this PortfolioAnalysisCorrelationSpectrumPostRequest.
        :type assets: List[PortfolioAnalysisCorrelationSpectrumPostRequestOneOf1AssetsInner]
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")
        if assets is not None and len(assets) < 1:
            raise ValueError("Invalid value for `assets`, number of items must be greater than or equal to `1`")

        self._assets = assets

    @property
    def assets_covariance_matrix(self):
        """Gets the assets_covariance_matrix of this PortfolioAnalysisCorrelationSpectrumPostRequest.

        assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j

        :return: The assets_covariance_matrix of this PortfolioAnalysisCorrelationSpectrumPostRequest.
        :rtype: List[List[float]]
        """
        return self._assets_covariance_matrix

    @assets_covariance_matrix.setter
    def assets_covariance_matrix(self, assets_covariance_matrix):
        """Sets the assets_covariance_matrix of this PortfolioAnalysisCorrelationSpectrumPostRequest.

        assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j

        :param assets_covariance_matrix: The assets_covariance_matrix of this PortfolioAnalysisCorrelationSpectrumPostRequest.
        :type assets_covariance_matrix: List[List[float]]
        """
        if assets_covariance_matrix is None:
            raise ValueError("Invalid value for `assets_covariance_matrix`, must not be `None`")
        if assets_covariance_matrix is not None and len(assets_covariance_matrix) < 2:
            raise ValueError("Invalid value for `assets_covariance_matrix`, number of items must be greater than or equal to `2`")

        self._assets_covariance_matrix = assets_covariance_matrix

    @property
    def portfolios(self):
        """Gets the portfolios of this PortfolioAnalysisCorrelationSpectrumPostRequest.


        :return: The portfolios of this PortfolioAnalysisCorrelationSpectrumPostRequest.
        :rtype: List[PortfolioAnalysisCorrelationSpectrumPostRequestOneOf1PortfoliosInner]
        """
        return self._portfolios

    @portfolios.setter
    def portfolios(self, portfolios):
        """Sets the portfolios of this PortfolioAnalysisCorrelationSpectrumPostRequest.


        :param portfolios: The portfolios of this PortfolioAnalysisCorrelationSpectrumPostRequest.
        :type portfolios: List[PortfolioAnalysisCorrelationSpectrumPostRequestOneOf1PortfoliosInner]
        """
        if portfolios is None:
            raise ValueError("Invalid value for `portfolios`, must not be `None`")
        if portfolios is not None and len(portfolios) < 1:
            raise ValueError("Invalid value for `portfolios`, number of items must be greater than or equal to `1`")

        self._portfolios = portfolios

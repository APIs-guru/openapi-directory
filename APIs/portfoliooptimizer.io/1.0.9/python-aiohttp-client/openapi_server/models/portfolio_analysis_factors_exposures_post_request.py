# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.portfolio_analysis_factors_exposures_post_request_factors_inner import PortfolioAnalysisFactorsExposuresPostRequestFactorsInner
from openapi_server.models.portfolio_analysis_factors_exposures_post_request_portfolios_inner import PortfolioAnalysisFactorsExposuresPostRequestPortfoliosInner
from openapi_server import util


class PortfolioAnalysisFactorsExposuresPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, factors: List[PortfolioAnalysisFactorsExposuresPostRequestFactorsInner]=None, portfolios: List[PortfolioAnalysisFactorsExposuresPostRequestPortfoliosInner]=None):
        """PortfolioAnalysisFactorsExposuresPostRequest - a model defined in OpenAPI

        :param factors: The factors of this PortfolioAnalysisFactorsExposuresPostRequest.
        :param portfolios: The portfolios of this PortfolioAnalysisFactorsExposuresPostRequest.
        """
        self.openapi_types = {
            'factors': List[PortfolioAnalysisFactorsExposuresPostRequestFactorsInner],
            'portfolios': List[PortfolioAnalysisFactorsExposuresPostRequestPortfoliosInner]
        }

        self.attribute_map = {
            'factors': 'factors',
            'portfolios': 'portfolios'
        }

        self._factors = factors
        self._portfolios = portfolios

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioAnalysisFactorsExposuresPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _portfolio_analysis_factors_exposures_post_request of this PortfolioAnalysisFactorsExposuresPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def factors(self):
        """Gets the factors of this PortfolioAnalysisFactorsExposuresPostRequest.


        :return: The factors of this PortfolioAnalysisFactorsExposuresPostRequest.
        :rtype: List[PortfolioAnalysisFactorsExposuresPostRequestFactorsInner]
        """
        return self._factors

    @factors.setter
    def factors(self, factors):
        """Sets the factors of this PortfolioAnalysisFactorsExposuresPostRequest.


        :param factors: The factors of this PortfolioAnalysisFactorsExposuresPostRequest.
        :type factors: List[PortfolioAnalysisFactorsExposuresPostRequestFactorsInner]
        """
        if factors is not None and len(factors) < 1:
            raise ValueError("Invalid value for `factors`, number of items must be greater than or equal to `1`")

        self._factors = factors

    @property
    def portfolios(self):
        """Gets the portfolios of this PortfolioAnalysisFactorsExposuresPostRequest.


        :return: The portfolios of this PortfolioAnalysisFactorsExposuresPostRequest.
        :rtype: List[PortfolioAnalysisFactorsExposuresPostRequestPortfoliosInner]
        """
        return self._portfolios

    @portfolios.setter
    def portfolios(self, portfolios):
        """Sets the portfolios of this PortfolioAnalysisFactorsExposuresPostRequest.


        :param portfolios: The portfolios of this PortfolioAnalysisFactorsExposuresPostRequest.
        :type portfolios: List[PortfolioAnalysisFactorsExposuresPostRequestPortfoliosInner]
        """
        if portfolios is None:
            raise ValueError("Invalid value for `portfolios`, must not be `None`")
        if portfolios is not None and len(portfolios) < 1:
            raise ValueError("Invalid value for `portfolios`, number of items must be greater than or equal to `1`")

        self._portfolios = portfolios

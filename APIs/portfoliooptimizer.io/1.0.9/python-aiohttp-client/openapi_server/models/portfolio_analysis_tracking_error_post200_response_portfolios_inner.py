# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PortfolioAnalysisTrackingErrorPost200ResponsePortfoliosInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, portfolio_tracking_error: float=None):
        """PortfolioAnalysisTrackingErrorPost200ResponsePortfoliosInner - a model defined in OpenAPI

        :param portfolio_tracking_error: The portfolio_tracking_error of this PortfolioAnalysisTrackingErrorPost200ResponsePortfoliosInner.
        """
        self.openapi_types = {
            'portfolio_tracking_error': float
        }

        self.attribute_map = {
            'portfolio_tracking_error': 'portfolioTrackingError'
        }

        self._portfolio_tracking_error = portfolio_tracking_error

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioAnalysisTrackingErrorPost200ResponsePortfoliosInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _portfolio_analysis_tracking_error_post_200_response_portfolios_inner of this PortfolioAnalysisTrackingErrorPost200ResponsePortfoliosInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def portfolio_tracking_error(self):
        """Gets the portfolio_tracking_error of this PortfolioAnalysisTrackingErrorPost200ResponsePortfoliosInner.

        The tracking error of the portfolio

        :return: The portfolio_tracking_error of this PortfolioAnalysisTrackingErrorPost200ResponsePortfoliosInner.
        :rtype: float
        """
        return self._portfolio_tracking_error

    @portfolio_tracking_error.setter
    def portfolio_tracking_error(self, portfolio_tracking_error):
        """Sets the portfolio_tracking_error of this PortfolioAnalysisTrackingErrorPost200ResponsePortfoliosInner.

        The tracking error of the portfolio

        :param portfolio_tracking_error: The portfolio_tracking_error of this PortfolioAnalysisTrackingErrorPost200ResponsePortfoliosInner.
        :type portfolio_tracking_error: float
        """
        if portfolio_tracking_error is None:
            raise ValueError("Invalid value for `portfolio_tracking_error`, must not be `None`")
        if portfolio_tracking_error is not None and portfolio_tracking_error < 0:
            raise ValueError("Invalid value for `portfolio_tracking_error`, must be a value greater than or equal to `0`")

        self._portfolio_tracking_error = portfolio_tracking_error

# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetsVariancePostRequestOneOf1AssetsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_volatility: float=None):
        """AssetsVariancePostRequestOneOf1AssetsInner - a model defined in OpenAPI

        :param asset_volatility: The asset_volatility of this AssetsVariancePostRequestOneOf1AssetsInner.
        """
        self.openapi_types = {
            'asset_volatility': float
        }

        self.attribute_map = {
            'asset_volatility': 'assetVolatility'
        }

        self._asset_volatility = asset_volatility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetsVariancePostRequestOneOf1AssetsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _assets_variance_post_request_oneOf_1_assets_inner of this AssetsVariancePostRequestOneOf1AssetsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_volatility(self):
        """Gets the asset_volatility of this AssetsVariancePostRequestOneOf1AssetsInner.

        The asset volatility

        :return: The asset_volatility of this AssetsVariancePostRequestOneOf1AssetsInner.
        :rtype: float
        """
        return self._asset_volatility

    @asset_volatility.setter
    def asset_volatility(self, asset_volatility):
        """Sets the asset_volatility of this AssetsVariancePostRequestOneOf1AssetsInner.

        The asset volatility

        :param asset_volatility: The asset_volatility of this AssetsVariancePostRequestOneOf1AssetsInner.
        :type asset_volatility: float
        """
        if asset_volatility is None:
            raise ValueError("Invalid value for `asset_volatility`, must not be `None`")
        if asset_volatility is not None and asset_volatility < 0:
            raise ValueError("Invalid value for `asset_volatility`, must be a value greater than or equal to `0`")

        self._asset_volatility = asset_volatility

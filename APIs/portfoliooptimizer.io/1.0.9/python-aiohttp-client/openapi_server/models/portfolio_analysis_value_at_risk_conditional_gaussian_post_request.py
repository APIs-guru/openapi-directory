# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.portfolio_analysis_value_at_risk_conditional_gaussian_post_request_portfolios_inner import PortfolioAnalysisValueAtRiskConditionalGaussianPostRequestPortfoliosInner
from openapi_server import util


class PortfolioAnalysisValueAtRiskConditionalGaussianPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence_level: float=0.95, portfolios: List[PortfolioAnalysisValueAtRiskConditionalGaussianPostRequestPortfoliosInner]=None):
        """PortfolioAnalysisValueAtRiskConditionalGaussianPostRequest - a model defined in OpenAPI

        :param confidence_level: The confidence_level of this PortfolioAnalysisValueAtRiskConditionalGaussianPostRequest.
        :param portfolios: The portfolios of this PortfolioAnalysisValueAtRiskConditionalGaussianPostRequest.
        """
        self.openapi_types = {
            'confidence_level': float,
            'portfolios': List[PortfolioAnalysisValueAtRiskConditionalGaussianPostRequestPortfoliosInner]
        }

        self.attribute_map = {
            'confidence_level': 'confidenceLevel',
            'portfolios': 'portfolios'
        }

        self._confidence_level = confidence_level
        self._portfolios = portfolios

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioAnalysisValueAtRiskConditionalGaussianPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _portfolio_analysis_value_at_risk_conditional_gaussian_post_request of this PortfolioAnalysisValueAtRiskConditionalGaussianPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence_level(self):
        """Gets the confidence_level of this PortfolioAnalysisValueAtRiskConditionalGaussianPostRequest.

        The confidence level

        :return: The confidence_level of this PortfolioAnalysisValueAtRiskConditionalGaussianPostRequest.
        :rtype: float
        """
        return self._confidence_level

    @confidence_level.setter
    def confidence_level(self, confidence_level):
        """Sets the confidence_level of this PortfolioAnalysisValueAtRiskConditionalGaussianPostRequest.

        The confidence level

        :param confidence_level: The confidence_level of this PortfolioAnalysisValueAtRiskConditionalGaussianPostRequest.
        :type confidence_level: float
        """
        if confidence_level is not None and confidence_level >= 1:
            raise ValueError("Invalid value for `confidence_level`, must be a value less than `1`")
        if confidence_level is not None and confidence_level <= 0:
            raise ValueError("Invalid value for `confidence_level`, must be a value greater than `0`")

        self._confidence_level = confidence_level

    @property
    def portfolios(self):
        """Gets the portfolios of this PortfolioAnalysisValueAtRiskConditionalGaussianPostRequest.


        :return: The portfolios of this PortfolioAnalysisValueAtRiskConditionalGaussianPostRequest.
        :rtype: List[PortfolioAnalysisValueAtRiskConditionalGaussianPostRequestPortfoliosInner]
        """
        return self._portfolios

    @portfolios.setter
    def portfolios(self, portfolios):
        """Sets the portfolios of this PortfolioAnalysisValueAtRiskConditionalGaussianPostRequest.


        :param portfolios: The portfolios of this PortfolioAnalysisValueAtRiskConditionalGaussianPostRequest.
        :type portfolios: List[PortfolioAnalysisValueAtRiskConditionalGaussianPostRequestPortfoliosInner]
        """
        if portfolios is None:
            raise ValueError("Invalid value for `portfolios`, must not be `None`")
        if portfolios is not None and len(portfolios) < 1:
            raise ValueError("Invalid value for `portfolios`, number of items must be greater than or equal to `1`")

        self._portfolios = portfolios

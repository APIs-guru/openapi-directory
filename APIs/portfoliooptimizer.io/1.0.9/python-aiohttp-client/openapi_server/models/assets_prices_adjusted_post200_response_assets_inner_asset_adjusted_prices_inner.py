# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: str=None, dividend_adjusted_close: float=None, fully_adjusted_close: float=None, split_adjusted_close: float=None):
        """AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner - a model defined in OpenAPI

        :param _date: The _date of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.
        :param dividend_adjusted_close: The dividend_adjusted_close of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.
        :param fully_adjusted_close: The fully_adjusted_close of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.
        :param split_adjusted_close: The split_adjusted_close of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.
        """
        self.openapi_types = {
            '_date': str,
            'dividend_adjusted_close': float,
            'fully_adjusted_close': float,
            'split_adjusted_close': float
        }

        self.attribute_map = {
            '_date': 'date',
            'dividend_adjusted_close': 'dividendAdjustedClose',
            'fully_adjusted_close': 'fullyAdjustedClose',
            'split_adjusted_close': 'splitAdjustedClose'
        }

        self.__date = _date
        self._dividend_adjusted_close = dividend_adjusted_close
        self._fully_adjusted_close = fully_adjusted_close
        self._split_adjusted_close = split_adjusted_close

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _assets_prices_adjusted_post_200_response_assets_inner_assetAdjustedPrices_inner of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.

        The date corresponding to the date t in format YYYY-MM-DD

        :return: The _date of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.

        The date corresponding to the date t in format YYYY-MM-DD

        :param _date: The _date of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def dividend_adjusted_close(self):
        """Gets the dividend_adjusted_close of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.

        The dividend(s) adjusted close price of the asset at the date t, only present if dividend(s) information are provided

        :return: The dividend_adjusted_close of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.
        :rtype: float
        """
        return self._dividend_adjusted_close

    @dividend_adjusted_close.setter
    def dividend_adjusted_close(self, dividend_adjusted_close):
        """Sets the dividend_adjusted_close of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.

        The dividend(s) adjusted close price of the asset at the date t, only present if dividend(s) information are provided

        :param dividend_adjusted_close: The dividend_adjusted_close of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.
        :type dividend_adjusted_close: float
        """
        if dividend_adjusted_close is not None and dividend_adjusted_close <= 0:
            raise ValueError("Invalid value for `dividend_adjusted_close`, must be a value greater than `0`")

        self._dividend_adjusted_close = dividend_adjusted_close

    @property
    def fully_adjusted_close(self):
        """Gets the fully_adjusted_close of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.

        The dividend(s) and split(s) adjusted close price of the asset at the date t

        :return: The fully_adjusted_close of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.
        :rtype: float
        """
        return self._fully_adjusted_close

    @fully_adjusted_close.setter
    def fully_adjusted_close(self, fully_adjusted_close):
        """Sets the fully_adjusted_close of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.

        The dividend(s) and split(s) adjusted close price of the asset at the date t

        :param fully_adjusted_close: The fully_adjusted_close of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.
        :type fully_adjusted_close: float
        """
        if fully_adjusted_close is None:
            raise ValueError("Invalid value for `fully_adjusted_close`, must not be `None`")
        if fully_adjusted_close is not None and fully_adjusted_close <= 0:
            raise ValueError("Invalid value for `fully_adjusted_close`, must be a value greater than `0`")

        self._fully_adjusted_close = fully_adjusted_close

    @property
    def split_adjusted_close(self):
        """Gets the split_adjusted_close of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.

        The split(s) adjusted close price of the asset at the date t, only present if split(s) information are provided

        :return: The split_adjusted_close of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.
        :rtype: float
        """
        return self._split_adjusted_close

    @split_adjusted_close.setter
    def split_adjusted_close(self, split_adjusted_close):
        """Sets the split_adjusted_close of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.

        The split(s) adjusted close price of the asset at the date t, only present if split(s) information are provided

        :param split_adjusted_close: The split_adjusted_close of this AssetsPricesAdjustedPost200ResponseAssetsInnerAssetAdjustedPricesInner.
        :type split_adjusted_close: float
        """
        if split_adjusted_close is not None and split_adjusted_close <= 0:
            raise ValueError("Invalid value for `split_adjusted_close`, must be a value greater than `0`")

        self._split_adjusted_close = split_adjusted_close

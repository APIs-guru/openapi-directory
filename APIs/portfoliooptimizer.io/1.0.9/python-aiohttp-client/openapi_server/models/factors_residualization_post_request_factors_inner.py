# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FactorsResidualizationPostRequestFactorsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, factor_returns: List[float]=None):
        """FactorsResidualizationPostRequestFactorsInner - a model defined in OpenAPI

        :param factor_returns: The factor_returns of this FactorsResidualizationPostRequestFactorsInner.
        """
        self.openapi_types = {
            'factor_returns': List[float]
        }

        self.attribute_map = {
            'factor_returns': 'factorReturns'
        }

        self._factor_returns = factor_returns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FactorsResidualizationPostRequestFactorsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _factors_residualization_post_request_factors_inner of this FactorsResidualizationPostRequestFactorsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def factor_returns(self):
        """Gets the factor_returns of this FactorsResidualizationPostRequestFactorsInner.

        factorReturns[t] is the return of the factor at the time t; all the factorReturns arrays must have the same length

        :return: The factor_returns of this FactorsResidualizationPostRequestFactorsInner.
        :rtype: List[float]
        """
        return self._factor_returns

    @factor_returns.setter
    def factor_returns(self, factor_returns):
        """Sets the factor_returns of this FactorsResidualizationPostRequestFactorsInner.

        factorReturns[t] is the return of the factor at the time t; all the factorReturns arrays must have the same length

        :param factor_returns: The factor_returns of this FactorsResidualizationPostRequestFactorsInner.
        :type factor_returns: List[float]
        """
        if factor_returns is None:
            raise ValueError("Invalid value for `factor_returns`, must not be `None`")
        if factor_returns is not None and len(factor_returns) < 2:
            raise ValueError("Invalid value for `factor_returns`, number of items must be greater than or equal to `2`")

        self._factor_returns = factor_returns

# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assets_correlation_matrix_theory_implied_post_request_assets_inner import AssetsCorrelationMatrixTheoryImpliedPostRequestAssetsInner
from openapi_server import util


class AssetsCorrelationMatrixTheoryImpliedPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: List[AssetsCorrelationMatrixTheoryImpliedPostRequestAssetsInner]=None, assets_correlation_matrix: List[List[float]]=None, clustering_method: str='averageLinkage'):
        """AssetsCorrelationMatrixTheoryImpliedPostRequest - a model defined in OpenAPI

        :param assets: The assets of this AssetsCorrelationMatrixTheoryImpliedPostRequest.
        :param assets_correlation_matrix: The assets_correlation_matrix of this AssetsCorrelationMatrixTheoryImpliedPostRequest.
        :param clustering_method: The clustering_method of this AssetsCorrelationMatrixTheoryImpliedPostRequest.
        """
        self.openapi_types = {
            'assets': List[AssetsCorrelationMatrixTheoryImpliedPostRequestAssetsInner],
            'assets_correlation_matrix': List[List[float]],
            'clustering_method': str
        }

        self.attribute_map = {
            'assets': 'assets',
            'assets_correlation_matrix': 'assetsCorrelationMatrix',
            'clustering_method': 'clusteringMethod'
        }

        self._assets = assets
        self._assets_correlation_matrix = assets_correlation_matrix
        self._clustering_method = clustering_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetsCorrelationMatrixTheoryImpliedPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _assets_correlation_matrix_theory_implied_post_request of this AssetsCorrelationMatrixTheoryImpliedPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this AssetsCorrelationMatrixTheoryImpliedPostRequest.


        :return: The assets of this AssetsCorrelationMatrixTheoryImpliedPostRequest.
        :rtype: List[AssetsCorrelationMatrixTheoryImpliedPostRequestAssetsInner]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this AssetsCorrelationMatrixTheoryImpliedPostRequest.


        :param assets: The assets of this AssetsCorrelationMatrixTheoryImpliedPostRequest.
        :type assets: List[AssetsCorrelationMatrixTheoryImpliedPostRequestAssetsInner]
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")
        if assets is not None and len(assets) < 2:
            raise ValueError("Invalid value for `assets`, number of items must be greater than or equal to `2`")

        self._assets = assets

    @property
    def assets_correlation_matrix(self):
        """Gets the assets_correlation_matrix of this AssetsCorrelationMatrixTheoryImpliedPostRequest.

        assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j

        :return: The assets_correlation_matrix of this AssetsCorrelationMatrixTheoryImpliedPostRequest.
        :rtype: List[List[float]]
        """
        return self._assets_correlation_matrix

    @assets_correlation_matrix.setter
    def assets_correlation_matrix(self, assets_correlation_matrix):
        """Sets the assets_correlation_matrix of this AssetsCorrelationMatrixTheoryImpliedPostRequest.

        assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j

        :param assets_correlation_matrix: The assets_correlation_matrix of this AssetsCorrelationMatrixTheoryImpliedPostRequest.
        :type assets_correlation_matrix: List[List[float]]
        """
        if assets_correlation_matrix is None:
            raise ValueError("Invalid value for `assets_correlation_matrix`, must not be `None`")
        if assets_correlation_matrix is not None and len(assets_correlation_matrix) < 2:
            raise ValueError("Invalid value for `assets_correlation_matrix`, number of items must be greater than or equal to `2`")

        self._assets_correlation_matrix = assets_correlation_matrix

    @property
    def clustering_method(self):
        """Gets the clustering_method of this AssetsCorrelationMatrixTheoryImpliedPostRequest.

        The hierarchical clustering method to use

        :return: The clustering_method of this AssetsCorrelationMatrixTheoryImpliedPostRequest.
        :rtype: str
        """
        return self._clustering_method

    @clustering_method.setter
    def clustering_method(self, clustering_method):
        """Sets the clustering_method of this AssetsCorrelationMatrixTheoryImpliedPostRequest.

        The hierarchical clustering method to use

        :param clustering_method: The clustering_method of this AssetsCorrelationMatrixTheoryImpliedPostRequest.
        :type clustering_method: str
        """
        allowed_values = ["singleLinkage", "averageLinkage", "completeLinkage", "wardLinkage"]  # noqa: E501
        if clustering_method not in allowed_values:
            raise ValueError(
                "Invalid value for `clustering_method` ({0}), must be one of {1}"
                .format(clustering_method, allowed_values)
            )

        self._clustering_method = clustering_method

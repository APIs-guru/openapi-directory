# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assets_correlation_matrix_post_request_one_of_assets_inner import AssetsCorrelationMatrixPostRequestOneOfAssetsInner
from openapi_server.models.portfolio_analysis_mean_variance_efficient_frontier_post_request_constraints import PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints
from openapi_server import util


class PortfolioConstructionMimickingPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: List[AssetsCorrelationMatrixPostRequestOneOfAssetsInner]=None, benchmark_returns: List[float]=None, constraints: PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints=None):
        """PortfolioConstructionMimickingPostRequest - a model defined in OpenAPI

        :param assets: The assets of this PortfolioConstructionMimickingPostRequest.
        :param benchmark_returns: The benchmark_returns of this PortfolioConstructionMimickingPostRequest.
        :param constraints: The constraints of this PortfolioConstructionMimickingPostRequest.
        """
        self.openapi_types = {
            'assets': List[AssetsCorrelationMatrixPostRequestOneOfAssetsInner],
            'benchmark_returns': List[float],
            'constraints': PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints
        }

        self.attribute_map = {
            'assets': 'assets',
            'benchmark_returns': 'benchmarkReturns',
            'constraints': 'constraints'
        }

        self._assets = assets
        self._benchmark_returns = benchmark_returns
        self._constraints = constraints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioConstructionMimickingPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _portfolio_construction_mimicking_post_request of this PortfolioConstructionMimickingPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this PortfolioConstructionMimickingPostRequest.


        :return: The assets of this PortfolioConstructionMimickingPostRequest.
        :rtype: List[AssetsCorrelationMatrixPostRequestOneOfAssetsInner]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this PortfolioConstructionMimickingPostRequest.


        :param assets: The assets of this PortfolioConstructionMimickingPostRequest.
        :type assets: List[AssetsCorrelationMatrixPostRequestOneOfAssetsInner]
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")
        if assets is not None and len(assets) < 2:
            raise ValueError("Invalid value for `assets`, number of items must be greater than or equal to `2`")

        self._assets = assets

    @property
    def benchmark_returns(self):
        """Gets the benchmark_returns of this PortfolioConstructionMimickingPostRequest.

        benchmarkReturns[t] is the return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the assetReturns arrays

        :return: The benchmark_returns of this PortfolioConstructionMimickingPostRequest.
        :rtype: List[float]
        """
        return self._benchmark_returns

    @benchmark_returns.setter
    def benchmark_returns(self, benchmark_returns):
        """Sets the benchmark_returns of this PortfolioConstructionMimickingPostRequest.

        benchmarkReturns[t] is the return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the assetReturns arrays

        :param benchmark_returns: The benchmark_returns of this PortfolioConstructionMimickingPostRequest.
        :type benchmark_returns: List[float]
        """
        if benchmark_returns is None:
            raise ValueError("Invalid value for `benchmark_returns`, must not be `None`")
        if benchmark_returns is not None and len(benchmark_returns) < 2:
            raise ValueError("Invalid value for `benchmark_returns`, number of items must be greater than or equal to `2`")

        self._benchmark_returns = benchmark_returns

    @property
    def constraints(self):
        """Gets the constraints of this PortfolioConstructionMimickingPostRequest.


        :return: The constraints of this PortfolioConstructionMimickingPostRequest.
        :rtype: PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this PortfolioConstructionMimickingPostRequest.


        :param constraints: The constraints of this PortfolioConstructionMimickingPostRequest.
        :type constraints: PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints
        """

        self._constraints = constraints

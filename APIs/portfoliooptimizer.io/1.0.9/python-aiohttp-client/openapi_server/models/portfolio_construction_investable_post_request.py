# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PortfolioConstructionInvestablePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: int=None, assets_groups: List[list[int]]=None, assets_groups_weights: List[float]=None, assets_minimum_notional_values: List[float]=None, assets_minimum_positions: List[float]=None, assets_prices: List[float]=None, assets_size_lots: List[float]=None, assets_weights: List[float]=None, maximum_assets_groups_weights: List[float]=None, portfolio_value: float=None):
        """PortfolioConstructionInvestablePostRequest - a model defined in OpenAPI

        :param assets: The assets of this PortfolioConstructionInvestablePostRequest.
        :param assets_groups: The assets_groups of this PortfolioConstructionInvestablePostRequest.
        :param assets_groups_weights: The assets_groups_weights of this PortfolioConstructionInvestablePostRequest.
        :param assets_minimum_notional_values: The assets_minimum_notional_values of this PortfolioConstructionInvestablePostRequest.
        :param assets_minimum_positions: The assets_minimum_positions of this PortfolioConstructionInvestablePostRequest.
        :param assets_prices: The assets_prices of this PortfolioConstructionInvestablePostRequest.
        :param assets_size_lots: The assets_size_lots of this PortfolioConstructionInvestablePostRequest.
        :param assets_weights: The assets_weights of this PortfolioConstructionInvestablePostRequest.
        :param maximum_assets_groups_weights: The maximum_assets_groups_weights of this PortfolioConstructionInvestablePostRequest.
        :param portfolio_value: The portfolio_value of this PortfolioConstructionInvestablePostRequest.
        """
        self.openapi_types = {
            'assets': int,
            'assets_groups': List[list[int]],
            'assets_groups_weights': List[float],
            'assets_minimum_notional_values': List[float],
            'assets_minimum_positions': List[float],
            'assets_prices': List[float],
            'assets_size_lots': List[float],
            'assets_weights': List[float],
            'maximum_assets_groups_weights': List[float],
            'portfolio_value': float
        }

        self.attribute_map = {
            'assets': 'assets',
            'assets_groups': 'assetsGroups',
            'assets_groups_weights': 'assetsGroupsWeights',
            'assets_minimum_notional_values': 'assetsMinimumNotionalValues',
            'assets_minimum_positions': 'assetsMinimumPositions',
            'assets_prices': 'assetsPrices',
            'assets_size_lots': 'assetsSizeLots',
            'assets_weights': 'assetsWeights',
            'maximum_assets_groups_weights': 'maximumAssetsGroupsWeights',
            'portfolio_value': 'portfolioValue'
        }

        self._assets = assets
        self._assets_groups = assets_groups
        self._assets_groups_weights = assets_groups_weights
        self._assets_minimum_notional_values = assets_minimum_notional_values
        self._assets_minimum_positions = assets_minimum_positions
        self._assets_prices = assets_prices
        self._assets_size_lots = assets_size_lots
        self._assets_weights = assets_weights
        self._maximum_assets_groups_weights = maximum_assets_groups_weights
        self._portfolio_value = portfolio_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioConstructionInvestablePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _portfolio_construction_investable_post_request of this PortfolioConstructionInvestablePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this PortfolioConstructionInvestablePostRequest.

        The number of assets

        :return: The assets of this PortfolioConstructionInvestablePostRequest.
        :rtype: int
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this PortfolioConstructionInvestablePostRequest.

        The number of assets

        :param assets: The assets of this PortfolioConstructionInvestablePostRequest.
        :type assets: int
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")
        if assets is not None and assets < 2:
            raise ValueError("Invalid value for `assets`, must be a value greater than or equal to `2`")

        self._assets = assets

    @property
    def assets_groups(self):
        """Gets the assets_groups of this PortfolioConstructionInvestablePostRequest.


        :return: The assets_groups of this PortfolioConstructionInvestablePostRequest.
        :rtype: List[list[int]]
        """
        return self._assets_groups

    @assets_groups.setter
    def assets_groups(self, assets_groups):
        """Sets the assets_groups of this PortfolioConstructionInvestablePostRequest.


        :param assets_groups: The assets_groups of this PortfolioConstructionInvestablePostRequest.
        :type assets_groups: List[list[int]]
        """
        if assets_groups is not None and len(assets_groups) < 1:
            raise ValueError("Invalid value for `assets_groups`, number of items must be greater than or equal to `1`")

        self._assets_groups = assets_groups

    @property
    def assets_groups_weights(self):
        """Gets the assets_groups_weights of this PortfolioConstructionInvestablePostRequest.

        assetsGroupsWeights[i] is the desired weight of the assets group k in the portfolio, in percentage (can be null to indicate no specific desire); requires assetsGroups to be present

        :return: The assets_groups_weights of this PortfolioConstructionInvestablePostRequest.
        :rtype: List[float]
        """
        return self._assets_groups_weights

    @assets_groups_weights.setter
    def assets_groups_weights(self, assets_groups_weights):
        """Sets the assets_groups_weights of this PortfolioConstructionInvestablePostRequest.

        assetsGroupsWeights[i] is the desired weight of the assets group k in the portfolio, in percentage (can be null to indicate no specific desire); requires assetsGroups to be present

        :param assets_groups_weights: The assets_groups_weights of this PortfolioConstructionInvestablePostRequest.
        :type assets_groups_weights: List[float]
        """
        if assets_groups_weights is not None and len(assets_groups_weights) < 1:
            raise ValueError("Invalid value for `assets_groups_weights`, number of items must be greater than or equal to `1`")

        self._assets_groups_weights = assets_groups_weights

    @property
    def assets_minimum_notional_values(self):
        """Gets the assets_minimum_notional_values of this PortfolioConstructionInvestablePostRequest.

        assetsMinimumNotionalValues[i] is the minimum monetary value that the position in the asset i is required to represent when the asset i is included in the portfolio

        :return: The assets_minimum_notional_values of this PortfolioConstructionInvestablePostRequest.
        :rtype: List[float]
        """
        return self._assets_minimum_notional_values

    @assets_minimum_notional_values.setter
    def assets_minimum_notional_values(self, assets_minimum_notional_values):
        """Sets the assets_minimum_notional_values of this PortfolioConstructionInvestablePostRequest.

        assetsMinimumNotionalValues[i] is the minimum monetary value that the position in the asset i is required to represent when the asset i is included in the portfolio

        :param assets_minimum_notional_values: The assets_minimum_notional_values of this PortfolioConstructionInvestablePostRequest.
        :type assets_minimum_notional_values: List[float]
        """
        if assets_minimum_notional_values is not None and len(assets_minimum_notional_values) < 2:
            raise ValueError("Invalid value for `assets_minimum_notional_values`, number of items must be greater than or equal to `2`")

        self._assets_minimum_notional_values = assets_minimum_notional_values

    @property
    def assets_minimum_positions(self):
        """Gets the assets_minimum_positions of this PortfolioConstructionInvestablePostRequest.

        assetsMinimumPositions[i] is the minimum number of shares of the asset i that is required to purchase when the asset i is included in the portfolio (usual values are the same as for assetsSizeLots)

        :return: The assets_minimum_positions of this PortfolioConstructionInvestablePostRequest.
        :rtype: List[float]
        """
        return self._assets_minimum_positions

    @assets_minimum_positions.setter
    def assets_minimum_positions(self, assets_minimum_positions):
        """Sets the assets_minimum_positions of this PortfolioConstructionInvestablePostRequest.

        assetsMinimumPositions[i] is the minimum number of shares of the asset i that is required to purchase when the asset i is included in the portfolio (usual values are the same as for assetsSizeLots)

        :param assets_minimum_positions: The assets_minimum_positions of this PortfolioConstructionInvestablePostRequest.
        :type assets_minimum_positions: List[float]
        """
        if assets_minimum_positions is not None and len(assets_minimum_positions) < 2:
            raise ValueError("Invalid value for `assets_minimum_positions`, number of items must be greater than or equal to `2`")

        self._assets_minimum_positions = assets_minimum_positions

    @property
    def assets_prices(self):
        """Gets the assets_prices of this PortfolioConstructionInvestablePostRequest.

        assetsPrices[i] is the price of the asset i

        :return: The assets_prices of this PortfolioConstructionInvestablePostRequest.
        :rtype: List[float]
        """
        return self._assets_prices

    @assets_prices.setter
    def assets_prices(self, assets_prices):
        """Sets the assets_prices of this PortfolioConstructionInvestablePostRequest.

        assetsPrices[i] is the price of the asset i

        :param assets_prices: The assets_prices of this PortfolioConstructionInvestablePostRequest.
        :type assets_prices: List[float]
        """
        if assets_prices is None:
            raise ValueError("Invalid value for `assets_prices`, must not be `None`")
        if assets_prices is not None and len(assets_prices) < 2:
            raise ValueError("Invalid value for `assets_prices`, number of items must be greater than or equal to `2`")

        self._assets_prices = assets_prices

    @property
    def assets_size_lots(self):
        """Gets the assets_size_lots of this PortfolioConstructionInvestablePostRequest.

        assetsSizeLots[i] is the number of shares by which it is required to purchase the asset i (usual values are 1 if the asset needs to be purchased share by share, 100 if the asset needs to be purchased by an integer multiple of 100 shares, and 1/1000000 - e.g. for Robinhood broker - if the asset can be purchased by fractional shares)

        :return: The assets_size_lots of this PortfolioConstructionInvestablePostRequest.
        :rtype: List[float]
        """
        return self._assets_size_lots

    @assets_size_lots.setter
    def assets_size_lots(self, assets_size_lots):
        """Sets the assets_size_lots of this PortfolioConstructionInvestablePostRequest.

        assetsSizeLots[i] is the number of shares by which it is required to purchase the asset i (usual values are 1 if the asset needs to be purchased share by share, 100 if the asset needs to be purchased by an integer multiple of 100 shares, and 1/1000000 - e.g. for Robinhood broker - if the asset can be purchased by fractional shares)

        :param assets_size_lots: The assets_size_lots of this PortfolioConstructionInvestablePostRequest.
        :type assets_size_lots: List[float]
        """
        if assets_size_lots is not None and len(assets_size_lots) < 2:
            raise ValueError("Invalid value for `assets_size_lots`, number of items must be greater than or equal to `2`")

        self._assets_size_lots = assets_size_lots

    @property
    def assets_weights(self):
        """Gets the assets_weights of this PortfolioConstructionInvestablePostRequest.

        assetsWeights[i] is the desired weight of the asset i in the portfolio, in percentage (can be null to indicate no specific desire)

        :return: The assets_weights of this PortfolioConstructionInvestablePostRequest.
        :rtype: List[float]
        """
        return self._assets_weights

    @assets_weights.setter
    def assets_weights(self, assets_weights):
        """Sets the assets_weights of this PortfolioConstructionInvestablePostRequest.

        assetsWeights[i] is the desired weight of the asset i in the portfolio, in percentage (can be null to indicate no specific desire)

        :param assets_weights: The assets_weights of this PortfolioConstructionInvestablePostRequest.
        :type assets_weights: List[float]
        """
        if assets_weights is not None and len(assets_weights) < 2:
            raise ValueError("Invalid value for `assets_weights`, number of items must be greater than or equal to `2`")

        self._assets_weights = assets_weights

    @property
    def maximum_assets_groups_weights(self):
        """Gets the maximum_assets_groups_weights of this PortfolioConstructionInvestablePostRequest.

        maximumAssetsGroupsWeights[k] is the maximum desired weight of the assets group k in the portfolio, in percentage (can be null to indicate no specific desire); requires assetsGroups to be present

        :return: The maximum_assets_groups_weights of this PortfolioConstructionInvestablePostRequest.
        :rtype: List[float]
        """
        return self._maximum_assets_groups_weights

    @maximum_assets_groups_weights.setter
    def maximum_assets_groups_weights(self, maximum_assets_groups_weights):
        """Sets the maximum_assets_groups_weights of this PortfolioConstructionInvestablePostRequest.

        maximumAssetsGroupsWeights[k] is the maximum desired weight of the assets group k in the portfolio, in percentage (can be null to indicate no specific desire); requires assetsGroups to be present

        :param maximum_assets_groups_weights: The maximum_assets_groups_weights of this PortfolioConstructionInvestablePostRequest.
        :type maximum_assets_groups_weights: List[float]
        """
        if maximum_assets_groups_weights is not None and len(maximum_assets_groups_weights) < 1:
            raise ValueError("Invalid value for `maximum_assets_groups_weights`, number of items must be greater than or equal to `1`")

        self._maximum_assets_groups_weights = maximum_assets_groups_weights

    @property
    def portfolio_value(self):
        """Gets the portfolio_value of this PortfolioConstructionInvestablePostRequest.

        The monetary value of the portfolio

        :return: The portfolio_value of this PortfolioConstructionInvestablePostRequest.
        :rtype: float
        """
        return self._portfolio_value

    @portfolio_value.setter
    def portfolio_value(self, portfolio_value):
        """Sets the portfolio_value of this PortfolioConstructionInvestablePostRequest.

        The monetary value of the portfolio

        :param portfolio_value: The portfolio_value of this PortfolioConstructionInvestablePostRequest.
        :type portfolio_value: float
        """
        if portfolio_value is None:
            raise ValueError("Invalid value for `portfolio_value`, must not be `None`")
        if portfolio_value is not None and portfolio_value <= 0:
            raise ValueError("Invalid value for `portfolio_value`, must be a value greater than `0`")

        self._portfolio_value = portfolio_value

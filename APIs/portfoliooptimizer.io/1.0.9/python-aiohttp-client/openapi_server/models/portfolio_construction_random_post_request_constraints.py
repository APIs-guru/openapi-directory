# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PortfolioConstructionRandomPostRequestConstraints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, maximum_assets_weights: List[float]=None, maximum_portfolio_exposure: float=1, minimum_assets_weights: List[float]=None, minimum_portfolio_exposure: float=1):
        """PortfolioConstructionRandomPostRequestConstraints - a model defined in OpenAPI

        :param maximum_assets_weights: The maximum_assets_weights of this PortfolioConstructionRandomPostRequestConstraints.
        :param maximum_portfolio_exposure: The maximum_portfolio_exposure of this PortfolioConstructionRandomPostRequestConstraints.
        :param minimum_assets_weights: The minimum_assets_weights of this PortfolioConstructionRandomPostRequestConstraints.
        :param minimum_portfolio_exposure: The minimum_portfolio_exposure of this PortfolioConstructionRandomPostRequestConstraints.
        """
        self.openapi_types = {
            'maximum_assets_weights': List[float],
            'maximum_portfolio_exposure': float,
            'minimum_assets_weights': List[float],
            'minimum_portfolio_exposure': float
        }

        self.attribute_map = {
            'maximum_assets_weights': 'maximumAssetsWeights',
            'maximum_portfolio_exposure': 'maximumPortfolioExposure',
            'minimum_assets_weights': 'minimumAssetsWeights',
            'minimum_portfolio_exposure': 'minimumPortfolioExposure'
        }

        self._maximum_assets_weights = maximum_assets_weights
        self._maximum_portfolio_exposure = maximum_portfolio_exposure
        self._minimum_assets_weights = minimum_assets_weights
        self._minimum_portfolio_exposure = minimum_portfolio_exposure

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioConstructionRandomPostRequestConstraints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _portfolio_construction_random_post_request_constraints of this PortfolioConstructionRandomPostRequestConstraints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def maximum_assets_weights(self):
        """Gets the maximum_assets_weights of this PortfolioConstructionRandomPostRequestConstraints.

        maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage

        :return: The maximum_assets_weights of this PortfolioConstructionRandomPostRequestConstraints.
        :rtype: List[float]
        """
        return self._maximum_assets_weights

    @maximum_assets_weights.setter
    def maximum_assets_weights(self, maximum_assets_weights):
        """Sets the maximum_assets_weights of this PortfolioConstructionRandomPostRequestConstraints.

        maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage

        :param maximum_assets_weights: The maximum_assets_weights of this PortfolioConstructionRandomPostRequestConstraints.
        :type maximum_assets_weights: List[float]
        """

        self._maximum_assets_weights = maximum_assets_weights

    @property
    def maximum_portfolio_exposure(self):
        """Gets the maximum_portfolio_exposure of this PortfolioConstructionRandomPostRequestConstraints.

        The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure

        :return: The maximum_portfolio_exposure of this PortfolioConstructionRandomPostRequestConstraints.
        :rtype: float
        """
        return self._maximum_portfolio_exposure

    @maximum_portfolio_exposure.setter
    def maximum_portfolio_exposure(self, maximum_portfolio_exposure):
        """Sets the maximum_portfolio_exposure of this PortfolioConstructionRandomPostRequestConstraints.

        The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure

        :param maximum_portfolio_exposure: The maximum_portfolio_exposure of this PortfolioConstructionRandomPostRequestConstraints.
        :type maximum_portfolio_exposure: float
        """
        if maximum_portfolio_exposure is not None and maximum_portfolio_exposure > 1:
            raise ValueError("Invalid value for `maximum_portfolio_exposure`, must be a value less than or equal to `1`")
        if maximum_portfolio_exposure is not None and maximum_portfolio_exposure < 0:
            raise ValueError("Invalid value for `maximum_portfolio_exposure`, must be a value greater than or equal to `0`")

        self._maximum_portfolio_exposure = maximum_portfolio_exposure

    @property
    def minimum_assets_weights(self):
        """Gets the minimum_assets_weights of this PortfolioConstructionRandomPostRequestConstraints.

        minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage

        :return: The minimum_assets_weights of this PortfolioConstructionRandomPostRequestConstraints.
        :rtype: List[float]
        """
        return self._minimum_assets_weights

    @minimum_assets_weights.setter
    def minimum_assets_weights(self, minimum_assets_weights):
        """Sets the minimum_assets_weights of this PortfolioConstructionRandomPostRequestConstraints.

        minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage

        :param minimum_assets_weights: The minimum_assets_weights of this PortfolioConstructionRandomPostRequestConstraints.
        :type minimum_assets_weights: List[float]
        """

        self._minimum_assets_weights = minimum_assets_weights

    @property
    def minimum_portfolio_exposure(self):
        """Gets the minimum_portfolio_exposure of this PortfolioConstructionRandomPostRequestConstraints.

        The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure

        :return: The minimum_portfolio_exposure of this PortfolioConstructionRandomPostRequestConstraints.
        :rtype: float
        """
        return self._minimum_portfolio_exposure

    @minimum_portfolio_exposure.setter
    def minimum_portfolio_exposure(self, minimum_portfolio_exposure):
        """Sets the minimum_portfolio_exposure of this PortfolioConstructionRandomPostRequestConstraints.

        The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure

        :param minimum_portfolio_exposure: The minimum_portfolio_exposure of this PortfolioConstructionRandomPostRequestConstraints.
        :type minimum_portfolio_exposure: float
        """
        if minimum_portfolio_exposure is not None and minimum_portfolio_exposure > 1:
            raise ValueError("Invalid value for `minimum_portfolio_exposure`, must be a value less than or equal to `1`")
        if minimum_portfolio_exposure is not None and minimum_portfolio_exposure < 0:
            raise ValueError("Invalid value for `minimum_portfolio_exposure`, must be a value greater than or equal to `0`")

        self._minimum_portfolio_exposure = minimum_portfolio_exposure

# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetsReturnsAveragePost200ResponseAssetsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_average_return: float=None):
        """AssetsReturnsAveragePost200ResponseAssetsInner - a model defined in OpenAPI

        :param asset_average_return: The asset_average_return of this AssetsReturnsAveragePost200ResponseAssetsInner.
        """
        self.openapi_types = {
            'asset_average_return': float
        }

        self.attribute_map = {
            'asset_average_return': 'assetAverageReturn'
        }

        self._asset_average_return = asset_average_return

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetsReturnsAveragePost200ResponseAssetsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _assets_returns_average_post_200_response_assets_inner of this AssetsReturnsAveragePost200ResponseAssetsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_average_return(self):
        """Gets the asset_average_return of this AssetsReturnsAveragePost200ResponseAssetsInner.

        The arithmetic average return of the asset

        :return: The asset_average_return of this AssetsReturnsAveragePost200ResponseAssetsInner.
        :rtype: float
        """
        return self._asset_average_return

    @asset_average_return.setter
    def asset_average_return(self, asset_average_return):
        """Sets the asset_average_return of this AssetsReturnsAveragePost200ResponseAssetsInner.

        The arithmetic average return of the asset

        :param asset_average_return: The asset_average_return of this AssetsReturnsAveragePost200ResponseAssetsInner.
        :type asset_average_return: float
        """
        if asset_average_return is None:
            raise ValueError("Invalid value for `asset_average_return`, must not be `None`")

        self._asset_average_return = asset_average_return

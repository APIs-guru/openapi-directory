# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PortfolioAnalysisEffectiveNumberOfBetsPostRequestPortfoliosInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets_weights: List[float]=None):
        """PortfolioAnalysisEffectiveNumberOfBetsPostRequestPortfoliosInner - a model defined in OpenAPI

        :param assets_weights: The assets_weights of this PortfolioAnalysisEffectiveNumberOfBetsPostRequestPortfoliosInner.
        """
        self.openapi_types = {
            'assets_weights': List[float]
        }

        self.attribute_map = {
            'assets_weights': 'assetsWeights'
        }

        self._assets_weights = assets_weights

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioAnalysisEffectiveNumberOfBetsPostRequestPortfoliosInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _portfolio_analysis_effective_number_of_bets_post_request_portfolios_inner of this PortfolioAnalysisEffectiveNumberOfBetsPostRequestPortfoliosInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets_weights(self):
        """Gets the assets_weights of this PortfolioAnalysisEffectiveNumberOfBetsPostRequestPortfoliosInner.

        assetsWeights[i] is the weight of the asset i in the portfolio, in percentage

        :return: The assets_weights of this PortfolioAnalysisEffectiveNumberOfBetsPostRequestPortfoliosInner.
        :rtype: List[float]
        """
        return self._assets_weights

    @assets_weights.setter
    def assets_weights(self, assets_weights):
        """Sets the assets_weights of this PortfolioAnalysisEffectiveNumberOfBetsPostRequestPortfoliosInner.

        assetsWeights[i] is the weight of the asset i in the portfolio, in percentage

        :param assets_weights: The assets_weights of this PortfolioAnalysisEffectiveNumberOfBetsPostRequestPortfoliosInner.
        :type assets_weights: List[float]
        """
        if assets_weights is None:
            raise ValueError("Invalid value for `assets_weights`, must not be `None`")
        if assets_weights is not None and len(assets_weights) < 2:
            raise ValueError("Invalid value for `assets_weights`, number of items must be greater than or equal to `2`")

        self._assets_weights = assets_weights

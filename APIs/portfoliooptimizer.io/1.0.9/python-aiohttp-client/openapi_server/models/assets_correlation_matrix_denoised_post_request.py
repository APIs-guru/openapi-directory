# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetsCorrelationMatrixDenoisedPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: int=None, assets_correlation_matrix: List[List[float]]=None, assets_correlation_matrix_aspect_ratio: float=None, denoising_method: str='eigenvaluesClipping'):
        """AssetsCorrelationMatrixDenoisedPostRequest - a model defined in OpenAPI

        :param assets: The assets of this AssetsCorrelationMatrixDenoisedPostRequest.
        :param assets_correlation_matrix: The assets_correlation_matrix of this AssetsCorrelationMatrixDenoisedPostRequest.
        :param assets_correlation_matrix_aspect_ratio: The assets_correlation_matrix_aspect_ratio of this AssetsCorrelationMatrixDenoisedPostRequest.
        :param denoising_method: The denoising_method of this AssetsCorrelationMatrixDenoisedPostRequest.
        """
        self.openapi_types = {
            'assets': int,
            'assets_correlation_matrix': List[List[float]],
            'assets_correlation_matrix_aspect_ratio': float,
            'denoising_method': str
        }

        self.attribute_map = {
            'assets': 'assets',
            'assets_correlation_matrix': 'assetsCorrelationMatrix',
            'assets_correlation_matrix_aspect_ratio': 'assetsCorrelationMatrixAspectRatio',
            'denoising_method': 'denoisingMethod'
        }

        self._assets = assets
        self._assets_correlation_matrix = assets_correlation_matrix
        self._assets_correlation_matrix_aspect_ratio = assets_correlation_matrix_aspect_ratio
        self._denoising_method = denoising_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetsCorrelationMatrixDenoisedPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _assets_correlation_matrix_denoised_post_request of this AssetsCorrelationMatrixDenoisedPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this AssetsCorrelationMatrixDenoisedPostRequest.


        :return: The assets of this AssetsCorrelationMatrixDenoisedPostRequest.
        :rtype: int
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this AssetsCorrelationMatrixDenoisedPostRequest.


        :param assets: The assets of this AssetsCorrelationMatrixDenoisedPostRequest.
        :type assets: int
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")
        if assets is not None and assets < 2:
            raise ValueError("Invalid value for `assets`, must be a value greater than or equal to `2`")

        self._assets = assets

    @property
    def assets_correlation_matrix(self):
        """Gets the assets_correlation_matrix of this AssetsCorrelationMatrixDenoisedPostRequest.

        assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j

        :return: The assets_correlation_matrix of this AssetsCorrelationMatrixDenoisedPostRequest.
        :rtype: List[List[float]]
        """
        return self._assets_correlation_matrix

    @assets_correlation_matrix.setter
    def assets_correlation_matrix(self, assets_correlation_matrix):
        """Sets the assets_correlation_matrix of this AssetsCorrelationMatrixDenoisedPostRequest.

        assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j

        :param assets_correlation_matrix: The assets_correlation_matrix of this AssetsCorrelationMatrixDenoisedPostRequest.
        :type assets_correlation_matrix: List[List[float]]
        """
        if assets_correlation_matrix is None:
            raise ValueError("Invalid value for `assets_correlation_matrix`, must not be `None`")
        if assets_correlation_matrix is not None and len(assets_correlation_matrix) < 2:
            raise ValueError("Invalid value for `assets_correlation_matrix`, number of items must be greater than or equal to `2`")

        self._assets_correlation_matrix = assets_correlation_matrix

    @property
    def assets_correlation_matrix_aspect_ratio(self):
        """Gets the assets_correlation_matrix_aspect_ratio of this AssetsCorrelationMatrixDenoisedPostRequest.

        The aspect ratio of the asset correlation matrix, defined as the number of assets divided by the number of asset returns per asset used to compute the asset correlation matrix

        :return: The assets_correlation_matrix_aspect_ratio of this AssetsCorrelationMatrixDenoisedPostRequest.
        :rtype: float
        """
        return self._assets_correlation_matrix_aspect_ratio

    @assets_correlation_matrix_aspect_ratio.setter
    def assets_correlation_matrix_aspect_ratio(self, assets_correlation_matrix_aspect_ratio):
        """Sets the assets_correlation_matrix_aspect_ratio of this AssetsCorrelationMatrixDenoisedPostRequest.

        The aspect ratio of the asset correlation matrix, defined as the number of assets divided by the number of asset returns per asset used to compute the asset correlation matrix

        :param assets_correlation_matrix_aspect_ratio: The assets_correlation_matrix_aspect_ratio of this AssetsCorrelationMatrixDenoisedPostRequest.
        :type assets_correlation_matrix_aspect_ratio: float
        """
        if assets_correlation_matrix_aspect_ratio is None:
            raise ValueError("Invalid value for `assets_correlation_matrix_aspect_ratio`, must not be `None`")
        if assets_correlation_matrix_aspect_ratio is not None and assets_correlation_matrix_aspect_ratio <= 0:
            raise ValueError("Invalid value for `assets_correlation_matrix_aspect_ratio`, must be a value greater than `0`")

        self._assets_correlation_matrix_aspect_ratio = assets_correlation_matrix_aspect_ratio

    @property
    def denoising_method(self):
        """Gets the denoising_method of this AssetsCorrelationMatrixDenoisedPostRequest.

        The method used to denoise the asset correlation matrix

        :return: The denoising_method of this AssetsCorrelationMatrixDenoisedPostRequest.
        :rtype: str
        """
        return self._denoising_method

    @denoising_method.setter
    def denoising_method(self, denoising_method):
        """Sets the denoising_method of this AssetsCorrelationMatrixDenoisedPostRequest.

        The method used to denoise the asset correlation matrix

        :param denoising_method: The denoising_method of this AssetsCorrelationMatrixDenoisedPostRequest.
        :type denoising_method: str
        """
        allowed_values = ["eigenvaluesClipping"]  # noqa: E501
        if denoising_method not in allowed_values:
            raise ValueError(
                "Invalid value for `denoising_method` ({0}), must be one of {1}"
                .format(denoising_method, allowed_values)
            )

        self._denoising_method = denoising_method

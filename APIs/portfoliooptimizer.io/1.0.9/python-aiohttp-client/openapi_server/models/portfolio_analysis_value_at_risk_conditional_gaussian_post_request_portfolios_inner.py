# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PortfolioAnalysisValueAtRiskConditionalGaussianPostRequestPortfoliosInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, portfolio_values: List[float]=None):
        """PortfolioAnalysisValueAtRiskConditionalGaussianPostRequestPortfoliosInner - a model defined in OpenAPI

        :param portfolio_values: The portfolio_values of this PortfolioAnalysisValueAtRiskConditionalGaussianPostRequestPortfoliosInner.
        """
        self.openapi_types = {
            'portfolio_values': List[float]
        }

        self.attribute_map = {
            'portfolio_values': 'portfolioValues'
        }

        self._portfolio_values = portfolio_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioAnalysisValueAtRiskConditionalGaussianPostRequestPortfoliosInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _portfolio_analysis_value_at_risk_conditional_gaussian_post_request_portfolios_inner of this PortfolioAnalysisValueAtRiskConditionalGaussianPostRequestPortfoliosInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def portfolio_values(self):
        """Gets the portfolio_values of this PortfolioAnalysisValueAtRiskConditionalGaussianPostRequestPortfoliosInner.

        portfolioValues[t] is the value of the portfolio at the time t

        :return: The portfolio_values of this PortfolioAnalysisValueAtRiskConditionalGaussianPostRequestPortfoliosInner.
        :rtype: List[float]
        """
        return self._portfolio_values

    @portfolio_values.setter
    def portfolio_values(self, portfolio_values):
        """Sets the portfolio_values of this PortfolioAnalysisValueAtRiskConditionalGaussianPostRequestPortfoliosInner.

        portfolioValues[t] is the value of the portfolio at the time t

        :param portfolio_values: The portfolio_values of this PortfolioAnalysisValueAtRiskConditionalGaussianPostRequestPortfoliosInner.
        :type portfolio_values: List[float]
        """
        if portfolio_values is None:
            raise ValueError("Invalid value for `portfolio_values`, must not be `None`")
        if portfolio_values is not None and len(portfolio_values) < 3:
            raise ValueError("Invalid value for `portfolio_values`, number of items must be greater than or equal to `3`")

        self._portfolio_values = portfolio_values

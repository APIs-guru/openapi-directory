# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.portfolio_analysis_sharpe_ratio_bias_adjusted_post_request_portfolios_inner import PortfolioAnalysisSharpeRatioBiasAdjustedPostRequestPortfoliosInner
from openapi_server import util


class PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence_interval_type: str='twoSided', confidence_level: float=0.95, portfolios: List[PortfolioAnalysisSharpeRatioBiasAdjustedPostRequestPortfoliosInner]=None, risk_free_rate: float=None):
        """PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest - a model defined in OpenAPI

        :param confidence_interval_type: The confidence_interval_type of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.
        :param confidence_level: The confidence_level of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.
        :param portfolios: The portfolios of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.
        :param risk_free_rate: The risk_free_rate of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.
        """
        self.openapi_types = {
            'confidence_interval_type': str,
            'confidence_level': float,
            'portfolios': List[PortfolioAnalysisSharpeRatioBiasAdjustedPostRequestPortfoliosInner],
            'risk_free_rate': float
        }

        self.attribute_map = {
            'confidence_interval_type': 'confidenceIntervalType',
            'confidence_level': 'confidenceLevel',
            'portfolios': 'portfolios',
            'risk_free_rate': 'riskFreeRate'
        }

        self._confidence_interval_type = confidence_interval_type
        self._confidence_level = confidence_level
        self._portfolios = portfolios
        self._risk_free_rate = risk_free_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _portfolio_analysis_sharpe_ratio_confidence_interval_post_request of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence_interval_type(self):
        """Gets the confidence_interval_type of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.

        The type of confidence interval to build

        :return: The confidence_interval_type of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.
        :rtype: str
        """
        return self._confidence_interval_type

    @confidence_interval_type.setter
    def confidence_interval_type(self, confidence_interval_type):
        """Sets the confidence_interval_type of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.

        The type of confidence interval to build

        :param confidence_interval_type: The confidence_interval_type of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.
        :type confidence_interval_type: str
        """
        allowed_values = ["twoSided", "lowerOneSided", "upperOneSided"]  # noqa: E501
        if confidence_interval_type not in allowed_values:
            raise ValueError(
                "Invalid value for `confidence_interval_type` ({0}), must be one of {1}"
                .format(confidence_interval_type, allowed_values)
            )

        self._confidence_interval_type = confidence_interval_type

    @property
    def confidence_level(self):
        """Gets the confidence_level of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.

        The confidence level of the confidence interval to build, in percentage

        :return: The confidence_level of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.
        :rtype: float
        """
        return self._confidence_level

    @confidence_level.setter
    def confidence_level(self, confidence_level):
        """Sets the confidence_level of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.

        The confidence level of the confidence interval to build, in percentage

        :param confidence_level: The confidence_level of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.
        :type confidence_level: float
        """
        if confidence_level is not None and confidence_level >= 1:
            raise ValueError("Invalid value for `confidence_level`, must be a value less than `1`")
        if confidence_level is not None and confidence_level <= 0:
            raise ValueError("Invalid value for `confidence_level`, must be a value greater than `0`")

        self._confidence_level = confidence_level

    @property
    def portfolios(self):
        """Gets the portfolios of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.


        :return: The portfolios of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.
        :rtype: List[PortfolioAnalysisSharpeRatioBiasAdjustedPostRequestPortfoliosInner]
        """
        return self._portfolios

    @portfolios.setter
    def portfolios(self, portfolios):
        """Sets the portfolios of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.


        :param portfolios: The portfolios of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.
        :type portfolios: List[PortfolioAnalysisSharpeRatioBiasAdjustedPostRequestPortfoliosInner]
        """
        if portfolios is None:
            raise ValueError("Invalid value for `portfolios`, must not be `None`")
        if portfolios is not None and len(portfolios) < 1:
            raise ValueError("Invalid value for `portfolios`, number of items must be greater than or equal to `1`")

        self._portfolios = portfolios

    @property
    def risk_free_rate(self):
        """Gets the risk_free_rate of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.

        The risk free rate

        :return: The risk_free_rate of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.
        :rtype: float
        """
        return self._risk_free_rate

    @risk_free_rate.setter
    def risk_free_rate(self, risk_free_rate):
        """Sets the risk_free_rate of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.

        The risk free rate

        :param risk_free_rate: The risk_free_rate of this PortfolioAnalysisSharpeRatioConfidenceIntervalPostRequest.
        :type risk_free_rate: float
        """
        if risk_free_rate is None:
            raise ValueError("Invalid value for `risk_free_rate`, must not be `None`")

        self._risk_free_rate = risk_free_rate

# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_average_return: float=None, asset_kurtosis: float=None, asset_skewness: float=None, asset_volatility: float=None, simulations: int=1, simulations_length: int=1):
        """AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest - a model defined in OpenAPI

        :param asset_average_return: The asset_average_return of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.
        :param asset_kurtosis: The asset_kurtosis of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.
        :param asset_skewness: The asset_skewness of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.
        :param asset_volatility: The asset_volatility of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.
        :param simulations: The simulations of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.
        :param simulations_length: The simulations_length of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.
        """
        self.openapi_types = {
            'asset_average_return': float,
            'asset_kurtosis': float,
            'asset_skewness': float,
            'asset_volatility': float,
            'simulations': int,
            'simulations_length': int
        }

        self.attribute_map = {
            'asset_average_return': 'assetAverageReturn',
            'asset_kurtosis': 'assetKurtosis',
            'asset_skewness': 'assetSkewness',
            'asset_volatility': 'assetVolatility',
            'simulations': 'simulations',
            'simulations_length': 'simulationsLength'
        }

        self._asset_average_return = asset_average_return
        self._asset_kurtosis = asset_kurtosis
        self._asset_skewness = asset_skewness
        self._asset_volatility = asset_volatility
        self._simulations = simulations
        self._simulations_length = simulations_length

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _assets_returns_simulation_monte_carlo_cornish_fisher_corrected_post_request of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_average_return(self):
        """Gets the asset_average_return of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.

        The arithmetic average return of the asset, corresponding to the mean of the corrected Cornish-Fisher distribution

        :return: The asset_average_return of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.
        :rtype: float
        """
        return self._asset_average_return

    @asset_average_return.setter
    def asset_average_return(self, asset_average_return):
        """Sets the asset_average_return of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.

        The arithmetic average return of the asset, corresponding to the mean of the corrected Cornish-Fisher distribution

        :param asset_average_return: The asset_average_return of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.
        :type asset_average_return: float
        """
        if asset_average_return is None:
            raise ValueError("Invalid value for `asset_average_return`, must not be `None`")

        self._asset_average_return = asset_average_return

    @property
    def asset_kurtosis(self):
        """Gets the asset_kurtosis of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.

        The kurtosis of the asset returns, corresponding to the kurtosis of the Cornish-Fisher distribution

        :return: The asset_kurtosis of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.
        :rtype: float
        """
        return self._asset_kurtosis

    @asset_kurtosis.setter
    def asset_kurtosis(self, asset_kurtosis):
        """Sets the asset_kurtosis of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.

        The kurtosis of the asset returns, corresponding to the kurtosis of the Cornish-Fisher distribution

        :param asset_kurtosis: The asset_kurtosis of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.
        :type asset_kurtosis: float
        """
        if asset_kurtosis is None:
            raise ValueError("Invalid value for `asset_kurtosis`, must not be `None`")

        self._asset_kurtosis = asset_kurtosis

    @property
    def asset_skewness(self):
        """Gets the asset_skewness of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.

        The skewness of the asset returns, corresponding to the skewness of the Cornish-Fisher distribution

        :return: The asset_skewness of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.
        :rtype: float
        """
        return self._asset_skewness

    @asset_skewness.setter
    def asset_skewness(self, asset_skewness):
        """Sets the asset_skewness of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.

        The skewness of the asset returns, corresponding to the skewness of the Cornish-Fisher distribution

        :param asset_skewness: The asset_skewness of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.
        :type asset_skewness: float
        """
        if asset_skewness is None:
            raise ValueError("Invalid value for `asset_skewness`, must not be `None`")

        self._asset_skewness = asset_skewness

    @property
    def asset_volatility(self):
        """Gets the asset_volatility of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.

        The volatility of the asset returns, corresponding to the volatility of the Cornish-Fisher distribution

        :return: The asset_volatility of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.
        :rtype: float
        """
        return self._asset_volatility

    @asset_volatility.setter
    def asset_volatility(self, asset_volatility):
        """Sets the asset_volatility of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.

        The volatility of the asset returns, corresponding to the volatility of the Cornish-Fisher distribution

        :param asset_volatility: The asset_volatility of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.
        :type asset_volatility: float
        """
        if asset_volatility is None:
            raise ValueError("Invalid value for `asset_volatility`, must not be `None`")
        if asset_volatility is not None and asset_volatility <= 0:
            raise ValueError("Invalid value for `asset_volatility`, must be a value greater than `0`")

        self._asset_volatility = asset_volatility

    @property
    def simulations(self):
        """Gets the simulations of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.

        The number of simulations to perform

        :return: The simulations of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.
        :rtype: int
        """
        return self._simulations

    @simulations.setter
    def simulations(self, simulations):
        """Sets the simulations of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.

        The number of simulations to perform

        :param simulations: The simulations of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.
        :type simulations: int
        """
        if simulations is not None and simulations < 1:
            raise ValueError("Invalid value for `simulations`, must be a value greater than or equal to `1`")

        self._simulations = simulations

    @property
    def simulations_length(self):
        """Gets the simulations_length of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.

        The number of time period(s) to simulate per simulation

        :return: The simulations_length of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.
        :rtype: int
        """
        return self._simulations_length

    @simulations_length.setter
    def simulations_length(self, simulations_length):
        """Sets the simulations_length of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.

        The number of time period(s) to simulate per simulation

        :param simulations_length: The simulations_length of this AssetsReturnsSimulationMonteCarloCornishFisherCorrectedPostRequest.
        :type simulations_length: int
        """
        if simulations_length is not None and simulations_length < 1:
            raise ValueError("Invalid value for `simulations_length`, must be a value greater than or equal to `1`")

        self._simulations_length = simulations_length

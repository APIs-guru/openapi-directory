# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assets_correlation_matrix_post_request_one_of_assets_inner import AssetsCorrelationMatrixPostRequestOneOfAssetsInner
from openapi_server import util


class AssetsReturnsTurbulencePartitionedPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: List[AssetsCorrelationMatrixPostRequestOneOfAssetsInner]=None, turbulence_thresholds: List[float]=None, turbulence_thresholds_conversion_method: str='chisquareInverseDistribution'):
        """AssetsReturnsTurbulencePartitionedPostRequest - a model defined in OpenAPI

        :param assets: The assets of this AssetsReturnsTurbulencePartitionedPostRequest.
        :param turbulence_thresholds: The turbulence_thresholds of this AssetsReturnsTurbulencePartitionedPostRequest.
        :param turbulence_thresholds_conversion_method: The turbulence_thresholds_conversion_method of this AssetsReturnsTurbulencePartitionedPostRequest.
        """
        self.openapi_types = {
            'assets': List[AssetsCorrelationMatrixPostRequestOneOfAssetsInner],
            'turbulence_thresholds': List[float],
            'turbulence_thresholds_conversion_method': str
        }

        self.attribute_map = {
            'assets': 'assets',
            'turbulence_thresholds': 'turbulenceThresholds',
            'turbulence_thresholds_conversion_method': 'turbulenceThresholdsConversionMethod'
        }

        self._assets = assets
        self._turbulence_thresholds = turbulence_thresholds
        self._turbulence_thresholds_conversion_method = turbulence_thresholds_conversion_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetsReturnsTurbulencePartitionedPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _assets_returns_turbulence_partitioned_post_request of this AssetsReturnsTurbulencePartitionedPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this AssetsReturnsTurbulencePartitionedPostRequest.


        :return: The assets of this AssetsReturnsTurbulencePartitionedPostRequest.
        :rtype: List[AssetsCorrelationMatrixPostRequestOneOfAssetsInner]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this AssetsReturnsTurbulencePartitionedPostRequest.


        :param assets: The assets of this AssetsReturnsTurbulencePartitionedPostRequest.
        :type assets: List[AssetsCorrelationMatrixPostRequestOneOfAssetsInner]
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")
        if assets is not None and len(assets) < 1:
            raise ValueError("Invalid value for `assets`, number of items must be greater than or equal to `1`")

        self._assets = assets

    @property
    def turbulence_thresholds(self):
        """Gets the turbulence_thresholds of this AssetsReturnsTurbulencePartitionedPostRequest.

        The turbulence threshold(s), in percentage; in case several turbulence thresholds are provided, they must be provided in increasing order

        :return: The turbulence_thresholds of this AssetsReturnsTurbulencePartitionedPostRequest.
        :rtype: List[float]
        """
        return self._turbulence_thresholds

    @turbulence_thresholds.setter
    def turbulence_thresholds(self, turbulence_thresholds):
        """Sets the turbulence_thresholds of this AssetsReturnsTurbulencePartitionedPostRequest.

        The turbulence threshold(s), in percentage; in case several turbulence thresholds are provided, they must be provided in increasing order

        :param turbulence_thresholds: The turbulence_thresholds of this AssetsReturnsTurbulencePartitionedPostRequest.
        :type turbulence_thresholds: List[float]
        """
        if turbulence_thresholds is None:
            raise ValueError("Invalid value for `turbulence_thresholds`, must not be `None`")
        if turbulence_thresholds is not None and len(turbulence_thresholds) > 3:
            raise ValueError("Invalid value for `turbulence_thresholds`, number of items must be less than or equal to `3`")
        if turbulence_thresholds is not None and len(turbulence_thresholds) < 1:
            raise ValueError("Invalid value for `turbulence_thresholds`, number of items must be greater than or equal to `1`")

        self._turbulence_thresholds = turbulence_thresholds

    @property
    def turbulence_thresholds_conversion_method(self):
        """Gets the turbulence_thresholds_conversion_method of this AssetsReturnsTurbulencePartitionedPostRequest.

        The method to use to convert the turbulence threshold(s) into turbulence score(s)

        :return: The turbulence_thresholds_conversion_method of this AssetsReturnsTurbulencePartitionedPostRequest.
        :rtype: str
        """
        return self._turbulence_thresholds_conversion_method

    @turbulence_thresholds_conversion_method.setter
    def turbulence_thresholds_conversion_method(self, turbulence_thresholds_conversion_method):
        """Sets the turbulence_thresholds_conversion_method of this AssetsReturnsTurbulencePartitionedPostRequest.

        The method to use to convert the turbulence threshold(s) into turbulence score(s)

        :param turbulence_thresholds_conversion_method: The turbulence_thresholds_conversion_method of this AssetsReturnsTurbulencePartitionedPostRequest.
        :type turbulence_thresholds_conversion_method: str
        """
        allowed_values = ["empiricalQuantileDistribution", "chisquareInverseDistribution"]  # noqa: E501
        if turbulence_thresholds_conversion_method not in allowed_values:
            raise ValueError(
                "Invalid value for `turbulence_thresholds_conversion_method` ({0}), must be one of {1}"
                .format(turbulence_thresholds_conversion_method, allowed_values)
            )

        self._turbulence_thresholds_conversion_method = turbulence_thresholds_conversion_method

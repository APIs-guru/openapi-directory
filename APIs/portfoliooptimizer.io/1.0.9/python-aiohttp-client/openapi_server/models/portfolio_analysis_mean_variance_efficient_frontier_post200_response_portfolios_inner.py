# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PortfolioAnalysisMeanVarianceEfficientFrontierPost200ResponsePortfoliosInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets_weights: List[float]=None, portfolio_return: float=None, portfolio_volatility: float=None):
        """PortfolioAnalysisMeanVarianceEfficientFrontierPost200ResponsePortfoliosInner - a model defined in OpenAPI

        :param assets_weights: The assets_weights of this PortfolioAnalysisMeanVarianceEfficientFrontierPost200ResponsePortfoliosInner.
        :param portfolio_return: The portfolio_return of this PortfolioAnalysisMeanVarianceEfficientFrontierPost200ResponsePortfoliosInner.
        :param portfolio_volatility: The portfolio_volatility of this PortfolioAnalysisMeanVarianceEfficientFrontierPost200ResponsePortfoliosInner.
        """
        self.openapi_types = {
            'assets_weights': List[float],
            'portfolio_return': float,
            'portfolio_volatility': float
        }

        self.attribute_map = {
            'assets_weights': 'assetsWeights',
            'portfolio_return': 'portfolioReturn',
            'portfolio_volatility': 'portfolioVolatility'
        }

        self._assets_weights = assets_weights
        self._portfolio_return = portfolio_return
        self._portfolio_volatility = portfolio_volatility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioAnalysisMeanVarianceEfficientFrontierPost200ResponsePortfoliosInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _portfolio_analysis_mean_variance_efficient_frontier_post_200_response_portfolios_inner of this PortfolioAnalysisMeanVarianceEfficientFrontierPost200ResponsePortfoliosInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets_weights(self):
        """Gets the assets_weights of this PortfolioAnalysisMeanVarianceEfficientFrontierPost200ResponsePortfoliosInner.

        assetsWeights[i] is the weight of the asset i in the portfolio, in percentage

        :return: The assets_weights of this PortfolioAnalysisMeanVarianceEfficientFrontierPost200ResponsePortfoliosInner.
        :rtype: List[float]
        """
        return self._assets_weights

    @assets_weights.setter
    def assets_weights(self, assets_weights):
        """Sets the assets_weights of this PortfolioAnalysisMeanVarianceEfficientFrontierPost200ResponsePortfoliosInner.

        assetsWeights[i] is the weight of the asset i in the portfolio, in percentage

        :param assets_weights: The assets_weights of this PortfolioAnalysisMeanVarianceEfficientFrontierPost200ResponsePortfoliosInner.
        :type assets_weights: List[float]
        """
        if assets_weights is None:
            raise ValueError("Invalid value for `assets_weights`, must not be `None`")
        if assets_weights is not None and len(assets_weights) < 2:
            raise ValueError("Invalid value for `assets_weights`, number of items must be greater than or equal to `2`")

        self._assets_weights = assets_weights

    @property
    def portfolio_return(self):
        """Gets the portfolio_return of this PortfolioAnalysisMeanVarianceEfficientFrontierPost200ResponsePortfoliosInner.

        The arithmetic return of the portfolio

        :return: The portfolio_return of this PortfolioAnalysisMeanVarianceEfficientFrontierPost200ResponsePortfoliosInner.
        :rtype: float
        """
        return self._portfolio_return

    @portfolio_return.setter
    def portfolio_return(self, portfolio_return):
        """Sets the portfolio_return of this PortfolioAnalysisMeanVarianceEfficientFrontierPost200ResponsePortfoliosInner.

        The arithmetic return of the portfolio

        :param portfolio_return: The portfolio_return of this PortfolioAnalysisMeanVarianceEfficientFrontierPost200ResponsePortfoliosInner.
        :type portfolio_return: float
        """
        if portfolio_return is None:
            raise ValueError("Invalid value for `portfolio_return`, must not be `None`")

        self._portfolio_return = portfolio_return

    @property
    def portfolio_volatility(self):
        """Gets the portfolio_volatility of this PortfolioAnalysisMeanVarianceEfficientFrontierPost200ResponsePortfoliosInner.

        The volatility of the portfolio

        :return: The portfolio_volatility of this PortfolioAnalysisMeanVarianceEfficientFrontierPost200ResponsePortfoliosInner.
        :rtype: float
        """
        return self._portfolio_volatility

    @portfolio_volatility.setter
    def portfolio_volatility(self, portfolio_volatility):
        """Sets the portfolio_volatility of this PortfolioAnalysisMeanVarianceEfficientFrontierPost200ResponsePortfoliosInner.

        The volatility of the portfolio

        :param portfolio_volatility: The portfolio_volatility of this PortfolioAnalysisMeanVarianceEfficientFrontierPost200ResponsePortfoliosInner.
        :type portfolio_volatility: float
        """
        if portfolio_volatility is None:
            raise ValueError("Invalid value for `portfolio_volatility`, must not be `None`")
        if portfolio_volatility is not None and portfolio_volatility < 0:
            raise ValueError("Invalid value for `portfolio_volatility`, must be a value greater than or equal to `0`")

        self._portfolio_volatility = portfolio_volatility

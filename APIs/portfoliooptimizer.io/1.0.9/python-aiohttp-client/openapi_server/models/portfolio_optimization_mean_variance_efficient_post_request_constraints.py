# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets_groups: List[list[int]]=None, assets_groups_matrix: List[List[float]]=None, maximum_assets_groups_weights: List[float]=None, maximum_assets_weights: List[float]=None, maximum_portfolio_exposure: float=1, minimum_assets_weights: List[float]=None, minimum_portfolio_exposure: float=1, portfolio_return: float=None, portfolio_volatility: float=None, risk_tolerance: float=None):
        """PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints - a model defined in OpenAPI

        :param assets_groups: The assets_groups of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :param assets_groups_matrix: The assets_groups_matrix of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :param maximum_assets_groups_weights: The maximum_assets_groups_weights of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :param maximum_assets_weights: The maximum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :param maximum_portfolio_exposure: The maximum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :param minimum_assets_weights: The minimum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :param minimum_portfolio_exposure: The minimum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :param portfolio_return: The portfolio_return of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :param portfolio_volatility: The portfolio_volatility of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :param risk_tolerance: The risk_tolerance of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        """
        self.openapi_types = {
            'assets_groups': List[list[int]],
            'assets_groups_matrix': List[List[float]],
            'maximum_assets_groups_weights': List[float],
            'maximum_assets_weights': List[float],
            'maximum_portfolio_exposure': float,
            'minimum_assets_weights': List[float],
            'minimum_portfolio_exposure': float,
            'portfolio_return': float,
            'portfolio_volatility': float,
            'risk_tolerance': float
        }

        self.attribute_map = {
            'assets_groups': 'assetsGroups',
            'assets_groups_matrix': 'assetsGroupsMatrix',
            'maximum_assets_groups_weights': 'maximumAssetsGroupsWeights',
            'maximum_assets_weights': 'maximumAssetsWeights',
            'maximum_portfolio_exposure': 'maximumPortfolioExposure',
            'minimum_assets_weights': 'minimumAssetsWeights',
            'minimum_portfolio_exposure': 'minimumPortfolioExposure',
            'portfolio_return': 'portfolioReturn',
            'portfolio_volatility': 'portfolioVolatility',
            'risk_tolerance': 'riskTolerance'
        }

        self._assets_groups = assets_groups
        self._assets_groups_matrix = assets_groups_matrix
        self._maximum_assets_groups_weights = maximum_assets_groups_weights
        self._maximum_assets_weights = maximum_assets_weights
        self._maximum_portfolio_exposure = maximum_portfolio_exposure
        self._minimum_assets_weights = minimum_assets_weights
        self._minimum_portfolio_exposure = minimum_portfolio_exposure
        self._portfolio_return = portfolio_return
        self._portfolio_volatility = portfolio_volatility
        self._risk_tolerance = risk_tolerance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _portfolio_optimization_mean_variance_efficient_post_request_constraints of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets_groups(self):
        """Gets the assets_groups of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.


        :return: The assets_groups of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :rtype: List[list[int]]
        """
        return self._assets_groups

    @assets_groups.setter
    def assets_groups(self, assets_groups):
        """Sets the assets_groups of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.


        :param assets_groups: The assets_groups of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :type assets_groups: List[list[int]]
        """
        if assets_groups is not None and len(assets_groups) < 1:
            raise ValueError("Invalid value for `assets_groups`, number of items must be greater than or equal to `1`")

        self._assets_groups = assets_groups

    @property
    def assets_groups_matrix(self):
        """Gets the assets_groups_matrix of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.

        assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups

        :return: The assets_groups_matrix of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :rtype: List[List[float]]
        """
        return self._assets_groups_matrix

    @assets_groups_matrix.setter
    def assets_groups_matrix(self, assets_groups_matrix):
        """Sets the assets_groups_matrix of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.

        assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups

        :param assets_groups_matrix: The assets_groups_matrix of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :type assets_groups_matrix: List[List[float]]
        """
        if assets_groups_matrix is not None and len(assets_groups_matrix) < 1:
            raise ValueError("Invalid value for `assets_groups_matrix`, number of items must be greater than or equal to `1`")

        self._assets_groups_matrix = assets_groups_matrix

    @property
    def maximum_assets_groups_weights(self):
        """Gets the maximum_assets_groups_weights of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.

        maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided

        :return: The maximum_assets_groups_weights of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :rtype: List[float]
        """
        return self._maximum_assets_groups_weights

    @maximum_assets_groups_weights.setter
    def maximum_assets_groups_weights(self, maximum_assets_groups_weights):
        """Sets the maximum_assets_groups_weights of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.

        maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided

        :param maximum_assets_groups_weights: The maximum_assets_groups_weights of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :type maximum_assets_groups_weights: List[float]
        """

        self._maximum_assets_groups_weights = maximum_assets_groups_weights

    @property
    def maximum_assets_weights(self):
        """Gets the maximum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.

        maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage

        :return: The maximum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :rtype: List[float]
        """
        return self._maximum_assets_weights

    @maximum_assets_weights.setter
    def maximum_assets_weights(self, maximum_assets_weights):
        """Sets the maximum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.

        maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage

        :param maximum_assets_weights: The maximum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :type maximum_assets_weights: List[float]
        """

        self._maximum_assets_weights = maximum_assets_weights

    @property
    def maximum_portfolio_exposure(self):
        """Gets the maximum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.

        The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure

        :return: The maximum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :rtype: float
        """
        return self._maximum_portfolio_exposure

    @maximum_portfolio_exposure.setter
    def maximum_portfolio_exposure(self, maximum_portfolio_exposure):
        """Sets the maximum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.

        The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure

        :param maximum_portfolio_exposure: The maximum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :type maximum_portfolio_exposure: float
        """
        if maximum_portfolio_exposure is not None and maximum_portfolio_exposure > 1:
            raise ValueError("Invalid value for `maximum_portfolio_exposure`, must be a value less than or equal to `1`")
        if maximum_portfolio_exposure is not None and maximum_portfolio_exposure < 0:
            raise ValueError("Invalid value for `maximum_portfolio_exposure`, must be a value greater than or equal to `0`")

        self._maximum_portfolio_exposure = maximum_portfolio_exposure

    @property
    def minimum_assets_weights(self):
        """Gets the minimum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.

        minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage

        :return: The minimum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :rtype: List[float]
        """
        return self._minimum_assets_weights

    @minimum_assets_weights.setter
    def minimum_assets_weights(self, minimum_assets_weights):
        """Sets the minimum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.

        minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage

        :param minimum_assets_weights: The minimum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :type minimum_assets_weights: List[float]
        """

        self._minimum_assets_weights = minimum_assets_weights

    @property
    def minimum_portfolio_exposure(self):
        """Gets the minimum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.

        The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure

        :return: The minimum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :rtype: float
        """
        return self._minimum_portfolio_exposure

    @minimum_portfolio_exposure.setter
    def minimum_portfolio_exposure(self, minimum_portfolio_exposure):
        """Sets the minimum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.

        The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure

        :param minimum_portfolio_exposure: The minimum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :type minimum_portfolio_exposure: float
        """
        if minimum_portfolio_exposure is not None and minimum_portfolio_exposure > 1:
            raise ValueError("Invalid value for `minimum_portfolio_exposure`, must be a value less than or equal to `1`")
        if minimum_portfolio_exposure is not None and minimum_portfolio_exposure < 0:
            raise ValueError("Invalid value for `minimum_portfolio_exposure`, must be a value greater than or equal to `0`")

        self._minimum_portfolio_exposure = minimum_portfolio_exposure

    @property
    def portfolio_return(self):
        """Gets the portfolio_return of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.

        The portfolio return; exclusive with portfolioVolatility and riskTolerance

        :return: The portfolio_return of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :rtype: float
        """
        return self._portfolio_return

    @portfolio_return.setter
    def portfolio_return(self, portfolio_return):
        """Sets the portfolio_return of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.

        The portfolio return; exclusive with portfolioVolatility and riskTolerance

        :param portfolio_return: The portfolio_return of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :type portfolio_return: float
        """

        self._portfolio_return = portfolio_return

    @property
    def portfolio_volatility(self):
        """Gets the portfolio_volatility of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.

        The portfolio volatility; exclusive with portfolioReturn and riskTolerance

        :return: The portfolio_volatility of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :rtype: float
        """
        return self._portfolio_volatility

    @portfolio_volatility.setter
    def portfolio_volatility(self, portfolio_volatility):
        """Sets the portfolio_volatility of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.

        The portfolio volatility; exclusive with portfolioReturn and riskTolerance

        :param portfolio_volatility: The portfolio_volatility of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :type portfolio_volatility: float
        """
        if portfolio_volatility is not None and portfolio_volatility < 0:
            raise ValueError("Invalid value for `portfolio_volatility`, must be a value greater than or equal to `0`")

        self._portfolio_volatility = portfolio_volatility

    @property
    def risk_tolerance(self):
        """Gets the risk_tolerance of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.

        The portfolio risk tolerance; exclusive with portfolioReturn and portfolioVolatility

        :return: The risk_tolerance of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :rtype: float
        """
        return self._risk_tolerance

    @risk_tolerance.setter
    def risk_tolerance(self, risk_tolerance):
        """Sets the risk_tolerance of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.

        The portfolio risk tolerance; exclusive with portfolioReturn and portfolioVolatility

        :param risk_tolerance: The risk_tolerance of this PortfolioOptimizationMeanVarianceEfficientPostRequestConstraints.
        :type risk_tolerance: float
        """
        if risk_tolerance is not None and risk_tolerance < 0:
            raise ValueError("Invalid value for `risk_tolerance`, must be a value greater than or equal to `0`")

        self._risk_tolerance = risk_tolerance

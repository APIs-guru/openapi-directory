# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assets_correlation_matrix_shrinkage_post_request_one_of import AssetsCorrelationMatrixShrinkagePostRequestOneOf
from openapi_server.models.assets_correlation_matrix_shrinkage_post_request_one_of1 import AssetsCorrelationMatrixShrinkagePostRequestOneOf1
from openapi_server import util


class AssetsCorrelationMatrixShrinkagePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: int=None, assets_correlation_matrix: List[List[float]]=None, shrinkage_factor: float=None, target_equicorrelation_matrix: str=None, target_correlation_matrix: List[List[float]]=None):
        """AssetsCorrelationMatrixShrinkagePostRequest - a model defined in OpenAPI

        :param assets: The assets of this AssetsCorrelationMatrixShrinkagePostRequest.
        :param assets_correlation_matrix: The assets_correlation_matrix of this AssetsCorrelationMatrixShrinkagePostRequest.
        :param shrinkage_factor: The shrinkage_factor of this AssetsCorrelationMatrixShrinkagePostRequest.
        :param target_equicorrelation_matrix: The target_equicorrelation_matrix of this AssetsCorrelationMatrixShrinkagePostRequest.
        :param target_correlation_matrix: The target_correlation_matrix of this AssetsCorrelationMatrixShrinkagePostRequest.
        """
        self.openapi_types = {
            'assets': int,
            'assets_correlation_matrix': List[List[float]],
            'shrinkage_factor': float,
            'target_equicorrelation_matrix': str,
            'target_correlation_matrix': List[List[float]]
        }

        self.attribute_map = {
            'assets': 'assets',
            'assets_correlation_matrix': 'assetsCorrelationMatrix',
            'shrinkage_factor': 'shrinkageFactor',
            'target_equicorrelation_matrix': 'targetEquicorrelationMatrix',
            'target_correlation_matrix': 'targetCorrelationMatrix'
        }

        self._assets = assets
        self._assets_correlation_matrix = assets_correlation_matrix
        self._shrinkage_factor = shrinkage_factor
        self._target_equicorrelation_matrix = target_equicorrelation_matrix
        self._target_correlation_matrix = target_correlation_matrix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetsCorrelationMatrixShrinkagePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _assets_correlation_matrix_shrinkage_post_request of this AssetsCorrelationMatrixShrinkagePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this AssetsCorrelationMatrixShrinkagePostRequest.


        :return: The assets of this AssetsCorrelationMatrixShrinkagePostRequest.
        :rtype: int
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this AssetsCorrelationMatrixShrinkagePostRequest.


        :param assets: The assets of this AssetsCorrelationMatrixShrinkagePostRequest.
        :type assets: int
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")
        if assets is not None and assets < 2:
            raise ValueError("Invalid value for `assets`, must be a value greater than or equal to `2`")

        self._assets = assets

    @property
    def assets_correlation_matrix(self):
        """Gets the assets_correlation_matrix of this AssetsCorrelationMatrixShrinkagePostRequest.

        assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j

        :return: The assets_correlation_matrix of this AssetsCorrelationMatrixShrinkagePostRequest.
        :rtype: List[List[float]]
        """
        return self._assets_correlation_matrix

    @assets_correlation_matrix.setter
    def assets_correlation_matrix(self, assets_correlation_matrix):
        """Sets the assets_correlation_matrix of this AssetsCorrelationMatrixShrinkagePostRequest.

        assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j

        :param assets_correlation_matrix: The assets_correlation_matrix of this AssetsCorrelationMatrixShrinkagePostRequest.
        :type assets_correlation_matrix: List[List[float]]
        """
        if assets_correlation_matrix is None:
            raise ValueError("Invalid value for `assets_correlation_matrix`, must not be `None`")
        if assets_correlation_matrix is not None and len(assets_correlation_matrix) < 2:
            raise ValueError("Invalid value for `assets_correlation_matrix`, number of items must be greater than or equal to `2`")

        self._assets_correlation_matrix = assets_correlation_matrix

    @property
    def shrinkage_factor(self):
        """Gets the shrinkage_factor of this AssetsCorrelationMatrixShrinkagePostRequest.


        :return: The shrinkage_factor of this AssetsCorrelationMatrixShrinkagePostRequest.
        :rtype: float
        """
        return self._shrinkage_factor

    @shrinkage_factor.setter
    def shrinkage_factor(self, shrinkage_factor):
        """Sets the shrinkage_factor of this AssetsCorrelationMatrixShrinkagePostRequest.


        :param shrinkage_factor: The shrinkage_factor of this AssetsCorrelationMatrixShrinkagePostRequest.
        :type shrinkage_factor: float
        """
        if shrinkage_factor is None:
            raise ValueError("Invalid value for `shrinkage_factor`, must not be `None`")
        if shrinkage_factor is not None and shrinkage_factor > 1:
            raise ValueError("Invalid value for `shrinkage_factor`, must be a value less than or equal to `1`")
        if shrinkage_factor is not None and shrinkage_factor < 0:
            raise ValueError("Invalid value for `shrinkage_factor`, must be a value greater than or equal to `0`")

        self._shrinkage_factor = shrinkage_factor

    @property
    def target_equicorrelation_matrix(self):
        """Gets the target_equicorrelation_matrix of this AssetsCorrelationMatrixShrinkagePostRequest.

        The shrinkage target correlation matrix

        :return: The target_equicorrelation_matrix of this AssetsCorrelationMatrixShrinkagePostRequest.
        :rtype: str
        """
        return self._target_equicorrelation_matrix

    @target_equicorrelation_matrix.setter
    def target_equicorrelation_matrix(self, target_equicorrelation_matrix):
        """Sets the target_equicorrelation_matrix of this AssetsCorrelationMatrixShrinkagePostRequest.

        The shrinkage target correlation matrix

        :param target_equicorrelation_matrix: The target_equicorrelation_matrix of this AssetsCorrelationMatrixShrinkagePostRequest.
        :type target_equicorrelation_matrix: str
        """
        allowed_values = ["minimumEquicorrelationMatrix", "zeroEquicorrelationMatrix", "maximumEquicorrelationMatrix"]  # noqa: E501
        if target_equicorrelation_matrix not in allowed_values:
            raise ValueError(
                "Invalid value for `target_equicorrelation_matrix` ({0}), must be one of {1}"
                .format(target_equicorrelation_matrix, allowed_values)
            )

        self._target_equicorrelation_matrix = target_equicorrelation_matrix

    @property
    def target_correlation_matrix(self):
        """Gets the target_correlation_matrix of this AssetsCorrelationMatrixShrinkagePostRequest.

        targetCorrelationMatrix[i][j] is the target correlation between the asset i and the asset j

        :return: The target_correlation_matrix of this AssetsCorrelationMatrixShrinkagePostRequest.
        :rtype: List[List[float]]
        """
        return self._target_correlation_matrix

    @target_correlation_matrix.setter
    def target_correlation_matrix(self, target_correlation_matrix):
        """Sets the target_correlation_matrix of this AssetsCorrelationMatrixShrinkagePostRequest.

        targetCorrelationMatrix[i][j] is the target correlation between the asset i and the asset j

        :param target_correlation_matrix: The target_correlation_matrix of this AssetsCorrelationMatrixShrinkagePostRequest.
        :type target_correlation_matrix: List[List[float]]
        """
        if target_correlation_matrix is None:
            raise ValueError("Invalid value for `target_correlation_matrix`, must not be `None`")
        if target_correlation_matrix is not None and len(target_correlation_matrix) < 2:
            raise ValueError("Invalid value for `target_correlation_matrix`, number of items must be greater than or equal to `2`")

        self._target_correlation_matrix = target_correlation_matrix

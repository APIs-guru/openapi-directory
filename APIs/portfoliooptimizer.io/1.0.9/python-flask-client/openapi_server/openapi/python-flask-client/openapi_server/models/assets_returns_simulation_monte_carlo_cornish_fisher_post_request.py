from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetsReturnsSimulationMonteCarloCornishFisherPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_average_return_parameter=None, asset_kurtosis_parameter=None, asset_skewness_parameter=None, asset_volatility_parameter=None, simulations=1, simulations_length=1):  # noqa: E501
        """AssetsReturnsSimulationMonteCarloCornishFisherPostRequest - a model defined in OpenAPI

        :param asset_average_return_parameter: The asset_average_return_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.  # noqa: E501
        :type asset_average_return_parameter: float
        :param asset_kurtosis_parameter: The asset_kurtosis_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.  # noqa: E501
        :type asset_kurtosis_parameter: float
        :param asset_skewness_parameter: The asset_skewness_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.  # noqa: E501
        :type asset_skewness_parameter: float
        :param asset_volatility_parameter: The asset_volatility_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.  # noqa: E501
        :type asset_volatility_parameter: float
        :param simulations: The simulations of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.  # noqa: E501
        :type simulations: int
        :param simulations_length: The simulations_length of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.  # noqa: E501
        :type simulations_length: int
        """
        self.openapi_types = {
            'asset_average_return_parameter': float,
            'asset_kurtosis_parameter': float,
            'asset_skewness_parameter': float,
            'asset_volatility_parameter': float,
            'simulations': int,
            'simulations_length': int
        }

        self.attribute_map = {
            'asset_average_return_parameter': 'assetAverageReturnParameter',
            'asset_kurtosis_parameter': 'assetKurtosisParameter',
            'asset_skewness_parameter': 'assetSkewnessParameter',
            'asset_volatility_parameter': 'assetVolatilityParameter',
            'simulations': 'simulations',
            'simulations_length': 'simulationsLength'
        }

        self._asset_average_return_parameter = asset_average_return_parameter
        self._asset_kurtosis_parameter = asset_kurtosis_parameter
        self._asset_skewness_parameter = asset_skewness_parameter
        self._asset_volatility_parameter = asset_volatility_parameter
        self._simulations = simulations
        self._simulations_length = simulations_length

    @classmethod
    def from_dict(cls, dikt) -> 'AssetsReturnsSimulationMonteCarloCornishFisherPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _assets_returns_simulation_monte_carlo_cornish_fisher_post_request of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.  # noqa: E501
        :rtype: AssetsReturnsSimulationMonteCarloCornishFisherPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_average_return_parameter(self) -> float:
        """Gets the asset_average_return_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.

        The mean parameter of the Cornish-Fisher distribution, corresponding to the arithmetic average return of the asset  # noqa: E501

        :return: The asset_average_return_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.
        :rtype: float
        """
        return self._asset_average_return_parameter

    @asset_average_return_parameter.setter
    def asset_average_return_parameter(self, asset_average_return_parameter: float):
        """Sets the asset_average_return_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.

        The mean parameter of the Cornish-Fisher distribution, corresponding to the arithmetic average return of the asset  # noqa: E501

        :param asset_average_return_parameter: The asset_average_return_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.
        :type asset_average_return_parameter: float
        """
        if asset_average_return_parameter is None:
            raise ValueError("Invalid value for `asset_average_return_parameter`, must not be `None`")  # noqa: E501

        self._asset_average_return_parameter = asset_average_return_parameter

    @property
    def asset_kurtosis_parameter(self) -> float:
        """Gets the asset_kurtosis_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.

        The (excess) kurtosis parameter of the Cornish-Fisher distribution, corresponding approximately to the (excess) kurtosis of the asset returns  # noqa: E501

        :return: The asset_kurtosis_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.
        :rtype: float
        """
        return self._asset_kurtosis_parameter

    @asset_kurtosis_parameter.setter
    def asset_kurtosis_parameter(self, asset_kurtosis_parameter: float):
        """Sets the asset_kurtosis_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.

        The (excess) kurtosis parameter of the Cornish-Fisher distribution, corresponding approximately to the (excess) kurtosis of the asset returns  # noqa: E501

        :param asset_kurtosis_parameter: The asset_kurtosis_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.
        :type asset_kurtosis_parameter: float
        """
        if asset_kurtosis_parameter is None:
            raise ValueError("Invalid value for `asset_kurtosis_parameter`, must not be `None`")  # noqa: E501

        self._asset_kurtosis_parameter = asset_kurtosis_parameter

    @property
    def asset_skewness_parameter(self) -> float:
        """Gets the asset_skewness_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.

        The skewness parameter of the Cornish-Fisher distribution, corresponding approximately to the skewness of the asset returns  # noqa: E501

        :return: The asset_skewness_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.
        :rtype: float
        """
        return self._asset_skewness_parameter

    @asset_skewness_parameter.setter
    def asset_skewness_parameter(self, asset_skewness_parameter: float):
        """Sets the asset_skewness_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.

        The skewness parameter of the Cornish-Fisher distribution, corresponding approximately to the skewness of the asset returns  # noqa: E501

        :param asset_skewness_parameter: The asset_skewness_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.
        :type asset_skewness_parameter: float
        """
        if asset_skewness_parameter is None:
            raise ValueError("Invalid value for `asset_skewness_parameter`, must not be `None`")  # noqa: E501

        self._asset_skewness_parameter = asset_skewness_parameter

    @property
    def asset_volatility_parameter(self) -> float:
        """Gets the asset_volatility_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.

        The volatility parameter of the Cornish-Fisher distribution, corresponding approximately to the volatility of the asset returns  # noqa: E501

        :return: The asset_volatility_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.
        :rtype: float
        """
        return self._asset_volatility_parameter

    @asset_volatility_parameter.setter
    def asset_volatility_parameter(self, asset_volatility_parameter: float):
        """Sets the asset_volatility_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.

        The volatility parameter of the Cornish-Fisher distribution, corresponding approximately to the volatility of the asset returns  # noqa: E501

        :param asset_volatility_parameter: The asset_volatility_parameter of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.
        :type asset_volatility_parameter: float
        """
        if asset_volatility_parameter is None:
            raise ValueError("Invalid value for `asset_volatility_parameter`, must not be `None`")  # noqa: E501
        if asset_volatility_parameter is not None and asset_volatility_parameter <= 0:  # noqa: E501
            raise ValueError("Invalid value for `asset_volatility_parameter`, must be a value greater than `0`")  # noqa: E501

        self._asset_volatility_parameter = asset_volatility_parameter

    @property
    def simulations(self) -> int:
        """Gets the simulations of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.

        The number of simulations to perform  # noqa: E501

        :return: The simulations of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.
        :rtype: int
        """
        return self._simulations

    @simulations.setter
    def simulations(self, simulations: int):
        """Sets the simulations of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.

        The number of simulations to perform  # noqa: E501

        :param simulations: The simulations of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.
        :type simulations: int
        """
        if simulations is not None and simulations < 1:  # noqa: E501
            raise ValueError("Invalid value for `simulations`, must be a value greater than or equal to `1`")  # noqa: E501

        self._simulations = simulations

    @property
    def simulations_length(self) -> int:
        """Gets the simulations_length of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.

        The number of time period(s) to simulate per simulation  # noqa: E501

        :return: The simulations_length of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.
        :rtype: int
        """
        return self._simulations_length

    @simulations_length.setter
    def simulations_length(self, simulations_length: int):
        """Sets the simulations_length of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.

        The number of time period(s) to simulate per simulation  # noqa: E501

        :param simulations_length: The simulations_length of this AssetsReturnsSimulationMonteCarloCornishFisherPostRequest.
        :type simulations_length: int
        """
        if simulations_length is not None and simulations_length < 1:  # noqa: E501
            raise ValueError("Invalid value for `simulations_length`, must be a value greater than or equal to `1`")  # noqa: E501

        self._simulations_length = simulations_length

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.portfolio_analysis_alpha_post_request_one_of import PortfolioAnalysisAlphaPostRequestOneOf
from openapi_server.models.portfolio_analysis_alpha_post_request_one_of1 import PortfolioAnalysisAlphaPostRequestOneOf1
from openapi_server.models.portfolio_analysis_alpha_post_request_one_of_portfolios_inner import PortfolioAnalysisAlphaPostRequestOneOfPortfoliosInner
from openapi_server import util

from openapi_server.models.portfolio_analysis_alpha_post_request_one_of import PortfolioAnalysisAlphaPostRequestOneOf  # noqa: E501
from openapi_server.models.portfolio_analysis_alpha_post_request_one_of1 import PortfolioAnalysisAlphaPostRequestOneOf1  # noqa: E501
from openapi_server.models.portfolio_analysis_alpha_post_request_one_of_portfolios_inner import PortfolioAnalysisAlphaPostRequestOneOfPortfoliosInner  # noqa: E501

class PortfolioAnalysisAlphaPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, benchmark_returns=None, portfolios=None, risk_free_rate=None, risk_free_returns=None):  # noqa: E501
        """PortfolioAnalysisAlphaPostRequest - a model defined in OpenAPI

        :param benchmark_returns: The benchmark_returns of this PortfolioAnalysisAlphaPostRequest.  # noqa: E501
        :type benchmark_returns: List[float]
        :param portfolios: The portfolios of this PortfolioAnalysisAlphaPostRequest.  # noqa: E501
        :type portfolios: List[PortfolioAnalysisAlphaPostRequestOneOfPortfoliosInner]
        :param risk_free_rate: The risk_free_rate of this PortfolioAnalysisAlphaPostRequest.  # noqa: E501
        :type risk_free_rate: float
        :param risk_free_returns: The risk_free_returns of this PortfolioAnalysisAlphaPostRequest.  # noqa: E501
        :type risk_free_returns: List[float]
        """
        self.openapi_types = {
            'benchmark_returns': List[float],
            'portfolios': List[PortfolioAnalysisAlphaPostRequestOneOfPortfoliosInner],
            'risk_free_rate': float,
            'risk_free_returns': List[float]
        }

        self.attribute_map = {
            'benchmark_returns': 'benchmarkReturns',
            'portfolios': 'portfolios',
            'risk_free_rate': 'riskFreeRate',
            'risk_free_returns': 'riskFreeReturns'
        }

        self._benchmark_returns = benchmark_returns
        self._portfolios = portfolios
        self._risk_free_rate = risk_free_rate
        self._risk_free_returns = risk_free_returns

    @classmethod
    def from_dict(cls, dikt) -> 'PortfolioAnalysisAlphaPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _portfolio_analysis_alpha_post_request of this PortfolioAnalysisAlphaPostRequest.  # noqa: E501
        :rtype: PortfolioAnalysisAlphaPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def benchmark_returns(self) -> List[float]:
        """Gets the benchmark_returns of this PortfolioAnalysisAlphaPostRequest.

        benchmarkReturns[t] is the return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the portfolioReturns arrays  # noqa: E501

        :return: The benchmark_returns of this PortfolioAnalysisAlphaPostRequest.
        :rtype: List[float]
        """
        return self._benchmark_returns

    @benchmark_returns.setter
    def benchmark_returns(self, benchmark_returns: List[float]):
        """Sets the benchmark_returns of this PortfolioAnalysisAlphaPostRequest.

        benchmarkReturns[t] is the return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the portfolioReturns arrays  # noqa: E501

        :param benchmark_returns: The benchmark_returns of this PortfolioAnalysisAlphaPostRequest.
        :type benchmark_returns: List[float]
        """
        if benchmark_returns is None:
            raise ValueError("Invalid value for `benchmark_returns`, must not be `None`")  # noqa: E501
        if benchmark_returns is not None and len(benchmark_returns) < 2:
            raise ValueError("Invalid value for `benchmark_returns`, number of items must be greater than or equal to `2`")  # noqa: E501

        self._benchmark_returns = benchmark_returns

    @property
    def portfolios(self) -> List[PortfolioAnalysisAlphaPostRequestOneOfPortfoliosInner]:
        """Gets the portfolios of this PortfolioAnalysisAlphaPostRequest.


        :return: The portfolios of this PortfolioAnalysisAlphaPostRequest.
        :rtype: List[PortfolioAnalysisAlphaPostRequestOneOfPortfoliosInner]
        """
        return self._portfolios

    @portfolios.setter
    def portfolios(self, portfolios: List[PortfolioAnalysisAlphaPostRequestOneOfPortfoliosInner]):
        """Sets the portfolios of this PortfolioAnalysisAlphaPostRequest.


        :param portfolios: The portfolios of this PortfolioAnalysisAlphaPostRequest.
        :type portfolios: List[PortfolioAnalysisAlphaPostRequestOneOfPortfoliosInner]
        """
        if portfolios is None:
            raise ValueError("Invalid value for `portfolios`, must not be `None`")  # noqa: E501
        if portfolios is not None and len(portfolios) < 1:
            raise ValueError("Invalid value for `portfolios`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._portfolios = portfolios

    @property
    def risk_free_rate(self) -> float:
        """Gets the risk_free_rate of this PortfolioAnalysisAlphaPostRequest.

        The risk free rate, assumed to be constant for any time t  # noqa: E501

        :return: The risk_free_rate of this PortfolioAnalysisAlphaPostRequest.
        :rtype: float
        """
        return self._risk_free_rate

    @risk_free_rate.setter
    def risk_free_rate(self, risk_free_rate: float):
        """Sets the risk_free_rate of this PortfolioAnalysisAlphaPostRequest.

        The risk free rate, assumed to be constant for any time t  # noqa: E501

        :param risk_free_rate: The risk_free_rate of this PortfolioAnalysisAlphaPostRequest.
        :type risk_free_rate: float
        """

        self._risk_free_rate = risk_free_rate

    @property
    def risk_free_returns(self) -> List[float]:
        """Gets the risk_free_returns of this PortfolioAnalysisAlphaPostRequest.

        riskFreeReturns[t] is the risk free return at the time t; the riskFreeReturns array must have the same length as all the portfolioReturns arrays  # noqa: E501

        :return: The risk_free_returns of this PortfolioAnalysisAlphaPostRequest.
        :rtype: List[float]
        """
        return self._risk_free_returns

    @risk_free_returns.setter
    def risk_free_returns(self, risk_free_returns: List[float]):
        """Sets the risk_free_returns of this PortfolioAnalysisAlphaPostRequest.

        riskFreeReturns[t] is the risk free return at the time t; the riskFreeReturns array must have the same length as all the portfolioReturns arrays  # noqa: E501

        :param risk_free_returns: The risk_free_returns of this PortfolioAnalysisAlphaPostRequest.
        :type risk_free_returns: List[float]
        """
        if risk_free_returns is not None and len(risk_free_returns) < 2:
            raise ValueError("Invalid value for `risk_free_returns`, number of items must be greater than or equal to `2`")  # noqa: E501

        self._risk_free_returns = risk_free_returns

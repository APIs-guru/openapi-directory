from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetsAnalysisTurbulenceIndexPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets=None, assets_average_returns=None, assets_covariance_matrix=None, assets_returns=None):  # noqa: E501
        """AssetsAnalysisTurbulenceIndexPostRequest - a model defined in OpenAPI

        :param assets: The assets of this AssetsAnalysisTurbulenceIndexPostRequest.  # noqa: E501
        :type assets: int
        :param assets_average_returns: The assets_average_returns of this AssetsAnalysisTurbulenceIndexPostRequest.  # noqa: E501
        :type assets_average_returns: List[float]
        :param assets_covariance_matrix: The assets_covariance_matrix of this AssetsAnalysisTurbulenceIndexPostRequest.  # noqa: E501
        :type assets_covariance_matrix: List[List[float]]
        :param assets_returns: The assets_returns of this AssetsAnalysisTurbulenceIndexPostRequest.  # noqa: E501
        :type assets_returns: List[float]
        """
        self.openapi_types = {
            'assets': int,
            'assets_average_returns': List[float],
            'assets_covariance_matrix': List[List[float]],
            'assets_returns': List[float]
        }

        self.attribute_map = {
            'assets': 'assets',
            'assets_average_returns': 'assetsAverageReturns',
            'assets_covariance_matrix': 'assetsCovarianceMatrix',
            'assets_returns': 'assetsReturns'
        }

        self._assets = assets
        self._assets_average_returns = assets_average_returns
        self._assets_covariance_matrix = assets_covariance_matrix
        self._assets_returns = assets_returns

    @classmethod
    def from_dict(cls, dikt) -> 'AssetsAnalysisTurbulenceIndexPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _assets_analysis_turbulence_index_post_request of this AssetsAnalysisTurbulenceIndexPostRequest.  # noqa: E501
        :rtype: AssetsAnalysisTurbulenceIndexPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self) -> int:
        """Gets the assets of this AssetsAnalysisTurbulenceIndexPostRequest.

        The number of assets  # noqa: E501

        :return: The assets of this AssetsAnalysisTurbulenceIndexPostRequest.
        :rtype: int
        """
        return self._assets

    @assets.setter
    def assets(self, assets: int):
        """Sets the assets of this AssetsAnalysisTurbulenceIndexPostRequest.

        The number of assets  # noqa: E501

        :param assets: The assets of this AssetsAnalysisTurbulenceIndexPostRequest.
        :type assets: int
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")  # noqa: E501
        if assets is not None and assets < 1:  # noqa: E501
            raise ValueError("Invalid value for `assets`, must be a value greater than or equal to `1`")  # noqa: E501

        self._assets = assets

    @property
    def assets_average_returns(self) -> List[float]:
        """Gets the assets_average_returns of this AssetsAnalysisTurbulenceIndexPostRequest.

        assetsAverageReturns[i] is the average return of asset i over an historical reference period  # noqa: E501

        :return: The assets_average_returns of this AssetsAnalysisTurbulenceIndexPostRequest.
        :rtype: List[float]
        """
        return self._assets_average_returns

    @assets_average_returns.setter
    def assets_average_returns(self, assets_average_returns: List[float]):
        """Sets the assets_average_returns of this AssetsAnalysisTurbulenceIndexPostRequest.

        assetsAverageReturns[i] is the average return of asset i over an historical reference period  # noqa: E501

        :param assets_average_returns: The assets_average_returns of this AssetsAnalysisTurbulenceIndexPostRequest.
        :type assets_average_returns: List[float]
        """
        if assets_average_returns is None:
            raise ValueError("Invalid value for `assets_average_returns`, must not be `None`")  # noqa: E501
        if assets_average_returns is not None and len(assets_average_returns) < 1:
            raise ValueError("Invalid value for `assets_average_returns`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._assets_average_returns = assets_average_returns

    @property
    def assets_covariance_matrix(self) -> List[List[float]]:
        """Gets the assets_covariance_matrix of this AssetsAnalysisTurbulenceIndexPostRequest.

        assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j over an historical reference period  # noqa: E501

        :return: The assets_covariance_matrix of this AssetsAnalysisTurbulenceIndexPostRequest.
        :rtype: List[List[float]]
        """
        return self._assets_covariance_matrix

    @assets_covariance_matrix.setter
    def assets_covariance_matrix(self, assets_covariance_matrix: List[List[float]]):
        """Sets the assets_covariance_matrix of this AssetsAnalysisTurbulenceIndexPostRequest.

        assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j over an historical reference period  # noqa: E501

        :param assets_covariance_matrix: The assets_covariance_matrix of this AssetsAnalysisTurbulenceIndexPostRequest.
        :type assets_covariance_matrix: List[List[float]]
        """
        if assets_covariance_matrix is None:
            raise ValueError("Invalid value for `assets_covariance_matrix`, must not be `None`")  # noqa: E501
        if assets_covariance_matrix is not None and len(assets_covariance_matrix) < 1:
            raise ValueError("Invalid value for `assets_covariance_matrix`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._assets_covariance_matrix = assets_covariance_matrix

    @property
    def assets_returns(self) -> List[float]:
        """Gets the assets_returns of this AssetsAnalysisTurbulenceIndexPostRequest.

        assetsReturns[i] is the return of asset i over a period different from the historical reference period  # noqa: E501

        :return: The assets_returns of this AssetsAnalysisTurbulenceIndexPostRequest.
        :rtype: List[float]
        """
        return self._assets_returns

    @assets_returns.setter
    def assets_returns(self, assets_returns: List[float]):
        """Sets the assets_returns of this AssetsAnalysisTurbulenceIndexPostRequest.

        assetsReturns[i] is the return of asset i over a period different from the historical reference period  # noqa: E501

        :param assets_returns: The assets_returns of this AssetsAnalysisTurbulenceIndexPostRequest.
        :type assets_returns: List[float]
        """
        if assets_returns is None:
            raise ValueError("Invalid value for `assets_returns`, must not be `None`")  # noqa: E501
        if assets_returns is not None and len(assets_returns) < 1:
            raise ValueError("Invalid value for `assets_returns`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._assets_returns = assets_returns

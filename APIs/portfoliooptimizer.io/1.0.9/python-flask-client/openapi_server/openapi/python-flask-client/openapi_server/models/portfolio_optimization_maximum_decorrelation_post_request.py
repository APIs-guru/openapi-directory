from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.portfolio_analysis_mean_variance_efficient_frontier_post_request_constraints import PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints
from openapi_server import util

from openapi_server.models.portfolio_analysis_mean_variance_efficient_frontier_post_request_constraints import PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints  # noqa: E501

class PortfolioOptimizationMaximumDecorrelationPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets=None, assets_correlation_matrix=None, assets_returns=None, constraints=None):  # noqa: E501
        """PortfolioOptimizationMaximumDecorrelationPostRequest - a model defined in OpenAPI

        :param assets: The assets of this PortfolioOptimizationMaximumDecorrelationPostRequest.  # noqa: E501
        :type assets: int
        :param assets_correlation_matrix: The assets_correlation_matrix of this PortfolioOptimizationMaximumDecorrelationPostRequest.  # noqa: E501
        :type assets_correlation_matrix: List[List[float]]
        :param assets_returns: The assets_returns of this PortfolioOptimizationMaximumDecorrelationPostRequest.  # noqa: E501
        :type assets_returns: List[float]
        :param constraints: The constraints of this PortfolioOptimizationMaximumDecorrelationPostRequest.  # noqa: E501
        :type constraints: PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints
        """
        self.openapi_types = {
            'assets': int,
            'assets_correlation_matrix': List[List[float]],
            'assets_returns': List[float],
            'constraints': PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints
        }

        self.attribute_map = {
            'assets': 'assets',
            'assets_correlation_matrix': 'assetsCorrelationMatrix',
            'assets_returns': 'assetsReturns',
            'constraints': 'constraints'
        }

        self._assets = assets
        self._assets_correlation_matrix = assets_correlation_matrix
        self._assets_returns = assets_returns
        self._constraints = constraints

    @classmethod
    def from_dict(cls, dikt) -> 'PortfolioOptimizationMaximumDecorrelationPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _portfolio_optimization_maximum_decorrelation_post_request of this PortfolioOptimizationMaximumDecorrelationPostRequest.  # noqa: E501
        :rtype: PortfolioOptimizationMaximumDecorrelationPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self) -> int:
        """Gets the assets of this PortfolioOptimizationMaximumDecorrelationPostRequest.

        The number of assets  # noqa: E501

        :return: The assets of this PortfolioOptimizationMaximumDecorrelationPostRequest.
        :rtype: int
        """
        return self._assets

    @assets.setter
    def assets(self, assets: int):
        """Sets the assets of this PortfolioOptimizationMaximumDecorrelationPostRequest.

        The number of assets  # noqa: E501

        :param assets: The assets of this PortfolioOptimizationMaximumDecorrelationPostRequest.
        :type assets: int
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")  # noqa: E501
        if assets is not None and assets < 2:  # noqa: E501
            raise ValueError("Invalid value for `assets`, must be a value greater than or equal to `2`")  # noqa: E501

        self._assets = assets

    @property
    def assets_correlation_matrix(self) -> List[List[float]]:
        """Gets the assets_correlation_matrix of this PortfolioOptimizationMaximumDecorrelationPostRequest.

        assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j  # noqa: E501

        :return: The assets_correlation_matrix of this PortfolioOptimizationMaximumDecorrelationPostRequest.
        :rtype: List[List[float]]
        """
        return self._assets_correlation_matrix

    @assets_correlation_matrix.setter
    def assets_correlation_matrix(self, assets_correlation_matrix: List[List[float]]):
        """Sets the assets_correlation_matrix of this PortfolioOptimizationMaximumDecorrelationPostRequest.

        assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j  # noqa: E501

        :param assets_correlation_matrix: The assets_correlation_matrix of this PortfolioOptimizationMaximumDecorrelationPostRequest.
        :type assets_correlation_matrix: List[List[float]]
        """
        if assets_correlation_matrix is None:
            raise ValueError("Invalid value for `assets_correlation_matrix`, must not be `None`")  # noqa: E501
        if assets_correlation_matrix is not None and len(assets_correlation_matrix) < 2:
            raise ValueError("Invalid value for `assets_correlation_matrix`, number of items must be greater than or equal to `2`")  # noqa: E501

        self._assets_correlation_matrix = assets_correlation_matrix

    @property
    def assets_returns(self) -> List[float]:
        """Gets the assets_returns of this PortfolioOptimizationMaximumDecorrelationPostRequest.

        assetsReturns[i] is the arithmetic return of asset i  # noqa: E501

        :return: The assets_returns of this PortfolioOptimizationMaximumDecorrelationPostRequest.
        :rtype: List[float]
        """
        return self._assets_returns

    @assets_returns.setter
    def assets_returns(self, assets_returns: List[float]):
        """Sets the assets_returns of this PortfolioOptimizationMaximumDecorrelationPostRequest.

        assetsReturns[i] is the arithmetic return of asset i  # noqa: E501

        :param assets_returns: The assets_returns of this PortfolioOptimizationMaximumDecorrelationPostRequest.
        :type assets_returns: List[float]
        """
        if assets_returns is not None and len(assets_returns) < 1:
            raise ValueError("Invalid value for `assets_returns`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._assets_returns = assets_returns

    @property
    def constraints(self) -> PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints:
        """Gets the constraints of this PortfolioOptimizationMaximumDecorrelationPostRequest.


        :return: The constraints of this PortfolioOptimizationMaximumDecorrelationPostRequest.
        :rtype: PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints: PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints):
        """Sets the constraints of this PortfolioOptimizationMaximumDecorrelationPostRequest.


        :param constraints: The constraints of this PortfolioOptimizationMaximumDecorrelationPostRequest.
        :type constraints: PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints
        """

        self._constraints = constraints

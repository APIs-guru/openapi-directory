from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetsCorrelationMatrixBoundsPost200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets_correlation_matrix_lower_bounds=None, assets_correlation_matrix_upper_bounds=None):  # noqa: E501
        """AssetsCorrelationMatrixBoundsPost200Response - a model defined in OpenAPI

        :param assets_correlation_matrix_lower_bounds: The assets_correlation_matrix_lower_bounds of this AssetsCorrelationMatrixBoundsPost200Response.  # noqa: E501
        :type assets_correlation_matrix_lower_bounds: List[List[float]]
        :param assets_correlation_matrix_upper_bounds: The assets_correlation_matrix_upper_bounds of this AssetsCorrelationMatrixBoundsPost200Response.  # noqa: E501
        :type assets_correlation_matrix_upper_bounds: List[List[float]]
        """
        self.openapi_types = {
            'assets_correlation_matrix_lower_bounds': List[List[float]],
            'assets_correlation_matrix_upper_bounds': List[List[float]]
        }

        self.attribute_map = {
            'assets_correlation_matrix_lower_bounds': 'assetsCorrelationMatrixLowerBounds',
            'assets_correlation_matrix_upper_bounds': 'assetsCorrelationMatrixUpperBounds'
        }

        self._assets_correlation_matrix_lower_bounds = assets_correlation_matrix_lower_bounds
        self._assets_correlation_matrix_upper_bounds = assets_correlation_matrix_upper_bounds

    @classmethod
    def from_dict(cls, dikt) -> 'AssetsCorrelationMatrixBoundsPost200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _assets_correlation_matrix_bounds_post_200_response of this AssetsCorrelationMatrixBoundsPost200Response.  # noqa: E501
        :rtype: AssetsCorrelationMatrixBoundsPost200Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets_correlation_matrix_lower_bounds(self) -> List[List[float]]:
        """Gets the assets_correlation_matrix_lower_bounds of this AssetsCorrelationMatrixBoundsPost200Response.

        assetsCorrelationMatrixLowerBounds[i][j] is the lower bound of the correlation between the asset i and the asset j  # noqa: E501

        :return: The assets_correlation_matrix_lower_bounds of this AssetsCorrelationMatrixBoundsPost200Response.
        :rtype: List[List[float]]
        """
        return self._assets_correlation_matrix_lower_bounds

    @assets_correlation_matrix_lower_bounds.setter
    def assets_correlation_matrix_lower_bounds(self, assets_correlation_matrix_lower_bounds: List[List[float]]):
        """Sets the assets_correlation_matrix_lower_bounds of this AssetsCorrelationMatrixBoundsPost200Response.

        assetsCorrelationMatrixLowerBounds[i][j] is the lower bound of the correlation between the asset i and the asset j  # noqa: E501

        :param assets_correlation_matrix_lower_bounds: The assets_correlation_matrix_lower_bounds of this AssetsCorrelationMatrixBoundsPost200Response.
        :type assets_correlation_matrix_lower_bounds: List[List[float]]
        """
        if assets_correlation_matrix_lower_bounds is None:
            raise ValueError("Invalid value for `assets_correlation_matrix_lower_bounds`, must not be `None`")  # noqa: E501
        if assets_correlation_matrix_lower_bounds is not None and len(assets_correlation_matrix_lower_bounds) < 2:
            raise ValueError("Invalid value for `assets_correlation_matrix_lower_bounds`, number of items must be greater than or equal to `2`")  # noqa: E501

        self._assets_correlation_matrix_lower_bounds = assets_correlation_matrix_lower_bounds

    @property
    def assets_correlation_matrix_upper_bounds(self) -> List[List[float]]:
        """Gets the assets_correlation_matrix_upper_bounds of this AssetsCorrelationMatrixBoundsPost200Response.

        assetsCorrelationMatrixUpperBounds[i][j] is the upper bound of the correlation between the asset i and the asset j  # noqa: E501

        :return: The assets_correlation_matrix_upper_bounds of this AssetsCorrelationMatrixBoundsPost200Response.
        :rtype: List[List[float]]
        """
        return self._assets_correlation_matrix_upper_bounds

    @assets_correlation_matrix_upper_bounds.setter
    def assets_correlation_matrix_upper_bounds(self, assets_correlation_matrix_upper_bounds: List[List[float]]):
        """Sets the assets_correlation_matrix_upper_bounds of this AssetsCorrelationMatrixBoundsPost200Response.

        assetsCorrelationMatrixUpperBounds[i][j] is the upper bound of the correlation between the asset i and the asset j  # noqa: E501

        :param assets_correlation_matrix_upper_bounds: The assets_correlation_matrix_upper_bounds of this AssetsCorrelationMatrixBoundsPost200Response.
        :type assets_correlation_matrix_upper_bounds: List[List[float]]
        """
        if assets_correlation_matrix_upper_bounds is None:
            raise ValueError("Invalid value for `assets_correlation_matrix_upper_bounds`, must not be `None`")  # noqa: E501
        if assets_correlation_matrix_upper_bounds is not None and len(assets_correlation_matrix_upper_bounds) < 2:
            raise ValueError("Invalid value for `assets_correlation_matrix_upper_bounds`, number of items must be greater than or equal to `2`")  # noqa: E501

        self._assets_correlation_matrix_upper_bounds = assets_correlation_matrix_upper_bounds

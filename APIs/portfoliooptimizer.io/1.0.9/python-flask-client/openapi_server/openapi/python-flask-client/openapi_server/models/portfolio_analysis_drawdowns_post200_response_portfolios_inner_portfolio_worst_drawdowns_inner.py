from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, drawdown_bottom=None, drawdown_depth=None, drawdown_end=None, drawdown_start=None):  # noqa: E501
        """PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner - a model defined in OpenAPI

        :param drawdown_bottom: The drawdown_bottom of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.  # noqa: E501
        :type drawdown_bottom: int
        :param drawdown_depth: The drawdown_depth of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.  # noqa: E501
        :type drawdown_depth: float
        :param drawdown_end: The drawdown_end of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.  # noqa: E501
        :type drawdown_end: int
        :param drawdown_start: The drawdown_start of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.  # noqa: E501
        :type drawdown_start: int
        """
        self.openapi_types = {
            'drawdown_bottom': int,
            'drawdown_depth': float,
            'drawdown_end': int,
            'drawdown_start': int
        }

        self.attribute_map = {
            'drawdown_bottom': 'drawdownBottom',
            'drawdown_depth': 'drawdownDepth',
            'drawdown_end': 'drawdownEnd',
            'drawdown_start': 'drawdownStart'
        }

        self._drawdown_bottom = drawdown_bottom
        self._drawdown_depth = drawdown_depth
        self._drawdown_end = drawdown_end
        self._drawdown_start = drawdown_start

    @classmethod
    def from_dict(cls, dikt) -> 'PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _portfolio_analysis_drawdowns_post_200_response_portfolios_inner_portfolioWorstDrawdowns_inner of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.  # noqa: E501
        :rtype: PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def drawdown_bottom(self) -> int:
        """Gets the drawdown_bottom of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.


        :return: The drawdown_bottom of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.
        :rtype: int
        """
        return self._drawdown_bottom

    @drawdown_bottom.setter
    def drawdown_bottom(self, drawdown_bottom: int):
        """Sets the drawdown_bottom of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.


        :param drawdown_bottom: The drawdown_bottom of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.
        :type drawdown_bottom: int
        """
        if drawdown_bottom is None:
            raise ValueError("Invalid value for `drawdown_bottom`, must not be `None`")  # noqa: E501
        if drawdown_bottom is not None and drawdown_bottom < 0:  # noqa: E501
            raise ValueError("Invalid value for `drawdown_bottom`, must be a value greater than or equal to `0`")  # noqa: E501

        self._drawdown_bottom = drawdown_bottom

    @property
    def drawdown_depth(self) -> float:
        """Gets the drawdown_depth of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.


        :return: The drawdown_depth of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.
        :rtype: float
        """
        return self._drawdown_depth

    @drawdown_depth.setter
    def drawdown_depth(self, drawdown_depth: float):
        """Sets the drawdown_depth of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.


        :param drawdown_depth: The drawdown_depth of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.
        :type drawdown_depth: float
        """
        if drawdown_depth is None:
            raise ValueError("Invalid value for `drawdown_depth`, must not be `None`")  # noqa: E501
        if drawdown_depth is not None and drawdown_depth < 0:  # noqa: E501
            raise ValueError("Invalid value for `drawdown_depth`, must be a value greater than or equal to `0`")  # noqa: E501

        self._drawdown_depth = drawdown_depth

    @property
    def drawdown_end(self) -> int:
        """Gets the drawdown_end of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.


        :return: The drawdown_end of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.
        :rtype: int
        """
        return self._drawdown_end

    @drawdown_end.setter
    def drawdown_end(self, drawdown_end: int):
        """Sets the drawdown_end of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.


        :param drawdown_end: The drawdown_end of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.
        :type drawdown_end: int
        """
        if drawdown_end is None:
            raise ValueError("Invalid value for `drawdown_end`, must not be `None`")  # noqa: E501
        if drawdown_end is not None and drawdown_end < 0:  # noqa: E501
            raise ValueError("Invalid value for `drawdown_end`, must be a value greater than or equal to `0`")  # noqa: E501

        self._drawdown_end = drawdown_end

    @property
    def drawdown_start(self) -> int:
        """Gets the drawdown_start of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.


        :return: The drawdown_start of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.
        :rtype: int
        """
        return self._drawdown_start

    @drawdown_start.setter
    def drawdown_start(self, drawdown_start: int):
        """Sets the drawdown_start of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.


        :param drawdown_start: The drawdown_start of this PortfolioAnalysisDrawdownsPost200ResponsePortfoliosInnerPortfolioWorstDrawdownsInner.
        :type drawdown_start: int
        """
        if drawdown_start is None:
            raise ValueError("Invalid value for `drawdown_start`, must not be `None`")  # noqa: E501
        if drawdown_start is not None and drawdown_start < 0:  # noqa: E501
            raise ValueError("Invalid value for `drawdown_start`, must be a value greater than or equal to `0`")  # noqa: E501

        self._drawdown_start = drawdown_start

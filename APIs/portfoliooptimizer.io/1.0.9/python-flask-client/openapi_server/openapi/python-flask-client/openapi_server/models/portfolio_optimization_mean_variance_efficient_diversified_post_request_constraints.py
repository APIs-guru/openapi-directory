from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets_groups=None, assets_groups_matrix=None, delta_return=0.1, delta_volatility=0.1, maximum_assets_groups_weights=None, maximum_assets_weights=None, maximum_portfolio_exposure=1, minimum_assets_weights=None, minimum_portfolio_exposure=1, portfolio_return=None, portfolio_volatility=None, risk_tolerance=None):  # noqa: E501
        """PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints - a model defined in OpenAPI

        :param assets_groups: The assets_groups of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.  # noqa: E501
        :type assets_groups: List[list[int]]
        :param assets_groups_matrix: The assets_groups_matrix of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.  # noqa: E501
        :type assets_groups_matrix: List[List[float]]
        :param delta_return: The delta_return of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.  # noqa: E501
        :type delta_return: float
        :param delta_volatility: The delta_volatility of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.  # noqa: E501
        :type delta_volatility: float
        :param maximum_assets_groups_weights: The maximum_assets_groups_weights of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.  # noqa: E501
        :type maximum_assets_groups_weights: List[float]
        :param maximum_assets_weights: The maximum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.  # noqa: E501
        :type maximum_assets_weights: List[float]
        :param maximum_portfolio_exposure: The maximum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.  # noqa: E501
        :type maximum_portfolio_exposure: float
        :param minimum_assets_weights: The minimum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.  # noqa: E501
        :type minimum_assets_weights: List[float]
        :param minimum_portfolio_exposure: The minimum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.  # noqa: E501
        :type minimum_portfolio_exposure: float
        :param portfolio_return: The portfolio_return of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.  # noqa: E501
        :type portfolio_return: float
        :param portfolio_volatility: The portfolio_volatility of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.  # noqa: E501
        :type portfolio_volatility: float
        :param risk_tolerance: The risk_tolerance of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.  # noqa: E501
        :type risk_tolerance: float
        """
        self.openapi_types = {
            'assets_groups': List[list[int]],
            'assets_groups_matrix': List[List[float]],
            'delta_return': float,
            'delta_volatility': float,
            'maximum_assets_groups_weights': List[float],
            'maximum_assets_weights': List[float],
            'maximum_portfolio_exposure': float,
            'minimum_assets_weights': List[float],
            'minimum_portfolio_exposure': float,
            'portfolio_return': float,
            'portfolio_volatility': float,
            'risk_tolerance': float
        }

        self.attribute_map = {
            'assets_groups': 'assetsGroups',
            'assets_groups_matrix': 'assetsGroupsMatrix',
            'delta_return': 'deltaReturn',
            'delta_volatility': 'deltaVolatility',
            'maximum_assets_groups_weights': 'maximumAssetsGroupsWeights',
            'maximum_assets_weights': 'maximumAssetsWeights',
            'maximum_portfolio_exposure': 'maximumPortfolioExposure',
            'minimum_assets_weights': 'minimumAssetsWeights',
            'minimum_portfolio_exposure': 'minimumPortfolioExposure',
            'portfolio_return': 'portfolioReturn',
            'portfolio_volatility': 'portfolioVolatility',
            'risk_tolerance': 'riskTolerance'
        }

        self._assets_groups = assets_groups
        self._assets_groups_matrix = assets_groups_matrix
        self._delta_return = delta_return
        self._delta_volatility = delta_volatility
        self._maximum_assets_groups_weights = maximum_assets_groups_weights
        self._maximum_assets_weights = maximum_assets_weights
        self._maximum_portfolio_exposure = maximum_portfolio_exposure
        self._minimum_assets_weights = minimum_assets_weights
        self._minimum_portfolio_exposure = minimum_portfolio_exposure
        self._portfolio_return = portfolio_return
        self._portfolio_volatility = portfolio_volatility
        self._risk_tolerance = risk_tolerance

    @classmethod
    def from_dict(cls, dikt) -> 'PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _portfolio_optimization_mean_variance_efficient_diversified_post_request_constraints of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.  # noqa: E501
        :rtype: PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets_groups(self) -> List[list[int]]:
        """Gets the assets_groups of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.


        :return: The assets_groups of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :rtype: List[list[int]]
        """
        return self._assets_groups

    @assets_groups.setter
    def assets_groups(self, assets_groups: List[list[int]]):
        """Sets the assets_groups of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.


        :param assets_groups: The assets_groups of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :type assets_groups: List[list[int]]
        """
        if assets_groups is not None and len(assets_groups) < 1:
            raise ValueError("Invalid value for `assets_groups`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._assets_groups = assets_groups

    @property
    def assets_groups_matrix(self) -> List[List[float]]:
        """Gets the assets_groups_matrix of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups  # noqa: E501

        :return: The assets_groups_matrix of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :rtype: List[List[float]]
        """
        return self._assets_groups_matrix

    @assets_groups_matrix.setter
    def assets_groups_matrix(self, assets_groups_matrix: List[List[float]]):
        """Sets the assets_groups_matrix of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups  # noqa: E501

        :param assets_groups_matrix: The assets_groups_matrix of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :type assets_groups_matrix: List[List[float]]
        """
        if assets_groups_matrix is not None and len(assets_groups_matrix) < 1:
            raise ValueError("Invalid value for `assets_groups_matrix`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._assets_groups_matrix = assets_groups_matrix

    @property
    def delta_return(self) -> float:
        """Gets the delta_return of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        The relative tolerance over the mean-variance efficient portfolio return  # noqa: E501

        :return: The delta_return of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :rtype: float
        """
        return self._delta_return

    @delta_return.setter
    def delta_return(self, delta_return: float):
        """Sets the delta_return of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        The relative tolerance over the mean-variance efficient portfolio return  # noqa: E501

        :param delta_return: The delta_return of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :type delta_return: float
        """
        if delta_return is not None and delta_return < 0:  # noqa: E501
            raise ValueError("Invalid value for `delta_return`, must be a value greater than or equal to `0`")  # noqa: E501

        self._delta_return = delta_return

    @property
    def delta_volatility(self) -> float:
        """Gets the delta_volatility of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        The relative tolerance over the mean-variance efficient portfolio volatility  # noqa: E501

        :return: The delta_volatility of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :rtype: float
        """
        return self._delta_volatility

    @delta_volatility.setter
    def delta_volatility(self, delta_volatility: float):
        """Sets the delta_volatility of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        The relative tolerance over the mean-variance efficient portfolio volatility  # noqa: E501

        :param delta_volatility: The delta_volatility of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :type delta_volatility: float
        """
        if delta_volatility is not None and delta_volatility < 0:  # noqa: E501
            raise ValueError("Invalid value for `delta_volatility`, must be a value greater than or equal to `0`")  # noqa: E501

        self._delta_volatility = delta_volatility

    @property
    def maximum_assets_groups_weights(self) -> List[float]:
        """Gets the maximum_assets_groups_weights of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided  # noqa: E501

        :return: The maximum_assets_groups_weights of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :rtype: List[float]
        """
        return self._maximum_assets_groups_weights

    @maximum_assets_groups_weights.setter
    def maximum_assets_groups_weights(self, maximum_assets_groups_weights: List[float]):
        """Sets the maximum_assets_groups_weights of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided  # noqa: E501

        :param maximum_assets_groups_weights: The maximum_assets_groups_weights of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :type maximum_assets_groups_weights: List[float]
        """

        self._maximum_assets_groups_weights = maximum_assets_groups_weights

    @property
    def maximum_assets_weights(self) -> List[float]:
        """Gets the maximum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage  # noqa: E501

        :return: The maximum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :rtype: List[float]
        """
        return self._maximum_assets_weights

    @maximum_assets_weights.setter
    def maximum_assets_weights(self, maximum_assets_weights: List[float]):
        """Sets the maximum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage  # noqa: E501

        :param maximum_assets_weights: The maximum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :type maximum_assets_weights: List[float]
        """

        self._maximum_assets_weights = maximum_assets_weights

    @property
    def maximum_portfolio_exposure(self) -> float:
        """Gets the maximum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure  # noqa: E501

        :return: The maximum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :rtype: float
        """
        return self._maximum_portfolio_exposure

    @maximum_portfolio_exposure.setter
    def maximum_portfolio_exposure(self, maximum_portfolio_exposure: float):
        """Sets the maximum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure  # noqa: E501

        :param maximum_portfolio_exposure: The maximum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :type maximum_portfolio_exposure: float
        """
        if maximum_portfolio_exposure is not None and maximum_portfolio_exposure > 1:  # noqa: E501
            raise ValueError("Invalid value for `maximum_portfolio_exposure`, must be a value less than or equal to `1`")  # noqa: E501
        if maximum_portfolio_exposure is not None and maximum_portfolio_exposure < 0:  # noqa: E501
            raise ValueError("Invalid value for `maximum_portfolio_exposure`, must be a value greater than or equal to `0`")  # noqa: E501

        self._maximum_portfolio_exposure = maximum_portfolio_exposure

    @property
    def minimum_assets_weights(self) -> List[float]:
        """Gets the minimum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage  # noqa: E501

        :return: The minimum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :rtype: List[float]
        """
        return self._minimum_assets_weights

    @minimum_assets_weights.setter
    def minimum_assets_weights(self, minimum_assets_weights: List[float]):
        """Sets the minimum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage  # noqa: E501

        :param minimum_assets_weights: The minimum_assets_weights of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :type minimum_assets_weights: List[float]
        """

        self._minimum_assets_weights = minimum_assets_weights

    @property
    def minimum_portfolio_exposure(self) -> float:
        """Gets the minimum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure  # noqa: E501

        :return: The minimum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :rtype: float
        """
        return self._minimum_portfolio_exposure

    @minimum_portfolio_exposure.setter
    def minimum_portfolio_exposure(self, minimum_portfolio_exposure: float):
        """Sets the minimum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure  # noqa: E501

        :param minimum_portfolio_exposure: The minimum_portfolio_exposure of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :type minimum_portfolio_exposure: float
        """
        if minimum_portfolio_exposure is not None and minimum_portfolio_exposure > 1:  # noqa: E501
            raise ValueError("Invalid value for `minimum_portfolio_exposure`, must be a value less than or equal to `1`")  # noqa: E501
        if minimum_portfolio_exposure is not None and minimum_portfolio_exposure < 0:  # noqa: E501
            raise ValueError("Invalid value for `minimum_portfolio_exposure`, must be a value greater than or equal to `0`")  # noqa: E501

        self._minimum_portfolio_exposure = minimum_portfolio_exposure

    @property
    def portfolio_return(self) -> float:
        """Gets the portfolio_return of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        The portfolio return; exclusive with portfolioVolatility and riskTolerance  # noqa: E501

        :return: The portfolio_return of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :rtype: float
        """
        return self._portfolio_return

    @portfolio_return.setter
    def portfolio_return(self, portfolio_return: float):
        """Sets the portfolio_return of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        The portfolio return; exclusive with portfolioVolatility and riskTolerance  # noqa: E501

        :param portfolio_return: The portfolio_return of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :type portfolio_return: float
        """

        self._portfolio_return = portfolio_return

    @property
    def portfolio_volatility(self) -> float:
        """Gets the portfolio_volatility of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        The portfolio volatility; exclusive with portfolioReturn and riskTolerance  # noqa: E501

        :return: The portfolio_volatility of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :rtype: float
        """
        return self._portfolio_volatility

    @portfolio_volatility.setter
    def portfolio_volatility(self, portfolio_volatility: float):
        """Sets the portfolio_volatility of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        The portfolio volatility; exclusive with portfolioReturn and riskTolerance  # noqa: E501

        :param portfolio_volatility: The portfolio_volatility of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :type portfolio_volatility: float
        """
        if portfolio_volatility is not None and portfolio_volatility < 0:  # noqa: E501
            raise ValueError("Invalid value for `portfolio_volatility`, must be a value greater than or equal to `0`")  # noqa: E501

        self._portfolio_volatility = portfolio_volatility

    @property
    def risk_tolerance(self) -> float:
        """Gets the risk_tolerance of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        The portfolio risk tolerance; exclusive with portfolioReturn and portfolioVolatility  # noqa: E501

        :return: The risk_tolerance of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :rtype: float
        """
        return self._risk_tolerance

    @risk_tolerance.setter
    def risk_tolerance(self, risk_tolerance: float):
        """Sets the risk_tolerance of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.

        The portfolio risk tolerance; exclusive with portfolioReturn and portfolioVolatility  # noqa: E501

        :param risk_tolerance: The risk_tolerance of this PortfolioOptimizationMeanVarianceEfficientDiversifiedPostRequestConstraints.
        :type risk_tolerance: float
        """
        if risk_tolerance is not None and risk_tolerance < 0:  # noqa: E501
            raise ValueError("Invalid value for `risk_tolerance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._risk_tolerance = risk_tolerance

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.assets_returns_post_request_assets_inner import AssetsReturnsPostRequestAssetsInner
from openapi_server import util

from openapi_server.models.assets_returns_post_request_assets_inner import AssetsReturnsPostRequestAssetsInner  # noqa: E501

class PortfolioSimulationRebalancingRandomWeightPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets=None, portfolios=25):  # noqa: E501
        """PortfolioSimulationRebalancingRandomWeightPostRequest - a model defined in OpenAPI

        :param assets: The assets of this PortfolioSimulationRebalancingRandomWeightPostRequest.  # noqa: E501
        :type assets: List[AssetsReturnsPostRequestAssetsInner]
        :param portfolios: The portfolios of this PortfolioSimulationRebalancingRandomWeightPostRequest.  # noqa: E501
        :type portfolios: int
        """
        self.openapi_types = {
            'assets': List[AssetsReturnsPostRequestAssetsInner],
            'portfolios': int
        }

        self.attribute_map = {
            'assets': 'assets',
            'portfolios': 'portfolios'
        }

        self._assets = assets
        self._portfolios = portfolios

    @classmethod
    def from_dict(cls, dikt) -> 'PortfolioSimulationRebalancingRandomWeightPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _portfolio_simulation_rebalancing_random_weight_post_request of this PortfolioSimulationRebalancingRandomWeightPostRequest.  # noqa: E501
        :rtype: PortfolioSimulationRebalancingRandomWeightPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self) -> List[AssetsReturnsPostRequestAssetsInner]:
        """Gets the assets of this PortfolioSimulationRebalancingRandomWeightPostRequest.


        :return: The assets of this PortfolioSimulationRebalancingRandomWeightPostRequest.
        :rtype: List[AssetsReturnsPostRequestAssetsInner]
        """
        return self._assets

    @assets.setter
    def assets(self, assets: List[AssetsReturnsPostRequestAssetsInner]):
        """Sets the assets of this PortfolioSimulationRebalancingRandomWeightPostRequest.


        :param assets: The assets of this PortfolioSimulationRebalancingRandomWeightPostRequest.
        :type assets: List[AssetsReturnsPostRequestAssetsInner]
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")  # noqa: E501
        if assets is not None and len(assets) < 1:
            raise ValueError("Invalid value for `assets`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._assets = assets

    @property
    def portfolios(self) -> int:
        """Gets the portfolios of this PortfolioSimulationRebalancingRandomWeightPostRequest.

        The number of portfolios to simulate  # noqa: E501

        :return: The portfolios of this PortfolioSimulationRebalancingRandomWeightPostRequest.
        :rtype: int
        """
        return self._portfolios

    @portfolios.setter
    def portfolios(self, portfolios: int):
        """Sets the portfolios of this PortfolioSimulationRebalancingRandomWeightPostRequest.

        The number of portfolios to simulate  # noqa: E501

        :param portfolios: The portfolios of this PortfolioSimulationRebalancingRandomWeightPostRequest.
        :type portfolios: int
        """
        if portfolios is not None and portfolios < 1:  # noqa: E501
            raise ValueError("Invalid value for `portfolios`, must be a value greater than or equal to `1`")  # noqa: E501

        self._portfolios = portfolios

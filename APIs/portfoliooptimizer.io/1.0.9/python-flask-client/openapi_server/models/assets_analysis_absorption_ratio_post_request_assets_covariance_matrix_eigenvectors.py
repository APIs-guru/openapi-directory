from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetsAnalysisAbsorptionRatioPostRequestAssetsCovarianceMatrixEigenvectors(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eigenvectors_retained=None):  # noqa: E501
        """AssetsAnalysisAbsorptionRatioPostRequestAssetsCovarianceMatrixEigenvectors - a model defined in OpenAPI

        :param eigenvectors_retained: The eigenvectors_retained of this AssetsAnalysisAbsorptionRatioPostRequestAssetsCovarianceMatrixEigenvectors.  # noqa: E501
        :type eigenvectors_retained: int
        """
        self.openapi_types = {
            'eigenvectors_retained': int
        }

        self.attribute_map = {
            'eigenvectors_retained': 'eigenvectorsRetained'
        }

        self._eigenvectors_retained = eigenvectors_retained

    @classmethod
    def from_dict(cls, dikt) -> 'AssetsAnalysisAbsorptionRatioPostRequestAssetsCovarianceMatrixEigenvectors':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _assets_analysis_absorption_ratio_post_request_assetsCovarianceMatrixEigenvectors of this AssetsAnalysisAbsorptionRatioPostRequestAssetsCovarianceMatrixEigenvectors.  # noqa: E501
        :rtype: AssetsAnalysisAbsorptionRatioPostRequestAssetsCovarianceMatrixEigenvectors
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eigenvectors_retained(self) -> int:
        """Gets the eigenvectors_retained of this AssetsAnalysisAbsorptionRatioPostRequestAssetsCovarianceMatrixEigenvectors.

        The number of eigenvectors to retain in the numerator of the absorption ratio, which must be lower than the number of assets; defaults to [1/5-th] the number of assets  # noqa: E501

        :return: The eigenvectors_retained of this AssetsAnalysisAbsorptionRatioPostRequestAssetsCovarianceMatrixEigenvectors.
        :rtype: int
        """
        return self._eigenvectors_retained

    @eigenvectors_retained.setter
    def eigenvectors_retained(self, eigenvectors_retained: int):
        """Sets the eigenvectors_retained of this AssetsAnalysisAbsorptionRatioPostRequestAssetsCovarianceMatrixEigenvectors.

        The number of eigenvectors to retain in the numerator of the absorption ratio, which must be lower than the number of assets; defaults to [1/5-th] the number of assets  # noqa: E501

        :param eigenvectors_retained: The eigenvectors_retained of this AssetsAnalysisAbsorptionRatioPostRequestAssetsCovarianceMatrixEigenvectors.
        :type eigenvectors_retained: int
        """
        if eigenvectors_retained is not None and eigenvectors_retained < 1:  # noqa: E501
            raise ValueError("Invalid value for `eigenvectors_retained`, must be a value greater than or equal to `1`")  # noqa: E501

        self._eigenvectors_retained = eigenvectors_retained

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class PortfolioOptimizationEqualVolatilityWeightedPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets=None, assets_volatilities=None):  # noqa: E501
        """PortfolioOptimizationEqualVolatilityWeightedPostRequest - a model defined in OpenAPI

        :param assets: The assets of this PortfolioOptimizationEqualVolatilityWeightedPostRequest.  # noqa: E501
        :type assets: int
        :param assets_volatilities: The assets_volatilities of this PortfolioOptimizationEqualVolatilityWeightedPostRequest.  # noqa: E501
        :type assets_volatilities: List[float]
        """
        self.openapi_types = {
            'assets': int,
            'assets_volatilities': List[float]
        }

        self.attribute_map = {
            'assets': 'assets',
            'assets_volatilities': 'assetsVolatilities'
        }

        self._assets = assets
        self._assets_volatilities = assets_volatilities

    @classmethod
    def from_dict(cls, dikt) -> 'PortfolioOptimizationEqualVolatilityWeightedPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _portfolio_optimization_equal_volatility_weighted_post_request of this PortfolioOptimizationEqualVolatilityWeightedPostRequest.  # noqa: E501
        :rtype: PortfolioOptimizationEqualVolatilityWeightedPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self) -> int:
        """Gets the assets of this PortfolioOptimizationEqualVolatilityWeightedPostRequest.

        The number of assets  # noqa: E501

        :return: The assets of this PortfolioOptimizationEqualVolatilityWeightedPostRequest.
        :rtype: int
        """
        return self._assets

    @assets.setter
    def assets(self, assets: int):
        """Sets the assets of this PortfolioOptimizationEqualVolatilityWeightedPostRequest.

        The number of assets  # noqa: E501

        :param assets: The assets of this PortfolioOptimizationEqualVolatilityWeightedPostRequest.
        :type assets: int
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")  # noqa: E501
        if assets is not None and assets < 2:  # noqa: E501
            raise ValueError("Invalid value for `assets`, must be a value greater than or equal to `2`")  # noqa: E501

        self._assets = assets

    @property
    def assets_volatilities(self) -> List[float]:
        """Gets the assets_volatilities of this PortfolioOptimizationEqualVolatilityWeightedPostRequest.

        assetsVolatilities[i] is the volatility of the asset i  # noqa: E501

        :return: The assets_volatilities of this PortfolioOptimizationEqualVolatilityWeightedPostRequest.
        :rtype: List[float]
        """
        return self._assets_volatilities

    @assets_volatilities.setter
    def assets_volatilities(self, assets_volatilities: List[float]):
        """Sets the assets_volatilities of this PortfolioOptimizationEqualVolatilityWeightedPostRequest.

        assetsVolatilities[i] is the volatility of the asset i  # noqa: E501

        :param assets_volatilities: The assets_volatilities of this PortfolioOptimizationEqualVolatilityWeightedPostRequest.
        :type assets_volatilities: List[float]
        """
        if assets_volatilities is None:
            raise ValueError("Invalid value for `assets_volatilities`, must not be `None`")  # noqa: E501
        if assets_volatilities is not None and len(assets_volatilities) < 2:
            raise ValueError("Invalid value for `assets_volatilities`, number of items must be greater than or equal to `2`")  # noqa: E501

        self._assets_volatilities = assets_volatilities

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.assets_returns_simulation_bootstrap_post200_response_simulations_inner_assets_inner import AssetsReturnsSimulationBootstrapPost200ResponseSimulationsInnerAssetsInner
from openapi_server import util

from openapi_server.models.assets_returns_simulation_bootstrap_post200_response_simulations_inner_assets_inner import AssetsReturnsSimulationBootstrapPost200ResponseSimulationsInnerAssetsInner  # noqa: E501

class AssetsReturnsSimulationMonteCarloCornishFisherPost200ResponseSimulationsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets=None):  # noqa: E501
        """AssetsReturnsSimulationMonteCarloCornishFisherPost200ResponseSimulationsInner - a model defined in OpenAPI

        :param assets: The assets of this AssetsReturnsSimulationMonteCarloCornishFisherPost200ResponseSimulationsInner.  # noqa: E501
        :type assets: List[AssetsReturnsSimulationBootstrapPost200ResponseSimulationsInnerAssetsInner]
        """
        self.openapi_types = {
            'assets': List[AssetsReturnsSimulationBootstrapPost200ResponseSimulationsInnerAssetsInner]
        }

        self.attribute_map = {
            'assets': 'assets'
        }

        self._assets = assets

    @classmethod
    def from_dict(cls, dikt) -> 'AssetsReturnsSimulationMonteCarloCornishFisherPost200ResponseSimulationsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _assets_returns_simulation_monte_carlo_cornish_fisher_post_200_response_simulations_inner of this AssetsReturnsSimulationMonteCarloCornishFisherPost200ResponseSimulationsInner.  # noqa: E501
        :rtype: AssetsReturnsSimulationMonteCarloCornishFisherPost200ResponseSimulationsInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self) -> List[AssetsReturnsSimulationBootstrapPost200ResponseSimulationsInnerAssetsInner]:
        """Gets the assets of this AssetsReturnsSimulationMonteCarloCornishFisherPost200ResponseSimulationsInner.

        assets[i] is the data for the i-th asset  # noqa: E501

        :return: The assets of this AssetsReturnsSimulationMonteCarloCornishFisherPost200ResponseSimulationsInner.
        :rtype: List[AssetsReturnsSimulationBootstrapPost200ResponseSimulationsInnerAssetsInner]
        """
        return self._assets

    @assets.setter
    def assets(self, assets: List[AssetsReturnsSimulationBootstrapPost200ResponseSimulationsInnerAssetsInner]):
        """Sets the assets of this AssetsReturnsSimulationMonteCarloCornishFisherPost200ResponseSimulationsInner.

        assets[i] is the data for the i-th asset  # noqa: E501

        :param assets: The assets of this AssetsReturnsSimulationMonteCarloCornishFisherPost200ResponseSimulationsInner.
        :type assets: List[AssetsReturnsSimulationBootstrapPost200ResponseSimulationsInnerAssetsInner]
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")  # noqa: E501
        if assets is not None and len(assets) > 1:
            raise ValueError("Invalid value for `assets`, number of items must be less than or equal to `1`")  # noqa: E501
        if assets is not None and len(assets) < 1:
            raise ValueError("Invalid value for `assets`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._assets = assets

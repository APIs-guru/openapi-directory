from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.portfolio_construction_random_post_request_constraints import PortfolioConstructionRandomPostRequestConstraints
from openapi_server import util

from openapi_server.models.portfolio_construction_random_post_request_constraints import PortfolioConstructionRandomPostRequestConstraints  # noqa: E501

class PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, across_cluster_allocation_method='equalWeighting', assets=None, assets_covariance_matrix=None, clustering_method='wardLinkage', clustering_ordering='r-hclust', clusters=None, constraints=None, within_cluster_allocation_method='equalWeighting'):  # noqa: E501
        """PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest - a model defined in OpenAPI

        :param across_cluster_allocation_method: The across_cluster_allocation_method of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.  # noqa: E501
        :type across_cluster_allocation_method: str
        :param assets: The assets of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.  # noqa: E501
        :type assets: int
        :param assets_covariance_matrix: The assets_covariance_matrix of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.  # noqa: E501
        :type assets_covariance_matrix: List[List[float]]
        :param clustering_method: The clustering_method of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.  # noqa: E501
        :type clustering_method: str
        :param clustering_ordering: The clustering_ordering of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.  # noqa: E501
        :type clustering_ordering: str
        :param clusters: The clusters of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.  # noqa: E501
        :type clusters: int
        :param constraints: The constraints of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.  # noqa: E501
        :type constraints: PortfolioConstructionRandomPostRequestConstraints
        :param within_cluster_allocation_method: The within_cluster_allocation_method of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.  # noqa: E501
        :type within_cluster_allocation_method: str
        """
        self.openapi_types = {
            'across_cluster_allocation_method': str,
            'assets': int,
            'assets_covariance_matrix': List[List[float]],
            'clustering_method': str,
            'clustering_ordering': str,
            'clusters': int,
            'constraints': PortfolioConstructionRandomPostRequestConstraints,
            'within_cluster_allocation_method': str
        }

        self.attribute_map = {
            'across_cluster_allocation_method': 'acrossClusterAllocationMethod',
            'assets': 'assets',
            'assets_covariance_matrix': 'assetsCovarianceMatrix',
            'clustering_method': 'clusteringMethod',
            'clustering_ordering': 'clusteringOrdering',
            'clusters': 'clusters',
            'constraints': 'constraints',
            'within_cluster_allocation_method': 'withinClusterAllocationMethod'
        }

        self._across_cluster_allocation_method = across_cluster_allocation_method
        self._assets = assets
        self._assets_covariance_matrix = assets_covariance_matrix
        self._clustering_method = clustering_method
        self._clustering_ordering = clustering_ordering
        self._clusters = clusters
        self._constraints = constraints
        self._within_cluster_allocation_method = within_cluster_allocation_method

    @classmethod
    def from_dict(cls, dikt) -> 'PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _portfolio_optimization_hierarchical_risk_parity_clustering_based_post_request of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.  # noqa: E501
        :rtype: PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def across_cluster_allocation_method(self) -> str:
        """Gets the across_cluster_allocation_method of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.

        The allocation method to use across clusters  # noqa: E501

        :return: The across_cluster_allocation_method of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.
        :rtype: str
        """
        return self._across_cluster_allocation_method

    @across_cluster_allocation_method.setter
    def across_cluster_allocation_method(self, across_cluster_allocation_method: str):
        """Sets the across_cluster_allocation_method of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.

        The allocation method to use across clusters  # noqa: E501

        :param across_cluster_allocation_method: The across_cluster_allocation_method of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.
        :type across_cluster_allocation_method: str
        """
        allowed_values = ["equalWeighting", "inverseVolatility", "inverseVariance"]  # noqa: E501
        if across_cluster_allocation_method not in allowed_values:
            raise ValueError(
                "Invalid value for `across_cluster_allocation_method` ({0}), must be one of {1}"
                .format(across_cluster_allocation_method, allowed_values)
            )

        self._across_cluster_allocation_method = across_cluster_allocation_method

    @property
    def assets(self) -> int:
        """Gets the assets of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.

        The number of assets  # noqa: E501

        :return: The assets of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.
        :rtype: int
        """
        return self._assets

    @assets.setter
    def assets(self, assets: int):
        """Sets the assets of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.

        The number of assets  # noqa: E501

        :param assets: The assets of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.
        :type assets: int
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")  # noqa: E501
        if assets is not None and assets < 2:  # noqa: E501
            raise ValueError("Invalid value for `assets`, must be a value greater than or equal to `2`")  # noqa: E501

        self._assets = assets

    @property
    def assets_covariance_matrix(self) -> List[List[float]]:
        """Gets the assets_covariance_matrix of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.

        assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j  # noqa: E501

        :return: The assets_covariance_matrix of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.
        :rtype: List[List[float]]
        """
        return self._assets_covariance_matrix

    @assets_covariance_matrix.setter
    def assets_covariance_matrix(self, assets_covariance_matrix: List[List[float]]):
        """Sets the assets_covariance_matrix of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.

        assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j  # noqa: E501

        :param assets_covariance_matrix: The assets_covariance_matrix of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.
        :type assets_covariance_matrix: List[List[float]]
        """
        if assets_covariance_matrix is None:
            raise ValueError("Invalid value for `assets_covariance_matrix`, must not be `None`")  # noqa: E501
        if assets_covariance_matrix is not None and len(assets_covariance_matrix) < 2:
            raise ValueError("Invalid value for `assets_covariance_matrix`, number of items must be greater than or equal to `2`")  # noqa: E501

        self._assets_covariance_matrix = assets_covariance_matrix

    @property
    def clustering_method(self) -> str:
        """Gets the clustering_method of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.

        The hierarchical clustering method to use  # noqa: E501

        :return: The clustering_method of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.
        :rtype: str
        """
        return self._clustering_method

    @clustering_method.setter
    def clustering_method(self, clustering_method: str):
        """Sets the clustering_method of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.

        The hierarchical clustering method to use  # noqa: E501

        :param clustering_method: The clustering_method of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.
        :type clustering_method: str
        """
        allowed_values = ["singleLinkage", "averageLinkage", "completeLinkage", "wardLinkage"]  # noqa: E501
        if clustering_method not in allowed_values:
            raise ValueError(
                "Invalid value for `clustering_method` ({0}), must be one of {1}"
                .format(clustering_method, allowed_values)
            )

        self._clustering_method = clustering_method

    @property
    def clustering_ordering(self) -> str:
        """Gets the clustering_ordering of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.

        The order to impose on the hierarchical clustering tree leaves  # noqa: E501

        :return: The clustering_ordering of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.
        :rtype: str
        """
        return self._clustering_ordering

    @clustering_ordering.setter
    def clustering_ordering(self, clustering_ordering: str):
        """Sets the clustering_ordering of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.

        The order to impose on the hierarchical clustering tree leaves  # noqa: E501

        :param clustering_ordering: The clustering_ordering of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.
        :type clustering_ordering: str
        """
        allowed_values = ["r-hclust", "optimal"]  # noqa: E501
        if clustering_ordering not in allowed_values:
            raise ValueError(
                "Invalid value for `clustering_ordering` ({0}), must be one of {1}"
                .format(clustering_ordering, allowed_values)
            )

        self._clustering_ordering = clustering_ordering

    @property
    def clusters(self) -> int:
        """Gets the clusters of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.

        The number of clusters to use in the hierarchical clustering tree; if not provided, the number of clusters to use is computed using the gap statistic method, as described in the first reference  # noqa: E501

        :return: The clusters of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.
        :rtype: int
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters: int):
        """Sets the clusters of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.

        The number of clusters to use in the hierarchical clustering tree; if not provided, the number of clusters to use is computed using the gap statistic method, as described in the first reference  # noqa: E501

        :param clusters: The clusters of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.
        :type clusters: int
        """
        if clusters is not None and clusters < 1:  # noqa: E501
            raise ValueError("Invalid value for `clusters`, must be a value greater than or equal to `1`")  # noqa: E501

        self._clusters = clusters

    @property
    def constraints(self) -> PortfolioConstructionRandomPostRequestConstraints:
        """Gets the constraints of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.


        :return: The constraints of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.
        :rtype: PortfolioConstructionRandomPostRequestConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints: PortfolioConstructionRandomPostRequestConstraints):
        """Sets the constraints of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.


        :param constraints: The constraints of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.
        :type constraints: PortfolioConstructionRandomPostRequestConstraints
        """

        self._constraints = constraints

    @property
    def within_cluster_allocation_method(self) -> str:
        """Gets the within_cluster_allocation_method of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.

        The allocation method to use within clusters  # noqa: E501

        :return: The within_cluster_allocation_method of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.
        :rtype: str
        """
        return self._within_cluster_allocation_method

    @within_cluster_allocation_method.setter
    def within_cluster_allocation_method(self, within_cluster_allocation_method: str):
        """Sets the within_cluster_allocation_method of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.

        The allocation method to use within clusters  # noqa: E501

        :param within_cluster_allocation_method: The within_cluster_allocation_method of this PortfolioOptimizationHierarchicalRiskParityClusteringBasedPostRequest.
        :type within_cluster_allocation_method: str
        """
        allowed_values = ["equalWeighting", "inverseVolatility", "inverseVariance"]  # noqa: E501
        if within_cluster_allocation_method not in allowed_values:
            raise ValueError(
                "Invalid value for `within_cluster_allocation_method` ({0}), must be one of {1}"
                .format(within_cluster_allocation_method, allowed_values)
            )

        self._within_cluster_allocation_method = within_cluster_allocation_method

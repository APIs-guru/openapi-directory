from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.portfolio_analysis_sharpe_ratio_bias_adjusted_post_request_portfolios_inner import PortfolioAnalysisSharpeRatioBiasAdjustedPostRequestPortfoliosInner
from openapi_server import util

from openapi_server.models.portfolio_analysis_sharpe_ratio_bias_adjusted_post_request_portfolios_inner import PortfolioAnalysisSharpeRatioBiasAdjustedPostRequestPortfoliosInner  # noqa: E501

class PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, benchmark_sharpe_ratio=None, portfolios=None, risk_free_rate=None):  # noqa: E501
        """PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf - a model defined in OpenAPI

        :param benchmark_sharpe_ratio: The benchmark_sharpe_ratio of this PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf.  # noqa: E501
        :type benchmark_sharpe_ratio: float
        :param portfolios: The portfolios of this PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf.  # noqa: E501
        :type portfolios: List[PortfolioAnalysisSharpeRatioBiasAdjustedPostRequestPortfoliosInner]
        :param risk_free_rate: The risk_free_rate of this PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf.  # noqa: E501
        :type risk_free_rate: float
        """
        self.openapi_types = {
            'benchmark_sharpe_ratio': float,
            'portfolios': List[PortfolioAnalysisSharpeRatioBiasAdjustedPostRequestPortfoliosInner],
            'risk_free_rate': float
        }

        self.attribute_map = {
            'benchmark_sharpe_ratio': 'benchmarkSharpeRatio',
            'portfolios': 'portfolios',
            'risk_free_rate': 'riskFreeRate'
        }

        self._benchmark_sharpe_ratio = benchmark_sharpe_ratio
        self._portfolios = portfolios
        self._risk_free_rate = risk_free_rate

    @classmethod
    def from_dict(cls, dikt) -> 'PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _portfolio_analysis_sharpe_ratio_probabilistic_post_request_oneOf of this PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf.  # noqa: E501
        :rtype: PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def benchmark_sharpe_ratio(self) -> float:
        """Gets the benchmark_sharpe_ratio of this PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf.

        The Sharpe ratio of the benchmark, in the same sampling frequency as the sampling frequency of the portfolio values  # noqa: E501

        :return: The benchmark_sharpe_ratio of this PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf.
        :rtype: float
        """
        return self._benchmark_sharpe_ratio

    @benchmark_sharpe_ratio.setter
    def benchmark_sharpe_ratio(self, benchmark_sharpe_ratio: float):
        """Sets the benchmark_sharpe_ratio of this PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf.

        The Sharpe ratio of the benchmark, in the same sampling frequency as the sampling frequency of the portfolio values  # noqa: E501

        :param benchmark_sharpe_ratio: The benchmark_sharpe_ratio of this PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf.
        :type benchmark_sharpe_ratio: float
        """
        if benchmark_sharpe_ratio is None:
            raise ValueError("Invalid value for `benchmark_sharpe_ratio`, must not be `None`")  # noqa: E501

        self._benchmark_sharpe_ratio = benchmark_sharpe_ratio

    @property
    def portfolios(self) -> List[PortfolioAnalysisSharpeRatioBiasAdjustedPostRequestPortfoliosInner]:
        """Gets the portfolios of this PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf.


        :return: The portfolios of this PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf.
        :rtype: List[PortfolioAnalysisSharpeRatioBiasAdjustedPostRequestPortfoliosInner]
        """
        return self._portfolios

    @portfolios.setter
    def portfolios(self, portfolios: List[PortfolioAnalysisSharpeRatioBiasAdjustedPostRequestPortfoliosInner]):
        """Sets the portfolios of this PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf.


        :param portfolios: The portfolios of this PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf.
        :type portfolios: List[PortfolioAnalysisSharpeRatioBiasAdjustedPostRequestPortfoliosInner]
        """
        if portfolios is None:
            raise ValueError("Invalid value for `portfolios`, must not be `None`")  # noqa: E501
        if portfolios is not None and len(portfolios) < 1:
            raise ValueError("Invalid value for `portfolios`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._portfolios = portfolios

    @property
    def risk_free_rate(self) -> float:
        """Gets the risk_free_rate of this PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf.

        The risk free rate  # noqa: E501

        :return: The risk_free_rate of this PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf.
        :rtype: float
        """
        return self._risk_free_rate

    @risk_free_rate.setter
    def risk_free_rate(self, risk_free_rate: float):
        """Sets the risk_free_rate of this PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf.

        The risk free rate  # noqa: E501

        :param risk_free_rate: The risk_free_rate of this PortfolioAnalysisSharpeRatioProbabilisticPostRequestOneOf.
        :type risk_free_rate: float
        """
        if risk_free_rate is None:
            raise ValueError("Invalid value for `risk_free_rate`, must not be `None`")  # noqa: E501

        self._risk_free_rate = risk_free_rate

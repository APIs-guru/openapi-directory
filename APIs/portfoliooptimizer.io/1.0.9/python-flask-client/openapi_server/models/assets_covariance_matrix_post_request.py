from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.assets_correlation_matrix_post_request_one_of import AssetsCorrelationMatrixPostRequestOneOf
from openapi_server.models.assets_covariance_matrix_post_request_one_of import AssetsCovarianceMatrixPostRequestOneOf
from openapi_server.models.assets_covariance_matrix_post_request_one_of1 import AssetsCovarianceMatrixPostRequestOneOf1
from openapi_server import util

from openapi_server.models.assets_correlation_matrix_post_request_one_of import AssetsCorrelationMatrixPostRequestOneOf  # noqa: E501
from openapi_server.models.assets_covariance_matrix_post_request_one_of import AssetsCovarianceMatrixPostRequestOneOf  # noqa: E501
from openapi_server.models.assets_covariance_matrix_post_request_one_of1 import AssetsCovarianceMatrixPostRequestOneOf1  # noqa: E501

class AssetsCovarianceMatrixPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets=None, assets_correlation_matrix=None, assets_variances=None, assets_volatilities=None):  # noqa: E501
        """AssetsCovarianceMatrixPostRequest - a model defined in OpenAPI

        :param assets: The assets of this AssetsCovarianceMatrixPostRequest.  # noqa: E501
        :type assets: int
        :param assets_correlation_matrix: The assets_correlation_matrix of this AssetsCovarianceMatrixPostRequest.  # noqa: E501
        :type assets_correlation_matrix: List[List[float]]
        :param assets_variances: The assets_variances of this AssetsCovarianceMatrixPostRequest.  # noqa: E501
        :type assets_variances: List[float]
        :param assets_volatilities: The assets_volatilities of this AssetsCovarianceMatrixPostRequest.  # noqa: E501
        :type assets_volatilities: List[float]
        """
        self.openapi_types = {
            'assets': int,
            'assets_correlation_matrix': List[List[float]],
            'assets_variances': List[float],
            'assets_volatilities': List[float]
        }

        self.attribute_map = {
            'assets': 'assets',
            'assets_correlation_matrix': 'assetsCorrelationMatrix',
            'assets_variances': 'assetsVariances',
            'assets_volatilities': 'assetsVolatilities'
        }

        self._assets = assets
        self._assets_correlation_matrix = assets_correlation_matrix
        self._assets_variances = assets_variances
        self._assets_volatilities = assets_volatilities

    @classmethod
    def from_dict(cls, dikt) -> 'AssetsCovarianceMatrixPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _assets_covariance_matrix_post_request of this AssetsCovarianceMatrixPostRequest.  # noqa: E501
        :rtype: AssetsCovarianceMatrixPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self) -> int:
        """Gets the assets of this AssetsCovarianceMatrixPostRequest.

        The number of assets  # noqa: E501

        :return: The assets of this AssetsCovarianceMatrixPostRequest.
        :rtype: int
        """
        return self._assets

    @assets.setter
    def assets(self, assets: int):
        """Sets the assets of this AssetsCovarianceMatrixPostRequest.

        The number of assets  # noqa: E501

        :param assets: The assets of this AssetsCovarianceMatrixPostRequest.
        :type assets: int
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")  # noqa: E501
        if assets is not None and assets < 2:  # noqa: E501
            raise ValueError("Invalid value for `assets`, must be a value greater than or equal to `2`")  # noqa: E501

        self._assets = assets

    @property
    def assets_correlation_matrix(self) -> List[List[float]]:
        """Gets the assets_correlation_matrix of this AssetsCovarianceMatrixPostRequest.

        assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j  # noqa: E501

        :return: The assets_correlation_matrix of this AssetsCovarianceMatrixPostRequest.
        :rtype: List[List[float]]
        """
        return self._assets_correlation_matrix

    @assets_correlation_matrix.setter
    def assets_correlation_matrix(self, assets_correlation_matrix: List[List[float]]):
        """Sets the assets_correlation_matrix of this AssetsCovarianceMatrixPostRequest.

        assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j  # noqa: E501

        :param assets_correlation_matrix: The assets_correlation_matrix of this AssetsCovarianceMatrixPostRequest.
        :type assets_correlation_matrix: List[List[float]]
        """
        if assets_correlation_matrix is None:
            raise ValueError("Invalid value for `assets_correlation_matrix`, must not be `None`")  # noqa: E501
        if assets_correlation_matrix is not None and len(assets_correlation_matrix) < 2:
            raise ValueError("Invalid value for `assets_correlation_matrix`, number of items must be greater than or equal to `2`")  # noqa: E501

        self._assets_correlation_matrix = assets_correlation_matrix

    @property
    def assets_variances(self) -> List[float]:
        """Gets the assets_variances of this AssetsCovarianceMatrixPostRequest.

        assetsVariances[i] is the variance of the asset i  # noqa: E501

        :return: The assets_variances of this AssetsCovarianceMatrixPostRequest.
        :rtype: List[float]
        """
        return self._assets_variances

    @assets_variances.setter
    def assets_variances(self, assets_variances: List[float]):
        """Sets the assets_variances of this AssetsCovarianceMatrixPostRequest.

        assetsVariances[i] is the variance of the asset i  # noqa: E501

        :param assets_variances: The assets_variances of this AssetsCovarianceMatrixPostRequest.
        :type assets_variances: List[float]
        """
        if assets_variances is None:
            raise ValueError("Invalid value for `assets_variances`, must not be `None`")  # noqa: E501
        if assets_variances is not None and len(assets_variances) < 2:
            raise ValueError("Invalid value for `assets_variances`, number of items must be greater than or equal to `2`")  # noqa: E501

        self._assets_variances = assets_variances

    @property
    def assets_volatilities(self) -> List[float]:
        """Gets the assets_volatilities of this AssetsCovarianceMatrixPostRequest.

        assetsVolatilities[i] is the volatility of the asset i  # noqa: E501

        :return: The assets_volatilities of this AssetsCovarianceMatrixPostRequest.
        :rtype: List[float]
        """
        return self._assets_volatilities

    @assets_volatilities.setter
    def assets_volatilities(self, assets_volatilities: List[float]):
        """Sets the assets_volatilities of this AssetsCovarianceMatrixPostRequest.

        assetsVolatilities[i] is the volatility of the asset i  # noqa: E501

        :param assets_volatilities: The assets_volatilities of this AssetsCovarianceMatrixPostRequest.
        :type assets_volatilities: List[float]
        """
        if assets_volatilities is None:
            raise ValueError("Invalid value for `assets_volatilities`, must not be `None`")  # noqa: E501
        if assets_volatilities is not None and len(assets_volatilities) < 2:
            raise ValueError("Invalid value for `assets_volatilities`, number of items must be greater than or equal to `2`")  # noqa: E501

        self._assets_volatilities = assets_volatilities

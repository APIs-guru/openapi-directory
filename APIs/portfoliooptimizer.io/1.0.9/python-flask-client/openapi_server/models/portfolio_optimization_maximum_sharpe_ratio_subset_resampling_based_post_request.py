from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.portfolio_analysis_mean_variance_efficient_frontier_post_request_constraints import PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints
from openapi_server import util

from openapi_server.models.portfolio_analysis_mean_variance_efficient_frontier_post_request_constraints import PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints  # noqa: E501

class PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets=None, assets_covariance_matrix=None, assets_returns=None, constraints=None, risk_free_rate=None, subset_portfolios=128, subset_portfolios_aggregation_method='average', subset_portfolios_enumeration_method='randomSampling', subset_size=None):  # noqa: E501
        """PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest - a model defined in OpenAPI

        :param assets: The assets of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.  # noqa: E501
        :type assets: int
        :param assets_covariance_matrix: The assets_covariance_matrix of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.  # noqa: E501
        :type assets_covariance_matrix: List[List[float]]
        :param assets_returns: The assets_returns of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.  # noqa: E501
        :type assets_returns: List[float]
        :param constraints: The constraints of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.  # noqa: E501
        :type constraints: PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints
        :param risk_free_rate: The risk_free_rate of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.  # noqa: E501
        :type risk_free_rate: float
        :param subset_portfolios: The subset_portfolios of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.  # noqa: E501
        :type subset_portfolios: int
        :param subset_portfolios_aggregation_method: The subset_portfolios_aggregation_method of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.  # noqa: E501
        :type subset_portfolios_aggregation_method: str
        :param subset_portfolios_enumeration_method: The subset_portfolios_enumeration_method of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.  # noqa: E501
        :type subset_portfolios_enumeration_method: str
        :param subset_size: The subset_size of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.  # noqa: E501
        :type subset_size: int
        """
        self.openapi_types = {
            'assets': int,
            'assets_covariance_matrix': List[List[float]],
            'assets_returns': List[float],
            'constraints': PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints,
            'risk_free_rate': float,
            'subset_portfolios': int,
            'subset_portfolios_aggregation_method': str,
            'subset_portfolios_enumeration_method': str,
            'subset_size': int
        }

        self.attribute_map = {
            'assets': 'assets',
            'assets_covariance_matrix': 'assetsCovarianceMatrix',
            'assets_returns': 'assetsReturns',
            'constraints': 'constraints',
            'risk_free_rate': 'riskFreeRate',
            'subset_portfolios': 'subsetPortfolios',
            'subset_portfolios_aggregation_method': 'subsetPortfoliosAggregationMethod',
            'subset_portfolios_enumeration_method': 'subsetPortfoliosEnumerationMethod',
            'subset_size': 'subsetSize'
        }

        self._assets = assets
        self._assets_covariance_matrix = assets_covariance_matrix
        self._assets_returns = assets_returns
        self._constraints = constraints
        self._risk_free_rate = risk_free_rate
        self._subset_portfolios = subset_portfolios
        self._subset_portfolios_aggregation_method = subset_portfolios_aggregation_method
        self._subset_portfolios_enumeration_method = subset_portfolios_enumeration_method
        self._subset_size = subset_size

    @classmethod
    def from_dict(cls, dikt) -> 'PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _portfolio_optimization_maximum_sharpe_ratio_subset_resampling_based_post_request of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.  # noqa: E501
        :rtype: PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self) -> int:
        """Gets the assets of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.

        The number of assets  # noqa: E501

        :return: The assets of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.
        :rtype: int
        """
        return self._assets

    @assets.setter
    def assets(self, assets: int):
        """Sets the assets of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.

        The number of assets  # noqa: E501

        :param assets: The assets of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.
        :type assets: int
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")  # noqa: E501
        if assets is not None and assets < 2:  # noqa: E501
            raise ValueError("Invalid value for `assets`, must be a value greater than or equal to `2`")  # noqa: E501

        self._assets = assets

    @property
    def assets_covariance_matrix(self) -> List[List[float]]:
        """Gets the assets_covariance_matrix of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.

        assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j  # noqa: E501

        :return: The assets_covariance_matrix of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.
        :rtype: List[List[float]]
        """
        return self._assets_covariance_matrix

    @assets_covariance_matrix.setter
    def assets_covariance_matrix(self, assets_covariance_matrix: List[List[float]]):
        """Sets the assets_covariance_matrix of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.

        assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j  # noqa: E501

        :param assets_covariance_matrix: The assets_covariance_matrix of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.
        :type assets_covariance_matrix: List[List[float]]
        """
        if assets_covariance_matrix is None:
            raise ValueError("Invalid value for `assets_covariance_matrix`, must not be `None`")  # noqa: E501
        if assets_covariance_matrix is not None and len(assets_covariance_matrix) < 2:
            raise ValueError("Invalid value for `assets_covariance_matrix`, number of items must be greater than or equal to `2`")  # noqa: E501

        self._assets_covariance_matrix = assets_covariance_matrix

    @property
    def assets_returns(self) -> List[float]:
        """Gets the assets_returns of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.

        assetsReturns[i] is the arithmetic return of asset i  # noqa: E501

        :return: The assets_returns of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.
        :rtype: List[float]
        """
        return self._assets_returns

    @assets_returns.setter
    def assets_returns(self, assets_returns: List[float]):
        """Sets the assets_returns of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.

        assetsReturns[i] is the arithmetic return of asset i  # noqa: E501

        :param assets_returns: The assets_returns of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.
        :type assets_returns: List[float]
        """
        if assets_returns is None:
            raise ValueError("Invalid value for `assets_returns`, must not be `None`")  # noqa: E501
        if assets_returns is not None and len(assets_returns) < 1:
            raise ValueError("Invalid value for `assets_returns`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._assets_returns = assets_returns

    @property
    def constraints(self) -> PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints:
        """Gets the constraints of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.


        :return: The constraints of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.
        :rtype: PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints: PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints):
        """Sets the constraints of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.


        :param constraints: The constraints of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.
        :type constraints: PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints
        """

        self._constraints = constraints

    @property
    def risk_free_rate(self) -> float:
        """Gets the risk_free_rate of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.

        The risk free rate  # noqa: E501

        :return: The risk_free_rate of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.
        :rtype: float
        """
        return self._risk_free_rate

    @risk_free_rate.setter
    def risk_free_rate(self, risk_free_rate: float):
        """Sets the risk_free_rate of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.

        The risk free rate  # noqa: E501

        :param risk_free_rate: The risk_free_rate of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.
        :type risk_free_rate: float
        """
        if risk_free_rate is None:
            raise ValueError("Invalid value for `risk_free_rate`, must not be `None`")  # noqa: E501

        self._risk_free_rate = risk_free_rate

    @property
    def subset_portfolios(self) -> int:
        """Gets the subset_portfolios of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.

        The number of subset portfolios to compute; only applicable if the enumeration method for the subset portfolios is random sampling  # noqa: E501

        :return: The subset_portfolios of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.
        :rtype: int
        """
        return self._subset_portfolios

    @subset_portfolios.setter
    def subset_portfolios(self, subset_portfolios: int):
        """Sets the subset_portfolios of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.

        The number of subset portfolios to compute; only applicable if the enumeration method for the subset portfolios is random sampling  # noqa: E501

        :param subset_portfolios: The subset_portfolios of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.
        :type subset_portfolios: int
        """
        if subset_portfolios is not None and subset_portfolios < 1:  # noqa: E501
            raise ValueError("Invalid value for `subset_portfolios`, must be a value greater than or equal to `1`")  # noqa: E501

        self._subset_portfolios = subset_portfolios

    @property
    def subset_portfolios_aggregation_method(self) -> str:
        """Gets the subset_portfolios_aggregation_method of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.

        The method to aggregate the subset portfolios  # noqa: E501

        :return: The subset_portfolios_aggregation_method of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.
        :rtype: str
        """
        return self._subset_portfolios_aggregation_method

    @subset_portfolios_aggregation_method.setter
    def subset_portfolios_aggregation_method(self, subset_portfolios_aggregation_method: str):
        """Sets the subset_portfolios_aggregation_method of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.

        The method to aggregate the subset portfolios  # noqa: E501

        :param subset_portfolios_aggregation_method: The subset_portfolios_aggregation_method of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.
        :type subset_portfolios_aggregation_method: str
        """
        allowed_values = ["average", "median"]  # noqa: E501
        if subset_portfolios_aggregation_method not in allowed_values:
            raise ValueError(
                "Invalid value for `subset_portfolios_aggregation_method` ({0}), must be one of {1}"
                .format(subset_portfolios_aggregation_method, allowed_values)
            )

        self._subset_portfolios_aggregation_method = subset_portfolios_aggregation_method

    @property
    def subset_portfolios_enumeration_method(self) -> str:
        """Gets the subset_portfolios_enumeration_method of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.

        The method to enumerate the subset portfolios  # noqa: E501

        :return: The subset_portfolios_enumeration_method of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.
        :rtype: str
        """
        return self._subset_portfolios_enumeration_method

    @subset_portfolios_enumeration_method.setter
    def subset_portfolios_enumeration_method(self, subset_portfolios_enumeration_method: str):
        """Sets the subset_portfolios_enumeration_method of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.

        The method to enumerate the subset portfolios  # noqa: E501

        :param subset_portfolios_enumeration_method: The subset_portfolios_enumeration_method of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.
        :type subset_portfolios_enumeration_method: str
        """
        allowed_values = ["complete", "randomSampling"]  # noqa: E501
        if subset_portfolios_enumeration_method not in allowed_values:
            raise ValueError(
                "Invalid value for `subset_portfolios_enumeration_method` ({0}), must be one of {1}"
                .format(subset_portfolios_enumeration_method, allowed_values)
            )

        self._subset_portfolios_enumeration_method = subset_portfolios_enumeration_method

    @property
    def subset_size(self) -> int:
        """Gets the subset_size of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.

        The number of assets to include in each subset portfolio; defaults to a value of order the square root of the total number of assets  # noqa: E501

        :return: The subset_size of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.
        :rtype: int
        """
        return self._subset_size

    @subset_size.setter
    def subset_size(self, subset_size: int):
        """Sets the subset_size of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.

        The number of assets to include in each subset portfolio; defaults to a value of order the square root of the total number of assets  # noqa: E501

        :param subset_size: The subset_size of this PortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedPostRequest.
        :type subset_size: int
        """
        if subset_size is not None and subset_size < 2:  # noqa: E501
            raise ValueError("Invalid value for `subset_size`, must be a value greater than or equal to `2`")  # noqa: E501

        self._subset_size = subset_size

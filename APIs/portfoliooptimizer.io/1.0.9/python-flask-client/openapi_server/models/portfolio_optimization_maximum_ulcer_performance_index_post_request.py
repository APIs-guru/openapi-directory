from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.assets_returns_post_request_assets_inner import AssetsReturnsPostRequestAssetsInner
from openapi_server.models.portfolio_analysis_mean_variance_efficient_frontier_post_request_constraints import PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints
from openapi_server import util

from openapi_server.models.assets_returns_post_request_assets_inner import AssetsReturnsPostRequestAssetsInner  # noqa: E501
from openapi_server.models.portfolio_analysis_mean_variance_efficient_frontier_post_request_constraints import PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints  # noqa: E501

class PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets=None, constraints=None, risk_free_rate=None):  # noqa: E501
        """PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest - a model defined in OpenAPI

        :param assets: The assets of this PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest.  # noqa: E501
        :type assets: List[AssetsReturnsPostRequestAssetsInner]
        :param constraints: The constraints of this PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest.  # noqa: E501
        :type constraints: PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints
        :param risk_free_rate: The risk_free_rate of this PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest.  # noqa: E501
        :type risk_free_rate: float
        """
        self.openapi_types = {
            'assets': List[AssetsReturnsPostRequestAssetsInner],
            'constraints': PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints,
            'risk_free_rate': float
        }

        self.attribute_map = {
            'assets': 'assets',
            'constraints': 'constraints',
            'risk_free_rate': 'riskFreeRate'
        }

        self._assets = assets
        self._constraints = constraints
        self._risk_free_rate = risk_free_rate

    @classmethod
    def from_dict(cls, dikt) -> 'PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _portfolio_optimization_maximum_ulcer_performance_index_post_request of this PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest.  # noqa: E501
        :rtype: PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self) -> List[AssetsReturnsPostRequestAssetsInner]:
        """Gets the assets of this PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest.


        :return: The assets of this PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest.
        :rtype: List[AssetsReturnsPostRequestAssetsInner]
        """
        return self._assets

    @assets.setter
    def assets(self, assets: List[AssetsReturnsPostRequestAssetsInner]):
        """Sets the assets of this PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest.


        :param assets: The assets of this PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest.
        :type assets: List[AssetsReturnsPostRequestAssetsInner]
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")  # noqa: E501
        if assets is not None and len(assets) < 1:
            raise ValueError("Invalid value for `assets`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._assets = assets

    @property
    def constraints(self) -> PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints:
        """Gets the constraints of this PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest.


        :return: The constraints of this PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest.
        :rtype: PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints: PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints):
        """Sets the constraints of this PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest.


        :param constraints: The constraints of this PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest.
        :type constraints: PortfolioAnalysisMeanVarianceEfficientFrontierPostRequestConstraints
        """

        self._constraints = constraints

    @property
    def risk_free_rate(self) -> float:
        """Gets the risk_free_rate of this PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest.

        The risk free rate  # noqa: E501

        :return: The risk_free_rate of this PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest.
        :rtype: float
        """
        return self._risk_free_rate

    @risk_free_rate.setter
    def risk_free_rate(self, risk_free_rate: float):
        """Sets the risk_free_rate of this PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest.

        The risk free rate  # noqa: E501

        :param risk_free_rate: The risk_free_rate of this PortfolioOptimizationMaximumUlcerPerformanceIndexPostRequest.
        :type risk_free_rate: float
        """
        if risk_free_rate is None:
            raise ValueError("Invalid value for `risk_free_rate`, must not be `None`")  # noqa: E501

        self._risk_free_rate = risk_free_rate

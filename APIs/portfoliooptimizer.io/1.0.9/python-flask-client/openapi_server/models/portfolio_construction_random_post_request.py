from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.portfolio_construction_random_post_request_constraints import PortfolioConstructionRandomPostRequestConstraints
from openapi_server import util

from openapi_server.models.portfolio_construction_random_post_request_constraints import PortfolioConstructionRandomPostRequestConstraints  # noqa: E501

class PortfolioConstructionRandomPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets=None, constraints=None, portfolios=25):  # noqa: E501
        """PortfolioConstructionRandomPostRequest - a model defined in OpenAPI

        :param assets: The assets of this PortfolioConstructionRandomPostRequest.  # noqa: E501
        :type assets: int
        :param constraints: The constraints of this PortfolioConstructionRandomPostRequest.  # noqa: E501
        :type constraints: PortfolioConstructionRandomPostRequestConstraints
        :param portfolios: The portfolios of this PortfolioConstructionRandomPostRequest.  # noqa: E501
        :type portfolios: int
        """
        self.openapi_types = {
            'assets': int,
            'constraints': PortfolioConstructionRandomPostRequestConstraints,
            'portfolios': int
        }

        self.attribute_map = {
            'assets': 'assets',
            'constraints': 'constraints',
            'portfolios': 'portfolios'
        }

        self._assets = assets
        self._constraints = constraints
        self._portfolios = portfolios

    @classmethod
    def from_dict(cls, dikt) -> 'PortfolioConstructionRandomPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _portfolio_construction_random_post_request of this PortfolioConstructionRandomPostRequest.  # noqa: E501
        :rtype: PortfolioConstructionRandomPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self) -> int:
        """Gets the assets of this PortfolioConstructionRandomPostRequest.

        The number of assets  # noqa: E501

        :return: The assets of this PortfolioConstructionRandomPostRequest.
        :rtype: int
        """
        return self._assets

    @assets.setter
    def assets(self, assets: int):
        """Sets the assets of this PortfolioConstructionRandomPostRequest.

        The number of assets  # noqa: E501

        :param assets: The assets of this PortfolioConstructionRandomPostRequest.
        :type assets: int
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")  # noqa: E501
        if assets is not None and assets < 1:  # noqa: E501
            raise ValueError("Invalid value for `assets`, must be a value greater than or equal to `1`")  # noqa: E501

        self._assets = assets

    @property
    def constraints(self) -> PortfolioConstructionRandomPostRequestConstraints:
        """Gets the constraints of this PortfolioConstructionRandomPostRequest.


        :return: The constraints of this PortfolioConstructionRandomPostRequest.
        :rtype: PortfolioConstructionRandomPostRequestConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints: PortfolioConstructionRandomPostRequestConstraints):
        """Sets the constraints of this PortfolioConstructionRandomPostRequest.


        :param constraints: The constraints of this PortfolioConstructionRandomPostRequest.
        :type constraints: PortfolioConstructionRandomPostRequestConstraints
        """

        self._constraints = constraints

    @property
    def portfolios(self) -> int:
        """Gets the portfolios of this PortfolioConstructionRandomPostRequest.

        The number of portfolios to construct  # noqa: E501

        :return: The portfolios of this PortfolioConstructionRandomPostRequest.
        :rtype: int
        """
        return self._portfolios

    @portfolios.setter
    def portfolios(self, portfolios: int):
        """Sets the portfolios of this PortfolioConstructionRandomPostRequest.

        The number of portfolios to construct  # noqa: E501

        :param portfolios: The portfolios of this PortfolioConstructionRandomPostRequest.
        :type portfolios: int
        """
        if portfolios is not None and portfolios < 1:  # noqa: E501
            raise ValueError("Invalid value for `portfolios`, must be a value greater than or equal to `1`")  # noqa: E501

        self._portfolios = portfolios

# coding: utf-8

"""
    Klarna Payments API V1

    The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.address import Address
from openapi_client.models.customer import Customer
from openapi_client.models.merchant_urls import MerchantUrls
from openapi_client.models.order_line import OrderLine
from openapi_client.models.payment_method_category import PaymentMethodCategory
from typing import Optional, Set
from typing_extensions import Self

class CreateOrderRequest(BaseModel):
    """
    CreateOrderRequest
    """ # noqa: E501
    authorization_token: Optional[StrictStr] = Field(default=None, description="Authorization token.")
    auto_capture: Optional[StrictBool] = Field(default=False, description="Allow merchant to trigger auto capturing.")
    billing_address: Optional[Address] = None
    custom_payment_method_ids: Optional[List[StrictStr]] = Field(default=None, description="Promo codes - The array could be used to define which of the configured payment options within a payment category (pay_later, pay_over_time, etc.) should be shown for this purchase. Discuss with the delivery manager to know about the promo codes that will be configured for your account. The feature could also be used to provide promotional offers to specific customers (eg: 0% financing). Please be informed that the usage of this feature can have commercial implications. ")
    customer: Optional[Customer] = None
    locale: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Used to define the language and region of the customer. The locale follows the format of (RFC 1766)[https://datatracker.ietf.org/doc/rfc1766/], meaning its value consists of language-country. The following values are applicable:  AT: \"de-AT\", \"de-DE\", \"en-DE\" BE: \"be-BE\", \"nl-BE\", \"fr-BE\", \"en-BE\" CH: \"it-CH\", \"de-CH\", \"fr-CH\", \"en-CH\" DE: \"de-DE\", \"de-AT\", \"en-DE\" DK: \"da-DK\", \"en-DK\" ES: \"es-ES\", \"ca-ES\", \"en-ES\" FI: \"fi-FI\", \"sv-FI\", \"en-FI\" GB: \"en-GB\" IT: \"it-IT\", \"en-IT\" NL: \"nl-NL\", \"en-NL\" NO: \"nb-NO\", \"en-NO\" PL: \"pl-PL\", \"en-PL\" SE: \"sv-SE\", \"en-SE\" US: \"en-US\".")
    merchant_data: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=6000)]] = Field(default=None, description="Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters)")
    merchant_reference1: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Used for storing merchant's internal order number or other reference.")
    merchant_reference2: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Used for storing merchant's internal order number or other reference. The value is available in the settlement files. (max 255 characters).")
    merchant_urls: Optional[MerchantUrls] = None
    order_amount: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total amount of the order including tax and any available discounts. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.")
    order_lines: Annotated[List[OrderLine], Field(min_length=1, max_length=1000)] = Field(description="The array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.")
    order_tax_amount: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Total tax amount of the order. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.")
    payment_method_categories: Optional[List[PaymentMethodCategory]] = Field(default=None, description="Available payment method categories")
    purchase_country: Annotated[str, Field(strict=True)] = Field(description="The purchase country of the customer. The billing country always overrides purchase country if the values are different. Formatted according to ISO 3166 alpha-2 standard, e.g. GB, SE, DE, US, etc.")
    purchase_currency: Annotated[str, Field(strict=True)] = Field(description="The purchase currency of the order. Formatted according to ISO 4217 standard, e.g. USD, EUR, SEK, GBP, etc.")
    shipping_address: Optional[Address] = None
    status: Optional[StrictStr] = Field(default=None, description="The current status of the session. Possible values: 'complete', 'incomplete' where 'complete' is set when the order has been placed.")
    __properties: ClassVar[List[str]] = ["authorization_token", "auto_capture", "billing_address", "custom_payment_method_ids", "customer", "locale", "merchant_data", "merchant_reference1", "merchant_reference2", "merchant_urls", "order_amount", "order_lines", "order_tax_amount", "payment_method_categories", "purchase_country", "purchase_currency", "shipping_address", "status"]

    @field_validator('locale')
    def locale_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$/")
        return value

    @field_validator('purchase_country')
    def purchase_country_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Za-z]{2,2}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z]{2,2}$/")
        return value

    @field_validator('purchase_currency')
    def purchase_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Za-z]{3,3}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z]{3,3}$/")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['complete', 'incomplete']):
            raise ValueError("must be one of enum values ('complete', 'incomplete')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateOrderRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "authorization_token",
            "payment_method_categories",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billing_address'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of merchant_urls
        if self.merchant_urls:
            _dict['merchant_urls'] = self.merchant_urls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order_lines (list)
        _items = []
        if self.order_lines:
            for _item_order_lines in self.order_lines:
                if _item_order_lines:
                    _items.append(_item_order_lines.to_dict())
            _dict['order_lines'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment_method_categories (list)
        _items = []
        if self.payment_method_categories:
            for _item_payment_method_categories in self.payment_method_categories:
                if _item_payment_method_categories:
                    _items.append(_item_payment_method_categories.to_dict())
            _dict['payment_method_categories'] = _items
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shipping_address'] = self.shipping_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateOrderRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorization_token": obj.get("authorization_token"),
            "auto_capture": obj.get("auto_capture") if obj.get("auto_capture") is not None else False,
            "billing_address": Address.from_dict(obj["billing_address"]) if obj.get("billing_address") is not None else None,
            "custom_payment_method_ids": obj.get("custom_payment_method_ids"),
            "customer": Customer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "locale": obj.get("locale"),
            "merchant_data": obj.get("merchant_data"),
            "merchant_reference1": obj.get("merchant_reference1"),
            "merchant_reference2": obj.get("merchant_reference2"),
            "merchant_urls": MerchantUrls.from_dict(obj["merchant_urls"]) if obj.get("merchant_urls") is not None else None,
            "order_amount": obj.get("order_amount"),
            "order_lines": [OrderLine.from_dict(_item) for _item in obj["order_lines"]] if obj.get("order_lines") is not None else None,
            "order_tax_amount": obj.get("order_tax_amount"),
            "payment_method_categories": [PaymentMethodCategory.from_dict(_item) for _item in obj["payment_method_categories"]] if obj.get("payment_method_categories") is not None else None,
            "purchase_country": obj.get("purchase_country"),
            "purchase_currency": obj.get("purchase_currency"),
            "shipping_address": Address.from_dict(obj["shipping_address"]) if obj.get("shipping_address") is not None else None,
            "status": obj.get("status")
        })
        return _obj



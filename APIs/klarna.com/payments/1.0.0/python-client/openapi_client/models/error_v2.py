# coding: utf-8

"""
    Klarna Payments API V1

    The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.authorized_payment_method import AuthorizedPaymentMethod
from typing import Optional, Set
from typing_extensions import Self

class ErrorV2(BaseModel):
    """
    ErrorV2
    """ # noqa: E501
    authorized_payment_method: Optional[AuthorizedPaymentMethod] = None
    correlation_id: Optional[StrictStr] = None
    error_code: Optional[StrictStr] = None
    error_messages: Optional[List[StrictStr]] = None
    fraud_status: Optional[StrictStr] = None
    reason: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["authorized_payment_method", "correlation_id", "error_code", "error_messages", "fraud_status", "reason"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ErrorV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of authorized_payment_method
        if self.authorized_payment_method:
            _dict['authorized_payment_method'] = self.authorized_payment_method.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ErrorV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorized_payment_method": AuthorizedPaymentMethod.from_dict(obj["authorized_payment_method"]) if obj.get("authorized_payment_method") is not None else None,
            "correlation_id": obj.get("correlation_id"),
            "error_code": obj.get("error_code"),
            "error_messages": obj.get("error_messages"),
            "fraud_status": obj.get("fraud_status"),
            "reason": obj.get("reason")
        })
        return _obj



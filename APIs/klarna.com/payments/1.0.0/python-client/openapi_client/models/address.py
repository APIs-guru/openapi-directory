# coding: utf-8

"""
    Klarna Payments API V1

    The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Address(BaseModel):
    """
    Address
    """ # noqa: E501
    attention: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=99)]] = Field(default=None, description="‘Attn.’ (if applicable). Only applicable for B2B customers.")
    city: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=99)]] = Field(default=None, description="Customer’s city.")
    country: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Customer’s country. This value overrides the purchase country if they are different. Should follow the standard of ISO 3166 alpha-2. E.g. GB, US, DE, SE.")
    email: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=99)]] = Field(default=None, description="Customer’s email address.")
    family_name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=99)]] = Field(default=None, description="Customers family name in UTF-8 encoding. Cannot be only numbers, must be more than 1 character. Allowed special characters: -'’. More information can be found [in this link](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-data-requirements/#details-needed-per-market)")
    given_name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=99)]] = Field(default=None, description="Customers given name in UTF-8 encoding. Cannot be only numbers, must be more than 1 character. Allowed special characters: -'’. More information can be found [in this link](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-data-requirements/#details-needed-per-market)")
    organization_name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=99)]] = Field(default=None, description="Organization name (if applicable). Only applicable for B2B customers.")
    phone: Optional[Annotated[str, Field(min_length=5, strict=True, max_length=99)]] = Field(default=None, description="Phone number. Preferably a mobile phone number.")
    postal_code: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=10)]] = Field(default=None, description="Customer’s postal code. Validation according to Universal Postal Union addressing systems. E.g. 12345, W1G OPW.")
    region: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=99)]] = Field(default=None, description="Customer’s region or state - Mandatory for US and AU market. Validations according to ISO 3166-2 format, e.g. OH, NJ, etc.")
    street_address: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=99)]] = Field(default=None, description="Customer’s street address. Regional formatting is required, as follows: UK/US/FR: 33 Cavendish Square Rest of EU: De Ruijterkade 7")
    street_address2: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=99)]] = Field(default=None, description="Customer’s street address. Second Line. ")
    title: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=20)]] = Field(default=None, description="Customer’s Title. Allowed values per country: UK - \"Mr\", \"Ms\" DE - \"Herr\", \"Frau\" AT: \"Herr, \"Frau\" CH: de-CH: \"Herr, \"Frau\" it-CH: \"Sig.\", \"Sig.ra\" fr-CH: \"M\", \"Mme\"  BE: \"Dhr.\", \"Mevr.\" NL: \"Dhr.\", \"Mevr.\"")
    __properties: ClassVar[List[str]] = ["attention", "city", "country", "email", "family_name", "given_name", "organization_name", "phone", "postal_code", "region", "street_address", "street_address2", "title"]

    @field_validator('country')
    def country_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Za-z]{2,2}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z]{2,2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Address from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attention": obj.get("attention"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "email": obj.get("email"),
            "family_name": obj.get("family_name"),
            "given_name": obj.get("given_name"),
            "organization_name": obj.get("organization_name"),
            "phone": obj.get("phone"),
            "postal_code": obj.get("postal_code"),
            "region": obj.get("region"),
            "street_address": obj.get("street_address"),
            "street_address2": obj.get("street_address2"),
            "title": obj.get("title")
        })
        return _obj



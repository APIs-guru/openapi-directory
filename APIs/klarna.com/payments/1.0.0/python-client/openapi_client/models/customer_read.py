# coding: utf-8

"""
    Klarna Payments API V1

    The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CustomerRead(BaseModel):
    """
    CustomerRead
    """ # noqa: E501
    date_of_birth: Optional[StrictStr] = Field(default=None, description="Customer’s date of birth. The format is ‘yyyy-mm-dd’")
    gender: Optional[StrictStr] = Field(default=None, description="Customer’s gender - ‘male’ or ‘female’")
    organization_entity_type: Optional[StrictStr] = Field(default=None, description="Organization entity type. Only applicable for B2B customers.")
    organization_registration_id: Optional[StrictStr] = Field(default=None, description="Organization registration id. Only applicable for B2B customers.")
    title: Optional[StrictStr] = Field(default=None, description="Customer’s Title. Allowed values per country: UK - \"Mr\", \"Ms\" DE - \"Herr\", \"Frau\" AT: \"Herr, \"Frau\" CH: de-CH: \"Herr, \"Frau\" it-CH: \"Sig.\", \"Sig.ra\" fr-CH: \"M\", \"Mme\"  BE: \"Dhr.\", \"Mevr.\" NL: \"Dhr.\", \"Mevr.\"")
    type: Optional[StrictStr] = Field(default=None, description="Type of customer in the session. If nothing is added, a B2C session will be the default. If it is a b2b-session, you should enter organization to trigger a B2B session.")
    vat_id: Optional[StrictStr] = Field(default=None, description="VAT ID. Only applicable for B2B customers.")
    __properties: ClassVar[List[str]] = ["date_of_birth", "gender", "organization_entity_type", "organization_registration_id", "title", "type", "vat_id"]

    @field_validator('organization_entity_type')
    def organization_entity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LIMITED_COMPANY', 'PUBLIC_LIMITED_COMPANY', 'ENTREPRENEURIAL_COMPANY', 'LIMITED_PARTNERSHIP_LIMITED_COMPANY', 'LIMITED_PARTNERSHIP', 'GENERAL_PARTNERSHIP', 'REGISTERED_SOLE_TRADER', 'SOLE_TRADER', 'CIVIL_LAW_PARTNERSHIP', 'PUBLIC_INSTITUTION', 'OTHER']):
            raise ValueError("must be one of enum values ('LIMITED_COMPANY', 'PUBLIC_LIMITED_COMPANY', 'ENTREPRENEURIAL_COMPANY', 'LIMITED_PARTNERSHIP_LIMITED_COMPANY', 'LIMITED_PARTNERSHIP', 'GENERAL_PARTNERSHIP', 'REGISTERED_SOLE_TRADER', 'SOLE_TRADER', 'CIVIL_LAW_PARTNERSHIP', 'PUBLIC_INSTITUTION', 'OTHER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerRead from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerRead from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date_of_birth": obj.get("date_of_birth"),
            "gender": obj.get("gender"),
            "organization_entity_type": obj.get("organization_entity_type"),
            "organization_registration_id": obj.get("organization_registration_id"),
            "title": obj.get("title"),
            "type": obj.get("type"),
            "vat_id": obj.get("vat_id")
        })
        return _obj



# coding: utf-8

"""
    Klarna Payments API V1

    The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.address import Address
from openapi_client.models.customer import Customer
from typing import Optional, Set
from typing_extensions import Self

class CustomerTokenCreationRequest(BaseModel):
    """
    CustomerTokenCreationRequest
    """ # noqa: E501
    billing_address: Optional[Address] = None
    customer: Optional[Customer] = None
    description: Annotated[str, Field(strict=True, max_length=255)] = Field(description="Description of the purpose of the token.")
    intended_use: StrictStr = Field(description="Intended use for the token.")
    locale: Annotated[str, Field(strict=True)] = Field(description="RFC 1766 customer's locale.")
    purchase_country: Annotated[str, Field(strict=True)] = Field(description="ISO 3166 alpha-2 purchase country.")
    purchase_currency: Annotated[str, Field(strict=True)] = Field(description="ISO 4217 purchase currency.")
    __properties: ClassVar[List[str]] = ["billing_address", "customer", "description", "intended_use", "locale", "purchase_country", "purchase_currency"]

    @field_validator('intended_use')
    def intended_use_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['SUBSCRIPTION']):
            raise ValueError("must be one of enum values ('SUBSCRIPTION')")
        return value

    @field_validator('locale')
    def locale_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$/")
        return value

    @field_validator('purchase_country')
    def purchase_country_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Za-z]{2,2}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z]{2,2}$/")
        return value

    @field_validator('purchase_currency')
    def purchase_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Za-z]{3,3}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z]{3,3}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerTokenCreationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billing_address'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerTokenCreationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billing_address": Address.from_dict(obj["billing_address"]) if obj.get("billing_address") is not None else None,
            "customer": Customer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "description": obj.get("description"),
            "intended_use": obj.get("intended_use"),
            "locale": obj.get("locale"),
            "purchase_country": obj.get("purchase_country"),
            "purchase_currency": obj.get("purchase_currency")
        })
        return _obj



# coding: utf-8

"""
    Klarna Payments API V1

    The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Options(BaseModel):
    """
    Options
    """ # noqa: E501
    color_border: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Color for the border of elements within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"")
    color_border_selected: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Color for the border of elements within the iFrame when selected by the customer. Value should be a CSS hex color, e.g. \"#FF9900\"")
    color_details: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Color for the bullet points within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"")
    color_text: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Color for the texts within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"")
    radius_border: Optional[StrictStr] = Field(default=None, description="Radius for the border of elements within the iFrame.")
    __properties: ClassVar[List[str]] = ["color_border", "color_border_selected", "color_details", "color_text", "radius_border"]

    @field_validator('color_border')
    def color_border_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^#[A-Fa-f0-9]{6}$", value):
            raise ValueError(r"must validate the regular expression /^#[A-Fa-f0-9]{6}$/")
        return value

    @field_validator('color_border_selected')
    def color_border_selected_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^#[A-Fa-f0-9]{6}$", value):
            raise ValueError(r"must validate the regular expression /^#[A-Fa-f0-9]{6}$/")
        return value

    @field_validator('color_details')
    def color_details_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^#[A-Fa-f0-9]{6}$", value):
            raise ValueError(r"must validate the regular expression /^#[A-Fa-f0-9]{6}$/")
        return value

    @field_validator('color_text')
    def color_text_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^#[A-Fa-f0-9]{6}$", value):
            raise ValueError(r"must validate the regular expression /^#[A-Fa-f0-9]{6}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Options from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Options from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "color_border": obj.get("color_border"),
            "color_border_selected": obj.get("color_border_selected"),
            "color_details": obj.get("color_details"),
            "color_text": obj.get("color_text"),
            "radius_border": obj.get("radius_border")
        })
        return _obj



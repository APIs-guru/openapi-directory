# coding: utf-8

"""
    Klarna Payments API V1

    The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ProductIdentifiers(BaseModel):
    """
    ProductIdentifiers
    """ # noqa: E501
    brand: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=70)]] = Field(default=None, description="The product's brand name as generally recognized by consumers. If no brand is available for a product, do not supply any value.")
    category_path: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=750)]] = Field(default=None, description="The product's category path as used in the merchant's webshop. Include the full and most detailed category and separate the segments with ' > '")
    color: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=64)]] = Field(default=None, description="Color to be shown to the end customer (max 64 characters).")
    global_trade_item_number: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="The product's Global Trade Item Number (GTIN). Common types of GTIN are EAN, ISBN or UPC. Exclude dashes and spaces, where possible")
    manufacturer_part_number: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=70)]] = Field(default=None, description="The product's Manufacturer Part Number (MPN), which - together with the brand - uniquely identifies a product. Only submit MPNs assigned by a manufacturer and use the most specific MPN possible")
    size: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=64)]] = Field(default=None, description="Size to be shown to the end customer (max 64 characters).")
    __properties: ClassVar[List[str]] = ["brand", "category_path", "color", "global_trade_item_number", "manufacturer_part_number", "size"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductIdentifiers from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductIdentifiers from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brand": obj.get("brand"),
            "category_path": obj.get("category_path"),
            "color": obj.get("color"),
            "global_trade_item_number": obj.get("global_trade_item_number"),
            "manufacturer_part_number": obj.get("manufacturer_part_number"),
            "size": obj.get("size")
        })
        return _obj



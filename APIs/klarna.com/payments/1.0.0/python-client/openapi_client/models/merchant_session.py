# coding: utf-8

"""
    Klarna Payments API V1

    The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.payment_method_category import PaymentMethodCategory
from typing import Optional, Set
from typing_extensions import Self

class MerchantSession(BaseModel):
    """
    MerchantSession
    """ # noqa: E501
    client_token: Annotated[str, Field(min_length=0, strict=True, max_length=4096)] = Field(description="Client token to be passed to the JS client while initializing the JS SDK in the next step.")
    payment_method_categories: Optional[List[PaymentMethodCategory]] = Field(default=None, description="Available payment method categories for this particular session")
    session_id: Annotated[str, Field(min_length=0, strict=True, max_length=255)] = Field(description="ID of the created session. Please use this ID to share with Klarna for identifying any issues during integration.")
    __properties: ClassVar[List[str]] = ["client_token", "payment_method_categories", "session_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantSession from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in payment_method_categories (list)
        _items = []
        if self.payment_method_categories:
            for _item_payment_method_categories in self.payment_method_categories:
                if _item_payment_method_categories:
                    _items.append(_item_payment_method_categories.to_dict())
            _dict['payment_method_categories'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantSession from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "client_token": obj.get("client_token"),
            "payment_method_categories": [PaymentMethodCategory.from_dict(_item) for _item in obj["payment_method_categories"]] if obj.get("payment_method_categories") is not None else None,
            "session_id": obj.get("session_id")
        })
        return _obj



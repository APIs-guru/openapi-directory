# coding: utf-8

"""
    Klarna Payments API V1

    The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.product_identifiers import ProductIdentifiers
from openapi_client.models.subscription import Subscription
from typing import Optional, Set
from typing_extensions import Self

class OrderLine(BaseModel):
    """
    OrderLine
    """ # noqa: E501
    image_url: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="URL to an image that can be later embedded in communications between Klarna and the customer. (max 1024 characters).  A minimum of 250x250 px resolution is recommended for the image to look good in the Klarna app, and below 50x50 px won't even show. We recommend using a good sized image (650x650 px or more), however the file size must not exceed 12MB.")
    merchant_data: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Used for storing merchant's internal order number or other reference. Pass through field. (max 1024 characters)")
    name: Annotated[str, Field(min_length=1, strict=True, max_length=255)] = Field(description="Descriptive name of the order line item.")
    product_identifiers: Optional[ProductIdentifiers] = None
    product_url: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="URL to the product in the merchant’s webshop that can be later used in communications between Klarna and the customer. (max 1024 characters)")
    quantity: Annotated[int, Field(strict=True, ge=0)] = Field(description="Quantity of the order line item. Must be a non-negative number.")
    quantity_unit: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=8)]] = Field(default=None, description="Unit used to describe the quantity, e.g. kg, pcs, etc. If defined the value has to be 1-8 characters.")
    reference: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=256)]] = Field(default=None, description="Client facing article number, SKU or similar. Max length is 256 characters.")
    subscription: Optional[Subscription] = None
    tax_rate: Optional[Annotated[int, Field(le=10000, strict=True, ge=0)]] = Field(default=None, description="Tax rate of the order line. Non-negative value. The percentage value is represented with two implicit decimals. I.e 1900 = 19%.")
    total_amount: Annotated[int, Field(le=100000000, strict=True)] = Field(description="Total amount of the order line. Must be defined as minor units. Includes tax and discount. Eg: 2500=25 euros Value = (quantity x unit_price) - total_discount_amount.  (max value: 100000000)")
    total_discount_amount: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Non-negative minor units. Includes tax. Eg: 500=5 euros")
    total_tax_amount: Optional[StrictInt] = Field(default=None, description="Total tax amount of the order line. Must be within ±1 of total_amount - total_amount 10000 / (10000 + tax_rate). Negative when type is discount.")
    type: Optional[StrictStr] = Field(default=None, description="Type of the order line item. The possible values are:  physical discount shipping_fee sales_tax digital gift_card store_credit surcharge")
    unit_price: Annotated[int, Field(le=100000000, strict=True)] = Field(description="Price for a single unit of the order line. Must be defined as minor units. Includes tax, excludes discount. (max value: 100000000)")
    __properties: ClassVar[List[str]] = ["image_url", "merchant_data", "name", "product_identifiers", "product_url", "quantity", "quantity_unit", "reference", "subscription", "tax_rate", "total_amount", "total_discount_amount", "total_tax_amount", "type", "unit_price"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderLine from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of product_identifiers
        if self.product_identifiers:
            _dict['product_identifiers'] = self.product_identifiers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription
        if self.subscription:
            _dict['subscription'] = self.subscription.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderLine from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "image_url": obj.get("image_url"),
            "merchant_data": obj.get("merchant_data"),
            "name": obj.get("name"),
            "product_identifiers": ProductIdentifiers.from_dict(obj["product_identifiers"]) if obj.get("product_identifiers") is not None else None,
            "product_url": obj.get("product_url"),
            "quantity": obj.get("quantity"),
            "quantity_unit": obj.get("quantity_unit"),
            "reference": obj.get("reference"),
            "subscription": Subscription.from_dict(obj["subscription"]) if obj.get("subscription") is not None else None,
            "tax_rate": obj.get("tax_rate"),
            "total_amount": obj.get("total_amount"),
            "total_discount_amount": obj.get("total_discount_amount"),
            "total_tax_amount": obj.get("total_tax_amount"),
            "type": obj.get("type"),
            "unit_price": obj.get("unit_price")
        })
        return _obj



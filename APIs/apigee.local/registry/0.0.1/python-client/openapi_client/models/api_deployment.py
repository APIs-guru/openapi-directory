# coding: utf-8

"""
    Registry API

    The Registry service allows teams to manage descriptions of APIs.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApiDeployment(BaseModel):
    """
    An ApiDeployment describes a service running at particular address that provides a particular version of an API. ApiDeployments have revisions which correspond to different configurations of a single deployment in time. Revision identifiers should be updated whenever the served API spec or endpoint address changes.
    """ # noqa: E501
    access_guidance: Optional[StrictStr] = Field(default=None, description="Text briefly describing how to access the endpoint. Changes to this value will not affect the revision.", alias="accessGuidance")
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.")
    api_spec_revision: Optional[StrictStr] = Field(default=None, description="The full resource name (including revision id) of the spec of the API being served by the deployment. Changes to this value will update the revision. Format: apis/{api}/deployments/{deployment}", alias="apiSpecRevision")
    create_time: Optional[datetime] = Field(default=None, description="Output only. Creation timestamp; when the deployment resource was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="A detailed description.")
    display_name: Optional[StrictStr] = Field(default=None, description="Human-meaningful name.", alias="displayName")
    endpoint_uri: Optional[StrictStr] = Field(default=None, description="The address where the deployment is serving. Changes to this value will update the revision.", alias="endpointUri")
    external_channel_uri: Optional[StrictStr] = Field(default=None, description="The address of the external channel of the API (e.g. the Developer Portal). Changes to this value will not affect the revision.", alias="externalChannelUri")
    intended_audience: Optional[StrictStr] = Field(default=None, description="Text briefly identifying the intended audience of the API. Changes to this value will not affect the revision.", alias="intendedAudience")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"registry.googleapis.com/\" and cannot be changed.")
    name: Optional[StrictStr] = Field(default=None, description="Resource name.")
    revision_create_time: Optional[datetime] = Field(default=None, description="Output only. Revision creation timestamp; when the represented revision was created.", alias="revisionCreateTime")
    revision_id: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. The revision ID of the deployment. A new revision is committed whenever the deployment contents are changed. The format is an 8-character hexadecimal string.", alias="revisionId")
    revision_update_time: Optional[datetime] = Field(default=None, description="Output only. Last update timestamp: when the represented revision was last modified.", alias="revisionUpdateTime")
    __properties: ClassVar[List[str]] = ["accessGuidance", "annotations", "apiSpecRevision", "createTime", "description", "displayName", "endpointUri", "externalChannelUri", "intendedAudience", "labels", "name", "revisionCreateTime", "revisionId", "revisionUpdateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiDeployment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "revision_create_time",
            "revision_id",
            "revision_update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiDeployment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessGuidance": obj.get("accessGuidance"),
            "annotations": obj.get("annotations"),
            "apiSpecRevision": obj.get("apiSpecRevision"),
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "endpointUri": obj.get("endpointUri"),
            "externalChannelUri": obj.get("externalChannelUri"),
            "intendedAudience": obj.get("intendedAudience"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "revisionCreateTime": obj.get("revisionCreateTime"),
            "revisionId": obj.get("revisionId"),
            "revisionUpdateTime": obj.get("revisionUpdateTime")
        })
        return _obj



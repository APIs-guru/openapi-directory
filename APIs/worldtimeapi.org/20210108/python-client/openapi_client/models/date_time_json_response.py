# coding: utf-8

"""
    World Time API

    A simple API to get the current time based on a request with a timezone.

    The version of the OpenAPI document: 20210108
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DateTimeJsonResponse(BaseModel):
    """
    DateTimeJsonResponse
    """ # noqa: E501
    abbreviation: StrictStr = Field(description="the abbreviated name of the timezone")
    client_ip: StrictStr = Field(description="the IP of the client making the request")
    datetime: StrictStr = Field(description="an ISO8601-valid string representing the current, local date/time")
    day_of_week: StrictInt = Field(description="current day number of the week, where sunday is 0")
    day_of_year: StrictInt = Field(description="ordinal date of the current year")
    dst: StrictBool = Field(description="flag indicating whether the local time is in daylight savings")
    dst_from: Optional[StrictStr] = Field(default=None, description="an ISO8601-valid string representing the datetime when daylight savings started for this timezone")
    dst_offset: StrictInt = Field(description="the difference in seconds between the current local time and daylight saving time for the location")
    dst_until: Optional[StrictStr] = Field(default=None, description="an ISO8601-valid string representing the datetime when daylight savings will end for this timezone")
    raw_offset: Optional[StrictInt] = Field(default=None, description="the difference in seconds between the current local time and the time in UTC, excluding any daylight saving difference (see dst_offset)")
    timezone: StrictStr = Field(description="timezone in `Area/Location` or `Area/Location/Region` format")
    unixtime: StrictInt = Field(description="number of seconds since the Epoch")
    utc_datetime: StrictStr = Field(description="an ISO8601-valid string representing the current date/time in UTC")
    utc_offset: StrictStr = Field(description="an ISO8601-valid string representing the offset from UTC")
    week_number: StrictInt = Field(description="the current week number")
    __properties: ClassVar[List[str]] = ["abbreviation", "client_ip", "datetime", "day_of_week", "day_of_year", "dst", "dst_from", "dst_offset", "dst_until", "raw_offset", "timezone", "unixtime", "utc_datetime", "utc_offset", "week_number"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DateTimeJsonResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DateTimeJsonResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "abbreviation": obj.get("abbreviation"),
            "client_ip": obj.get("client_ip"),
            "datetime": obj.get("datetime"),
            "day_of_week": obj.get("day_of_week"),
            "day_of_year": obj.get("day_of_year"),
            "dst": obj.get("dst"),
            "dst_from": obj.get("dst_from"),
            "dst_offset": obj.get("dst_offset"),
            "dst_until": obj.get("dst_until"),
            "raw_offset": obj.get("raw_offset"),
            "timezone": obj.get("timezone"),
            "unixtime": obj.get("unixtime"),
            "utc_datetime": obj.get("utc_datetime"),
            "utc_offset": obj.get("utc_offset"),
            "week_number": obj.get("week_number")
        })
        return _obj



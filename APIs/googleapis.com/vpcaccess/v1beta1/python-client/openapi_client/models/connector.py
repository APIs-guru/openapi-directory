# coding: utf-8

"""
    Serverless VPC Access API

    API for managing VPC access connectors.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.subnet import Subnet
from typing import Optional, Set
from typing_extensions import Self

class Connector(BaseModel):
    """
    Definition of a Serverless VPC Access connector.
    """ # noqa: E501
    connected_projects: Optional[List[StrictStr]] = Field(default=None, description="Output only. List of projects using the connector.", alias="connectedProjects")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The creation time of the connector.", alias="createTime")
    ip_cidr_range: Optional[StrictStr] = Field(default=None, description="The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.", alias="ipCidrRange")
    last_restart_time: Optional[StrictStr] = Field(default=None, description="Output only. The last restart time of the connector.", alias="lastRestartTime")
    machine_type: Optional[StrictStr] = Field(default=None, description="Machine type of VM Instance underlying connector. Default is e2-micro", alias="machineType")
    max_instances: Optional[StrictInt] = Field(default=None, description="Maximum value of instances in autoscaling group underlying the connector.", alias="maxInstances")
    max_throughput: Optional[StrictInt] = Field(default=None, description="Maximum throughput of the connector in Mbps. Refers to the expected throughput when using an `e2-micro` machine type. Value must be a multiple of 100 from 300 through 1000. Must be higher than the value specified by --min-throughput. If both max-throughput and max-instances are provided, max-instances takes precedence over max-throughput. The use of `max-throughput` is discouraged in favor of `max-instances`.", alias="maxThroughput")
    min_instances: Optional[StrictInt] = Field(default=None, description="Minimum value of instances in autoscaling group underlying the connector.", alias="minInstances")
    min_throughput: Optional[StrictInt] = Field(default=None, description="Minimum throughput of the connector in Mbps. Refers to the expected throughput when using an `e2-micro` machine type. Value must be a multiple of 100 from 200 through 900. Must be lower than the value specified by --max-throughput. If both min-throughput and min-instances are provided, min-instances takes precedence over min-throughput. The use of `min-throughput` is discouraged in favor of `min-instances`.", alias="minThroughput")
    name: Optional[StrictStr] = Field(default=None, description="The resource name in the format `projects/*/locations/*/connectors/*`.")
    network: Optional[StrictStr] = Field(default=None, description="Name of a VPC network.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the VPC access connector.")
    subnet: Optional[Subnet] = None
    __properties: ClassVar[List[str]] = ["connectedProjects", "createTime", "ipCidrRange", "lastRestartTime", "machineType", "maxInstances", "maxThroughput", "minInstances", "minThroughput", "name", "network", "state", "subnet"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'READY', 'CREATING', 'DELETING', 'ERROR', 'UPDATING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'READY', 'CREATING', 'DELETING', 'ERROR', 'UPDATING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Connector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "connected_projects",
            "create_time",
            "last_restart_time",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of subnet
        if self.subnet:
            _dict['subnet'] = self.subnet.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Connector from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectedProjects": obj.get("connectedProjects"),
            "createTime": obj.get("createTime"),
            "ipCidrRange": obj.get("ipCidrRange"),
            "lastRestartTime": obj.get("lastRestartTime"),
            "machineType": obj.get("machineType"),
            "maxInstances": obj.get("maxInstances"),
            "maxThroughput": obj.get("maxThroughput"),
            "minInstances": obj.get("minInstances"),
            "minThroughput": obj.get("minThroughput"),
            "name": obj.get("name"),
            "network": obj.get("network"),
            "state": obj.get("state"),
            "subnet": Subnet.from_dict(obj["subnet"]) if obj.get("subnet") is not None else None
        })
        return _obj



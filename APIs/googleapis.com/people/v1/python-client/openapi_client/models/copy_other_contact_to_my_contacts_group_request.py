# coding: utf-8

"""
    People API

    Provides access to information about profiles and contacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CopyOtherContactToMyContactsGroupRequest(BaseModel):
    """
    A request to copy an \"Other contact\" to my contacts group.
    """ # noqa: E501
    copy_mask: Optional[StrictStr] = Field(default=None, description="Required. A field mask to restrict which fields are copied into the new contact. Valid values are: * emailAddresses * names * phoneNumbers", alias="copyMask")
    read_mask: Optional[StrictStr] = Field(default=None, description="Optional. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Defaults to the copy mask with metadata and membership fields if not set. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined", alias="readMask")
    sources: Optional[List[StrictStr]] = Field(default=None, description="Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.")
    __properties: ClassVar[List[str]] = ["copyMask", "readMask", "sources"]

    @field_validator('sources')
    def sources_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['READ_SOURCE_TYPE_UNSPECIFIED', 'READ_SOURCE_TYPE_PROFILE', 'READ_SOURCE_TYPE_CONTACT', 'READ_SOURCE_TYPE_DOMAIN_CONTACT']):
                raise ValueError("each list item must be one of ('READ_SOURCE_TYPE_UNSPECIFIED', 'READ_SOURCE_TYPE_PROFILE', 'READ_SOURCE_TYPE_CONTACT', 'READ_SOURCE_TYPE_DOMAIN_CONTACT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CopyOtherContactToMyContactsGroupRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CopyOtherContactToMyContactsGroupRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "copyMask": obj.get("copyMask"),
            "readMask": obj.get("readMask"),
            "sources": obj.get("sources")
        })
        return _obj



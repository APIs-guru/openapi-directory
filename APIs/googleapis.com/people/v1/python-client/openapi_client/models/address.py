# coding: utf-8

"""
    People API

    Provides access to information about profiles and contacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.field_metadata import FieldMetadata
from typing import Optional, Set
from typing_extensions import Self

class Address(BaseModel):
    """
    A person's physical address. May be a P.O. box or street address. All fields are optional.
    """ # noqa: E501
    city: Optional[StrictStr] = Field(default=None, description="The city of the address.")
    country: Optional[StrictStr] = Field(default=None, description="The country of the address.")
    country_code: Optional[StrictStr] = Field(default=None, description="The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country code of the address.", alias="countryCode")
    extended_address: Optional[StrictStr] = Field(default=None, description="The extended address of the address; for example, the apartment number.", alias="extendedAddress")
    formatted_type: Optional[StrictStr] = Field(default=None, description="Output only. The type of the address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.", alias="formattedType")
    formatted_value: Optional[StrictStr] = Field(default=None, description="The unstructured value of the address. If this is not set by the user it will be automatically constructed from structured values.", alias="formattedValue")
    metadata: Optional[FieldMetadata] = None
    po_box: Optional[StrictStr] = Field(default=None, description="The P.O. box of the address.", alias="poBox")
    postal_code: Optional[StrictStr] = Field(default=None, description="The postal code of the address.", alias="postalCode")
    region: Optional[StrictStr] = Field(default=None, description="The region of the address; for example, the state or province.")
    street_address: Optional[StrictStr] = Field(default=None, description="The street address.", alias="streetAddress")
    type: Optional[StrictStr] = Field(default=None, description="The type of the address. The type can be custom or one of these predefined values: * `home` * `work` * `other`")
    __properties: ClassVar[List[str]] = ["city", "country", "countryCode", "extendedAddress", "formattedType", "formattedValue", "metadata", "poBox", "postalCode", "region", "streetAddress", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "formatted_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Address from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "city": obj.get("city"),
            "country": obj.get("country"),
            "countryCode": obj.get("countryCode"),
            "extendedAddress": obj.get("extendedAddress"),
            "formattedType": obj.get("formattedType"),
            "formattedValue": obj.get("formattedValue"),
            "metadata": FieldMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "poBox": obj.get("poBox"),
            "postalCode": obj.get("postalCode"),
            "region": obj.get("region"),
            "streetAddress": obj.get("streetAddress"),
            "type": obj.get("type")
        })
        return _obj



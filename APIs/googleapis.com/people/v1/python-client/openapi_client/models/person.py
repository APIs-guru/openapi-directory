# coding: utf-8

"""
    People API

    Provides access to information about profiles and contacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.age_range_type import AgeRangeType
from openapi_client.models.biography import Biography
from openapi_client.models.birthday import Birthday
from openapi_client.models.bragging_rights import BraggingRights
from openapi_client.models.calendar_url import CalendarUrl
from openapi_client.models.client_data import ClientData
from openapi_client.models.cover_photo import CoverPhoto
from openapi_client.models.email_address import EmailAddress
from openapi_client.models.event import Event
from openapi_client.models.external_id import ExternalId
from openapi_client.models.file_as import FileAs
from openapi_client.models.gender import Gender
from openapi_client.models.im_client import ImClient
from openapi_client.models.interest import Interest
from openapi_client.models.locale import Locale
from openapi_client.models.location import Location
from openapi_client.models.membership import Membership
from openapi_client.models.misc_keyword import MiscKeyword
from openapi_client.models.name import Name
from openapi_client.models.nickname import Nickname
from openapi_client.models.occupation import Occupation
from openapi_client.models.organization import Organization
from openapi_client.models.person_metadata import PersonMetadata
from openapi_client.models.phone_number import PhoneNumber
from openapi_client.models.photo import Photo
from openapi_client.models.relation import Relation
from openapi_client.models.relationship_interest import RelationshipInterest
from openapi_client.models.relationship_status import RelationshipStatus
from openapi_client.models.residence import Residence
from openapi_client.models.sip_address import SipAddress
from openapi_client.models.skill import Skill
from openapi_client.models.tagline import Tagline
from openapi_client.models.url import Url
from openapi_client.models.user_defined import UserDefined
from typing import Optional, Set
from typing_extensions import Self

class Person(BaseModel):
    """
    Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true.
    """ # noqa: E501
    addresses: Optional[List[Address]] = Field(default=None, description="The person's street addresses.")
    age_range: Optional[StrictStr] = Field(default=None, description="Output only. **DEPRECATED** (Please use `person.ageRanges` instead) The person's age range.", alias="ageRange")
    age_ranges: Optional[List[AgeRangeType]] = Field(default=None, description="Output only. The person's age ranges.", alias="ageRanges")
    biographies: Optional[List[Biography]] = Field(default=None, description="The person's biographies. This field is a singleton for contact sources.")
    birthdays: Optional[List[Birthday]] = Field(default=None, description="The person's birthdays. This field is a singleton for contact sources.")
    bragging_rights: Optional[List[BraggingRights]] = Field(default=None, description="**DEPRECATED**: No data will be returned The person's bragging rights.", alias="braggingRights")
    calendar_urls: Optional[List[CalendarUrl]] = Field(default=None, description="The person's calendar URLs.", alias="calendarUrls")
    client_data: Optional[List[ClientData]] = Field(default=None, description="The person's client data.", alias="clientData")
    cover_photos: Optional[List[CoverPhoto]] = Field(default=None, description="Output only. The person's cover photos.", alias="coverPhotos")
    email_addresses: Optional[List[EmailAddress]] = Field(default=None, description="The person's email addresses. For `people.connections.list` and `otherContacts.list` the number of email addresses is limited to 100. If a Person has more email addresses the entire set can be obtained by calling GetPeople.", alias="emailAddresses")
    etag: Optional[StrictStr] = Field(default=None, description="The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.")
    events: Optional[List[Event]] = Field(default=None, description="The person's events.")
    external_ids: Optional[List[ExternalId]] = Field(default=None, description="The person's external IDs.", alias="externalIds")
    file_ases: Optional[List[FileAs]] = Field(default=None, description="The person's file-ases.", alias="fileAses")
    genders: Optional[List[Gender]] = Field(default=None, description="The person's genders. This field is a singleton for contact sources.")
    im_clients: Optional[List[ImClient]] = Field(default=None, description="The person's instant messaging clients.", alias="imClients")
    interests: Optional[List[Interest]] = Field(default=None, description="The person's interests.")
    locales: Optional[List[Locale]] = Field(default=None, description="The person's locale preferences.")
    locations: Optional[List[Location]] = Field(default=None, description="The person's locations.")
    memberships: Optional[List[Membership]] = Field(default=None, description="The person's group memberships.")
    metadata: Optional[PersonMetadata] = None
    misc_keywords: Optional[List[MiscKeyword]] = Field(default=None, description="The person's miscellaneous keywords.", alias="miscKeywords")
    names: Optional[List[Name]] = Field(default=None, description="The person's names. This field is a singleton for contact sources.")
    nicknames: Optional[List[Nickname]] = Field(default=None, description="The person's nicknames.")
    occupations: Optional[List[Occupation]] = Field(default=None, description="The person's occupations.")
    organizations: Optional[List[Organization]] = Field(default=None, description="The person's past or current organizations.")
    phone_numbers: Optional[List[PhoneNumber]] = Field(default=None, description="The person's phone numbers. For `people.connections.list` and `otherContacts.list` the number of phone numbers is limited to 100. If a Person has more phone numbers the entire set can be obtained by calling GetPeople.", alias="phoneNumbers")
    photos: Optional[List[Photo]] = Field(default=None, description="Output only. The person's photos.")
    relations: Optional[List[Relation]] = Field(default=None, description="The person's relations.")
    relationship_interests: Optional[List[RelationshipInterest]] = Field(default=None, description="Output only. **DEPRECATED**: No data will be returned The person's relationship interests.", alias="relationshipInterests")
    relationship_statuses: Optional[List[RelationshipStatus]] = Field(default=None, description="Output only. **DEPRECATED**: No data will be returned The person's relationship statuses.", alias="relationshipStatuses")
    residences: Optional[List[Residence]] = Field(default=None, description="**DEPRECATED**: (Please use `person.locations` instead) The person's residences.")
    resource_name: Optional[StrictStr] = Field(default=None, description="The resource name for the person, assigned by the server. An ASCII string in the form of `people/{person_id}`.", alias="resourceName")
    sip_addresses: Optional[List[SipAddress]] = Field(default=None, description="The person's SIP addresses.", alias="sipAddresses")
    skills: Optional[List[Skill]] = Field(default=None, description="The person's skills.")
    taglines: Optional[List[Tagline]] = Field(default=None, description="Output only. **DEPRECATED**: No data will be returned The person's taglines.")
    urls: Optional[List[Url]] = Field(default=None, description="The person's associated URLs.")
    user_defined: Optional[List[UserDefined]] = Field(default=None, description="The person's user defined data.", alias="userDefined")
    __properties: ClassVar[List[str]] = ["addresses", "ageRange", "ageRanges", "biographies", "birthdays", "braggingRights", "calendarUrls", "clientData", "coverPhotos", "emailAddresses", "etag", "events", "externalIds", "fileAses", "genders", "imClients", "interests", "locales", "locations", "memberships", "metadata", "miscKeywords", "names", "nicknames", "occupations", "organizations", "phoneNumbers", "photos", "relations", "relationshipInterests", "relationshipStatuses", "residences", "resourceName", "sipAddresses", "skills", "taglines", "urls", "userDefined"]

    @field_validator('age_range')
    def age_range_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AGE_RANGE_UNSPECIFIED', 'LESS_THAN_EIGHTEEN', 'EIGHTEEN_TO_TWENTY', 'TWENTY_ONE_OR_OLDER']):
            raise ValueError("must be one of enum values ('AGE_RANGE_UNSPECIFIED', 'LESS_THAN_EIGHTEEN', 'EIGHTEEN_TO_TWENTY', 'TWENTY_ONE_OR_OLDER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Person from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "age_range",
            "age_ranges",
            "cover_photos",
            "photos",
            "relationship_interests",
            "relationship_statuses",
            "taglines",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item_addresses in self.addresses:
                if _item_addresses:
                    _items.append(_item_addresses.to_dict())
            _dict['addresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in age_ranges (list)
        _items = []
        if self.age_ranges:
            for _item_age_ranges in self.age_ranges:
                if _item_age_ranges:
                    _items.append(_item_age_ranges.to_dict())
            _dict['ageRanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in biographies (list)
        _items = []
        if self.biographies:
            for _item_biographies in self.biographies:
                if _item_biographies:
                    _items.append(_item_biographies.to_dict())
            _dict['biographies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in birthdays (list)
        _items = []
        if self.birthdays:
            for _item_birthdays in self.birthdays:
                if _item_birthdays:
                    _items.append(_item_birthdays.to_dict())
            _dict['birthdays'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bragging_rights (list)
        _items = []
        if self.bragging_rights:
            for _item_bragging_rights in self.bragging_rights:
                if _item_bragging_rights:
                    _items.append(_item_bragging_rights.to_dict())
            _dict['braggingRights'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in calendar_urls (list)
        _items = []
        if self.calendar_urls:
            for _item_calendar_urls in self.calendar_urls:
                if _item_calendar_urls:
                    _items.append(_item_calendar_urls.to_dict())
            _dict['calendarUrls'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in client_data (list)
        _items = []
        if self.client_data:
            for _item_client_data in self.client_data:
                if _item_client_data:
                    _items.append(_item_client_data.to_dict())
            _dict['clientData'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cover_photos (list)
        _items = []
        if self.cover_photos:
            for _item_cover_photos in self.cover_photos:
                if _item_cover_photos:
                    _items.append(_item_cover_photos.to_dict())
            _dict['coverPhotos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in email_addresses (list)
        _items = []
        if self.email_addresses:
            for _item_email_addresses in self.email_addresses:
                if _item_email_addresses:
                    _items.append(_item_email_addresses.to_dict())
            _dict['emailAddresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in events (list)
        _items = []
        if self.events:
            for _item_events in self.events:
                if _item_events:
                    _items.append(_item_events.to_dict())
            _dict['events'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in external_ids (list)
        _items = []
        if self.external_ids:
            for _item_external_ids in self.external_ids:
                if _item_external_ids:
                    _items.append(_item_external_ids.to_dict())
            _dict['externalIds'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in file_ases (list)
        _items = []
        if self.file_ases:
            for _item_file_ases in self.file_ases:
                if _item_file_ases:
                    _items.append(_item_file_ases.to_dict())
            _dict['fileAses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in genders (list)
        _items = []
        if self.genders:
            for _item_genders in self.genders:
                if _item_genders:
                    _items.append(_item_genders.to_dict())
            _dict['genders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in im_clients (list)
        _items = []
        if self.im_clients:
            for _item_im_clients in self.im_clients:
                if _item_im_clients:
                    _items.append(_item_im_clients.to_dict())
            _dict['imClients'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in interests (list)
        _items = []
        if self.interests:
            for _item_interests in self.interests:
                if _item_interests:
                    _items.append(_item_interests.to_dict())
            _dict['interests'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in locales (list)
        _items = []
        if self.locales:
            for _item_locales in self.locales:
                if _item_locales:
                    _items.append(_item_locales.to_dict())
            _dict['locales'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in locations (list)
        _items = []
        if self.locations:
            for _item_locations in self.locations:
                if _item_locations:
                    _items.append(_item_locations.to_dict())
            _dict['locations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in memberships (list)
        _items = []
        if self.memberships:
            for _item_memberships in self.memberships:
                if _item_memberships:
                    _items.append(_item_memberships.to_dict())
            _dict['memberships'] = _items
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in misc_keywords (list)
        _items = []
        if self.misc_keywords:
            for _item_misc_keywords in self.misc_keywords:
                if _item_misc_keywords:
                    _items.append(_item_misc_keywords.to_dict())
            _dict['miscKeywords'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in names (list)
        _items = []
        if self.names:
            for _item_names in self.names:
                if _item_names:
                    _items.append(_item_names.to_dict())
            _dict['names'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nicknames (list)
        _items = []
        if self.nicknames:
            for _item_nicknames in self.nicknames:
                if _item_nicknames:
                    _items.append(_item_nicknames.to_dict())
            _dict['nicknames'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in occupations (list)
        _items = []
        if self.occupations:
            for _item_occupations in self.occupations:
                if _item_occupations:
                    _items.append(_item_occupations.to_dict())
            _dict['occupations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in organizations (list)
        _items = []
        if self.organizations:
            for _item_organizations in self.organizations:
                if _item_organizations:
                    _items.append(_item_organizations.to_dict())
            _dict['organizations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phone_numbers (list)
        _items = []
        if self.phone_numbers:
            for _item_phone_numbers in self.phone_numbers:
                if _item_phone_numbers:
                    _items.append(_item_phone_numbers.to_dict())
            _dict['phoneNumbers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in photos (list)
        _items = []
        if self.photos:
            for _item_photos in self.photos:
                if _item_photos:
                    _items.append(_item_photos.to_dict())
            _dict['photos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in relations (list)
        _items = []
        if self.relations:
            for _item_relations in self.relations:
                if _item_relations:
                    _items.append(_item_relations.to_dict())
            _dict['relations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in relationship_interests (list)
        _items = []
        if self.relationship_interests:
            for _item_relationship_interests in self.relationship_interests:
                if _item_relationship_interests:
                    _items.append(_item_relationship_interests.to_dict())
            _dict['relationshipInterests'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in relationship_statuses (list)
        _items = []
        if self.relationship_statuses:
            for _item_relationship_statuses in self.relationship_statuses:
                if _item_relationship_statuses:
                    _items.append(_item_relationship_statuses.to_dict())
            _dict['relationshipStatuses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in residences (list)
        _items = []
        if self.residences:
            for _item_residences in self.residences:
                if _item_residences:
                    _items.append(_item_residences.to_dict())
            _dict['residences'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sip_addresses (list)
        _items = []
        if self.sip_addresses:
            for _item_sip_addresses in self.sip_addresses:
                if _item_sip_addresses:
                    _items.append(_item_sip_addresses.to_dict())
            _dict['sipAddresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in skills (list)
        _items = []
        if self.skills:
            for _item_skills in self.skills:
                if _item_skills:
                    _items.append(_item_skills.to_dict())
            _dict['skills'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in taglines (list)
        _items = []
        if self.taglines:
            for _item_taglines in self.taglines:
                if _item_taglines:
                    _items.append(_item_taglines.to_dict())
            _dict['taglines'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in urls (list)
        _items = []
        if self.urls:
            for _item_urls in self.urls:
                if _item_urls:
                    _items.append(_item_urls.to_dict())
            _dict['urls'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user_defined (list)
        _items = []
        if self.user_defined:
            for _item_user_defined in self.user_defined:
                if _item_user_defined:
                    _items.append(_item_user_defined.to_dict())
            _dict['userDefined'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Person from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addresses": [Address.from_dict(_item) for _item in obj["addresses"]] if obj.get("addresses") is not None else None,
            "ageRange": obj.get("ageRange"),
            "ageRanges": [AgeRangeType.from_dict(_item) for _item in obj["ageRanges"]] if obj.get("ageRanges") is not None else None,
            "biographies": [Biography.from_dict(_item) for _item in obj["biographies"]] if obj.get("biographies") is not None else None,
            "birthdays": [Birthday.from_dict(_item) for _item in obj["birthdays"]] if obj.get("birthdays") is not None else None,
            "braggingRights": [BraggingRights.from_dict(_item) for _item in obj["braggingRights"]] if obj.get("braggingRights") is not None else None,
            "calendarUrls": [CalendarUrl.from_dict(_item) for _item in obj["calendarUrls"]] if obj.get("calendarUrls") is not None else None,
            "clientData": [ClientData.from_dict(_item) for _item in obj["clientData"]] if obj.get("clientData") is not None else None,
            "coverPhotos": [CoverPhoto.from_dict(_item) for _item in obj["coverPhotos"]] if obj.get("coverPhotos") is not None else None,
            "emailAddresses": [EmailAddress.from_dict(_item) for _item in obj["emailAddresses"]] if obj.get("emailAddresses") is not None else None,
            "etag": obj.get("etag"),
            "events": [Event.from_dict(_item) for _item in obj["events"]] if obj.get("events") is not None else None,
            "externalIds": [ExternalId.from_dict(_item) for _item in obj["externalIds"]] if obj.get("externalIds") is not None else None,
            "fileAses": [FileAs.from_dict(_item) for _item in obj["fileAses"]] if obj.get("fileAses") is not None else None,
            "genders": [Gender.from_dict(_item) for _item in obj["genders"]] if obj.get("genders") is not None else None,
            "imClients": [ImClient.from_dict(_item) for _item in obj["imClients"]] if obj.get("imClients") is not None else None,
            "interests": [Interest.from_dict(_item) for _item in obj["interests"]] if obj.get("interests") is not None else None,
            "locales": [Locale.from_dict(_item) for _item in obj["locales"]] if obj.get("locales") is not None else None,
            "locations": [Location.from_dict(_item) for _item in obj["locations"]] if obj.get("locations") is not None else None,
            "memberships": [Membership.from_dict(_item) for _item in obj["memberships"]] if obj.get("memberships") is not None else None,
            "metadata": PersonMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "miscKeywords": [MiscKeyword.from_dict(_item) for _item in obj["miscKeywords"]] if obj.get("miscKeywords") is not None else None,
            "names": [Name.from_dict(_item) for _item in obj["names"]] if obj.get("names") is not None else None,
            "nicknames": [Nickname.from_dict(_item) for _item in obj["nicknames"]] if obj.get("nicknames") is not None else None,
            "occupations": [Occupation.from_dict(_item) for _item in obj["occupations"]] if obj.get("occupations") is not None else None,
            "organizations": [Organization.from_dict(_item) for _item in obj["organizations"]] if obj.get("organizations") is not None else None,
            "phoneNumbers": [PhoneNumber.from_dict(_item) for _item in obj["phoneNumbers"]] if obj.get("phoneNumbers") is not None else None,
            "photos": [Photo.from_dict(_item) for _item in obj["photos"]] if obj.get("photos") is not None else None,
            "relations": [Relation.from_dict(_item) for _item in obj["relations"]] if obj.get("relations") is not None else None,
            "relationshipInterests": [RelationshipInterest.from_dict(_item) for _item in obj["relationshipInterests"]] if obj.get("relationshipInterests") is not None else None,
            "relationshipStatuses": [RelationshipStatus.from_dict(_item) for _item in obj["relationshipStatuses"]] if obj.get("relationshipStatuses") is not None else None,
            "residences": [Residence.from_dict(_item) for _item in obj["residences"]] if obj.get("residences") is not None else None,
            "resourceName": obj.get("resourceName"),
            "sipAddresses": [SipAddress.from_dict(_item) for _item in obj["sipAddresses"]] if obj.get("sipAddresses") is not None else None,
            "skills": [Skill.from_dict(_item) for _item in obj["skills"]] if obj.get("skills") is not None else None,
            "taglines": [Tagline.from_dict(_item) for _item in obj["taglines"]] if obj.get("taglines") is not None else None,
            "urls": [Url.from_dict(_item) for _item in obj["urls"]] if obj.get("urls") is not None else None,
            "userDefined": [UserDefined.from_dict(_item) for _item in obj["userDefined"]] if obj.get("userDefined") is not None else None
        })
        return _obj



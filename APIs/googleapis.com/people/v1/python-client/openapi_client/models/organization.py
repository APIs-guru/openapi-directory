# coding: utf-8

"""
    People API

    Provides access to information about profiles and contacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.field_metadata import FieldMetadata
from openapi_client.models.model_date import ModelDate
from typing import Optional, Set
from typing_extensions import Self

class Organization(BaseModel):
    """
    A person's past or current organization. Overlapping date ranges are permitted.
    """ # noqa: E501
    cost_center: Optional[StrictStr] = Field(default=None, description="The person's cost center at the organization.", alias="costCenter")
    current: Optional[StrictBool] = Field(default=None, description="True if the organization is the person's current organization; false if the organization is a past organization.")
    department: Optional[StrictStr] = Field(default=None, description="The person's department at the organization.")
    domain: Optional[StrictStr] = Field(default=None, description="The domain name associated with the organization; for example, `google.com`.")
    end_date: Optional[ModelDate] = Field(default=None, alias="endDate")
    formatted_type: Optional[StrictStr] = Field(default=None, description="Output only. The type of the organization translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.", alias="formattedType")
    full_time_equivalent_millipercent: Optional[StrictInt] = Field(default=None, description="The person's full-time equivalent millipercent within the organization (100000 = 100%).", alias="fullTimeEquivalentMillipercent")
    job_description: Optional[StrictStr] = Field(default=None, description="The person's job description at the organization.", alias="jobDescription")
    location: Optional[StrictStr] = Field(default=None, description="The location of the organization office the person works at.")
    metadata: Optional[FieldMetadata] = None
    name: Optional[StrictStr] = Field(default=None, description="The name of the organization.")
    phonetic_name: Optional[StrictStr] = Field(default=None, description="The phonetic name of the organization.", alias="phoneticName")
    start_date: Optional[ModelDate] = Field(default=None, alias="startDate")
    symbol: Optional[StrictStr] = Field(default=None, description="The symbol associated with the organization; for example, a stock ticker symbol, abbreviation, or acronym.")
    title: Optional[StrictStr] = Field(default=None, description="The person's job title at the organization.")
    type: Optional[StrictStr] = Field(default=None, description="The type of the organization. The type can be custom or one of these predefined values: * `work` * `school`")
    __properties: ClassVar[List[str]] = ["costCenter", "current", "department", "domain", "endDate", "formattedType", "fullTimeEquivalentMillipercent", "jobDescription", "location", "metadata", "name", "phoneticName", "startDate", "symbol", "title", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Organization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "formatted_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of end_date
        if self.end_date:
            _dict['endDate'] = self.end_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_date
        if self.start_date:
            _dict['startDate'] = self.start_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Organization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "costCenter": obj.get("costCenter"),
            "current": obj.get("current"),
            "department": obj.get("department"),
            "domain": obj.get("domain"),
            "endDate": ModelDate.from_dict(obj["endDate"]) if obj.get("endDate") is not None else None,
            "formattedType": obj.get("formattedType"),
            "fullTimeEquivalentMillipercent": obj.get("fullTimeEquivalentMillipercent"),
            "jobDescription": obj.get("jobDescription"),
            "location": obj.get("location"),
            "metadata": FieldMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "name": obj.get("name"),
            "phoneticName": obj.get("phoneticName"),
            "startDate": ModelDate.from_dict(obj["startDate"]) if obj.get("startDate") is not None else None,
            "symbol": obj.get("symbol"),
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj



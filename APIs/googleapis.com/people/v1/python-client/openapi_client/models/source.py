# coding: utf-8

"""
    People API

    Provides access to information about profiles and contacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.profile_metadata import ProfileMetadata
from typing import Optional, Set
from typing_extensions import Self

class Source(BaseModel):
    """
    The source of a field.
    """ # noqa: E501
    etag: Optional[StrictStr] = Field(default=None, description="**Only populated in `person.metadata.sources`.** The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the source. Used for web cache validation.")
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier within the source type generated by the server.")
    profile_metadata: Optional[ProfileMetadata] = Field(default=None, alias="profileMetadata")
    type: Optional[StrictStr] = Field(default=None, description="The source type.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. **Only populated in `person.metadata.sources`.** Last update timestamp of this source.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["etag", "id", "profileMetadata", "type", "updateTime"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SOURCE_TYPE_UNSPECIFIED', 'ACCOUNT', 'PROFILE', 'DOMAIN_PROFILE', 'CONTACT', 'OTHER_CONTACT', 'DOMAIN_CONTACT']):
            raise ValueError("must be one of enum values ('SOURCE_TYPE_UNSPECIFIED', 'ACCOUNT', 'PROFILE', 'DOMAIN_PROFILE', 'CONTACT', 'OTHER_CONTACT', 'DOMAIN_CONTACT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Source from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of profile_metadata
        if self.profile_metadata:
            _dict['profileMetadata'] = self.profile_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Source from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "etag": obj.get("etag"),
            "id": obj.get("id"),
            "profileMetadata": ProfileMetadata.from_dict(obj["profileMetadata"]) if obj.get("profileMetadata") is not None else None,
            "type": obj.get("type"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



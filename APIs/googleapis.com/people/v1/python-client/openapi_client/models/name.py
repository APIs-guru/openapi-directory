# coding: utf-8

"""
    People API

    Provides access to information about profiles and contacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.field_metadata import FieldMetadata
from typing import Optional, Set
from typing_extensions import Self

class Name(BaseModel):
    """
    A person's name. If the name is a mononym, the family name is empty.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. The display name formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header.", alias="displayName")
    display_name_last_first: Optional[StrictStr] = Field(default=None, description="Output only. The display name with the last name first formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header.", alias="displayNameLastFirst")
    family_name: Optional[StrictStr] = Field(default=None, description="The family name.", alias="familyName")
    given_name: Optional[StrictStr] = Field(default=None, description="The given name.", alias="givenName")
    honorific_prefix: Optional[StrictStr] = Field(default=None, description="The honorific prefixes, such as `Mrs.` or `Dr.`", alias="honorificPrefix")
    honorific_suffix: Optional[StrictStr] = Field(default=None, description="The honorific suffixes, such as `Jr.`", alias="honorificSuffix")
    metadata: Optional[FieldMetadata] = None
    middle_name: Optional[StrictStr] = Field(default=None, description="The middle name(s).", alias="middleName")
    phonetic_family_name: Optional[StrictStr] = Field(default=None, description="The family name spelled as it sounds.", alias="phoneticFamilyName")
    phonetic_full_name: Optional[StrictStr] = Field(default=None, description="The full name spelled as it sounds.", alias="phoneticFullName")
    phonetic_given_name: Optional[StrictStr] = Field(default=None, description="The given name spelled as it sounds.", alias="phoneticGivenName")
    phonetic_honorific_prefix: Optional[StrictStr] = Field(default=None, description="The honorific prefixes spelled as they sound.", alias="phoneticHonorificPrefix")
    phonetic_honorific_suffix: Optional[StrictStr] = Field(default=None, description="The honorific suffixes spelled as they sound.", alias="phoneticHonorificSuffix")
    phonetic_middle_name: Optional[StrictStr] = Field(default=None, description="The middle name(s) spelled as they sound.", alias="phoneticMiddleName")
    unstructured_name: Optional[StrictStr] = Field(default=None, description="The free form name value.", alias="unstructuredName")
    __properties: ClassVar[List[str]] = ["displayName", "displayNameLastFirst", "familyName", "givenName", "honorificPrefix", "honorificSuffix", "metadata", "middleName", "phoneticFamilyName", "phoneticFullName", "phoneticGivenName", "phoneticHonorificPrefix", "phoneticHonorificSuffix", "phoneticMiddleName", "unstructuredName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Name from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "display_name",
            "display_name_last_first",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Name from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "displayNameLastFirst": obj.get("displayNameLastFirst"),
            "familyName": obj.get("familyName"),
            "givenName": obj.get("givenName"),
            "honorificPrefix": obj.get("honorificPrefix"),
            "honorificSuffix": obj.get("honorificSuffix"),
            "metadata": FieldMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "middleName": obj.get("middleName"),
            "phoneticFamilyName": obj.get("phoneticFamilyName"),
            "phoneticFullName": obj.get("phoneticFullName"),
            "phoneticGivenName": obj.get("phoneticGivenName"),
            "phoneticHonorificPrefix": obj.get("phoneticHonorificPrefix"),
            "phoneticHonorificSuffix": obj.get("phoneticHonorificSuffix"),
            "phoneticMiddleName": obj.get("phoneticMiddleName"),
            "unstructuredName": obj.get("unstructuredName")
        })
        return _obj



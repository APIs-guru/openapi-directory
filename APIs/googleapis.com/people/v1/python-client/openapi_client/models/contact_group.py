# coding: utf-8

"""
    People API

    Provides access to information about profiles and contacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.contact_group_metadata import ContactGroupMetadata
from openapi_client.models.group_client_data import GroupClientData
from typing import Optional, Set
from typing_extensions import Self

class ContactGroup(BaseModel):
    """
    A contact group.
    """ # noqa: E501
    client_data: Optional[List[GroupClientData]] = Field(default=None, description="The group's client data.", alias="clientData")
    etag: Optional[StrictStr] = Field(default=None, description="The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.")
    formatted_name: Optional[StrictStr] = Field(default=None, description="Output only. The name translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale for system groups names. Group names set by the owner are the same as name.", alias="formattedName")
    group_type: Optional[StrictStr] = Field(default=None, description="Output only. The contact group type.", alias="groupType")
    member_count: Optional[StrictInt] = Field(default=None, description="Output only. The total number of contacts in the group irrespective of max members in specified in the request.", alias="memberCount")
    member_resource_names: Optional[List[StrictStr]] = Field(default=None, description="Output only. The list of contact person resource names that are members of the contact group. The field is only populated for GET requests and will only return as many members as `maxMembers` in the get request.", alias="memberResourceNames")
    metadata: Optional[ContactGroupMetadata] = None
    name: Optional[StrictStr] = Field(default=None, description="The contact group name set by the group owner or a system provided name for system groups. For [`contactGroups.create`](/people/api/rest/v1/contactGroups/create) or [`contactGroups.update`](/people/api/rest/v1/contactGroups/update) the name must be unique to the users contact groups. Attempting to create a group with a duplicate name will return a HTTP 409 error.")
    resource_name: Optional[StrictStr] = Field(default=None, description="The resource name for the contact group, assigned by the server. An ASCII string, in the form of `contactGroups/{contact_group_id}`.", alias="resourceName")
    __properties: ClassVar[List[str]] = ["clientData", "etag", "formattedName", "groupType", "memberCount", "memberResourceNames", "metadata", "name", "resourceName"]

    @field_validator('group_type')
    def group_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GROUP_TYPE_UNSPECIFIED', 'USER_CONTACT_GROUP', 'SYSTEM_CONTACT_GROUP']):
            raise ValueError("must be one of enum values ('GROUP_TYPE_UNSPECIFIED', 'USER_CONTACT_GROUP', 'SYSTEM_CONTACT_GROUP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContactGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "formatted_name",
            "group_type",
            "member_count",
            "member_resource_names",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in client_data (list)
        _items = []
        if self.client_data:
            for _item_client_data in self.client_data:
                if _item_client_data:
                    _items.append(_item_client_data.to_dict())
            _dict['clientData'] = _items
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContactGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientData": [GroupClientData.from_dict(_item) for _item in obj["clientData"]] if obj.get("clientData") is not None else None,
            "etag": obj.get("etag"),
            "formattedName": obj.get("formattedName"),
            "groupType": obj.get("groupType"),
            "memberCount": obj.get("memberCount"),
            "memberResourceNames": obj.get("memberResourceNames"),
            "metadata": ContactGroupMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "name": obj.get("name"),
            "resourceName": obj.get("resourceName")
        })
        return _obj



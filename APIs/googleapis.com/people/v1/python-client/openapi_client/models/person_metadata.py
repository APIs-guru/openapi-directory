# coding: utf-8

"""
    People API

    Provides access to information about profiles and contacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.source import Source
from typing import Optional, Set
from typing_extensions import Self

class PersonMetadata(BaseModel):
    """
    The metadata about a person.
    """ # noqa: E501
    deleted: Optional[StrictBool] = Field(default=None, description="Output only. True if the person resource has been deleted. Populated only for `people.connections.list` and `otherContacts.list` sync requests.")
    linked_people_resource_names: Optional[List[StrictStr]] = Field(default=None, description="Output only. Resource names of people linked to this resource.", alias="linkedPeopleResourceNames")
    object_type: Optional[StrictStr] = Field(default=None, description="Output only. **DEPRECATED** (Please use `person.metadata.sources.profileMetadata.objectType` instead) The type of the person object.", alias="objectType")
    previous_resource_names: Optional[List[StrictStr]] = Field(default=None, description="Output only. Any former resource names this person has had. Populated only for `people.connections.list` requests that include a sync token. The resource name may change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or profile URL.", alias="previousResourceNames")
    sources: Optional[List[Source]] = Field(default=None, description="The sources of data for the person.")
    __properties: ClassVar[List[str]] = ["deleted", "linkedPeopleResourceNames", "objectType", "previousResourceNames", "sources"]

    @field_validator('object_type')
    def object_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OBJECT_TYPE_UNSPECIFIED', 'PERSON', 'PAGE']):
            raise ValueError("must be one of enum values ('OBJECT_TYPE_UNSPECIFIED', 'PERSON', 'PAGE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersonMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "deleted",
            "linked_people_resource_names",
            "object_type",
            "previous_resource_names",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sources (list)
        _items = []
        if self.sources:
            for _item_sources in self.sources:
                if _item_sources:
                    _items.append(_item_sources.to_dict())
            _dict['sources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersonMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deleted": obj.get("deleted"),
            "linkedPeopleResourceNames": obj.get("linkedPeopleResourceNames"),
            "objectType": obj.get("objectType"),
            "previousResourceNames": obj.get("previousResourceNames"),
            "sources": [Source.from_dict(_item) for _item in obj["sources"]] if obj.get("sources") is not None else None
        })
        return _obj



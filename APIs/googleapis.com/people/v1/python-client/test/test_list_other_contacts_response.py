# coding: utf-8

"""
    People API

    Provides access to information about profiles and contacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_other_contacts_response import ListOtherContactsResponse

class TestListOtherContactsResponse(unittest.TestCase):
    """ListOtherContactsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListOtherContactsResponse:
        """Test ListOtherContactsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListOtherContactsResponse`
        """
        model = ListOtherContactsResponse()
        if include_optional:
            return ListOtherContactsResponse(
                next_page_token = '',
                next_sync_token = '',
                other_contacts = [
                    openapi_client.models.person.Person(
                        addresses = [
                            openapi_client.models.address.Address(
                                city = '', 
                                country = '', 
                                country_code = '', 
                                extended_address = '', 
                                formatted_type = '', 
                                formatted_value = '', 
                                metadata = openapi_client.models.field_metadata.FieldMetadata(
                                    primary = True, 
                                    source = openapi_client.models.source.Source(
                                        etag = '', 
                                        id = '', 
                                        profile_metadata = openapi_client.models.profile_metadata.ProfileMetadata(
                                            object_type = 'OBJECT_TYPE_UNSPECIFIED', 
                                            user_types = [
                                                'USER_TYPE_UNKNOWN'
                                                ], ), 
                                        type = 'SOURCE_TYPE_UNSPECIFIED', 
                                        update_time = '', ), 
                                    source_primary = True, 
                                    verified = True, ), 
                                po_box = '', 
                                postal_code = '', 
                                region = '', 
                                street_address = '', 
                                type = '', )
                            ], 
                        age_range = 'AGE_RANGE_UNSPECIFIED', 
                        age_ranges = [
                            openapi_client.models.age_range_type.AgeRangeType(
                                age_range = 'AGE_RANGE_UNSPECIFIED', )
                            ], 
                        biographies = [
                            openapi_client.models.biography.Biography(
                                content_type = 'CONTENT_TYPE_UNSPECIFIED', 
                                value = '', )
                            ], 
                        birthdays = [
                            openapi_client.models.birthday.Birthday(
                                date = openapi_client.models.date.Date(
                                    day = 56, 
                                    month = 56, 
                                    year = 56, ), 
                                text = '', )
                            ], 
                        bragging_rights = [
                            openapi_client.models.bragging_rights.BraggingRights(
                                value = '', )
                            ], 
                        calendar_urls = [
                            openapi_client.models.calendar_url.CalendarUrl(
                                formatted_type = '', 
                                type = '', 
                                url = '', )
                            ], 
                        client_data = [
                            openapi_client.models.client_data.ClientData(
                                key = '', 
                                value = '', )
                            ], 
                        cover_photos = [
                            openapi_client.models.cover_photo.CoverPhoto(
                                url = '', )
                            ], 
                        email_addresses = [
                            openapi_client.models.email_address.EmailAddress(
                                display_name = '', 
                                formatted_type = '', 
                                type = '', 
                                value = '', )
                            ], 
                        etag = '', 
                        events = [
                            openapi_client.models.event.Event(
                                formatted_type = '', 
                                type = '', )
                            ], 
                        external_ids = [
                            openapi_client.models.external_id.ExternalId(
                                formatted_type = '', 
                                type = '', 
                                value = '', )
                            ], 
                        file_ases = [
                            openapi_client.models.file_as.FileAs(
                                value = '', )
                            ], 
                        genders = [
                            openapi_client.models.gender.Gender(
                                address_me_as = '', 
                                formatted_value = '', 
                                value = '', )
                            ], 
                        im_clients = [
                            openapi_client.models.im_client.ImClient(
                                formatted_protocol = '', 
                                formatted_type = '', 
                                protocol = '', 
                                type = '', 
                                username = '', )
                            ], 
                        interests = [
                            openapi_client.models.interest.Interest(
                                value = '', )
                            ], 
                        locales = [
                            openapi_client.models.locale.Locale(
                                value = '', )
                            ], 
                        locations = [
                            openapi_client.models.location.Location(
                                building_id = '', 
                                current = True, 
                                desk_code = '', 
                                floor = '', 
                                floor_section = '', 
                                type = '', 
                                value = '', )
                            ], 
                        memberships = [
                            openapi_client.models.membership.Membership(
                                contact_group_membership = openapi_client.models.contact_group_membership.ContactGroupMembership(
                                    contact_group_id = '', 
                                    contact_group_resource_name = '', ), 
                                domain_membership = openapi_client.models.domain_membership.DomainMembership(
                                    in_viewer_domain = True, ), )
                            ], 
                        metadata = openapi_client.models.person_metadata.PersonMetadata(
                            deleted = True, 
                            linked_people_resource_names = [
                                ''
                                ], 
                            object_type = 'OBJECT_TYPE_UNSPECIFIED', 
                            previous_resource_names = [
                                ''
                                ], 
                            sources = [
                                openapi_client.models.source.Source(
                                    etag = '', 
                                    id = '', 
                                    type = 'SOURCE_TYPE_UNSPECIFIED', 
                                    update_time = '', )
                                ], ), 
                        misc_keywords = [
                            openapi_client.models.misc_keyword.MiscKeyword(
                                formatted_type = '', 
                                type = 'TYPE_UNSPECIFIED', 
                                value = '', )
                            ], 
                        names = [
                            openapi_client.models.name.Name(
                                display_name = '', 
                                display_name_last_first = '', 
                                family_name = '', 
                                given_name = '', 
                                honorific_prefix = '', 
                                honorific_suffix = '', 
                                middle_name = '', 
                                phonetic_family_name = '', 
                                phonetic_full_name = '', 
                                phonetic_given_name = '', 
                                phonetic_honorific_prefix = '', 
                                phonetic_honorific_suffix = '', 
                                phonetic_middle_name = '', 
                                unstructured_name = '', )
                            ], 
                        nicknames = [
                            openapi_client.models.nickname.Nickname(
                                type = 'DEFAULT', 
                                value = '', )
                            ], 
                        occupations = [
                            openapi_client.models.occupation.Occupation(
                                value = '', )
                            ], 
                        organizations = [
                            openapi_client.models.organization.Organization(
                                cost_center = '', 
                                current = True, 
                                department = '', 
                                domain = '', 
                                end_date = openapi_client.models.date.Date(
                                    day = 56, 
                                    month = 56, 
                                    year = 56, ), 
                                formatted_type = '', 
                                full_time_equivalent_millipercent = 56, 
                                job_description = '', 
                                location = '', 
                                name = '', 
                                phonetic_name = '', 
                                start_date = , 
                                symbol = '', 
                                title = '', 
                                type = '', )
                            ], 
                        phone_numbers = [
                            openapi_client.models.phone_number.PhoneNumber(
                                canonical_form = '', 
                                formatted_type = '', 
                                type = '', 
                                value = '', )
                            ], 
                        photos = [
                            openapi_client.models.photo.Photo(
                                url = '', )
                            ], 
                        relations = [
                            openapi_client.models.relation.Relation(
                                formatted_type = '', 
                                person = '', 
                                type = '', )
                            ], 
                        relationship_interests = [
                            openapi_client.models.relationship_interest.RelationshipInterest(
                                formatted_value = '', 
                                value = '', )
                            ], 
                        relationship_statuses = [
                            openapi_client.models.relationship_status.RelationshipStatus(
                                formatted_value = '', 
                                value = '', )
                            ], 
                        residences = [
                            openapi_client.models.residence.Residence(
                                current = True, 
                                value = '', )
                            ], 
                        resource_name = '', 
                        sip_addresses = [
                            openapi_client.models.sip_address.SipAddress(
                                formatted_type = '', 
                                type = '', 
                                value = '', )
                            ], 
                        skills = [
                            openapi_client.models.skill.Skill(
                                value = '', )
                            ], 
                        taglines = [
                            openapi_client.models.tagline.Tagline(
                                value = '', )
                            ], 
                        urls = [
                            openapi_client.models.url.Url(
                                formatted_type = '', 
                                type = '', 
                                value = '', )
                            ], 
                        user_defined = [
                            openapi_client.models.user_defined.UserDefined(
                                key = '', 
                                value = '', )
                            ], )
                    ],
                total_size = 56
            )
        else:
            return ListOtherContactsResponse(
        )
        """

    def testListOtherContactsResponse(self):
        """Test ListOtherContactsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaEventMapping(BaseModel):
    """
    Event setting conditions to match an event.
    """ # noqa: E501
    event_name: Optional[StrictStr] = Field(default=None, description="Required. Name of the GA4 event. It must always be set. The max allowed display name length is 40 UTF-16 code units.", alias="eventName")
    max_event_count: Optional[StrictStr] = Field(default=None, description="The maximum number of times the event occurred. If not set, maximum event count won't be checked.", alias="maxEventCount")
    max_event_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The maximum revenue generated due to the event. Revenue currency will be defined at the property level. If not set, maximum event value won't be checked.", alias="maxEventValue")
    min_event_count: Optional[StrictStr] = Field(default=None, description="At least one of the following four min/max values must be set. The values set will be ANDed together to qualify an event. The minimum number of times the event occurred. If not set, minimum event count won't be checked.", alias="minEventCount")
    min_event_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The minimum revenue generated due to the event. Revenue currency will be defined at the property level. If not set, minimum event value won't be checked.", alias="minEventValue")
    __properties: ClassVar[List[str]] = ["eventName", "maxEventCount", "maxEventValue", "minEventCount", "minEventValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaEventMapping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaEventMapping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventName": obj.get("eventName"),
            "maxEventCount": obj.get("maxEventCount"),
            "maxEventValue": obj.get("maxEventValue"),
            "minEventCount": obj.get("minEventCount"),
            "minEventValue": obj.get("minEventValue")
        })
        return _obj



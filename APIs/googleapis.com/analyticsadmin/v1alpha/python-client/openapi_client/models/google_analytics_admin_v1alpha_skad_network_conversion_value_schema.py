# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_analytics_admin_v1alpha_postback_window import GoogleAnalyticsAdminV1alphaPostbackWindow
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaSKAdNetworkConversionValueSchema(BaseModel):
    """
    SKAdNetwork conversion value schema of an iOS stream.
    """ # noqa: E501
    apply_conversion_values: Optional[StrictBool] = Field(default=None, description="If enabled, the GA SDK will set conversion values using this schema definition, and schema will be exported to any Google Ads accounts linked to this property. If disabled, the GA SDK will not automatically set conversion values, and also the schema will not be exported to Ads.", alias="applyConversionValues")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the schema. This will be child of ONLY an iOS stream, and there can be at most one such child under an iOS stream. Format: properties/{property}/dataStreams/{dataStream}/sKAdNetworkConversionValueSchema")
    postback_window_one: Optional[GoogleAnalyticsAdminV1alphaPostbackWindow] = Field(default=None, alias="postbackWindowOne")
    postback_window_three: Optional[GoogleAnalyticsAdminV1alphaPostbackWindow] = Field(default=None, alias="postbackWindowThree")
    postback_window_two: Optional[GoogleAnalyticsAdminV1alphaPostbackWindow] = Field(default=None, alias="postbackWindowTwo")
    __properties: ClassVar[List[str]] = ["applyConversionValues", "name", "postbackWindowOne", "postbackWindowThree", "postbackWindowTwo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaSKAdNetworkConversionValueSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of postback_window_one
        if self.postback_window_one:
            _dict['postbackWindowOne'] = self.postback_window_one.to_dict()
        # override the default output from pydantic by calling `to_dict()` of postback_window_three
        if self.postback_window_three:
            _dict['postbackWindowThree'] = self.postback_window_three.to_dict()
        # override the default output from pydantic by calling `to_dict()` of postback_window_two
        if self.postback_window_two:
            _dict['postbackWindowTwo'] = self.postback_window_two.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaSKAdNetworkConversionValueSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applyConversionValues": obj.get("applyConversionValues"),
            "name": obj.get("name"),
            "postbackWindowOne": GoogleAnalyticsAdminV1alphaPostbackWindow.from_dict(obj["postbackWindowOne"]) if obj.get("postbackWindowOne") is not None else None,
            "postbackWindowThree": GoogleAnalyticsAdminV1alphaPostbackWindow.from_dict(obj["postbackWindowThree"]) if obj.get("postbackWindowThree") is not None else None,
            "postbackWindowTwo": GoogleAnalyticsAdminV1alphaPostbackWindow.from_dict(obj["postbackWindowTwo"]) if obj.get("postbackWindowTwo") is not None else None
        })
        return _obj



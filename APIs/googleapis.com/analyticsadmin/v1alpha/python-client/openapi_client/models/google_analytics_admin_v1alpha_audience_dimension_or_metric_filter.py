# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_analytics_admin_v1alpha_audience_dimension_or_metric_filter_between_filter import GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterBetweenFilter
from openapi_client.models.google_analytics_admin_v1alpha_audience_dimension_or_metric_filter_in_list_filter import GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter
from openapi_client.models.google_analytics_admin_v1alpha_audience_dimension_or_metric_filter_numeric_filter import GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterNumericFilter
from openapi_client.models.google_analytics_admin_v1alpha_audience_dimension_or_metric_filter_string_filter import GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterStringFilter
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter(BaseModel):
    """
    A specific filter for a single dimension or metric.
    """ # noqa: E501
    at_any_point_in_time: Optional[StrictBool] = Field(default=None, description="Optional. Indicates whether this filter needs dynamic evaluation or not. If set to true, users join the Audience if they ever met the condition (static evaluation). If unset or set to false, user evaluation for an Audience is dynamic; users are added to an Audience when they meet the conditions and then removed when they no longer meet them. This can only be set when Audience scope is ACROSS_ALL_SESSIONS.", alias="atAnyPointInTime")
    between_filter: Optional[GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterBetweenFilter] = Field(default=None, alias="betweenFilter")
    field_name: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The dimension name or metric name to filter. If the field name refers to a custom dimension or metric, a scope prefix will be added to the front of the custom dimensions or metric name. For more on scope prefixes or custom dimensions/metrics, reference the [Google Analytics Data API documentation] (https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema#custom_dimensions).", alias="fieldName")
    in_any_n_day_period: Optional[StrictInt] = Field(default=None, description="Optional. If set, specifies the time window for which to evaluate data in number of days. If not set, then audience data is evaluated against lifetime data (For example, infinite time window). For example, if set to 1 day, only the current day's data is evaluated. The reference point is the current day when at_any_point_in_time is unset or false. It can only be set when Audience scope is ACROSS_ALL_SESSIONS and cannot be greater than 60 days.", alias="inAnyNDayPeriod")
    in_list_filter: Optional[GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter] = Field(default=None, alias="inListFilter")
    numeric_filter: Optional[GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterNumericFilter] = Field(default=None, alias="numericFilter")
    string_filter: Optional[GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterStringFilter] = Field(default=None, alias="stringFilter")
    __properties: ClassVar[List[str]] = ["atAnyPointInTime", "betweenFilter", "fieldName", "inAnyNDayPeriod", "inListFilter", "numericFilter", "stringFilter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of between_filter
        if self.between_filter:
            _dict['betweenFilter'] = self.between_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_list_filter
        if self.in_list_filter:
            _dict['inListFilter'] = self.in_list_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of numeric_filter
        if self.numeric_filter:
            _dict['numericFilter'] = self.numeric_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of string_filter
        if self.string_filter:
            _dict['stringFilter'] = self.string_filter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "atAnyPointInTime": obj.get("atAnyPointInTime"),
            "betweenFilter": GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterBetweenFilter.from_dict(obj["betweenFilter"]) if obj.get("betweenFilter") is not None else None,
            "fieldName": obj.get("fieldName"),
            "inAnyNDayPeriod": obj.get("inAnyNDayPeriod"),
            "inListFilter": GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter.from_dict(obj["inListFilter"]) if obj.get("inListFilter") is not None else None,
            "numericFilter": GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterNumericFilter.from_dict(obj["numericFilter"]) if obj.get("numericFilter") is not None else None,
            "stringFilter": GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterStringFilter.from_dict(obj["stringFilter"]) if obj.get("stringFilter") is not None else None
        })
        return _obj



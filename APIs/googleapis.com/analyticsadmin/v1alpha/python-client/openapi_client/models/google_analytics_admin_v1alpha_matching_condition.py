# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaMatchingCondition(BaseModel):
    """
    Defines a condition for when an Event Edit or Event Creation rule applies to an event.
    """ # noqa: E501
    comparison_type: Optional[StrictStr] = Field(default=None, description="Required. The type of comparison to be applied to the value.", alias="comparisonType")
    var_field: Optional[StrictStr] = Field(default=None, description="Required. The name of the field that is compared against for the condition. If 'event_name' is specified this condition will apply to the name of the event. Otherwise the condition will apply to a parameter with the specified name. This value cannot contain spaces.", alias="field")
    negated: Optional[StrictBool] = Field(default=None, description="Whether or not the result of the comparison should be negated. For example, if `negated` is true, then 'equals' comparisons would function as 'not equals'.")
    value: Optional[StrictStr] = Field(default=None, description="Required. The value being compared against for this condition. The runtime implementation may perform type coercion of this value to evaluate this condition based on the type of the parameter value.")
    __properties: ClassVar[List[str]] = ["comparisonType", "field", "negated", "value"]

    @field_validator('comparison_type')
    def comparison_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPARISON_TYPE_UNSPECIFIED', 'EQUALS', 'EQUALS_CASE_INSENSITIVE', 'CONTAINS', 'CONTAINS_CASE_INSENSITIVE', 'STARTS_WITH', 'STARTS_WITH_CASE_INSENSITIVE', 'ENDS_WITH', 'ENDS_WITH_CASE_INSENSITIVE', 'GREATER_THAN', 'GREATER_THAN_OR_EQUAL', 'LESS_THAN', 'LESS_THAN_OR_EQUAL', 'REGULAR_EXPRESSION', 'REGULAR_EXPRESSION_CASE_INSENSITIVE']):
            raise ValueError("must be one of enum values ('COMPARISON_TYPE_UNSPECIFIED', 'EQUALS', 'EQUALS_CASE_INSENSITIVE', 'CONTAINS', 'CONTAINS_CASE_INSENSITIVE', 'STARTS_WITH', 'STARTS_WITH_CASE_INSENSITIVE', 'ENDS_WITH', 'ENDS_WITH_CASE_INSENSITIVE', 'GREATER_THAN', 'GREATER_THAN_OR_EQUAL', 'LESS_THAN', 'LESS_THAN_OR_EQUAL', 'REGULAR_EXPRESSION', 'REGULAR_EXPRESSION_CASE_INSENSITIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaMatchingCondition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaMatchingCondition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comparisonType": obj.get("comparisonType"),
            "field": obj.get("field"),
            "negated": obj.get("negated"),
            "value": obj.get("value")
        })
        return _obj



# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_analytics_admin_v1alpha_expanded_data_set_filter_expression import GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaExpandedDataSet(BaseModel):
    """
    A resource message representing a GA4 ExpandedDataSet.
    """ # noqa: E501
    data_collection_start_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when expanded data set began (or will begin) collecing data.", alias="dataCollectionStartTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. The description of the ExpandedDataSet. Max 50 chars.")
    dimension_filter_expression: Optional[GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression] = Field(default=None, alias="dimensionFilterExpression")
    dimension_names: Optional[List[StrictStr]] = Field(default=None, description="Immutable. The list of dimensions included in the ExpandedDataSet. See the [API Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema#dimensions) for the list of dimension names.", alias="dimensionNames")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the ExpandedDataSet. Max 200 chars.", alias="displayName")
    metric_names: Optional[List[StrictStr]] = Field(default=None, description="Immutable. The list of metrics included in the ExpandedDataSet. See the [API Metrics](https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema#metrics) for the list of dimension names.", alias="metricNames")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name for this ExpandedDataSet resource. Format: properties/{property_id}/expandedDataSets/{expanded_data_set}")
    __properties: ClassVar[List[str]] = ["dataCollectionStartTime", "description", "dimensionFilterExpression", "dimensionNames", "displayName", "metricNames", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaExpandedDataSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "data_collection_start_time",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dimension_filter_expression
        if self.dimension_filter_expression:
            _dict['dimensionFilterExpression'] = self.dimension_filter_expression.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaExpandedDataSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataCollectionStartTime": obj.get("dataCollectionStartTime"),
            "description": obj.get("description"),
            "dimensionFilterExpression": GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression.from_dict(obj["dimensionFilterExpression"]) if obj.get("dimensionFilterExpression") is not None else None,
            "dimensionNames": obj.get("dimensionNames"),
            "displayName": obj.get("displayName"),
            "metricNames": obj.get("metricNames"),
            "name": obj.get("name")
        })
        return _obj



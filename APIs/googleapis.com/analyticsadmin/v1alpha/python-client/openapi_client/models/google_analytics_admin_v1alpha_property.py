# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaProperty(BaseModel):
    """
    A resource message representing a Google Analytics GA4 property.
    """ # noqa: E501
    account: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the parent account Format: accounts/{account_id} Example: \"accounts/123\"")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the entity was originally created.", alias="createTime")
    currency_code: Optional[StrictStr] = Field(default=None, description="The currency type used in reports involving monetary values. Format: https://en.wikipedia.org/wiki/ISO_4217 Examples: \"USD\", \"EUR\", \"JPY\"", alias="currencyCode")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. If set, the time at which this property was trashed. If not set, then this property is not currently in the trash can.", alias="deleteTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. Human-readable display name for this property. The max allowed display name length is 100 UTF-16 code units.", alias="displayName")
    expire_time: Optional[StrictStr] = Field(default=None, description="Output only. If set, the time at which this trashed property will be permanently deleted. If not set, then this property is not currently in the trash can and is not slated to be deleted.", alias="expireTime")
    industry_category: Optional[StrictStr] = Field(default=None, description="Industry associated with this property Example: AUTOMOTIVE, FOOD_AND_DRINK", alias="industryCategory")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of this property. Format: properties/{property_id} Example: \"properties/1000\"")
    parent: Optional[StrictStr] = Field(default=None, description="Immutable. Resource name of this property's logical parent. Note: The Property-Moving UI can be used to change the parent. Format: accounts/{account}, properties/{property} Example: \"accounts/100\", \"properties/101\"")
    property_type: Optional[StrictStr] = Field(default=None, description="Immutable. The property type for this Property resource. When creating a property, if the type is \"PROPERTY_TYPE_UNSPECIFIED\", then \"ORDINARY_PROPERTY\" will be implied.", alias="propertyType")
    service_level: Optional[StrictStr] = Field(default=None, description="Output only. The Google Analytics service level that applies to this property.", alias="serviceLevel")
    time_zone: Optional[StrictStr] = Field(default=None, description="Required. Reporting Time Zone, used as the day boundary for reports, regardless of where the data originates. If the time zone honors DST, Analytics will automatically adjust for the changes. NOTE: Changing the time zone only affects data going forward, and is not applied retroactively. Format: https://www.iana.org/time-zones Example: \"America/Los_Angeles\"", alias="timeZone")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when entity payload fields were last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["account", "createTime", "currencyCode", "deleteTime", "displayName", "expireTime", "industryCategory", "name", "parent", "propertyType", "serviceLevel", "timeZone", "updateTime"]

    @field_validator('industry_category')
    def industry_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INDUSTRY_CATEGORY_UNSPECIFIED', 'AUTOMOTIVE', 'BUSINESS_AND_INDUSTRIAL_MARKETS', 'FINANCE', 'HEALTHCARE', 'TECHNOLOGY', 'TRAVEL', 'OTHER', 'ARTS_AND_ENTERTAINMENT', 'BEAUTY_AND_FITNESS', 'BOOKS_AND_LITERATURE', 'FOOD_AND_DRINK', 'GAMES', 'HOBBIES_AND_LEISURE', 'HOME_AND_GARDEN', 'INTERNET_AND_TELECOM', 'LAW_AND_GOVERNMENT', 'NEWS', 'ONLINE_COMMUNITIES', 'PEOPLE_AND_SOCIETY', 'PETS_AND_ANIMALS', 'REAL_ESTATE', 'REFERENCE', 'SCIENCE', 'SPORTS', 'JOBS_AND_EDUCATION', 'SHOPPING']):
            raise ValueError("must be one of enum values ('INDUSTRY_CATEGORY_UNSPECIFIED', 'AUTOMOTIVE', 'BUSINESS_AND_INDUSTRIAL_MARKETS', 'FINANCE', 'HEALTHCARE', 'TECHNOLOGY', 'TRAVEL', 'OTHER', 'ARTS_AND_ENTERTAINMENT', 'BEAUTY_AND_FITNESS', 'BOOKS_AND_LITERATURE', 'FOOD_AND_DRINK', 'GAMES', 'HOBBIES_AND_LEISURE', 'HOME_AND_GARDEN', 'INTERNET_AND_TELECOM', 'LAW_AND_GOVERNMENT', 'NEWS', 'ONLINE_COMMUNITIES', 'PEOPLE_AND_SOCIETY', 'PETS_AND_ANIMALS', 'REAL_ESTATE', 'REFERENCE', 'SCIENCE', 'SPORTS', 'JOBS_AND_EDUCATION', 'SHOPPING')")
        return value

    @field_validator('property_type')
    def property_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROPERTY_TYPE_UNSPECIFIED', 'PROPERTY_TYPE_ORDINARY', 'PROPERTY_TYPE_SUBPROPERTY', 'PROPERTY_TYPE_ROLLUP']):
            raise ValueError("must be one of enum values ('PROPERTY_TYPE_UNSPECIFIED', 'PROPERTY_TYPE_ORDINARY', 'PROPERTY_TYPE_SUBPROPERTY', 'PROPERTY_TYPE_ROLLUP')")
        return value

    @field_validator('service_level')
    def service_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SERVICE_LEVEL_UNSPECIFIED', 'GOOGLE_ANALYTICS_STANDARD', 'GOOGLE_ANALYTICS_360']):
            raise ValueError("must be one of enum values ('SERVICE_LEVEL_UNSPECIFIED', 'GOOGLE_ANALYTICS_STANDARD', 'GOOGLE_ANALYTICS_360')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaProperty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "delete_time",
            "expire_time",
            "name",
            "service_level",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaProperty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": obj.get("account"),
            "createTime": obj.get("createTime"),
            "currencyCode": obj.get("currencyCode"),
            "deleteTime": obj.get("deleteTime"),
            "displayName": obj.get("displayName"),
            "expireTime": obj.get("expireTime"),
            "industryCategory": obj.get("industryCategory"),
            "name": obj.get("name"),
            "parent": obj.get("parent"),
            "propertyType": obj.get("propertyType"),
            "serviceLevel": obj.get("serviceLevel"),
            "timeZone": obj.get("timeZone"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



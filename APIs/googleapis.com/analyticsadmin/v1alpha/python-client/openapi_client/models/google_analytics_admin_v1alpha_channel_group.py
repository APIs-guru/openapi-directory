# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_analytics_admin_v1alpha_grouping_rule import GoogleAnalyticsAdminV1alphaGroupingRule
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaChannelGroup(BaseModel):
    """
    A resource message representing a Channel Group.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The description of the Channel Group. Max length of 256 characters.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the Channel Group. Max length of 80 characters.", alias="displayName")
    grouping_rule: Optional[List[GoogleAnalyticsAdminV1alphaGroupingRule]] = Field(default=None, description="Required. The grouping rules of channels. Maximum number of rules is 50.", alias="groupingRule")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name for this Channel Group resource. Format: properties/{property}/channelGroups/{channel_group}")
    system_defined: Optional[StrictBool] = Field(default=None, description="Output only. If true, then this channel group is the Default Channel Group predefined by Google Analytics. Display name and grouping rules cannot be updated for this channel group.", alias="systemDefined")
    __properties: ClassVar[List[str]] = ["description", "displayName", "groupingRule", "name", "systemDefined"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaChannelGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "system_defined",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in grouping_rule (list)
        _items = []
        if self.grouping_rule:
            for _item_grouping_rule in self.grouping_rule:
                if _item_grouping_rule:
                    _items.append(_item_grouping_rule.to_dict())
            _dict['groupingRule'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaChannelGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "groupingRule": [GoogleAnalyticsAdminV1alphaGroupingRule.from_dict(_item) for _item in obj["groupingRule"]] if obj.get("groupingRule") is not None else None,
            "name": obj.get("name"),
            "systemDefined": obj.get("systemDefined")
        })
        return _obj



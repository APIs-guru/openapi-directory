# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaSearchAds360Link(BaseModel):
    """
    A link between a GA4 property and a Search Ads 360 entity.
    """ # noqa: E501
    ads_personalization_enabled: Optional[StrictBool] = Field(default=None, description="Enables personalized advertising features with this integration. If this field is not set on create, it will be defaulted to true.", alias="adsPersonalizationEnabled")
    advertiser_display_name: Optional[StrictStr] = Field(default=None, description="Output only. The display name of the Search Ads 360 Advertiser. Allows users to easily identify the linked resource.", alias="advertiserDisplayName")
    advertiser_id: Optional[StrictStr] = Field(default=None, description="Immutable. This field represents the Advertiser ID of the Search Ads 360 Advertiser. that has been linked.", alias="advertiserId")
    campaign_data_sharing_enabled: Optional[StrictBool] = Field(default=None, description="Immutable. Enables the import of campaign data from Search Ads 360 into the GA4 property. After link creation, this can only be updated from the Search Ads 360 product. If this field is not set on create, it will be defaulted to true.", alias="campaignDataSharingEnabled")
    cost_data_sharing_enabled: Optional[StrictBool] = Field(default=None, description="Immutable. Enables the import of cost data from Search Ads 360 to the GA4 property. This can only be enabled if campaign_data_sharing_enabled is enabled. After link creation, this can only be updated from the Search Ads 360 product. If this field is not set on create, it will be defaulted to true.", alias="costDataSharingEnabled")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name for this SearchAds360Link resource. Format: properties/{propertyId}/searchAds360Links/{linkId} Note: linkId is not the Search Ads 360 advertiser ID")
    site_stats_sharing_enabled: Optional[StrictBool] = Field(default=None, description="Enables export of site stats with this integration. If this field is not set on create, it will be defaulted to true.", alias="siteStatsSharingEnabled")
    __properties: ClassVar[List[str]] = ["adsPersonalizationEnabled", "advertiserDisplayName", "advertiserId", "campaignDataSharingEnabled", "costDataSharingEnabled", "name", "siteStatsSharingEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaSearchAds360Link from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "advertiser_display_name",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaSearchAds360Link from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adsPersonalizationEnabled": obj.get("adsPersonalizationEnabled"),
            "advertiserDisplayName": obj.get("advertiserDisplayName"),
            "advertiserId": obj.get("advertiserId"),
            "campaignDataSharingEnabled": obj.get("campaignDataSharingEnabled"),
            "costDataSharingEnabled": obj.get("costDataSharingEnabled"),
            "name": obj.get("name"),
            "siteStatsSharingEnabled": obj.get("siteStatsSharingEnabled")
        })
        return _obj



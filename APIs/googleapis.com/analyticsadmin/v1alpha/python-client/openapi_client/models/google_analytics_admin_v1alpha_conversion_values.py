# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_analytics_admin_v1alpha_event_mapping import GoogleAnalyticsAdminV1alphaEventMapping
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaConversionValues(BaseModel):
    """
    Conversion value settings for a postback window for SKAdNetwork conversion value schema.
    """ # noqa: E501
    coarse_value: Optional[StrictStr] = Field(default=None, description="Required. A coarse grained conversion value. This value is not guaranteed to be unique.", alias="coarseValue")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name of the SKAdNetwork conversion value. The max allowed display name length is 50 UTF-16 code units.", alias="displayName")
    event_mappings: Optional[List[GoogleAnalyticsAdminV1alphaEventMapping]] = Field(default=None, description="Event conditions that must be met for this Conversion Value to be achieved. The conditions in this list are ANDed together. It must have minimum of 1 entry and maximum of 3 entries, if the postback window is enabled.", alias="eventMappings")
    fine_value: Optional[StrictInt] = Field(default=None, description="The fine-grained conversion value. This is applicable only to the first postback window. Its valid values are [0,63], both inclusive. It must be set for postback window 1, and must not be set for postback window 2 & 3. This value is not guaranteed to be unique. If the configuration for the first postback window is re-used for second or third postback windows this field has no effect.", alias="fineValue")
    lock_enabled: Optional[StrictBool] = Field(default=None, description="If true, the SDK should lock to this conversion value for the current postback window.", alias="lockEnabled")
    __properties: ClassVar[List[str]] = ["coarseValue", "displayName", "eventMappings", "fineValue", "lockEnabled"]

    @field_validator('coarse_value')
    def coarse_value_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COARSE_VALUE_UNSPECIFIED', 'COARSE_VALUE_LOW', 'COARSE_VALUE_MEDIUM', 'COARSE_VALUE_HIGH']):
            raise ValueError("must be one of enum values ('COARSE_VALUE_UNSPECIFIED', 'COARSE_VALUE_LOW', 'COARSE_VALUE_MEDIUM', 'COARSE_VALUE_HIGH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaConversionValues from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in event_mappings (list)
        _items = []
        if self.event_mappings:
            for _item_event_mappings in self.event_mappings:
                if _item_event_mappings:
                    _items.append(_item_event_mappings.to_dict())
            _dict['eventMappings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaConversionValues from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coarseValue": obj.get("coarseValue"),
            "displayName": obj.get("displayName"),
            "eventMappings": [GoogleAnalyticsAdminV1alphaEventMapping.from_dict(_item) for _item in obj["eventMappings"]] if obj.get("eventMappings") is not None else None,
            "fineValue": obj.get("fineValue"),
            "lockEnabled": obj.get("lockEnabled")
        })
        return _obj



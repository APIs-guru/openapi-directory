# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_analytics_admin_v1alpha_access_quota_status import GoogleAnalyticsAdminV1alphaAccessQuotaStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaAccessQuota(BaseModel):
    """
    Current state of all quotas for this Analytics property. If any quota for a property is exhausted, all requests to that property will return Resource Exhausted errors.
    """ # noqa: E501
    concurrent_requests: Optional[GoogleAnalyticsAdminV1alphaAccessQuotaStatus] = Field(default=None, alias="concurrentRequests")
    server_errors_per_project_per_hour: Optional[GoogleAnalyticsAdminV1alphaAccessQuotaStatus] = Field(default=None, alias="serverErrorsPerProjectPerHour")
    tokens_per_day: Optional[GoogleAnalyticsAdminV1alphaAccessQuotaStatus] = Field(default=None, alias="tokensPerDay")
    tokens_per_hour: Optional[GoogleAnalyticsAdminV1alphaAccessQuotaStatus] = Field(default=None, alias="tokensPerHour")
    tokens_per_project_per_hour: Optional[GoogleAnalyticsAdminV1alphaAccessQuotaStatus] = Field(default=None, alias="tokensPerProjectPerHour")
    __properties: ClassVar[List[str]] = ["concurrentRequests", "serverErrorsPerProjectPerHour", "tokensPerDay", "tokensPerHour", "tokensPerProjectPerHour"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaAccessQuota from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of concurrent_requests
        if self.concurrent_requests:
            _dict['concurrentRequests'] = self.concurrent_requests.to_dict()
        # override the default output from pydantic by calling `to_dict()` of server_errors_per_project_per_hour
        if self.server_errors_per_project_per_hour:
            _dict['serverErrorsPerProjectPerHour'] = self.server_errors_per_project_per_hour.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tokens_per_day
        if self.tokens_per_day:
            _dict['tokensPerDay'] = self.tokens_per_day.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tokens_per_hour
        if self.tokens_per_hour:
            _dict['tokensPerHour'] = self.tokens_per_hour.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tokens_per_project_per_hour
        if self.tokens_per_project_per_hour:
            _dict['tokensPerProjectPerHour'] = self.tokens_per_project_per_hour.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaAccessQuota from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "concurrentRequests": GoogleAnalyticsAdminV1alphaAccessQuotaStatus.from_dict(obj["concurrentRequests"]) if obj.get("concurrentRequests") is not None else None,
            "serverErrorsPerProjectPerHour": GoogleAnalyticsAdminV1alphaAccessQuotaStatus.from_dict(obj["serverErrorsPerProjectPerHour"]) if obj.get("serverErrorsPerProjectPerHour") is not None else None,
            "tokensPerDay": GoogleAnalyticsAdminV1alphaAccessQuotaStatus.from_dict(obj["tokensPerDay"]) if obj.get("tokensPerDay") is not None else None,
            "tokensPerHour": GoogleAnalyticsAdminV1alphaAccessQuotaStatus.from_dict(obj["tokensPerHour"]) if obj.get("tokensPerHour") is not None else None,
            "tokensPerProjectPerHour": GoogleAnalyticsAdminV1alphaAccessQuotaStatus.from_dict(obj["tokensPerProjectPerHour"]) if obj.get("tokensPerProjectPerHour") is not None else None
        })
        return _obj



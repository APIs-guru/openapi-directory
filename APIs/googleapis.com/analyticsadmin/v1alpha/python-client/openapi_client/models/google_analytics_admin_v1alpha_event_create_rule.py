# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_analytics_admin_v1alpha_matching_condition import GoogleAnalyticsAdminV1alphaMatchingCondition
from openapi_client.models.google_analytics_admin_v1alpha_parameter_mutation import GoogleAnalyticsAdminV1alphaParameterMutation
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaEventCreateRule(BaseModel):
    """
    An Event Create Rule defines conditions that will trigger the creation of an entirely new event based upon matched criteria of a source event. Additional mutations of the parameters from the source event can be defined. Unlike Event Edit rules, Event Creation Rules have no defined order. They will all be run independently. Event Edit and Event Create rules can't be used to modify an event created from an Event Create rule.
    """ # noqa: E501
    destination_event: Optional[StrictStr] = Field(default=None, description="Required. The name of the new event to be created. This value must: * be less than 40 characters * consist only of letters, digits or _ (underscores) * start with a letter", alias="destinationEvent")
    event_conditions: Optional[List[GoogleAnalyticsAdminV1alphaMatchingCondition]] = Field(default=None, description="Required. Must have at least one condition, and can have up to 10 max. Conditions on the source event must match for this rule to be applied.", alias="eventConditions")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name for this EventCreateRule resource. Format: properties/{property}/dataStreams/{data_stream}/eventCreateRules/{event_create_rule}")
    parameter_mutations: Optional[List[GoogleAnalyticsAdminV1alphaParameterMutation]] = Field(default=None, description="Parameter mutations define parameter behavior on the new event, and are applied in order. A maximum of 20 mutations can be applied.", alias="parameterMutations")
    source_copy_parameters: Optional[StrictBool] = Field(default=None, description="If true, the source parameters are copied to the new event. If false, or unset, all non-internal parameters are not copied from the source event. Parameter mutations are applied after the parameters have been copied.", alias="sourceCopyParameters")
    __properties: ClassVar[List[str]] = ["destinationEvent", "eventConditions", "name", "parameterMutations", "sourceCopyParameters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaEventCreateRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in event_conditions (list)
        _items = []
        if self.event_conditions:
            for _item_event_conditions in self.event_conditions:
                if _item_event_conditions:
                    _items.append(_item_event_conditions.to_dict())
            _dict['eventConditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parameter_mutations (list)
        _items = []
        if self.parameter_mutations:
            for _item_parameter_mutations in self.parameter_mutations:
                if _item_parameter_mutations:
                    _items.append(_item_parameter_mutations.to_dict())
            _dict['parameterMutations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaEventCreateRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destinationEvent": obj.get("destinationEvent"),
            "eventConditions": [GoogleAnalyticsAdminV1alphaMatchingCondition.from_dict(_item) for _item in obj["eventConditions"]] if obj.get("eventConditions") is not None else None,
            "name": obj.get("name"),
            "parameterMutations": [GoogleAnalyticsAdminV1alphaParameterMutation.from_dict(_item) for _item in obj["parameterMutations"]] if obj.get("parameterMutations") is not None else None,
            "sourceCopyParameters": obj.get("sourceCopyParameters")
        })
        return _obj



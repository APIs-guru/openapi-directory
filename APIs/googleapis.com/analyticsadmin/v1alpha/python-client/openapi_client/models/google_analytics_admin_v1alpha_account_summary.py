# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_analytics_admin_v1alpha_property_summary import GoogleAnalyticsAdminV1alphaPropertySummary
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaAccountSummary(BaseModel):
    """
    A virtual resource representing an overview of an account and all its child GA4 properties.
    """ # noqa: E501
    account: Optional[StrictStr] = Field(default=None, description="Resource name of account referred to by this account summary Format: accounts/{account_id} Example: \"accounts/1000\"")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name for the account referred to in this account summary.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="Resource name for this account summary. Format: accountSummaries/{account_id} Example: \"accountSummaries/1000\"")
    property_summaries: Optional[List[GoogleAnalyticsAdminV1alphaPropertySummary]] = Field(default=None, description="List of summaries for child accounts of this account.", alias="propertySummaries")
    __properties: ClassVar[List[str]] = ["account", "displayName", "name", "propertySummaries"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaAccountSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in property_summaries (list)
        _items = []
        if self.property_summaries:
            for _item_property_summaries in self.property_summaries:
                if _item_property_summaries:
                    _items.append(_item_property_summaries.to_dict())
            _dict['propertySummaries'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaAccountSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": obj.get("account"),
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "propertySummaries": [GoogleAnalyticsAdminV1alphaPropertySummary.from_dict(_item) for _item in obj["propertySummaries"]] if obj.get("propertySummaries") is not None else None
        })
        return _obj



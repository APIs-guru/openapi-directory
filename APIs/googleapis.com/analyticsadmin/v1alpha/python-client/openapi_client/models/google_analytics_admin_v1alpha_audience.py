# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_analytics_admin_v1alpha_audience_event_trigger import GoogleAnalyticsAdminV1alphaAudienceEventTrigger
from openapi_client.models.google_analytics_admin_v1alpha_audience_filter_clause import GoogleAnalyticsAdminV1alphaAudienceFilterClause
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaAudience(BaseModel):
    """
    A resource message representing a GA4 Audience.
    """ # noqa: E501
    ads_personalization_enabled: Optional[StrictBool] = Field(default=None, description="Output only. It is automatically set by GA to false if this is an NPA Audience and is excluded from ads personalization.", alias="adsPersonalizationEnabled")
    description: Optional[StrictStr] = Field(default=None, description="Required. The description of the Audience.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the Audience.", alias="displayName")
    event_trigger: Optional[GoogleAnalyticsAdminV1alphaAudienceEventTrigger] = Field(default=None, alias="eventTrigger")
    exclusion_duration_mode: Optional[StrictStr] = Field(default=None, description="Immutable. Specifies how long an exclusion lasts for users that meet the exclusion filter. It is applied to all EXCLUDE filter clauses and is ignored when there is no EXCLUDE filter clause in the Audience.", alias="exclusionDurationMode")
    filter_clauses: Optional[List[GoogleAnalyticsAdminV1alphaAudienceFilterClause]] = Field(default=None, description="Required. Immutable. Unordered list. Filter clauses that define the Audience. All clauses will be ANDâ€™ed together.", alias="filterClauses")
    membership_duration_days: Optional[StrictInt] = Field(default=None, description="Required. Immutable. The duration a user should stay in an Audience. It cannot be set to more than 540 days.", alias="membershipDurationDays")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name for this Audience resource. Format: properties/{propertyId}/audiences/{audienceId}")
    __properties: ClassVar[List[str]] = ["adsPersonalizationEnabled", "description", "displayName", "eventTrigger", "exclusionDurationMode", "filterClauses", "membershipDurationDays", "name"]

    @field_validator('exclusion_duration_mode')
    def exclusion_duration_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUDIENCE_EXCLUSION_DURATION_MODE_UNSPECIFIED', 'EXCLUDE_TEMPORARILY', 'EXCLUDE_PERMANENTLY']):
            raise ValueError("must be one of enum values ('AUDIENCE_EXCLUSION_DURATION_MODE_UNSPECIFIED', 'EXCLUDE_TEMPORARILY', 'EXCLUDE_PERMANENTLY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaAudience from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "ads_personalization_enabled",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of event_trigger
        if self.event_trigger:
            _dict['eventTrigger'] = self.event_trigger.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in filter_clauses (list)
        _items = []
        if self.filter_clauses:
            for _item_filter_clauses in self.filter_clauses:
                if _item_filter_clauses:
                    _items.append(_item_filter_clauses.to_dict())
            _dict['filterClauses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaAudience from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adsPersonalizationEnabled": obj.get("adsPersonalizationEnabled"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "eventTrigger": GoogleAnalyticsAdminV1alphaAudienceEventTrigger.from_dict(obj["eventTrigger"]) if obj.get("eventTrigger") is not None else None,
            "exclusionDurationMode": obj.get("exclusionDurationMode"),
            "filterClauses": [GoogleAnalyticsAdminV1alphaAudienceFilterClause.from_dict(_item) for _item in obj["filterClauses"]] if obj.get("filterClauses") is not None else None,
            "membershipDurationDays": obj.get("membershipDurationDays"),
            "name": obj.get("name")
        })
        return _obj



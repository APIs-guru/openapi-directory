# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_analytics_admin_v1alpha_link_proposal_status_details import GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal(BaseModel):
    """
    A proposal for a link between a GA4 property and a Display & Video 360 advertiser. A proposal is converted to a DisplayVideo360AdvertiserLink once approved. Google Analytics admins approve inbound proposals while Display & Video 360 admins approve outbound proposals.
    """ # noqa: E501
    ads_personalization_enabled: Optional[StrictBool] = Field(default=None, description="Immutable. Enables personalized advertising features with this integration. If this field is not set on create, it will be defaulted to true.", alias="adsPersonalizationEnabled")
    advertiser_display_name: Optional[StrictStr] = Field(default=None, description="Output only. The display name of the Display & Video Advertiser. Only populated for proposals that originated from Display & Video 360.", alias="advertiserDisplayName")
    advertiser_id: Optional[StrictStr] = Field(default=None, description="Immutable. The Display & Video 360 Advertiser's advertiser ID.", alias="advertiserId")
    campaign_data_sharing_enabled: Optional[StrictBool] = Field(default=None, description="Immutable. Enables the import of campaign data from Display & Video 360. If this field is not set on create, it will be defaulted to true.", alias="campaignDataSharingEnabled")
    cost_data_sharing_enabled: Optional[StrictBool] = Field(default=None, description="Immutable. Enables the import of cost data from Display & Video 360. This can only be enabled if campaign_data_sharing_enabled is enabled. If this field is not set on create, it will be defaulted to true.", alias="costDataSharingEnabled")
    link_proposal_status_details: Optional[GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails] = Field(default=None, alias="linkProposalStatusDetails")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name for this DisplayVideo360AdvertiserLinkProposal resource. Format: properties/{propertyId}/displayVideo360AdvertiserLinkProposals/{proposalId} Note: proposalId is not the Display & Video 360 Advertiser ID")
    validation_email: Optional[StrictStr] = Field(default=None, description="Input only. On a proposal being sent to Display & Video 360, this field must be set to the email address of an admin on the target advertiser. This is used to verify that the Google Analytics admin is aware of at least one admin on the Display & Video 360 Advertiser. This does not restrict approval of the proposal to a single user. Any admin on the Display & Video 360 Advertiser may approve the proposal.", alias="validationEmail")
    __properties: ClassVar[List[str]] = ["adsPersonalizationEnabled", "advertiserDisplayName", "advertiserId", "campaignDataSharingEnabled", "costDataSharingEnabled", "linkProposalStatusDetails", "name", "validationEmail"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "advertiser_display_name",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of link_proposal_status_details
        if self.link_proposal_status_details:
            _dict['linkProposalStatusDetails'] = self.link_proposal_status_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adsPersonalizationEnabled": obj.get("adsPersonalizationEnabled"),
            "advertiserDisplayName": obj.get("advertiserDisplayName"),
            "advertiserId": obj.get("advertiserId"),
            "campaignDataSharingEnabled": obj.get("campaignDataSharingEnabled"),
            "costDataSharingEnabled": obj.get("costDataSharingEnabled"),
            "linkProposalStatusDetails": GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.from_dict(obj["linkProposalStatusDetails"]) if obj.get("linkProposalStatusDetails") is not None else None,
            "name": obj.get("name"),
            "validationEmail": obj.get("validationEmail")
        })
        return _obj



# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_analytics_admin_v1alpha_audience_sequence_filter import GoogleAnalyticsAdminV1alphaAudienceSequenceFilter
from openapi_client.models.google_analytics_admin_v1alpha_audience_simple_filter import GoogleAnalyticsAdminV1alphaAudienceSimpleFilter
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaAudienceFilterClause(BaseModel):
    """
    A clause for defining either a simple or sequence filter. A filter can be inclusive (For example, users satisfying the filter clause are included in the Audience) or exclusive (For example, users satisfying the filter clause are excluded from the Audience).
    """ # noqa: E501
    clause_type: Optional[StrictStr] = Field(default=None, description="Required. Specifies whether this is an include or exclude filter clause.", alias="clauseType")
    sequence_filter: Optional[GoogleAnalyticsAdminV1alphaAudienceSequenceFilter] = Field(default=None, alias="sequenceFilter")
    simple_filter: Optional[GoogleAnalyticsAdminV1alphaAudienceSimpleFilter] = Field(default=None, alias="simpleFilter")
    __properties: ClassVar[List[str]] = ["clauseType", "sequenceFilter", "simpleFilter"]

    @field_validator('clause_type')
    def clause_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUDIENCE_CLAUSE_TYPE_UNSPECIFIED', 'INCLUDE', 'EXCLUDE']):
            raise ValueError("must be one of enum values ('AUDIENCE_CLAUSE_TYPE_UNSPECIFIED', 'INCLUDE', 'EXCLUDE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaAudienceFilterClause from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sequence_filter
        if self.sequence_filter:
            _dict['sequenceFilter'] = self.sequence_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of simple_filter
        if self.simple_filter:
            _dict['simpleFilter'] = self.simple_filter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaAudienceFilterClause from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clauseType": obj.get("clauseType"),
            "sequenceFilter": GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.from_dict(obj["sequenceFilter"]) if obj.get("sequenceFilter") is not None else None,
            "simpleFilter": GoogleAnalyticsAdminV1alphaAudienceSimpleFilter.from_dict(obj["simpleFilter"]) if obj.get("simpleFilter") is not None else None
        })
        return _obj



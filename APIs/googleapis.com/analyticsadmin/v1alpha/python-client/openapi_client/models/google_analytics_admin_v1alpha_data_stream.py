# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_analytics_admin_v1alpha_data_stream_android_app_stream_data import GoogleAnalyticsAdminV1alphaDataStreamAndroidAppStreamData
from openapi_client.models.google_analytics_admin_v1alpha_data_stream_ios_app_stream_data import GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData
from openapi_client.models.google_analytics_admin_v1alpha_data_stream_web_stream_data import GoogleAnalyticsAdminV1alphaDataStreamWebStreamData
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaDataStream(BaseModel):
    """
    A resource message representing a data stream.
    """ # noqa: E501
    android_app_stream_data: Optional[GoogleAnalyticsAdminV1alphaDataStreamAndroidAppStreamData] = Field(default=None, alias="androidAppStreamData")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when this stream was originally created.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Human-readable display name for the Data Stream. Required for web data streams. The max allowed display name length is 255 UTF-16 code units.", alias="displayName")
    ios_app_stream_data: Optional[GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData] = Field(default=None, alias="iosAppStreamData")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of this Data Stream. Format: properties/{property_id}/dataStreams/{stream_id} Example: \"properties/1000/dataStreams/2000\"")
    type: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The type of this DataStream resource.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when stream payload fields were last updated.", alias="updateTime")
    web_stream_data: Optional[GoogleAnalyticsAdminV1alphaDataStreamWebStreamData] = Field(default=None, alias="webStreamData")
    __properties: ClassVar[List[str]] = ["androidAppStreamData", "createTime", "displayName", "iosAppStreamData", "name", "type", "updateTime", "webStreamData"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_STREAM_TYPE_UNSPECIFIED', 'WEB_DATA_STREAM', 'ANDROID_APP_DATA_STREAM', 'IOS_APP_DATA_STREAM']):
            raise ValueError("must be one of enum values ('DATA_STREAM_TYPE_UNSPECIFIED', 'WEB_DATA_STREAM', 'ANDROID_APP_DATA_STREAM', 'IOS_APP_DATA_STREAM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaDataStream from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of android_app_stream_data
        if self.android_app_stream_data:
            _dict['androidAppStreamData'] = self.android_app_stream_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ios_app_stream_data
        if self.ios_app_stream_data:
            _dict['iosAppStreamData'] = self.ios_app_stream_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web_stream_data
        if self.web_stream_data:
            _dict['webStreamData'] = self.web_stream_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaDataStream from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "androidAppStreamData": GoogleAnalyticsAdminV1alphaDataStreamAndroidAppStreamData.from_dict(obj["androidAppStreamData"]) if obj.get("androidAppStreamData") is not None else None,
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "iosAppStreamData": GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData.from_dict(obj["iosAppStreamData"]) if obj.get("iosAppStreamData") is not None else None,
            "name": obj.get("name"),
            "type": obj.get("type"),
            "updateTime": obj.get("updateTime"),
            "webStreamData": GoogleAnalyticsAdminV1alphaDataStreamWebStreamData.from_dict(obj["webStreamData"]) if obj.get("webStreamData") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_analytics_admin_v1alpha_access_between_filter import GoogleAnalyticsAdminV1alphaAccessBetweenFilter
from openapi_client.models.google_analytics_admin_v1alpha_access_in_list_filter import GoogleAnalyticsAdminV1alphaAccessInListFilter
from openapi_client.models.google_analytics_admin_v1alpha_access_numeric_filter import GoogleAnalyticsAdminV1alphaAccessNumericFilter
from openapi_client.models.google_analytics_admin_v1alpha_access_string_filter import GoogleAnalyticsAdminV1alphaAccessStringFilter
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaAccessFilter(BaseModel):
    """
    An expression to filter dimension or metric values.
    """ # noqa: E501
    between_filter: Optional[GoogleAnalyticsAdminV1alphaAccessBetweenFilter] = Field(default=None, alias="betweenFilter")
    field_name: Optional[StrictStr] = Field(default=None, description="The dimension name or metric name.", alias="fieldName")
    in_list_filter: Optional[GoogleAnalyticsAdminV1alphaAccessInListFilter] = Field(default=None, alias="inListFilter")
    numeric_filter: Optional[GoogleAnalyticsAdminV1alphaAccessNumericFilter] = Field(default=None, alias="numericFilter")
    string_filter: Optional[GoogleAnalyticsAdminV1alphaAccessStringFilter] = Field(default=None, alias="stringFilter")
    __properties: ClassVar[List[str]] = ["betweenFilter", "fieldName", "inListFilter", "numericFilter", "stringFilter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaAccessFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of between_filter
        if self.between_filter:
            _dict['betweenFilter'] = self.between_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_list_filter
        if self.in_list_filter:
            _dict['inListFilter'] = self.in_list_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of numeric_filter
        if self.numeric_filter:
            _dict['numericFilter'] = self.numeric_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of string_filter
        if self.string_filter:
            _dict['stringFilter'] = self.string_filter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaAccessFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "betweenFilter": GoogleAnalyticsAdminV1alphaAccessBetweenFilter.from_dict(obj["betweenFilter"]) if obj.get("betweenFilter") is not None else None,
            "fieldName": obj.get("fieldName"),
            "inListFilter": GoogleAnalyticsAdminV1alphaAccessInListFilter.from_dict(obj["inListFilter"]) if obj.get("inListFilter") is not None else None,
            "numericFilter": GoogleAnalyticsAdminV1alphaAccessNumericFilter.from_dict(obj["numericFilter"]) if obj.get("numericFilter") is not None else None,
            "stringFilter": GoogleAnalyticsAdminV1alphaAccessStringFilter.from_dict(obj["stringFilter"]) if obj.get("stringFilter") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_analytics_admin_v1alpha_change_history_change import GoogleAnalyticsAdminV1alphaChangeHistoryChange
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaChangeHistoryEvent(BaseModel):
    """
    A set of changes within a Google Analytics account or its child properties that resulted from the same cause. Common causes would be updates made in the Google Analytics UI, changes from customer support, or automatic Google Analytics system changes.
    """ # noqa: E501
    actor_type: Optional[StrictStr] = Field(default=None, description="The type of actor that made this change.", alias="actorType")
    change_time: Optional[StrictStr] = Field(default=None, description="Time when change was made.", alias="changeTime")
    changes: Optional[List[GoogleAnalyticsAdminV1alphaChangeHistoryChange]] = Field(default=None, description="A list of changes made in this change history event that fit the filters specified in SearchChangeHistoryEventsRequest.")
    changes_filtered: Optional[StrictBool] = Field(default=None, description="If true, then the list of changes returned was filtered, and does not represent all changes that occurred in this event.", alias="changesFiltered")
    id: Optional[StrictStr] = Field(default=None, description="ID of this change history event. This ID is unique across Google Analytics.")
    user_actor_email: Optional[StrictStr] = Field(default=None, description="Email address of the Google account that made the change. This will be a valid email address if the actor field is set to USER, and empty otherwise. Google accounts that have been deleted will cause an error.", alias="userActorEmail")
    __properties: ClassVar[List[str]] = ["actorType", "changeTime", "changes", "changesFiltered", "id", "userActorEmail"]

    @field_validator('actor_type')
    def actor_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTOR_TYPE_UNSPECIFIED', 'USER', 'SYSTEM', 'SUPPORT']):
            raise ValueError("must be one of enum values ('ACTOR_TYPE_UNSPECIFIED', 'USER', 'SYSTEM', 'SUPPORT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaChangeHistoryEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in changes (list)
        _items = []
        if self.changes:
            for _item_changes in self.changes:
                if _item_changes:
                    _items.append(_item_changes.to_dict())
            _dict['changes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaChangeHistoryEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actorType": obj.get("actorType"),
            "changeTime": obj.get("changeTime"),
            "changes": [GoogleAnalyticsAdminV1alphaChangeHistoryChange.from_dict(_item) for _item in obj["changes"]] if obj.get("changes") is not None else None,
            "changesFiltered": obj.get("changesFiltered"),
            "id": obj.get("id"),
            "userActorEmail": obj.get("userActorEmail")
        })
        return _obj



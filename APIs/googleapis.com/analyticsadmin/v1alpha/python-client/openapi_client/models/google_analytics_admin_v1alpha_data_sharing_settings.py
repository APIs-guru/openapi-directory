# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaDataSharingSettings(BaseModel):
    """
    A resource message representing data sharing settings of a Google Analytics account.
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name. Format: accounts/{account}/dataSharingSettings Example: \"accounts/1000/dataSharingSettings\"")
    sharing_with_google_any_sales_enabled: Optional[StrictBool] = Field(default=None, description="Allows any of Google sales to access the data in order to suggest configuration changes to improve results.", alias="sharingWithGoogleAnySalesEnabled")
    sharing_with_google_assigned_sales_enabled: Optional[StrictBool] = Field(default=None, description="Allows Google sales teams that are assigned to the customer to access the data in order to suggest configuration changes to improve results. Sales team restrictions still apply when enabled.", alias="sharingWithGoogleAssignedSalesEnabled")
    sharing_with_google_products_enabled: Optional[StrictBool] = Field(default=None, description="Allows Google to use the data to improve other Google products or services.", alias="sharingWithGoogleProductsEnabled")
    sharing_with_google_support_enabled: Optional[StrictBool] = Field(default=None, description="Allows Google support to access the data in order to help troubleshoot issues.", alias="sharingWithGoogleSupportEnabled")
    sharing_with_others_enabled: Optional[StrictBool] = Field(default=None, description="Allows Google to share the data anonymously in aggregate form with others.", alias="sharingWithOthersEnabled")
    __properties: ClassVar[List[str]] = ["name", "sharingWithGoogleAnySalesEnabled", "sharingWithGoogleAssignedSalesEnabled", "sharingWithGoogleProductsEnabled", "sharingWithGoogleSupportEnabled", "sharingWithOthersEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaDataSharingSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaDataSharingSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "sharingWithGoogleAnySalesEnabled": obj.get("sharingWithGoogleAnySalesEnabled"),
            "sharingWithGoogleAssignedSalesEnabled": obj.get("sharingWithGoogleAssignedSalesEnabled"),
            "sharingWithGoogleProductsEnabled": obj.get("sharingWithGoogleProductsEnabled"),
            "sharingWithGoogleSupportEnabled": obj.get("sharingWithGoogleSupportEnabled"),
            "sharingWithOthersEnabled": obj.get("sharingWithOthersEnabled")
        })
        return _obj



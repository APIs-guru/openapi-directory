# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaBigQueryLink(BaseModel):
    """
    A link between a GA4 Property and BigQuery project.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the link was created.", alias="createTime")
    daily_export_enabled: Optional[StrictBool] = Field(default=None, description="If set true, enables daily data export to the linked Google Cloud project.", alias="dailyExportEnabled")
    excluded_events: Optional[List[StrictStr]] = Field(default=None, description="The list of event names that will be excluded from exports.", alias="excludedEvents")
    export_streams: Optional[List[StrictStr]] = Field(default=None, description="The list of streams under the parent property for which data will be exported. Format: properties/{property_id}/dataStreams/{stream_id} Example: ['properties/1000/dataStreams/2000']", alias="exportStreams")
    fresh_daily_export_enabled: Optional[StrictBool] = Field(default=None, description="If set true, enables fresh daily export to the linked Google Cloud project.", alias="freshDailyExportEnabled")
    include_advertising_id: Optional[StrictBool] = Field(default=None, description="If set true, exported data will include advertising identifiers for mobile app streams.", alias="includeAdvertisingId")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of this BigQuery link. Format: 'properties/{property_id}/bigQueryLinks/{bigquery_link_id}' Format: 'properties/1234/bigQueryLinks/abc567'")
    project: Optional[StrictStr] = Field(default=None, description="Immutable. The linked Google Cloud project. When creating a BigQueryLink, you may provide this resource name using either a project number or project ID. Once this resource has been created, the returned project will always have a project that contains a project number. Format: 'projects/{project number}' Example: 'projects/1234'")
    streaming_export_enabled: Optional[StrictBool] = Field(default=None, description="If set true, enables streaming export to the linked Google Cloud project.", alias="streamingExportEnabled")
    __properties: ClassVar[List[str]] = ["createTime", "dailyExportEnabled", "excludedEvents", "exportStreams", "freshDailyExportEnabled", "includeAdvertisingId", "name", "project", "streamingExportEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaBigQueryLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaBigQueryLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "dailyExportEnabled": obj.get("dailyExportEnabled"),
            "excludedEvents": obj.get("excludedEvents"),
            "exportStreams": obj.get("exportStreams"),
            "freshDailyExportEnabled": obj.get("freshDailyExportEnabled"),
            "includeAdvertisingId": obj.get("includeAdvertisingId"),
            "name": obj.get("name"),
            "project": obj.get("project"),
            "streamingExportEnabled": obj.get("streamingExportEnabled")
        })
        return _obj



# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_analytics_admin_v1alpha_account import GoogleAnalyticsAdminV1alphaAccount
from openapi_client.models.google_analytics_admin_v1alpha_ad_sense_link import GoogleAnalyticsAdminV1alphaAdSenseLink
from openapi_client.models.google_analytics_admin_v1alpha_attribution_settings import GoogleAnalyticsAdminV1alphaAttributionSettings
from openapi_client.models.google_analytics_admin_v1alpha_audience import GoogleAnalyticsAdminV1alphaAudience
from openapi_client.models.google_analytics_admin_v1alpha_big_query_link import GoogleAnalyticsAdminV1alphaBigQueryLink
from openapi_client.models.google_analytics_admin_v1alpha_calculated_metric import GoogleAnalyticsAdminV1alphaCalculatedMetric
from openapi_client.models.google_analytics_admin_v1alpha_channel_group import GoogleAnalyticsAdminV1alphaChannelGroup
from openapi_client.models.google_analytics_admin_v1alpha_conversion_event import GoogleAnalyticsAdminV1alphaConversionEvent
from openapi_client.models.google_analytics_admin_v1alpha_custom_dimension import GoogleAnalyticsAdminV1alphaCustomDimension
from openapi_client.models.google_analytics_admin_v1alpha_custom_metric import GoogleAnalyticsAdminV1alphaCustomMetric
from openapi_client.models.google_analytics_admin_v1alpha_data_redaction_settings import GoogleAnalyticsAdminV1alphaDataRedactionSettings
from openapi_client.models.google_analytics_admin_v1alpha_data_retention_settings import GoogleAnalyticsAdminV1alphaDataRetentionSettings
from openapi_client.models.google_analytics_admin_v1alpha_data_stream import GoogleAnalyticsAdminV1alphaDataStream
from openapi_client.models.google_analytics_admin_v1alpha_display_video360_advertiser_link import GoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLink
from openapi_client.models.google_analytics_admin_v1alpha_display_video360_advertiser_link_proposal import GoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal
from openapi_client.models.google_analytics_admin_v1alpha_enhanced_measurement_settings import GoogleAnalyticsAdminV1alphaEnhancedMeasurementSettings
from openapi_client.models.google_analytics_admin_v1alpha_event_create_rule import GoogleAnalyticsAdminV1alphaEventCreateRule
from openapi_client.models.google_analytics_admin_v1alpha_expanded_data_set import GoogleAnalyticsAdminV1alphaExpandedDataSet
from openapi_client.models.google_analytics_admin_v1alpha_firebase_link import GoogleAnalyticsAdminV1alphaFirebaseLink
from openapi_client.models.google_analytics_admin_v1alpha_google_ads_link import GoogleAnalyticsAdminV1alphaGoogleAdsLink
from openapi_client.models.google_analytics_admin_v1alpha_google_signals_settings import GoogleAnalyticsAdminV1alphaGoogleSignalsSettings
from openapi_client.models.google_analytics_admin_v1alpha_measurement_protocol_secret import GoogleAnalyticsAdminV1alphaMeasurementProtocolSecret
from openapi_client.models.google_analytics_admin_v1alpha_property import GoogleAnalyticsAdminV1alphaProperty
from openapi_client.models.google_analytics_admin_v1alpha_search_ads360_link import GoogleAnalyticsAdminV1alphaSearchAds360Link
from openapi_client.models.google_analytics_admin_v1alpha_skad_network_conversion_value_schema import GoogleAnalyticsAdminV1alphaSKAdNetworkConversionValueSchema
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaChangeHistoryChangeChangeHistoryResource(BaseModel):
    """
    A snapshot of a resource as before or after the result of a change in change history.
    """ # noqa: E501
    account: Optional[GoogleAnalyticsAdminV1alphaAccount] = None
    adsense_link: Optional[GoogleAnalyticsAdminV1alphaAdSenseLink] = Field(default=None, alias="adsenseLink")
    attribution_settings: Optional[GoogleAnalyticsAdminV1alphaAttributionSettings] = Field(default=None, alias="attributionSettings")
    audience: Optional[GoogleAnalyticsAdminV1alphaAudience] = None
    bigquery_link: Optional[GoogleAnalyticsAdminV1alphaBigQueryLink] = Field(default=None, alias="bigqueryLink")
    calculated_metric: Optional[GoogleAnalyticsAdminV1alphaCalculatedMetric] = Field(default=None, alias="calculatedMetric")
    channel_group: Optional[GoogleAnalyticsAdminV1alphaChannelGroup] = Field(default=None, alias="channelGroup")
    conversion_event: Optional[GoogleAnalyticsAdminV1alphaConversionEvent] = Field(default=None, alias="conversionEvent")
    custom_dimension: Optional[GoogleAnalyticsAdminV1alphaCustomDimension] = Field(default=None, alias="customDimension")
    custom_metric: Optional[GoogleAnalyticsAdminV1alphaCustomMetric] = Field(default=None, alias="customMetric")
    data_redaction_settings: Optional[GoogleAnalyticsAdminV1alphaDataRedactionSettings] = Field(default=None, alias="dataRedactionSettings")
    data_retention_settings: Optional[GoogleAnalyticsAdminV1alphaDataRetentionSettings] = Field(default=None, alias="dataRetentionSettings")
    data_stream: Optional[GoogleAnalyticsAdminV1alphaDataStream] = Field(default=None, alias="dataStream")
    display_video360_advertiser_link: Optional[GoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLink] = Field(default=None, alias="displayVideo360AdvertiserLink")
    display_video360_advertiser_link_proposal: Optional[GoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal] = Field(default=None, alias="displayVideo360AdvertiserLinkProposal")
    enhanced_measurement_settings: Optional[GoogleAnalyticsAdminV1alphaEnhancedMeasurementSettings] = Field(default=None, alias="enhancedMeasurementSettings")
    event_create_rule: Optional[GoogleAnalyticsAdminV1alphaEventCreateRule] = Field(default=None, alias="eventCreateRule")
    expanded_data_set: Optional[GoogleAnalyticsAdminV1alphaExpandedDataSet] = Field(default=None, alias="expandedDataSet")
    firebase_link: Optional[GoogleAnalyticsAdminV1alphaFirebaseLink] = Field(default=None, alias="firebaseLink")
    google_ads_link: Optional[GoogleAnalyticsAdminV1alphaGoogleAdsLink] = Field(default=None, alias="googleAdsLink")
    google_signals_settings: Optional[GoogleAnalyticsAdminV1alphaGoogleSignalsSettings] = Field(default=None, alias="googleSignalsSettings")
    measurement_protocol_secret: Optional[GoogleAnalyticsAdminV1alphaMeasurementProtocolSecret] = Field(default=None, alias="measurementProtocolSecret")
    var_property: Optional[GoogleAnalyticsAdminV1alphaProperty] = Field(default=None, alias="property")
    search_ads360_link: Optional[GoogleAnalyticsAdminV1alphaSearchAds360Link] = Field(default=None, alias="searchAds360Link")
    skadnetwork_conversion_value_schema: Optional[GoogleAnalyticsAdminV1alphaSKAdNetworkConversionValueSchema] = Field(default=None, alias="skadnetworkConversionValueSchema")
    __properties: ClassVar[List[str]] = ["account", "adsenseLink", "attributionSettings", "audience", "bigqueryLink", "calculatedMetric", "channelGroup", "conversionEvent", "customDimension", "customMetric", "dataRedactionSettings", "dataRetentionSettings", "dataStream", "displayVideo360AdvertiserLink", "displayVideo360AdvertiserLinkProposal", "enhancedMeasurementSettings", "eventCreateRule", "expandedDataSet", "firebaseLink", "googleAdsLink", "googleSignalsSettings", "measurementProtocolSecret", "property", "searchAds360Link", "skadnetworkConversionValueSchema"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaChangeHistoryChangeChangeHistoryResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of adsense_link
        if self.adsense_link:
            _dict['adsenseLink'] = self.adsense_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attribution_settings
        if self.attribution_settings:
            _dict['attributionSettings'] = self.attribution_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of audience
        if self.audience:
            _dict['audience'] = self.audience.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bigquery_link
        if self.bigquery_link:
            _dict['bigqueryLink'] = self.bigquery_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calculated_metric
        if self.calculated_metric:
            _dict['calculatedMetric'] = self.calculated_metric.to_dict()
        # override the default output from pydantic by calling `to_dict()` of channel_group
        if self.channel_group:
            _dict['channelGroup'] = self.channel_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conversion_event
        if self.conversion_event:
            _dict['conversionEvent'] = self.conversion_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_dimension
        if self.custom_dimension:
            _dict['customDimension'] = self.custom_dimension.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_metric
        if self.custom_metric:
            _dict['customMetric'] = self.custom_metric.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_redaction_settings
        if self.data_redaction_settings:
            _dict['dataRedactionSettings'] = self.data_redaction_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_retention_settings
        if self.data_retention_settings:
            _dict['dataRetentionSettings'] = self.data_retention_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_stream
        if self.data_stream:
            _dict['dataStream'] = self.data_stream.to_dict()
        # override the default output from pydantic by calling `to_dict()` of display_video360_advertiser_link
        if self.display_video360_advertiser_link:
            _dict['displayVideo360AdvertiserLink'] = self.display_video360_advertiser_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of display_video360_advertiser_link_proposal
        if self.display_video360_advertiser_link_proposal:
            _dict['displayVideo360AdvertiserLinkProposal'] = self.display_video360_advertiser_link_proposal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enhanced_measurement_settings
        if self.enhanced_measurement_settings:
            _dict['enhancedMeasurementSettings'] = self.enhanced_measurement_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_create_rule
        if self.event_create_rule:
            _dict['eventCreateRule'] = self.event_create_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expanded_data_set
        if self.expanded_data_set:
            _dict['expandedDataSet'] = self.expanded_data_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of firebase_link
        if self.firebase_link:
            _dict['firebaseLink'] = self.firebase_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google_ads_link
        if self.google_ads_link:
            _dict['googleAdsLink'] = self.google_ads_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google_signals_settings
        if self.google_signals_settings:
            _dict['googleSignalsSettings'] = self.google_signals_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of measurement_protocol_secret
        if self.measurement_protocol_secret:
            _dict['measurementProtocolSecret'] = self.measurement_protocol_secret.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_property
        if self.var_property:
            _dict['property'] = self.var_property.to_dict()
        # override the default output from pydantic by calling `to_dict()` of search_ads360_link
        if self.search_ads360_link:
            _dict['searchAds360Link'] = self.search_ads360_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of skadnetwork_conversion_value_schema
        if self.skadnetwork_conversion_value_schema:
            _dict['skadnetworkConversionValueSchema'] = self.skadnetwork_conversion_value_schema.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaChangeHistoryChangeChangeHistoryResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": GoogleAnalyticsAdminV1alphaAccount.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "adsenseLink": GoogleAnalyticsAdminV1alphaAdSenseLink.from_dict(obj["adsenseLink"]) if obj.get("adsenseLink") is not None else None,
            "attributionSettings": GoogleAnalyticsAdminV1alphaAttributionSettings.from_dict(obj["attributionSettings"]) if obj.get("attributionSettings") is not None else None,
            "audience": GoogleAnalyticsAdminV1alphaAudience.from_dict(obj["audience"]) if obj.get("audience") is not None else None,
            "bigqueryLink": GoogleAnalyticsAdminV1alphaBigQueryLink.from_dict(obj["bigqueryLink"]) if obj.get("bigqueryLink") is not None else None,
            "calculatedMetric": GoogleAnalyticsAdminV1alphaCalculatedMetric.from_dict(obj["calculatedMetric"]) if obj.get("calculatedMetric") is not None else None,
            "channelGroup": GoogleAnalyticsAdminV1alphaChannelGroup.from_dict(obj["channelGroup"]) if obj.get("channelGroup") is not None else None,
            "conversionEvent": GoogleAnalyticsAdminV1alphaConversionEvent.from_dict(obj["conversionEvent"]) if obj.get("conversionEvent") is not None else None,
            "customDimension": GoogleAnalyticsAdminV1alphaCustomDimension.from_dict(obj["customDimension"]) if obj.get("customDimension") is not None else None,
            "customMetric": GoogleAnalyticsAdminV1alphaCustomMetric.from_dict(obj["customMetric"]) if obj.get("customMetric") is not None else None,
            "dataRedactionSettings": GoogleAnalyticsAdminV1alphaDataRedactionSettings.from_dict(obj["dataRedactionSettings"]) if obj.get("dataRedactionSettings") is not None else None,
            "dataRetentionSettings": GoogleAnalyticsAdminV1alphaDataRetentionSettings.from_dict(obj["dataRetentionSettings"]) if obj.get("dataRetentionSettings") is not None else None,
            "dataStream": GoogleAnalyticsAdminV1alphaDataStream.from_dict(obj["dataStream"]) if obj.get("dataStream") is not None else None,
            "displayVideo360AdvertiserLink": GoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLink.from_dict(obj["displayVideo360AdvertiserLink"]) if obj.get("displayVideo360AdvertiserLink") is not None else None,
            "displayVideo360AdvertiserLinkProposal": GoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal.from_dict(obj["displayVideo360AdvertiserLinkProposal"]) if obj.get("displayVideo360AdvertiserLinkProposal") is not None else None,
            "enhancedMeasurementSettings": GoogleAnalyticsAdminV1alphaEnhancedMeasurementSettings.from_dict(obj["enhancedMeasurementSettings"]) if obj.get("enhancedMeasurementSettings") is not None else None,
            "eventCreateRule": GoogleAnalyticsAdminV1alphaEventCreateRule.from_dict(obj["eventCreateRule"]) if obj.get("eventCreateRule") is not None else None,
            "expandedDataSet": GoogleAnalyticsAdminV1alphaExpandedDataSet.from_dict(obj["expandedDataSet"]) if obj.get("expandedDataSet") is not None else None,
            "firebaseLink": GoogleAnalyticsAdminV1alphaFirebaseLink.from_dict(obj["firebaseLink"]) if obj.get("firebaseLink") is not None else None,
            "googleAdsLink": GoogleAnalyticsAdminV1alphaGoogleAdsLink.from_dict(obj["googleAdsLink"]) if obj.get("googleAdsLink") is not None else None,
            "googleSignalsSettings": GoogleAnalyticsAdminV1alphaGoogleSignalsSettings.from_dict(obj["googleSignalsSettings"]) if obj.get("googleSignalsSettings") is not None else None,
            "measurementProtocolSecret": GoogleAnalyticsAdminV1alphaMeasurementProtocolSecret.from_dict(obj["measurementProtocolSecret"]) if obj.get("measurementProtocolSecret") is not None else None,
            "property": GoogleAnalyticsAdminV1alphaProperty.from_dict(obj["property"]) if obj.get("property") is not None else None,
            "searchAds360Link": GoogleAnalyticsAdminV1alphaSearchAds360Link.from_dict(obj["searchAds360Link"]) if obj.get("searchAds360Link") is not None else None,
            "skadnetworkConversionValueSchema": GoogleAnalyticsAdminV1alphaSKAdNetworkConversionValueSchema.from_dict(obj["skadnetworkConversionValueSchema"]) if obj.get("skadnetworkConversionValueSchema") is not None else None
        })
        return _obj



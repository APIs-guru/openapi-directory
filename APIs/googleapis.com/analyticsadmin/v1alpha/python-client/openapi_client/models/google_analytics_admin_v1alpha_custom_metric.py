# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaCustomMetric(BaseModel):
    """
    A definition for a custom metric.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Optional. Description for this custom dimension. Max length of 150 characters.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. Display name for this custom metric as shown in the Analytics UI. Max length of 82 characters, alphanumeric plus space and underscore starting with a letter. Legacy system-generated display names may contain square brackets, but updates to this field will never permit square brackets.", alias="displayName")
    measurement_unit: Optional[StrictStr] = Field(default=None, description="Required. The type for the custom metric's value.", alias="measurementUnit")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name for this CustomMetric resource. Format: properties/{property}/customMetrics/{customMetric}")
    parameter_name: Optional[StrictStr] = Field(default=None, description="Required. Immutable. Tagging name for this custom metric. If this is an event-scoped metric, then this is the event parameter name. May only contain alphanumeric and underscore charactes, starting with a letter. Max length of 40 characters for event-scoped metrics.", alias="parameterName")
    restricted_metric_type: Optional[List[StrictStr]] = Field(default=None, description="Optional. Types of restricted data that this metric may contain. Required for metrics with CURRENCY measurement unit. Must be empty for metrics with a non-CURRENCY measurement unit.", alias="restrictedMetricType")
    scope: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The scope of this custom metric.")
    __properties: ClassVar[List[str]] = ["description", "displayName", "measurementUnit", "name", "parameterName", "restrictedMetricType", "scope"]

    @field_validator('measurement_unit')
    def measurement_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MEASUREMENT_UNIT_UNSPECIFIED', 'STANDARD', 'CURRENCY', 'FEET', 'METERS', 'KILOMETERS', 'MILES', 'MILLISECONDS', 'SECONDS', 'MINUTES', 'HOURS']):
            raise ValueError("must be one of enum values ('MEASUREMENT_UNIT_UNSPECIFIED', 'STANDARD', 'CURRENCY', 'FEET', 'METERS', 'KILOMETERS', 'MILES', 'MILLISECONDS', 'SECONDS', 'MINUTES', 'HOURS')")
        return value

    @field_validator('restricted_metric_type')
    def restricted_metric_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['RESTRICTED_METRIC_TYPE_UNSPECIFIED', 'COST_DATA', 'REVENUE_DATA']):
                raise ValueError("each list item must be one of ('RESTRICTED_METRIC_TYPE_UNSPECIFIED', 'COST_DATA', 'REVENUE_DATA')")
        return value

    @field_validator('scope')
    def scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['METRIC_SCOPE_UNSPECIFIED', 'EVENT']):
            raise ValueError("must be one of enum values ('METRIC_SCOPE_UNSPECIFIED', 'EVENT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaCustomMetric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaCustomMetric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "measurementUnit": obj.get("measurementUnit"),
            "name": obj.get("name"),
            "parameterName": obj.get("parameterName"),
            "restrictedMetricType": obj.get("restrictedMetricType"),
            "scope": obj.get("scope")
        })
        return _obj



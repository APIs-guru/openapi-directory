# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaEnhancedMeasurementSettings(BaseModel):
    """
    Singleton resource under a web DataStream, configuring measurement of additional site interactions and content.
    """ # noqa: E501
    file_downloads_enabled: Optional[StrictBool] = Field(default=None, description="If enabled, capture a file download event each time a link is clicked with a common document, compressed file, application, video, or audio extension.", alias="fileDownloadsEnabled")
    form_interactions_enabled: Optional[StrictBool] = Field(default=None, description="If enabled, capture a form interaction event each time a visitor interacts with a form on your website. False by default.", alias="formInteractionsEnabled")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the Enhanced Measurement Settings. Format: properties/{property_id}/dataStreams/{data_stream}/enhancedMeasurementSettings Example: \"properties/1000/dataStreams/2000/enhancedMeasurementSettings\"")
    outbound_clicks_enabled: Optional[StrictBool] = Field(default=None, description="If enabled, capture an outbound click event each time a visitor clicks a link that leads them away from your domain.", alias="outboundClicksEnabled")
    page_changes_enabled: Optional[StrictBool] = Field(default=None, description="If enabled, capture a page view event each time the website changes the browser history state.", alias="pageChangesEnabled")
    scrolls_enabled: Optional[StrictBool] = Field(default=None, description="If enabled, capture scroll events each time a visitor gets to the bottom of a page.", alias="scrollsEnabled")
    search_query_parameter: Optional[StrictStr] = Field(default=None, description="Required. URL query parameters to interpret as site search parameters. Max length is 1024 characters. Must not be empty.", alias="searchQueryParameter")
    site_search_enabled: Optional[StrictBool] = Field(default=None, description="If enabled, capture a view search results event each time a visitor performs a search on your site (based on a query parameter).", alias="siteSearchEnabled")
    stream_enabled: Optional[StrictBool] = Field(default=None, description="Indicates whether Enhanced Measurement Settings will be used to automatically measure interactions and content on this web stream. Changing this value does not affect the settings themselves, but determines whether they are respected.", alias="streamEnabled")
    uri_query_parameter: Optional[StrictStr] = Field(default=None, description="Additional URL query parameters. Max length is 1024 characters.", alias="uriQueryParameter")
    video_engagement_enabled: Optional[StrictBool] = Field(default=None, description="If enabled, capture video play, progress, and complete events as visitors view embedded videos on your site.", alias="videoEngagementEnabled")
    __properties: ClassVar[List[str]] = ["fileDownloadsEnabled", "formInteractionsEnabled", "name", "outboundClicksEnabled", "pageChangesEnabled", "scrollsEnabled", "searchQueryParameter", "siteSearchEnabled", "streamEnabled", "uriQueryParameter", "videoEngagementEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaEnhancedMeasurementSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaEnhancedMeasurementSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fileDownloadsEnabled": obj.get("fileDownloadsEnabled"),
            "formInteractionsEnabled": obj.get("formInteractionsEnabled"),
            "name": obj.get("name"),
            "outboundClicksEnabled": obj.get("outboundClicksEnabled"),
            "pageChangesEnabled": obj.get("pageChangesEnabled"),
            "scrollsEnabled": obj.get("scrollsEnabled"),
            "searchQueryParameter": obj.get("searchQueryParameter"),
            "siteSearchEnabled": obj.get("siteSearchEnabled"),
            "streamEnabled": obj.get("streamEnabled"),
            "uriQueryParameter": obj.get("uriQueryParameter"),
            "videoEngagementEnabled": obj.get("videoEngagementEnabled")
        })
        return _obj



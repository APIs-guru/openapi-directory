# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaCalculatedMetric(BaseModel):
    """
    A definition for a calculated metric.
    """ # noqa: E501
    calculated_metric_id: Optional[StrictStr] = Field(default=None, description="Output only. The ID to use for the calculated metric. In the UI, this is referred to as the \"API name.\" The calculated_metric_id is used when referencing this calculated metric from external APIs. For example, \"calcMetric:{calculated_metric_id}\".", alias="calculatedMetricId")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Description for this calculated metric. Max length of 4096 characters.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. Display name for this calculated metric as shown in the Google Analytics UI. Max length 82 characters.", alias="displayName")
    formula: Optional[StrictStr] = Field(default=None, description="Required. The calculated metric's definition. Maximum number of unique referenced custom metrics is 5. Formulas supports the following operations: + (addition), - (subtraction), - (negative), * (multiplication), / (division), () (parenthesis). Any valid real numbers are acceptable that fit in a Long (64bit integer) or a Double (64 bit floating point number). Example formula: \"( customEvent:parameter_name + cartPurchaseQuantity ) / 2.0\"")
    invalid_metric_reference: Optional[StrictBool] = Field(default=None, description="Output only. If true, this calculated metric has a invalid metric reference. Anything using a calculated metric with invalid_metric_reference set to true may fail, produce warnings, or produce unexpected results.", alias="invalidMetricReference")
    metric_unit: Optional[StrictStr] = Field(default=None, description="Required. The type for the calculated metric's value.", alias="metricUnit")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name for this CalculatedMetric. Format: 'properties/{property_id}/calculatedMetrics/{calculated_metric_id}'")
    restricted_metric_type: Optional[List[StrictStr]] = Field(default=None, description="Output only. Types of restricted data that this metric contains.", alias="restrictedMetricType")
    __properties: ClassVar[List[str]] = ["calculatedMetricId", "description", "displayName", "formula", "invalidMetricReference", "metricUnit", "name", "restrictedMetricType"]

    @field_validator('metric_unit')
    def metric_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['METRIC_UNIT_UNSPECIFIED', 'STANDARD', 'CURRENCY', 'FEET', 'MILES', 'METERS', 'KILOMETERS', 'MILLISECONDS', 'SECONDS', 'MINUTES', 'HOURS']):
            raise ValueError("must be one of enum values ('METRIC_UNIT_UNSPECIFIED', 'STANDARD', 'CURRENCY', 'FEET', 'MILES', 'METERS', 'KILOMETERS', 'MILLISECONDS', 'SECONDS', 'MINUTES', 'HOURS')")
        return value

    @field_validator('restricted_metric_type')
    def restricted_metric_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['RESTRICTED_METRIC_TYPE_UNSPECIFIED', 'COST_DATA', 'REVENUE_DATA']):
                raise ValueError("each list item must be one of ('RESTRICTED_METRIC_TYPE_UNSPECIFIED', 'COST_DATA', 'REVENUE_DATA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaCalculatedMetric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "calculated_metric_id",
            "invalid_metric_reference",
            "name",
            "restricted_metric_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaCalculatedMetric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "calculatedMetricId": obj.get("calculatedMetricId"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "formula": obj.get("formula"),
            "invalidMetricReference": obj.get("invalidMetricReference"),
            "metricUnit": obj.get("metricUnit"),
            "name": obj.get("name"),
            "restrictedMetricType": obj.get("restrictedMetricType")
        })
        return _obj



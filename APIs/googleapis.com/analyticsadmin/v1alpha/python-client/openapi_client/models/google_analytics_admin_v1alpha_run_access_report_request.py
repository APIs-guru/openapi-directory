# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_analytics_admin_v1alpha_access_date_range import GoogleAnalyticsAdminV1alphaAccessDateRange
from openapi_client.models.google_analytics_admin_v1alpha_access_dimension import GoogleAnalyticsAdminV1alphaAccessDimension
from openapi_client.models.google_analytics_admin_v1alpha_access_filter_expression import GoogleAnalyticsAdminV1alphaAccessFilterExpression
from openapi_client.models.google_analytics_admin_v1alpha_access_metric import GoogleAnalyticsAdminV1alphaAccessMetric
from openapi_client.models.google_analytics_admin_v1alpha_access_order_by import GoogleAnalyticsAdminV1alphaAccessOrderBy
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1alphaRunAccessReportRequest(BaseModel):
    """
    The request for a Data Access Record Report.
    """ # noqa: E501
    date_ranges: Optional[List[GoogleAnalyticsAdminV1alphaAccessDateRange]] = Field(default=None, description="Date ranges of access records to read. If multiple date ranges are requested, each response row will contain a zero based date range index. If two date ranges overlap, the access records for the overlapping days is included in the response rows for both date ranges. Requests are allowed up to 2 date ranges.", alias="dateRanges")
    dimension_filter: Optional[GoogleAnalyticsAdminV1alphaAccessFilterExpression] = Field(default=None, alias="dimensionFilter")
    dimensions: Optional[List[GoogleAnalyticsAdminV1alphaAccessDimension]] = Field(default=None, description="The dimensions requested and displayed in the response. Requests are allowed up to 9 dimensions.")
    expand_groups: Optional[StrictBool] = Field(default=None, description="Optional. Decides whether to return the users within user groups. This field works only when include_all_users is set to true. If true, it will return all users with access to the specified property or account. If false, only the users with direct access will be returned.", alias="expandGroups")
    include_all_users: Optional[StrictBool] = Field(default=None, description="Optional. Determines whether to include users who have never made an API call in the response. If true, all users with access to the specified property or account are included in the response, regardless of whether they have made an API call or not. If false, only the users who have made an API call will be included.", alias="includeAllUsers")
    limit: Optional[StrictStr] = Field(default=None, description="The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a maximum of 100,000 rows per request, no matter how many you ask for. `limit` must be positive. The API may return fewer rows than the requested `limit`, if there aren't as many remaining rows as the `limit`. For instance, there are fewer than 300 possible values for the dimension `country`, so when reporting on only `country`, you can't get more than 300 rows, even if you set `limit` to a higher value. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).")
    metric_filter: Optional[GoogleAnalyticsAdminV1alphaAccessFilterExpression] = Field(default=None, alias="metricFilter")
    metrics: Optional[List[GoogleAnalyticsAdminV1alphaAccessMetric]] = Field(default=None, description="The metrics requested and displayed in the response. Requests are allowed up to 10 metrics.")
    offset: Optional[StrictStr] = Field(default=None, description="The row count of the start row. The first row is counted as row 0. If offset is unspecified, it is treated as 0. If offset is zero, then this method will return the first page of results with `limit` entries. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).")
    order_bys: Optional[List[GoogleAnalyticsAdminV1alphaAccessOrderBy]] = Field(default=None, description="Specifies how rows are ordered in the response.", alias="orderBys")
    return_entity_quota: Optional[StrictBool] = Field(default=None, description="Toggles whether to return the current state of this Analytics Property's quota. Quota is returned in [AccessQuota](#AccessQuota). For account-level requests, this field must be false.", alias="returnEntityQuota")
    time_zone: Optional[StrictStr] = Field(default=None, description="This request's time zone if specified. If unspecified, the property's time zone is used. The request's time zone is used to interpret the start & end dates of the report. Formatted as strings from the IANA Time Zone database (https://www.iana.org/time-zones); for example \"America/New_York\" or \"Asia/Tokyo\".", alias="timeZone")
    __properties: ClassVar[List[str]] = ["dateRanges", "dimensionFilter", "dimensions", "expandGroups", "includeAllUsers", "limit", "metricFilter", "metrics", "offset", "orderBys", "returnEntityQuota", "timeZone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaRunAccessReportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in date_ranges (list)
        _items = []
        if self.date_ranges:
            for _item_date_ranges in self.date_ranges:
                if _item_date_ranges:
                    _items.append(_item_date_ranges.to_dict())
            _dict['dateRanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of dimension_filter
        if self.dimension_filter:
            _dict['dimensionFilter'] = self.dimension_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dimensions (list)
        _items = []
        if self.dimensions:
            for _item_dimensions in self.dimensions:
                if _item_dimensions:
                    _items.append(_item_dimensions.to_dict())
            _dict['dimensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of metric_filter
        if self.metric_filter:
            _dict['metricFilter'] = self.metric_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['metrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_bys (list)
        _items = []
        if self.order_bys:
            for _item_order_bys in self.order_bys:
                if _item_order_bys:
                    _items.append(_item_order_bys.to_dict())
            _dict['orderBys'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1alphaRunAccessReportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dateRanges": [GoogleAnalyticsAdminV1alphaAccessDateRange.from_dict(_item) for _item in obj["dateRanges"]] if obj.get("dateRanges") is not None else None,
            "dimensionFilter": GoogleAnalyticsAdminV1alphaAccessFilterExpression.from_dict(obj["dimensionFilter"]) if obj.get("dimensionFilter") is not None else None,
            "dimensions": [GoogleAnalyticsAdminV1alphaAccessDimension.from_dict(_item) for _item in obj["dimensions"]] if obj.get("dimensions") is not None else None,
            "expandGroups": obj.get("expandGroups"),
            "includeAllUsers": obj.get("includeAllUsers"),
            "limit": obj.get("limit"),
            "metricFilter": GoogleAnalyticsAdminV1alphaAccessFilterExpression.from_dict(obj["metricFilter"]) if obj.get("metricFilter") is not None else None,
            "metrics": [GoogleAnalyticsAdminV1alphaAccessMetric.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None,
            "offset": obj.get("offset"),
            "orderBys": [GoogleAnalyticsAdminV1alphaAccessOrderBy.from_dict(_item) for _item in obj["orderBys"]] if obj.get("orderBys") is not None else None,
            "returnEntityQuota": obj.get("returnEntityQuota"),
            "timeZone": obj.get("timeZone")
        })
        return _obj



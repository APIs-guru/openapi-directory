# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_analytics_admin_v1alpha_subproperty_event_filter_expression_list import GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList

class TestGoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList(unittest.TestCase):
    """GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList:
        """Test GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList`
        """
        model = GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList()
        if include_optional:
            return GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList(
                filter_expressions = [
                    openapi_client.models.google_analytics_admin_v1alpha_subproperty_event_filter_expression.GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression(
                        filter_condition = openapi_client.models.google_analytics_admin_v1alpha_subproperty_event_filter_condition.GoogleAnalyticsAdminV1alphaSubpropertyEventFilterCondition(
                            field_name = '', 
                            null_filter = True, 
                            string_filter = openapi_client.models.google_analytics_admin_v1alpha_subproperty_event_filter_condition_string_filter.GoogleAnalyticsAdminV1alphaSubpropertyEventFilterConditionStringFilter(
                                case_sensitive = True, 
                                match_type = 'MATCH_TYPE_UNSPECIFIED', 
                                value = '', ), ), 
                        not_expression = openapi_client.models.google_analytics_admin_v1alpha_subproperty_event_filter_expression.GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression(
                            or_group = openapi_client.models.google_analytics_admin_v1alpha_subproperty_event_filter_expression_list.GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList(), ), 
                        or_group = openapi_client.models.google_analytics_admin_v1alpha_subproperty_event_filter_expression_list.GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList(), )
                    ]
            )
        else:
            return GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList(
        )
        """

    def testGoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList(self):
        """Test GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

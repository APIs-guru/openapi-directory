# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_analytics_admin_v1beta_access_dimension_header import GoogleAnalyticsAdminV1betaAccessDimensionHeader
from openapi_client.models.google_analytics_admin_v1beta_access_metric_header import GoogleAnalyticsAdminV1betaAccessMetricHeader
from openapi_client.models.google_analytics_admin_v1beta_access_quota import GoogleAnalyticsAdminV1betaAccessQuota
from openapi_client.models.google_analytics_admin_v1beta_access_row import GoogleAnalyticsAdminV1betaAccessRow
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1betaRunAccessReportResponse(BaseModel):
    """
    The customized Data Access Record Report response.
    """ # noqa: E501
    dimension_headers: Optional[List[GoogleAnalyticsAdminV1betaAccessDimensionHeader]] = Field(default=None, description="The header for a column in the report that corresponds to a specific dimension. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows.", alias="dimensionHeaders")
    metric_headers: Optional[List[GoogleAnalyticsAdminV1betaAccessMetricHeader]] = Field(default=None, description="The header for a column in the report that corresponds to a specific metric. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows.", alias="metricHeaders")
    quota: Optional[GoogleAnalyticsAdminV1betaAccessQuota] = None
    row_count: Optional[StrictInt] = Field(default=None, description="The total number of rows in the query result. `rowCount` is independent of the number of rows returned in the response, the `limit` request parameter, and the `offset` request parameter. For example if a query returns 175 rows and includes `limit` of 50 in the API request, the response will contain `rowCount` of 175 but only 50 rows. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).", alias="rowCount")
    rows: Optional[List[GoogleAnalyticsAdminV1betaAccessRow]] = Field(default=None, description="Rows of dimension value combinations and metric values in the report.")
    __properties: ClassVar[List[str]] = ["dimensionHeaders", "metricHeaders", "quota", "rowCount", "rows"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1betaRunAccessReportResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dimension_headers (list)
        _items = []
        if self.dimension_headers:
            for _item_dimension_headers in self.dimension_headers:
                if _item_dimension_headers:
                    _items.append(_item_dimension_headers.to_dict())
            _dict['dimensionHeaders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metric_headers (list)
        _items = []
        if self.metric_headers:
            for _item_metric_headers in self.metric_headers:
                if _item_metric_headers:
                    _items.append(_item_metric_headers.to_dict())
            _dict['metricHeaders'] = _items
        # override the default output from pydantic by calling `to_dict()` of quota
        if self.quota:
            _dict['quota'] = self.quota.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rows (list)
        _items = []
        if self.rows:
            for _item_rows in self.rows:
                if _item_rows:
                    _items.append(_item_rows.to_dict())
            _dict['rows'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1betaRunAccessReportResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dimensionHeaders": [GoogleAnalyticsAdminV1betaAccessDimensionHeader.from_dict(_item) for _item in obj["dimensionHeaders"]] if obj.get("dimensionHeaders") is not None else None,
            "metricHeaders": [GoogleAnalyticsAdminV1betaAccessMetricHeader.from_dict(_item) for _item in obj["metricHeaders"]] if obj.get("metricHeaders") is not None else None,
            "quota": GoogleAnalyticsAdminV1betaAccessQuota.from_dict(obj["quota"]) if obj.get("quota") is not None else None,
            "rowCount": obj.get("rowCount"),
            "rows": [GoogleAnalyticsAdminV1betaAccessRow.from_dict(_item) for _item in obj["rows"]] if obj.get("rows") is not None else None
        })
        return _obj



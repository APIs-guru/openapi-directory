# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest(BaseModel):
    """
    Request message for SearchChangeHistoryEvents RPC.
    """ # noqa: E501
    action: Optional[List[StrictStr]] = Field(default=None, description="Optional. If set, only return changes that match one or more of these types of actions.")
    actor_email: Optional[List[StrictStr]] = Field(default=None, description="Optional. If set, only return changes if they are made by a user in this list.", alias="actorEmail")
    earliest_change_time: Optional[StrictStr] = Field(default=None, description="Optional. If set, only return changes made after this time (inclusive).", alias="earliestChangeTime")
    latest_change_time: Optional[StrictStr] = Field(default=None, description="Optional. If set, only return changes made before this time (inclusive).", alias="latestChangeTime")
    page_size: Optional[StrictInt] = Field(default=None, description="Optional. The maximum number of ChangeHistoryEvent items to return. The service may return fewer than this value, even if there are additional pages. If unspecified, at most 50 items will be returned. The maximum value is 200 (higher values will be coerced to the maximum).", alias="pageSize")
    page_token: Optional[StrictStr] = Field(default=None, description="Optional. A page token, received from a previous `SearchChangeHistoryEvents` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `SearchChangeHistoryEvents` must match the call that provided the page token.", alias="pageToken")
    var_property: Optional[StrictStr] = Field(default=None, description="Optional. Resource name for a child property. If set, only return changes made to this property or its child resources. Format: properties/{propertyId} Example: \"properties/100\"", alias="property")
    resource_type: Optional[List[StrictStr]] = Field(default=None, description="Optional. If set, only return changes if they are for a resource that matches at least one of these types.", alias="resourceType")
    __properties: ClassVar[List[str]] = ["action", "actorEmail", "earliestChangeTime", "latestChangeTime", "pageSize", "pageToken", "property", "resourceType"]

    @field_validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ACTION_TYPE_UNSPECIFIED', 'CREATED', 'UPDATED', 'DELETED']):
                raise ValueError("each list item must be one of ('ACTION_TYPE_UNSPECIFIED', 'CREATED', 'UPDATED', 'DELETED')")
        return value

    @field_validator('resource_type')
    def resource_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['CHANGE_HISTORY_RESOURCE_TYPE_UNSPECIFIED', 'ACCOUNT', 'PROPERTY', 'FIREBASE_LINK', 'GOOGLE_ADS_LINK', 'GOOGLE_SIGNALS_SETTINGS', 'CONVERSION_EVENT', 'MEASUREMENT_PROTOCOL_SECRET', 'DATA_RETENTION_SETTINGS', 'DISPLAY_VIDEO_360_ADVERTISER_LINK', 'DISPLAY_VIDEO_360_ADVERTISER_LINK_PROPOSAL', 'DATA_STREAM', 'ATTRIBUTION_SETTINGS']):
                raise ValueError("each list item must be one of ('CHANGE_HISTORY_RESOURCE_TYPE_UNSPECIFIED', 'ACCOUNT', 'PROPERTY', 'FIREBASE_LINK', 'GOOGLE_ADS_LINK', 'GOOGLE_SIGNALS_SETTINGS', 'CONVERSION_EVENT', 'MEASUREMENT_PROTOCOL_SECRET', 'DATA_RETENTION_SETTINGS', 'DISPLAY_VIDEO_360_ADVERTISER_LINK', 'DISPLAY_VIDEO_360_ADVERTISER_LINK_PROPOSAL', 'DATA_STREAM', 'ATTRIBUTION_SETTINGS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "actorEmail": obj.get("actorEmail"),
            "earliestChangeTime": obj.get("earliestChangeTime"),
            "latestChangeTime": obj.get("latestChangeTime"),
            "pageSize": obj.get("pageSize"),
            "pageToken": obj.get("pageToken"),
            "property": obj.get("property"),
            "resourceType": obj.get("resourceType")
        })
        return _obj



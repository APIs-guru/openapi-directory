# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_analytics_admin_v1beta_account import GoogleAnalyticsAdminV1betaAccount
from openapi_client.models.google_analytics_admin_v1beta_conversion_event import GoogleAnalyticsAdminV1betaConversionEvent
from openapi_client.models.google_analytics_admin_v1beta_data_retention_settings import GoogleAnalyticsAdminV1betaDataRetentionSettings
from openapi_client.models.google_analytics_admin_v1beta_data_stream import GoogleAnalyticsAdminV1betaDataStream
from openapi_client.models.google_analytics_admin_v1beta_firebase_link import GoogleAnalyticsAdminV1betaFirebaseLink
from openapi_client.models.google_analytics_admin_v1beta_google_ads_link import GoogleAnalyticsAdminV1betaGoogleAdsLink
from openapi_client.models.google_analytics_admin_v1beta_measurement_protocol_secret import GoogleAnalyticsAdminV1betaMeasurementProtocolSecret
from openapi_client.models.google_analytics_admin_v1beta_property import GoogleAnalyticsAdminV1betaProperty
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1betaChangeHistoryChangeChangeHistoryResource(BaseModel):
    """
    A snapshot of a resource as before or after the result of a change in change history.
    """ # noqa: E501
    account: Optional[GoogleAnalyticsAdminV1betaAccount] = None
    conversion_event: Optional[GoogleAnalyticsAdminV1betaConversionEvent] = Field(default=None, alias="conversionEvent")
    data_retention_settings: Optional[GoogleAnalyticsAdminV1betaDataRetentionSettings] = Field(default=None, alias="dataRetentionSettings")
    data_stream: Optional[GoogleAnalyticsAdminV1betaDataStream] = Field(default=None, alias="dataStream")
    firebase_link: Optional[GoogleAnalyticsAdminV1betaFirebaseLink] = Field(default=None, alias="firebaseLink")
    google_ads_link: Optional[GoogleAnalyticsAdminV1betaGoogleAdsLink] = Field(default=None, alias="googleAdsLink")
    measurement_protocol_secret: Optional[GoogleAnalyticsAdminV1betaMeasurementProtocolSecret] = Field(default=None, alias="measurementProtocolSecret")
    var_property: Optional[GoogleAnalyticsAdminV1betaProperty] = Field(default=None, alias="property")
    __properties: ClassVar[List[str]] = ["account", "conversionEvent", "dataRetentionSettings", "dataStream", "firebaseLink", "googleAdsLink", "measurementProtocolSecret", "property"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1betaChangeHistoryChangeChangeHistoryResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conversion_event
        if self.conversion_event:
            _dict['conversionEvent'] = self.conversion_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_retention_settings
        if self.data_retention_settings:
            _dict['dataRetentionSettings'] = self.data_retention_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_stream
        if self.data_stream:
            _dict['dataStream'] = self.data_stream.to_dict()
        # override the default output from pydantic by calling `to_dict()` of firebase_link
        if self.firebase_link:
            _dict['firebaseLink'] = self.firebase_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google_ads_link
        if self.google_ads_link:
            _dict['googleAdsLink'] = self.google_ads_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of measurement_protocol_secret
        if self.measurement_protocol_secret:
            _dict['measurementProtocolSecret'] = self.measurement_protocol_secret.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_property
        if self.var_property:
            _dict['property'] = self.var_property.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1betaChangeHistoryChangeChangeHistoryResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": GoogleAnalyticsAdminV1betaAccount.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "conversionEvent": GoogleAnalyticsAdminV1betaConversionEvent.from_dict(obj["conversionEvent"]) if obj.get("conversionEvent") is not None else None,
            "dataRetentionSettings": GoogleAnalyticsAdminV1betaDataRetentionSettings.from_dict(obj["dataRetentionSettings"]) if obj.get("dataRetentionSettings") is not None else None,
            "dataStream": GoogleAnalyticsAdminV1betaDataStream.from_dict(obj["dataStream"]) if obj.get("dataStream") is not None else None,
            "firebaseLink": GoogleAnalyticsAdminV1betaFirebaseLink.from_dict(obj["firebaseLink"]) if obj.get("firebaseLink") is not None else None,
            "googleAdsLink": GoogleAnalyticsAdminV1betaGoogleAdsLink.from_dict(obj["googleAdsLink"]) if obj.get("googleAdsLink") is not None else None,
            "measurementProtocolSecret": GoogleAnalyticsAdminV1betaMeasurementProtocolSecret.from_dict(obj["measurementProtocolSecret"]) if obj.get("measurementProtocolSecret") is not None else None,
            "property": GoogleAnalyticsAdminV1betaProperty.from_dict(obj["property"]) if obj.get("property") is not None else None
        })
        return _obj



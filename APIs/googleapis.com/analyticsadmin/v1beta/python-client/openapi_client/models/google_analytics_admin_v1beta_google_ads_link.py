# coding: utf-8

"""
    Google Analytics Admin API

    Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsAdminV1betaGoogleAdsLink(BaseModel):
    """
    A link between a GA4 property and a Google Ads account.
    """ # noqa: E501
    ads_personalization_enabled: Optional[StrictBool] = Field(default=None, description="Enable personalized advertising features with this integration. Automatically publish my Google Analytics audience lists and Google Analytics remarketing events/parameters to the linked Google Ads account. If this field is not set on create/update, it will be defaulted to true.", alias="adsPersonalizationEnabled")
    can_manage_clients: Optional[StrictBool] = Field(default=None, description="Output only. If true, this link is for a Google Ads manager account.", alias="canManageClients")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when this link was originally created.", alias="createTime")
    creator_email_address: Optional[StrictStr] = Field(default=None, description="Output only. Email address of the user that created the link. An empty string will be returned if the email address can't be retrieved.", alias="creatorEmailAddress")
    customer_id: Optional[StrictStr] = Field(default=None, description="Immutable. Google Ads customer ID.", alias="customerId")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Format: properties/{propertyId}/googleAdsLinks/{googleAdsLinkId} Note: googleAdsLinkId is not the Google Ads customer ID.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when this link was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["adsPersonalizationEnabled", "canManageClients", "createTime", "creatorEmailAddress", "customerId", "name", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1betaGoogleAdsLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "can_manage_clients",
            "create_time",
            "creator_email_address",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsAdminV1betaGoogleAdsLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adsPersonalizationEnabled": obj.get("adsPersonalizationEnabled"),
            "canManageClients": obj.get("canManageClients"),
            "createTime": obj.get("createTime"),
            "creatorEmailAddress": obj.get("creatorEmailAddress"),
            "customerId": obj.get("customerId"),
            "name": obj.get("name"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



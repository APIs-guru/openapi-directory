# coding: utf-8

"""
    Pub/Sub Lite API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pub_sub_config import PubSubConfig
from typing import Optional, Set
from typing_extensions import Self

class ExportConfig(BaseModel):
    """
    Configuration for a Pub/Sub Lite subscription that writes messages to a destination. User subscriber clients must not connect to this subscription.
    """ # noqa: E501
    current_state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the export, which may be different to the desired state due to errors. This field is output only.", alias="currentState")
    dead_letter_topic: Optional[StrictStr] = Field(default=None, description="Optional. The name of an optional Pub/Sub Lite topic to publish messages that can not be exported to the destination. For example, the message can not be published to the Pub/Sub service because it does not satisfy the constraints documented at https://cloud.google.com/pubsub/docs/publisher. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}. Must be within the same project and location as the subscription. The topic may be changed or removed.", alias="deadLetterTopic")
    desired_state: Optional[StrictStr] = Field(default=None, description="The desired state of this export. Setting this to values other than `ACTIVE` and `PAUSED` will result in an error.", alias="desiredState")
    pubsub_config: Optional[PubSubConfig] = Field(default=None, alias="pubsubConfig")
    __properties: ClassVar[List[str]] = ["currentState", "deadLetterTopic", "desiredState", "pubsubConfig"]

    @field_validator('current_state')
    def current_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'PAUSED', 'PERMISSION_DENIED', 'NOT_FOUND']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'PAUSED', 'PERMISSION_DENIED', 'NOT_FOUND')")
        return value

    @field_validator('desired_state')
    def desired_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'PAUSED', 'PERMISSION_DENIED', 'NOT_FOUND']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'PAUSED', 'PERMISSION_DENIED', 'NOT_FOUND')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "current_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pubsub_config
        if self.pubsub_config:
            _dict['pubsubConfig'] = self.pubsub_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentState": obj.get("currentState"),
            "deadLetterTopic": obj.get("deadLetterTopic"),
            "desiredState": obj.get("desiredState"),
            "pubsubConfig": PubSubConfig.from_dict(obj["pubsubConfig"]) if obj.get("pubsubConfig") is not None else None
        })
        return _obj



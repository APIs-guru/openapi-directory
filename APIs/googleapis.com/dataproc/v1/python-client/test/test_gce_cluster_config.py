# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.gce_cluster_config import GceClusterConfig

class TestGceClusterConfig(unittest.TestCase):
    """GceClusterConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GceClusterConfig:
        """Test GceClusterConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GceClusterConfig`
        """
        model = GceClusterConfig()
        if include_optional:
            return GceClusterConfig(
                confidential_instance_config = openapi_client.models.confidential_instance_config.ConfidentialInstanceConfig(
                    enable_confidential_compute = True, ),
                internal_ip_only = True,
                metadata = {
                    'key' : ''
                    },
                network_uri = '',
                node_group_affinity = openapi_client.models.node_group_affinity.NodeGroupAffinity(
                    node_group_uri = '', ),
                private_ipv6_google_access = 'PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED',
                reservation_affinity = openapi_client.models.reservation_affinity.ReservationAffinity(
                    consume_reservation_type = 'TYPE_UNSPECIFIED', 
                    key = '', 
                    values = [
                        ''
                        ], ),
                service_account = '',
                service_account_scopes = [
                    ''
                    ],
                shielded_instance_config = openapi_client.models.shielded_instance_config.ShieldedInstanceConfig(
                    enable_integrity_monitoring = True, 
                    enable_secure_boot = True, 
                    enable_vtpm = True, ),
                subnetwork_uri = '',
                tags = [
                    ''
                    ],
                zone_uri = ''
            )
        else:
            return GceClusterConfig(
        )
        """

    def testGceClusterConfig(self):
        """Test GceClusterConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

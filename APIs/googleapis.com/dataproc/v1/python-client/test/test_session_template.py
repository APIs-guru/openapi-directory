# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.session_template import SessionTemplate

class TestSessionTemplate(unittest.TestCase):
    """SessionTemplate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SessionTemplate:
        """Test SessionTemplate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SessionTemplate`
        """
        model = SessionTemplate()
        if include_optional:
            return SessionTemplate(
                create_time = '',
                creator = '',
                description = '',
                environment_config = openapi_client.models.environment_config.EnvironmentConfig(
                    execution_config = openapi_client.models.execution_config.ExecutionConfig(
                        idle_ttl = '', 
                        kms_key = '', 
                        network_tags = [
                            ''
                            ], 
                        network_uri = '', 
                        service_account = '', 
                        staging_bucket = '', 
                        subnetwork_uri = '', 
                        ttl = '', ), 
                    peripherals_config = openapi_client.models.peripherals_config.PeripheralsConfig(
                        metastore_service = '', 
                        spark_history_server_config = openapi_client.models.spark_history_server_config.SparkHistoryServerConfig(
                            dataproc_cluster = '', ), ), ),
                jupyter_session = openapi_client.models.jupyter_config.JupyterConfig(
                    display_name = '', 
                    kernel = 'KERNEL_UNSPECIFIED', ),
                labels = {
                    'key' : ''
                    },
                name = '',
                runtime_config = openapi_client.models.runtime_config.RuntimeConfig(
                    container_image = '', 
                    properties = {
                        'key' : ''
                        }, 
                    repository_config = openapi_client.models.repository_config.RepositoryConfig(
                        pypi_repository_config = openapi_client.models.py_pi_repository_config.PyPiRepositoryConfig(
                            pypi_repository = '', ), ), 
                    version = '', ),
                update_time = '',
                uuid = ''
            )
        else:
            return SessionTemplate(
        )
        """

    def testSessionTemplate(self):
        """Test SessionTemplate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

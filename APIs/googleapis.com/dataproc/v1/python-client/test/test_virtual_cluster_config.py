# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.virtual_cluster_config import VirtualClusterConfig

class TestVirtualClusterConfig(unittest.TestCase):
    """VirtualClusterConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VirtualClusterConfig:
        """Test VirtualClusterConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VirtualClusterConfig`
        """
        model = VirtualClusterConfig()
        if include_optional:
            return VirtualClusterConfig(
                auxiliary_services_config = openapi_client.models.auxiliary_services_config.AuxiliaryServicesConfig(
                    metastore_config = openapi_client.models.metastore_config.MetastoreConfig(
                        dataproc_metastore_service = '', ), 
                    spark_history_server_config = openapi_client.models.spark_history_server_config.SparkHistoryServerConfig(
                        dataproc_cluster = '', ), ),
                kubernetes_cluster_config = openapi_client.models.kubernetes_cluster_config.KubernetesClusterConfig(
                    gke_cluster_config = openapi_client.models.gke_cluster_config.GkeClusterConfig(
                        gke_cluster_target = '', 
                        namespaced_gke_deployment_target = openapi_client.models.namespaced_gke_deployment_target.NamespacedGkeDeploymentTarget(
                            cluster_namespace = '', 
                            target_gke_cluster = '', ), 
                        node_pool_target = [
                            openapi_client.models.gke_node_pool_target.GkeNodePoolTarget(
                                node_pool = '', 
                                node_pool_config = openapi_client.models.gke_node_pool_config.GkeNodePoolConfig(
                                    autoscaling = openapi_client.models.gke_node_pool_autoscaling_config.GkeNodePoolAutoscalingConfig(
                                        max_node_count = 56, 
                                        min_node_count = 56, ), 
                                    config = openapi_client.models.gke_node_config.GkeNodeConfig(
                                        accelerators = [
                                            openapi_client.models.gke_node_pool_accelerator_config.GkeNodePoolAcceleratorConfig(
                                                accelerator_count = '', 
                                                accelerator_type = '', 
                                                gpu_partition_size = '', )
                                            ], 
                                        boot_disk_kms_key = '', 
                                        local_ssd_count = 56, 
                                        machine_type = '', 
                                        min_cpu_platform = '', 
                                        preemptible = True, 
                                        spot = True, ), 
                                    locations = [
                                        ''
                                        ], ), 
                                roles = [
                                    'ROLE_UNSPECIFIED'
                                    ], )
                            ], ), 
                    kubernetes_namespace = '', 
                    kubernetes_software_config = openapi_client.models.kubernetes_software_config.KubernetesSoftwareConfig(
                        component_version = {
                            'key' : ''
                            }, 
                        properties = {
                            'key' : ''
                            }, ), ),
                staging_bucket = ''
            )
        else:
            return VirtualClusterConfig(
        )
        """

    def testVirtualClusterConfig(self):
        """Test VirtualClusterConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

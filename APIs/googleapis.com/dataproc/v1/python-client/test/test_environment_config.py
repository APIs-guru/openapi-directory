# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.environment_config import EnvironmentConfig

class TestEnvironmentConfig(unittest.TestCase):
    """EnvironmentConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EnvironmentConfig:
        """Test EnvironmentConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EnvironmentConfig`
        """
        model = EnvironmentConfig()
        if include_optional:
            return EnvironmentConfig(
                execution_config = openapi_client.models.execution_config.ExecutionConfig(
                    idle_ttl = '', 
                    kms_key = '', 
                    network_tags = [
                        ''
                        ], 
                    network_uri = '', 
                    service_account = '', 
                    staging_bucket = '', 
                    subnetwork_uri = '', 
                    ttl = '', ),
                peripherals_config = openapi_client.models.peripherals_config.PeripheralsConfig(
                    metastore_service = '', 
                    spark_history_server_config = openapi_client.models.spark_history_server_config.SparkHistoryServerConfig(
                        dataproc_cluster = '', ), )
            )
        else:
            return EnvironmentConfig(
        )
        """

    def testEnvironmentConfig(self):
        """Test EnvironmentConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.auxiliary_node_group import AuxiliaryNodeGroup

class TestAuxiliaryNodeGroup(unittest.TestCase):
    """AuxiliaryNodeGroup unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AuxiliaryNodeGroup:
        """Test AuxiliaryNodeGroup
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AuxiliaryNodeGroup`
        """
        model = AuxiliaryNodeGroup()
        if include_optional:
            return AuxiliaryNodeGroup(
                node_group = openapi_client.models.node_group.NodeGroup(
                    labels = {
                        'key' : ''
                        }, 
                    name = '', 
                    node_group_config = openapi_client.models.instance_group_config.InstanceGroupConfig(
                        accelerators = [
                            openapi_client.models.accelerator_config.AcceleratorConfig(
                                accelerator_count = 56, 
                                accelerator_type_uri = '', )
                            ], 
                        disk_config = openapi_client.models.disk_config.DiskConfig(
                            boot_disk_size_gb = 56, 
                            boot_disk_type = '', 
                            local_ssd_interface = '', 
                            num_local_ssds = 56, ), 
                        image_uri = '', 
                        instance_flexibility_policy = openapi_client.models.instance_flexibility_policy.InstanceFlexibilityPolicy(
                            instance_selection_list = [
                                openapi_client.models.instance_selection.InstanceSelection(
                                    machine_types = [
                                        ''
                                        ], 
                                    rank = 56, )
                                ], 
                            instance_selection_results = [
                                openapi_client.models.instance_selection_result.InstanceSelectionResult(
                                    machine_type = '', 
                                    vm_count = 56, )
                                ], ), 
                        instance_names = [
                            ''
                            ], 
                        instance_references = [
                            openapi_client.models.instance_reference.InstanceReference(
                                instance_id = '', 
                                instance_name = '', 
                                public_ecies_key = '', 
                                public_key = '', )
                            ], 
                        is_preemptible = True, 
                        machine_type_uri = '', 
                        managed_group_config = openapi_client.models.managed_group_config.ManagedGroupConfig(
                            instance_group_manager_name = '', 
                            instance_group_manager_uri = '', 
                            instance_template_name = '', ), 
                        min_cpu_platform = '', 
                        min_num_instances = 56, 
                        num_instances = 56, 
                        preemptibility = 'PREEMPTIBILITY_UNSPECIFIED', 
                        startup_config = openapi_client.models.startup_config.StartupConfig(
                            required_registration_fraction = 1.337, ), ), 
                    roles = [
                        'ROLE_UNSPECIFIED'
                        ], ),
                node_group_id = ''
            )
        else:
            return AuxiliaryNodeGroup(
        )
        """

    def testAuxiliaryNodeGroup(self):
        """Test AuxiliaryNodeGroup"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

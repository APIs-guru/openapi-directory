# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.ordered_job import OrderedJob

class TestOrderedJob(unittest.TestCase):
    """OrderedJob unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrderedJob:
        """Test OrderedJob
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrderedJob`
        """
        model = OrderedJob()
        if include_optional:
            return OrderedJob(
                flink_job = openapi_client.models.flink_job.FlinkJob(
                    args = [
                        ''
                        ], 
                    jar_file_uris = [
                        ''
                        ], 
                    logging_config = openapi_client.models.logging_config.LoggingConfig(
                        driver_log_levels = {
                            'LEVEL_UNSPECIFIED' : 'LEVEL_UNSPECIFIED'
                            }, ), 
                    main_class = '', 
                    main_jar_file_uri = '', 
                    properties = {
                        'key' : ''
                        }, 
                    savepoint_uri = '', ),
                hadoop_job = openapi_client.models.hadoop_job.HadoopJob(
                    archive_uris = [
                        ''
                        ], 
                    args = [
                        ''
                        ], 
                    file_uris = [
                        ''
                        ], 
                    jar_file_uris = [
                        ''
                        ], 
                    logging_config = openapi_client.models.logging_config.LoggingConfig(
                        driver_log_levels = {
                            'LEVEL_UNSPECIFIED' : 'LEVEL_UNSPECIFIED'
                            }, ), 
                    main_class = '', 
                    main_jar_file_uri = '', 
                    properties = {
                        'key' : ''
                        }, ),
                hive_job = openapi_client.models.hive_job.HiveJob(
                    continue_on_failure = True, 
                    jar_file_uris = [
                        ''
                        ], 
                    properties = {
                        'key' : ''
                        }, 
                    query_file_uri = '', 
                    query_list = openapi_client.models.query_list.QueryList(
                        queries = [
                            ''
                            ], ), 
                    script_variables = {
                        'key' : ''
                        }, ),
                labels = {
                    'key' : ''
                    },
                pig_job = openapi_client.models.pig_job.PigJob(
                    continue_on_failure = True, 
                    jar_file_uris = [
                        ''
                        ], 
                    logging_config = openapi_client.models.logging_config.LoggingConfig(
                        driver_log_levels = {
                            'LEVEL_UNSPECIFIED' : 'LEVEL_UNSPECIFIED'
                            }, ), 
                    properties = {
                        'key' : ''
                        }, 
                    query_file_uri = '', 
                    query_list = openapi_client.models.query_list.QueryList(
                        queries = [
                            ''
                            ], ), 
                    script_variables = {
                        'key' : ''
                        }, ),
                prerequisite_step_ids = [
                    ''
                    ],
                presto_job = openapi_client.models.presto_job.PrestoJob(
                    client_tags = [
                        ''
                        ], 
                    continue_on_failure = True, 
                    logging_config = openapi_client.models.logging_config.LoggingConfig(
                        driver_log_levels = {
                            'LEVEL_UNSPECIFIED' : 'LEVEL_UNSPECIFIED'
                            }, ), 
                    output_format = '', 
                    properties = {
                        'key' : ''
                        }, 
                    query_file_uri = '', 
                    query_list = openapi_client.models.query_list.QueryList(
                        queries = [
                            ''
                            ], ), ),
                pyspark_job = openapi_client.models.py_spark_job.PySparkJob(
                    archive_uris = [
                        ''
                        ], 
                    args = [
                        ''
                        ], 
                    file_uris = [
                        ''
                        ], 
                    jar_file_uris = [
                        ''
                        ], 
                    logging_config = openapi_client.models.logging_config.LoggingConfig(
                        driver_log_levels = {
                            'LEVEL_UNSPECIFIED' : 'LEVEL_UNSPECIFIED'
                            }, ), 
                    main_python_file_uri = '', 
                    properties = {
                        'key' : ''
                        }, 
                    python_file_uris = [
                        ''
                        ], ),
                scheduling = openapi_client.models.job_scheduling.JobScheduling(
                    max_failures_per_hour = 56, 
                    max_failures_total = 56, ),
                spark_job = openapi_client.models.spark_job.SparkJob(
                    archive_uris = [
                        ''
                        ], 
                    args = [
                        ''
                        ], 
                    file_uris = [
                        ''
                        ], 
                    jar_file_uris = [
                        ''
                        ], 
                    logging_config = openapi_client.models.logging_config.LoggingConfig(
                        driver_log_levels = {
                            'LEVEL_UNSPECIFIED' : 'LEVEL_UNSPECIFIED'
                            }, ), 
                    main_class = '', 
                    main_jar_file_uri = '', 
                    properties = {
                        'key' : ''
                        }, ),
                spark_r_job = openapi_client.models.spark_r_job.SparkRJob(
                    archive_uris = [
                        ''
                        ], 
                    args = [
                        ''
                        ], 
                    file_uris = [
                        ''
                        ], 
                    logging_config = openapi_client.models.logging_config.LoggingConfig(
                        driver_log_levels = {
                            'LEVEL_UNSPECIFIED' : 'LEVEL_UNSPECIFIED'
                            }, ), 
                    main_r_file_uri = '', 
                    properties = {
                        'key' : ''
                        }, ),
                spark_sql_job = openapi_client.models.spark_sql_job.SparkSqlJob(
                    jar_file_uris = [
                        ''
                        ], 
                    logging_config = openapi_client.models.logging_config.LoggingConfig(
                        driver_log_levels = {
                            'LEVEL_UNSPECIFIED' : 'LEVEL_UNSPECIFIED'
                            }, ), 
                    properties = {
                        'key' : ''
                        }, 
                    query_file_uri = '', 
                    query_list = openapi_client.models.query_list.QueryList(
                        queries = [
                            ''
                            ], ), 
                    script_variables = {
                        'key' : ''
                        }, ),
                step_id = '',
                trino_job = openapi_client.models.trino_job.TrinoJob(
                    client_tags = [
                        ''
                        ], 
                    continue_on_failure = True, 
                    logging_config = openapi_client.models.logging_config.LoggingConfig(
                        driver_log_levels = {
                            'LEVEL_UNSPECIFIED' : 'LEVEL_UNSPECIFIED'
                            }, ), 
                    output_format = '', 
                    properties = {
                        'key' : ''
                        }, 
                    query_file_uri = '', 
                    query_list = openapi_client.models.query_list.QueryList(
                        queries = [
                            ''
                            ], ), )
            )
        else:
            return OrderedJob(
        )
        """

    def testOrderedJob(self):
        """Test OrderedJob"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

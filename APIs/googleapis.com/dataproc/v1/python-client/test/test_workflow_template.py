# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.workflow_template import WorkflowTemplate

class TestWorkflowTemplate(unittest.TestCase):
    """WorkflowTemplate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WorkflowTemplate:
        """Test WorkflowTemplate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WorkflowTemplate`
        """
        model = WorkflowTemplate()
        if include_optional:
            return WorkflowTemplate(
                create_time = '',
                dag_timeout = '',
                encryption_config = openapi_client.models.google_cloud_dataproc_v1_workflow_template_encryption_config.GoogleCloudDataprocV1WorkflowTemplateEncryptionConfig(
                    kms_key = '', ),
                id = '',
                jobs = [
                    openapi_client.models.ordered_job.OrderedJob(
                        flink_job = openapi_client.models.flink_job.FlinkJob(
                            args = [
                                ''
                                ], 
                            jar_file_uris = [
                                ''
                                ], 
                            logging_config = openapi_client.models.logging_config.LoggingConfig(
                                driver_log_levels = {
                                    'LEVEL_UNSPECIFIED' : 'LEVEL_UNSPECIFIED'
                                    }, ), 
                            main_class = '', 
                            main_jar_file_uri = '', 
                            properties = {
                                'key' : ''
                                }, 
                            savepoint_uri = '', ), 
                        hadoop_job = openapi_client.models.hadoop_job.HadoopJob(
                            archive_uris = [
                                ''
                                ], 
                            file_uris = [
                                ''
                                ], 
                            main_class = '', 
                            main_jar_file_uri = '', ), 
                        hive_job = openapi_client.models.hive_job.HiveJob(
                            continue_on_failure = True, 
                            query_file_uri = '', 
                            query_list = openapi_client.models.query_list.QueryList(
                                queries = [
                                    ''
                                    ], ), 
                            script_variables = {
                                'key' : ''
                                }, ), 
                        labels = {
                            'key' : ''
                            }, 
                        pig_job = openapi_client.models.pig_job.PigJob(
                            continue_on_failure = True, 
                            query_file_uri = '', ), 
                        prerequisite_step_ids = [
                            ''
                            ], 
                        presto_job = openapi_client.models.presto_job.PrestoJob(
                            client_tags = [
                                ''
                                ], 
                            continue_on_failure = True, 
                            output_format = '', 
                            query_file_uri = '', ), 
                        pyspark_job = openapi_client.models.py_spark_job.PySparkJob(
                            main_python_file_uri = '', 
                            python_file_uris = [
                                ''
                                ], ), 
                        scheduling = openapi_client.models.job_scheduling.JobScheduling(
                            max_failures_per_hour = 56, 
                            max_failures_total = 56, ), 
                        spark_job = openapi_client.models.spark_job.SparkJob(
                            main_class = '', 
                            main_jar_file_uri = '', ), 
                        spark_r_job = openapi_client.models.spark_r_job.SparkRJob(
                            main_r_file_uri = '', ), 
                        spark_sql_job = openapi_client.models.spark_sql_job.SparkSqlJob(
                            query_file_uri = '', ), 
                        step_id = '', 
                        trino_job = openapi_client.models.trino_job.TrinoJob(
                            continue_on_failure = True, 
                            output_format = '', 
                            query_file_uri = '', ), )
                    ],
                labels = {
                    'key' : ''
                    },
                name = '',
                parameters = [
                    openapi_client.models.template_parameter.TemplateParameter(
                        description = '', 
                        fields = [
                            ''
                            ], 
                        name = '', 
                        validation = openapi_client.models.parameter_validation.ParameterValidation(
                            regex = openapi_client.models.regex_validation.RegexValidation(
                                regexes = [
                                    ''
                                    ], ), 
                            values = openapi_client.models.value_validation.ValueValidation(), ), )
                    ],
                placement = openapi_client.models.workflow_template_placement.WorkflowTemplatePlacement(
                    cluster_selector = openapi_client.models.cluster_selector.ClusterSelector(
                        cluster_labels = {
                            'key' : ''
                            }, 
                        zone = '', ), 
                    managed_cluster = openapi_client.models.managed_cluster.ManagedCluster(
                        cluster_name = '', 
                        config = openapi_client.models.cluster_config.ClusterConfig(
                            autoscaling_config = openapi_client.models.autoscaling_config.AutoscalingConfig(
                                policy_uri = '', ), 
                            auxiliary_node_groups = [
                                openapi_client.models.auxiliary_node_group.AuxiliaryNodeGroup(
                                    node_group = openapi_client.models.node_group.NodeGroup(
                                        labels = {
                                            'key' : ''
                                            }, 
                                        name = '', 
                                        node_group_config = openapi_client.models.instance_group_config.InstanceGroupConfig(
                                            accelerators = [
                                                openapi_client.models.accelerator_config.AcceleratorConfig(
                                                    accelerator_count = 56, 
                                                    accelerator_type_uri = '', )
                                                ], 
                                            disk_config = openapi_client.models.disk_config.DiskConfig(
                                                boot_disk_size_gb = 56, 
                                                boot_disk_type = '', 
                                                local_ssd_interface = '', 
                                                num_local_ssds = 56, ), 
                                            image_uri = '', 
                                            instance_flexibility_policy = openapi_client.models.instance_flexibility_policy.InstanceFlexibilityPolicy(
                                                instance_selection_list = [
                                                    openapi_client.models.instance_selection.InstanceSelection(
                                                        machine_types = [
                                                            ''
                                                            ], 
                                                        rank = 56, )
                                                    ], 
                                                instance_selection_results = [
                                                    openapi_client.models.instance_selection_result.InstanceSelectionResult(
                                                        machine_type = '', 
                                                        vm_count = 56, )
                                                    ], ), 
                                            instance_names = [
                                                ''
                                                ], 
                                            instance_references = [
                                                openapi_client.models.instance_reference.InstanceReference(
                                                    instance_id = '', 
                                                    instance_name = '', 
                                                    public_ecies_key = '', 
                                                    public_key = '', )
                                                ], 
                                            is_preemptible = True, 
                                            machine_type_uri = '', 
                                            managed_group_config = openapi_client.models.managed_group_config.ManagedGroupConfig(
                                                instance_group_manager_name = '', 
                                                instance_group_manager_uri = '', 
                                                instance_template_name = '', ), 
                                            min_cpu_platform = '', 
                                            min_num_instances = 56, 
                                            num_instances = 56, 
                                            preemptibility = 'PREEMPTIBILITY_UNSPECIFIED', 
                                            startup_config = openapi_client.models.startup_config.StartupConfig(
                                                required_registration_fraction = 1.337, ), ), 
                                        roles = [
                                            'ROLE_UNSPECIFIED'
                                            ], ), 
                                    node_group_id = '', )
                                ], 
                            config_bucket = '', 
                            dataproc_metric_config = openapi_client.models.dataproc_metric_config.DataprocMetricConfig(
                                metrics = [
                                    openapi_client.models.metric.Metric(
                                        metric_overrides = [
                                            ''
                                            ], 
                                        metric_source = 'METRIC_SOURCE_UNSPECIFIED', )
                                    ], ), 
                            encryption_config = openapi_client.models.encryption_config.EncryptionConfig(
                                gce_pd_kms_key_name = '', 
                                kms_key = '', ), 
                            endpoint_config = openapi_client.models.endpoint_config.EndpointConfig(
                                enable_http_port_access = True, 
                                http_ports = {
                                    'key' : ''
                                    }, ), 
                            gce_cluster_config = openapi_client.models.gce_cluster_config.GceClusterConfig(
                                confidential_instance_config = openapi_client.models.confidential_instance_config.ConfidentialInstanceConfig(
                                    enable_confidential_compute = True, ), 
                                internal_ip_only = True, 
                                metadata = {
                                    'key' : ''
                                    }, 
                                network_uri = '', 
                                node_group_affinity = openapi_client.models.node_group_affinity.NodeGroupAffinity(
                                    node_group_uri = '', ), 
                                private_ipv6_google_access = 'PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED', 
                                reservation_affinity = openapi_client.models.reservation_affinity.ReservationAffinity(
                                    consume_reservation_type = 'TYPE_UNSPECIFIED', 
                                    key = '', 
                                    values = [
                                        ''
                                        ], ), 
                                service_account = '', 
                                service_account_scopes = [
                                    ''
                                    ], 
                                shielded_instance_config = openapi_client.models.shielded_instance_config.ShieldedInstanceConfig(
                                    enable_integrity_monitoring = True, 
                                    enable_secure_boot = True, 
                                    enable_vtpm = True, ), 
                                subnetwork_uri = '', 
                                tags = [
                                    ''
                                    ], 
                                zone_uri = '', ), 
                            gke_cluster_config = openapi_client.models.gke_cluster_config.GkeClusterConfig(
                                gke_cluster_target = '', 
                                namespaced_gke_deployment_target = openapi_client.models.namespaced_gke_deployment_target.NamespacedGkeDeploymentTarget(
                                    cluster_namespace = '', 
                                    target_gke_cluster = '', ), 
                                node_pool_target = [
                                    openapi_client.models.gke_node_pool_target.GkeNodePoolTarget(
                                        node_pool = '', 
                                        node_pool_config = openapi_client.models.gke_node_pool_config.GkeNodePoolConfig(
                                            autoscaling = openapi_client.models.gke_node_pool_autoscaling_config.GkeNodePoolAutoscalingConfig(
                                                max_node_count = 56, 
                                                min_node_count = 56, ), 
                                            locations = [
                                                ''
                                                ], ), )
                                    ], ), 
                            initialization_actions = [
                                openapi_client.models.node_initialization_action.NodeInitializationAction(
                                    executable_file = '', 
                                    execution_timeout = '', )
                                ], 
                            lifecycle_config = openapi_client.models.lifecycle_config.LifecycleConfig(
                                auto_delete_time = '', 
                                auto_delete_ttl = '', 
                                idle_delete_ttl = '', 
                                idle_start_time = '', ), 
                            master_config = openapi_client.models.instance_group_config.InstanceGroupConfig(
                                image_uri = '', 
                                is_preemptible = True, 
                                machine_type_uri = '', 
                                min_cpu_platform = '', 
                                min_num_instances = 56, 
                                num_instances = 56, 
                                preemptibility = 'PREEMPTIBILITY_UNSPECIFIED', ), 
                            metastore_config = openapi_client.models.metastore_config.MetastoreConfig(
                                dataproc_metastore_service = '', ), 
                            secondary_worker_config = , 
                            security_config = openapi_client.models.security_config.SecurityConfig(
                                identity_config = openapi_client.models.identity_config.IdentityConfig(
                                    user_service_account_mapping = {
                                        'key' : ''
                                        }, ), 
                                kerberos_config = openapi_client.models.kerberos_config.KerberosConfig(
                                    cross_realm_trust_admin_server = '', 
                                    cross_realm_trust_kdc = '', 
                                    cross_realm_trust_realm = '', 
                                    cross_realm_trust_shared_password_uri = '', 
                                    enable_kerberos = True, 
                                    kdc_db_key_uri = '', 
                                    key_password_uri = '', 
                                    keystore_password_uri = '', 
                                    keystore_uri = '', 
                                    kms_key_uri = '', 
                                    realm = '', 
                                    root_principal_password_uri = '', 
                                    tgt_lifetime_hours = 56, 
                                    truststore_password_uri = '', 
                                    truststore_uri = '', ), ), 
                            software_config = openapi_client.models.software_config.SoftwareConfig(
                                image_version = '', 
                                optional_components = [
                                    'COMPONENT_UNSPECIFIED'
                                    ], 
                                properties = {
                                    'key' : ''
                                    }, ), 
                            temp_bucket = '', 
                            worker_config = , ), 
                        labels = {
                            'key' : ''
                            }, ), ),
                update_time = '',
                version = 56
            )
        else:
            return WorkflowTemplate(
        )
        """

    def testWorkflowTemplate(self):
        """Test WorkflowTemplate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

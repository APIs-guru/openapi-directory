# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SoftwareConfig(BaseModel):
    """
    Specifies the selection and config of software inside the cluster.
    """ # noqa: E501
    image_version: Optional[StrictStr] = Field(default=None, description="Optional. The version of software inside the cluster. It must be one of the supported Dataproc Versions (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#supported_dataproc_versions), such as \"1.2\" (including a subminor version, such as \"1.2.29\"), or the \"preview\" version (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#other_versions). If unspecified, it defaults to the latest Debian version.", alias="imageVersion")
    optional_components: Optional[List[StrictStr]] = Field(default=None, description="Optional. The set of components to activate on the cluster.", alias="optionalComponents")
    properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The properties to set on daemon config files.Property keys are specified in prefix:property format, for example core:hadoop.tmp.dir. The following are supported prefixes and their mappings: capacity-scheduler: capacity-scheduler.xml core: core-site.xml distcp: distcp-default.xml hdfs: hdfs-site.xml hive: hive-site.xml mapred: mapred-site.xml pig: pig.properties spark: spark-defaults.conf yarn: yarn-site.xmlFor more information, see Cluster properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).")
    __properties: ClassVar[List[str]] = ["imageVersion", "optionalComponents", "properties"]

    @field_validator('optional_components')
    def optional_components_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['COMPONENT_UNSPECIFIED', 'ANACONDA', 'DOCKER', 'DRUID', 'FLINK', 'HBASE', 'HIVE_WEBHCAT', 'HUDI', 'JUPYTER', 'PRESTO', 'TRINO', 'RANGER', 'SOLR', 'ZEPPELIN', 'ZOOKEEPER']):
                raise ValueError("each list item must be one of ('COMPONENT_UNSPECIFIED', 'ANACONDA', 'DOCKER', 'DRUID', 'FLINK', 'HBASE', 'HIVE_WEBHCAT', 'HUDI', 'JUPYTER', 'PRESTO', 'TRINO', 'RANGER', 'SOLR', 'ZEPPELIN', 'ZOOKEEPER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SoftwareConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SoftwareConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "imageVersion": obj.get("imageVersion"),
            "optionalComponents": obj.get("optionalComponents"),
            "properties": obj.get("properties")
        })
        return _obj



# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.confidential_instance_config import ConfidentialInstanceConfig
from openapi_client.models.node_group_affinity import NodeGroupAffinity
from openapi_client.models.reservation_affinity import ReservationAffinity
from openapi_client.models.shielded_instance_config import ShieldedInstanceConfig
from typing import Optional, Set
from typing_extensions import Self

class GceClusterConfig(BaseModel):
    """
    Common config settings for resources of Compute Engine cluster instances, applicable to all instances in the cluster.
    """ # noqa: E501
    confidential_instance_config: Optional[ConfidentialInstanceConfig] = Field(default=None, alias="confidentialInstanceConfig")
    internal_ip_only: Optional[StrictBool] = Field(default=None, description="Optional. If true, all instances in the cluster will only have internal IP addresses. By default, clusters are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each instance. This internal_ip_only restriction can only be enabled for subnetwork enabled networks, and all off-cluster dependencies must be configured to be accessible without external IP addresses.", alias="internalIpOnly")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The Compute Engine metadata entries to add to all instances (see Project and instance metadata (https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).")
    network_uri: Optional[StrictStr] = Field(default=None, description="Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork_uri. If neither network_uri nor subnetwork_uri is specified, the \"default\" network of the project is used, if it exists. Cannot be a \"Custom Subnet Network\" (see Using Subnetworks (https://cloud.google.com/compute/docs/subnetworks) for more information).A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/global/networks/default projects/[project_id]/global/networks/default default", alias="networkUri")
    node_group_affinity: Optional[NodeGroupAffinity] = Field(default=None, alias="nodeGroupAffinity")
    private_ipv6_google_access: Optional[StrictStr] = Field(default=None, description="Optional. The type of IPv6 access for a cluster.", alias="privateIpv6GoogleAccess")
    reservation_affinity: Optional[ReservationAffinity] = Field(default=None, alias="reservationAffinity")
    service_account: Optional[StrictStr] = Field(default=None, description="Optional. The Dataproc service account (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/service-accounts#service_accounts_in_dataproc) (also see VM Data Plane identity (https://cloud.google.com/dataproc/docs/concepts/iam/dataproc-principals#vm_service_account_data_plane_identity)) used by Dataproc cluster VM instances to access Google Cloud Platform services.If not specified, the Compute Engine default service account (https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.", alias="serviceAccount")
    service_account_scopes: Optional[List[StrictStr]] = Field(default=None, description="Optional. The URIs of service account scopes to be included in Compute Engine instances. The following base set of scopes is always included: https://www.googleapis.com/auth/cloud.useraccounts.readonly https://www.googleapis.com/auth/devstorage.read_write https://www.googleapis.com/auth/logging.writeIf no scopes are specified, the following defaults are also provided: https://www.googleapis.com/auth/bigquery https://www.googleapis.com/auth/bigtable.admin.table https://www.googleapis.com/auth/bigtable.data https://www.googleapis.com/auth/devstorage.full_control", alias="serviceAccountScopes")
    shielded_instance_config: Optional[ShieldedInstanceConfig] = Field(default=None, alias="shieldedInstanceConfig")
    subnetwork_uri: Optional[StrictStr] = Field(default=None, description="Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network_uri.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/regions/[region]/subnetworks/sub0 projects/[project_id]/regions/[region]/subnetworks/sub0 sub0", alias="subnetworkUri")
    tags: Optional[List[StrictStr]] = Field(default=None, description="The Compute Engine tags to add to all instances (see Tagging instances (https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).")
    zone_uri: Optional[StrictStr] = Field(default=None, description="Optional. The Compute Engine zone where the Dataproc cluster will be located. If omitted, the service will pick a zone in the cluster's Compute Engine region. On a get request, zone will always be present.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone] projects/[project_id]/zones/[zone] [zone]", alias="zoneUri")
    __properties: ClassVar[List[str]] = ["confidentialInstanceConfig", "internalIpOnly", "metadata", "networkUri", "nodeGroupAffinity", "privateIpv6GoogleAccess", "reservationAffinity", "serviceAccount", "serviceAccountScopes", "shieldedInstanceConfig", "subnetworkUri", "tags", "zoneUri"]

    @field_validator('private_ipv6_google_access')
    def private_ipv6_google_access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED', 'INHERIT_FROM_SUBNETWORK', 'OUTBOUND', 'BIDIRECTIONAL']):
            raise ValueError("must be one of enum values ('PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED', 'INHERIT_FROM_SUBNETWORK', 'OUTBOUND', 'BIDIRECTIONAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GceClusterConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of confidential_instance_config
        if self.confidential_instance_config:
            _dict['confidentialInstanceConfig'] = self.confidential_instance_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_group_affinity
        if self.node_group_affinity:
            _dict['nodeGroupAffinity'] = self.node_group_affinity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reservation_affinity
        if self.reservation_affinity:
            _dict['reservationAffinity'] = self.reservation_affinity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shielded_instance_config
        if self.shielded_instance_config:
            _dict['shieldedInstanceConfig'] = self.shielded_instance_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GceClusterConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confidentialInstanceConfig": ConfidentialInstanceConfig.from_dict(obj["confidentialInstanceConfig"]) if obj.get("confidentialInstanceConfig") is not None else None,
            "internalIpOnly": obj.get("internalIpOnly"),
            "metadata": obj.get("metadata"),
            "networkUri": obj.get("networkUri"),
            "nodeGroupAffinity": NodeGroupAffinity.from_dict(obj["nodeGroupAffinity"]) if obj.get("nodeGroupAffinity") is not None else None,
            "privateIpv6GoogleAccess": obj.get("privateIpv6GoogleAccess"),
            "reservationAffinity": ReservationAffinity.from_dict(obj["reservationAffinity"]) if obj.get("reservationAffinity") is not None else None,
            "serviceAccount": obj.get("serviceAccount"),
            "serviceAccountScopes": obj.get("serviceAccountScopes"),
            "shieldedInstanceConfig": ShieldedInstanceConfig.from_dict(obj["shieldedInstanceConfig"]) if obj.get("shieldedInstanceConfig") is not None else None,
            "subnetworkUri": obj.get("subnetworkUri"),
            "tags": obj.get("tags"),
            "zoneUri": obj.get("zoneUri")
        })
        return _obj



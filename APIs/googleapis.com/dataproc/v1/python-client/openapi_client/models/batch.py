# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.environment_config import EnvironmentConfig
from openapi_client.models.py_spark_batch import PySparkBatch
from openapi_client.models.runtime_config import RuntimeConfig
from openapi_client.models.runtime_info import RuntimeInfo
from openapi_client.models.spark_batch import SparkBatch
from openapi_client.models.spark_r_batch import SparkRBatch
from openapi_client.models.spark_sql_batch import SparkSqlBatch
from openapi_client.models.state_history import StateHistory
from typing import Optional, Set
from typing_extensions import Self

class Batch(BaseModel):
    """
    A representation of a batch workload in the service.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the batch was created.", alias="createTime")
    creator: Optional[StrictStr] = Field(default=None, description="Output only. The email address of the user who created the batch.")
    environment_config: Optional[EnvironmentConfig] = Field(default=None, alias="environmentConfig")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The labels to associate with this batch. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a batch.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the batch.")
    operation: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the operation associated with this batch.")
    pyspark_batch: Optional[PySparkBatch] = Field(default=None, alias="pysparkBatch")
    runtime_config: Optional[RuntimeConfig] = Field(default=None, alias="runtimeConfig")
    runtime_info: Optional[RuntimeInfo] = Field(default=None, alias="runtimeInfo")
    spark_batch: Optional[SparkBatch] = Field(default=None, alias="sparkBatch")
    spark_r_batch: Optional[SparkRBatch] = Field(default=None, alias="sparkRBatch")
    spark_sql_batch: Optional[SparkSqlBatch] = Field(default=None, alias="sparkSqlBatch")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the batch.")
    state_history: Optional[List[StateHistory]] = Field(default=None, description="Output only. Historical state information for the batch.", alias="stateHistory")
    state_message: Optional[StrictStr] = Field(default=None, description="Output only. Batch state details, such as a failure description if the state is FAILED.", alias="stateMessage")
    state_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the batch entered a current state.", alias="stateTime")
    uuid: Optional[StrictStr] = Field(default=None, description="Output only. A batch UUID (Unique Universal Identifier). The service generates this value when it creates the batch.")
    __properties: ClassVar[List[str]] = ["createTime", "creator", "environmentConfig", "labels", "name", "operation", "pysparkBatch", "runtimeConfig", "runtimeInfo", "sparkBatch", "sparkRBatch", "sparkSqlBatch", "state", "stateHistory", "stateMessage", "stateTime", "uuid"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PENDING', 'RUNNING', 'CANCELLING', 'CANCELLED', 'SUCCEEDED', 'FAILED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PENDING', 'RUNNING', 'CANCELLING', 'CANCELLED', 'SUCCEEDED', 'FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Batch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "creator",
            "name",
            "operation",
            "state",
            "state_history",
            "state_message",
            "state_time",
            "uuid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of environment_config
        if self.environment_config:
            _dict['environmentConfig'] = self.environment_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pyspark_batch
        if self.pyspark_batch:
            _dict['pysparkBatch'] = self.pyspark_batch.to_dict()
        # override the default output from pydantic by calling `to_dict()` of runtime_config
        if self.runtime_config:
            _dict['runtimeConfig'] = self.runtime_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of runtime_info
        if self.runtime_info:
            _dict['runtimeInfo'] = self.runtime_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spark_batch
        if self.spark_batch:
            _dict['sparkBatch'] = self.spark_batch.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spark_r_batch
        if self.spark_r_batch:
            _dict['sparkRBatch'] = self.spark_r_batch.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spark_sql_batch
        if self.spark_sql_batch:
            _dict['sparkSqlBatch'] = self.spark_sql_batch.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in state_history (list)
        _items = []
        if self.state_history:
            for _item_state_history in self.state_history:
                if _item_state_history:
                    _items.append(_item_state_history.to_dict())
            _dict['stateHistory'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Batch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "creator": obj.get("creator"),
            "environmentConfig": EnvironmentConfig.from_dict(obj["environmentConfig"]) if obj.get("environmentConfig") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "operation": obj.get("operation"),
            "pysparkBatch": PySparkBatch.from_dict(obj["pysparkBatch"]) if obj.get("pysparkBatch") is not None else None,
            "runtimeConfig": RuntimeConfig.from_dict(obj["runtimeConfig"]) if obj.get("runtimeConfig") is not None else None,
            "runtimeInfo": RuntimeInfo.from_dict(obj["runtimeInfo"]) if obj.get("runtimeInfo") is not None else None,
            "sparkBatch": SparkBatch.from_dict(obj["sparkBatch"]) if obj.get("sparkBatch") is not None else None,
            "sparkRBatch": SparkRBatch.from_dict(obj["sparkRBatch"]) if obj.get("sparkRBatch") is not None else None,
            "sparkSqlBatch": SparkSqlBatch.from_dict(obj["sparkSqlBatch"]) if obj.get("sparkSqlBatch") is not None else None,
            "state": obj.get("state"),
            "stateHistory": [StateHistory.from_dict(_item) for _item in obj["stateHistory"]] if obj.get("stateHistory") is not None else None,
            "stateMessage": obj.get("stateMessage"),
            "stateTime": obj.get("stateTime"),
            "uuid": obj.get("uuid")
        })
        return _obj



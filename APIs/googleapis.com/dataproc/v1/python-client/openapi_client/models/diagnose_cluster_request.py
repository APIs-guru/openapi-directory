# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.interval import Interval
from typing import Optional, Set
from typing_extensions import Self

class DiagnoseClusterRequest(BaseModel):
    """
    A request to collect cluster diagnostic information.
    """ # noqa: E501
    diagnosis_interval: Optional[Interval] = Field(default=None, alias="diagnosisInterval")
    job: Optional[StrictStr] = Field(default=None, description="Optional. DEPRECATED Specifies the job on which diagnosis is to be performed. Format: projects/{project}/regions/{region}/jobs/{job}")
    jobs: Optional[List[StrictStr]] = Field(default=None, description="Optional. Specifies a list of jobs on which diagnosis is to be performed. Format: projects/{project}/regions/{region}/jobs/{job}")
    tarball_access: Optional[StrictStr] = Field(default=None, description="Optional. (Optional) The access type to the diagnostic tarball. If not specified, falls back to default access of the bucket", alias="tarballAccess")
    tarball_gcs_dir: Optional[StrictStr] = Field(default=None, description="Optional. (Optional) The output Cloud Storage directory for the diagnostic tarball. If not specified, a task-specific directory in the cluster's staging bucket will be used.", alias="tarballGcsDir")
    yarn_application_id: Optional[StrictStr] = Field(default=None, description="Optional. DEPRECATED Specifies the yarn application on which diagnosis is to be performed.", alias="yarnApplicationId")
    yarn_application_ids: Optional[List[StrictStr]] = Field(default=None, description="Optional. Specifies a list of yarn applications on which diagnosis is to be performed.", alias="yarnApplicationIds")
    __properties: ClassVar[List[str]] = ["diagnosisInterval", "job", "jobs", "tarballAccess", "tarballGcsDir", "yarnApplicationId", "yarnApplicationIds"]

    @field_validator('tarball_access')
    def tarball_access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TARBALL_ACCESS_UNSPECIFIED', 'GOOGLE_CLOUD_SUPPORT', 'GOOGLE_DATAPROC_DIAGNOSE']):
            raise ValueError("must be one of enum values ('TARBALL_ACCESS_UNSPECIFIED', 'GOOGLE_CLOUD_SUPPORT', 'GOOGLE_DATAPROC_DIAGNOSE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DiagnoseClusterRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of diagnosis_interval
        if self.diagnosis_interval:
            _dict['diagnosisInterval'] = self.diagnosis_interval.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DiagnoseClusterRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "diagnosisInterval": Interval.from_dict(obj["diagnosisInterval"]) if obj.get("diagnosisInterval") is not None else None,
            "job": obj.get("job"),
            "jobs": obj.get("jobs"),
            "tarballAccess": obj.get("tarballAccess"),
            "tarballGcsDir": obj.get("tarballGcsDir"),
            "yarnApplicationId": obj.get("yarnApplicationId"),
            "yarnApplicationIds": obj.get("yarnApplicationIds")
        })
        return _obj



# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SparkStandaloneAutoscalingConfig(BaseModel):
    """
    Basic autoscaling configurations for Spark Standalone.
    """ # noqa: E501
    graceful_decommission_timeout: Optional[StrictStr] = Field(default=None, description="Required. Timeout for Spark graceful decommissioning of spark workers. Specifies the duration to wait for spark worker to complete spark decommissioning tasks before forcefully removing workers. Only applicable to downscaling operations.Bounds: 0s, 1d.", alias="gracefulDecommissionTimeout")
    remove_only_idle_workers: Optional[StrictBool] = Field(default=None, description="Optional. Remove only idle workers when scaling down cluster", alias="removeOnlyIdleWorkers")
    scale_down_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Required. Fraction of required executors to remove from Spark Serverless clusters. A scale-down factor of 1.0 will result in scaling down so that there are no more executors for the Spark Job.(more aggressive scaling). A scale-down factor closer to 0 will result in a smaller magnitude of scaling donw (less aggressive scaling).Bounds: 0.0, 1.0.", alias="scaleDownFactor")
    scale_down_min_worker_fraction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. Minimum scale-down threshold as a fraction of total cluster size before scaling occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must recommend at least a 2 worker scale-down for the cluster to scale. A threshold of 0 means the autoscaler will scale down on any recommended change.Bounds: 0.0, 1.0. Default: 0.0.", alias="scaleDownMinWorkerFraction")
    scale_up_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Required. Fraction of required workers to add to Spark Standalone clusters. A scale-up factor of 1.0 will result in scaling up so that there are no more required workers for the Spark Job (more aggressive scaling). A scale-up factor closer to 0 will result in a smaller magnitude of scaling up (less aggressive scaling).Bounds: 0.0, 1.0.", alias="scaleUpFactor")
    scale_up_min_worker_fraction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. Minimum scale-up threshold as a fraction of total cluster size before scaling occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must recommend at least a 2-worker scale-up for the cluster to scale. A threshold of 0 means the autoscaler will scale up on any recommended change.Bounds: 0.0, 1.0. Default: 0.0.", alias="scaleUpMinWorkerFraction")
    __properties: ClassVar[List[str]] = ["gracefulDecommissionTimeout", "removeOnlyIdleWorkers", "scaleDownFactor", "scaleDownMinWorkerFraction", "scaleUpFactor", "scaleUpMinWorkerFraction"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SparkStandaloneAutoscalingConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SparkStandaloneAutoscalingConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gracefulDecommissionTimeout": obj.get("gracefulDecommissionTimeout"),
            "removeOnlyIdleWorkers": obj.get("removeOnlyIdleWorkers"),
            "scaleDownFactor": obj.get("scaleDownFactor"),
            "scaleDownMinWorkerFraction": obj.get("scaleDownMinWorkerFraction"),
            "scaleUpFactor": obj.get("scaleUpFactor"),
            "scaleUpMinWorkerFraction": obj.get("scaleUpMinWorkerFraction")
        })
        return _obj



# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cluster_operation_status import ClusterOperationStatus
from typing import Optional, Set
from typing_extensions import Self

class ClusterOperationMetadata(BaseModel):
    """
    Metadata describing the operation.
    """ # noqa: E501
    child_operation_ids: Optional[List[StrictStr]] = Field(default=None, description="Output only. Child operation ids", alias="childOperationIds")
    cluster_name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the cluster for the operation.", alias="clusterName")
    cluster_uuid: Optional[StrictStr] = Field(default=None, description="Output only. Cluster UUID for the operation.", alias="clusterUuid")
    description: Optional[StrictStr] = Field(default=None, description="Output only. Short description of operation.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Output only. Labels associated with the operation")
    operation_type: Optional[StrictStr] = Field(default=None, description="Output only. The operation type.", alias="operationType")
    status: Optional[ClusterOperationStatus] = None
    status_history: Optional[List[ClusterOperationStatus]] = Field(default=None, description="Output only. The previous operation status.", alias="statusHistory")
    warnings: Optional[List[StrictStr]] = Field(default=None, description="Output only. Errors encountered during operation execution.")
    __properties: ClassVar[List[str]] = ["childOperationIds", "clusterName", "clusterUuid", "description", "labels", "operationType", "status", "statusHistory", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterOperationMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "child_operation_ids",
            "cluster_name",
            "cluster_uuid",
            "description",
            "labels",
            "operation_type",
            "status_history",
            "warnings",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in status_history (list)
        _items = []
        if self.status_history:
            for _item_status_history in self.status_history:
                if _item_status_history:
                    _items.append(_item_status_history.to_dict())
            _dict['statusHistory'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterOperationMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "childOperationIds": obj.get("childOperationIds"),
            "clusterName": obj.get("clusterName"),
            "clusterUuid": obj.get("clusterUuid"),
            "description": obj.get("description"),
            "labels": obj.get("labels"),
            "operationType": obj.get("operationType"),
            "status": ClusterOperationStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "statusHistory": [ClusterOperationStatus.from_dict(_item) for _item in obj["statusHistory"]] if obj.get("statusHistory") is not None else None,
            "warnings": obj.get("warnings")
        })
        return _obj



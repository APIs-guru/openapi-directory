# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UsageSnapshot(BaseModel):
    """
    The usage snapshot represents the resources consumed by a workload at a specified time.
    """ # noqa: E501
    accelerator_type: Optional[StrictStr] = Field(default=None, description="Optional. Accelerator type being used, if any", alias="acceleratorType")
    milli_accelerator: Optional[StrictStr] = Field(default=None, description="Optional. Milli (one-thousandth) accelerator. (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing))", alias="milliAccelerator")
    milli_dcu: Optional[StrictStr] = Field(default=None, description="Optional. Milli (one-thousandth) Dataproc Compute Units (DCUs) (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing)).", alias="milliDcu")
    milli_dcu_premium: Optional[StrictStr] = Field(default=None, description="Optional. Milli (one-thousandth) Dataproc Compute Units (DCUs) charged at premium tier (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing)).", alias="milliDcuPremium")
    shuffle_storage_gb: Optional[StrictStr] = Field(default=None, description="Optional. Shuffle Storage in gigabytes (GB). (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing))", alias="shuffleStorageGb")
    shuffle_storage_gb_premium: Optional[StrictStr] = Field(default=None, description="Optional. Shuffle Storage in gigabytes (GB) charged at premium tier. (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing))", alias="shuffleStorageGbPremium")
    snapshot_time: Optional[StrictStr] = Field(default=None, description="Optional. The timestamp of the usage snapshot.", alias="snapshotTime")
    __properties: ClassVar[List[str]] = ["acceleratorType", "milliAccelerator", "milliDcu", "milliDcuPremium", "shuffleStorageGb", "shuffleStorageGbPremium", "snapshotTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsageSnapshot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsageSnapshot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acceleratorType": obj.get("acceleratorType"),
            "milliAccelerator": obj.get("milliAccelerator"),
            "milliDcu": obj.get("milliDcu"),
            "milliDcuPremium": obj.get("milliDcuPremium"),
            "shuffleStorageGb": obj.get("shuffleStorageGb"),
            "shuffleStorageGbPremium": obj.get("shuffleStorageGbPremium"),
            "snapshotTime": obj.get("snapshotTime")
        })
        return _obj



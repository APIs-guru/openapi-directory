# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cluster_operation import ClusterOperation
from openapi_client.models.workflow_graph import WorkflowGraph
from typing import Optional, Set
from typing_extensions import Self

class WorkflowMetadata(BaseModel):
    """
    A Dataproc workflow template resource.
    """ # noqa: E501
    cluster_name: Optional[StrictStr] = Field(default=None, description="Output only. The name of the target cluster.", alias="clusterName")
    cluster_uuid: Optional[StrictStr] = Field(default=None, description="Output only. The UUID of target cluster.", alias="clusterUuid")
    create_cluster: Optional[ClusterOperation] = Field(default=None, alias="createCluster")
    dag_end_time: Optional[StrictStr] = Field(default=None, description="Output only. DAG end time, only set for workflows with dag_timeout when DAG ends.", alias="dagEndTime")
    dag_start_time: Optional[StrictStr] = Field(default=None, description="Output only. DAG start time, only set for workflows with dag_timeout when DAG begins.", alias="dagStartTime")
    dag_timeout: Optional[StrictStr] = Field(default=None, description="Output only. The timeout duration for the DAG of jobs, expressed in seconds (see JSON representation of duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).", alias="dagTimeout")
    delete_cluster: Optional[ClusterOperation] = Field(default=None, alias="deleteCluster")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. Workflow end time.", alias="endTime")
    graph: Optional[WorkflowGraph] = None
    parameters: Optional[Dict[str, StrictStr]] = Field(default=None, description="Map from parameter names to values that were used for those parameters.")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. Workflow start time.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The workflow state.")
    template: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the workflow template as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}")
    version: Optional[StrictInt] = Field(default=None, description="Output only. The version of template at the time of workflow instantiation.")
    __properties: ClassVar[List[str]] = ["clusterName", "clusterUuid", "createCluster", "dagEndTime", "dagStartTime", "dagTimeout", "deleteCluster", "endTime", "graph", "parameters", "startTime", "state", "template", "version"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'PENDING', 'RUNNING', 'DONE']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'PENDING', 'RUNNING', 'DONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cluster_name",
            "cluster_uuid",
            "dag_end_time",
            "dag_start_time",
            "dag_timeout",
            "end_time",
            "start_time",
            "state",
            "template",
            "version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of create_cluster
        if self.create_cluster:
            _dict['createCluster'] = self.create_cluster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_cluster
        if self.delete_cluster:
            _dict['deleteCluster'] = self.delete_cluster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of graph
        if self.graph:
            _dict['graph'] = self.graph.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterName": obj.get("clusterName"),
            "clusterUuid": obj.get("clusterUuid"),
            "createCluster": ClusterOperation.from_dict(obj["createCluster"]) if obj.get("createCluster") is not None else None,
            "dagEndTime": obj.get("dagEndTime"),
            "dagStartTime": obj.get("dagStartTime"),
            "dagTimeout": obj.get("dagTimeout"),
            "deleteCluster": ClusterOperation.from_dict(obj["deleteCluster"]) if obj.get("deleteCluster") is not None else None,
            "endTime": obj.get("endTime"),
            "graph": WorkflowGraph.from_dict(obj["graph"]) if obj.get("graph") is not None else None,
            "parameters": obj.get("parameters"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "template": obj.get("template"),
            "version": obj.get("version")
        })
        return _obj



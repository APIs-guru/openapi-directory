# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SparkBatch(BaseModel):
    """
    A configuration for running an Apache Spark (https://spark.apache.org/) batch workload.
    """ # noqa: E501
    archive_uris: Optional[List[StrictStr]] = Field(default=None, description="Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.", alias="archiveUris")
    args: Optional[List[StrictStr]] = Field(default=None, description="Optional. The arguments to pass to the driver. Do not include arguments that can be set as batch properties, such as --conf, since a collision can occur that causes an incorrect batch submission.")
    file_uris: Optional[List[StrictStr]] = Field(default=None, description="Optional. HCFS URIs of files to be placed in the working directory of each executor.", alias="fileUris")
    jar_file_uris: Optional[List[StrictStr]] = Field(default=None, description="Optional. HCFS URIs of jar files to add to the classpath of the Spark driver and tasks.", alias="jarFileUris")
    main_class: Optional[StrictStr] = Field(default=None, description="Optional. The name of the driver main class. The jar file that contains the class must be in the classpath or specified in jar_file_uris.", alias="mainClass")
    main_jar_file_uri: Optional[StrictStr] = Field(default=None, description="Optional. The HCFS URI of the jar file that contains the main class.", alias="mainJarFileUri")
    __properties: ClassVar[List[str]] = ["archiveUris", "args", "fileUris", "jarFileUris", "mainClass", "mainJarFileUri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SparkBatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SparkBatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archiveUris": obj.get("archiveUris"),
            "args": obj.get("args"),
            "fileUris": obj.get("fileUris"),
            "jarFileUris": obj.get("jarFileUris"),
            "mainClass": obj.get("mainClass"),
            "mainJarFileUri": obj.get("mainJarFileUri")
        })
        return _obj



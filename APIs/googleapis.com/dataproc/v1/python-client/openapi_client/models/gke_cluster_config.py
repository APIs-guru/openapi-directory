# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.gke_node_pool_target import GkeNodePoolTarget
from openapi_client.models.namespaced_gke_deployment_target import NamespacedGkeDeploymentTarget
from typing import Optional, Set
from typing_extensions import Self

class GkeClusterConfig(BaseModel):
    """
    The cluster's GKE config.
    """ # noqa: E501
    gke_cluster_target: Optional[StrictStr] = Field(default=None, description="Optional. A target GKE cluster to deploy to. It must be in the same project and region as the Dataproc cluster (the GKE cluster can be zonal or regional). Format: 'projects/{project}/locations/{location}/clusters/{cluster_id}'", alias="gkeClusterTarget")
    namespaced_gke_deployment_target: Optional[NamespacedGkeDeploymentTarget] = Field(default=None, alias="namespacedGkeDeploymentTarget")
    node_pool_target: Optional[List[GkeNodePoolTarget]] = Field(default=None, description="Optional. GKE node pools where workloads will be scheduled. At least one node pool must be assigned the DEFAULT GkeNodePoolTarget.Role. If a GkeNodePoolTarget is not specified, Dataproc constructs a DEFAULT GkeNodePoolTarget. Each role can be given to only one GkeNodePoolTarget. All node pools must have the same location settings.", alias="nodePoolTarget")
    __properties: ClassVar[List[str]] = ["gkeClusterTarget", "namespacedGkeDeploymentTarget", "nodePoolTarget"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GkeClusterConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of namespaced_gke_deployment_target
        if self.namespaced_gke_deployment_target:
            _dict['namespacedGkeDeploymentTarget'] = self.namespaced_gke_deployment_target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in node_pool_target (list)
        _items = []
        if self.node_pool_target:
            for _item_node_pool_target in self.node_pool_target:
                if _item_node_pool_target:
                    _items.append(_item_node_pool_target.to_dict())
            _dict['nodePoolTarget'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GkeClusterConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gkeClusterTarget": obj.get("gkeClusterTarget"),
            "namespacedGkeDeploymentTarget": NamespacedGkeDeploymentTarget.from_dict(obj["namespacedGkeDeploymentTarget"]) if obj.get("namespacedGkeDeploymentTarget") is not None else None,
            "nodePoolTarget": [GkeNodePoolTarget.from_dict(_item) for _item in obj["nodePoolTarget"]] if obj.get("nodePoolTarget") is not None else None
        })
        return _obj



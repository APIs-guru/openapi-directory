# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.gke_node_pool_accelerator_config import GkeNodePoolAcceleratorConfig
from typing import Optional, Set
from typing_extensions import Self

class GkeNodeConfig(BaseModel):
    """
    Parameters that describe cluster nodes.
    """ # noqa: E501
    accelerators: Optional[List[GkeNodePoolAcceleratorConfig]] = Field(default=None, description="Optional. A list of hardware accelerators (https://cloud.google.com/compute/docs/gpus) to attach to each node.")
    boot_disk_kms_key: Optional[StrictStr] = Field(default=None, description="Optional. The Customer Managed Encryption Key (CMEK) (https://cloud.google.com/kubernetes-engine/docs/how-to/using-cmek) used to encrypt the boot disk attached to each node in the node pool. Specify the key using the following format: projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}", alias="bootDiskKmsKey")
    local_ssd_count: Optional[StrictInt] = Field(default=None, description="Optional. The number of local SSD disks to attach to the node, which is limited by the maximum number of disks allowable per zone (see Adding Local SSDs (https://cloud.google.com/compute/docs/disks/local-ssd)).", alias="localSsdCount")
    machine_type: Optional[StrictStr] = Field(default=None, description="Optional. The name of a Compute Engine machine type (https://cloud.google.com/compute/docs/machine-types).", alias="machineType")
    min_cpu_platform: Optional[StrictStr] = Field(default=None, description="Optional. Minimum CPU platform (https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) to be used by this instance. The instance may be scheduled on the specified or a newer CPU platform. Specify the friendly names of CPU platforms, such as \"Intel Haswell\"` or Intel Sandy Bridge\".", alias="minCpuPlatform")
    preemptible: Optional[StrictBool] = Field(default=None, description="Optional. Whether the nodes are created as legacy preemptible VM instances (https://cloud.google.com/compute/docs/instances/preemptible). Also see Spot VMs, preemptible VM instances without a maximum lifetime. Legacy and Spot preemptible nodes cannot be used in a node pool with the CONTROLLER role or in the DEFAULT node pool if the CONTROLLER role is not assigned (the DEFAULT node pool will assume the CONTROLLER role).")
    spot: Optional[StrictBool] = Field(default=None, description="Optional. Whether the nodes are created as Spot VM instances (https://cloud.google.com/compute/docs/instances/spot). Spot VMs are the latest update to legacy preemptible VMs. Spot VMs do not have a maximum lifetime. Legacy and Spot preemptible nodes cannot be used in a node pool with the CONTROLLER role or in the DEFAULT node pool if the CONTROLLER role is not assigned (the DEFAULT node pool will assume the CONTROLLER role).")
    __properties: ClassVar[List[str]] = ["accelerators", "bootDiskKmsKey", "localSsdCount", "machineType", "minCpuPlatform", "preemptible", "spot"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GkeNodeConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in accelerators (list)
        _items = []
        if self.accelerators:
            for _item_accelerators in self.accelerators:
                if _item_accelerators:
                    _items.append(_item_accelerators.to_dict())
            _dict['accelerators'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GkeNodeConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accelerators": [GkeNodePoolAcceleratorConfig.from_dict(_item) for _item in obj["accelerators"]] if obj.get("accelerators") is not None else None,
            "bootDiskKmsKey": obj.get("bootDiskKmsKey"),
            "localSsdCount": obj.get("localSsdCount"),
            "machineType": obj.get("machineType"),
            "minCpuPlatform": obj.get("minCpuPlatform"),
            "preemptible": obj.get("preemptible"),
            "spot": obj.get("spot")
        })
        return _obj



# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.autoscaling_config import AutoscalingConfig
from openapi_client.models.auxiliary_node_group import AuxiliaryNodeGroup
from openapi_client.models.dataproc_metric_config import DataprocMetricConfig
from openapi_client.models.encryption_config import EncryptionConfig
from openapi_client.models.endpoint_config import EndpointConfig
from openapi_client.models.gce_cluster_config import GceClusterConfig
from openapi_client.models.gke_cluster_config import GkeClusterConfig
from openapi_client.models.instance_group_config import InstanceGroupConfig
from openapi_client.models.lifecycle_config import LifecycleConfig
from openapi_client.models.metastore_config import MetastoreConfig
from openapi_client.models.node_initialization_action import NodeInitializationAction
from openapi_client.models.security_config import SecurityConfig
from openapi_client.models.software_config import SoftwareConfig
from typing import Optional, Set
from typing_extensions import Self

class ClusterConfig(BaseModel):
    """
    The cluster config.
    """ # noqa: E501
    autoscaling_config: Optional[AutoscalingConfig] = Field(default=None, alias="autoscalingConfig")
    auxiliary_node_groups: Optional[List[AuxiliaryNodeGroup]] = Field(default=None, description="Optional. The node group settings.", alias="auxiliaryNodeGroups")
    config_bucket: Optional[StrictStr] = Field(default=None, description="Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.", alias="configBucket")
    dataproc_metric_config: Optional[DataprocMetricConfig] = Field(default=None, alias="dataprocMetricConfig")
    encryption_config: Optional[EncryptionConfig] = Field(default=None, alias="encryptionConfig")
    endpoint_config: Optional[EndpointConfig] = Field(default=None, alias="endpointConfig")
    gce_cluster_config: Optional[GceClusterConfig] = Field(default=None, alias="gceClusterConfig")
    gke_cluster_config: Optional[GkeClusterConfig] = Field(default=None, alias="gkeClusterConfig")
    initialization_actions: Optional[List[NodeInitializationAction]] = Field(default=None, description="Optional. Commands to execute on each node after config is completed. By default, executables are run on master and all worker nodes. You can test a node's role metadata to run an executable on a master or worker node, as shown below using curl (you can also use wget): ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role) if [[ \"${ROLE}\" == 'Master' ]]; then ... master specific actions ... else ... worker specific actions ... fi ", alias="initializationActions")
    lifecycle_config: Optional[LifecycleConfig] = Field(default=None, alias="lifecycleConfig")
    master_config: Optional[InstanceGroupConfig] = Field(default=None, alias="masterConfig")
    metastore_config: Optional[MetastoreConfig] = Field(default=None, alias="metastoreConfig")
    secondary_worker_config: Optional[InstanceGroupConfig] = Field(default=None, alias="secondaryWorkerConfig")
    security_config: Optional[SecurityConfig] = Field(default=None, alias="securityConfig")
    software_config: Optional[SoftwareConfig] = Field(default=None, alias="softwareConfig")
    temp_bucket: Optional[StrictStr] = Field(default=None, description="Optional. A Cloud Storage bucket used to store ephemeral cluster and jobs data, such as Spark and MapReduce history files. If you do not specify a temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's temp bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket. The default bucket has a TTL of 90 days, but you can use any TTL (or none) if you specify a bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.", alias="tempBucket")
    worker_config: Optional[InstanceGroupConfig] = Field(default=None, alias="workerConfig")
    __properties: ClassVar[List[str]] = ["autoscalingConfig", "auxiliaryNodeGroups", "configBucket", "dataprocMetricConfig", "encryptionConfig", "endpointConfig", "gceClusterConfig", "gkeClusterConfig", "initializationActions", "lifecycleConfig", "masterConfig", "metastoreConfig", "secondaryWorkerConfig", "securityConfig", "softwareConfig", "tempBucket", "workerConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of autoscaling_config
        if self.autoscaling_config:
            _dict['autoscalingConfig'] = self.autoscaling_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in auxiliary_node_groups (list)
        _items = []
        if self.auxiliary_node_groups:
            for _item_auxiliary_node_groups in self.auxiliary_node_groups:
                if _item_auxiliary_node_groups:
                    _items.append(_item_auxiliary_node_groups.to_dict())
            _dict['auxiliaryNodeGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of dataproc_metric_config
        if self.dataproc_metric_config:
            _dict['dataprocMetricConfig'] = self.dataproc_metric_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encryption_config
        if self.encryption_config:
            _dict['encryptionConfig'] = self.encryption_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of endpoint_config
        if self.endpoint_config:
            _dict['endpointConfig'] = self.endpoint_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gce_cluster_config
        if self.gce_cluster_config:
            _dict['gceClusterConfig'] = self.gce_cluster_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gke_cluster_config
        if self.gke_cluster_config:
            _dict['gkeClusterConfig'] = self.gke_cluster_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in initialization_actions (list)
        _items = []
        if self.initialization_actions:
            for _item_initialization_actions in self.initialization_actions:
                if _item_initialization_actions:
                    _items.append(_item_initialization_actions.to_dict())
            _dict['initializationActions'] = _items
        # override the default output from pydantic by calling `to_dict()` of lifecycle_config
        if self.lifecycle_config:
            _dict['lifecycleConfig'] = self.lifecycle_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of master_config
        if self.master_config:
            _dict['masterConfig'] = self.master_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metastore_config
        if self.metastore_config:
            _dict['metastoreConfig'] = self.metastore_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secondary_worker_config
        if self.secondary_worker_config:
            _dict['secondaryWorkerConfig'] = self.secondary_worker_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_config
        if self.security_config:
            _dict['securityConfig'] = self.security_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of software_config
        if self.software_config:
            _dict['softwareConfig'] = self.software_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of worker_config
        if self.worker_config:
            _dict['workerConfig'] = self.worker_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoscalingConfig": AutoscalingConfig.from_dict(obj["autoscalingConfig"]) if obj.get("autoscalingConfig") is not None else None,
            "auxiliaryNodeGroups": [AuxiliaryNodeGroup.from_dict(_item) for _item in obj["auxiliaryNodeGroups"]] if obj.get("auxiliaryNodeGroups") is not None else None,
            "configBucket": obj.get("configBucket"),
            "dataprocMetricConfig": DataprocMetricConfig.from_dict(obj["dataprocMetricConfig"]) if obj.get("dataprocMetricConfig") is not None else None,
            "encryptionConfig": EncryptionConfig.from_dict(obj["encryptionConfig"]) if obj.get("encryptionConfig") is not None else None,
            "endpointConfig": EndpointConfig.from_dict(obj["endpointConfig"]) if obj.get("endpointConfig") is not None else None,
            "gceClusterConfig": GceClusterConfig.from_dict(obj["gceClusterConfig"]) if obj.get("gceClusterConfig") is not None else None,
            "gkeClusterConfig": GkeClusterConfig.from_dict(obj["gkeClusterConfig"]) if obj.get("gkeClusterConfig") is not None else None,
            "initializationActions": [NodeInitializationAction.from_dict(_item) for _item in obj["initializationActions"]] if obj.get("initializationActions") is not None else None,
            "lifecycleConfig": LifecycleConfig.from_dict(obj["lifecycleConfig"]) if obj.get("lifecycleConfig") is not None else None,
            "masterConfig": InstanceGroupConfig.from_dict(obj["masterConfig"]) if obj.get("masterConfig") is not None else None,
            "metastoreConfig": MetastoreConfig.from_dict(obj["metastoreConfig"]) if obj.get("metastoreConfig") is not None else None,
            "secondaryWorkerConfig": InstanceGroupConfig.from_dict(obj["secondaryWorkerConfig"]) if obj.get("secondaryWorkerConfig") is not None else None,
            "securityConfig": SecurityConfig.from_dict(obj["securityConfig"]) if obj.get("securityConfig") is not None else None,
            "softwareConfig": SoftwareConfig.from_dict(obj["softwareConfig"]) if obj.get("softwareConfig") is not None else None,
            "tempBucket": obj.get("tempBucket"),
            "workerConfig": InstanceGroupConfig.from_dict(obj["workerConfig"]) if obj.get("workerConfig") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dataproc_v1_workflow_template_encryption_config import GoogleCloudDataprocV1WorkflowTemplateEncryptionConfig
from openapi_client.models.ordered_job import OrderedJob
from openapi_client.models.template_parameter import TemplateParameter
from openapi_client.models.workflow_template_placement import WorkflowTemplatePlacement
from typing import Optional, Set
from typing_extensions import Self

class WorkflowTemplate(BaseModel):
    """
    A Dataproc workflow template resource.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time template was created.", alias="createTime")
    dag_timeout: Optional[StrictStr] = Field(default=None, description="Optional. Timeout duration for the DAG of jobs, expressed in seconds (see JSON representation of duration (https://developers.google.com/protocol-buffers/docs/proto3#json)). The timeout duration must be from 10 minutes (\"600s\") to 24 hours (\"86400s\"). The timer begins when the first job is submitted. If the workflow is running at the end of the timeout period, any remaining jobs are cancelled, the workflow is ended, and if the workflow was running on a managed cluster, the cluster is deleted.", alias="dagTimeout")
    encryption_config: Optional[GoogleCloudDataprocV1WorkflowTemplateEncryptionConfig] = Field(default=None, alias="encryptionConfig")
    id: Optional[StrictStr] = None
    jobs: Optional[List[OrderedJob]] = Field(default=None, description="Required. The Directed Acyclic Graph of Jobs to submit.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The labels to associate with this template. These labels will be propagated to all jobs and clusters created by the workflow instance.Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt).Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt).No more than 32 labels can be associated with a template.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}")
    parameters: Optional[List[TemplateParameter]] = Field(default=None, description="Optional. Template parameters whose values are substituted into the template. Values for parameters must be provided when the template is instantiated.")
    placement: Optional[WorkflowTemplatePlacement] = None
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time template was last updated.", alias="updateTime")
    version: Optional[StrictInt] = Field(default=None, description="Optional. Used to perform a consistent read-modify-write.This field should be left blank for a CreateWorkflowTemplate request. It is required for an UpdateWorkflowTemplate request, and must match the current server version. A typical update template flow would fetch the current template with a GetWorkflowTemplate request, which will return the current template with the version field filled in with the current server version. The user updates other fields in the template, then returns it as part of the UpdateWorkflowTemplate request.")
    __properties: ClassVar[List[str]] = ["createTime", "dagTimeout", "encryptionConfig", "id", "jobs", "labels", "name", "parameters", "placement", "updateTime", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption_config
        if self.encryption_config:
            _dict['encryptionConfig'] = self.encryption_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in jobs (list)
        _items = []
        if self.jobs:
            for _item_jobs in self.jobs:
                if _item_jobs:
                    _items.append(_item_jobs.to_dict())
            _dict['jobs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of placement
        if self.placement:
            _dict['placement'] = self.placement.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "dagTimeout": obj.get("dagTimeout"),
            "encryptionConfig": GoogleCloudDataprocV1WorkflowTemplateEncryptionConfig.from_dict(obj["encryptionConfig"]) if obj.get("encryptionConfig") is not None else None,
            "id": obj.get("id"),
            "jobs": [OrderedJob.from_dict(_item) for _item in obj["jobs"]] if obj.get("jobs") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "parameters": [TemplateParameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "placement": WorkflowTemplatePlacement.from_dict(obj["placement"]) if obj.get("placement") is not None else None,
            "updateTime": obj.get("updateTime"),
            "version": obj.get("version")
        })
        return _obj



# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cluster_config import ClusterConfig
from openapi_client.models.cluster_metrics import ClusterMetrics
from openapi_client.models.cluster_status import ClusterStatus
from openapi_client.models.virtual_cluster_config import VirtualClusterConfig
from typing import Optional, Set
from typing_extensions import Self

class Cluster(BaseModel):
    """
    Describes the identifying information, config, and status of a Dataproc cluster
    """ # noqa: E501
    cluster_name: Optional[StrictStr] = Field(default=None, description="Required. The cluster name, which must be unique within a project. The name must start with a lowercase letter, and can contain up to 51 lowercase letters, numbers, and hyphens. It cannot end with a hyphen. The name of a deleted cluster can be reused.", alias="clusterName")
    cluster_uuid: Optional[StrictStr] = Field(default=None, description="Output only. A cluster UUID (Unique Universal Identifier). Dataproc generates this value when it creates the cluster.", alias="clusterUuid")
    config: Optional[ClusterConfig] = None
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The labels to associate with this cluster. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.")
    metrics: Optional[ClusterMetrics] = None
    project_id: Optional[StrictStr] = Field(default=None, description="Required. The Google Cloud Platform project ID that the cluster belongs to.", alias="projectId")
    status: Optional[ClusterStatus] = None
    status_history: Optional[List[ClusterStatus]] = Field(default=None, description="Output only. The previous cluster status.", alias="statusHistory")
    virtual_cluster_config: Optional[VirtualClusterConfig] = Field(default=None, alias="virtualClusterConfig")
    __properties: ClassVar[List[str]] = ["clusterName", "clusterUuid", "config", "labels", "metrics", "projectId", "status", "statusHistory", "virtualClusterConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Cluster from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cluster_uuid",
            "status_history",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metrics
        if self.metrics:
            _dict['metrics'] = self.metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in status_history (list)
        _items = []
        if self.status_history:
            for _item_status_history in self.status_history:
                if _item_status_history:
                    _items.append(_item_status_history.to_dict())
            _dict['statusHistory'] = _items
        # override the default output from pydantic by calling `to_dict()` of virtual_cluster_config
        if self.virtual_cluster_config:
            _dict['virtualClusterConfig'] = self.virtual_cluster_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Cluster from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterName": obj.get("clusterName"),
            "clusterUuid": obj.get("clusterUuid"),
            "config": ClusterConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "labels": obj.get("labels"),
            "metrics": ClusterMetrics.from_dict(obj["metrics"]) if obj.get("metrics") is not None else None,
            "projectId": obj.get("projectId"),
            "status": ClusterStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "statusHistory": [ClusterStatus.from_dict(_item) for _item in obj["statusHistory"]] if obj.get("statusHistory") is not None else None,
            "virtualClusterConfig": VirtualClusterConfig.from_dict(obj["virtualClusterConfig"]) if obj.get("virtualClusterConfig") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class KerberosConfig(BaseModel):
    """
    Specifies Kerberos related configuration.
    """ # noqa: E501
    cross_realm_trust_admin_server: Optional[StrictStr] = Field(default=None, description="Optional. The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.", alias="crossRealmTrustAdminServer")
    cross_realm_trust_kdc: Optional[StrictStr] = Field(default=None, description="Optional. The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.", alias="crossRealmTrustKdc")
    cross_realm_trust_realm: Optional[StrictStr] = Field(default=None, description="Optional. The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.", alias="crossRealmTrustRealm")
    cross_realm_trust_shared_password_uri: Optional[StrictStr] = Field(default=None, description="Optional. The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.", alias="crossRealmTrustSharedPasswordUri")
    enable_kerberos: Optional[StrictBool] = Field(default=None, description="Optional. Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.", alias="enableKerberos")
    kdc_db_key_uri: Optional[StrictStr] = Field(default=None, description="Optional. The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.", alias="kdcDbKeyUri")
    key_password_uri: Optional[StrictStr] = Field(default=None, description="Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.", alias="keyPasswordUri")
    keystore_password_uri: Optional[StrictStr] = Field(default=None, description="Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.", alias="keystorePasswordUri")
    keystore_uri: Optional[StrictStr] = Field(default=None, description="Optional. The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.", alias="keystoreUri")
    kms_key_uri: Optional[StrictStr] = Field(default=None, description="Optional. The URI of the KMS key used to encrypt sensitive files.", alias="kmsKeyUri")
    realm: Optional[StrictStr] = Field(default=None, description="Optional. The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.")
    root_principal_password_uri: Optional[StrictStr] = Field(default=None, description="Optional. The Cloud Storage URI of a KMS encrypted file containing the root principal password.", alias="rootPrincipalPasswordUri")
    tgt_lifetime_hours: Optional[StrictInt] = Field(default=None, description="Optional. The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.", alias="tgtLifetimeHours")
    truststore_password_uri: Optional[StrictStr] = Field(default=None, description="Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.", alias="truststorePasswordUri")
    truststore_uri: Optional[StrictStr] = Field(default=None, description="Optional. The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.", alias="truststoreUri")
    __properties: ClassVar[List[str]] = ["crossRealmTrustAdminServer", "crossRealmTrustKdc", "crossRealmTrustRealm", "crossRealmTrustSharedPasswordUri", "enableKerberos", "kdcDbKeyUri", "keyPasswordUri", "keystorePasswordUri", "keystoreUri", "kmsKeyUri", "realm", "rootPrincipalPasswordUri", "tgtLifetimeHours", "truststorePasswordUri", "truststoreUri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KerberosConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KerberosConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "crossRealmTrustAdminServer": obj.get("crossRealmTrustAdminServer"),
            "crossRealmTrustKdc": obj.get("crossRealmTrustKdc"),
            "crossRealmTrustRealm": obj.get("crossRealmTrustRealm"),
            "crossRealmTrustSharedPasswordUri": obj.get("crossRealmTrustSharedPasswordUri"),
            "enableKerberos": obj.get("enableKerberos"),
            "kdcDbKeyUri": obj.get("kdcDbKeyUri"),
            "keyPasswordUri": obj.get("keyPasswordUri"),
            "keystorePasswordUri": obj.get("keystorePasswordUri"),
            "keystoreUri": obj.get("keystoreUri"),
            "kmsKeyUri": obj.get("kmsKeyUri"),
            "realm": obj.get("realm"),
            "rootPrincipalPasswordUri": obj.get("rootPrincipalPasswordUri"),
            "tgtLifetimeHours": obj.get("tgtLifetimeHours"),
            "truststorePasswordUri": obj.get("truststorePasswordUri"),
            "truststoreUri": obj.get("truststoreUri")
        })
        return _obj



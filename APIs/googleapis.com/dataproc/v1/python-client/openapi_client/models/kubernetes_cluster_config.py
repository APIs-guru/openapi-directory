# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.gke_cluster_config import GkeClusterConfig
from openapi_client.models.kubernetes_software_config import KubernetesSoftwareConfig
from typing import Optional, Set
from typing_extensions import Self

class KubernetesClusterConfig(BaseModel):
    """
    The configuration for running the Dataproc cluster on Kubernetes.
    """ # noqa: E501
    gke_cluster_config: Optional[GkeClusterConfig] = Field(default=None, alias="gkeClusterConfig")
    kubernetes_namespace: Optional[StrictStr] = Field(default=None, description="Optional. A namespace within the Kubernetes cluster to deploy into. If this namespace does not exist, it is created. If it exists, Dataproc verifies that another Dataproc VirtualCluster is not installed into it. If not specified, the name of the Dataproc Cluster is used.", alias="kubernetesNamespace")
    kubernetes_software_config: Optional[KubernetesSoftwareConfig] = Field(default=None, alias="kubernetesSoftwareConfig")
    __properties: ClassVar[List[str]] = ["gkeClusterConfig", "kubernetesNamespace", "kubernetesSoftwareConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KubernetesClusterConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gke_cluster_config
        if self.gke_cluster_config:
            _dict['gkeClusterConfig'] = self.gke_cluster_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kubernetes_software_config
        if self.kubernetes_software_config:
            _dict['kubernetesSoftwareConfig'] = self.kubernetes_software_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KubernetesClusterConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gkeClusterConfig": GkeClusterConfig.from_dict(obj["gkeClusterConfig"]) if obj.get("gkeClusterConfig") is not None else None,
            "kubernetesNamespace": obj.get("kubernetesNamespace"),
            "kubernetesSoftwareConfig": KubernetesSoftwareConfig.from_dict(obj["kubernetesSoftwareConfig"]) if obj.get("kubernetesSoftwareConfig") is not None else None
        })
        return _obj



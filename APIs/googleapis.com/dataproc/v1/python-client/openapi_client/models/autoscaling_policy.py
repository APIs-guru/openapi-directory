# coding: utf-8

"""
    Cloud Dataproc API

    Manages Hadoop-based clusters and jobs on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.basic_autoscaling_algorithm import BasicAutoscalingAlgorithm
from openapi_client.models.instance_group_autoscaling_policy_config import InstanceGroupAutoscalingPolicyConfig
from typing import Optional, Set
from typing_extensions import Self

class AutoscalingPolicy(BaseModel):
    """
    Describes an autoscaling policy for Dataproc cluster autoscaler.
    """ # noqa: E501
    basic_algorithm: Optional[BasicAutoscalingAlgorithm] = Field(default=None, alias="basicAlgorithm")
    id: Optional[StrictStr] = Field(default=None, description="Required. The policy id.The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 50 characters.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The labels to associate with this autoscaling policy. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with an autoscaling policy.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The \"resource name\" of the autoscaling policy, as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.autoscalingPolicies, the resource name of the policy has the following format: projects/{project_id}/regions/{region}/autoscalingPolicies/{policy_id} For projects.locations.autoscalingPolicies, the resource name of the policy has the following format: projects/{project_id}/locations/{location}/autoscalingPolicies/{policy_id}")
    secondary_worker_config: Optional[InstanceGroupAutoscalingPolicyConfig] = Field(default=None, alias="secondaryWorkerConfig")
    worker_config: Optional[InstanceGroupAutoscalingPolicyConfig] = Field(default=None, alias="workerConfig")
    __properties: ClassVar[List[str]] = ["basicAlgorithm", "id", "labels", "name", "secondaryWorkerConfig", "workerConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutoscalingPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of basic_algorithm
        if self.basic_algorithm:
            _dict['basicAlgorithm'] = self.basic_algorithm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secondary_worker_config
        if self.secondary_worker_config:
            _dict['secondaryWorkerConfig'] = self.secondary_worker_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of worker_config
        if self.worker_config:
            _dict['workerConfig'] = self.worker_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutoscalingPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "basicAlgorithm": BasicAutoscalingAlgorithm.from_dict(obj["basicAlgorithm"]) if obj.get("basicAlgorithm") is not None else None,
            "id": obj.get("id"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "secondaryWorkerConfig": InstanceGroupAutoscalingPolicyConfig.from_dict(obj["secondaryWorkerConfig"]) if obj.get("secondaryWorkerConfig") is not None else None,
            "workerConfig": InstanceGroupAutoscalingPolicyConfig.from_dict(obj["workerConfig"]) if obj.get("workerConfig") is not None else None
        })
        return _obj



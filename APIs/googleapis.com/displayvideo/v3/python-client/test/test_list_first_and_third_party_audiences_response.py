# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_first_and_third_party_audiences_response import ListFirstAndThirdPartyAudiencesResponse

class TestListFirstAndThirdPartyAudiencesResponse(unittest.TestCase):
    """ListFirstAndThirdPartyAudiencesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListFirstAndThirdPartyAudiencesResponse:
        """Test ListFirstAndThirdPartyAudiencesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListFirstAndThirdPartyAudiencesResponse`
        """
        model = ListFirstAndThirdPartyAudiencesResponse()
        if include_optional:
            return ListFirstAndThirdPartyAudiencesResponse(
                first_and_third_party_audiences = [
                    openapi_client.models.first_and_third_party_audience.FirstAndThirdPartyAudience(
                        active_display_audience_size = '', 
                        app_id = '', 
                        audience_source = 'AUDIENCE_SOURCE_UNSPECIFIED', 
                        audience_type = 'AUDIENCE_TYPE_UNSPECIFIED', 
                        contact_info_list = openapi_client.models.contact_info_list.ContactInfoList(
                            consent = openapi_client.models.consent.Consent(
                                ad_personalization = 'CONSENT_STATUS_UNSPECIFIED', 
                                ad_user_data = 'CONSENT_STATUS_UNSPECIFIED', ), 
                            contact_infos = [
                                openapi_client.models.contact_info.ContactInfo(
                                    country_code = '', 
                                    hashed_emails = [
                                        ''
                                        ], 
                                    hashed_first_name = '', 
                                    hashed_last_name = '', 
                                    hashed_phone_numbers = [
                                        ''
                                        ], 
                                    zip_codes = [
                                        ''
                                        ], )
                                ], ), 
                        description = '', 
                        display_audience_size = '', 
                        display_desktop_audience_size = '', 
                        display_mobile_app_audience_size = '', 
                        display_mobile_web_audience_size = '', 
                        display_name = '', 
                        first_and_third_party_audience_id = '', 
                        first_and_third_party_audience_type = 'FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_UNSPECIFIED', 
                        gmail_audience_size = '', 
                        membership_duration_days = '', 
                        mobile_device_id_list = openapi_client.models.mobile_device_id_list.MobileDeviceIdList(
                            mobile_device_ids = [
                                ''
                                ], ), 
                        name = '', 
                        youtube_audience_size = '', )
                    ],
                next_page_token = ''
            )
        else:
            return ListFirstAndThirdPartyAudiencesResponse(
        )
        """

    def testListFirstAndThirdPartyAudiencesResponse(self):
        """Test ListFirstAndThirdPartyAudiencesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

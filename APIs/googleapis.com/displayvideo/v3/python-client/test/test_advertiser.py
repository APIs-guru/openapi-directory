# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.advertiser import Advertiser

class TestAdvertiser(unittest.TestCase):
    """Advertiser unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Advertiser:
        """Test Advertiser
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Advertiser`
        """
        model = Advertiser()
        if include_optional:
            return Advertiser(
                ad_server_config = openapi_client.models.advertiser_ad_server_config.AdvertiserAdServerConfig(
                    cm_hybrid_config = openapi_client.models.cm_hybrid_config.CmHybridConfig(
                        cm_account_id = '', 
                        cm_advertiser_ids = [
                            ''
                            ], 
                        cm_floodlight_config_id = '', 
                        cm_floodlight_linking_authorized = True, 
                        cm_syncable_site_ids = [
                            ''
                            ], 
                        dv360_to_cm_cost_reporting_enabled = True, 
                        dv360_to_cm_data_sharing_enabled = True, ), 
                    third_party_only_config = openapi_client.models.third_party_only_config.ThirdPartyOnlyConfig(
                        pixel_order_id_reporting_enabled = True, ), ),
                advertiser_id = '',
                billing_config = openapi_client.models.advertiser_billing_config.AdvertiserBillingConfig(
                    billing_profile_id = '', ),
                creative_config = openapi_client.models.advertiser_creative_config.AdvertiserCreativeConfig(
                    dynamic_creative_enabled = True, 
                    ias_client_id = '', 
                    oba_compliance_disabled = True, 
                    video_creative_data_sharing_authorized = True, ),
                data_access_config = openapi_client.models.advertiser_data_access_config.AdvertiserDataAccessConfig(
                    sdf_config = openapi_client.models.advertiser_sdf_config.AdvertiserSdfConfig(
                        override_partner_sdf_config = True, ), ),
                display_name = '',
                entity_status = 'ENTITY_STATUS_UNSPECIFIED',
                general_config = openapi_client.models.advertiser_general_config.AdvertiserGeneralConfig(
                    currency_code = '', 
                    domain_url = '', 
                    time_zone = '', ),
                integration_details = openapi_client.models.integration_details.IntegrationDetails(
                    details = '', 
                    integration_code = '', ),
                name = '',
                partner_id = '',
                prisma_enabled = True,
                serving_config = openapi_client.models.advertiser_targeting_config.AdvertiserTargetingConfig(
                    exempt_tv_from_viewability_targeting = True, ),
                update_time = ''
            )
        else:
            return Advertiser(
        )
        """

    def testAdvertiser(self):
        """Test Advertiser"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

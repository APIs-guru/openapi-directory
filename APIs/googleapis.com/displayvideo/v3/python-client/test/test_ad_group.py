# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.ad_group import AdGroup

class TestAdGroup(unittest.TestCase):
    """AdGroup unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AdGroup:
        """Test AdGroup
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AdGroup`
        """
        model = AdGroup()
        if include_optional:
            return AdGroup(
                ad_group_format = 'AD_GROUP_FORMAT_UNSPECIFIED',
                ad_group_id = '',
                advertiser_id = '',
                bid_strategy = openapi_client.models.bidding_strategy.BiddingStrategy(
                    fixed_bid = openapi_client.models.fixed_bid_strategy.FixedBidStrategy(
                        bid_amount_micros = '', ), 
                    maximize_spend_auto_bid = openapi_client.models.maximize_spend_bid_strategy.MaximizeSpendBidStrategy(
                        custom_bidding_algorithm_id = '', 
                        max_average_cpm_bid_amount_micros = '', 
                        performance_goal_type = 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_UNSPECIFIED', 
                        raise_bid_for_deals = True, ), 
                    performance_goal_auto_bid = openapi_client.models.performance_goal_bid_strategy.PerformanceGoalBidStrategy(
                        custom_bidding_algorithm_id = '', 
                        max_average_cpm_bid_amount_micros = '', 
                        performance_goal_amount_micros = '', 
                        performance_goal_type = 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_UNSPECIFIED', ), 
                    youtube_and_partners_bid = openapi_client.models.youtube_and_partners_bidding_strategy.YoutubeAndPartnersBiddingStrategy(
                        ad_group_effective_target_cpa_source = 'BIDDING_SOURCE_UNSPECIFIED', 
                        ad_group_effective_target_cpa_value = '', 
                        type = 'YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_UNSPECIFIED', 
                        value = '', ), ),
                display_name = '',
                entity_status = 'ENTITY_STATUS_UNSPECIFIED',
                line_item_id = '',
                name = '',
                product_feed_data = openapi_client.models.product_feed_data.ProductFeedData(
                    is_feed_disabled = True, 
                    product_match_dimensions = [
                        openapi_client.models.product_match_dimension.ProductMatchDimension(
                            custom_label = openapi_client.models.custom_label.CustomLabel(
                                key = 'CUSTOM_LABEL_KEY_UNSPECIFIED', 
                                value = '', ), 
                            product_offer_id = '', )
                        ], 
                    product_match_type = 'PRODUCT_MATCH_TYPE_UNSPECIFIED', ),
                targeting_expansion = openapi_client.models.targeting_expansion_config.TargetingExpansionConfig(
                    audience_expansion_level = 'UNKNOWN', 
                    audience_expansion_seed_list_excluded = True, 
                    enable_optimized_targeting = True, )
            )
        else:
            return AdGroup(
        )
        """

    def testAdGroup(self):
        """Test AdGroup"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

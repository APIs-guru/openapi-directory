# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.third_party_measurement_configs import ThirdPartyMeasurementConfigs

class TestThirdPartyMeasurementConfigs(unittest.TestCase):
    """ThirdPartyMeasurementConfigs unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ThirdPartyMeasurementConfigs:
        """Test ThirdPartyMeasurementConfigs
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ThirdPartyMeasurementConfigs`
        """
        model = ThirdPartyMeasurementConfigs()
        if include_optional:
            return ThirdPartyMeasurementConfigs(
                brand_lift_vendor_configs = [
                    openapi_client.models.third_party_vendor_config.ThirdPartyVendorConfig(
                        placement_id = '', 
                        vendor = 'THIRD_PARTY_VENDOR_UNSPECIFIED', )
                    ],
                brand_safety_vendor_configs = [
                    openapi_client.models.third_party_vendor_config.ThirdPartyVendorConfig(
                        placement_id = '', 
                        vendor = 'THIRD_PARTY_VENDOR_UNSPECIFIED', )
                    ],
                reach_vendor_configs = [
                    openapi_client.models.third_party_vendor_config.ThirdPartyVendorConfig(
                        placement_id = '', 
                        vendor = 'THIRD_PARTY_VENDOR_UNSPECIFIED', )
                    ],
                viewability_vendor_configs = [
                    openapi_client.models.third_party_vendor_config.ThirdPartyVendorConfig(
                        placement_id = '', 
                        vendor = 'THIRD_PARTY_VENDOR_UNSPECIFIED', )
                    ]
            )
        else:
            return ThirdPartyMeasurementConfigs(
        )
        """

    def testThirdPartyMeasurementConfigs(self):
        """Test ThirdPartyMeasurementConfigs"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

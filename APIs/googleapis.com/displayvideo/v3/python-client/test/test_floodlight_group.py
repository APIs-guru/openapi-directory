# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.floodlight_group import FloodlightGroup

class TestFloodlightGroup(unittest.TestCase):
    """FloodlightGroup unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FloodlightGroup:
        """Test FloodlightGroup
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FloodlightGroup`
        """
        model = FloodlightGroup()
        if include_optional:
            return FloodlightGroup(
                active_view_config = openapi_client.models.active_view_video_viewability_metric_config.ActiveViewVideoViewabilityMetricConfig(
                    display_name = '', 
                    minimum_duration = 'VIDEO_DURATION_UNSPECIFIED', 
                    minimum_quartile = 'VIDEO_DURATION_QUARTILE_UNSPECIFIED', 
                    minimum_viewability = 'VIEWABILITY_PERCENT_UNSPECIFIED', 
                    minimum_volume = 'VIDEO_VOLUME_PERCENT_UNSPECIFIED', ),
                custom_variables = {
                    'key' : null
                    },
                display_name = '',
                floodlight_group_id = '',
                lookback_window = openapi_client.models.lookback_window.LookbackWindow(
                    click_days = 56, 
                    impression_days = 56, ),
                name = '',
                web_tag_type = 'WEB_TAG_TYPE_UNSPECIFIED'
            )
        else:
            return FloodlightGroup(
        )
        """

    def testFloodlightGroup(self):
        """Test FloodlightGroup"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

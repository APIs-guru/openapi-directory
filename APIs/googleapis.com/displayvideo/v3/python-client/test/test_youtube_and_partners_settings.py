# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.youtube_and_partners_settings import YoutubeAndPartnersSettings

class TestYoutubeAndPartnersSettings(unittest.TestCase):
    """YoutubeAndPartnersSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> YoutubeAndPartnersSettings:
        """Test YoutubeAndPartnersSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `YoutubeAndPartnersSettings`
        """
        model = YoutubeAndPartnersSettings()
        if include_optional:
            return YoutubeAndPartnersSettings(
                content_category = 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_UNSPECIFIED',
                effective_content_category = 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_UNSPECIFIED',
                inventory_source_settings = openapi_client.models.youtube_and_partners_inventory_source_config.YoutubeAndPartnersInventorySourceConfig(
                    include_google_tv = True, 
                    include_youtube = True, 
                    include_youtube_video_partners = True, ),
                lead_form_id = '',
                linked_merchant_id = '',
                related_video_ids = [
                    ''
                    ],
                target_frequency = openapi_client.models.target_frequency.TargetFrequency(
                    target_count = '', 
                    time_unit = 'TIME_UNIT_UNSPECIFIED', 
                    time_unit_count = 56, ),
                third_party_measurement_configs = openapi_client.models.third_party_measurement_configs.ThirdPartyMeasurementConfigs(
                    brand_lift_vendor_configs = [
                        openapi_client.models.third_party_vendor_config.ThirdPartyVendorConfig(
                            placement_id = '', 
                            vendor = 'THIRD_PARTY_VENDOR_UNSPECIFIED', )
                        ], 
                    brand_safety_vendor_configs = [
                        openapi_client.models.third_party_vendor_config.ThirdPartyVendorConfig(
                            placement_id = '', 
                            vendor = 'THIRD_PARTY_VENDOR_UNSPECIFIED', )
                        ], 
                    reach_vendor_configs = [
                        
                        ], 
                    viewability_vendor_configs = [
                        
                        ], ),
                video_ad_sequence_settings = openapi_client.models.video_ad_sequence_settings.VideoAdSequenceSettings(
                    minimum_duration = 'VIDEO_AD_SEQUENCE_MINIMUM_DURATION_UNSPECIFIED', 
                    steps = [
                        openapi_client.models.video_ad_sequence_step.VideoAdSequenceStep(
                            ad_group_id = '', 
                            interaction_type = 'INTERACTION_TYPE_UNSPECIFIED', 
                            previous_step_id = '', 
                            step_id = '', )
                        ], ),
                view_frequency_cap = openapi_client.models.frequency_cap.FrequencyCap(
                    max_impressions = 56, 
                    max_views = 56, 
                    time_unit = 'TIME_UNIT_UNSPECIFIED', 
                    time_unit_count = 56, 
                    unlimited = True, )
            )
        else:
            return YoutubeAndPartnersSettings(
        )
        """

    def testYoutubeAndPartnersSettings(self):
        """Test YoutubeAndPartnersSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

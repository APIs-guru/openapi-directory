# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.search_targeting_options_request import SearchTargetingOptionsRequest

class TestSearchTargetingOptionsRequest(unittest.TestCase):
    """SearchTargetingOptionsRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchTargetingOptionsRequest:
        """Test SearchTargetingOptionsRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchTargetingOptionsRequest`
        """
        model = SearchTargetingOptionsRequest()
        if include_optional:
            return SearchTargetingOptionsRequest(
                advertiser_id = '',
                business_chain_search_terms = openapi_client.models.business_chain_search_terms.BusinessChainSearchTerms(
                    business_chain_query = '', 
                    region_query = '', ),
                geo_region_search_terms = openapi_client.models.geo_region_search_terms.GeoRegionSearchTerms(
                    geo_region_query = '', ),
                page_size = 56,
                page_token = '',
                poi_search_terms = openapi_client.models.poi_search_terms.PoiSearchTerms(
                    poi_query = '', )
            )
        else:
            return SearchTargetingOptionsRequest(
        )
        """

    def testSearchTargetingOptionsRequest(self):
        """Test SearchTargetingOptionsRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

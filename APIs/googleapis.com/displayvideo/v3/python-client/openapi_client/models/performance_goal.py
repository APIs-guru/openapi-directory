# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PerformanceGoal(BaseModel):
    """
    Settings that control the performance goal of a campaign.
    """ # noqa: E501
    performance_goal_amount_micros: Optional[StrictStr] = Field(default=None, description="The goal amount, in micros of the advertiser's currency. Applicable when performance_goal_type is one of: * `PERFORMANCE_GOAL_TYPE_CPM` * `PERFORMANCE_GOAL_TYPE_CPC` * `PERFORMANCE_GOAL_TYPE_CPA` * `PERFORMANCE_GOAL_TYPE_CPIAVC` * `PERFORMANCE_GOAL_TYPE_VCPM` For example 1500000 represents 1.5 standard units of the currency.", alias="performanceGoalAmountMicros")
    performance_goal_percentage_micros: Optional[StrictStr] = Field(default=None, description="The decimal representation of the goal percentage in micros. Applicable when performance_goal_type is one of: * `PERFORMANCE_GOAL_TYPE_CTR` * `PERFORMANCE_GOAL_TYPE_VIEWABILITY` * `PERFORMANCE_GOAL_TYPE_CLICK_CVR` * `PERFORMANCE_GOAL_TYPE_IMPRESSION_CVR` * `PERFORMANCE_GOAL_TYPE_VTR` * `PERFORMANCE_GOAL_TYPE_AUDIO_COMPLETION_RATE` * `PERFORMANCE_GOAL_TYPE_VIDEO_COMPLETION_RATE` For example, 70000 represents 7% (decimal 0.07).", alias="performanceGoalPercentageMicros")
    performance_goal_string: Optional[StrictStr] = Field(default=None, description="A key performance indicator (KPI) string, which can be empty. Must be UTF-8 encoded with a length of no more than 100 characters. Applicable when performance_goal_type is set to `PERFORMANCE_GOAL_TYPE_OTHER`.", alias="performanceGoalString")
    performance_goal_type: Optional[StrictStr] = Field(default=None, description="Required. The type of the performance goal.", alias="performanceGoalType")
    __properties: ClassVar[List[str]] = ["performanceGoalAmountMicros", "performanceGoalPercentageMicros", "performanceGoalString", "performanceGoalType"]

    @field_validator('performance_goal_type')
    def performance_goal_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PERFORMANCE_GOAL_TYPE_UNSPECIFIED', 'PERFORMANCE_GOAL_TYPE_CPM', 'PERFORMANCE_GOAL_TYPE_CPC', 'PERFORMANCE_GOAL_TYPE_CPA', 'PERFORMANCE_GOAL_TYPE_CTR', 'PERFORMANCE_GOAL_TYPE_VIEWABILITY', 'PERFORMANCE_GOAL_TYPE_CPIAVC', 'PERFORMANCE_GOAL_TYPE_CPE', 'PERFORMANCE_GOAL_TYPE_CLICK_CVR', 'PERFORMANCE_GOAL_TYPE_IMPRESSION_CVR', 'PERFORMANCE_GOAL_TYPE_VCPM', 'PERFORMANCE_GOAL_TYPE_VTR', 'PERFORMANCE_GOAL_TYPE_AUDIO_COMPLETION_RATE', 'PERFORMANCE_GOAL_TYPE_VIDEO_COMPLETION_RATE', 'PERFORMANCE_GOAL_TYPE_OTHER']):
            raise ValueError("must be one of enum values ('PERFORMANCE_GOAL_TYPE_UNSPECIFIED', 'PERFORMANCE_GOAL_TYPE_CPM', 'PERFORMANCE_GOAL_TYPE_CPC', 'PERFORMANCE_GOAL_TYPE_CPA', 'PERFORMANCE_GOAL_TYPE_CTR', 'PERFORMANCE_GOAL_TYPE_VIEWABILITY', 'PERFORMANCE_GOAL_TYPE_CPIAVC', 'PERFORMANCE_GOAL_TYPE_CPE', 'PERFORMANCE_GOAL_TYPE_CLICK_CVR', 'PERFORMANCE_GOAL_TYPE_IMPRESSION_CVR', 'PERFORMANCE_GOAL_TYPE_VCPM', 'PERFORMANCE_GOAL_TYPE_VTR', 'PERFORMANCE_GOAL_TYPE_AUDIO_COMPLETION_RATE', 'PERFORMANCE_GOAL_TYPE_VIDEO_COMPLETION_RATE', 'PERFORMANCE_GOAL_TYPE_OTHER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PerformanceGoal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PerformanceGoal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "performanceGoalAmountMicros": obj.get("performanceGoalAmountMicros"),
            "performanceGoalPercentageMicros": obj.get("performanceGoalPercentageMicros"),
            "performanceGoalString": obj.get("performanceGoalString"),
            "performanceGoalType": obj.get("performanceGoalType")
        })
        return _obj



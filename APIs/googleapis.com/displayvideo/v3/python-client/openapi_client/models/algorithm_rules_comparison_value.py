# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.day_and_time import DayAndTime
from openapi_client.models.dimensions import Dimensions
from typing import Optional, Set
from typing_extensions import Self

class AlgorithmRulesComparisonValue(BaseModel):
    """
    A value to compare the signal to.
    """ # noqa: E501
    bool_value: Optional[StrictBool] = Field(default=None, description="Boolean value.", alias="boolValue")
    creative_dimension_value: Optional[Dimensions] = Field(default=None, alias="creativeDimensionValue")
    day_and_time_value: Optional[DayAndTime] = Field(default=None, alias="dayAndTimeValue")
    device_type_value: Optional[StrictStr] = Field(default=None, description="Device type value.", alias="deviceTypeValue")
    double_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Double value.", alias="doubleValue")
    environment_value: Optional[StrictStr] = Field(default=None, description="Environment value.", alias="environmentValue")
    exchange_value: Optional[StrictStr] = Field(default=None, description="Exchange value.", alias="exchangeValue")
    int64_value: Optional[StrictStr] = Field(default=None, description="Integer value.", alias="int64Value")
    on_screen_position_value: Optional[StrictStr] = Field(default=None, description="Ad position value.", alias="onScreenPositionValue")
    string_value: Optional[StrictStr] = Field(default=None, description="String value.", alias="stringValue")
    __properties: ClassVar[List[str]] = ["boolValue", "creativeDimensionValue", "dayAndTimeValue", "deviceTypeValue", "doubleValue", "environmentValue", "exchangeValue", "int64Value", "onScreenPositionValue", "stringValue"]

    @field_validator('device_type_value')
    def device_type_value_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RULE_DEVICE_TYPE_UNSPECIFIED', 'RULE_DEVICE_TYPE_COMPUTER', 'RULE_DEVICE_TYPE_CONNECTED_TV', 'RULE_DEVICE_TYPE_SMART_PHONE', 'RULE_DEVICE_TYPE_TABLET', 'RULE_DEVICE_TYPE_CONNECTED_DEVICE', 'RULE_DEVICE_TYPE_SET_TOP_BOX']):
            raise ValueError("must be one of enum values ('RULE_DEVICE_TYPE_UNSPECIFIED', 'RULE_DEVICE_TYPE_COMPUTER', 'RULE_DEVICE_TYPE_CONNECTED_TV', 'RULE_DEVICE_TYPE_SMART_PHONE', 'RULE_DEVICE_TYPE_TABLET', 'RULE_DEVICE_TYPE_CONNECTED_DEVICE', 'RULE_DEVICE_TYPE_SET_TOP_BOX')")
        return value

    @field_validator('environment_value')
    def environment_value_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENVIRONMENT_UNSPECIFIED', 'ENVIRONMENT_WEB_OPTIMIZED', 'ENVIRONMENT_WEB_NOT_OPTIMIZED', 'ENVIRONMENT_APP']):
            raise ValueError("must be one of enum values ('ENVIRONMENT_UNSPECIFIED', 'ENVIRONMENT_WEB_OPTIMIZED', 'ENVIRONMENT_WEB_NOT_OPTIMIZED', 'ENVIRONMENT_APP')")
        return value

    @field_validator('exchange_value')
    def exchange_value_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCHANGE_UNSPECIFIED', 'EXCHANGE_GOOGLE_AD_MANAGER', 'EXCHANGE_APPNEXUS', 'EXCHANGE_BRIGHTROLL', 'EXCHANGE_ADFORM', 'EXCHANGE_ADMETA', 'EXCHANGE_ADMIXER', 'EXCHANGE_ADSMOGO', 'EXCHANGE_ADSWIZZ', 'EXCHANGE_BIDSWITCH', 'EXCHANGE_BRIGHTROLL_DISPLAY', 'EXCHANGE_CADREON', 'EXCHANGE_DAILYMOTION', 'EXCHANGE_FIVE', 'EXCHANGE_FLUCT', 'EXCHANGE_FREEWHEEL', 'EXCHANGE_GENIEE', 'EXCHANGE_GUMGUM', 'EXCHANGE_IMOBILE', 'EXCHANGE_IBILLBOARD', 'EXCHANGE_IMPROVE_DIGITAL', 'EXCHANGE_INDEX', 'EXCHANGE_KARGO', 'EXCHANGE_MICROAD', 'EXCHANGE_MOPUB', 'EXCHANGE_NEND', 'EXCHANGE_ONE_BY_AOL_DISPLAY', 'EXCHANGE_ONE_BY_AOL_MOBILE', 'EXCHANGE_ONE_BY_AOL_VIDEO', 'EXCHANGE_OOYALA', 'EXCHANGE_OPENX', 'EXCHANGE_PERMODO', 'EXCHANGE_PLATFORMONE', 'EXCHANGE_PLATFORMID', 'EXCHANGE_PUBMATIC', 'EXCHANGE_PULSEPOINT', 'EXCHANGE_REVENUEMAX', 'EXCHANGE_RUBICON', 'EXCHANGE_SMARTCLIP', 'EXCHANGE_SMARTRTB', 'EXCHANGE_SMARTSTREAMTV', 'EXCHANGE_SOVRN', 'EXCHANGE_SPOTXCHANGE', 'EXCHANGE_STROER', 'EXCHANGE_TEADSTV', 'EXCHANGE_TELARIA', 'EXCHANGE_TVN', 'EXCHANGE_UNITED', 'EXCHANGE_YIELDLAB', 'EXCHANGE_YIELDMO', 'EXCHANGE_UNRULYX', 'EXCHANGE_OPEN8', 'EXCHANGE_TRITON', 'EXCHANGE_TRIPLELIFT', 'EXCHANGE_TABOOLA', 'EXCHANGE_INMOBI', 'EXCHANGE_SMAATO', 'EXCHANGE_AJA', 'EXCHANGE_SUPERSHIP', 'EXCHANGE_NEXSTAR_DIGITAL', 'EXCHANGE_WAZE', 'EXCHANGE_SOUNDCAST', 'EXCHANGE_SHARETHROUGH', 'EXCHANGE_FYBER', 'EXCHANGE_RED_FOR_PUBLISHERS', 'EXCHANGE_MEDIANET', 'EXCHANGE_TAPJOY', 'EXCHANGE_VISTAR', 'EXCHANGE_DAX', 'EXCHANGE_JCD', 'EXCHANGE_PLACE_EXCHANGE', 'EXCHANGE_APPLOVIN', 'EXCHANGE_CONNATIX', 'EXCHANGE_RESET_DIGITAL', 'EXCHANGE_HIVESTACK', 'EXCHANGE_APPLOVIN_GBID', 'EXCHANGE_FYBER_GBID', 'EXCHANGE_UNITY_GBID', 'EXCHANGE_CHARTBOOST_GBID', 'EXCHANGE_ADMOST_GBID', 'EXCHANGE_TOPON_GBID']):
            raise ValueError("must be one of enum values ('EXCHANGE_UNSPECIFIED', 'EXCHANGE_GOOGLE_AD_MANAGER', 'EXCHANGE_APPNEXUS', 'EXCHANGE_BRIGHTROLL', 'EXCHANGE_ADFORM', 'EXCHANGE_ADMETA', 'EXCHANGE_ADMIXER', 'EXCHANGE_ADSMOGO', 'EXCHANGE_ADSWIZZ', 'EXCHANGE_BIDSWITCH', 'EXCHANGE_BRIGHTROLL_DISPLAY', 'EXCHANGE_CADREON', 'EXCHANGE_DAILYMOTION', 'EXCHANGE_FIVE', 'EXCHANGE_FLUCT', 'EXCHANGE_FREEWHEEL', 'EXCHANGE_GENIEE', 'EXCHANGE_GUMGUM', 'EXCHANGE_IMOBILE', 'EXCHANGE_IBILLBOARD', 'EXCHANGE_IMPROVE_DIGITAL', 'EXCHANGE_INDEX', 'EXCHANGE_KARGO', 'EXCHANGE_MICROAD', 'EXCHANGE_MOPUB', 'EXCHANGE_NEND', 'EXCHANGE_ONE_BY_AOL_DISPLAY', 'EXCHANGE_ONE_BY_AOL_MOBILE', 'EXCHANGE_ONE_BY_AOL_VIDEO', 'EXCHANGE_OOYALA', 'EXCHANGE_OPENX', 'EXCHANGE_PERMODO', 'EXCHANGE_PLATFORMONE', 'EXCHANGE_PLATFORMID', 'EXCHANGE_PUBMATIC', 'EXCHANGE_PULSEPOINT', 'EXCHANGE_REVENUEMAX', 'EXCHANGE_RUBICON', 'EXCHANGE_SMARTCLIP', 'EXCHANGE_SMARTRTB', 'EXCHANGE_SMARTSTREAMTV', 'EXCHANGE_SOVRN', 'EXCHANGE_SPOTXCHANGE', 'EXCHANGE_STROER', 'EXCHANGE_TEADSTV', 'EXCHANGE_TELARIA', 'EXCHANGE_TVN', 'EXCHANGE_UNITED', 'EXCHANGE_YIELDLAB', 'EXCHANGE_YIELDMO', 'EXCHANGE_UNRULYX', 'EXCHANGE_OPEN8', 'EXCHANGE_TRITON', 'EXCHANGE_TRIPLELIFT', 'EXCHANGE_TABOOLA', 'EXCHANGE_INMOBI', 'EXCHANGE_SMAATO', 'EXCHANGE_AJA', 'EXCHANGE_SUPERSHIP', 'EXCHANGE_NEXSTAR_DIGITAL', 'EXCHANGE_WAZE', 'EXCHANGE_SOUNDCAST', 'EXCHANGE_SHARETHROUGH', 'EXCHANGE_FYBER', 'EXCHANGE_RED_FOR_PUBLISHERS', 'EXCHANGE_MEDIANET', 'EXCHANGE_TAPJOY', 'EXCHANGE_VISTAR', 'EXCHANGE_DAX', 'EXCHANGE_JCD', 'EXCHANGE_PLACE_EXCHANGE', 'EXCHANGE_APPLOVIN', 'EXCHANGE_CONNATIX', 'EXCHANGE_RESET_DIGITAL', 'EXCHANGE_HIVESTACK', 'EXCHANGE_APPLOVIN_GBID', 'EXCHANGE_FYBER_GBID', 'EXCHANGE_UNITY_GBID', 'EXCHANGE_CHARTBOOST_GBID', 'EXCHANGE_ADMOST_GBID', 'EXCHANGE_TOPON_GBID')")
        return value

    @field_validator('on_screen_position_value')
    def on_screen_position_value_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ON_SCREEN_POSITION_UNSPECIFIED', 'ON_SCREEN_POSITION_UNKNOWN', 'ON_SCREEN_POSITION_ABOVE_THE_FOLD', 'ON_SCREEN_POSITION_BELOW_THE_FOLD']):
            raise ValueError("must be one of enum values ('ON_SCREEN_POSITION_UNSPECIFIED', 'ON_SCREEN_POSITION_UNKNOWN', 'ON_SCREEN_POSITION_ABOVE_THE_FOLD', 'ON_SCREEN_POSITION_BELOW_THE_FOLD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlgorithmRulesComparisonValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creative_dimension_value
        if self.creative_dimension_value:
            _dict['creativeDimensionValue'] = self.creative_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of day_and_time_value
        if self.day_and_time_value:
            _dict['dayAndTimeValue'] = self.day_and_time_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlgorithmRulesComparisonValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boolValue": obj.get("boolValue"),
            "creativeDimensionValue": Dimensions.from_dict(obj["creativeDimensionValue"]) if obj.get("creativeDimensionValue") is not None else None,
            "dayAndTimeValue": DayAndTime.from_dict(obj["dayAndTimeValue"]) if obj.get("dayAndTimeValue") is not None else None,
            "deviceTypeValue": obj.get("deviceTypeValue"),
            "doubleValue": obj.get("doubleValue"),
            "environmentValue": obj.get("environmentValue"),
            "exchangeValue": obj.get("exchangeValue"),
            "int64Value": obj.get("int64Value"),
            "onScreenPositionValue": obj.get("onScreenPositionValue"),
            "stringValue": obj.get("stringValue")
        })
        return _obj



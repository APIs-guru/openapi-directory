# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.youtube_video_details import YoutubeVideoDetails
from typing import Optional, Set
from typing_extensions import Self

class MastheadAd(BaseModel):
    """
    Details for a Masthead Ad.
    """ # noqa: E501
    autoplay_video_duration: Optional[StrictStr] = Field(default=None, description="The duration of time the video will autoplay.", alias="autoplayVideoDuration")
    autoplay_video_start_millisecond: Optional[StrictStr] = Field(default=None, description="The amount of time in milliseconds after which the video will start to play.", alias="autoplayVideoStartMillisecond")
    call_to_action_button_label: Optional[StrictStr] = Field(default=None, description="The text on the call-to-action button.", alias="callToActionButtonLabel")
    call_to_action_final_url: Optional[StrictStr] = Field(default=None, description="The destination URL for the call-to-action button.", alias="callToActionFinalUrl")
    call_to_action_tracking_url: Optional[StrictStr] = Field(default=None, description="The tracking URL for the call-to-action button.", alias="callToActionTrackingUrl")
    companion_youtube_videos: Optional[List[YoutubeVideoDetails]] = Field(default=None, description="The videos that appear next to the Masthead Ad on desktop. Can be no more than two.", alias="companionYoutubeVideos")
    description: Optional[StrictStr] = Field(default=None, description="The description of the ad.")
    headline: Optional[StrictStr] = Field(default=None, description="The headline of the ad.")
    show_channel_art: Optional[StrictBool] = Field(default=None, description="Whether to show a background or banner that appears at the top of a YouTube page.", alias="showChannelArt")
    video: Optional[YoutubeVideoDetails] = None
    video_aspect_ratio: Optional[StrictStr] = Field(default=None, description="The aspect ratio of the autoplaying YouTube video on the Masthead.", alias="videoAspectRatio")
    __properties: ClassVar[List[str]] = ["autoplayVideoDuration", "autoplayVideoStartMillisecond", "callToActionButtonLabel", "callToActionFinalUrl", "callToActionTrackingUrl", "companionYoutubeVideos", "description", "headline", "showChannelArt", "video", "videoAspectRatio"]

    @field_validator('video_aspect_ratio')
    def video_aspect_ratio_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VIDEO_ASPECT_RATIO_UNSPECIFIED', 'VIDEO_ASPECT_RATIO_WIDESCREEN', 'VIDEO_ASPECT_RATIO_FIXED_16_9']):
            raise ValueError("must be one of enum values ('VIDEO_ASPECT_RATIO_UNSPECIFIED', 'VIDEO_ASPECT_RATIO_WIDESCREEN', 'VIDEO_ASPECT_RATIO_FIXED_16_9')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MastheadAd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in companion_youtube_videos (list)
        _items = []
        if self.companion_youtube_videos:
            for _item_companion_youtube_videos in self.companion_youtube_videos:
                if _item_companion_youtube_videos:
                    _items.append(_item_companion_youtube_videos.to_dict())
            _dict['companionYoutubeVideos'] = _items
        # override the default output from pydantic by calling `to_dict()` of video
        if self.video:
            _dict['video'] = self.video.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MastheadAd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoplayVideoDuration": obj.get("autoplayVideoDuration"),
            "autoplayVideoStartMillisecond": obj.get("autoplayVideoStartMillisecond"),
            "callToActionButtonLabel": obj.get("callToActionButtonLabel"),
            "callToActionFinalUrl": obj.get("callToActionFinalUrl"),
            "callToActionTrackingUrl": obj.get("callToActionTrackingUrl"),
            "companionYoutubeVideos": [YoutubeVideoDetails.from_dict(_item) for _item in obj["companionYoutubeVideos"]] if obj.get("companionYoutubeVideos") is not None else None,
            "description": obj.get("description"),
            "headline": obj.get("headline"),
            "showChannelArt": obj.get("showChannelArt"),
            "video": YoutubeVideoDetails.from_dict(obj["video"]) if obj.get("video") is not None else None,
            "videoAspectRatio": obj.get("videoAspectRatio")
        })
        return _obj



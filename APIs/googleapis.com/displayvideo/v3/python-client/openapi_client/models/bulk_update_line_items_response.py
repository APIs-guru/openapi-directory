# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class BulkUpdateLineItemsResponse(BaseModel):
    """
    Response message for LineItemService.BulkUpdateLineItems.
    """ # noqa: E501
    errors: Optional[List[Status]] = Field(default=None, description="Errors returned by line items that failed to update.")
    failed_line_item_ids: Optional[List[StrictStr]] = Field(default=None, description="The IDs of line items that failed to update.", alias="failedLineItemIds")
    skipped_line_item_ids: Optional[List[StrictStr]] = Field(default=None, description="The IDs of line items that are skipped for updates. For example, unnecessary mutates that will result in effectively no changes to line items will be skipped and corresponding line item IDs can be tracked here.", alias="skippedLineItemIds")
    updated_line_item_ids: Optional[List[StrictStr]] = Field(default=None, description="The IDs of successfully updated line items.", alias="updatedLineItemIds")
    __properties: ClassVar[List[str]] = ["errors", "failedLineItemIds", "skippedLineItemIds", "updatedLineItemIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BulkUpdateLineItemsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BulkUpdateLineItemsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errors": [Status.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "failedLineItemIds": obj.get("failedLineItemIds"),
            "skippedLineItemIds": obj.get("skippedLineItemIds"),
            "updatedLineItemIds": obj.get("updatedLineItemIds")
        })
        return _obj



# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.assigned_user_role import AssignedUserRole
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    A single user in Display & Video 360.
    """ # noqa: E501
    assigned_user_roles: Optional[List[AssignedUserRole]] = Field(default=None, description="The assigned user roles. Required in CreateUser. Output only in UpdateUser. Can only be updated through BulkEditAssignedUserRoles.", alias="assignedUserRoles")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the user. Must be UTF-8 encoded with a maximum size of 240 bytes.", alias="displayName")
    email: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The email address used to identify the user.")
    last_login_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the user last logged in DV360 UI.", alias="lastLoginTime")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the user.")
    user_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique ID of the user. Assigned by the system.", alias="userId")
    __properties: ClassVar[List[str]] = ["assignedUserRoles", "displayName", "email", "lastLoginTime", "name", "userId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_login_time",
            "name",
            "user_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assigned_user_roles (list)
        _items = []
        if self.assigned_user_roles:
            for _item_assigned_user_roles in self.assigned_user_roles:
                if _item_assigned_user_roles:
                    _items.append(_item_assigned_user_roles.to_dict())
            _dict['assignedUserRoles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assignedUserRoles": [AssignedUserRole.from_dict(_item) for _item in obj["assignedUserRoles"]] if obj.get("assignedUserRoles") is not None else None,
            "displayName": obj.get("displayName"),
            "email": obj.get("email"),
            "lastLoginTime": obj.get("lastLoginTime"),
            "name": obj.get("name"),
            "userId": obj.get("userId")
        })
        return _obj



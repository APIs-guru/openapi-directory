# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MaximizeSpendBidStrategy(BaseModel):
    """
    A strategy that automatically adjusts the bid to optimize a specified performance goal while spending the full budget.
    """ # noqa: E501
    custom_bidding_algorithm_id: Optional[StrictStr] = Field(default=None, description="The ID of the Custom Bidding Algorithm used by this strategy. Only applicable when performance_goal_type is set to `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO`.", alias="customBiddingAlgorithmId")
    max_average_cpm_bid_amount_micros: Optional[StrictStr] = Field(default=None, description="The maximum average CPM that may be bid, in micros of the advertiser's currency. Must be greater than or equal to a billable unit of the given currency. For example, 1500000 represents 1.5 standard units of the currency.", alias="maxAverageCpmBidAmountMicros")
    performance_goal_type: Optional[StrictStr] = Field(default=None, description="Required. The type of the performance goal that the bidding strategy tries to minimize while spending the full budget. `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM` is not supported for this strategy.", alias="performanceGoalType")
    raise_bid_for_deals: Optional[StrictBool] = Field(default=None, description="Whether the strategy takes deal floor prices into account.", alias="raiseBidForDeals")
    __properties: ClassVar[List[str]] = ["customBiddingAlgorithmId", "maxAverageCpmBidAmountMicros", "performanceGoalType", "raiseBidForDeals"]

    @field_validator('performance_goal_type')
    def performance_goal_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_UNSPECIFIED', 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA', 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC', 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM', 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO', 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CIVA', 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_IVO_TEN', 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_AV_VIEWED']):
            raise ValueError("must be one of enum values ('BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_UNSPECIFIED', 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA', 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC', 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM', 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO', 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CIVA', 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_IVO_TEN', 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_AV_VIEWED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MaximizeSpendBidStrategy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MaximizeSpendBidStrategy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customBiddingAlgorithmId": obj.get("customBiddingAlgorithmId"),
            "maxAverageCpmBidAmountMicros": obj.get("maxAverageCpmBidAmountMicros"),
            "performanceGoalType": obj.get("performanceGoalType"),
            "raiseBidForDeals": obj.get("raiseBidForDeals")
        })
        return _obj



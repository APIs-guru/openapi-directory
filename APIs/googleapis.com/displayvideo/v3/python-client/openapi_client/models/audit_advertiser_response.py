# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AuditAdvertiserResponse(BaseModel):
    """
    Response message for AdvertiserService.AuditAdvertiser.
    """ # noqa: E501
    ad_group_criteria_count: Optional[StrictStr] = Field(default=None, description="The number of individual targeting options from the following targeting types that are assigned to a line item under this advertiser. These individual targeting options count towards the limit of 4500000 ad group targeting options per advertiser. Qualifying Targeting types: * Channels, URLs, apps, and collections * Demographic * Google Audiences, including Affinity, Custom Affinity, and In-market audiences * Inventory source * Keyword * Mobile app category * User lists * Video targeting * Viewability", alias="adGroupCriteriaCount")
    campaign_criteria_count: Optional[StrictStr] = Field(default=None, description="The number of individual targeting options from the following targeting types that are assigned to a line item under this advertiser. These individual targeting options count towards the limit of 900000 campaign targeting options per advertiser. Qualifying Targeting types: * Position * Browser * Connection speed * Day and time * Device and operating system * Digital content label * Sensitive categories * Environment * Geography, including business chains and proximity * ISP * Language * Third-party verification", alias="campaignCriteriaCount")
    channels_count: Optional[StrictStr] = Field(default=None, description="The number of channels created under this advertiser. These channels count towards the limit of 1000 channels per advertiser.", alias="channelsCount")
    negative_keyword_lists_count: Optional[StrictStr] = Field(default=None, description="The number of negative keyword lists created under this advertiser. These negative keyword lists count towards the limit of 20 negative keyword lists per advertiser.", alias="negativeKeywordListsCount")
    negatively_targeted_channels_count: Optional[StrictStr] = Field(default=None, description="The number of negatively targeted channels created under this advertiser. These negatively targeted channels count towards the limit of 5 negatively targeted channels per advertiser.", alias="negativelyTargetedChannelsCount")
    used_campaigns_count: Optional[StrictStr] = Field(default=None, description="The number of ACTIVE and PAUSED campaigns under this advertiser. These campaigns count towards the limit of 9999 campaigns per advertiser.", alias="usedCampaignsCount")
    used_insertion_orders_count: Optional[StrictStr] = Field(default=None, description="The number of ACTIVE, PAUSED and DRAFT insertion orders under this advertiser. These insertion orders count towards the limit of 9999 insertion orders per advertiser.", alias="usedInsertionOrdersCount")
    used_line_items_count: Optional[StrictStr] = Field(default=None, description="The number of ACTIVE, PAUSED, and DRAFT line items under this advertiser. These line items count towards the limit of 9999 line items per advertiser.", alias="usedLineItemsCount")
    __properties: ClassVar[List[str]] = ["adGroupCriteriaCount", "campaignCriteriaCount", "channelsCount", "negativeKeywordListsCount", "negativelyTargetedChannelsCount", "usedCampaignsCount", "usedInsertionOrdersCount", "usedLineItemsCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuditAdvertiserResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuditAdvertiserResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adGroupCriteriaCount": obj.get("adGroupCriteriaCount"),
            "campaignCriteriaCount": obj.get("campaignCriteriaCount"),
            "channelsCount": obj.get("channelsCount"),
            "negativeKeywordListsCount": obj.get("negativeKeywordListsCount"),
            "negativelyTargetedChannelsCount": obj.get("negativelyTargetedChannelsCount"),
            "usedCampaignsCount": obj.get("usedCampaignsCount"),
            "usedInsertionOrdersCount": obj.get("usedInsertionOrdersCount"),
            "usedLineItemsCount": obj.get("usedLineItemsCount")
        })
        return _obj



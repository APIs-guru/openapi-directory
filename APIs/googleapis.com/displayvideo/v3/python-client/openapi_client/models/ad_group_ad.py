# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ad_url import AdUrl
from openapi_client.models.audio_ad import AudioAd
from openapi_client.models.bumper_ad import BumperAd
from openapi_client.models.display_video_source_ad import DisplayVideoSourceAd
from openapi_client.models.in_stream_ad import InStreamAd
from openapi_client.models.masthead_ad import MastheadAd
from openapi_client.models.non_skippable_ad import NonSkippableAd
from openapi_client.models.video_discovery_ad import VideoDiscoveryAd
from openapi_client.models.video_performance_ad import VideoPerformanceAd
from typing import Optional, Set
from typing_extensions import Self

class AdGroupAd(BaseModel):
    """
    A single ad associated with an ad group.
    """ # noqa: E501
    ad_group_ad_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the ad. Assigned by the system.", alias="adGroupAdId")
    ad_group_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the ad group that the ad belongs to.", alias="adGroupId")
    ad_urls: Optional[List[AdUrl]] = Field(default=None, description="List of URLs used by the ad.", alias="adUrls")
    advertiser_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the advertiser the ad belongs to.", alias="advertiserId")
    audio_ad: Optional[AudioAd] = Field(default=None, alias="audioAd")
    bumper_ad: Optional[BumperAd] = Field(default=None, alias="bumperAd")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the ad. Must be UTF-8 encoded with a maximum size of 255 bytes.", alias="displayName")
    display_video_source_ad: Optional[DisplayVideoSourceAd] = Field(default=None, alias="displayVideoSourceAd")
    entity_status: Optional[StrictStr] = Field(default=None, description="The entity status of the ad.", alias="entityStatus")
    in_stream_ad: Optional[InStreamAd] = Field(default=None, alias="inStreamAd")
    masthead_ad: Optional[MastheadAd] = Field(default=None, alias="mastheadAd")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the ad.")
    non_skippable_ad: Optional[NonSkippableAd] = Field(default=None, alias="nonSkippableAd")
    video_discover_ad: Optional[VideoDiscoveryAd] = Field(default=None, alias="videoDiscoverAd")
    video_performance_ad: Optional[VideoPerformanceAd] = Field(default=None, alias="videoPerformanceAd")
    __properties: ClassVar[List[str]] = ["adGroupAdId", "adGroupId", "adUrls", "advertiserId", "audioAd", "bumperAd", "displayName", "displayVideoSourceAd", "entityStatus", "inStreamAd", "mastheadAd", "name", "nonSkippableAd", "videoDiscoverAd", "videoPerformanceAd"]

    @field_validator('entity_status')
    def entity_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENTITY_STATUS_UNSPECIFIED', 'ENTITY_STATUS_ACTIVE', 'ENTITY_STATUS_ARCHIVED', 'ENTITY_STATUS_DRAFT', 'ENTITY_STATUS_PAUSED', 'ENTITY_STATUS_SCHEDULED_FOR_DELETION']):
            raise ValueError("must be one of enum values ('ENTITY_STATUS_UNSPECIFIED', 'ENTITY_STATUS_ACTIVE', 'ENTITY_STATUS_ARCHIVED', 'ENTITY_STATUS_DRAFT', 'ENTITY_STATUS_PAUSED', 'ENTITY_STATUS_SCHEDULED_FOR_DELETION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdGroupAd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ad_urls (list)
        _items = []
        if self.ad_urls:
            for _item_ad_urls in self.ad_urls:
                if _item_ad_urls:
                    _items.append(_item_ad_urls.to_dict())
            _dict['adUrls'] = _items
        # override the default output from pydantic by calling `to_dict()` of audio_ad
        if self.audio_ad:
            _dict['audioAd'] = self.audio_ad.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bumper_ad
        if self.bumper_ad:
            _dict['bumperAd'] = self.bumper_ad.to_dict()
        # override the default output from pydantic by calling `to_dict()` of display_video_source_ad
        if self.display_video_source_ad:
            _dict['displayVideoSourceAd'] = self.display_video_source_ad.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_stream_ad
        if self.in_stream_ad:
            _dict['inStreamAd'] = self.in_stream_ad.to_dict()
        # override the default output from pydantic by calling `to_dict()` of masthead_ad
        if self.masthead_ad:
            _dict['mastheadAd'] = self.masthead_ad.to_dict()
        # override the default output from pydantic by calling `to_dict()` of non_skippable_ad
        if self.non_skippable_ad:
            _dict['nonSkippableAd'] = self.non_skippable_ad.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_discover_ad
        if self.video_discover_ad:
            _dict['videoDiscoverAd'] = self.video_discover_ad.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_performance_ad
        if self.video_performance_ad:
            _dict['videoPerformanceAd'] = self.video_performance_ad.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdGroupAd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adGroupAdId": obj.get("adGroupAdId"),
            "adGroupId": obj.get("adGroupId"),
            "adUrls": [AdUrl.from_dict(_item) for _item in obj["adUrls"]] if obj.get("adUrls") is not None else None,
            "advertiserId": obj.get("advertiserId"),
            "audioAd": AudioAd.from_dict(obj["audioAd"]) if obj.get("audioAd") is not None else None,
            "bumperAd": BumperAd.from_dict(obj["bumperAd"]) if obj.get("bumperAd") is not None else None,
            "displayName": obj.get("displayName"),
            "displayVideoSourceAd": DisplayVideoSourceAd.from_dict(obj["displayVideoSourceAd"]) if obj.get("displayVideoSourceAd") is not None else None,
            "entityStatus": obj.get("entityStatus"),
            "inStreamAd": InStreamAd.from_dict(obj["inStreamAd"]) if obj.get("inStreamAd") is not None else None,
            "mastheadAd": MastheadAd.from_dict(obj["mastheadAd"]) if obj.get("mastheadAd") is not None else None,
            "name": obj.get("name"),
            "nonSkippableAd": NonSkippableAd.from_dict(obj["nonSkippableAd"]) if obj.get("nonSkippableAd") is not None else None,
            "videoDiscoverAd": VideoDiscoveryAd.from_dict(obj["videoDiscoverAd"]) if obj.get("videoDiscoverAd") is not None else None,
            "videoPerformanceAd": VideoPerformanceAd.from_dict(obj["videoPerformanceAd"]) if obj.get("videoPerformanceAd") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.dimensions import Dimensions
from typing import Optional, Set
from typing_extensions import Self

class Transcode(BaseModel):
    """
    Represents information about the transcoded audio or video file.
    """ # noqa: E501
    audio_bit_rate_kbps: Optional[StrictStr] = Field(default=None, description="The bit rate for the audio stream of the transcoded video, or the bit rate for the transcoded audio, in kilobits per second.", alias="audioBitRateKbps")
    audio_sample_rate_hz: Optional[StrictStr] = Field(default=None, description="The sample rate for the audio stream of the transcoded video, or the sample rate for the transcoded audio, in hertz.", alias="audioSampleRateHz")
    bit_rate_kbps: Optional[StrictStr] = Field(default=None, description="The transcoding bit rate of the transcoded video, in kilobits per second.", alias="bitRateKbps")
    dimensions: Optional[Dimensions] = None
    file_size_bytes: Optional[StrictStr] = Field(default=None, description="The size of the transcoded file, in bytes.", alias="fileSizeBytes")
    frame_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The frame rate of the transcoded video, in frames per second.", alias="frameRate")
    mime_type: Optional[StrictStr] = Field(default=None, description="The MIME type of the transcoded file.", alias="mimeType")
    name: Optional[StrictStr] = Field(default=None, description="The name of the transcoded file.")
    transcoded: Optional[StrictBool] = Field(default=None, description="Indicates if the transcoding was successful.")
    __properties: ClassVar[List[str]] = ["audioBitRateKbps", "audioSampleRateHz", "bitRateKbps", "dimensions", "fileSizeBytes", "frameRate", "mimeType", "name", "transcoded"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transcode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dimensions
        if self.dimensions:
            _dict['dimensions'] = self.dimensions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transcode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audioBitRateKbps": obj.get("audioBitRateKbps"),
            "audioSampleRateHz": obj.get("audioSampleRateHz"),
            "bitRateKbps": obj.get("bitRateKbps"),
            "dimensions": Dimensions.from_dict(obj["dimensions"]) if obj.get("dimensions") is not None else None,
            "fileSizeBytes": obj.get("fileSizeBytes"),
            "frameRate": obj.get("frameRate"),
            "mimeType": obj.get("mimeType"),
            "name": obj.get("name"),
            "transcoded": obj.get("transcoded")
        })
        return _obj



# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.custom_bidding_algorithm_rules_error import CustomBiddingAlgorithmRulesError
from openapi_client.models.custom_bidding_algorithm_rules_ref import CustomBiddingAlgorithmRulesRef
from typing import Optional, Set
from typing_extensions import Self

class CustomBiddingAlgorithmRules(BaseModel):
    """
    A single custom bidding algorithm rules.
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, description="Output only. Whether the rules resource is currently being used for scoring by the parent algorithm.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the rules resource was created.", alias="createTime")
    custom_bidding_algorithm_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique ID of the custom bidding algorithm that the rules resource belongs to.", alias="customBiddingAlgorithmId")
    custom_bidding_algorithm_rules_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique ID of the rules resource.", alias="customBiddingAlgorithmRulesId")
    error: Optional[CustomBiddingAlgorithmRulesError] = None
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the rules resource.")
    rules: Optional[CustomBiddingAlgorithmRulesRef] = None
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the rules resource.")
    __properties: ClassVar[List[str]] = ["active", "createTime", "customBiddingAlgorithmId", "customBiddingAlgorithmRulesId", "error", "name", "rules", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACCEPTED', 'REJECTED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACCEPTED', 'REJECTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomBiddingAlgorithmRules from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "active",
            "create_time",
            "custom_bidding_algorithm_id",
            "custom_bidding_algorithm_rules_id",
            "name",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rules
        if self.rules:
            _dict['rules'] = self.rules.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomBiddingAlgorithmRules from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "createTime": obj.get("createTime"),
            "customBiddingAlgorithmId": obj.get("customBiddingAlgorithmId"),
            "customBiddingAlgorithmRulesId": obj.get("customBiddingAlgorithmRulesId"),
            "error": CustomBiddingAlgorithmRulesError.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "name": obj.get("name"),
            "rules": CustomBiddingAlgorithmRulesRef.from_dict(obj["rules"]) if obj.get("rules") is not None else None,
            "state": obj.get("state")
        })
        return _obj



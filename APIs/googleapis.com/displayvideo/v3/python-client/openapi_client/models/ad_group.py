# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bidding_strategy import BiddingStrategy
from openapi_client.models.product_feed_data import ProductFeedData
from openapi_client.models.targeting_expansion_config import TargetingExpansionConfig
from typing import Optional, Set
from typing_extensions import Self

class AdGroup(BaseModel):
    """
    A single ad group associated with a line item.
    """ # noqa: E501
    ad_group_format: Optional[StrictStr] = Field(default=None, description="The format of the ads in the ad group.", alias="adGroupFormat")
    ad_group_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the ad group. Assigned by the system.", alias="adGroupId")
    advertiser_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the advertiser the ad group belongs to.", alias="advertiserId")
    bid_strategy: Optional[BiddingStrategy] = Field(default=None, alias="bidStrategy")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the ad group. Must be UTF-8 encoded with a maximum size of 255 bytes.", alias="displayName")
    entity_status: Optional[StrictStr] = Field(default=None, description="Controls whether or not the ad group can spend its budget and bid on inventory. If the ad group's parent line item is not active, the ad group can't spend its budget even if its own status is `ENTITY_STATUS_ACTIVE`.", alias="entityStatus")
    line_item_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the line item that the ad group belongs to.", alias="lineItemId")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the ad group.")
    product_feed_data: Optional[ProductFeedData] = Field(default=None, alias="productFeedData")
    targeting_expansion: Optional[TargetingExpansionConfig] = Field(default=None, alias="targetingExpansion")
    __properties: ClassVar[List[str]] = ["adGroupFormat", "adGroupId", "advertiserId", "bidStrategy", "displayName", "entityStatus", "lineItemId", "name", "productFeedData", "targetingExpansion"]

    @field_validator('ad_group_format')
    def ad_group_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AD_GROUP_FORMAT_UNSPECIFIED', 'AD_GROUP_FORMAT_IN_STREAM', 'AD_GROUP_FORMAT_VIDEO_DISCOVERY', 'AD_GROUP_FORMAT_BUMPER', 'AD_GROUP_FORMAT_NON_SKIPPABLE_IN_STREAM', 'AD_GROUP_FORMAT_AUDIO', 'AD_GROUP_FORMAT_RESPONSIVE', 'AD_GROUP_FORMAT_REACH', 'AD_GROUP_FORMAT_MASTHEAD']):
            raise ValueError("must be one of enum values ('AD_GROUP_FORMAT_UNSPECIFIED', 'AD_GROUP_FORMAT_IN_STREAM', 'AD_GROUP_FORMAT_VIDEO_DISCOVERY', 'AD_GROUP_FORMAT_BUMPER', 'AD_GROUP_FORMAT_NON_SKIPPABLE_IN_STREAM', 'AD_GROUP_FORMAT_AUDIO', 'AD_GROUP_FORMAT_RESPONSIVE', 'AD_GROUP_FORMAT_REACH', 'AD_GROUP_FORMAT_MASTHEAD')")
        return value

    @field_validator('entity_status')
    def entity_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENTITY_STATUS_UNSPECIFIED', 'ENTITY_STATUS_ACTIVE', 'ENTITY_STATUS_ARCHIVED', 'ENTITY_STATUS_DRAFT', 'ENTITY_STATUS_PAUSED', 'ENTITY_STATUS_SCHEDULED_FOR_DELETION']):
            raise ValueError("must be one of enum values ('ENTITY_STATUS_UNSPECIFIED', 'ENTITY_STATUS_ACTIVE', 'ENTITY_STATUS_ARCHIVED', 'ENTITY_STATUS_DRAFT', 'ENTITY_STATUS_PAUSED', 'ENTITY_STATUS_SCHEDULED_FOR_DELETION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bid_strategy
        if self.bid_strategy:
            _dict['bidStrategy'] = self.bid_strategy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_feed_data
        if self.product_feed_data:
            _dict['productFeedData'] = self.product_feed_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of targeting_expansion
        if self.targeting_expansion:
            _dict['targetingExpansion'] = self.targeting_expansion.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adGroupFormat": obj.get("adGroupFormat"),
            "adGroupId": obj.get("adGroupId"),
            "advertiserId": obj.get("advertiserId"),
            "bidStrategy": BiddingStrategy.from_dict(obj["bidStrategy"]) if obj.get("bidStrategy") is not None else None,
            "displayName": obj.get("displayName"),
            "entityStatus": obj.get("entityStatus"),
            "lineItemId": obj.get("lineItemId"),
            "name": obj.get("name"),
            "productFeedData": ProductFeedData.from_dict(obj["productFeedData"]) if obj.get("productFeedData") is not None else None,
            "targetingExpansion": TargetingExpansionConfig.from_dict(obj["targetingExpansion"]) if obj.get("targetingExpansion") is not None else None
        })
        return _obj



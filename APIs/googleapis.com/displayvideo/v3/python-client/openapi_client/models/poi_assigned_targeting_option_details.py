# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PoiAssignedTargetingOptionDetails(BaseModel):
    """
    Details for assigned POI targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_POI`.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. The display name of a POI, e.g. \"Times Square\", \"Space Needle\", followed by its full address if available.", alias="displayName")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. Latitude of the POI rounding to 6th decimal place.")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. Longitude of the POI rounding to 6th decimal place.")
    proximity_radius_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Required. The radius of the area around the POI that will be targeted. The units of the radius are specified by proximity_radius_unit. Must be 1 to 800 if unit is `DISTANCE_UNIT_KILOMETERS` and 1 to 500 if unit is `DISTANCE_UNIT_MILES`.", alias="proximityRadiusAmount")
    proximity_radius_unit: Optional[StrictStr] = Field(default=None, description="Required. The unit of distance by which the targeting radius is measured.", alias="proximityRadiusUnit")
    targeting_option_id: Optional[StrictStr] = Field(default=None, description="Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_POI`. Accepted POI targeting option IDs can be retrieved using `targetingTypes.targetingOptions.search`. If targeting a specific latitude/longitude coordinate removed from an address or POI name, you can generate the necessary targeting option ID by rounding the desired coordinate values to the 6th decimal place, removing the decimals, and concatenating the string values separated by a semicolon. For example, you can target the latitude/longitude pair of 40.7414691, -74.003387 using the targeting option ID \"40741469;-74003387\". **Upon** **creation, this field value will be updated to append a semicolon and** **alphanumerical hash value if only latitude/longitude coordinates are** **provided.**", alias="targetingOptionId")
    __properties: ClassVar[List[str]] = ["displayName", "latitude", "longitude", "proximityRadiusAmount", "proximityRadiusUnit", "targetingOptionId"]

    @field_validator('proximity_radius_unit')
    def proximity_radius_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DISTANCE_UNIT_UNSPECIFIED', 'DISTANCE_UNIT_MILES', 'DISTANCE_UNIT_KILOMETERS']):
            raise ValueError("must be one of enum values ('DISTANCE_UNIT_UNSPECIFIED', 'DISTANCE_UNIT_MILES', 'DISTANCE_UNIT_KILOMETERS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PoiAssignedTargetingOptionDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "display_name",
            "latitude",
            "longitude",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PoiAssignedTargetingOptionDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "proximityRadiusAmount": obj.get("proximityRadiusAmount"),
            "proximityRadiusUnit": obj.get("proximityRadiusUnit"),
            "targetingOptionId": obj.get("targetingOptionId")
        })
        return _obj



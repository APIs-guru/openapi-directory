# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Pacing(BaseModel):
    """
    Settings that control the rate at which a budget is spent.
    """ # noqa: E501
    daily_max_impressions: Optional[StrictStr] = Field(default=None, description="Maximum number of impressions to serve every day. Applicable when the budget is impression based. Must be greater than 0.", alias="dailyMaxImpressions")
    daily_max_micros: Optional[StrictStr] = Field(default=None, description="Maximum currency amount to spend every day in micros of advertiser's currency. Applicable when the budget is currency based. Must be greater than 0. For example, for 1.5 standard unit of the currency, set this field to 1500000. The value assigned will be rounded to whole billable units for the relevant currency by the following rules: any positive value less than a single billable unit will be rounded up to one billable unit and any value larger than a single billable unit will be rounded down to the nearest billable value. For example, if the currency's billable unit is 0.01, and this field is set to 10257770, it will round down to 10250000, a value of 10.25. If set to 505, it will round up to 10000, a value of 0.01.", alias="dailyMaxMicros")
    pacing_period: Optional[StrictStr] = Field(default=None, description="Required. The time period in which the pacing budget will be spent. When automatic budget allocation is enabled at the insertion order via automationType, this field is output only and defaults to `PACING_PERIOD_FLIGHT`.", alias="pacingPeriod")
    pacing_type: Optional[StrictStr] = Field(default=None, description="Required. The type of pacing that defines how the budget amount will be spent across the pacing_period.", alias="pacingType")
    __properties: ClassVar[List[str]] = ["dailyMaxImpressions", "dailyMaxMicros", "pacingPeriod", "pacingType"]

    @field_validator('pacing_period')
    def pacing_period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PACING_PERIOD_UNSPECIFIED', 'PACING_PERIOD_DAILY', 'PACING_PERIOD_FLIGHT']):
            raise ValueError("must be one of enum values ('PACING_PERIOD_UNSPECIFIED', 'PACING_PERIOD_DAILY', 'PACING_PERIOD_FLIGHT')")
        return value

    @field_validator('pacing_type')
    def pacing_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PACING_TYPE_UNSPECIFIED', 'PACING_TYPE_AHEAD', 'PACING_TYPE_ASAP', 'PACING_TYPE_EVEN']):
            raise ValueError("must be one of enum values ('PACING_TYPE_UNSPECIFIED', 'PACING_TYPE_AHEAD', 'PACING_TYPE_ASAP', 'PACING_TYPE_EVEN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Pacing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Pacing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dailyMaxImpressions": obj.get("dailyMaxImpressions"),
            "dailyMaxMicros": obj.get("dailyMaxMicros"),
            "pacingPeriod": obj.get("pacingPeriod"),
            "pacingType": obj.get("pacingType")
        })
        return _obj



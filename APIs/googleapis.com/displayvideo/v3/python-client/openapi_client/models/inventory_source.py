# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.creative_config import CreativeConfig
from openapi_client.models.inventory_source_accessors import InventorySourceAccessors
from openapi_client.models.inventory_source_status import InventorySourceStatus
from openapi_client.models.rate_details import RateDetails
from openapi_client.models.time_range import TimeRange
from typing import Optional, Set
from typing_extensions import Self

class InventorySource(BaseModel):
    """
    An inventory source.
    """ # noqa: E501
    commitment: Optional[StrictStr] = Field(default=None, description="Whether the inventory source has a guaranteed or non-guaranteed delivery.")
    creative_configs: Optional[List[CreativeConfig]] = Field(default=None, description="The creative requirements of the inventory source. Not applicable for auction packages.", alias="creativeConfigs")
    deal_id: Optional[StrictStr] = Field(default=None, description="The ID in the exchange space that uniquely identifies the inventory source. Must be unique across buyers within each exchange but not necessarily unique across exchanges.", alias="dealId")
    delivery_method: Optional[StrictStr] = Field(default=None, description="The delivery method of the inventory source. * For non-guaranteed inventory sources, the only acceptable value is `INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC`. * For guaranteed inventory sources, acceptable values are `INVENTORY_SOURCE_DELIVERY_METHOD_TAG` and `INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC`.", alias="deliveryMethod")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the inventory source. Must be UTF-8 encoded with a maximum size of 240 bytes.", alias="displayName")
    exchange: Optional[StrictStr] = Field(default=None, description="The exchange to which the inventory source belongs.")
    guaranteed_order_id: Optional[StrictStr] = Field(default=None, description="Immutable. The ID of the guaranteed order that this inventory source belongs to. Only applicable when commitment is `INVENTORY_SOURCE_COMMITMENT_GUARANTEED`.", alias="guaranteedOrderId")
    inventory_source_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique ID of the inventory source. Assigned by the system.", alias="inventorySourceId")
    inventory_source_product_type: Optional[StrictStr] = Field(default=None, description="Output only. The product type of the inventory source, denoting the way through which it sells inventory.", alias="inventorySourceProductType")
    inventory_source_type: Optional[StrictStr] = Field(default=None, description="Denotes the type of the inventory source.", alias="inventorySourceType")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the inventory source.")
    publisher_name: Optional[StrictStr] = Field(default=None, description="The publisher/seller name of the inventory source.", alias="publisherName")
    rate_details: Optional[RateDetails] = Field(default=None, alias="rateDetails")
    read_advertiser_ids: Optional[List[StrictStr]] = Field(default=None, description="Output only. The IDs of advertisers with read-only access to the inventory source.", alias="readAdvertiserIds")
    read_partner_ids: Optional[List[StrictStr]] = Field(default=None, description="Output only. The IDs of partners with read-only access to the inventory source. All advertisers of partners in this field inherit read-only access to the inventory source.", alias="readPartnerIds")
    read_write_accessors: Optional[InventorySourceAccessors] = Field(default=None, alias="readWriteAccessors")
    status: Optional[InventorySourceStatus] = None
    time_range: Optional[TimeRange] = Field(default=None, alias="timeRange")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the inventory source was last updated. Assigned by the system.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["commitment", "creativeConfigs", "dealId", "deliveryMethod", "displayName", "exchange", "guaranteedOrderId", "inventorySourceId", "inventorySourceProductType", "inventorySourceType", "name", "publisherName", "rateDetails", "readAdvertiserIds", "readPartnerIds", "readWriteAccessors", "status", "timeRange", "updateTime"]

    @field_validator('commitment')
    def commitment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INVENTORY_SOURCE_COMMITMENT_UNSPECIFIED', 'INVENTORY_SOURCE_COMMITMENT_GUARANTEED', 'INVENTORY_SOURCE_COMMITMENT_NON_GUARANTEED']):
            raise ValueError("must be one of enum values ('INVENTORY_SOURCE_COMMITMENT_UNSPECIFIED', 'INVENTORY_SOURCE_COMMITMENT_GUARANTEED', 'INVENTORY_SOURCE_COMMITMENT_NON_GUARANTEED')")
        return value

    @field_validator('delivery_method')
    def delivery_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INVENTORY_SOURCE_DELIVERY_METHOD_UNSPECIFIED', 'INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC', 'INVENTORY_SOURCE_DELIVERY_METHOD_TAG']):
            raise ValueError("must be one of enum values ('INVENTORY_SOURCE_DELIVERY_METHOD_UNSPECIFIED', 'INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC', 'INVENTORY_SOURCE_DELIVERY_METHOD_TAG')")
        return value

    @field_validator('exchange')
    def exchange_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCHANGE_UNSPECIFIED', 'EXCHANGE_GOOGLE_AD_MANAGER', 'EXCHANGE_APPNEXUS', 'EXCHANGE_BRIGHTROLL', 'EXCHANGE_ADFORM', 'EXCHANGE_ADMETA', 'EXCHANGE_ADMIXER', 'EXCHANGE_ADSMOGO', 'EXCHANGE_ADSWIZZ', 'EXCHANGE_BIDSWITCH', 'EXCHANGE_BRIGHTROLL_DISPLAY', 'EXCHANGE_CADREON', 'EXCHANGE_DAILYMOTION', 'EXCHANGE_FIVE', 'EXCHANGE_FLUCT', 'EXCHANGE_FREEWHEEL', 'EXCHANGE_GENIEE', 'EXCHANGE_GUMGUM', 'EXCHANGE_IMOBILE', 'EXCHANGE_IBILLBOARD', 'EXCHANGE_IMPROVE_DIGITAL', 'EXCHANGE_INDEX', 'EXCHANGE_KARGO', 'EXCHANGE_MICROAD', 'EXCHANGE_MOPUB', 'EXCHANGE_NEND', 'EXCHANGE_ONE_BY_AOL_DISPLAY', 'EXCHANGE_ONE_BY_AOL_MOBILE', 'EXCHANGE_ONE_BY_AOL_VIDEO', 'EXCHANGE_OOYALA', 'EXCHANGE_OPENX', 'EXCHANGE_PERMODO', 'EXCHANGE_PLATFORMONE', 'EXCHANGE_PLATFORMID', 'EXCHANGE_PUBMATIC', 'EXCHANGE_PULSEPOINT', 'EXCHANGE_REVENUEMAX', 'EXCHANGE_RUBICON', 'EXCHANGE_SMARTCLIP', 'EXCHANGE_SMARTRTB', 'EXCHANGE_SMARTSTREAMTV', 'EXCHANGE_SOVRN', 'EXCHANGE_SPOTXCHANGE', 'EXCHANGE_STROER', 'EXCHANGE_TEADSTV', 'EXCHANGE_TELARIA', 'EXCHANGE_TVN', 'EXCHANGE_UNITED', 'EXCHANGE_YIELDLAB', 'EXCHANGE_YIELDMO', 'EXCHANGE_UNRULYX', 'EXCHANGE_OPEN8', 'EXCHANGE_TRITON', 'EXCHANGE_TRIPLELIFT', 'EXCHANGE_TABOOLA', 'EXCHANGE_INMOBI', 'EXCHANGE_SMAATO', 'EXCHANGE_AJA', 'EXCHANGE_SUPERSHIP', 'EXCHANGE_NEXSTAR_DIGITAL', 'EXCHANGE_WAZE', 'EXCHANGE_SOUNDCAST', 'EXCHANGE_SHARETHROUGH', 'EXCHANGE_FYBER', 'EXCHANGE_RED_FOR_PUBLISHERS', 'EXCHANGE_MEDIANET', 'EXCHANGE_TAPJOY', 'EXCHANGE_VISTAR', 'EXCHANGE_DAX', 'EXCHANGE_JCD', 'EXCHANGE_PLACE_EXCHANGE', 'EXCHANGE_APPLOVIN', 'EXCHANGE_CONNATIX', 'EXCHANGE_RESET_DIGITAL', 'EXCHANGE_HIVESTACK', 'EXCHANGE_APPLOVIN_GBID', 'EXCHANGE_FYBER_GBID', 'EXCHANGE_UNITY_GBID', 'EXCHANGE_CHARTBOOST_GBID', 'EXCHANGE_ADMOST_GBID', 'EXCHANGE_TOPON_GBID']):
            raise ValueError("must be one of enum values ('EXCHANGE_UNSPECIFIED', 'EXCHANGE_GOOGLE_AD_MANAGER', 'EXCHANGE_APPNEXUS', 'EXCHANGE_BRIGHTROLL', 'EXCHANGE_ADFORM', 'EXCHANGE_ADMETA', 'EXCHANGE_ADMIXER', 'EXCHANGE_ADSMOGO', 'EXCHANGE_ADSWIZZ', 'EXCHANGE_BIDSWITCH', 'EXCHANGE_BRIGHTROLL_DISPLAY', 'EXCHANGE_CADREON', 'EXCHANGE_DAILYMOTION', 'EXCHANGE_FIVE', 'EXCHANGE_FLUCT', 'EXCHANGE_FREEWHEEL', 'EXCHANGE_GENIEE', 'EXCHANGE_GUMGUM', 'EXCHANGE_IMOBILE', 'EXCHANGE_IBILLBOARD', 'EXCHANGE_IMPROVE_DIGITAL', 'EXCHANGE_INDEX', 'EXCHANGE_KARGO', 'EXCHANGE_MICROAD', 'EXCHANGE_MOPUB', 'EXCHANGE_NEND', 'EXCHANGE_ONE_BY_AOL_DISPLAY', 'EXCHANGE_ONE_BY_AOL_MOBILE', 'EXCHANGE_ONE_BY_AOL_VIDEO', 'EXCHANGE_OOYALA', 'EXCHANGE_OPENX', 'EXCHANGE_PERMODO', 'EXCHANGE_PLATFORMONE', 'EXCHANGE_PLATFORMID', 'EXCHANGE_PUBMATIC', 'EXCHANGE_PULSEPOINT', 'EXCHANGE_REVENUEMAX', 'EXCHANGE_RUBICON', 'EXCHANGE_SMARTCLIP', 'EXCHANGE_SMARTRTB', 'EXCHANGE_SMARTSTREAMTV', 'EXCHANGE_SOVRN', 'EXCHANGE_SPOTXCHANGE', 'EXCHANGE_STROER', 'EXCHANGE_TEADSTV', 'EXCHANGE_TELARIA', 'EXCHANGE_TVN', 'EXCHANGE_UNITED', 'EXCHANGE_YIELDLAB', 'EXCHANGE_YIELDMO', 'EXCHANGE_UNRULYX', 'EXCHANGE_OPEN8', 'EXCHANGE_TRITON', 'EXCHANGE_TRIPLELIFT', 'EXCHANGE_TABOOLA', 'EXCHANGE_INMOBI', 'EXCHANGE_SMAATO', 'EXCHANGE_AJA', 'EXCHANGE_SUPERSHIP', 'EXCHANGE_NEXSTAR_DIGITAL', 'EXCHANGE_WAZE', 'EXCHANGE_SOUNDCAST', 'EXCHANGE_SHARETHROUGH', 'EXCHANGE_FYBER', 'EXCHANGE_RED_FOR_PUBLISHERS', 'EXCHANGE_MEDIANET', 'EXCHANGE_TAPJOY', 'EXCHANGE_VISTAR', 'EXCHANGE_DAX', 'EXCHANGE_JCD', 'EXCHANGE_PLACE_EXCHANGE', 'EXCHANGE_APPLOVIN', 'EXCHANGE_CONNATIX', 'EXCHANGE_RESET_DIGITAL', 'EXCHANGE_HIVESTACK', 'EXCHANGE_APPLOVIN_GBID', 'EXCHANGE_FYBER_GBID', 'EXCHANGE_UNITY_GBID', 'EXCHANGE_CHARTBOOST_GBID', 'EXCHANGE_ADMOST_GBID', 'EXCHANGE_TOPON_GBID')")
        return value

    @field_validator('inventory_source_product_type')
    def inventory_source_product_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INVENTORY_SOURCE_PRODUCT_TYPE_UNSPECIFIED', 'PREFERRED_DEAL', 'PRIVATE_AUCTION', 'PROGRAMMATIC_GUARANTEED', 'TAG_GUARANTEED', 'YOUTUBE_RESERVE', 'INSTANT_RESERVE', 'GUARANTEED_PACKAGE', 'PROGRAMMATIC_TV', 'AUCTION_PACKAGE']):
            raise ValueError("must be one of enum values ('INVENTORY_SOURCE_PRODUCT_TYPE_UNSPECIFIED', 'PREFERRED_DEAL', 'PRIVATE_AUCTION', 'PROGRAMMATIC_GUARANTEED', 'TAG_GUARANTEED', 'YOUTUBE_RESERVE', 'INSTANT_RESERVE', 'GUARANTEED_PACKAGE', 'PROGRAMMATIC_TV', 'AUCTION_PACKAGE')")
        return value

    @field_validator('inventory_source_type')
    def inventory_source_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INVENTORY_SOURCE_TYPE_UNSPECIFIED', 'INVENTORY_SOURCE_TYPE_PRIVATE', 'INVENTORY_SOURCE_TYPE_AUCTION_PACKAGE']):
            raise ValueError("must be one of enum values ('INVENTORY_SOURCE_TYPE_UNSPECIFIED', 'INVENTORY_SOURCE_TYPE_PRIVATE', 'INVENTORY_SOURCE_TYPE_AUCTION_PACKAGE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InventorySource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "inventory_source_id",
            "inventory_source_product_type",
            "name",
            "read_advertiser_ids",
            "read_partner_ids",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in creative_configs (list)
        _items = []
        if self.creative_configs:
            for _item_creative_configs in self.creative_configs:
                if _item_creative_configs:
                    _items.append(_item_creative_configs.to_dict())
            _dict['creativeConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of rate_details
        if self.rate_details:
            _dict['rateDetails'] = self.rate_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of read_write_accessors
        if self.read_write_accessors:
            _dict['readWriteAccessors'] = self.read_write_accessors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_range
        if self.time_range:
            _dict['timeRange'] = self.time_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InventorySource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commitment": obj.get("commitment"),
            "creativeConfigs": [CreativeConfig.from_dict(_item) for _item in obj["creativeConfigs"]] if obj.get("creativeConfigs") is not None else None,
            "dealId": obj.get("dealId"),
            "deliveryMethod": obj.get("deliveryMethod"),
            "displayName": obj.get("displayName"),
            "exchange": obj.get("exchange"),
            "guaranteedOrderId": obj.get("guaranteedOrderId"),
            "inventorySourceId": obj.get("inventorySourceId"),
            "inventorySourceProductType": obj.get("inventorySourceProductType"),
            "inventorySourceType": obj.get("inventorySourceType"),
            "name": obj.get("name"),
            "publisherName": obj.get("publisherName"),
            "rateDetails": RateDetails.from_dict(obj["rateDetails"]) if obj.get("rateDetails") is not None else None,
            "readAdvertiserIds": obj.get("readAdvertiserIds"),
            "readPartnerIds": obj.get("readPartnerIds"),
            "readWriteAccessors": InventorySourceAccessors.from_dict(obj["readWriteAccessors"]) if obj.get("readWriteAccessors") is not None else None,
            "status": InventorySourceStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "timeRange": TimeRange.from_dict(obj["timeRange"]) if obj.get("timeRange") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



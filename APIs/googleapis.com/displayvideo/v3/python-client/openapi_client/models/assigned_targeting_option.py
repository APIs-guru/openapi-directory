# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.age_range_assigned_targeting_option_details import AgeRangeAssignedTargetingOptionDetails
from openapi_client.models.app_assigned_targeting_option_details import AppAssignedTargetingOptionDetails
from openapi_client.models.app_category_assigned_targeting_option_details import AppCategoryAssignedTargetingOptionDetails
from openapi_client.models.audience_group_assigned_targeting_option_details import AudienceGroupAssignedTargetingOptionDetails
from openapi_client.models.audio_content_type_assigned_targeting_option_details import AudioContentTypeAssignedTargetingOptionDetails
from openapi_client.models.authorized_seller_status_assigned_targeting_option_details import AuthorizedSellerStatusAssignedTargetingOptionDetails
from openapi_client.models.browser_assigned_targeting_option_details import BrowserAssignedTargetingOptionDetails
from openapi_client.models.business_chain_assigned_targeting_option_details import BusinessChainAssignedTargetingOptionDetails
from openapi_client.models.carrier_and_isp_assigned_targeting_option_details import CarrierAndIspAssignedTargetingOptionDetails
from openapi_client.models.category_assigned_targeting_option_details import CategoryAssignedTargetingOptionDetails
from openapi_client.models.channel_assigned_targeting_option_details import ChannelAssignedTargetingOptionDetails
from openapi_client.models.content_duration_assigned_targeting_option_details import ContentDurationAssignedTargetingOptionDetails
from openapi_client.models.content_genre_assigned_targeting_option_details import ContentGenreAssignedTargetingOptionDetails
from openapi_client.models.content_instream_position_assigned_targeting_option_details import ContentInstreamPositionAssignedTargetingOptionDetails
from openapi_client.models.content_outstream_position_assigned_targeting_option_details import ContentOutstreamPositionAssignedTargetingOptionDetails
from openapi_client.models.content_stream_type_assigned_targeting_option_details import ContentStreamTypeAssignedTargetingOptionDetails
from openapi_client.models.day_and_time_assigned_targeting_option_details import DayAndTimeAssignedTargetingOptionDetails
from openapi_client.models.device_make_model_assigned_targeting_option_details import DeviceMakeModelAssignedTargetingOptionDetails
from openapi_client.models.device_type_assigned_targeting_option_details import DeviceTypeAssignedTargetingOptionDetails
from openapi_client.models.digital_content_label_assigned_targeting_option_details import DigitalContentLabelAssignedTargetingOptionDetails
from openapi_client.models.environment_assigned_targeting_option_details import EnvironmentAssignedTargetingOptionDetails
from openapi_client.models.exchange_assigned_targeting_option_details import ExchangeAssignedTargetingOptionDetails
from openapi_client.models.gender_assigned_targeting_option_details import GenderAssignedTargetingOptionDetails
from openapi_client.models.geo_region_assigned_targeting_option_details import GeoRegionAssignedTargetingOptionDetails
from openapi_client.models.household_income_assigned_targeting_option_details import HouseholdIncomeAssignedTargetingOptionDetails
from openapi_client.models.inventory_source_assigned_targeting_option_details import InventorySourceAssignedTargetingOptionDetails
from openapi_client.models.inventory_source_group_assigned_targeting_option_details import InventorySourceGroupAssignedTargetingOptionDetails
from openapi_client.models.keyword_assigned_targeting_option_details import KeywordAssignedTargetingOptionDetails
from openapi_client.models.language_assigned_targeting_option_details import LanguageAssignedTargetingOptionDetails
from openapi_client.models.native_content_position_assigned_targeting_option_details import NativeContentPositionAssignedTargetingOptionDetails
from openapi_client.models.negative_keyword_list_assigned_targeting_option_details import NegativeKeywordListAssignedTargetingOptionDetails
from openapi_client.models.omid_assigned_targeting_option_details import OmidAssignedTargetingOptionDetails
from openapi_client.models.on_screen_position_assigned_targeting_option_details import OnScreenPositionAssignedTargetingOptionDetails
from openapi_client.models.operating_system_assigned_targeting_option_details import OperatingSystemAssignedTargetingOptionDetails
from openapi_client.models.parental_status_assigned_targeting_option_details import ParentalStatusAssignedTargetingOptionDetails
from openapi_client.models.poi_assigned_targeting_option_details import PoiAssignedTargetingOptionDetails
from openapi_client.models.proximity_location_list_assigned_targeting_option_details import ProximityLocationListAssignedTargetingOptionDetails
from openapi_client.models.regional_location_list_assigned_targeting_option_details import RegionalLocationListAssignedTargetingOptionDetails
from openapi_client.models.sensitive_category_assigned_targeting_option_details import SensitiveCategoryAssignedTargetingOptionDetails
from openapi_client.models.session_position_assigned_targeting_option_details import SessionPositionAssignedTargetingOptionDetails
from openapi_client.models.sub_exchange_assigned_targeting_option_details import SubExchangeAssignedTargetingOptionDetails
from openapi_client.models.third_party_verifier_assigned_targeting_option_details import ThirdPartyVerifierAssignedTargetingOptionDetails
from openapi_client.models.url_assigned_targeting_option_details import UrlAssignedTargetingOptionDetails
from openapi_client.models.user_rewarded_content_assigned_targeting_option_details import UserRewardedContentAssignedTargetingOptionDetails
from openapi_client.models.video_player_size_assigned_targeting_option_details import VideoPlayerSizeAssignedTargetingOptionDetails
from openapi_client.models.viewability_assigned_targeting_option_details import ViewabilityAssignedTargetingOptionDetails
from openapi_client.models.youtube_channel_assigned_targeting_option_details import YoutubeChannelAssignedTargetingOptionDetails
from openapi_client.models.youtube_video_assigned_targeting_option_details import YoutubeVideoAssignedTargetingOptionDetails
from typing import Optional, Set
from typing_extensions import Self

class AssignedTargetingOption(BaseModel):
    """
    A single assigned targeting option, which defines the state of a targeting option for an entity with targeting settings.
    """ # noqa: E501
    age_range_details: Optional[AgeRangeAssignedTargetingOptionDetails] = Field(default=None, alias="ageRangeDetails")
    app_category_details: Optional[AppCategoryAssignedTargetingOptionDetails] = Field(default=None, alias="appCategoryDetails")
    app_details: Optional[AppAssignedTargetingOptionDetails] = Field(default=None, alias="appDetails")
    assigned_targeting_option_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique ID of the assigned targeting option. The ID is only unique within a given resource and targeting type. It may be reused in other contexts.", alias="assignedTargetingOptionId")
    assigned_targeting_option_id_alias: Optional[StrictStr] = Field(default=None, description="Output only. An alias for the assigned_targeting_option_id. This value can be used in place of `assignedTargetingOptionId` when retrieving or deleting existing targeting. This field will only be supported for all assigned targeting options of the following targeting types: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` * `TARGETING_TYPE_VIEWABILITY` This field is also supported for line item assigned targeting options of the following targeting types: * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION`", alias="assignedTargetingOptionIdAlias")
    audience_group_details: Optional[AudienceGroupAssignedTargetingOptionDetails] = Field(default=None, alias="audienceGroupDetails")
    audio_content_type_details: Optional[AudioContentTypeAssignedTargetingOptionDetails] = Field(default=None, alias="audioContentTypeDetails")
    authorized_seller_status_details: Optional[AuthorizedSellerStatusAssignedTargetingOptionDetails] = Field(default=None, alias="authorizedSellerStatusDetails")
    browser_details: Optional[BrowserAssignedTargetingOptionDetails] = Field(default=None, alias="browserDetails")
    business_chain_details: Optional[BusinessChainAssignedTargetingOptionDetails] = Field(default=None, alias="businessChainDetails")
    carrier_and_isp_details: Optional[CarrierAndIspAssignedTargetingOptionDetails] = Field(default=None, alias="carrierAndIspDetails")
    category_details: Optional[CategoryAssignedTargetingOptionDetails] = Field(default=None, alias="categoryDetails")
    channel_details: Optional[ChannelAssignedTargetingOptionDetails] = Field(default=None, alias="channelDetails")
    content_duration_details: Optional[ContentDurationAssignedTargetingOptionDetails] = Field(default=None, alias="contentDurationDetails")
    content_genre_details: Optional[ContentGenreAssignedTargetingOptionDetails] = Field(default=None, alias="contentGenreDetails")
    content_instream_position_details: Optional[ContentInstreamPositionAssignedTargetingOptionDetails] = Field(default=None, alias="contentInstreamPositionDetails")
    content_outstream_position_details: Optional[ContentOutstreamPositionAssignedTargetingOptionDetails] = Field(default=None, alias="contentOutstreamPositionDetails")
    content_stream_type_details: Optional[ContentStreamTypeAssignedTargetingOptionDetails] = Field(default=None, alias="contentStreamTypeDetails")
    day_and_time_details: Optional[DayAndTimeAssignedTargetingOptionDetails] = Field(default=None, alias="dayAndTimeDetails")
    device_make_model_details: Optional[DeviceMakeModelAssignedTargetingOptionDetails] = Field(default=None, alias="deviceMakeModelDetails")
    device_type_details: Optional[DeviceTypeAssignedTargetingOptionDetails] = Field(default=None, alias="deviceTypeDetails")
    digital_content_label_exclusion_details: Optional[DigitalContentLabelAssignedTargetingOptionDetails] = Field(default=None, alias="digitalContentLabelExclusionDetails")
    environment_details: Optional[EnvironmentAssignedTargetingOptionDetails] = Field(default=None, alias="environmentDetails")
    exchange_details: Optional[ExchangeAssignedTargetingOptionDetails] = Field(default=None, alias="exchangeDetails")
    gender_details: Optional[GenderAssignedTargetingOptionDetails] = Field(default=None, alias="genderDetails")
    geo_region_details: Optional[GeoRegionAssignedTargetingOptionDetails] = Field(default=None, alias="geoRegionDetails")
    household_income_details: Optional[HouseholdIncomeAssignedTargetingOptionDetails] = Field(default=None, alias="householdIncomeDetails")
    inheritance: Optional[StrictStr] = Field(default=None, description="Output only. The inheritance status of the assigned targeting option.")
    inventory_source_details: Optional[InventorySourceAssignedTargetingOptionDetails] = Field(default=None, alias="inventorySourceDetails")
    inventory_source_group_details: Optional[InventorySourceGroupAssignedTargetingOptionDetails] = Field(default=None, alias="inventorySourceGroupDetails")
    keyword_details: Optional[KeywordAssignedTargetingOptionDetails] = Field(default=None, alias="keywordDetails")
    language_details: Optional[LanguageAssignedTargetingOptionDetails] = Field(default=None, alias="languageDetails")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name for this assigned targeting option.")
    native_content_position_details: Optional[NativeContentPositionAssignedTargetingOptionDetails] = Field(default=None, alias="nativeContentPositionDetails")
    negative_keyword_list_details: Optional[NegativeKeywordListAssignedTargetingOptionDetails] = Field(default=None, alias="negativeKeywordListDetails")
    omid_details: Optional[OmidAssignedTargetingOptionDetails] = Field(default=None, alias="omidDetails")
    on_screen_position_details: Optional[OnScreenPositionAssignedTargetingOptionDetails] = Field(default=None, alias="onScreenPositionDetails")
    operating_system_details: Optional[OperatingSystemAssignedTargetingOptionDetails] = Field(default=None, alias="operatingSystemDetails")
    parental_status_details: Optional[ParentalStatusAssignedTargetingOptionDetails] = Field(default=None, alias="parentalStatusDetails")
    poi_details: Optional[PoiAssignedTargetingOptionDetails] = Field(default=None, alias="poiDetails")
    proximity_location_list_details: Optional[ProximityLocationListAssignedTargetingOptionDetails] = Field(default=None, alias="proximityLocationListDetails")
    regional_location_list_details: Optional[RegionalLocationListAssignedTargetingOptionDetails] = Field(default=None, alias="regionalLocationListDetails")
    sensitive_category_exclusion_details: Optional[SensitiveCategoryAssignedTargetingOptionDetails] = Field(default=None, alias="sensitiveCategoryExclusionDetails")
    session_position_details: Optional[SessionPositionAssignedTargetingOptionDetails] = Field(default=None, alias="sessionPositionDetails")
    sub_exchange_details: Optional[SubExchangeAssignedTargetingOptionDetails] = Field(default=None, alias="subExchangeDetails")
    targeting_type: Optional[StrictStr] = Field(default=None, description="Output only. Identifies the type of this assigned targeting option.", alias="targetingType")
    third_party_verifier_details: Optional[ThirdPartyVerifierAssignedTargetingOptionDetails] = Field(default=None, alias="thirdPartyVerifierDetails")
    url_details: Optional[UrlAssignedTargetingOptionDetails] = Field(default=None, alias="urlDetails")
    user_rewarded_content_details: Optional[UserRewardedContentAssignedTargetingOptionDetails] = Field(default=None, alias="userRewardedContentDetails")
    video_player_size_details: Optional[VideoPlayerSizeAssignedTargetingOptionDetails] = Field(default=None, alias="videoPlayerSizeDetails")
    viewability_details: Optional[ViewabilityAssignedTargetingOptionDetails] = Field(default=None, alias="viewabilityDetails")
    youtube_channel_details: Optional[YoutubeChannelAssignedTargetingOptionDetails] = Field(default=None, alias="youtubeChannelDetails")
    youtube_video_details: Optional[YoutubeVideoAssignedTargetingOptionDetails] = Field(default=None, alias="youtubeVideoDetails")
    __properties: ClassVar[List[str]] = ["ageRangeDetails", "appCategoryDetails", "appDetails", "assignedTargetingOptionId", "assignedTargetingOptionIdAlias", "audienceGroupDetails", "audioContentTypeDetails", "authorizedSellerStatusDetails", "browserDetails", "businessChainDetails", "carrierAndIspDetails", "categoryDetails", "channelDetails", "contentDurationDetails", "contentGenreDetails", "contentInstreamPositionDetails", "contentOutstreamPositionDetails", "contentStreamTypeDetails", "dayAndTimeDetails", "deviceMakeModelDetails", "deviceTypeDetails", "digitalContentLabelExclusionDetails", "environmentDetails", "exchangeDetails", "genderDetails", "geoRegionDetails", "householdIncomeDetails", "inheritance", "inventorySourceDetails", "inventorySourceGroupDetails", "keywordDetails", "languageDetails", "name", "nativeContentPositionDetails", "negativeKeywordListDetails", "omidDetails", "onScreenPositionDetails", "operatingSystemDetails", "parentalStatusDetails", "poiDetails", "proximityLocationListDetails", "regionalLocationListDetails", "sensitiveCategoryExclusionDetails", "sessionPositionDetails", "subExchangeDetails", "targetingType", "thirdPartyVerifierDetails", "urlDetails", "userRewardedContentDetails", "videoPlayerSizeDetails", "viewabilityDetails", "youtubeChannelDetails", "youtubeVideoDetails"]

    @field_validator('inheritance')
    def inheritance_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INHERITANCE_UNSPECIFIED', 'NOT_INHERITED', 'INHERITED_FROM_PARTNER', 'INHERITED_FROM_ADVERTISER']):
            raise ValueError("must be one of enum values ('INHERITANCE_UNSPECIFIED', 'NOT_INHERITED', 'INHERITED_FROM_PARTNER', 'INHERITED_FROM_ADVERTISER')")
        return value

    @field_validator('targeting_type')
    def targeting_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TARGETING_TYPE_UNSPECIFIED', 'TARGETING_TYPE_CHANNEL', 'TARGETING_TYPE_APP_CATEGORY', 'TARGETING_TYPE_APP', 'TARGETING_TYPE_URL', 'TARGETING_TYPE_DAY_AND_TIME', 'TARGETING_TYPE_AGE_RANGE', 'TARGETING_TYPE_REGIONAL_LOCATION_LIST', 'TARGETING_TYPE_PROXIMITY_LOCATION_LIST', 'TARGETING_TYPE_GENDER', 'TARGETING_TYPE_VIDEO_PLAYER_SIZE', 'TARGETING_TYPE_USER_REWARDED_CONTENT', 'TARGETING_TYPE_PARENTAL_STATUS', 'TARGETING_TYPE_CONTENT_INSTREAM_POSITION', 'TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION', 'TARGETING_TYPE_DEVICE_TYPE', 'TARGETING_TYPE_AUDIENCE_GROUP', 'TARGETING_TYPE_BROWSER', 'TARGETING_TYPE_HOUSEHOLD_INCOME', 'TARGETING_TYPE_ON_SCREEN_POSITION', 'TARGETING_TYPE_THIRD_PARTY_VERIFIER', 'TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION', 'TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION', 'TARGETING_TYPE_ENVIRONMENT', 'TARGETING_TYPE_CARRIER_AND_ISP', 'TARGETING_TYPE_OPERATING_SYSTEM', 'TARGETING_TYPE_DEVICE_MAKE_MODEL', 'TARGETING_TYPE_KEYWORD', 'TARGETING_TYPE_NEGATIVE_KEYWORD_LIST', 'TARGETING_TYPE_VIEWABILITY', 'TARGETING_TYPE_CATEGORY', 'TARGETING_TYPE_INVENTORY_SOURCE', 'TARGETING_TYPE_LANGUAGE', 'TARGETING_TYPE_AUTHORIZED_SELLER_STATUS', 'TARGETING_TYPE_GEO_REGION', 'TARGETING_TYPE_INVENTORY_SOURCE_GROUP', 'TARGETING_TYPE_EXCHANGE', 'TARGETING_TYPE_SUB_EXCHANGE', 'TARGETING_TYPE_POI', 'TARGETING_TYPE_BUSINESS_CHAIN', 'TARGETING_TYPE_CONTENT_DURATION', 'TARGETING_TYPE_CONTENT_STREAM_TYPE', 'TARGETING_TYPE_NATIVE_CONTENT_POSITION', 'TARGETING_TYPE_OMID', 'TARGETING_TYPE_AUDIO_CONTENT_TYPE', 'TARGETING_TYPE_CONTENT_GENRE', 'TARGETING_TYPE_YOUTUBE_VIDEO', 'TARGETING_TYPE_YOUTUBE_CHANNEL', 'TARGETING_TYPE_SESSION_POSITION']):
            raise ValueError("must be one of enum values ('TARGETING_TYPE_UNSPECIFIED', 'TARGETING_TYPE_CHANNEL', 'TARGETING_TYPE_APP_CATEGORY', 'TARGETING_TYPE_APP', 'TARGETING_TYPE_URL', 'TARGETING_TYPE_DAY_AND_TIME', 'TARGETING_TYPE_AGE_RANGE', 'TARGETING_TYPE_REGIONAL_LOCATION_LIST', 'TARGETING_TYPE_PROXIMITY_LOCATION_LIST', 'TARGETING_TYPE_GENDER', 'TARGETING_TYPE_VIDEO_PLAYER_SIZE', 'TARGETING_TYPE_USER_REWARDED_CONTENT', 'TARGETING_TYPE_PARENTAL_STATUS', 'TARGETING_TYPE_CONTENT_INSTREAM_POSITION', 'TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION', 'TARGETING_TYPE_DEVICE_TYPE', 'TARGETING_TYPE_AUDIENCE_GROUP', 'TARGETING_TYPE_BROWSER', 'TARGETING_TYPE_HOUSEHOLD_INCOME', 'TARGETING_TYPE_ON_SCREEN_POSITION', 'TARGETING_TYPE_THIRD_PARTY_VERIFIER', 'TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION', 'TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION', 'TARGETING_TYPE_ENVIRONMENT', 'TARGETING_TYPE_CARRIER_AND_ISP', 'TARGETING_TYPE_OPERATING_SYSTEM', 'TARGETING_TYPE_DEVICE_MAKE_MODEL', 'TARGETING_TYPE_KEYWORD', 'TARGETING_TYPE_NEGATIVE_KEYWORD_LIST', 'TARGETING_TYPE_VIEWABILITY', 'TARGETING_TYPE_CATEGORY', 'TARGETING_TYPE_INVENTORY_SOURCE', 'TARGETING_TYPE_LANGUAGE', 'TARGETING_TYPE_AUTHORIZED_SELLER_STATUS', 'TARGETING_TYPE_GEO_REGION', 'TARGETING_TYPE_INVENTORY_SOURCE_GROUP', 'TARGETING_TYPE_EXCHANGE', 'TARGETING_TYPE_SUB_EXCHANGE', 'TARGETING_TYPE_POI', 'TARGETING_TYPE_BUSINESS_CHAIN', 'TARGETING_TYPE_CONTENT_DURATION', 'TARGETING_TYPE_CONTENT_STREAM_TYPE', 'TARGETING_TYPE_NATIVE_CONTENT_POSITION', 'TARGETING_TYPE_OMID', 'TARGETING_TYPE_AUDIO_CONTENT_TYPE', 'TARGETING_TYPE_CONTENT_GENRE', 'TARGETING_TYPE_YOUTUBE_VIDEO', 'TARGETING_TYPE_YOUTUBE_CHANNEL', 'TARGETING_TYPE_SESSION_POSITION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssignedTargetingOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "assigned_targeting_option_id",
            "assigned_targeting_option_id_alias",
            "inheritance",
            "name",
            "targeting_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of age_range_details
        if self.age_range_details:
            _dict['ageRangeDetails'] = self.age_range_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_category_details
        if self.app_category_details:
            _dict['appCategoryDetails'] = self.app_category_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_details
        if self.app_details:
            _dict['appDetails'] = self.app_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of audience_group_details
        if self.audience_group_details:
            _dict['audienceGroupDetails'] = self.audience_group_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of audio_content_type_details
        if self.audio_content_type_details:
            _dict['audioContentTypeDetails'] = self.audio_content_type_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of authorized_seller_status_details
        if self.authorized_seller_status_details:
            _dict['authorizedSellerStatusDetails'] = self.authorized_seller_status_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of browser_details
        if self.browser_details:
            _dict['browserDetails'] = self.browser_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of business_chain_details
        if self.business_chain_details:
            _dict['businessChainDetails'] = self.business_chain_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of carrier_and_isp_details
        if self.carrier_and_isp_details:
            _dict['carrierAndIspDetails'] = self.carrier_and_isp_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of category_details
        if self.category_details:
            _dict['categoryDetails'] = self.category_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of channel_details
        if self.channel_details:
            _dict['channelDetails'] = self.channel_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_duration_details
        if self.content_duration_details:
            _dict['contentDurationDetails'] = self.content_duration_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_genre_details
        if self.content_genre_details:
            _dict['contentGenreDetails'] = self.content_genre_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_instream_position_details
        if self.content_instream_position_details:
            _dict['contentInstreamPositionDetails'] = self.content_instream_position_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_outstream_position_details
        if self.content_outstream_position_details:
            _dict['contentOutstreamPositionDetails'] = self.content_outstream_position_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_stream_type_details
        if self.content_stream_type_details:
            _dict['contentStreamTypeDetails'] = self.content_stream_type_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of day_and_time_details
        if self.day_and_time_details:
            _dict['dayAndTimeDetails'] = self.day_and_time_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device_make_model_details
        if self.device_make_model_details:
            _dict['deviceMakeModelDetails'] = self.device_make_model_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device_type_details
        if self.device_type_details:
            _dict['deviceTypeDetails'] = self.device_type_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of digital_content_label_exclusion_details
        if self.digital_content_label_exclusion_details:
            _dict['digitalContentLabelExclusionDetails'] = self.digital_content_label_exclusion_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of environment_details
        if self.environment_details:
            _dict['environmentDetails'] = self.environment_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exchange_details
        if self.exchange_details:
            _dict['exchangeDetails'] = self.exchange_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gender_details
        if self.gender_details:
            _dict['genderDetails'] = self.gender_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geo_region_details
        if self.geo_region_details:
            _dict['geoRegionDetails'] = self.geo_region_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of household_income_details
        if self.household_income_details:
            _dict['householdIncomeDetails'] = self.household_income_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inventory_source_details
        if self.inventory_source_details:
            _dict['inventorySourceDetails'] = self.inventory_source_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inventory_source_group_details
        if self.inventory_source_group_details:
            _dict['inventorySourceGroupDetails'] = self.inventory_source_group_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of keyword_details
        if self.keyword_details:
            _dict['keywordDetails'] = self.keyword_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language_details
        if self.language_details:
            _dict['languageDetails'] = self.language_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of native_content_position_details
        if self.native_content_position_details:
            _dict['nativeContentPositionDetails'] = self.native_content_position_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of negative_keyword_list_details
        if self.negative_keyword_list_details:
            _dict['negativeKeywordListDetails'] = self.negative_keyword_list_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of omid_details
        if self.omid_details:
            _dict['omidDetails'] = self.omid_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of on_screen_position_details
        if self.on_screen_position_details:
            _dict['onScreenPositionDetails'] = self.on_screen_position_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operating_system_details
        if self.operating_system_details:
            _dict['operatingSystemDetails'] = self.operating_system_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parental_status_details
        if self.parental_status_details:
            _dict['parentalStatusDetails'] = self.parental_status_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of poi_details
        if self.poi_details:
            _dict['poiDetails'] = self.poi_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proximity_location_list_details
        if self.proximity_location_list_details:
            _dict['proximityLocationListDetails'] = self.proximity_location_list_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of regional_location_list_details
        if self.regional_location_list_details:
            _dict['regionalLocationListDetails'] = self.regional_location_list_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sensitive_category_exclusion_details
        if self.sensitive_category_exclusion_details:
            _dict['sensitiveCategoryExclusionDetails'] = self.sensitive_category_exclusion_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of session_position_details
        if self.session_position_details:
            _dict['sessionPositionDetails'] = self.session_position_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_exchange_details
        if self.sub_exchange_details:
            _dict['subExchangeDetails'] = self.sub_exchange_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of third_party_verifier_details
        if self.third_party_verifier_details:
            _dict['thirdPartyVerifierDetails'] = self.third_party_verifier_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of url_details
        if self.url_details:
            _dict['urlDetails'] = self.url_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_rewarded_content_details
        if self.user_rewarded_content_details:
            _dict['userRewardedContentDetails'] = self.user_rewarded_content_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_player_size_details
        if self.video_player_size_details:
            _dict['videoPlayerSizeDetails'] = self.video_player_size_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of viewability_details
        if self.viewability_details:
            _dict['viewabilityDetails'] = self.viewability_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of youtube_channel_details
        if self.youtube_channel_details:
            _dict['youtubeChannelDetails'] = self.youtube_channel_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of youtube_video_details
        if self.youtube_video_details:
            _dict['youtubeVideoDetails'] = self.youtube_video_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssignedTargetingOption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ageRangeDetails": AgeRangeAssignedTargetingOptionDetails.from_dict(obj["ageRangeDetails"]) if obj.get("ageRangeDetails") is not None else None,
            "appCategoryDetails": AppCategoryAssignedTargetingOptionDetails.from_dict(obj["appCategoryDetails"]) if obj.get("appCategoryDetails") is not None else None,
            "appDetails": AppAssignedTargetingOptionDetails.from_dict(obj["appDetails"]) if obj.get("appDetails") is not None else None,
            "assignedTargetingOptionId": obj.get("assignedTargetingOptionId"),
            "assignedTargetingOptionIdAlias": obj.get("assignedTargetingOptionIdAlias"),
            "audienceGroupDetails": AudienceGroupAssignedTargetingOptionDetails.from_dict(obj["audienceGroupDetails"]) if obj.get("audienceGroupDetails") is not None else None,
            "audioContentTypeDetails": AudioContentTypeAssignedTargetingOptionDetails.from_dict(obj["audioContentTypeDetails"]) if obj.get("audioContentTypeDetails") is not None else None,
            "authorizedSellerStatusDetails": AuthorizedSellerStatusAssignedTargetingOptionDetails.from_dict(obj["authorizedSellerStatusDetails"]) if obj.get("authorizedSellerStatusDetails") is not None else None,
            "browserDetails": BrowserAssignedTargetingOptionDetails.from_dict(obj["browserDetails"]) if obj.get("browserDetails") is not None else None,
            "businessChainDetails": BusinessChainAssignedTargetingOptionDetails.from_dict(obj["businessChainDetails"]) if obj.get("businessChainDetails") is not None else None,
            "carrierAndIspDetails": CarrierAndIspAssignedTargetingOptionDetails.from_dict(obj["carrierAndIspDetails"]) if obj.get("carrierAndIspDetails") is not None else None,
            "categoryDetails": CategoryAssignedTargetingOptionDetails.from_dict(obj["categoryDetails"]) if obj.get("categoryDetails") is not None else None,
            "channelDetails": ChannelAssignedTargetingOptionDetails.from_dict(obj["channelDetails"]) if obj.get("channelDetails") is not None else None,
            "contentDurationDetails": ContentDurationAssignedTargetingOptionDetails.from_dict(obj["contentDurationDetails"]) if obj.get("contentDurationDetails") is not None else None,
            "contentGenreDetails": ContentGenreAssignedTargetingOptionDetails.from_dict(obj["contentGenreDetails"]) if obj.get("contentGenreDetails") is not None else None,
            "contentInstreamPositionDetails": ContentInstreamPositionAssignedTargetingOptionDetails.from_dict(obj["contentInstreamPositionDetails"]) if obj.get("contentInstreamPositionDetails") is not None else None,
            "contentOutstreamPositionDetails": ContentOutstreamPositionAssignedTargetingOptionDetails.from_dict(obj["contentOutstreamPositionDetails"]) if obj.get("contentOutstreamPositionDetails") is not None else None,
            "contentStreamTypeDetails": ContentStreamTypeAssignedTargetingOptionDetails.from_dict(obj["contentStreamTypeDetails"]) if obj.get("contentStreamTypeDetails") is not None else None,
            "dayAndTimeDetails": DayAndTimeAssignedTargetingOptionDetails.from_dict(obj["dayAndTimeDetails"]) if obj.get("dayAndTimeDetails") is not None else None,
            "deviceMakeModelDetails": DeviceMakeModelAssignedTargetingOptionDetails.from_dict(obj["deviceMakeModelDetails"]) if obj.get("deviceMakeModelDetails") is not None else None,
            "deviceTypeDetails": DeviceTypeAssignedTargetingOptionDetails.from_dict(obj["deviceTypeDetails"]) if obj.get("deviceTypeDetails") is not None else None,
            "digitalContentLabelExclusionDetails": DigitalContentLabelAssignedTargetingOptionDetails.from_dict(obj["digitalContentLabelExclusionDetails"]) if obj.get("digitalContentLabelExclusionDetails") is not None else None,
            "environmentDetails": EnvironmentAssignedTargetingOptionDetails.from_dict(obj["environmentDetails"]) if obj.get("environmentDetails") is not None else None,
            "exchangeDetails": ExchangeAssignedTargetingOptionDetails.from_dict(obj["exchangeDetails"]) if obj.get("exchangeDetails") is not None else None,
            "genderDetails": GenderAssignedTargetingOptionDetails.from_dict(obj["genderDetails"]) if obj.get("genderDetails") is not None else None,
            "geoRegionDetails": GeoRegionAssignedTargetingOptionDetails.from_dict(obj["geoRegionDetails"]) if obj.get("geoRegionDetails") is not None else None,
            "householdIncomeDetails": HouseholdIncomeAssignedTargetingOptionDetails.from_dict(obj["householdIncomeDetails"]) if obj.get("householdIncomeDetails") is not None else None,
            "inheritance": obj.get("inheritance"),
            "inventorySourceDetails": InventorySourceAssignedTargetingOptionDetails.from_dict(obj["inventorySourceDetails"]) if obj.get("inventorySourceDetails") is not None else None,
            "inventorySourceGroupDetails": InventorySourceGroupAssignedTargetingOptionDetails.from_dict(obj["inventorySourceGroupDetails"]) if obj.get("inventorySourceGroupDetails") is not None else None,
            "keywordDetails": KeywordAssignedTargetingOptionDetails.from_dict(obj["keywordDetails"]) if obj.get("keywordDetails") is not None else None,
            "languageDetails": LanguageAssignedTargetingOptionDetails.from_dict(obj["languageDetails"]) if obj.get("languageDetails") is not None else None,
            "name": obj.get("name"),
            "nativeContentPositionDetails": NativeContentPositionAssignedTargetingOptionDetails.from_dict(obj["nativeContentPositionDetails"]) if obj.get("nativeContentPositionDetails") is not None else None,
            "negativeKeywordListDetails": NegativeKeywordListAssignedTargetingOptionDetails.from_dict(obj["negativeKeywordListDetails"]) if obj.get("negativeKeywordListDetails") is not None else None,
            "omidDetails": OmidAssignedTargetingOptionDetails.from_dict(obj["omidDetails"]) if obj.get("omidDetails") is not None else None,
            "onScreenPositionDetails": OnScreenPositionAssignedTargetingOptionDetails.from_dict(obj["onScreenPositionDetails"]) if obj.get("onScreenPositionDetails") is not None else None,
            "operatingSystemDetails": OperatingSystemAssignedTargetingOptionDetails.from_dict(obj["operatingSystemDetails"]) if obj.get("operatingSystemDetails") is not None else None,
            "parentalStatusDetails": ParentalStatusAssignedTargetingOptionDetails.from_dict(obj["parentalStatusDetails"]) if obj.get("parentalStatusDetails") is not None else None,
            "poiDetails": PoiAssignedTargetingOptionDetails.from_dict(obj["poiDetails"]) if obj.get("poiDetails") is not None else None,
            "proximityLocationListDetails": ProximityLocationListAssignedTargetingOptionDetails.from_dict(obj["proximityLocationListDetails"]) if obj.get("proximityLocationListDetails") is not None else None,
            "regionalLocationListDetails": RegionalLocationListAssignedTargetingOptionDetails.from_dict(obj["regionalLocationListDetails"]) if obj.get("regionalLocationListDetails") is not None else None,
            "sensitiveCategoryExclusionDetails": SensitiveCategoryAssignedTargetingOptionDetails.from_dict(obj["sensitiveCategoryExclusionDetails"]) if obj.get("sensitiveCategoryExclusionDetails") is not None else None,
            "sessionPositionDetails": SessionPositionAssignedTargetingOptionDetails.from_dict(obj["sessionPositionDetails"]) if obj.get("sessionPositionDetails") is not None else None,
            "subExchangeDetails": SubExchangeAssignedTargetingOptionDetails.from_dict(obj["subExchangeDetails"]) if obj.get("subExchangeDetails") is not None else None,
            "targetingType": obj.get("targetingType"),
            "thirdPartyVerifierDetails": ThirdPartyVerifierAssignedTargetingOptionDetails.from_dict(obj["thirdPartyVerifierDetails"]) if obj.get("thirdPartyVerifierDetails") is not None else None,
            "urlDetails": UrlAssignedTargetingOptionDetails.from_dict(obj["urlDetails"]) if obj.get("urlDetails") is not None else None,
            "userRewardedContentDetails": UserRewardedContentAssignedTargetingOptionDetails.from_dict(obj["userRewardedContentDetails"]) if obj.get("userRewardedContentDetails") is not None else None,
            "videoPlayerSizeDetails": VideoPlayerSizeAssignedTargetingOptionDetails.from_dict(obj["videoPlayerSizeDetails"]) if obj.get("videoPlayerSizeDetails") is not None else None,
            "viewabilityDetails": ViewabilityAssignedTargetingOptionDetails.from_dict(obj["viewabilityDetails"]) if obj.get("viewabilityDetails") is not None else None,
            "youtubeChannelDetails": YoutubeChannelAssignedTargetingOptionDetails.from_dict(obj["youtubeChannelDetails"]) if obj.get("youtubeChannelDetails") is not None else None,
            "youtubeVideoDetails": YoutubeVideoAssignedTargetingOptionDetails.from_dict(obj["youtubeVideoDetails"]) if obj.get("youtubeVideoDetails") is not None else None
        })
        return _obj



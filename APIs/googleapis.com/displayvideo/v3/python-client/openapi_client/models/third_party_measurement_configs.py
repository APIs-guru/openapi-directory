# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.third_party_vendor_config import ThirdPartyVendorConfig
from typing import Optional, Set
from typing_extensions import Self

class ThirdPartyMeasurementConfigs(BaseModel):
    """
    Settings that control what third-party vendors are measuring specific line item metrics.
    """ # noqa: E501
    brand_lift_vendor_configs: Optional[List[ThirdPartyVendorConfig]] = Field(default=None, description="Optional. The third-party vendors measuring brand lift. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_DYNATA` * `THIRD_PARTY_VENDOR_KANTAR`", alias="brandLiftVendorConfigs")
    brand_safety_vendor_configs: Optional[List[ThirdPartyVendorConfig]] = Field(default=None, description="Optional. The third-party vendors measuring brand safety. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_ZERF` * `THIRD_PARTY_VENDOR_DOUBLE_VERIFY` * `THIRD_PARTY_VENDOR_INTEGRAL_AD_SCIENCE`", alias="brandSafetyVendorConfigs")
    reach_vendor_configs: Optional[List[ThirdPartyVendorConfig]] = Field(default=None, description="Optional. The third-party vendors measuring reach. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_NIELSEN` * `THIRD_PARTY_VENDOR_COMSCORE` * `THIRD_PARTY_VENDOR_KANTAR`", alias="reachVendorConfigs")
    viewability_vendor_configs: Optional[List[ThirdPartyVendorConfig]] = Field(default=None, description="Optional. The third-party vendors measuring viewability. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_MOAT` * `THIRD_PARTY_VENDOR_DOUBLE_VERIFY` * `THIRD_PARTY_VENDOR_INTEGRAL_AD_SCIENCE` * `THIRD_PARTY_VENDOR_COMSCORE` * `THIRD_PARTY_VENDOR_TELEMETRY` * `THIRD_PARTY_VENDOR_MEETRICS`", alias="viewabilityVendorConfigs")
    __properties: ClassVar[List[str]] = ["brandLiftVendorConfigs", "brandSafetyVendorConfigs", "reachVendorConfigs", "viewabilityVendorConfigs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ThirdPartyMeasurementConfigs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in brand_lift_vendor_configs (list)
        _items = []
        if self.brand_lift_vendor_configs:
            for _item_brand_lift_vendor_configs in self.brand_lift_vendor_configs:
                if _item_brand_lift_vendor_configs:
                    _items.append(_item_brand_lift_vendor_configs.to_dict())
            _dict['brandLiftVendorConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in brand_safety_vendor_configs (list)
        _items = []
        if self.brand_safety_vendor_configs:
            for _item_brand_safety_vendor_configs in self.brand_safety_vendor_configs:
                if _item_brand_safety_vendor_configs:
                    _items.append(_item_brand_safety_vendor_configs.to_dict())
            _dict['brandSafetyVendorConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reach_vendor_configs (list)
        _items = []
        if self.reach_vendor_configs:
            for _item_reach_vendor_configs in self.reach_vendor_configs:
                if _item_reach_vendor_configs:
                    _items.append(_item_reach_vendor_configs.to_dict())
            _dict['reachVendorConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in viewability_vendor_configs (list)
        _items = []
        if self.viewability_vendor_configs:
            for _item_viewability_vendor_configs in self.viewability_vendor_configs:
                if _item_viewability_vendor_configs:
                    _items.append(_item_viewability_vendor_configs.to_dict())
            _dict['viewabilityVendorConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ThirdPartyMeasurementConfigs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brandLiftVendorConfigs": [ThirdPartyVendorConfig.from_dict(_item) for _item in obj["brandLiftVendorConfigs"]] if obj.get("brandLiftVendorConfigs") is not None else None,
            "brandSafetyVendorConfigs": [ThirdPartyVendorConfig.from_dict(_item) for _item in obj["brandSafetyVendorConfigs"]] if obj.get("brandSafetyVendorConfigs") is not None else None,
            "reachVendorConfigs": [ThirdPartyVendorConfig.from_dict(_item) for _item in obj["reachVendorConfigs"]] if obj.get("reachVendorConfigs") is not None else None,
            "viewabilityVendorConfigs": [ThirdPartyVendorConfig.from_dict(_item) for _item in obj["viewabilityVendorConfigs"]] if obj.get("viewabilityVendorConfigs") is not None else None
        })
        return _obj



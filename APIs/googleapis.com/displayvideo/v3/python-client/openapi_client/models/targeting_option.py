# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.age_range_targeting_option_details import AgeRangeTargetingOptionDetails
from openapi_client.models.app_category_targeting_option_details import AppCategoryTargetingOptionDetails
from openapi_client.models.audio_content_type_targeting_option_details import AudioContentTypeTargetingOptionDetails
from openapi_client.models.authorized_seller_status_targeting_option_details import AuthorizedSellerStatusTargetingOptionDetails
from openapi_client.models.browser_targeting_option_details import BrowserTargetingOptionDetails
from openapi_client.models.business_chain_targeting_option_details import BusinessChainTargetingOptionDetails
from openapi_client.models.carrier_and_isp_targeting_option_details import CarrierAndIspTargetingOptionDetails
from openapi_client.models.category_targeting_option_details import CategoryTargetingOptionDetails
from openapi_client.models.content_duration_targeting_option_details import ContentDurationTargetingOptionDetails
from openapi_client.models.content_genre_targeting_option_details import ContentGenreTargetingOptionDetails
from openapi_client.models.content_instream_position_targeting_option_details import ContentInstreamPositionTargetingOptionDetails
from openapi_client.models.content_outstream_position_targeting_option_details import ContentOutstreamPositionTargetingOptionDetails
from openapi_client.models.content_stream_type_targeting_option_details import ContentStreamTypeTargetingOptionDetails
from openapi_client.models.device_make_model_targeting_option_details import DeviceMakeModelTargetingOptionDetails
from openapi_client.models.device_type_targeting_option_details import DeviceTypeTargetingOptionDetails
from openapi_client.models.digital_content_label_targeting_option_details import DigitalContentLabelTargetingOptionDetails
from openapi_client.models.environment_targeting_option_details import EnvironmentTargetingOptionDetails
from openapi_client.models.exchange_targeting_option_details import ExchangeTargetingOptionDetails
from openapi_client.models.gender_targeting_option_details import GenderTargetingOptionDetails
from openapi_client.models.geo_region_targeting_option_details import GeoRegionTargetingOptionDetails
from openapi_client.models.household_income_targeting_option_details import HouseholdIncomeTargetingOptionDetails
from openapi_client.models.language_targeting_option_details import LanguageTargetingOptionDetails
from openapi_client.models.native_content_position_targeting_option_details import NativeContentPositionTargetingOptionDetails
from openapi_client.models.omid_targeting_option_details import OmidTargetingOptionDetails
from openapi_client.models.on_screen_position_targeting_option_details import OnScreenPositionTargetingOptionDetails
from openapi_client.models.operating_system_targeting_option_details import OperatingSystemTargetingOptionDetails
from openapi_client.models.parental_status_targeting_option_details import ParentalStatusTargetingOptionDetails
from openapi_client.models.poi_targeting_option_details import PoiTargetingOptionDetails
from openapi_client.models.sensitive_category_targeting_option_details import SensitiveCategoryTargetingOptionDetails
from openapi_client.models.sub_exchange_targeting_option_details import SubExchangeTargetingOptionDetails
from openapi_client.models.user_rewarded_content_targeting_option_details import UserRewardedContentTargetingOptionDetails
from openapi_client.models.video_player_size_targeting_option_details import VideoPlayerSizeTargetingOptionDetails
from openapi_client.models.viewability_targeting_option_details import ViewabilityTargetingOptionDetails
from typing import Optional, Set
from typing_extensions import Self

class TargetingOption(BaseModel):
    """
    Represents a single targeting option, which is a targetable concept in DV360.
    """ # noqa: E501
    age_range_details: Optional[AgeRangeTargetingOptionDetails] = Field(default=None, alias="ageRangeDetails")
    app_category_details: Optional[AppCategoryTargetingOptionDetails] = Field(default=None, alias="appCategoryDetails")
    audio_content_type_details: Optional[AudioContentTypeTargetingOptionDetails] = Field(default=None, alias="audioContentTypeDetails")
    authorized_seller_status_details: Optional[AuthorizedSellerStatusTargetingOptionDetails] = Field(default=None, alias="authorizedSellerStatusDetails")
    browser_details: Optional[BrowserTargetingOptionDetails] = Field(default=None, alias="browserDetails")
    business_chain_details: Optional[BusinessChainTargetingOptionDetails] = Field(default=None, alias="businessChainDetails")
    carrier_and_isp_details: Optional[CarrierAndIspTargetingOptionDetails] = Field(default=None, alias="carrierAndIspDetails")
    category_details: Optional[CategoryTargetingOptionDetails] = Field(default=None, alias="categoryDetails")
    content_duration_details: Optional[ContentDurationTargetingOptionDetails] = Field(default=None, alias="contentDurationDetails")
    content_genre_details: Optional[ContentGenreTargetingOptionDetails] = Field(default=None, alias="contentGenreDetails")
    content_instream_position_details: Optional[ContentInstreamPositionTargetingOptionDetails] = Field(default=None, alias="contentInstreamPositionDetails")
    content_outstream_position_details: Optional[ContentOutstreamPositionTargetingOptionDetails] = Field(default=None, alias="contentOutstreamPositionDetails")
    content_stream_type_details: Optional[ContentStreamTypeTargetingOptionDetails] = Field(default=None, alias="contentStreamTypeDetails")
    device_make_model_details: Optional[DeviceMakeModelTargetingOptionDetails] = Field(default=None, alias="deviceMakeModelDetails")
    device_type_details: Optional[DeviceTypeTargetingOptionDetails] = Field(default=None, alias="deviceTypeDetails")
    digital_content_label_details: Optional[DigitalContentLabelTargetingOptionDetails] = Field(default=None, alias="digitalContentLabelDetails")
    environment_details: Optional[EnvironmentTargetingOptionDetails] = Field(default=None, alias="environmentDetails")
    exchange_details: Optional[ExchangeTargetingOptionDetails] = Field(default=None, alias="exchangeDetails")
    gender_details: Optional[GenderTargetingOptionDetails] = Field(default=None, alias="genderDetails")
    geo_region_details: Optional[GeoRegionTargetingOptionDetails] = Field(default=None, alias="geoRegionDetails")
    household_income_details: Optional[HouseholdIncomeTargetingOptionDetails] = Field(default=None, alias="householdIncomeDetails")
    language_details: Optional[LanguageTargetingOptionDetails] = Field(default=None, alias="languageDetails")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name for this targeting option.")
    native_content_position_details: Optional[NativeContentPositionTargetingOptionDetails] = Field(default=None, alias="nativeContentPositionDetails")
    omid_details: Optional[OmidTargetingOptionDetails] = Field(default=None, alias="omidDetails")
    on_screen_position_details: Optional[OnScreenPositionTargetingOptionDetails] = Field(default=None, alias="onScreenPositionDetails")
    operating_system_details: Optional[OperatingSystemTargetingOptionDetails] = Field(default=None, alias="operatingSystemDetails")
    parental_status_details: Optional[ParentalStatusTargetingOptionDetails] = Field(default=None, alias="parentalStatusDetails")
    poi_details: Optional[PoiTargetingOptionDetails] = Field(default=None, alias="poiDetails")
    sensitive_category_details: Optional[SensitiveCategoryTargetingOptionDetails] = Field(default=None, alias="sensitiveCategoryDetails")
    sub_exchange_details: Optional[SubExchangeTargetingOptionDetails] = Field(default=None, alias="subExchangeDetails")
    targeting_option_id: Optional[StrictStr] = Field(default=None, description="Output only. A unique identifier for this targeting option. The tuple {`targeting_type`, `targeting_option_id`} will be unique.", alias="targetingOptionId")
    targeting_type: Optional[StrictStr] = Field(default=None, description="Output only. The type of this targeting option.", alias="targetingType")
    user_rewarded_content_details: Optional[UserRewardedContentTargetingOptionDetails] = Field(default=None, alias="userRewardedContentDetails")
    video_player_size_details: Optional[VideoPlayerSizeTargetingOptionDetails] = Field(default=None, alias="videoPlayerSizeDetails")
    viewability_details: Optional[ViewabilityTargetingOptionDetails] = Field(default=None, alias="viewabilityDetails")
    __properties: ClassVar[List[str]] = ["ageRangeDetails", "appCategoryDetails", "audioContentTypeDetails", "authorizedSellerStatusDetails", "browserDetails", "businessChainDetails", "carrierAndIspDetails", "categoryDetails", "contentDurationDetails", "contentGenreDetails", "contentInstreamPositionDetails", "contentOutstreamPositionDetails", "contentStreamTypeDetails", "deviceMakeModelDetails", "deviceTypeDetails", "digitalContentLabelDetails", "environmentDetails", "exchangeDetails", "genderDetails", "geoRegionDetails", "householdIncomeDetails", "languageDetails", "name", "nativeContentPositionDetails", "omidDetails", "onScreenPositionDetails", "operatingSystemDetails", "parentalStatusDetails", "poiDetails", "sensitiveCategoryDetails", "subExchangeDetails", "targetingOptionId", "targetingType", "userRewardedContentDetails", "videoPlayerSizeDetails", "viewabilityDetails"]

    @field_validator('targeting_type')
    def targeting_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TARGETING_TYPE_UNSPECIFIED', 'TARGETING_TYPE_CHANNEL', 'TARGETING_TYPE_APP_CATEGORY', 'TARGETING_TYPE_APP', 'TARGETING_TYPE_URL', 'TARGETING_TYPE_DAY_AND_TIME', 'TARGETING_TYPE_AGE_RANGE', 'TARGETING_TYPE_REGIONAL_LOCATION_LIST', 'TARGETING_TYPE_PROXIMITY_LOCATION_LIST', 'TARGETING_TYPE_GENDER', 'TARGETING_TYPE_VIDEO_PLAYER_SIZE', 'TARGETING_TYPE_USER_REWARDED_CONTENT', 'TARGETING_TYPE_PARENTAL_STATUS', 'TARGETING_TYPE_CONTENT_INSTREAM_POSITION', 'TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION', 'TARGETING_TYPE_DEVICE_TYPE', 'TARGETING_TYPE_AUDIENCE_GROUP', 'TARGETING_TYPE_BROWSER', 'TARGETING_TYPE_HOUSEHOLD_INCOME', 'TARGETING_TYPE_ON_SCREEN_POSITION', 'TARGETING_TYPE_THIRD_PARTY_VERIFIER', 'TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION', 'TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION', 'TARGETING_TYPE_ENVIRONMENT', 'TARGETING_TYPE_CARRIER_AND_ISP', 'TARGETING_TYPE_OPERATING_SYSTEM', 'TARGETING_TYPE_DEVICE_MAKE_MODEL', 'TARGETING_TYPE_KEYWORD', 'TARGETING_TYPE_NEGATIVE_KEYWORD_LIST', 'TARGETING_TYPE_VIEWABILITY', 'TARGETING_TYPE_CATEGORY', 'TARGETING_TYPE_INVENTORY_SOURCE', 'TARGETING_TYPE_LANGUAGE', 'TARGETING_TYPE_AUTHORIZED_SELLER_STATUS', 'TARGETING_TYPE_GEO_REGION', 'TARGETING_TYPE_INVENTORY_SOURCE_GROUP', 'TARGETING_TYPE_EXCHANGE', 'TARGETING_TYPE_SUB_EXCHANGE', 'TARGETING_TYPE_POI', 'TARGETING_TYPE_BUSINESS_CHAIN', 'TARGETING_TYPE_CONTENT_DURATION', 'TARGETING_TYPE_CONTENT_STREAM_TYPE', 'TARGETING_TYPE_NATIVE_CONTENT_POSITION', 'TARGETING_TYPE_OMID', 'TARGETING_TYPE_AUDIO_CONTENT_TYPE', 'TARGETING_TYPE_CONTENT_GENRE', 'TARGETING_TYPE_YOUTUBE_VIDEO', 'TARGETING_TYPE_YOUTUBE_CHANNEL', 'TARGETING_TYPE_SESSION_POSITION']):
            raise ValueError("must be one of enum values ('TARGETING_TYPE_UNSPECIFIED', 'TARGETING_TYPE_CHANNEL', 'TARGETING_TYPE_APP_CATEGORY', 'TARGETING_TYPE_APP', 'TARGETING_TYPE_URL', 'TARGETING_TYPE_DAY_AND_TIME', 'TARGETING_TYPE_AGE_RANGE', 'TARGETING_TYPE_REGIONAL_LOCATION_LIST', 'TARGETING_TYPE_PROXIMITY_LOCATION_LIST', 'TARGETING_TYPE_GENDER', 'TARGETING_TYPE_VIDEO_PLAYER_SIZE', 'TARGETING_TYPE_USER_REWARDED_CONTENT', 'TARGETING_TYPE_PARENTAL_STATUS', 'TARGETING_TYPE_CONTENT_INSTREAM_POSITION', 'TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION', 'TARGETING_TYPE_DEVICE_TYPE', 'TARGETING_TYPE_AUDIENCE_GROUP', 'TARGETING_TYPE_BROWSER', 'TARGETING_TYPE_HOUSEHOLD_INCOME', 'TARGETING_TYPE_ON_SCREEN_POSITION', 'TARGETING_TYPE_THIRD_PARTY_VERIFIER', 'TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION', 'TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION', 'TARGETING_TYPE_ENVIRONMENT', 'TARGETING_TYPE_CARRIER_AND_ISP', 'TARGETING_TYPE_OPERATING_SYSTEM', 'TARGETING_TYPE_DEVICE_MAKE_MODEL', 'TARGETING_TYPE_KEYWORD', 'TARGETING_TYPE_NEGATIVE_KEYWORD_LIST', 'TARGETING_TYPE_VIEWABILITY', 'TARGETING_TYPE_CATEGORY', 'TARGETING_TYPE_INVENTORY_SOURCE', 'TARGETING_TYPE_LANGUAGE', 'TARGETING_TYPE_AUTHORIZED_SELLER_STATUS', 'TARGETING_TYPE_GEO_REGION', 'TARGETING_TYPE_INVENTORY_SOURCE_GROUP', 'TARGETING_TYPE_EXCHANGE', 'TARGETING_TYPE_SUB_EXCHANGE', 'TARGETING_TYPE_POI', 'TARGETING_TYPE_BUSINESS_CHAIN', 'TARGETING_TYPE_CONTENT_DURATION', 'TARGETING_TYPE_CONTENT_STREAM_TYPE', 'TARGETING_TYPE_NATIVE_CONTENT_POSITION', 'TARGETING_TYPE_OMID', 'TARGETING_TYPE_AUDIO_CONTENT_TYPE', 'TARGETING_TYPE_CONTENT_GENRE', 'TARGETING_TYPE_YOUTUBE_VIDEO', 'TARGETING_TYPE_YOUTUBE_CHANNEL', 'TARGETING_TYPE_SESSION_POSITION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TargetingOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "targeting_option_id",
            "targeting_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of age_range_details
        if self.age_range_details:
            _dict['ageRangeDetails'] = self.age_range_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_category_details
        if self.app_category_details:
            _dict['appCategoryDetails'] = self.app_category_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of audio_content_type_details
        if self.audio_content_type_details:
            _dict['audioContentTypeDetails'] = self.audio_content_type_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of authorized_seller_status_details
        if self.authorized_seller_status_details:
            _dict['authorizedSellerStatusDetails'] = self.authorized_seller_status_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of browser_details
        if self.browser_details:
            _dict['browserDetails'] = self.browser_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of business_chain_details
        if self.business_chain_details:
            _dict['businessChainDetails'] = self.business_chain_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of carrier_and_isp_details
        if self.carrier_and_isp_details:
            _dict['carrierAndIspDetails'] = self.carrier_and_isp_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of category_details
        if self.category_details:
            _dict['categoryDetails'] = self.category_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_duration_details
        if self.content_duration_details:
            _dict['contentDurationDetails'] = self.content_duration_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_genre_details
        if self.content_genre_details:
            _dict['contentGenreDetails'] = self.content_genre_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_instream_position_details
        if self.content_instream_position_details:
            _dict['contentInstreamPositionDetails'] = self.content_instream_position_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_outstream_position_details
        if self.content_outstream_position_details:
            _dict['contentOutstreamPositionDetails'] = self.content_outstream_position_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_stream_type_details
        if self.content_stream_type_details:
            _dict['contentStreamTypeDetails'] = self.content_stream_type_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device_make_model_details
        if self.device_make_model_details:
            _dict['deviceMakeModelDetails'] = self.device_make_model_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device_type_details
        if self.device_type_details:
            _dict['deviceTypeDetails'] = self.device_type_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of digital_content_label_details
        if self.digital_content_label_details:
            _dict['digitalContentLabelDetails'] = self.digital_content_label_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of environment_details
        if self.environment_details:
            _dict['environmentDetails'] = self.environment_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exchange_details
        if self.exchange_details:
            _dict['exchangeDetails'] = self.exchange_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gender_details
        if self.gender_details:
            _dict['genderDetails'] = self.gender_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geo_region_details
        if self.geo_region_details:
            _dict['geoRegionDetails'] = self.geo_region_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of household_income_details
        if self.household_income_details:
            _dict['householdIncomeDetails'] = self.household_income_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language_details
        if self.language_details:
            _dict['languageDetails'] = self.language_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of native_content_position_details
        if self.native_content_position_details:
            _dict['nativeContentPositionDetails'] = self.native_content_position_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of omid_details
        if self.omid_details:
            _dict['omidDetails'] = self.omid_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of on_screen_position_details
        if self.on_screen_position_details:
            _dict['onScreenPositionDetails'] = self.on_screen_position_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operating_system_details
        if self.operating_system_details:
            _dict['operatingSystemDetails'] = self.operating_system_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parental_status_details
        if self.parental_status_details:
            _dict['parentalStatusDetails'] = self.parental_status_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of poi_details
        if self.poi_details:
            _dict['poiDetails'] = self.poi_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sensitive_category_details
        if self.sensitive_category_details:
            _dict['sensitiveCategoryDetails'] = self.sensitive_category_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_exchange_details
        if self.sub_exchange_details:
            _dict['subExchangeDetails'] = self.sub_exchange_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_rewarded_content_details
        if self.user_rewarded_content_details:
            _dict['userRewardedContentDetails'] = self.user_rewarded_content_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_player_size_details
        if self.video_player_size_details:
            _dict['videoPlayerSizeDetails'] = self.video_player_size_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of viewability_details
        if self.viewability_details:
            _dict['viewabilityDetails'] = self.viewability_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TargetingOption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ageRangeDetails": AgeRangeTargetingOptionDetails.from_dict(obj["ageRangeDetails"]) if obj.get("ageRangeDetails") is not None else None,
            "appCategoryDetails": AppCategoryTargetingOptionDetails.from_dict(obj["appCategoryDetails"]) if obj.get("appCategoryDetails") is not None else None,
            "audioContentTypeDetails": AudioContentTypeTargetingOptionDetails.from_dict(obj["audioContentTypeDetails"]) if obj.get("audioContentTypeDetails") is not None else None,
            "authorizedSellerStatusDetails": AuthorizedSellerStatusTargetingOptionDetails.from_dict(obj["authorizedSellerStatusDetails"]) if obj.get("authorizedSellerStatusDetails") is not None else None,
            "browserDetails": BrowserTargetingOptionDetails.from_dict(obj["browserDetails"]) if obj.get("browserDetails") is not None else None,
            "businessChainDetails": BusinessChainTargetingOptionDetails.from_dict(obj["businessChainDetails"]) if obj.get("businessChainDetails") is not None else None,
            "carrierAndIspDetails": CarrierAndIspTargetingOptionDetails.from_dict(obj["carrierAndIspDetails"]) if obj.get("carrierAndIspDetails") is not None else None,
            "categoryDetails": CategoryTargetingOptionDetails.from_dict(obj["categoryDetails"]) if obj.get("categoryDetails") is not None else None,
            "contentDurationDetails": ContentDurationTargetingOptionDetails.from_dict(obj["contentDurationDetails"]) if obj.get("contentDurationDetails") is not None else None,
            "contentGenreDetails": ContentGenreTargetingOptionDetails.from_dict(obj["contentGenreDetails"]) if obj.get("contentGenreDetails") is not None else None,
            "contentInstreamPositionDetails": ContentInstreamPositionTargetingOptionDetails.from_dict(obj["contentInstreamPositionDetails"]) if obj.get("contentInstreamPositionDetails") is not None else None,
            "contentOutstreamPositionDetails": ContentOutstreamPositionTargetingOptionDetails.from_dict(obj["contentOutstreamPositionDetails"]) if obj.get("contentOutstreamPositionDetails") is not None else None,
            "contentStreamTypeDetails": ContentStreamTypeTargetingOptionDetails.from_dict(obj["contentStreamTypeDetails"]) if obj.get("contentStreamTypeDetails") is not None else None,
            "deviceMakeModelDetails": DeviceMakeModelTargetingOptionDetails.from_dict(obj["deviceMakeModelDetails"]) if obj.get("deviceMakeModelDetails") is not None else None,
            "deviceTypeDetails": DeviceTypeTargetingOptionDetails.from_dict(obj["deviceTypeDetails"]) if obj.get("deviceTypeDetails") is not None else None,
            "digitalContentLabelDetails": DigitalContentLabelTargetingOptionDetails.from_dict(obj["digitalContentLabelDetails"]) if obj.get("digitalContentLabelDetails") is not None else None,
            "environmentDetails": EnvironmentTargetingOptionDetails.from_dict(obj["environmentDetails"]) if obj.get("environmentDetails") is not None else None,
            "exchangeDetails": ExchangeTargetingOptionDetails.from_dict(obj["exchangeDetails"]) if obj.get("exchangeDetails") is not None else None,
            "genderDetails": GenderTargetingOptionDetails.from_dict(obj["genderDetails"]) if obj.get("genderDetails") is not None else None,
            "geoRegionDetails": GeoRegionTargetingOptionDetails.from_dict(obj["geoRegionDetails"]) if obj.get("geoRegionDetails") is not None else None,
            "householdIncomeDetails": HouseholdIncomeTargetingOptionDetails.from_dict(obj["householdIncomeDetails"]) if obj.get("householdIncomeDetails") is not None else None,
            "languageDetails": LanguageTargetingOptionDetails.from_dict(obj["languageDetails"]) if obj.get("languageDetails") is not None else None,
            "name": obj.get("name"),
            "nativeContentPositionDetails": NativeContentPositionTargetingOptionDetails.from_dict(obj["nativeContentPositionDetails"]) if obj.get("nativeContentPositionDetails") is not None else None,
            "omidDetails": OmidTargetingOptionDetails.from_dict(obj["omidDetails"]) if obj.get("omidDetails") is not None else None,
            "onScreenPositionDetails": OnScreenPositionTargetingOptionDetails.from_dict(obj["onScreenPositionDetails"]) if obj.get("onScreenPositionDetails") is not None else None,
            "operatingSystemDetails": OperatingSystemTargetingOptionDetails.from_dict(obj["operatingSystemDetails"]) if obj.get("operatingSystemDetails") is not None else None,
            "parentalStatusDetails": ParentalStatusTargetingOptionDetails.from_dict(obj["parentalStatusDetails"]) if obj.get("parentalStatusDetails") is not None else None,
            "poiDetails": PoiTargetingOptionDetails.from_dict(obj["poiDetails"]) if obj.get("poiDetails") is not None else None,
            "sensitiveCategoryDetails": SensitiveCategoryTargetingOptionDetails.from_dict(obj["sensitiveCategoryDetails"]) if obj.get("sensitiveCategoryDetails") is not None else None,
            "subExchangeDetails": SubExchangeTargetingOptionDetails.from_dict(obj["subExchangeDetails"]) if obj.get("subExchangeDetails") is not None else None,
            "targetingOptionId": obj.get("targetingOptionId"),
            "targetingType": obj.get("targetingType"),
            "userRewardedContentDetails": UserRewardedContentTargetingOptionDetails.from_dict(obj["userRewardedContentDetails"]) if obj.get("userRewardedContentDetails") is not None else None,
            "videoPlayerSizeDetails": VideoPlayerSizeTargetingOptionDetails.from_dict(obj["videoPlayerSizeDetails"]) if obj.get("videoPlayerSizeDetails") is not None else None,
            "viewabilityDetails": ViewabilityTargetingOptionDetails.from_dict(obj["viewabilityDetails"]) if obj.get("viewabilityDetails") is not None else None
        })
        return _obj



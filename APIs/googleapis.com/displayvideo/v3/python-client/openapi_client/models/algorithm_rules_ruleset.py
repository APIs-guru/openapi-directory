# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.algorithm_rules_rule import AlgorithmRulesRule
from typing import Optional, Set
from typing_extensions import Self

class AlgorithmRulesRuleset(BaseModel):
    """
    A ruleset consisting of a list of rules and how to aggregate the resulting values.
    """ # noqa: E501
    aggregation_type: Optional[StrictStr] = Field(default=None, description="How to aggregate values of evaluated rules.", alias="aggregationType")
    max_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum value the ruleset can evaluate to.", alias="maxValue")
    rules: Optional[List[AlgorithmRulesRule]] = Field(default=None, description="List of rules to generate the impression value.")
    __properties: ClassVar[List[str]] = ["aggregationType", "maxValue", "rules"]

    @field_validator('aggregation_type')
    def aggregation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RULE_AGGREGATION_TYPE_UNSPECIFIED', 'SUM_OF_VALUES', 'PRODUCT_OF_VALUES', 'MAXIMUM_VALUE']):
            raise ValueError("must be one of enum values ('RULE_AGGREGATION_TYPE_UNSPECIFIED', 'SUM_OF_VALUES', 'PRODUCT_OF_VALUES', 'MAXIMUM_VALUE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlgorithmRulesRuleset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item_rules in self.rules:
                if _item_rules:
                    _items.append(_item_rules.to_dict())
            _dict['rules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlgorithmRulesRuleset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregationType": obj.get("aggregationType"),
            "maxValue": obj.get("maxValue"),
            "rules": [AlgorithmRulesRule.from_dict(_item) for _item in obj["rules"]] if obj.get("rules") is not None else None
        })
        return _obj



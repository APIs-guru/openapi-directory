# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.algorithm_rules_comparison_value import AlgorithmRulesComparisonValue
from openapi_client.models.algorithm_rules_signal import AlgorithmRulesSignal
from typing import Optional, Set
from typing_extensions import Self

class AlgorithmRulesSignalComparison(BaseModel):
    """
    A single comparison. The comparison compares the `signal` to the `comparisonValue`. The comparison of `siteId==123` is represented with the following field values: * `signal` has an `impressionSignal` of `SITE_ID`. * `comparisonOperator` is set to `EQUAL`. * `comparisonValue` is set to 123.
    """ # noqa: E501
    comparison_operator: Optional[StrictStr] = Field(default=None, description="Operator used to compare the two values. In the resulting experession, the `signal` will be the first value and the `comparisonValue will be the second.", alias="comparisonOperator")
    comparison_value: Optional[AlgorithmRulesComparisonValue] = Field(default=None, alias="comparisonValue")
    signal: Optional[AlgorithmRulesSignal] = None
    __properties: ClassVar[List[str]] = ["comparisonOperator", "comparisonValue", "signal"]

    @field_validator('comparison_operator')
    def comparison_operator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPARISON_OPERATOR_UNSPECIFIED', 'EQUAL', 'GREATER_THAN', 'LESS_THAN', 'GREATER_THAN_OR_EQUAL_TO', 'LESS_THAN_OR_EQUAL_TO']):
            raise ValueError("must be one of enum values ('COMPARISON_OPERATOR_UNSPECIFIED', 'EQUAL', 'GREATER_THAN', 'LESS_THAN', 'GREATER_THAN_OR_EQUAL_TO', 'LESS_THAN_OR_EQUAL_TO')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlgorithmRulesSignalComparison from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of comparison_value
        if self.comparison_value:
            _dict['comparisonValue'] = self.comparison_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of signal
        if self.signal:
            _dict['signal'] = self.signal.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlgorithmRulesSignalComparison from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comparisonOperator": obj.get("comparisonOperator"),
            "comparisonValue": AlgorithmRulesComparisonValue.from_dict(obj["comparisonValue"]) if obj.get("comparisonValue") is not None else None,
            "signal": AlgorithmRulesSignal.from_dict(obj["signal"]) if obj.get("signal") is not None else None
        })
        return _obj



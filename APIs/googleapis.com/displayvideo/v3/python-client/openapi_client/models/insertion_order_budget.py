# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.insertion_order_budget_segment import InsertionOrderBudgetSegment
from typing import Optional, Set
from typing_extensions import Self

class InsertionOrderBudget(BaseModel):
    """
    Settings that control how insertion order budget is allocated.
    """ # noqa: E501
    automation_type: Optional[StrictStr] = Field(default=None, description="The type of automation used to manage bid and budget for the insertion order. If this field is unspecified in creation, the value defaults to `INSERTION_ORDER_AUTOMATION_TYPE_NONE`.", alias="automationType")
    budget_segments: Optional[List[InsertionOrderBudgetSegment]] = Field(default=None, description="Required. The list of budget segments. Use a budget segment to specify a specific budget for a given period of time an insertion order is running.", alias="budgetSegments")
    budget_unit: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The budget unit specifies whether the budget is currency based or impression based.", alias="budgetUnit")
    __properties: ClassVar[List[str]] = ["automationType", "budgetSegments", "budgetUnit"]

    @field_validator('automation_type')
    def automation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INSERTION_ORDER_AUTOMATION_TYPE_UNSPECIFIED', 'INSERTION_ORDER_AUTOMATION_TYPE_BUDGET', 'INSERTION_ORDER_AUTOMATION_TYPE_NONE', 'INSERTION_ORDER_AUTOMATION_TYPE_BID_BUDGET']):
            raise ValueError("must be one of enum values ('INSERTION_ORDER_AUTOMATION_TYPE_UNSPECIFIED', 'INSERTION_ORDER_AUTOMATION_TYPE_BUDGET', 'INSERTION_ORDER_AUTOMATION_TYPE_NONE', 'INSERTION_ORDER_AUTOMATION_TYPE_BID_BUDGET')")
        return value

    @field_validator('budget_unit')
    def budget_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BUDGET_UNIT_UNSPECIFIED', 'BUDGET_UNIT_CURRENCY', 'BUDGET_UNIT_IMPRESSIONS']):
            raise ValueError("must be one of enum values ('BUDGET_UNIT_UNSPECIFIED', 'BUDGET_UNIT_CURRENCY', 'BUDGET_UNIT_IMPRESSIONS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InsertionOrderBudget from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in budget_segments (list)
        _items = []
        if self.budget_segments:
            for _item_budget_segments in self.budget_segments:
                if _item_budget_segments:
                    _items.append(_item_budget_segments.to_dict())
            _dict['budgetSegments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InsertionOrderBudget from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automationType": obj.get("automationType"),
            "budgetSegments": [InsertionOrderBudgetSegment.from_dict(_item) for _item in obj["budgetSegments"]] if obj.get("budgetSegments") is not None else None,
            "budgetUnit": obj.get("budgetUnit")
        })
        return _obj



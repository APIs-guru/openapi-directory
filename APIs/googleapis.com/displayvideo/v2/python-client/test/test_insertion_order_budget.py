# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.insertion_order_budget import InsertionOrderBudget

class TestInsertionOrderBudget(unittest.TestCase):
    """InsertionOrderBudget unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> InsertionOrderBudget:
        """Test InsertionOrderBudget
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `InsertionOrderBudget`
        """
        model = InsertionOrderBudget()
        if include_optional:
            return InsertionOrderBudget(
                automation_type = 'INSERTION_ORDER_AUTOMATION_TYPE_UNSPECIFIED',
                budget_segments = [
                    openapi_client.models.insertion_order_budget_segment.InsertionOrderBudgetSegment(
                        budget_amount_micros = '', 
                        campaign_budget_id = '', 
                        date_range = openapi_client.models.date_range.DateRange(
                            end_date = openapi_client.models.date.Date(
                                day = 56, 
                                month = 56, 
                                year = 56, ), 
                            start_date = openapi_client.models.date.Date(
                                day = 56, 
                                month = 56, 
                                year = 56, ), ), 
                        description = '', )
                    ],
                budget_unit = 'BUDGET_UNIT_UNSPECIFIED'
            )
        else:
            return InsertionOrderBudget(
        )
        """

    def testInsertionOrderBudget(self):
        """Test InsertionOrderBudget"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

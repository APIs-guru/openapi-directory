# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_line_items_response import ListLineItemsResponse

class TestListLineItemsResponse(unittest.TestCase):
    """ListLineItemsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListLineItemsResponse:
        """Test ListLineItemsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListLineItemsResponse`
        """
        model = ListLineItemsResponse()
        if include_optional:
            return ListLineItemsResponse(
                line_items = [
                    openapi_client.models.line_item.LineItem(
                        advertiser_id = '', 
                        bid_strategy = openapi_client.models.bidding_strategy.BiddingStrategy(
                            fixed_bid = openapi_client.models.fixed_bid_strategy.FixedBidStrategy(
                                bid_amount_micros = '', ), 
                            maximize_spend_auto_bid = openapi_client.models.maximize_spend_bid_strategy.MaximizeSpendBidStrategy(
                                custom_bidding_algorithm_id = '', 
                                max_average_cpm_bid_amount_micros = '', 
                                performance_goal_type = 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_UNSPECIFIED', 
                                raise_bid_for_deals = True, ), 
                            performance_goal_auto_bid = openapi_client.models.performance_goal_bid_strategy.PerformanceGoalBidStrategy(
                                custom_bidding_algorithm_id = '', 
                                max_average_cpm_bid_amount_micros = '', 
                                performance_goal_amount_micros = '', 
                                performance_goal_type = 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_UNSPECIFIED', ), ), 
                        budget = openapi_client.models.line_item_budget.LineItemBudget(
                            budget_allocation_type = 'LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNSPECIFIED', 
                            budget_unit = 'BUDGET_UNIT_UNSPECIFIED', 
                            max_amount = '', ), 
                        campaign_id = '', 
                        conversion_counting = openapi_client.models.conversion_counting_config.ConversionCountingConfig(
                            floodlight_activity_configs = [
                                openapi_client.models.tracking_floodlight_activity_config.TrackingFloodlightActivityConfig(
                                    floodlight_activity_id = '', 
                                    post_click_lookback_window_days = 56, 
                                    post_view_lookback_window_days = 56, )
                                ], 
                            post_view_count_percentage_millis = '', ), 
                        creative_ids = [
                            ''
                            ], 
                        display_name = '', 
                        entity_status = 'ENTITY_STATUS_UNSPECIFIED', 
                        exclude_new_exchanges = True, 
                        flight = openapi_client.models.line_item_flight.LineItemFlight(
                            date_range = openapi_client.models.date_range.DateRange(
                                end_date = openapi_client.models.date.Date(
                                    day = 56, 
                                    month = 56, 
                                    year = 56, ), 
                                start_date = openapi_client.models.date.Date(
                                    day = 56, 
                                    month = 56, 
                                    year = 56, ), ), 
                            flight_date_type = 'LINE_ITEM_FLIGHT_DATE_TYPE_UNSPECIFIED', ), 
                        frequency_cap = openapi_client.models.frequency_cap.FrequencyCap(
                            max_impressions = 56, 
                            max_views = 56, 
                            time_unit = 'TIME_UNIT_UNSPECIFIED', 
                            time_unit_count = 56, 
                            unlimited = True, ), 
                        insertion_order_id = '', 
                        integration_details = openapi_client.models.integration_details.IntegrationDetails(
                            details = '', 
                            integration_code = '', ), 
                        line_item_id = '', 
                        line_item_type = 'LINE_ITEM_TYPE_UNSPECIFIED', 
                        mobile_app = openapi_client.models.mobile_app.MobileApp(
                            app_id = '', 
                            display_name = '', 
                            platform = 'PLATFORM_UNSPECIFIED', 
                            publisher = '', ), 
                        name = '', 
                        pacing = openapi_client.models.pacing.Pacing(
                            daily_max_impressions = '', 
                            daily_max_micros = '', 
                            pacing_period = 'PACING_PERIOD_UNSPECIFIED', 
                            pacing_type = 'PACING_TYPE_UNSPECIFIED', ), 
                        partner_costs = [
                            openapi_client.models.partner_cost.PartnerCost(
                                cost_type = 'PARTNER_COST_TYPE_UNSPECIFIED', 
                                fee_amount = '', 
                                fee_percentage_millis = '', 
                                fee_type = 'PARTNER_COST_FEE_TYPE_UNSPECIFIED', 
                                invoice_type = 'PARTNER_COST_INVOICE_TYPE_UNSPECIFIED', )
                            ], 
                        partner_revenue_model = openapi_client.models.partner_revenue_model.PartnerRevenueModel(
                            markup_amount = '', 
                            markup_type = 'PARTNER_REVENUE_MODEL_MARKUP_TYPE_UNSPECIFIED', ), 
                        reservation_type = 'RESERVATION_TYPE_UNSPECIFIED', 
                        targeting_expansion = openapi_client.models.targeting_expansion_config.TargetingExpansionConfig(
                            exclude_first_party_audience = True, 
                            targeting_expansion_level = 'TARGETING_EXPANSION_LEVEL_UNSPECIFIED', ), 
                        update_time = '', 
                        warning_messages = [
                            'LINE_ITEM_WARNING_MESSAGE_UNSPECIFIED'
                            ], 
                        youtube_and_partners_settings = openapi_client.models.youtube_and_partners_settings.YoutubeAndPartnersSettings(
                            bidding_strategy = openapi_client.models.youtube_and_partners_bidding_strategy.YoutubeAndPartnersBiddingStrategy(
                                ad_group_effective_target_cpa_source = 'BIDDING_SOURCE_UNSPECIFIED', 
                                ad_group_effective_target_cpa_value = '', 
                                type = 'YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_UNSPECIFIED', 
                                value = '', ), 
                            content_category = 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_UNSPECIFIED', 
                            effective_content_category = 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_UNSPECIFIED', 
                            inventory_source_settings = openapi_client.models.youtube_and_partners_inventory_source_config.YoutubeAndPartnersInventorySourceConfig(
                                include_google_tv = True, 
                                include_youtube_search = True, 
                                include_youtube_video_partners = True, 
                                include_youtube_videos = True, ), 
                            lead_form_id = '', 
                            linked_merchant_id = '', 
                            related_video_ids = [
                                ''
                                ], 
                            target_frequency = openapi_client.models.target_frequency.TargetFrequency(
                                target_count = '', 
                                time_unit = 'TIME_UNIT_UNSPECIFIED', 
                                time_unit_count = 56, ), 
                            third_party_measurement_settings = openapi_client.models.youtube_and_partners_third_party_measurement_settings.YoutubeAndPartnersThirdPartyMeasurementSettings(
                                brand_lift_vendor_configs = [
                                    openapi_client.models.third_party_vendor_config.ThirdPartyVendorConfig(
                                        placement_id = '', 
                                        vendor = 'THIRD_PARTY_VENDOR_UNSPECIFIED', )
                                    ], 
                                brand_safety_vendor_configs = [
                                    openapi_client.models.third_party_vendor_config.ThirdPartyVendorConfig(
                                        placement_id = '', 
                                        vendor = 'THIRD_PARTY_VENDOR_UNSPECIFIED', )
                                    ], 
                                reach_vendor_configs = [
                                    
                                    ], 
                                viewability_vendor_configs = [
                                    
                                    ], ), 
                            video_ad_sequence_settings = openapi_client.models.video_ad_sequence_settings.VideoAdSequenceSettings(
                                minimum_duration = 'VIDEO_AD_SEQUENCE_MINIMUM_DURATION_UNSPECIFIED', 
                                steps = [
                                    openapi_client.models.video_ad_sequence_step.VideoAdSequenceStep(
                                        ad_group_id = '', 
                                        interaction_type = 'INTERACTION_TYPE_UNSPECIFIED', 
                                        previous_step_id = '', 
                                        step_id = '', )
                                    ], ), 
                            view_frequency_cap = openapi_client.models.frequency_cap.FrequencyCap(
                                max_impressions = 56, 
                                max_views = 56, 
                                time_unit = 'TIME_UNIT_UNSPECIFIED', 
                                time_unit_count = 56, 
                                unlimited = True, ), ), )
                    ],
                next_page_token = ''
            )
        else:
            return ListLineItemsResponse(
        )
        """

    def testListLineItemsResponse(self):
        """Test ListLineItemsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

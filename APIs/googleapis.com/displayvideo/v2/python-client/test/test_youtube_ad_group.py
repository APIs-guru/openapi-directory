# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.youtube_ad_group import YoutubeAdGroup

class TestYoutubeAdGroup(unittest.TestCase):
    """YoutubeAdGroup unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> YoutubeAdGroup:
        """Test YoutubeAdGroup
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `YoutubeAdGroup`
        """
        model = YoutubeAdGroup()
        if include_optional:
            return YoutubeAdGroup(
                ad_group_format = 'YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_UNSPECIFIED',
                ad_group_id = '',
                advertiser_id = '',
                bidding_strategy = openapi_client.models.youtube_and_partners_bidding_strategy.YoutubeAndPartnersBiddingStrategy(
                    ad_group_effective_target_cpa_source = 'BIDDING_SOURCE_UNSPECIFIED', 
                    ad_group_effective_target_cpa_value = '', 
                    type = 'YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_UNSPECIFIED', 
                    value = '', ),
                display_name = '',
                entity_status = 'ENTITY_STATUS_UNSPECIFIED',
                line_item_id = '',
                name = '',
                product_feed_data = openapi_client.models.product_feed_data.ProductFeedData(
                    is_feed_disabled = True, 
                    product_match_dimensions = [
                        openapi_client.models.product_match_dimension.ProductMatchDimension(
                            custom_label = openapi_client.models.custom_label.CustomLabel(
                                key = 'CUSTOM_LABEL_KEY_UNSPECIFIED', 
                                value = '', ), 
                            product_offer_id = '', )
                        ], 
                    product_match_type = 'PRODUCT_MATCH_TYPE_UNSPECIFIED', ),
                targeting_expansion = openapi_client.models.targeting_expansion_config.TargetingExpansionConfig(
                    exclude_first_party_audience = True, 
                    targeting_expansion_level = 'TARGETING_EXPANSION_LEVEL_UNSPECIFIED', ),
                youtube_ad_ids = [
                    ''
                    ]
            )
        else:
            return YoutubeAdGroup(
        )
        """

    def testYoutubeAdGroup(self):
        """Test YoutubeAdGroup"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.campaign import Campaign

class TestCampaign(unittest.TestCase):
    """Campaign unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Campaign:
        """Test Campaign
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Campaign`
        """
        model = Campaign()
        if include_optional:
            return Campaign(
                advertiser_id = '',
                campaign_budgets = [
                    openapi_client.models.campaign_budget.CampaignBudget(
                        budget_amount_micros = '', 
                        budget_id = '', 
                        budget_unit = 'BUDGET_UNIT_UNSPECIFIED', 
                        date_range = openapi_client.models.date_range.DateRange(
                            end_date = openapi_client.models.date.Date(
                                day = 56, 
                                month = 56, 
                                year = 56, ), 
                            start_date = openapi_client.models.date.Date(
                                day = 56, 
                                month = 56, 
                                year = 56, ), ), 
                        display_name = '', 
                        external_budget_id = '', 
                        external_budget_source = 'EXTERNAL_BUDGET_SOURCE_UNSPECIFIED', 
                        invoice_grouping_id = '', 
                        prisma_config = openapi_client.models.prisma_config.PrismaConfig(
                            prisma_cpe_code = openapi_client.models.prisma_cpe_code.PrismaCpeCode(
                                prisma_client_code = '', 
                                prisma_estimate_code = '', 
                                prisma_product_code = '', ), 
                            prisma_type = 'PRISMA_TYPE_UNSPECIFIED', 
                            supplier = '', ), )
                    ],
                campaign_flight = openapi_client.models.campaign_flight.CampaignFlight(
                    planned_dates = openapi_client.models.date_range.DateRange(
                        end_date = openapi_client.models.date.Date(
                            day = 56, 
                            month = 56, 
                            year = 56, ), 
                        start_date = openapi_client.models.date.Date(
                            day = 56, 
                            month = 56, 
                            year = 56, ), ), 
                    planned_spend_amount_micros = '', ),
                campaign_goal = openapi_client.models.campaign_goal.CampaignGoal(
                    campaign_goal_type = 'CAMPAIGN_GOAL_TYPE_UNSPECIFIED', 
                    performance_goal = openapi_client.models.performance_goal.PerformanceGoal(
                        performance_goal_amount_micros = '', 
                        performance_goal_percentage_micros = '', 
                        performance_goal_string = '', 
                        performance_goal_type = 'PERFORMANCE_GOAL_TYPE_UNSPECIFIED', ), ),
                campaign_id = '',
                display_name = '',
                entity_status = 'ENTITY_STATUS_UNSPECIFIED',
                frequency_cap = openapi_client.models.frequency_cap.FrequencyCap(
                    max_impressions = 56, 
                    max_views = 56, 
                    time_unit = 'TIME_UNIT_UNSPECIFIED', 
                    time_unit_count = 56, 
                    unlimited = True, ),
                name = '',
                update_time = ''
            )
        else:
            return Campaign(
        )
        """

    def testCampaign(self):
        """Test Campaign"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

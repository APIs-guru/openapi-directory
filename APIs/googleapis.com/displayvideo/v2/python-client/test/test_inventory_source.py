# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.inventory_source import InventorySource

class TestInventorySource(unittest.TestCase):
    """InventorySource unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> InventorySource:
        """Test InventorySource
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `InventorySource`
        """
        model = InventorySource()
        if include_optional:
            return InventorySource(
                commitment = 'INVENTORY_SOURCE_COMMITMENT_UNSPECIFIED',
                creative_configs = [
                    openapi_client.models.creative_config.CreativeConfig(
                        creative_type = 'CREATIVE_TYPE_UNSPECIFIED', 
                        display_creative_config = openapi_client.models.inventory_source_display_creative_config.InventorySourceDisplayCreativeConfig(
                            creative_size = openapi_client.models.dimensions.Dimensions(
                                height_pixels = 56, 
                                width_pixels = 56, ), ), 
                        video_creative_config = openapi_client.models.inventory_source_video_creative_config.InventorySourceVideoCreativeConfig(
                            duration = '', ), )
                    ],
                deal_id = '',
                delivery_method = 'INVENTORY_SOURCE_DELIVERY_METHOD_UNSPECIFIED',
                display_name = '',
                exchange = 'EXCHANGE_UNSPECIFIED',
                guaranteed_order_id = '',
                inventory_source_id = '',
                inventory_source_product_type = 'INVENTORY_SOURCE_PRODUCT_TYPE_UNSPECIFIED',
                inventory_source_type = 'INVENTORY_SOURCE_TYPE_UNSPECIFIED',
                name = '',
                publisher_name = '',
                rate_details = openapi_client.models.rate_details.RateDetails(
                    inventory_source_rate_type = 'INVENTORY_SOURCE_RATE_TYPE_UNSPECIFIED', 
                    minimum_spend = openapi_client.models.money.Money(
                        currency_code = '', 
                        nanos = 56, 
                        units = '', ), 
                    rate = openapi_client.models.money.Money(
                        currency_code = '', 
                        nanos = 56, 
                        units = '', ), 
                    units_purchased = '', ),
                read_advertiser_ids = [
                    ''
                    ],
                read_partner_ids = [
                    ''
                    ],
                read_write_accessors = openapi_client.models.inventory_source_accessors.InventorySourceAccessors(
                    advertisers = openapi_client.models.inventory_source_accessors_advertiser_accessors.InventorySourceAccessorsAdvertiserAccessors(
                        advertiser_ids = [
                            ''
                            ], ), 
                    partner = openapi_client.models.inventory_source_accessors_partner_accessor.InventorySourceAccessorsPartnerAccessor(
                        partner_id = '', ), ),
                status = openapi_client.models.inventory_source_status.InventorySourceStatus(
                    config_status = 'INVENTORY_SOURCE_CONFIG_STATUS_UNSPECIFIED', 
                    entity_pause_reason = '', 
                    entity_status = 'ENTITY_STATUS_UNSPECIFIED', 
                    seller_pause_reason = '', 
                    seller_status = 'ENTITY_STATUS_UNSPECIFIED', ),
                time_range = openapi_client.models.time_range.TimeRange(
                    end_time = '', 
                    start_time = '', ),
                update_time = ''
            )
        else:
            return InventorySource(
        )
        """

    def testInventorySource(self):
        """Test InventorySource"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

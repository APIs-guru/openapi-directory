# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.video_performance_ad import VideoPerformanceAd

class TestVideoPerformanceAd(unittest.TestCase):
    """VideoPerformanceAd unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VideoPerformanceAd:
        """Test VideoPerformanceAd
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VideoPerformanceAd`
        """
        model = VideoPerformanceAd()
        if include_optional:
            return VideoPerformanceAd(
                action_button_labels = [
                    ''
                    ],
                companion_banners = [
                    openapi_client.models.image_asset.ImageAsset(
                        file_size = '', 
                        full_size = openapi_client.models.dimensions.Dimensions(
                            height_pixels = 56, 
                            width_pixels = 56, ), 
                        mime_type = '', )
                    ],
                custom_parameters = {
                    'key' : ''
                    },
                descriptions = [
                    ''
                    ],
                display_url_breadcrumb1 = '',
                display_url_breadcrumb2 = '',
                domain = '',
                final_url = '',
                headlines = [
                    ''
                    ],
                long_headlines = [
                    ''
                    ],
                tracking_url = '',
                videos = [
                    openapi_client.models.youtube_video_details.YoutubeVideoDetails(
                        id = '', 
                        unavailable_reason = 'VIDEO_UNAVAILABLE_REASON_UNSPECIFIED', )
                    ]
            )
        else:
            return VideoPerformanceAd(
        )
        """

    def testVideoPerformanceAd(self):
        """Test VideoPerformanceAd"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

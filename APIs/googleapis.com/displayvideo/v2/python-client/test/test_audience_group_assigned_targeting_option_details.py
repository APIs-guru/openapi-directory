# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.audience_group_assigned_targeting_option_details import AudienceGroupAssignedTargetingOptionDetails

class TestAudienceGroupAssignedTargetingOptionDetails(unittest.TestCase):
    """AudienceGroupAssignedTargetingOptionDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AudienceGroupAssignedTargetingOptionDetails:
        """Test AudienceGroupAssignedTargetingOptionDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AudienceGroupAssignedTargetingOptionDetails`
        """
        model = AudienceGroupAssignedTargetingOptionDetails()
        if include_optional:
            return AudienceGroupAssignedTargetingOptionDetails(
                excluded_first_and_third_party_audience_group = openapi_client.models.first_and_third_party_audience_group.FirstAndThirdPartyAudienceGroup(
                    settings = [
                        openapi_client.models.first_and_third_party_audience_targeting_setting.FirstAndThirdPartyAudienceTargetingSetting(
                            first_and_third_party_audience_id = '', 
                            recency = 'RECENCY_NO_LIMIT', )
                        ], ),
                excluded_google_audience_group = openapi_client.models.google_audience_group.GoogleAudienceGroup(
                    settings = [
                        openapi_client.models.google_audience_targeting_setting.GoogleAudienceTargetingSetting(
                            google_audience_id = '', )
                        ], ),
                included_combined_audience_group = openapi_client.models.combined_audience_group.CombinedAudienceGroup(
                    settings = [
                        openapi_client.models.combined_audience_targeting_setting.CombinedAudienceTargetingSetting(
                            combined_audience_id = '', )
                        ], ),
                included_custom_list_group = openapi_client.models.custom_list_group.CustomListGroup(
                    settings = [
                        openapi_client.models.custom_list_targeting_setting.CustomListTargetingSetting(
                            custom_list_id = '', )
                        ], ),
                included_first_and_third_party_audience_groups = [
                    openapi_client.models.first_and_third_party_audience_group.FirstAndThirdPartyAudienceGroup(
                        settings = [
                            openapi_client.models.first_and_third_party_audience_targeting_setting.FirstAndThirdPartyAudienceTargetingSetting(
                                first_and_third_party_audience_id = '', 
                                recency = 'RECENCY_NO_LIMIT', )
                            ], )
                    ],
                included_google_audience_group = openapi_client.models.google_audience_group.GoogleAudienceGroup(
                    settings = [
                        openapi_client.models.google_audience_targeting_setting.GoogleAudienceTargetingSetting(
                            google_audience_id = '', )
                        ], )
            )
        else:
            return AudienceGroupAssignedTargetingOptionDetails(
        )
        """

    def testAudienceGroupAssignedTargetingOptionDetails(self):
        """Test AudienceGroupAssignedTargetingOptionDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

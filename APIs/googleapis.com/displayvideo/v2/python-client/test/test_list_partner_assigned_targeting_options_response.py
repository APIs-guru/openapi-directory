# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_partner_assigned_targeting_options_response import ListPartnerAssignedTargetingOptionsResponse

class TestListPartnerAssignedTargetingOptionsResponse(unittest.TestCase):
    """ListPartnerAssignedTargetingOptionsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListPartnerAssignedTargetingOptionsResponse:
        """Test ListPartnerAssignedTargetingOptionsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListPartnerAssignedTargetingOptionsResponse`
        """
        model = ListPartnerAssignedTargetingOptionsResponse()
        if include_optional:
            return ListPartnerAssignedTargetingOptionsResponse(
                assigned_targeting_options = [
                    openapi_client.models.assigned_targeting_option.AssignedTargetingOption(
                        age_range_details = openapi_client.models.age_range_assigned_targeting_option_details.AgeRangeAssignedTargetingOptionDetails(
                            age_range = 'AGE_RANGE_UNSPECIFIED', ), 
                        app_category_details = openapi_client.models.app_category_assigned_targeting_option_details.AppCategoryAssignedTargetingOptionDetails(
                            display_name = '', 
                            negative = True, 
                            targeting_option_id = '', ), 
                        app_details = openapi_client.models.app_assigned_targeting_option_details.AppAssignedTargetingOptionDetails(
                            app_id = '', 
                            app_platform = 'APP_PLATFORM_UNSPECIFIED', 
                            display_name = '', 
                            negative = True, ), 
                        assigned_targeting_option_id = '', 
                        assigned_targeting_option_id_alias = '', 
                        audience_group_details = openapi_client.models.audience_group_assigned_targeting_option_details.AudienceGroupAssignedTargetingOptionDetails(
                            excluded_first_and_third_party_audience_group = openapi_client.models.first_and_third_party_audience_group.FirstAndThirdPartyAudienceGroup(
                                settings = [
                                    openapi_client.models.first_and_third_party_audience_targeting_setting.FirstAndThirdPartyAudienceTargetingSetting(
                                        first_and_third_party_audience_id = '', 
                                        recency = 'RECENCY_NO_LIMIT', )
                                    ], ), 
                            excluded_google_audience_group = openapi_client.models.google_audience_group.GoogleAudienceGroup(), 
                            included_combined_audience_group = openapi_client.models.combined_audience_group.CombinedAudienceGroup(), 
                            included_custom_list_group = openapi_client.models.custom_list_group.CustomListGroup(), 
                            included_first_and_third_party_audience_groups = [
                                openapi_client.models.first_and_third_party_audience_group.FirstAndThirdPartyAudienceGroup()
                                ], 
                            included_google_audience_group = openapi_client.models.google_audience_group.GoogleAudienceGroup(), ), 
                        audio_content_type_details = openapi_client.models.audio_content_type_assigned_targeting_option_details.AudioContentTypeAssignedTargetingOptionDetails(
                            audio_content_type = 'AUDIO_CONTENT_TYPE_UNSPECIFIED', ), 
                        authorized_seller_status_details = openapi_client.models.authorized_seller_status_assigned_targeting_option_details.AuthorizedSellerStatusAssignedTargetingOptionDetails(
                            authorized_seller_status = 'AUTHORIZED_SELLER_STATUS_UNSPECIFIED', 
                            targeting_option_id = '', ), 
                        browser_details = openapi_client.models.browser_assigned_targeting_option_details.BrowserAssignedTargetingOptionDetails(
                            display_name = '', 
                            negative = True, 
                            targeting_option_id = '', ), 
                        business_chain_details = openapi_client.models.business_chain_assigned_targeting_option_details.BusinessChainAssignedTargetingOptionDetails(
                            display_name = '', 
                            proximity_radius_amount = 1.337, 
                            proximity_radius_unit = 'DISTANCE_UNIT_UNSPECIFIED', 
                            targeting_option_id = '', ), 
                        carrier_and_isp_details = openapi_client.models.carrier_and_isp_assigned_targeting_option_details.CarrierAndIspAssignedTargetingOptionDetails(
                            display_name = '', 
                            negative = True, 
                            targeting_option_id = '', ), 
                        category_details = openapi_client.models.category_assigned_targeting_option_details.CategoryAssignedTargetingOptionDetails(
                            display_name = '', 
                            negative = True, 
                            targeting_option_id = '', ), 
                        channel_details = openapi_client.models.channel_assigned_targeting_option_details.ChannelAssignedTargetingOptionDetails(
                            channel_id = '', 
                            negative = True, ), 
                        content_duration_details = openapi_client.models.content_duration_assigned_targeting_option_details.ContentDurationAssignedTargetingOptionDetails(
                            content_duration = 'CONTENT_DURATION_UNSPECIFIED', 
                            targeting_option_id = '', ), 
                        content_genre_details = openapi_client.models.content_genre_assigned_targeting_option_details.ContentGenreAssignedTargetingOptionDetails(
                            display_name = '', 
                            negative = True, 
                            targeting_option_id = '', ), 
                        content_instream_position_details = openapi_client.models.content_instream_position_assigned_targeting_option_details.ContentInstreamPositionAssignedTargetingOptionDetails(
                            ad_type = 'AD_TYPE_UNSPECIFIED', 
                            content_instream_position = 'CONTENT_INSTREAM_POSITION_UNSPECIFIED', ), 
                        content_outstream_position_details = openapi_client.models.content_outstream_position_assigned_targeting_option_details.ContentOutstreamPositionAssignedTargetingOptionDetails(
                            ad_type = 'AD_TYPE_UNSPECIFIED', 
                            content_outstream_position = 'CONTENT_OUTSTREAM_POSITION_UNSPECIFIED', ), 
                        content_stream_type_details = openapi_client.models.content_stream_type_assigned_targeting_option_details.ContentStreamTypeAssignedTargetingOptionDetails(
                            content_stream_type = 'CONTENT_STREAM_TYPE_UNSPECIFIED', 
                            targeting_option_id = '', ), 
                        day_and_time_details = openapi_client.models.day_and_time_assigned_targeting_option_details.DayAndTimeAssignedTargetingOptionDetails(
                            day_of_week = 'DAY_OF_WEEK_UNSPECIFIED', 
                            end_hour = 56, 
                            start_hour = 56, 
                            time_zone_resolution = 'TIME_ZONE_RESOLUTION_UNSPECIFIED', ), 
                        device_make_model_details = openapi_client.models.device_make_model_assigned_targeting_option_details.DeviceMakeModelAssignedTargetingOptionDetails(
                            display_name = '', 
                            negative = True, 
                            targeting_option_id = '', ), 
                        device_type_details = openapi_client.models.device_type_assigned_targeting_option_details.DeviceTypeAssignedTargetingOptionDetails(
                            device_type = 'DEVICE_TYPE_UNSPECIFIED', 
                            youtube_and_partners_bid_multiplier = 1.337, ), 
                        digital_content_label_exclusion_details = openapi_client.models.digital_content_label_assigned_targeting_option_details.DigitalContentLabelAssignedTargetingOptionDetails(
                            excluded_content_rating_tier = 'CONTENT_RATING_TIER_UNSPECIFIED', ), 
                        environment_details = openapi_client.models.environment_assigned_targeting_option_details.EnvironmentAssignedTargetingOptionDetails(
                            environment = 'ENVIRONMENT_UNSPECIFIED', ), 
                        exchange_details = openapi_client.models.exchange_assigned_targeting_option_details.ExchangeAssignedTargetingOptionDetails(
                            exchange = 'EXCHANGE_UNSPECIFIED', ), 
                        gender_details = openapi_client.models.gender_assigned_targeting_option_details.GenderAssignedTargetingOptionDetails(
                            gender = 'GENDER_UNSPECIFIED', ), 
                        geo_region_details = openapi_client.models.geo_region_assigned_targeting_option_details.GeoRegionAssignedTargetingOptionDetails(
                            display_name = '', 
                            geo_region_type = 'GEO_REGION_TYPE_UNKNOWN', 
                            negative = True, 
                            targeting_option_id = '', ), 
                        household_income_details = openapi_client.models.household_income_assigned_targeting_option_details.HouseholdIncomeAssignedTargetingOptionDetails(
                            household_income = 'HOUSEHOLD_INCOME_UNSPECIFIED', ), 
                        inheritance = 'INHERITANCE_UNSPECIFIED', 
                        inventory_source_details = openapi_client.models.inventory_source_assigned_targeting_option_details.InventorySourceAssignedTargetingOptionDetails(
                            inventory_source_id = '', ), 
                        inventory_source_group_details = openapi_client.models.inventory_source_group_assigned_targeting_option_details.InventorySourceGroupAssignedTargetingOptionDetails(
                            inventory_source_group_id = '', ), 
                        keyword_details = openapi_client.models.keyword_assigned_targeting_option_details.KeywordAssignedTargetingOptionDetails(
                            keyword = '', 
                            negative = True, ), 
                        language_details = openapi_client.models.language_assigned_targeting_option_details.LanguageAssignedTargetingOptionDetails(
                            display_name = '', 
                            negative = True, 
                            targeting_option_id = '', ), 
                        name = '', 
                        native_content_position_details = openapi_client.models.native_content_position_assigned_targeting_option_details.NativeContentPositionAssignedTargetingOptionDetails(
                            content_position = 'NATIVE_CONTENT_POSITION_UNSPECIFIED', ), 
                        negative_keyword_list_details = openapi_client.models.negative_keyword_list_assigned_targeting_option_details.NegativeKeywordListAssignedTargetingOptionDetails(
                            negative_keyword_list_id = '', ), 
                        omid_details = openapi_client.models.omid_assigned_targeting_option_details.OmidAssignedTargetingOptionDetails(
                            omid = 'OMID_UNSPECIFIED', ), 
                        on_screen_position_details = openapi_client.models.on_screen_position_assigned_targeting_option_details.OnScreenPositionAssignedTargetingOptionDetails(
                            ad_type = 'AD_TYPE_UNSPECIFIED', 
                            on_screen_position = 'ON_SCREEN_POSITION_UNSPECIFIED', 
                            targeting_option_id = '', ), 
                        operating_system_details = openapi_client.models.operating_system_assigned_targeting_option_details.OperatingSystemAssignedTargetingOptionDetails(
                            display_name = '', 
                            negative = True, 
                            targeting_option_id = '', ), 
                        parental_status_details = openapi_client.models.parental_status_assigned_targeting_option_details.ParentalStatusAssignedTargetingOptionDetails(
                            parental_status = 'PARENTAL_STATUS_UNSPECIFIED', ), 
                        poi_details = openapi_client.models.poi_assigned_targeting_option_details.PoiAssignedTargetingOptionDetails(
                            display_name = '', 
                            latitude = 1.337, 
                            longitude = 1.337, 
                            proximity_radius_amount = 1.337, 
                            proximity_radius_unit = 'DISTANCE_UNIT_UNSPECIFIED', 
                            targeting_option_id = '', ), 
                        proximity_location_list_details = openapi_client.models.proximity_location_list_assigned_targeting_option_details.ProximityLocationListAssignedTargetingOptionDetails(
                            proximity_location_list_id = '', 
                            proximity_radius = 1.337, 
                            proximity_radius_unit = 'PROXIMITY_RADIUS_UNIT_UNSPECIFIED', ), 
                        regional_location_list_details = openapi_client.models.regional_location_list_assigned_targeting_option_details.RegionalLocationListAssignedTargetingOptionDetails(
                            negative = True, 
                            regional_location_list_id = '', ), 
                        sensitive_category_exclusion_details = openapi_client.models.sensitive_category_assigned_targeting_option_details.SensitiveCategoryAssignedTargetingOptionDetails(
                            excluded_sensitive_category = 'SENSITIVE_CATEGORY_UNSPECIFIED', ), 
                        session_position_details = openapi_client.models.session_position_assigned_targeting_option_details.SessionPositionAssignedTargetingOptionDetails(
                            session_position = 'SESSION_POSITION_UNSPECIFIED', ), 
                        sub_exchange_details = openapi_client.models.sub_exchange_assigned_targeting_option_details.SubExchangeAssignedTargetingOptionDetails(
                            targeting_option_id = '', ), 
                        targeting_type = 'TARGETING_TYPE_UNSPECIFIED', 
                        third_party_verifier_details = openapi_client.models.third_party_verifier_assigned_targeting_option_details.ThirdPartyVerifierAssignedTargetingOptionDetails(
                            adloox = openapi_client.models.adloox.Adloox(
                                excluded_adloox_categories = [
                                    'ADLOOX_UNSPECIFIED'
                                    ], ), 
                            double_verify = openapi_client.models.double_verify.DoubleVerify(
                                app_star_rating = openapi_client.models.double_verify_app_star_rating.DoubleVerifyAppStarRating(
                                    avoid_insufficient_star_rating = True, 
                                    avoided_star_rating = 'APP_STAR_RATE_UNSPECIFIED', ), 
                                avoided_age_ratings = [
                                    'AGE_RATING_UNSPECIFIED'
                                    ], 
                                brand_safety_categories = openapi_client.models.double_verify_brand_safety_categories.DoubleVerifyBrandSafetyCategories(
                                    avoid_unknown_brand_safety_category = True, 
                                    avoided_high_severity_categories = [
                                        'HIGHER_SEVERITY_UNSPECIFIED'
                                        ], 
                                    avoided_medium_severity_categories = [
                                        'MEDIUM_SEVERITY_UNSPECIFIED'
                                        ], ), 
                                custom_segment_id = '', 
                                display_viewability = openapi_client.models.double_verify_display_viewability.DoubleVerifyDisplayViewability(
                                    iab = 'IAB_VIEWED_RATE_UNSPECIFIED', 
                                    viewable_during = 'AVERAGE_VIEW_DURATION_UNSPECIFIED', ), 
                                fraud_invalid_traffic = openapi_client.models.double_verify_fraud_invalid_traffic.DoubleVerifyFraudInvalidTraffic(
                                    avoid_insufficient_option = True, 
                                    avoided_fraud_option = 'FRAUD_UNSPECIFIED', ), 
                                video_viewability = openapi_client.models.double_verify_video_viewability.DoubleVerifyVideoViewability(
                                    player_impression_rate = 'PLAYER_SIZE_400X300_UNSPECIFIED', 
                                    video_iab = 'VIDEO_IAB_UNSPECIFIED', 
                                    video_viewable_rate = 'VIDEO_VIEWABLE_RATE_UNSPECIFIED', ), ), 
                            integral_ad_science = openapi_client.models.integral_ad_science.IntegralAdScience(
                                custom_segment_id = [
                                    ''
                                    ], 
                                exclude_unrateable = True, 
                                excluded_ad_fraud_risk = 'SUSPICIOUS_ACTIVITY_UNSPECIFIED', 
                                excluded_adult_risk = 'ADULT_UNSPECIFIED', 
                                excluded_alcohol_risk = 'ALCOHOL_UNSPECIFIED', 
                                excluded_drugs_risk = 'DRUGS_UNSPECIFIED', 
                                excluded_gambling_risk = 'GAMBLING_UNSPECIFIED', 
                                excluded_hate_speech_risk = 'HATE_SPEECH_UNSPECIFIED', 
                                excluded_illegal_downloads_risk = 'ILLEGAL_DOWNLOADS_UNSPECIFIED', 
                                excluded_offensive_language_risk = 'OFFENSIVE_LANGUAGE_UNSPECIFIED', 
                                excluded_violence_risk = 'VIOLENCE_UNSPECIFIED', 
                                traq_score_option = 'TRAQ_UNSPECIFIED', ), ), 
                        url_details = openapi_client.models.url_assigned_targeting_option_details.UrlAssignedTargetingOptionDetails(
                            negative = True, 
                            url = '', ), 
                        user_rewarded_content_details = openapi_client.models.user_rewarded_content_assigned_targeting_option_details.UserRewardedContentAssignedTargetingOptionDetails(
                            targeting_option_id = '', 
                            user_rewarded_content = 'USER_REWARDED_CONTENT_UNSPECIFIED', ), 
                        video_player_size_details = openapi_client.models.video_player_size_assigned_targeting_option_details.VideoPlayerSizeAssignedTargetingOptionDetails(
                            video_player_size = 'VIDEO_PLAYER_SIZE_UNSPECIFIED', ), 
                        viewability_details = openapi_client.models.viewability_assigned_targeting_option_details.ViewabilityAssignedTargetingOptionDetails(
                            viewability = 'VIEWABILITY_UNSPECIFIED', ), 
                        youtube_channel_details = openapi_client.models.youtube_channel_assigned_targeting_option_details.YoutubeChannelAssignedTargetingOptionDetails(
                            channel_id = '', 
                            negative = True, ), 
                        youtube_video_details = openapi_client.models.youtube_video_assigned_targeting_option_details.YoutubeVideoAssignedTargetingOptionDetails(
                            negative = True, 
                            video_id = '', ), )
                    ],
                next_page_token = ''
            )
        else:
            return ListPartnerAssignedTargetingOptionsResponse(
        )
        """

    def testListPartnerAssignedTargetingOptionsResponse(self):
        """Test ListPartnerAssignedTargetingOptionsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

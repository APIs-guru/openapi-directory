# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_creatives_response import ListCreativesResponse

class TestListCreativesResponse(unittest.TestCase):
    """ListCreativesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListCreativesResponse:
        """Test ListCreativesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListCreativesResponse`
        """
        model = ListCreativesResponse()
        if include_optional:
            return ListCreativesResponse(
                creatives = [
                    openapi_client.models.creative.Creative(
                        additional_dimensions = [
                            openapi_client.models.dimensions.Dimensions(
                                height_pixels = 56, 
                                width_pixels = 56, )
                            ], 
                        advertiser_id = '', 
                        appended_tag = '', 
                        assets = [
                            openapi_client.models.asset_association.AssetAssociation(
                                asset = openapi_client.models.asset.Asset(
                                    content = '', 
                                    media_id = '', ), 
                                role = 'ASSET_ROLE_UNSPECIFIED', )
                            ], 
                        cm_placement_id = '', 
                        cm_tracking_ad = openapi_client.models.cm_tracking_ad.CmTrackingAd(
                            cm_ad_id = '', 
                            cm_creative_id = '', 
                            cm_placement_id = '', ), 
                        companion_creative_ids = [
                            ''
                            ], 
                        counter_events = [
                            openapi_client.models.counter_event.CounterEvent(
                                name = '', 
                                reporting_name = '', )
                            ], 
                        create_time = '', 
                        creative_attributes = [
                            'CREATIVE_ATTRIBUTE_UNSPECIFIED'
                            ], 
                        creative_id = '', 
                        creative_type = 'CREATIVE_TYPE_UNSPECIFIED', 
                        dimensions = openapi_client.models.dimensions.Dimensions(
                            height_pixels = 56, 
                            width_pixels = 56, ), 
                        display_name = '', 
                        dynamic = True, 
                        entity_status = 'ENTITY_STATUS_UNSPECIFIED', 
                        exit_events = [
                            openapi_client.models.exit_event.ExitEvent(
                                name = '', 
                                reporting_name = '', 
                                type = 'EXIT_EVENT_TYPE_UNSPECIFIED', 
                                url = '', )
                            ], 
                        expand_on_hover = True, 
                        expanding_direction = 'EXPANDING_DIRECTION_UNSPECIFIED', 
                        hosting_source = 'HOSTING_SOURCE_UNSPECIFIED', 
                        html5_video = True, 
                        ias_campaign_monitoring = True, 
                        integration_code = '', 
                        js_tracker_url = '', 
                        line_item_ids = [
                            ''
                            ], 
                        media_duration = '', 
                        mp3_audio = True, 
                        name = '', 
                        notes = '', 
                        oba_icon = openapi_client.models.oba_icon.ObaIcon(
                            click_tracking_url = '', 
                            landing_page_url = '', 
                            position = 'OBA_ICON_POSITION_UNSPECIFIED', 
                            program = '', 
                            resource_mime_type = '', 
                            resource_url = '', 
                            view_tracking_url = '', ), 
                        ogg_audio = True, 
                        progress_offset = openapi_client.models.audio_video_offset.AudioVideoOffset(
                            percentage = '', 
                            seconds = '', ), 
                        require_html5 = True, 
                        require_mraid = True, 
                        require_ping_for_attribution = True, 
                        review_status = openapi_client.models.review_status_info.ReviewStatusInfo(
                            approval_status = 'APPROVAL_STATUS_UNSPECIFIED', 
                            content_and_policy_review_status = 'REVIEW_STATUS_UNSPECIFIED', 
                            creative_and_landing_page_review_status = 'REVIEW_STATUS_UNSPECIFIED', 
                            exchange_review_statuses = [
                                openapi_client.models.exchange_review_status.ExchangeReviewStatus(
                                    exchange = 'EXCHANGE_UNSPECIFIED', 
                                    status = 'REVIEW_STATUS_UNSPECIFIED', )
                                ], 
                            publisher_review_statuses = [
                                openapi_client.models.publisher_review_status.PublisherReviewStatus(
                                    publisher_name = '', 
                                    status = 'REVIEW_STATUS_UNSPECIFIED', )
                                ], ), 
                        skip_offset = openapi_client.models.audio_video_offset.AudioVideoOffset(
                            percentage = '', 
                            seconds = '', ), 
                        skippable = True, 
                        third_party_tag = '', 
                        third_party_urls = [
                            openapi_client.models.third_party_url.ThirdPartyUrl(
                                type = 'THIRD_PARTY_URL_TYPE_UNSPECIFIED', 
                                url = '', )
                            ], 
                        timer_events = [
                            openapi_client.models.timer_event.TimerEvent(
                                name = '', 
                                reporting_name = '', )
                            ], 
                        tracker_urls = [
                            ''
                            ], 
                        transcodes = [
                            openapi_client.models.transcode.Transcode(
                                audio_bit_rate_kbps = '', 
                                audio_sample_rate_hz = '', 
                                bit_rate_kbps = '', 
                                file_size_bytes = '', 
                                frame_rate = 1.337, 
                                mime_type = '', 
                                name = '', 
                                transcoded = True, )
                            ], 
                        universal_ad_id = openapi_client.models.universal_ad_id.UniversalAdId(
                            id = '', 
                            registry = 'UNIVERSAL_AD_REGISTRY_UNSPECIFIED', ), 
                        update_time = '', 
                        vast_tag_url = '', 
                        vpaid = True, )
                    ],
                next_page_token = ''
            )
        else:
            return ListCreativesResponse(
        )
        """

    def testListCreativesResponse(self):
        """Test ListCreativesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

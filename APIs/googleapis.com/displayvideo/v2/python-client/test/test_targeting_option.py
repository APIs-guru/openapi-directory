# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.targeting_option import TargetingOption

class TestTargetingOption(unittest.TestCase):
    """TargetingOption unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TargetingOption:
        """Test TargetingOption
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TargetingOption`
        """
        model = TargetingOption()
        if include_optional:
            return TargetingOption(
                age_range_details = openapi_client.models.age_range_targeting_option_details.AgeRangeTargetingOptionDetails(
                    age_range = 'AGE_RANGE_UNSPECIFIED', ),
                app_category_details = openapi_client.models.app_category_targeting_option_details.AppCategoryTargetingOptionDetails(
                    display_name = '', ),
                audio_content_type_details = openapi_client.models.audio_content_type_targeting_option_details.AudioContentTypeTargetingOptionDetails(
                    audio_content_type = 'AUDIO_CONTENT_TYPE_UNSPECIFIED', ),
                authorized_seller_status_details = openapi_client.models.authorized_seller_status_targeting_option_details.AuthorizedSellerStatusTargetingOptionDetails(
                    authorized_seller_status = 'AUTHORIZED_SELLER_STATUS_UNSPECIFIED', ),
                browser_details = openapi_client.models.browser_targeting_option_details.BrowserTargetingOptionDetails(
                    display_name = '', ),
                business_chain_details = openapi_client.models.business_chain_targeting_option_details.BusinessChainTargetingOptionDetails(
                    business_chain = '', 
                    geo_region = '', 
                    geo_region_type = 'GEO_REGION_TYPE_UNKNOWN', ),
                carrier_and_isp_details = openapi_client.models.carrier_and_isp_targeting_option_details.CarrierAndIspTargetingOptionDetails(
                    display_name = '', 
                    type = 'CARRIER_AND_ISP_TYPE_UNSPECIFIED', ),
                category_details = openapi_client.models.category_targeting_option_details.CategoryTargetingOptionDetails(
                    display_name = '', ),
                content_duration_details = openapi_client.models.content_duration_targeting_option_details.ContentDurationTargetingOptionDetails(
                    content_duration = 'CONTENT_DURATION_UNSPECIFIED', ),
                content_genre_details = openapi_client.models.content_genre_targeting_option_details.ContentGenreTargetingOptionDetails(
                    display_name = '', ),
                content_instream_position_details = openapi_client.models.content_instream_position_targeting_option_details.ContentInstreamPositionTargetingOptionDetails(
                    content_instream_position = 'CONTENT_INSTREAM_POSITION_UNSPECIFIED', ),
                content_outstream_position_details = openapi_client.models.content_outstream_position_targeting_option_details.ContentOutstreamPositionTargetingOptionDetails(
                    content_outstream_position = 'CONTENT_OUTSTREAM_POSITION_UNSPECIFIED', ),
                content_stream_type_details = openapi_client.models.content_stream_type_targeting_option_details.ContentStreamTypeTargetingOptionDetails(
                    content_stream_type = 'CONTENT_STREAM_TYPE_UNSPECIFIED', ),
                device_make_model_details = openapi_client.models.device_make_model_targeting_option_details.DeviceMakeModelTargetingOptionDetails(
                    display_name = '', ),
                device_type_details = openapi_client.models.device_type_targeting_option_details.DeviceTypeTargetingOptionDetails(
                    device_type = 'DEVICE_TYPE_UNSPECIFIED', ),
                digital_content_label_details = openapi_client.models.digital_content_label_targeting_option_details.DigitalContentLabelTargetingOptionDetails(
                    content_rating_tier = 'CONTENT_RATING_TIER_UNSPECIFIED', ),
                environment_details = openapi_client.models.environment_targeting_option_details.EnvironmentTargetingOptionDetails(
                    environment = 'ENVIRONMENT_UNSPECIFIED', ),
                exchange_details = openapi_client.models.exchange_targeting_option_details.ExchangeTargetingOptionDetails(
                    exchange = 'EXCHANGE_UNSPECIFIED', ),
                gender_details = openapi_client.models.gender_targeting_option_details.GenderTargetingOptionDetails(
                    gender = 'GENDER_UNSPECIFIED', ),
                geo_region_details = openapi_client.models.geo_region_targeting_option_details.GeoRegionTargetingOptionDetails(
                    display_name = '', 
                    geo_region_type = 'GEO_REGION_TYPE_UNKNOWN', ),
                household_income_details = openapi_client.models.household_income_targeting_option_details.HouseholdIncomeTargetingOptionDetails(
                    household_income = 'HOUSEHOLD_INCOME_UNSPECIFIED', ),
                language_details = openapi_client.models.language_targeting_option_details.LanguageTargetingOptionDetails(
                    display_name = '', ),
                name = '',
                native_content_position_details = openapi_client.models.native_content_position_targeting_option_details.NativeContentPositionTargetingOptionDetails(
                    content_position = 'NATIVE_CONTENT_POSITION_UNSPECIFIED', ),
                omid_details = openapi_client.models.omid_targeting_option_details.OmidTargetingOptionDetails(
                    omid = 'OMID_UNSPECIFIED', ),
                on_screen_position_details = openapi_client.models.on_screen_position_targeting_option_details.OnScreenPositionTargetingOptionDetails(
                    on_screen_position = 'ON_SCREEN_POSITION_UNSPECIFIED', ),
                operating_system_details = openapi_client.models.operating_system_targeting_option_details.OperatingSystemTargetingOptionDetails(
                    display_name = '', ),
                parental_status_details = openapi_client.models.parental_status_targeting_option_details.ParentalStatusTargetingOptionDetails(
                    parental_status = 'PARENTAL_STATUS_UNSPECIFIED', ),
                poi_details = openapi_client.models.poi_targeting_option_details.PoiTargetingOptionDetails(
                    display_name = '', 
                    latitude = 1.337, 
                    longitude = 1.337, ),
                sensitive_category_details = openapi_client.models.sensitive_category_targeting_option_details.SensitiveCategoryTargetingOptionDetails(
                    sensitive_category = 'SENSITIVE_CATEGORY_UNSPECIFIED', ),
                sub_exchange_details = openapi_client.models.sub_exchange_targeting_option_details.SubExchangeTargetingOptionDetails(
                    display_name = '', ),
                targeting_option_id = '',
                targeting_type = 'TARGETING_TYPE_UNSPECIFIED',
                user_rewarded_content_details = openapi_client.models.user_rewarded_content_targeting_option_details.UserRewardedContentTargetingOptionDetails(
                    user_rewarded_content = 'USER_REWARDED_CONTENT_UNSPECIFIED', ),
                video_player_size_details = openapi_client.models.video_player_size_targeting_option_details.VideoPlayerSizeTargetingOptionDetails(
                    video_player_size = 'VIDEO_PLAYER_SIZE_UNSPECIFIED', ),
                viewability_details = openapi_client.models.viewability_targeting_option_details.ViewabilityTargetingOptionDetails(
                    viewability = 'VIEWABILITY_UNSPECIFIED', )
            )
        else:
            return TargetingOption(
        )
        """

    def testTargetingOption(self):
        """Test TargetingOption"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

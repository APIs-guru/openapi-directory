# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.youtube_ad_group_ad import YoutubeAdGroupAd

class TestYoutubeAdGroupAd(unittest.TestCase):
    """YoutubeAdGroupAd unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> YoutubeAdGroupAd:
        """Test YoutubeAdGroupAd
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `YoutubeAdGroupAd`
        """
        model = YoutubeAdGroupAd()
        if include_optional:
            return YoutubeAdGroupAd(
                ad_group_ad_id = '',
                ad_group_id = '',
                ad_urls = [
                    openapi_client.models.ad_url.AdUrl(
                        type = 'AD_URL_TYPE_UNSPECIFIED', 
                        url = '', )
                    ],
                advertiser_id = '',
                audio_ad = openapi_client.models.audio_ad.AudioAd(
                    display_url = '', 
                    final_url = '', 
                    tracking_url = '', 
                    video = openapi_client.models.youtube_video_details.YoutubeVideoDetails(
                        id = '', 
                        unavailable_reason = 'VIDEO_UNAVAILABLE_REASON_UNSPECIFIED', ), ),
                bumper_ad = openapi_client.models.bumper_ad.BumperAd(
                    common_in_stream_attribute = openapi_client.models.common_in_stream_attribute.CommonInStreamAttribute(
                        action_button_label = '', 
                        action_headline = '', 
                        companion_banner = openapi_client.models.image_asset.ImageAsset(
                            file_size = '', 
                            full_size = openapi_client.models.dimensions.Dimensions(
                                height_pixels = 56, 
                                width_pixels = 56, ), 
                            mime_type = '', ), 
                        display_url = '', 
                        final_url = '', 
                        tracking_url = '', 
                        video = openapi_client.models.youtube_video_details.YoutubeVideoDetails(
                            id = '', 
                            unavailable_reason = 'VIDEO_UNAVAILABLE_REASON_UNSPECIFIED', ), ), ),
                display_name = '',
                display_video_source_ad = openapi_client.models.display_video_source_ad.DisplayVideoSourceAd(
                    creative_id = '', ),
                entity_status = 'ENTITY_STATUS_UNSPECIFIED',
                in_stream_ad = openapi_client.models.in_stream_ad.InStreamAd(
                    common_in_stream_attribute = openapi_client.models.common_in_stream_attribute.CommonInStreamAttribute(
                        action_button_label = '', 
                        action_headline = '', 
                        companion_banner = openapi_client.models.image_asset.ImageAsset(
                            file_size = '', 
                            full_size = openapi_client.models.dimensions.Dimensions(
                                height_pixels = 56, 
                                width_pixels = 56, ), 
                            mime_type = '', ), 
                        display_url = '', 
                        final_url = '', 
                        tracking_url = '', 
                        video = openapi_client.models.youtube_video_details.YoutubeVideoDetails(
                            id = '', 
                            unavailable_reason = 'VIDEO_UNAVAILABLE_REASON_UNSPECIFIED', ), ), 
                    custom_parameters = {
                        'key' : ''
                        }, ),
                masthead_ad = openapi_client.models.masthead_ad.MastheadAd(
                    autoplay_video_duration = '', 
                    autoplay_video_start_millisecond = '', 
                    call_to_action_button_label = '', 
                    call_to_action_final_url = '', 
                    call_to_action_tracking_url = '', 
                    companion_youtube_videos = [
                        openapi_client.models.youtube_video_details.YoutubeVideoDetails(
                            id = '', 
                            unavailable_reason = 'VIDEO_UNAVAILABLE_REASON_UNSPECIFIED', )
                        ], 
                    description = '', 
                    headline = '', 
                    show_channel_art = True, 
                    video = openapi_client.models.youtube_video_details.YoutubeVideoDetails(
                        id = '', 
                        unavailable_reason = 'VIDEO_UNAVAILABLE_REASON_UNSPECIFIED', ), 
                    video_aspect_ratio = 'VIDEO_ASPECT_RATIO_UNSPECIFIED', ),
                name = '',
                non_skippable_ad = openapi_client.models.non_skippable_ad.NonSkippableAd(
                    common_in_stream_attribute = openapi_client.models.common_in_stream_attribute.CommonInStreamAttribute(
                        action_button_label = '', 
                        action_headline = '', 
                        companion_banner = openapi_client.models.image_asset.ImageAsset(
                            file_size = '', 
                            full_size = openapi_client.models.dimensions.Dimensions(
                                height_pixels = 56, 
                                width_pixels = 56, ), 
                            mime_type = '', ), 
                        display_url = '', 
                        final_url = '', 
                        tracking_url = '', 
                        video = openapi_client.models.youtube_video_details.YoutubeVideoDetails(
                            id = '', 
                            unavailable_reason = 'VIDEO_UNAVAILABLE_REASON_UNSPECIFIED', ), ), 
                    custom_parameters = {
                        'key' : ''
                        }, ),
                video_discover_ad = openapi_client.models.video_discovery_ad.VideoDiscoveryAd(
                    description1 = '', 
                    description2 = '', 
                    headline = '', 
                    thumbnail = 'THUMBNAIL_UNSPECIFIED', 
                    video = openapi_client.models.youtube_video_details.YoutubeVideoDetails(
                        id = '', 
                        unavailable_reason = 'VIDEO_UNAVAILABLE_REASON_UNSPECIFIED', ), ),
                video_performance_ad = openapi_client.models.video_performance_ad.VideoPerformanceAd(
                    action_button_labels = [
                        ''
                        ], 
                    companion_banners = [
                        openapi_client.models.image_asset.ImageAsset(
                            file_size = '', 
                            full_size = openapi_client.models.dimensions.Dimensions(
                                height_pixels = 56, 
                                width_pixels = 56, ), 
                            mime_type = '', )
                        ], 
                    custom_parameters = {
                        'key' : ''
                        }, 
                    descriptions = [
                        ''
                        ], 
                    display_url_breadcrumb1 = '', 
                    display_url_breadcrumb2 = '', 
                    domain = '', 
                    final_url = '', 
                    headlines = [
                        ''
                        ], 
                    long_headlines = [
                        ''
                        ], 
                    tracking_url = '', 
                    videos = [
                        openapi_client.models.youtube_video_details.YoutubeVideoDetails(
                            id = '', 
                            unavailable_reason = 'VIDEO_UNAVAILABLE_REASON_UNSPECIFIED', )
                        ], )
            )
        else:
            return YoutubeAdGroupAd(
        )
        """

    def testYoutubeAdGroupAd(self):
        """Test YoutubeAdGroupAd"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

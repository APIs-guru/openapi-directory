# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.custom_bidding_algorithm import CustomBiddingAlgorithm

class TestCustomBiddingAlgorithm(unittest.TestCase):
    """CustomBiddingAlgorithm unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CustomBiddingAlgorithm:
        """Test CustomBiddingAlgorithm
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CustomBiddingAlgorithm`
        """
        model = CustomBiddingAlgorithm()
        if include_optional:
            return CustomBiddingAlgorithm(
                advertiser_id = '',
                custom_bidding_algorithm_id = '',
                custom_bidding_algorithm_type = 'CUSTOM_BIDDING_ALGORITHM_TYPE_UNSPECIFIED',
                display_name = '',
                entity_status = 'ENTITY_STATUS_UNSPECIFIED',
                model_details = [
                    openapi_client.models.custom_bidding_model_details.CustomBiddingModelDetails(
                        advertiser_id = '', 
                        readiness_state = 'READINESS_STATE_UNSPECIFIED', 
                        suspension_state = 'SUSPENSION_STATE_UNSPECIFIED', )
                    ],
                name = '',
                partner_id = '',
                shared_advertiser_ids = [
                    ''
                    ]
            )
        else:
            return CustomBiddingAlgorithm(
        )
        """

    def testCustomBiddingAlgorithm(self):
        """Test CustomBiddingAlgorithm"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

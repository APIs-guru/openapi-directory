# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.double_verify_app_star_rating import DoubleVerifyAppStarRating
from openapi_client.models.double_verify_brand_safety_categories import DoubleVerifyBrandSafetyCategories
from openapi_client.models.double_verify_display_viewability import DoubleVerifyDisplayViewability
from openapi_client.models.double_verify_fraud_invalid_traffic import DoubleVerifyFraudInvalidTraffic
from openapi_client.models.double_verify_video_viewability import DoubleVerifyVideoViewability
from typing import Optional, Set
from typing_extensions import Self

class DoubleVerify(BaseModel):
    """
    Details of DoubleVerify settings.
    """ # noqa: E501
    app_star_rating: Optional[DoubleVerifyAppStarRating] = Field(default=None, alias="appStarRating")
    avoided_age_ratings: Optional[List[StrictStr]] = Field(default=None, description="Avoid bidding on apps with the age rating.", alias="avoidedAgeRatings")
    brand_safety_categories: Optional[DoubleVerifyBrandSafetyCategories] = Field(default=None, alias="brandSafetyCategories")
    custom_segment_id: Optional[StrictStr] = Field(default=None, description="The custom segment ID provided by DoubleVerify. The ID must start with \"51\" and consist of eight digits. Custom segment ID cannot be specified along with any of the following fields: * brand_safety_categories * avoided_age_ratings * app_star_rating * fraud_invalid_traffic", alias="customSegmentId")
    display_viewability: Optional[DoubleVerifyDisplayViewability] = Field(default=None, alias="displayViewability")
    fraud_invalid_traffic: Optional[DoubleVerifyFraudInvalidTraffic] = Field(default=None, alias="fraudInvalidTraffic")
    video_viewability: Optional[DoubleVerifyVideoViewability] = Field(default=None, alias="videoViewability")
    __properties: ClassVar[List[str]] = ["appStarRating", "avoidedAgeRatings", "brandSafetyCategories", "customSegmentId", "displayViewability", "fraudInvalidTraffic", "videoViewability"]

    @field_validator('avoided_age_ratings')
    def avoided_age_ratings_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['AGE_RATING_UNSPECIFIED', 'APP_AGE_RATE_UNKNOWN', 'APP_AGE_RATE_4_PLUS', 'APP_AGE_RATE_9_PLUS', 'APP_AGE_RATE_12_PLUS', 'APP_AGE_RATE_17_PLUS', 'APP_AGE_RATE_18_PLUS']):
                raise ValueError("each list item must be one of ('AGE_RATING_UNSPECIFIED', 'APP_AGE_RATE_UNKNOWN', 'APP_AGE_RATE_4_PLUS', 'APP_AGE_RATE_9_PLUS', 'APP_AGE_RATE_12_PLUS', 'APP_AGE_RATE_17_PLUS', 'APP_AGE_RATE_18_PLUS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DoubleVerify from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_star_rating
        if self.app_star_rating:
            _dict['appStarRating'] = self.app_star_rating.to_dict()
        # override the default output from pydantic by calling `to_dict()` of brand_safety_categories
        if self.brand_safety_categories:
            _dict['brandSafetyCategories'] = self.brand_safety_categories.to_dict()
        # override the default output from pydantic by calling `to_dict()` of display_viewability
        if self.display_viewability:
            _dict['displayViewability'] = self.display_viewability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fraud_invalid_traffic
        if self.fraud_invalid_traffic:
            _dict['fraudInvalidTraffic'] = self.fraud_invalid_traffic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_viewability
        if self.video_viewability:
            _dict['videoViewability'] = self.video_viewability.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DoubleVerify from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appStarRating": DoubleVerifyAppStarRating.from_dict(obj["appStarRating"]) if obj.get("appStarRating") is not None else None,
            "avoidedAgeRatings": obj.get("avoidedAgeRatings"),
            "brandSafetyCategories": DoubleVerifyBrandSafetyCategories.from_dict(obj["brandSafetyCategories"]) if obj.get("brandSafetyCategories") is not None else None,
            "customSegmentId": obj.get("customSegmentId"),
            "displayViewability": DoubleVerifyDisplayViewability.from_dict(obj["displayViewability"]) if obj.get("displayViewability") is not None else None,
            "fraudInvalidTraffic": DoubleVerifyFraudInvalidTraffic.from_dict(obj["fraudInvalidTraffic"]) if obj.get("fraudInvalidTraffic") is not None else None,
            "videoViewability": DoubleVerifyVideoViewability.from_dict(obj["videoViewability"]) if obj.get("videoViewability") is not None else None
        })
        return _obj



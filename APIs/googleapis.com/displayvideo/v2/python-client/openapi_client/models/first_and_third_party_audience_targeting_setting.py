# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FirstAndThirdPartyAudienceTargetingSetting(BaseModel):
    """
    Details of first and third party audience targeting setting.
    """ # noqa: E501
    first_and_third_party_audience_id: Optional[StrictStr] = Field(default=None, description="Required. First and third party audience id of the first and third party audience targeting setting. This id is first_and_third_party_audience_id.", alias="firstAndThirdPartyAudienceId")
    recency: Optional[StrictStr] = Field(default=None, description="The recency of the first and third party audience targeting setting. Only applicable to first party audiences, otherwise will be ignored. For more info, refer to https://support.google.com/displayvideo/answer/2949947#recency When unspecified, no recency limit will be used.")
    __properties: ClassVar[List[str]] = ["firstAndThirdPartyAudienceId", "recency"]

    @field_validator('recency')
    def recency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RECENCY_NO_LIMIT', 'RECENCY_1_MINUTE', 'RECENCY_5_MINUTES', 'RECENCY_10_MINUTES', 'RECENCY_15_MINUTES', 'RECENCY_30_MINUTES', 'RECENCY_1_HOUR', 'RECENCY_2_HOURS', 'RECENCY_3_HOURS', 'RECENCY_6_HOURS', 'RECENCY_12_HOURS', 'RECENCY_1_DAY', 'RECENCY_2_DAYS', 'RECENCY_3_DAYS', 'RECENCY_5_DAYS', 'RECENCY_7_DAYS', 'RECENCY_10_DAYS', 'RECENCY_14_DAYS', 'RECENCY_15_DAYS', 'RECENCY_21_DAYS', 'RECENCY_28_DAYS', 'RECENCY_30_DAYS', 'RECENCY_40_DAYS', 'RECENCY_45_DAYS', 'RECENCY_60_DAYS', 'RECENCY_90_DAYS', 'RECENCY_120_DAYS', 'RECENCY_180_DAYS', 'RECENCY_270_DAYS', 'RECENCY_365_DAYS']):
            raise ValueError("must be one of enum values ('RECENCY_NO_LIMIT', 'RECENCY_1_MINUTE', 'RECENCY_5_MINUTES', 'RECENCY_10_MINUTES', 'RECENCY_15_MINUTES', 'RECENCY_30_MINUTES', 'RECENCY_1_HOUR', 'RECENCY_2_HOURS', 'RECENCY_3_HOURS', 'RECENCY_6_HOURS', 'RECENCY_12_HOURS', 'RECENCY_1_DAY', 'RECENCY_2_DAYS', 'RECENCY_3_DAYS', 'RECENCY_5_DAYS', 'RECENCY_7_DAYS', 'RECENCY_10_DAYS', 'RECENCY_14_DAYS', 'RECENCY_15_DAYS', 'RECENCY_21_DAYS', 'RECENCY_28_DAYS', 'RECENCY_30_DAYS', 'RECENCY_40_DAYS', 'RECENCY_45_DAYS', 'RECENCY_60_DAYS', 'RECENCY_90_DAYS', 'RECENCY_120_DAYS', 'RECENCY_180_DAYS', 'RECENCY_270_DAYS', 'RECENCY_365_DAYS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FirstAndThirdPartyAudienceTargetingSetting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FirstAndThirdPartyAudienceTargetingSetting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "firstAndThirdPartyAudienceId": obj.get("firstAndThirdPartyAudienceId"),
            "recency": obj.get("recency")
        })
        return _obj



# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ActiveViewVideoViewabilityMetricConfig(BaseModel):
    """
    Configuration for custom Active View video viewability metrics.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the custom metric.", alias="displayName")
    minimum_duration: Optional[StrictStr] = Field(default=None, description="The minimum visible video duration required (in seconds) in order for an impression to be recorded. You must specify minimum_duration, minimum_quartile or both. If both are specified, an impression meets the metric criteria if either requirement is met (whichever happens first).", alias="minimumDuration")
    minimum_quartile: Optional[StrictStr] = Field(default=None, description="The minimum visible video duration required, based on the video quartiles, in order for an impression to be recorded. You must specify minimum_duration, minimum_quartile or both. If both are specified, an impression meets the metric criteria if either requirement is met (whichever happens first).", alias="minimumQuartile")
    minimum_viewability: Optional[StrictStr] = Field(default=None, description="Required. The minimum percentage of the video ad's pixels visible on the screen in order for an impression to be recorded.", alias="minimumViewability")
    minimum_volume: Optional[StrictStr] = Field(default=None, description="Required. The minimum percentage of the video ad's volume required in order for an impression to be recorded.", alias="minimumVolume")
    __properties: ClassVar[List[str]] = ["displayName", "minimumDuration", "minimumQuartile", "minimumViewability", "minimumVolume"]

    @field_validator('minimum_duration')
    def minimum_duration_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VIDEO_DURATION_UNSPECIFIED', 'VIDEO_DURATION_SECONDS_NONE', 'VIDEO_DURATION_SECONDS_0', 'VIDEO_DURATION_SECONDS_1', 'VIDEO_DURATION_SECONDS_2', 'VIDEO_DURATION_SECONDS_3', 'VIDEO_DURATION_SECONDS_4', 'VIDEO_DURATION_SECONDS_5', 'VIDEO_DURATION_SECONDS_6', 'VIDEO_DURATION_SECONDS_7', 'VIDEO_DURATION_SECONDS_8', 'VIDEO_DURATION_SECONDS_9', 'VIDEO_DURATION_SECONDS_10', 'VIDEO_DURATION_SECONDS_11', 'VIDEO_DURATION_SECONDS_12', 'VIDEO_DURATION_SECONDS_13', 'VIDEO_DURATION_SECONDS_14', 'VIDEO_DURATION_SECONDS_15', 'VIDEO_DURATION_SECONDS_30', 'VIDEO_DURATION_SECONDS_45', 'VIDEO_DURATION_SECONDS_60']):
            raise ValueError("must be one of enum values ('VIDEO_DURATION_UNSPECIFIED', 'VIDEO_DURATION_SECONDS_NONE', 'VIDEO_DURATION_SECONDS_0', 'VIDEO_DURATION_SECONDS_1', 'VIDEO_DURATION_SECONDS_2', 'VIDEO_DURATION_SECONDS_3', 'VIDEO_DURATION_SECONDS_4', 'VIDEO_DURATION_SECONDS_5', 'VIDEO_DURATION_SECONDS_6', 'VIDEO_DURATION_SECONDS_7', 'VIDEO_DURATION_SECONDS_8', 'VIDEO_DURATION_SECONDS_9', 'VIDEO_DURATION_SECONDS_10', 'VIDEO_DURATION_SECONDS_11', 'VIDEO_DURATION_SECONDS_12', 'VIDEO_DURATION_SECONDS_13', 'VIDEO_DURATION_SECONDS_14', 'VIDEO_DURATION_SECONDS_15', 'VIDEO_DURATION_SECONDS_30', 'VIDEO_DURATION_SECONDS_45', 'VIDEO_DURATION_SECONDS_60')")
        return value

    @field_validator('minimum_quartile')
    def minimum_quartile_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VIDEO_DURATION_QUARTILE_UNSPECIFIED', 'VIDEO_DURATION_QUARTILE_NONE', 'VIDEO_DURATION_QUARTILE_FIRST', 'VIDEO_DURATION_QUARTILE_SECOND', 'VIDEO_DURATION_QUARTILE_THIRD', 'VIDEO_DURATION_QUARTILE_FOURTH']):
            raise ValueError("must be one of enum values ('VIDEO_DURATION_QUARTILE_UNSPECIFIED', 'VIDEO_DURATION_QUARTILE_NONE', 'VIDEO_DURATION_QUARTILE_FIRST', 'VIDEO_DURATION_QUARTILE_SECOND', 'VIDEO_DURATION_QUARTILE_THIRD', 'VIDEO_DURATION_QUARTILE_FOURTH')")
        return value

    @field_validator('minimum_viewability')
    def minimum_viewability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VIEWABILITY_PERCENT_UNSPECIFIED', 'VIEWABILITY_PERCENT_0', 'VIEWABILITY_PERCENT_25', 'VIEWABILITY_PERCENT_50', 'VIEWABILITY_PERCENT_75', 'VIEWABILITY_PERCENT_100']):
            raise ValueError("must be one of enum values ('VIEWABILITY_PERCENT_UNSPECIFIED', 'VIEWABILITY_PERCENT_0', 'VIEWABILITY_PERCENT_25', 'VIEWABILITY_PERCENT_50', 'VIEWABILITY_PERCENT_75', 'VIEWABILITY_PERCENT_100')")
        return value

    @field_validator('minimum_volume')
    def minimum_volume_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VIDEO_VOLUME_PERCENT_UNSPECIFIED', 'VIDEO_VOLUME_PERCENT_0', 'VIDEO_VOLUME_PERCENT_10']):
            raise ValueError("must be one of enum values ('VIDEO_VOLUME_PERCENT_UNSPECIFIED', 'VIDEO_VOLUME_PERCENT_0', 'VIDEO_VOLUME_PERCENT_10')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActiveViewVideoViewabilityMetricConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActiveViewVideoViewabilityMetricConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "minimumDuration": obj.get("minimumDuration"),
            "minimumQuartile": obj.get("minimumQuartile"),
            "minimumViewability": obj.get("minimumViewability"),
            "minimumVolume": obj.get("minimumVolume")
        })
        return _obj



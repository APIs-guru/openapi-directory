# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image_asset import ImageAsset
from openapi_client.models.youtube_video_details import YoutubeVideoDetails
from typing import Optional, Set
from typing_extensions import Self

class VideoPerformanceAd(BaseModel):
    """
    Details for a video performance ad.
    """ # noqa: E501
    action_button_labels: Optional[List[StrictStr]] = Field(default=None, description="The list of text assets shown on the call-to-action button.", alias="actionButtonLabels")
    companion_banners: Optional[List[ImageAsset]] = Field(default=None, description="The list of companion banners used by this ad.", alias="companionBanners")
    custom_parameters: Optional[Dict[str, StrictStr]] = Field(default=None, description="The custom parameters to pass custom values to tracking URL template.", alias="customParameters")
    descriptions: Optional[List[StrictStr]] = Field(default=None, description="The list of descriptions shown on the call-to-action banner.")
    display_url_breadcrumb1: Optional[StrictStr] = Field(default=None, description="The first piece after the domain in the display URL.", alias="displayUrlBreadcrumb1")
    display_url_breadcrumb2: Optional[StrictStr] = Field(default=None, description="The second piece after the domain in the display URL.", alias="displayUrlBreadcrumb2")
    domain: Optional[StrictStr] = Field(default=None, description="The domain of the display URL.")
    final_url: Optional[StrictStr] = Field(default=None, description="The URL address of the webpage that people reach after they click the ad.", alias="finalUrl")
    headlines: Optional[List[StrictStr]] = Field(default=None, description="The list of headlines shown on the call-to-action banner.")
    long_headlines: Optional[List[StrictStr]] = Field(default=None, description="The list of lone headlines shown on the call-to-action banner.", alias="longHeadlines")
    tracking_url: Optional[StrictStr] = Field(default=None, description="The URL address loaded in the background for tracking purposes.", alias="trackingUrl")
    videos: Optional[List[YoutubeVideoDetails]] = Field(default=None, description="The list of YouTube video assets used by this ad.")
    __properties: ClassVar[List[str]] = ["actionButtonLabels", "companionBanners", "customParameters", "descriptions", "displayUrlBreadcrumb1", "displayUrlBreadcrumb2", "domain", "finalUrl", "headlines", "longHeadlines", "trackingUrl", "videos"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VideoPerformanceAd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in companion_banners (list)
        _items = []
        if self.companion_banners:
            for _item_companion_banners in self.companion_banners:
                if _item_companion_banners:
                    _items.append(_item_companion_banners.to_dict())
            _dict['companionBanners'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in videos (list)
        _items = []
        if self.videos:
            for _item_videos in self.videos:
                if _item_videos:
                    _items.append(_item_videos.to_dict())
            _dict['videos'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VideoPerformanceAd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionButtonLabels": obj.get("actionButtonLabels"),
            "companionBanners": [ImageAsset.from_dict(_item) for _item in obj["companionBanners"]] if obj.get("companionBanners") is not None else None,
            "customParameters": obj.get("customParameters"),
            "descriptions": obj.get("descriptions"),
            "displayUrlBreadcrumb1": obj.get("displayUrlBreadcrumb1"),
            "displayUrlBreadcrumb2": obj.get("displayUrlBreadcrumb2"),
            "domain": obj.get("domain"),
            "finalUrl": obj.get("finalUrl"),
            "headlines": obj.get("headlines"),
            "longHeadlines": obj.get("longHeadlines"),
            "trackingUrl": obj.get("trackingUrl"),
            "videos": [YoutubeVideoDetails.from_dict(_item) for _item in obj["videos"]] if obj.get("videos") is not None else None
        })
        return _obj



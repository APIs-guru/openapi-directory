# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bidding_strategy import BiddingStrategy
from openapi_client.models.conversion_counting_config import ConversionCountingConfig
from openapi_client.models.frequency_cap import FrequencyCap
from openapi_client.models.integration_details import IntegrationDetails
from openapi_client.models.line_item_budget import LineItemBudget
from openapi_client.models.line_item_flight import LineItemFlight
from openapi_client.models.mobile_app import MobileApp
from openapi_client.models.pacing import Pacing
from openapi_client.models.partner_cost import PartnerCost
from openapi_client.models.partner_revenue_model import PartnerRevenueModel
from openapi_client.models.targeting_expansion_config import TargetingExpansionConfig
from openapi_client.models.youtube_and_partners_settings import YoutubeAndPartnersSettings
from typing import Optional, Set
from typing_extensions import Self

class LineItem(BaseModel):
    """
    A single line item.
    """ # noqa: E501
    advertiser_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique ID of the advertiser the line item belongs to.", alias="advertiserId")
    bid_strategy: Optional[BiddingStrategy] = Field(default=None, alias="bidStrategy")
    budget: Optional[LineItemBudget] = None
    campaign_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique ID of the campaign that the line item belongs to.", alias="campaignId")
    conversion_counting: Optional[ConversionCountingConfig] = Field(default=None, alias="conversionCounting")
    creative_ids: Optional[List[StrictStr]] = Field(default=None, description="The IDs of the creatives associated with the line item.", alias="creativeIds")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the line item. Must be UTF-8 encoded with a maximum size of 240 bytes.", alias="displayName")
    entity_status: Optional[StrictStr] = Field(default=None, description="Required. Controls whether or not the line item can spend its budget and bid on inventory. * For CreateLineItem method, only `ENTITY_STATUS_DRAFT` is allowed. To activate a line item, use UpdateLineItem method and update the status to `ENTITY_STATUS_ACTIVE` after creation. * A line item cannot be changed back to `ENTITY_STATUS_DRAFT` status from any other status. * If the line item's parent insertion order is not active, the line item can't spend its budget even if its own status is `ENTITY_STATUS_ACTIVE`.", alias="entityStatus")
    exclude_new_exchanges: Optional[StrictBool] = Field(default=None, description="Whether to exclude new exchanges from automatically being targeted by the line item. This field is false by default.", alias="excludeNewExchanges")
    flight: Optional[LineItemFlight] = None
    frequency_cap: Optional[FrequencyCap] = Field(default=None, alias="frequencyCap")
    insertion_order_id: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The unique ID of the insertion order that the line item belongs to.", alias="insertionOrderId")
    integration_details: Optional[IntegrationDetails] = Field(default=None, alias="integrationDetails")
    line_item_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique ID of the line item. Assigned by the system.", alias="lineItemId")
    line_item_type: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The type of the line item.", alias="lineItemType")
    mobile_app: Optional[MobileApp] = Field(default=None, alias="mobileApp")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the line item.")
    pacing: Optional[Pacing] = None
    partner_costs: Optional[List[PartnerCost]] = Field(default=None, description="The partner costs associated with the line item. If absent or empty in CreateLineItem method, the newly created line item will inherit partner costs from its parent insertion order.", alias="partnerCosts")
    partner_revenue_model: Optional[PartnerRevenueModel] = Field(default=None, alias="partnerRevenueModel")
    reservation_type: Optional[StrictStr] = Field(default=None, description="Output only. The reservation type of the line item.", alias="reservationType")
    targeting_expansion: Optional[TargetingExpansionConfig] = Field(default=None, alias="targetingExpansion")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the line item was last updated. Assigned by the system.", alias="updateTime")
    warning_messages: Optional[List[StrictStr]] = Field(default=None, description="Output only. The warning messages generated by the line item. These warnings do not block saving the line item, but some may block the line item from running.", alias="warningMessages")
    youtube_and_partners_settings: Optional[YoutubeAndPartnersSettings] = Field(default=None, alias="youtubeAndPartnersSettings")
    __properties: ClassVar[List[str]] = ["advertiserId", "bidStrategy", "budget", "campaignId", "conversionCounting", "creativeIds", "displayName", "entityStatus", "excludeNewExchanges", "flight", "frequencyCap", "insertionOrderId", "integrationDetails", "lineItemId", "lineItemType", "mobileApp", "name", "pacing", "partnerCosts", "partnerRevenueModel", "reservationType", "targetingExpansion", "updateTime", "warningMessages", "youtubeAndPartnersSettings"]

    @field_validator('entity_status')
    def entity_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENTITY_STATUS_UNSPECIFIED', 'ENTITY_STATUS_ACTIVE', 'ENTITY_STATUS_ARCHIVED', 'ENTITY_STATUS_DRAFT', 'ENTITY_STATUS_PAUSED', 'ENTITY_STATUS_SCHEDULED_FOR_DELETION']):
            raise ValueError("must be one of enum values ('ENTITY_STATUS_UNSPECIFIED', 'ENTITY_STATUS_ACTIVE', 'ENTITY_STATUS_ARCHIVED', 'ENTITY_STATUS_DRAFT', 'ENTITY_STATUS_PAUSED', 'ENTITY_STATUS_SCHEDULED_FOR_DELETION')")
        return value

    @field_validator('line_item_type')
    def line_item_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LINE_ITEM_TYPE_UNSPECIFIED', 'LINE_ITEM_TYPE_DISPLAY_DEFAULT', 'LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INSTALL', 'LINE_ITEM_TYPE_VIDEO_DEFAULT', 'LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INSTALL', 'LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INVENTORY', 'LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INVENTORY', 'LINE_ITEM_TYPE_AUDIO_DEFAULT', 'LINE_ITEM_TYPE_VIDEO_OVER_THE_TOP', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_ACTION', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_NON_SKIPPABLE', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_VIDEO_SEQUENCE', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_AUDIO', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_REACH', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_SIMPLE', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_NON_SKIPPABLE_OVER_THE_TOP', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_REACH_OVER_THE_TOP', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_SIMPLE_OVER_THE_TOP', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_TARGET_FREQUENCY', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_VIEW', 'LINE_ITEM_TYPE_DISPLAY_OUT_OF_HOME', 'LINE_ITEM_TYPE_VIDEO_OUT_OF_HOME']):
            raise ValueError("must be one of enum values ('LINE_ITEM_TYPE_UNSPECIFIED', 'LINE_ITEM_TYPE_DISPLAY_DEFAULT', 'LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INSTALL', 'LINE_ITEM_TYPE_VIDEO_DEFAULT', 'LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INSTALL', 'LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INVENTORY', 'LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INVENTORY', 'LINE_ITEM_TYPE_AUDIO_DEFAULT', 'LINE_ITEM_TYPE_VIDEO_OVER_THE_TOP', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_ACTION', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_NON_SKIPPABLE', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_VIDEO_SEQUENCE', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_AUDIO', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_REACH', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_SIMPLE', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_NON_SKIPPABLE_OVER_THE_TOP', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_REACH_OVER_THE_TOP', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_SIMPLE_OVER_THE_TOP', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_TARGET_FREQUENCY', 'LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_VIEW', 'LINE_ITEM_TYPE_DISPLAY_OUT_OF_HOME', 'LINE_ITEM_TYPE_VIDEO_OUT_OF_HOME')")
        return value

    @field_validator('reservation_type')
    def reservation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESERVATION_TYPE_UNSPECIFIED', 'RESERVATION_TYPE_NOT_GUARANTEED', 'RESERVATION_TYPE_PROGRAMMATIC_GUARANTEED', 'RESERVATION_TYPE_TAG_GUARANTEED', 'RESERVATION_TYPE_PETRA_VIRAL', 'RESERVATION_TYPE_INSTANT_RESERVE']):
            raise ValueError("must be one of enum values ('RESERVATION_TYPE_UNSPECIFIED', 'RESERVATION_TYPE_NOT_GUARANTEED', 'RESERVATION_TYPE_PROGRAMMATIC_GUARANTEED', 'RESERVATION_TYPE_TAG_GUARANTEED', 'RESERVATION_TYPE_PETRA_VIRAL', 'RESERVATION_TYPE_INSTANT_RESERVE')")
        return value

    @field_validator('warning_messages')
    def warning_messages_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['LINE_ITEM_WARNING_MESSAGE_UNSPECIFIED', 'INVALID_FLIGHT_DATES', 'EXPIRED', 'PENDING_FLIGHT', 'ALL_PARTNER_ENABLED_EXCHANGES_NEGATIVELY_TARGETED', 'INVALID_INVENTORY_SOURCE', 'APP_INVENTORY_INVALID_SITE_TARGETING', 'APP_INVENTORY_INVALID_AUDIENCE_LISTS', 'NO_VALID_CREATIVE', 'PARENT_INSERTION_ORDER_PAUSED', 'PARENT_INSERTION_ORDER_EXPIRED', 'DEPRECATED_FIRST_PARTY_AUDIENCE_EXCLUSION']):
                raise ValueError("each list item must be one of ('LINE_ITEM_WARNING_MESSAGE_UNSPECIFIED', 'INVALID_FLIGHT_DATES', 'EXPIRED', 'PENDING_FLIGHT', 'ALL_PARTNER_ENABLED_EXCHANGES_NEGATIVELY_TARGETED', 'INVALID_INVENTORY_SOURCE', 'APP_INVENTORY_INVALID_SITE_TARGETING', 'APP_INVENTORY_INVALID_AUDIENCE_LISTS', 'NO_VALID_CREATIVE', 'PARENT_INSERTION_ORDER_PAUSED', 'PARENT_INSERTION_ORDER_EXPIRED', 'DEPRECATED_FIRST_PARTY_AUDIENCE_EXCLUSION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LineItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "advertiser_id",
            "campaign_id",
            "line_item_id",
            "name",
            "reservation_type",
            "update_time",
            "warning_messages",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bid_strategy
        if self.bid_strategy:
            _dict['bidStrategy'] = self.bid_strategy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of budget
        if self.budget:
            _dict['budget'] = self.budget.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conversion_counting
        if self.conversion_counting:
            _dict['conversionCounting'] = self.conversion_counting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of flight
        if self.flight:
            _dict['flight'] = self.flight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of frequency_cap
        if self.frequency_cap:
            _dict['frequencyCap'] = self.frequency_cap.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integration_details
        if self.integration_details:
            _dict['integrationDetails'] = self.integration_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mobile_app
        if self.mobile_app:
            _dict['mobileApp'] = self.mobile_app.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pacing
        if self.pacing:
            _dict['pacing'] = self.pacing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in partner_costs (list)
        _items = []
        if self.partner_costs:
            for _item_partner_costs in self.partner_costs:
                if _item_partner_costs:
                    _items.append(_item_partner_costs.to_dict())
            _dict['partnerCosts'] = _items
        # override the default output from pydantic by calling `to_dict()` of partner_revenue_model
        if self.partner_revenue_model:
            _dict['partnerRevenueModel'] = self.partner_revenue_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of targeting_expansion
        if self.targeting_expansion:
            _dict['targetingExpansion'] = self.targeting_expansion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of youtube_and_partners_settings
        if self.youtube_and_partners_settings:
            _dict['youtubeAndPartnersSettings'] = self.youtube_and_partners_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LineItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advertiserId": obj.get("advertiserId"),
            "bidStrategy": BiddingStrategy.from_dict(obj["bidStrategy"]) if obj.get("bidStrategy") is not None else None,
            "budget": LineItemBudget.from_dict(obj["budget"]) if obj.get("budget") is not None else None,
            "campaignId": obj.get("campaignId"),
            "conversionCounting": ConversionCountingConfig.from_dict(obj["conversionCounting"]) if obj.get("conversionCounting") is not None else None,
            "creativeIds": obj.get("creativeIds"),
            "displayName": obj.get("displayName"),
            "entityStatus": obj.get("entityStatus"),
            "excludeNewExchanges": obj.get("excludeNewExchanges"),
            "flight": LineItemFlight.from_dict(obj["flight"]) if obj.get("flight") is not None else None,
            "frequencyCap": FrequencyCap.from_dict(obj["frequencyCap"]) if obj.get("frequencyCap") is not None else None,
            "insertionOrderId": obj.get("insertionOrderId"),
            "integrationDetails": IntegrationDetails.from_dict(obj["integrationDetails"]) if obj.get("integrationDetails") is not None else None,
            "lineItemId": obj.get("lineItemId"),
            "lineItemType": obj.get("lineItemType"),
            "mobileApp": MobileApp.from_dict(obj["mobileApp"]) if obj.get("mobileApp") is not None else None,
            "name": obj.get("name"),
            "pacing": Pacing.from_dict(obj["pacing"]) if obj.get("pacing") is not None else None,
            "partnerCosts": [PartnerCost.from_dict(_item) for _item in obj["partnerCosts"]] if obj.get("partnerCosts") is not None else None,
            "partnerRevenueModel": PartnerRevenueModel.from_dict(obj["partnerRevenueModel"]) if obj.get("partnerRevenueModel") is not None else None,
            "reservationType": obj.get("reservationType"),
            "targetingExpansion": TargetingExpansionConfig.from_dict(obj["targetingExpansion"]) if obj.get("targetingExpansion") is not None else None,
            "updateTime": obj.get("updateTime"),
            "warningMessages": obj.get("warningMessages"),
            "youtubeAndPartnersSettings": YoutubeAndPartnersSettings.from_dict(obj["youtubeAndPartnersSettings"]) if obj.get("youtubeAndPartnersSettings") is not None else None
        })
        return _obj



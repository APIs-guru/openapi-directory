# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ManualTrigger(BaseModel):
    """
    A single manual trigger in Display & Video 360. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This resource will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
    """ # noqa: E501
    activation_duration_minutes: Optional[StrictStr] = Field(default=None, description="Required. The maximum duration of each activation in minutes. Must be between 1 and 360 inclusive. After this duration, the trigger will be automatically deactivated.", alias="activationDurationMinutes")
    advertiser_id: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The unique ID of the advertiser that the manual trigger belongs to.", alias="advertiserId")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the manual trigger. Must be UTF-8 encoded with a maximum size of 240 bytes.", alias="displayName")
    latest_activation_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp of the trigger's latest activation.", alias="latestActivationTime")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the manual trigger.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the manual trigger. Will be set to the `INACTIVE` state upon creation.")
    trigger_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique ID of the manual trigger.", alias="triggerId")
    __properties: ClassVar[List[str]] = ["activationDurationMinutes", "advertiserId", "displayName", "latestActivationTime", "name", "state", "triggerId"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'INACTIVE', 'ACTIVE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'INACTIVE', 'ACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManualTrigger from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "latest_activation_time",
            "name",
            "state",
            "trigger_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManualTrigger from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activationDurationMinutes": obj.get("activationDurationMinutes"),
            "advertiserId": obj.get("advertiserId"),
            "displayName": obj.get("displayName"),
            "latestActivationTime": obj.get("latestActivationTime"),
            "name": obj.get("name"),
            "state": obj.get("state"),
            "triggerId": obj.get("triggerId")
        })
        return _obj



# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.guaranteed_order_status import GuaranteedOrderStatus
from typing import Optional, Set
from typing_extensions import Self

class GuaranteedOrder(BaseModel):
    """
    A guaranteed order. Guaranteed orders are parent entity of guaranteed inventory sources. When creating a guaranteed inventory source, a guaranteed order ID must be assigned to the inventory source.
    """ # noqa: E501
    default_advertiser_id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of default advertiser of the guaranteed order. The default advertiser is either the read_write_advertiser_id or, if that is not set, the first advertiser listed in read_advertiser_ids. Otherwise, there is no default advertiser.", alias="defaultAdvertiserId")
    default_campaign_id: Optional[StrictStr] = Field(default=None, description="The ID of the default campaign that is assigned to the guaranteed order. The default campaign must belong to the default advertiser.", alias="defaultCampaignId")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the guaranteed order. Must be UTF-8 encoded with a maximum size of 240 bytes.", alias="displayName")
    exchange: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The exchange where the guaranteed order originated.")
    guaranteed_order_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique identifier of the guaranteed order. The guaranteed order IDs have the format `{exchange}-{legacy_guaranteed_order_id}`.", alias="guaranteedOrderId")
    legacy_guaranteed_order_id: Optional[StrictStr] = Field(default=None, description="Output only. The legacy ID of the guaranteed order. Assigned by the original exchange. The legacy ID is unique within one exchange, but is not guaranteed to be unique across all guaranteed orders. This ID is used in SDF and UI.", alias="legacyGuaranteedOrderId")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the guaranteed order.")
    publisher_name: Optional[StrictStr] = Field(default=None, description="Required. The publisher name of the guaranteed order. Must be UTF-8 encoded with a maximum size of 240 bytes.", alias="publisherName")
    read_access_inherited: Optional[StrictBool] = Field(default=None, description="Whether all advertisers of read_write_partner_id have read access to the guaranteed order. Only applicable if read_write_partner_id is set. If True, overrides read_advertiser_ids.", alias="readAccessInherited")
    read_advertiser_ids: Optional[List[StrictStr]] = Field(default=None, description="The IDs of advertisers with read access to the guaranteed order. This field must not include the advertiser assigned to read_write_advertiser_id if it is set. All advertisers in this field must belong to read_write_partner_id or the same partner as read_write_advertiser_id.", alias="readAdvertiserIds")
    read_write_advertiser_id: Optional[StrictStr] = Field(default=None, description="The advertiser with read/write access to the guaranteed order. This is also the default advertiser of the guaranteed order.", alias="readWriteAdvertiserId")
    read_write_partner_id: Optional[StrictStr] = Field(default=None, description="The partner with read/write access to the guaranteed order.", alias="readWritePartnerId")
    status: Optional[GuaranteedOrderStatus] = None
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the guaranteed order was last updated. Assigned by the system.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["defaultAdvertiserId", "defaultCampaignId", "displayName", "exchange", "guaranteedOrderId", "legacyGuaranteedOrderId", "name", "publisherName", "readAccessInherited", "readAdvertiserIds", "readWriteAdvertiserId", "readWritePartnerId", "status", "updateTime"]

    @field_validator('exchange')
    def exchange_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCHANGE_UNSPECIFIED', 'EXCHANGE_GOOGLE_AD_MANAGER', 'EXCHANGE_APPNEXUS', 'EXCHANGE_BRIGHTROLL', 'EXCHANGE_ADFORM', 'EXCHANGE_ADMETA', 'EXCHANGE_ADMIXER', 'EXCHANGE_ADSMOGO', 'EXCHANGE_ADSWIZZ', 'EXCHANGE_BIDSWITCH', 'EXCHANGE_BRIGHTROLL_DISPLAY', 'EXCHANGE_CADREON', 'EXCHANGE_DAILYMOTION', 'EXCHANGE_FIVE', 'EXCHANGE_FLUCT', 'EXCHANGE_FREEWHEEL', 'EXCHANGE_GENIEE', 'EXCHANGE_GUMGUM', 'EXCHANGE_IMOBILE', 'EXCHANGE_IBILLBOARD', 'EXCHANGE_IMPROVE_DIGITAL', 'EXCHANGE_INDEX', 'EXCHANGE_KARGO', 'EXCHANGE_MICROAD', 'EXCHANGE_MOPUB', 'EXCHANGE_NEND', 'EXCHANGE_ONE_BY_AOL_DISPLAY', 'EXCHANGE_ONE_BY_AOL_MOBILE', 'EXCHANGE_ONE_BY_AOL_VIDEO', 'EXCHANGE_OOYALA', 'EXCHANGE_OPENX', 'EXCHANGE_PERMODO', 'EXCHANGE_PLATFORMONE', 'EXCHANGE_PLATFORMID', 'EXCHANGE_PUBMATIC', 'EXCHANGE_PULSEPOINT', 'EXCHANGE_REVENUEMAX', 'EXCHANGE_RUBICON', 'EXCHANGE_SMARTCLIP', 'EXCHANGE_SMARTRTB', 'EXCHANGE_SMARTSTREAMTV', 'EXCHANGE_SOVRN', 'EXCHANGE_SPOTXCHANGE', 'EXCHANGE_STROER', 'EXCHANGE_TEADSTV', 'EXCHANGE_TELARIA', 'EXCHANGE_TVN', 'EXCHANGE_UNITED', 'EXCHANGE_YIELDLAB', 'EXCHANGE_YIELDMO', 'EXCHANGE_UNRULYX', 'EXCHANGE_OPEN8', 'EXCHANGE_TRITON', 'EXCHANGE_TRIPLELIFT', 'EXCHANGE_TABOOLA', 'EXCHANGE_INMOBI', 'EXCHANGE_SMAATO', 'EXCHANGE_AJA', 'EXCHANGE_SUPERSHIP', 'EXCHANGE_NEXSTAR_DIGITAL', 'EXCHANGE_WAZE', 'EXCHANGE_SOUNDCAST', 'EXCHANGE_SHARETHROUGH', 'EXCHANGE_FYBER', 'EXCHANGE_RED_FOR_PUBLISHERS', 'EXCHANGE_MEDIANET', 'EXCHANGE_TAPJOY', 'EXCHANGE_VISTAR', 'EXCHANGE_DAX', 'EXCHANGE_JCD', 'EXCHANGE_PLACE_EXCHANGE', 'EXCHANGE_APPLOVIN', 'EXCHANGE_CONNATIX', 'EXCHANGE_RESET_DIGITAL', 'EXCHANGE_HIVESTACK', 'EXCHANGE_APPLOVIN_GBID', 'EXCHANGE_FYBER_GBID', 'EXCHANGE_UNITY_GBID', 'EXCHANGE_CHARTBOOST_GBID', 'EXCHANGE_ADMOST_GBID', 'EXCHANGE_TOPON_GBID']):
            raise ValueError("must be one of enum values ('EXCHANGE_UNSPECIFIED', 'EXCHANGE_GOOGLE_AD_MANAGER', 'EXCHANGE_APPNEXUS', 'EXCHANGE_BRIGHTROLL', 'EXCHANGE_ADFORM', 'EXCHANGE_ADMETA', 'EXCHANGE_ADMIXER', 'EXCHANGE_ADSMOGO', 'EXCHANGE_ADSWIZZ', 'EXCHANGE_BIDSWITCH', 'EXCHANGE_BRIGHTROLL_DISPLAY', 'EXCHANGE_CADREON', 'EXCHANGE_DAILYMOTION', 'EXCHANGE_FIVE', 'EXCHANGE_FLUCT', 'EXCHANGE_FREEWHEEL', 'EXCHANGE_GENIEE', 'EXCHANGE_GUMGUM', 'EXCHANGE_IMOBILE', 'EXCHANGE_IBILLBOARD', 'EXCHANGE_IMPROVE_DIGITAL', 'EXCHANGE_INDEX', 'EXCHANGE_KARGO', 'EXCHANGE_MICROAD', 'EXCHANGE_MOPUB', 'EXCHANGE_NEND', 'EXCHANGE_ONE_BY_AOL_DISPLAY', 'EXCHANGE_ONE_BY_AOL_MOBILE', 'EXCHANGE_ONE_BY_AOL_VIDEO', 'EXCHANGE_OOYALA', 'EXCHANGE_OPENX', 'EXCHANGE_PERMODO', 'EXCHANGE_PLATFORMONE', 'EXCHANGE_PLATFORMID', 'EXCHANGE_PUBMATIC', 'EXCHANGE_PULSEPOINT', 'EXCHANGE_REVENUEMAX', 'EXCHANGE_RUBICON', 'EXCHANGE_SMARTCLIP', 'EXCHANGE_SMARTRTB', 'EXCHANGE_SMARTSTREAMTV', 'EXCHANGE_SOVRN', 'EXCHANGE_SPOTXCHANGE', 'EXCHANGE_STROER', 'EXCHANGE_TEADSTV', 'EXCHANGE_TELARIA', 'EXCHANGE_TVN', 'EXCHANGE_UNITED', 'EXCHANGE_YIELDLAB', 'EXCHANGE_YIELDMO', 'EXCHANGE_UNRULYX', 'EXCHANGE_OPEN8', 'EXCHANGE_TRITON', 'EXCHANGE_TRIPLELIFT', 'EXCHANGE_TABOOLA', 'EXCHANGE_INMOBI', 'EXCHANGE_SMAATO', 'EXCHANGE_AJA', 'EXCHANGE_SUPERSHIP', 'EXCHANGE_NEXSTAR_DIGITAL', 'EXCHANGE_WAZE', 'EXCHANGE_SOUNDCAST', 'EXCHANGE_SHARETHROUGH', 'EXCHANGE_FYBER', 'EXCHANGE_RED_FOR_PUBLISHERS', 'EXCHANGE_MEDIANET', 'EXCHANGE_TAPJOY', 'EXCHANGE_VISTAR', 'EXCHANGE_DAX', 'EXCHANGE_JCD', 'EXCHANGE_PLACE_EXCHANGE', 'EXCHANGE_APPLOVIN', 'EXCHANGE_CONNATIX', 'EXCHANGE_RESET_DIGITAL', 'EXCHANGE_HIVESTACK', 'EXCHANGE_APPLOVIN_GBID', 'EXCHANGE_FYBER_GBID', 'EXCHANGE_UNITY_GBID', 'EXCHANGE_CHARTBOOST_GBID', 'EXCHANGE_ADMOST_GBID', 'EXCHANGE_TOPON_GBID')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GuaranteedOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "default_advertiser_id",
            "guaranteed_order_id",
            "legacy_guaranteed_order_id",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GuaranteedOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultAdvertiserId": obj.get("defaultAdvertiserId"),
            "defaultCampaignId": obj.get("defaultCampaignId"),
            "displayName": obj.get("displayName"),
            "exchange": obj.get("exchange"),
            "guaranteedOrderId": obj.get("guaranteedOrderId"),
            "legacyGuaranteedOrderId": obj.get("legacyGuaranteedOrderId"),
            "name": obj.get("name"),
            "publisherName": obj.get("publisherName"),
            "readAccessInherited": obj.get("readAccessInherited"),
            "readAdvertiserIds": obj.get("readAdvertiserIds"),
            "readWriteAdvertiserId": obj.get("readWriteAdvertiserId"),
            "readWritePartnerId": obj.get("readWritePartnerId"),
            "status": GuaranteedOrderStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



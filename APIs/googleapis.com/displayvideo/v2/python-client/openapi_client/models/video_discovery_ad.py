# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.youtube_video_details import YoutubeVideoDetails
from typing import Optional, Set
from typing_extensions import Self

class VideoDiscoveryAd(BaseModel):
    """
    Details for a video discovery ad.
    """ # noqa: E501
    description1: Optional[StrictStr] = Field(default=None, description="First text line for the ad.")
    description2: Optional[StrictStr] = Field(default=None, description="Second text line for the ad.")
    headline: Optional[StrictStr] = Field(default=None, description="The headline of ad.")
    thumbnail: Optional[StrictStr] = Field(default=None, description="Thumbnail image used in the ad.")
    video: Optional[YoutubeVideoDetails] = None
    __properties: ClassVar[List[str]] = ["description1", "description2", "headline", "thumbnail", "video"]

    @field_validator('thumbnail')
    def thumbnail_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['THUMBNAIL_UNSPECIFIED', 'THUMBNAIL_DEFAULT', 'THUMBNAIL_1', 'THUMBNAIL_2', 'THUMBNAIL_3']):
            raise ValueError("must be one of enum values ('THUMBNAIL_UNSPECIFIED', 'THUMBNAIL_DEFAULT', 'THUMBNAIL_1', 'THUMBNAIL_2', 'THUMBNAIL_3')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VideoDiscoveryAd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of video
        if self.video:
            _dict['video'] = self.video.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VideoDiscoveryAd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description1": obj.get("description1"),
            "description2": obj.get("description2"),
            "headline": obj.get("headline"),
            "thumbnail": obj.get("thumbnail"),
            "video": YoutubeVideoDetails.from_dict(obj["video"]) if obj.get("video") is not None else None
        })
        return _obj



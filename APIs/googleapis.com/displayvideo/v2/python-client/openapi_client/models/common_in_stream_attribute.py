# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image_asset import ImageAsset
from openapi_client.models.youtube_video_details import YoutubeVideoDetails
from typing import Optional, Set
from typing_extensions import Self

class CommonInStreamAttribute(BaseModel):
    """
    Common attributes for in-stream, non-skippable and bumper ads.
    """ # noqa: E501
    action_button_label: Optional[StrictStr] = Field(default=None, description="The text on the call-to-action button.", alias="actionButtonLabel")
    action_headline: Optional[StrictStr] = Field(default=None, description="The headline of the call-to-action banner.", alias="actionHeadline")
    companion_banner: Optional[ImageAsset] = Field(default=None, alias="companionBanner")
    display_url: Optional[StrictStr] = Field(default=None, description="The webpage address that appears with the ad.", alias="displayUrl")
    final_url: Optional[StrictStr] = Field(default=None, description="The URL address of the webpage that people reach after they click the ad.", alias="finalUrl")
    tracking_url: Optional[StrictStr] = Field(default=None, description="The URL address loaded in the background for tracking purposes.", alias="trackingUrl")
    video: Optional[YoutubeVideoDetails] = None
    __properties: ClassVar[List[str]] = ["actionButtonLabel", "actionHeadline", "companionBanner", "displayUrl", "finalUrl", "trackingUrl", "video"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommonInStreamAttribute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of companion_banner
        if self.companion_banner:
            _dict['companionBanner'] = self.companion_banner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video
        if self.video:
            _dict['video'] = self.video.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommonInStreamAttribute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionButtonLabel": obj.get("actionButtonLabel"),
            "actionHeadline": obj.get("actionHeadline"),
            "companionBanner": ImageAsset.from_dict(obj["companionBanner"]) if obj.get("companionBanner") is not None else None,
            "displayUrl": obj.get("displayUrl"),
            "finalUrl": obj.get("finalUrl"),
            "trackingUrl": obj.get("trackingUrl"),
            "video": YoutubeVideoDetails.from_dict(obj["video"]) if obj.get("video") is not None else None
        })
        return _obj



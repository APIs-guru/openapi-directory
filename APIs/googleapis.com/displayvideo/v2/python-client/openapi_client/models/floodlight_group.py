# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.active_view_video_viewability_metric_config import ActiveViewVideoViewabilityMetricConfig
from openapi_client.models.lookback_window import LookbackWindow
from typing import Optional, Set
from typing_extensions import Self

class FloodlightGroup(BaseModel):
    """
    A single Floodlight group.
    """ # noqa: E501
    active_view_config: Optional[ActiveViewVideoViewabilityMetricConfig] = Field(default=None, alias="activeViewConfig")
    custom_variables: Optional[Dict[str, Any]] = Field(default=None, description="User-defined custom variables owned by the Floodlight group. Use custom Floodlight variables to create reporting data that is tailored to your unique business needs. Custom Floodlight variables use the keys `U1=`, `U2=`, and so on, and can take any values that you choose to pass to them. You can use them to track virtually any type of data that you collect about your customers, such as the genre of movie that a customer purchases, the country to which the item is shipped, and so on. Custom Floodlight variables may not be used to pass any data that could be used or recognized as personally identifiable information (PII). Example: `custom_variables { fields { \"U1\": value { number_value: 123.4 }, \"U2\": value { string_value: \"MyVariable2\" }, \"U3\": value { string_value: \"MyVariable3\" } } }` Acceptable values for keys are \"U1\" through \"U100\", inclusive. String values must be less than 64 characters long, and cannot contain the following characters: `\"<>`.", alias="customVariables")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the Floodlight group.", alias="displayName")
    floodlight_group_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique ID of the Floodlight group. Assigned by the system.", alias="floodlightGroupId")
    lookback_window: Optional[LookbackWindow] = Field(default=None, alias="lookbackWindow")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the Floodlight group.")
    web_tag_type: Optional[StrictStr] = Field(default=None, description="Required. The web tag type enabled for the Floodlight group.", alias="webTagType")
    __properties: ClassVar[List[str]] = ["activeViewConfig", "customVariables", "displayName", "floodlightGroupId", "lookbackWindow", "name", "webTagType"]

    @field_validator('web_tag_type')
    def web_tag_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WEB_TAG_TYPE_UNSPECIFIED', 'WEB_TAG_TYPE_NONE', 'WEB_TAG_TYPE_IMAGE', 'WEB_TAG_TYPE_DYNAMIC']):
            raise ValueError("must be one of enum values ('WEB_TAG_TYPE_UNSPECIFIED', 'WEB_TAG_TYPE_NONE', 'WEB_TAG_TYPE_IMAGE', 'WEB_TAG_TYPE_DYNAMIC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FloodlightGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "floodlight_group_id",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of active_view_config
        if self.active_view_config:
            _dict['activeViewConfig'] = self.active_view_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookback_window
        if self.lookback_window:
            _dict['lookbackWindow'] = self.lookback_window.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FloodlightGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeViewConfig": ActiveViewVideoViewabilityMetricConfig.from_dict(obj["activeViewConfig"]) if obj.get("activeViewConfig") is not None else None,
            "customVariables": obj.get("customVariables"),
            "displayName": obj.get("displayName"),
            "floodlightGroupId": obj.get("floodlightGroupId"),
            "lookbackWindow": LookbackWindow.from_dict(obj["lookbackWindow"]) if obj.get("lookbackWindow") is not None else None,
            "name": obj.get("name"),
            "webTagType": obj.get("webTagType")
        })
        return _obj



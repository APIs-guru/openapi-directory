# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FrequencyCap(BaseModel):
    """
    Settings that control the number of times a user may be shown with the same ad during a given time period.
    """ # noqa: E501
    max_impressions: Optional[StrictInt] = Field(default=None, description="The maximum number of times a user may be shown the same ad during this period. Must be greater than 0. Required when unlimited is `false` and max_views is not set.", alias="maxImpressions")
    max_views: Optional[StrictInt] = Field(default=None, description="Optional. The maximum number of times a user may click-through or fully view an ad during this period until it is no longer served to them. Must be greater than 0. Only applicable to YouTube and Partners resources. Required when unlimited is `false` and max_impressions is not set.", alias="maxViews")
    time_unit: Optional[StrictStr] = Field(default=None, description="The time unit in which the frequency cap will be applied. Required when unlimited is `false`.", alias="timeUnit")
    time_unit_count: Optional[StrictInt] = Field(default=None, description="The number of time_unit the frequency cap will last. Required when unlimited is `false`. The following restrictions apply based on the value of time_unit: * `TIME_UNIT_LIFETIME` - this field is output only and will default to 1 * `TIME_UNIT_MONTHS` - must be between 1 and 2 * `TIME_UNIT_WEEKS` - must be between 1 and 4 * `TIME_UNIT_DAYS` - must be between 1 and 6 * `TIME_UNIT_HOURS` - must be between 1 and 23 * `TIME_UNIT_MINUTES` - must be between 1 and 59", alias="timeUnitCount")
    unlimited: Optional[StrictBool] = Field(default=None, description="Whether unlimited frequency capping is applied. When this field is set to `true`, the remaining frequency cap fields are not applicable.")
    __properties: ClassVar[List[str]] = ["maxImpressions", "maxViews", "timeUnit", "timeUnitCount", "unlimited"]

    @field_validator('time_unit')
    def time_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TIME_UNIT_UNSPECIFIED', 'TIME_UNIT_LIFETIME', 'TIME_UNIT_MONTHS', 'TIME_UNIT_WEEKS', 'TIME_UNIT_DAYS', 'TIME_UNIT_HOURS', 'TIME_UNIT_MINUTES']):
            raise ValueError("must be one of enum values ('TIME_UNIT_UNSPECIFIED', 'TIME_UNIT_LIFETIME', 'TIME_UNIT_MONTHS', 'TIME_UNIT_WEEKS', 'TIME_UNIT_DAYS', 'TIME_UNIT_HOURS', 'TIME_UNIT_MINUTES')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FrequencyCap from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FrequencyCap from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maxImpressions": obj.get("maxImpressions"),
            "maxViews": obj.get("maxViews"),
            "timeUnit": obj.get("timeUnit"),
            "timeUnitCount": obj.get("timeUnitCount"),
            "unlimited": obj.get("unlimited")
        })
        return _obj



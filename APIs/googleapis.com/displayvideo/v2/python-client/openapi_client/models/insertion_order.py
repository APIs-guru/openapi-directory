# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bidding_strategy import BiddingStrategy
from openapi_client.models.frequency_cap import FrequencyCap
from openapi_client.models.insertion_order_budget import InsertionOrderBudget
from openapi_client.models.integration_details import IntegrationDetails
from openapi_client.models.pacing import Pacing
from openapi_client.models.partner_cost import PartnerCost
from openapi_client.models.performance_goal import PerformanceGoal
from typing import Optional, Set
from typing_extensions import Self

class InsertionOrder(BaseModel):
    """
    A single insertion order.
    """ # noqa: E501
    advertiser_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique ID of the advertiser the insertion order belongs to.", alias="advertiserId")
    bid_strategy: Optional[BiddingStrategy] = Field(default=None, alias="bidStrategy")
    billable_outcome: Optional[StrictStr] = Field(default=None, description="Immutable. The billable outcome of the insertion order. Outcome based buying is deprecated. `BILLABLE_OUTCOME_PAY_PER_IMPRESSION` is the only valid value.", alias="billableOutcome")
    budget: Optional[InsertionOrderBudget] = None
    campaign_id: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The unique ID of the campaign that the insertion order belongs to.", alias="campaignId")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the insertion order. Must be UTF-8 encoded with a maximum size of 240 bytes.", alias="displayName")
    entity_status: Optional[StrictStr] = Field(default=None, description="Required. Controls whether or not the insertion order can spend its budget and bid on inventory. * For CreateInsertionOrder method, only `ENTITY_STATUS_DRAFT` is allowed. To activate an insertion order, use UpdateInsertionOrder method and update the status to `ENTITY_STATUS_ACTIVE` after creation. * An insertion order cannot be changed back to `ENTITY_STATUS_DRAFT` status from any other status. * An insertion order cannot be set to `ENTITY_STATUS_ACTIVE` if its parent campaign is not active.", alias="entityStatus")
    frequency_cap: Optional[FrequencyCap] = Field(default=None, alias="frequencyCap")
    insertion_order_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique ID of the insertion order. Assigned by the system.", alias="insertionOrderId")
    insertion_order_type: Optional[StrictStr] = Field(default=None, description="The type of insertion order. If this field is unspecified in creation, the value defaults to `RTB`.", alias="insertionOrderType")
    integration_details: Optional[IntegrationDetails] = Field(default=None, alias="integrationDetails")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the insertion order.")
    pacing: Optional[Pacing] = None
    partner_costs: Optional[List[PartnerCost]] = Field(default=None, description="The partner costs associated with the insertion order. If absent or empty in CreateInsertionOrder method, the newly created insertion order will inherit partner costs from the partner settings.", alias="partnerCosts")
    performance_goal: Optional[PerformanceGoal] = Field(default=None, alias="performanceGoal")
    reservation_type: Optional[StrictStr] = Field(default=None, description="Output only. The reservation type of the insertion order.", alias="reservationType")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the insertion order was last updated. Assigned by the system.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["advertiserId", "bidStrategy", "billableOutcome", "budget", "campaignId", "displayName", "entityStatus", "frequencyCap", "insertionOrderId", "insertionOrderType", "integrationDetails", "name", "pacing", "partnerCosts", "performanceGoal", "reservationType", "updateTime"]

    @field_validator('billable_outcome')
    def billable_outcome_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BILLABLE_OUTCOME_UNSPECIFIED', 'BILLABLE_OUTCOME_PAY_PER_IMPRESSION', 'BILLABLE_OUTCOME_PAY_PER_CLICK', 'BILLABLE_OUTCOME_PAY_PER_VIEWABLE_IMPRESSION']):
            raise ValueError("must be one of enum values ('BILLABLE_OUTCOME_UNSPECIFIED', 'BILLABLE_OUTCOME_PAY_PER_IMPRESSION', 'BILLABLE_OUTCOME_PAY_PER_CLICK', 'BILLABLE_OUTCOME_PAY_PER_VIEWABLE_IMPRESSION')")
        return value

    @field_validator('entity_status')
    def entity_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENTITY_STATUS_UNSPECIFIED', 'ENTITY_STATUS_ACTIVE', 'ENTITY_STATUS_ARCHIVED', 'ENTITY_STATUS_DRAFT', 'ENTITY_STATUS_PAUSED', 'ENTITY_STATUS_SCHEDULED_FOR_DELETION']):
            raise ValueError("must be one of enum values ('ENTITY_STATUS_UNSPECIFIED', 'ENTITY_STATUS_ACTIVE', 'ENTITY_STATUS_ARCHIVED', 'ENTITY_STATUS_DRAFT', 'ENTITY_STATUS_PAUSED', 'ENTITY_STATUS_SCHEDULED_FOR_DELETION')")
        return value

    @field_validator('insertion_order_type')
    def insertion_order_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INSERTION_ORDER_TYPE_UNSPECIFIED', 'RTB', 'OVER_THE_TOP']):
            raise ValueError("must be one of enum values ('INSERTION_ORDER_TYPE_UNSPECIFIED', 'RTB', 'OVER_THE_TOP')")
        return value

    @field_validator('reservation_type')
    def reservation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESERVATION_TYPE_UNSPECIFIED', 'RESERVATION_TYPE_NOT_GUARANTEED', 'RESERVATION_TYPE_PROGRAMMATIC_GUARANTEED', 'RESERVATION_TYPE_TAG_GUARANTEED', 'RESERVATION_TYPE_PETRA_VIRAL', 'RESERVATION_TYPE_INSTANT_RESERVE']):
            raise ValueError("must be one of enum values ('RESERVATION_TYPE_UNSPECIFIED', 'RESERVATION_TYPE_NOT_GUARANTEED', 'RESERVATION_TYPE_PROGRAMMATIC_GUARANTEED', 'RESERVATION_TYPE_TAG_GUARANTEED', 'RESERVATION_TYPE_PETRA_VIRAL', 'RESERVATION_TYPE_INSTANT_RESERVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InsertionOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "advertiser_id",
            "insertion_order_id",
            "name",
            "reservation_type",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bid_strategy
        if self.bid_strategy:
            _dict['bidStrategy'] = self.bid_strategy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of budget
        if self.budget:
            _dict['budget'] = self.budget.to_dict()
        # override the default output from pydantic by calling `to_dict()` of frequency_cap
        if self.frequency_cap:
            _dict['frequencyCap'] = self.frequency_cap.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integration_details
        if self.integration_details:
            _dict['integrationDetails'] = self.integration_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pacing
        if self.pacing:
            _dict['pacing'] = self.pacing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in partner_costs (list)
        _items = []
        if self.partner_costs:
            for _item_partner_costs in self.partner_costs:
                if _item_partner_costs:
                    _items.append(_item_partner_costs.to_dict())
            _dict['partnerCosts'] = _items
        # override the default output from pydantic by calling `to_dict()` of performance_goal
        if self.performance_goal:
            _dict['performanceGoal'] = self.performance_goal.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InsertionOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advertiserId": obj.get("advertiserId"),
            "bidStrategy": BiddingStrategy.from_dict(obj["bidStrategy"]) if obj.get("bidStrategy") is not None else None,
            "billableOutcome": obj.get("billableOutcome"),
            "budget": InsertionOrderBudget.from_dict(obj["budget"]) if obj.get("budget") is not None else None,
            "campaignId": obj.get("campaignId"),
            "displayName": obj.get("displayName"),
            "entityStatus": obj.get("entityStatus"),
            "frequencyCap": FrequencyCap.from_dict(obj["frequencyCap"]) if obj.get("frequencyCap") is not None else None,
            "insertionOrderId": obj.get("insertionOrderId"),
            "insertionOrderType": obj.get("insertionOrderType"),
            "integrationDetails": IntegrationDetails.from_dict(obj["integrationDetails"]) if obj.get("integrationDetails") is not None else None,
            "name": obj.get("name"),
            "pacing": Pacing.from_dict(obj["pacing"]) if obj.get("pacing") is not None else None,
            "partnerCosts": [PartnerCost.from_dict(_item) for _item in obj["partnerCosts"]] if obj.get("partnerCosts") is not None else None,
            "performanceGoal": PerformanceGoal.from_dict(obj["performanceGoal"]) if obj.get("performanceGoal") is not None else None,
            "reservationType": obj.get("reservationType"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



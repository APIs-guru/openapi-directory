# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.frequency_cap import FrequencyCap
from openapi_client.models.target_frequency import TargetFrequency
from openapi_client.models.video_ad_sequence_settings import VideoAdSequenceSettings
from openapi_client.models.youtube_and_partners_bidding_strategy import YoutubeAndPartnersBiddingStrategy
from openapi_client.models.youtube_and_partners_inventory_source_config import YoutubeAndPartnersInventorySourceConfig
from openapi_client.models.youtube_and_partners_third_party_measurement_settings import YoutubeAndPartnersThirdPartyMeasurementSettings
from typing import Optional, Set
from typing_extensions import Self

class YoutubeAndPartnersSettings(BaseModel):
    """
    Settings for YouTube and Partners line items.
    """ # noqa: E501
    bidding_strategy: Optional[YoutubeAndPartnersBiddingStrategy] = Field(default=None, alias="biddingStrategy")
    content_category: Optional[StrictStr] = Field(default=None, description="The kind of content on which the YouTube and Partners ads will be shown.", alias="contentCategory")
    effective_content_category: Optional[StrictStr] = Field(default=None, description="Output only. The content category which takes effect when serving the line item. When content category is set in both line item and advertiser, the stricter one will take effect when serving the line item.", alias="effectiveContentCategory")
    inventory_source_settings: Optional[YoutubeAndPartnersInventorySourceConfig] = Field(default=None, alias="inventorySourceSettings")
    lead_form_id: Optional[StrictStr] = Field(default=None, description="Optional. The ID of the form to generate leads.", alias="leadFormId")
    linked_merchant_id: Optional[StrictStr] = Field(default=None, description="Optional. The ID of the merchant which is linked to the line item for product feed.", alias="linkedMerchantId")
    related_video_ids: Optional[List[StrictStr]] = Field(default=None, description="Optional. The IDs of the videos appear below the primary video ad when the ad is playing in the YouTube app on mobile devices.", alias="relatedVideoIds")
    target_frequency: Optional[TargetFrequency] = Field(default=None, alias="targetFrequency")
    third_party_measurement_settings: Optional[YoutubeAndPartnersThirdPartyMeasurementSettings] = Field(default=None, alias="thirdPartyMeasurementSettings")
    video_ad_sequence_settings: Optional[VideoAdSequenceSettings] = Field(default=None, alias="videoAdSequenceSettings")
    view_frequency_cap: Optional[FrequencyCap] = Field(default=None, alias="viewFrequencyCap")
    __properties: ClassVar[List[str]] = ["biddingStrategy", "contentCategory", "effectiveContentCategory", "inventorySourceSettings", "leadFormId", "linkedMerchantId", "relatedVideoIds", "targetFrequency", "thirdPartyMeasurementSettings", "videoAdSequenceSettings", "viewFrequencyCap"]

    @field_validator('content_category')
    def content_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_UNSPECIFIED', 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_STANDARD', 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_EXPANDED', 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_LIMITED']):
            raise ValueError("must be one of enum values ('YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_UNSPECIFIED', 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_STANDARD', 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_EXPANDED', 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_LIMITED')")
        return value

    @field_validator('effective_content_category')
    def effective_content_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_UNSPECIFIED', 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_STANDARD', 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_EXPANDED', 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_LIMITED']):
            raise ValueError("must be one of enum values ('YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_UNSPECIFIED', 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_STANDARD', 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_EXPANDED', 'YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_LIMITED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of YoutubeAndPartnersSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "effective_content_category",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bidding_strategy
        if self.bidding_strategy:
            _dict['biddingStrategy'] = self.bidding_strategy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inventory_source_settings
        if self.inventory_source_settings:
            _dict['inventorySourceSettings'] = self.inventory_source_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_frequency
        if self.target_frequency:
            _dict['targetFrequency'] = self.target_frequency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of third_party_measurement_settings
        if self.third_party_measurement_settings:
            _dict['thirdPartyMeasurementSettings'] = self.third_party_measurement_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_ad_sequence_settings
        if self.video_ad_sequence_settings:
            _dict['videoAdSequenceSettings'] = self.video_ad_sequence_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of view_frequency_cap
        if self.view_frequency_cap:
            _dict['viewFrequencyCap'] = self.view_frequency_cap.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of YoutubeAndPartnersSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "biddingStrategy": YoutubeAndPartnersBiddingStrategy.from_dict(obj["biddingStrategy"]) if obj.get("biddingStrategy") is not None else None,
            "contentCategory": obj.get("contentCategory"),
            "effectiveContentCategory": obj.get("effectiveContentCategory"),
            "inventorySourceSettings": YoutubeAndPartnersInventorySourceConfig.from_dict(obj["inventorySourceSettings"]) if obj.get("inventorySourceSettings") is not None else None,
            "leadFormId": obj.get("leadFormId"),
            "linkedMerchantId": obj.get("linkedMerchantId"),
            "relatedVideoIds": obj.get("relatedVideoIds"),
            "targetFrequency": TargetFrequency.from_dict(obj["targetFrequency"]) if obj.get("targetFrequency") is not None else None,
            "thirdPartyMeasurementSettings": YoutubeAndPartnersThirdPartyMeasurementSettings.from_dict(obj["thirdPartyMeasurementSettings"]) if obj.get("thirdPartyMeasurementSettings") is not None else None,
            "videoAdSequenceSettings": VideoAdSequenceSettings.from_dict(obj["videoAdSequenceSettings"]) if obj.get("videoAdSequenceSettings") is not None else None,
            "viewFrequencyCap": FrequencyCap.from_dict(obj["viewFrequencyCap"]) if obj.get("viewFrequencyCap") is not None else None
        })
        return _obj



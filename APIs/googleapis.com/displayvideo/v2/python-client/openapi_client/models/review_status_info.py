# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.exchange_review_status import ExchangeReviewStatus
from openapi_client.models.publisher_review_status import PublisherReviewStatus
from typing import Optional, Set
from typing_extensions import Self

class ReviewStatusInfo(BaseModel):
    """
    Review statuses for the creative.
    """ # noqa: E501
    approval_status: Optional[StrictStr] = Field(default=None, description="Represents the basic approval needed for a creative to begin serving. Summary of creative_and_landing_page_review_status and content_and_policy_review_status.", alias="approvalStatus")
    content_and_policy_review_status: Optional[StrictStr] = Field(default=None, description="Content and policy review status for the creative.", alias="contentAndPolicyReviewStatus")
    creative_and_landing_page_review_status: Optional[StrictStr] = Field(default=None, description="Creative and landing page review status for the creative.", alias="creativeAndLandingPageReviewStatus")
    exchange_review_statuses: Optional[List[ExchangeReviewStatus]] = Field(default=None, description="Exchange review statuses for the creative.", alias="exchangeReviewStatuses")
    publisher_review_statuses: Optional[List[PublisherReviewStatus]] = Field(default=None, description="Publisher review statuses for the creative.", alias="publisherReviewStatuses")
    __properties: ClassVar[List[str]] = ["approvalStatus", "contentAndPolicyReviewStatus", "creativeAndLandingPageReviewStatus", "exchangeReviewStatuses", "publisherReviewStatuses"]

    @field_validator('approval_status')
    def approval_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APPROVAL_STATUS_UNSPECIFIED', 'APPROVAL_STATUS_PENDING_NOT_SERVABLE', 'APPROVAL_STATUS_PENDING_SERVABLE', 'APPROVAL_STATUS_APPROVED_SERVABLE', 'APPROVAL_STATUS_REJECTED_NOT_SERVABLE']):
            raise ValueError("must be one of enum values ('APPROVAL_STATUS_UNSPECIFIED', 'APPROVAL_STATUS_PENDING_NOT_SERVABLE', 'APPROVAL_STATUS_PENDING_SERVABLE', 'APPROVAL_STATUS_APPROVED_SERVABLE', 'APPROVAL_STATUS_REJECTED_NOT_SERVABLE')")
        return value

    @field_validator('content_and_policy_review_status')
    def content_and_policy_review_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REVIEW_STATUS_UNSPECIFIED', 'REVIEW_STATUS_APPROVED', 'REVIEW_STATUS_REJECTED', 'REVIEW_STATUS_PENDING']):
            raise ValueError("must be one of enum values ('REVIEW_STATUS_UNSPECIFIED', 'REVIEW_STATUS_APPROVED', 'REVIEW_STATUS_REJECTED', 'REVIEW_STATUS_PENDING')")
        return value

    @field_validator('creative_and_landing_page_review_status')
    def creative_and_landing_page_review_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REVIEW_STATUS_UNSPECIFIED', 'REVIEW_STATUS_APPROVED', 'REVIEW_STATUS_REJECTED', 'REVIEW_STATUS_PENDING']):
            raise ValueError("must be one of enum values ('REVIEW_STATUS_UNSPECIFIED', 'REVIEW_STATUS_APPROVED', 'REVIEW_STATUS_REJECTED', 'REVIEW_STATUS_PENDING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReviewStatusInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in exchange_review_statuses (list)
        _items = []
        if self.exchange_review_statuses:
            for _item_exchange_review_statuses in self.exchange_review_statuses:
                if _item_exchange_review_statuses:
                    _items.append(_item_exchange_review_statuses.to_dict())
            _dict['exchangeReviewStatuses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in publisher_review_statuses (list)
        _items = []
        if self.publisher_review_statuses:
            for _item_publisher_review_statuses in self.publisher_review_statuses:
                if _item_publisher_review_statuses:
                    _items.append(_item_publisher_review_statuses.to_dict())
            _dict['publisherReviewStatuses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReviewStatusInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approvalStatus": obj.get("approvalStatus"),
            "contentAndPolicyReviewStatus": obj.get("contentAndPolicyReviewStatus"),
            "creativeAndLandingPageReviewStatus": obj.get("creativeAndLandingPageReviewStatus"),
            "exchangeReviewStatuses": [ExchangeReviewStatus.from_dict(_item) for _item in obj["exchangeReviewStatuses"]] if obj.get("exchangeReviewStatuses") is not None else None,
            "publisherReviewStatuses": [PublisherReviewStatus.from_dict(_item) for _item in obj["publisherReviewStatuses"]] if obj.get("publisherReviewStatuses") is not None else None
        })
        return _obj



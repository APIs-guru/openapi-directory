# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.remarketing_config import RemarketingConfig
from typing import Optional, Set
from typing_extensions import Self

class FloodlightActivity(BaseModel):
    """
    A single Floodlight activity.
    """ # noqa: E501
    advertiser_ids: Optional[List[StrictStr]] = Field(default=None, description="Output only. IDs of the advertisers that have access to the parent Floodlight group. Only advertisers under the provided partner ID will be listed in this field.", alias="advertiserIds")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the Floodlight activity.", alias="displayName")
    floodlight_activity_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique ID of the Floodlight activity. Assigned by the system.", alias="floodlightActivityId")
    floodlight_group_id: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The ID of the parent Floodlight group.", alias="floodlightGroupId")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the Floodlight activity.")
    remarketing_configs: Optional[List[RemarketingConfig]] = Field(default=None, description="Output only. A list of configuration objects designating whether remarketing for this Floodlight Activity is enabled and available for a specifc advertiser. If enabled, this Floodlight Activity generates a remarketing user list that is able to be used in targeting under the advertiser.", alias="remarketingConfigs")
    serving_status: Optional[StrictStr] = Field(default=None, description="Optional. Whether the Floodlight activity is served.", alias="servingStatus")
    ssl_required: Optional[StrictBool] = Field(default=None, description="Output only. Whether tags are required to be compliant.", alias="sslRequired")
    __properties: ClassVar[List[str]] = ["advertiserIds", "displayName", "floodlightActivityId", "floodlightGroupId", "name", "remarketingConfigs", "servingStatus", "sslRequired"]

    @field_validator('serving_status')
    def serving_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FLOODLIGHT_ACTIVITY_SERVING_STATUS_UNSPECIFIED', 'FLOODLIGHT_ACTIVITY_SERVING_STATUS_ENABLED', 'FLOODLIGHT_ACTIVITY_SERVING_STATUS_DISABLED']):
            raise ValueError("must be one of enum values ('FLOODLIGHT_ACTIVITY_SERVING_STATUS_UNSPECIFIED', 'FLOODLIGHT_ACTIVITY_SERVING_STATUS_ENABLED', 'FLOODLIGHT_ACTIVITY_SERVING_STATUS_DISABLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FloodlightActivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "advertiser_ids",
            "floodlight_activity_id",
            "name",
            "remarketing_configs",
            "ssl_required",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in remarketing_configs (list)
        _items = []
        if self.remarketing_configs:
            for _item_remarketing_configs in self.remarketing_configs:
                if _item_remarketing_configs:
                    _items.append(_item_remarketing_configs.to_dict())
            _dict['remarketingConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FloodlightActivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advertiserIds": obj.get("advertiserIds"),
            "displayName": obj.get("displayName"),
            "floodlightActivityId": obj.get("floodlightActivityId"),
            "floodlightGroupId": obj.get("floodlightGroupId"),
            "name": obj.get("name"),
            "remarketingConfigs": [RemarketingConfig.from_dict(_item) for _item in obj["remarketingConfigs"]] if obj.get("remarketingConfigs") is not None else None,
            "servingStatus": obj.get("servingStatus"),
            "sslRequired": obj.get("sslRequired")
        })
        return _obj



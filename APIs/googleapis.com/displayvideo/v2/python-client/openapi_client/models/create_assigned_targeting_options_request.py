# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.assigned_targeting_option import AssignedTargetingOption
from typing import Optional, Set
from typing_extensions import Self

class CreateAssignedTargetingOptionsRequest(BaseModel):
    """
    A request listing which assigned targeting options of a given targeting type should be created and added.
    """ # noqa: E501
    assigned_targeting_options: Optional[List[AssignedTargetingOption]] = Field(default=None, description="Required. The assigned targeting options to create and add.", alias="assignedTargetingOptions")
    targeting_type: Optional[StrictStr] = Field(default=None, description="Required. Identifies the type of this assigned targeting option.", alias="targetingType")
    __properties: ClassVar[List[str]] = ["assignedTargetingOptions", "targetingType"]

    @field_validator('targeting_type')
    def targeting_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TARGETING_TYPE_UNSPECIFIED', 'TARGETING_TYPE_CHANNEL', 'TARGETING_TYPE_APP_CATEGORY', 'TARGETING_TYPE_APP', 'TARGETING_TYPE_URL', 'TARGETING_TYPE_DAY_AND_TIME', 'TARGETING_TYPE_AGE_RANGE', 'TARGETING_TYPE_REGIONAL_LOCATION_LIST', 'TARGETING_TYPE_PROXIMITY_LOCATION_LIST', 'TARGETING_TYPE_GENDER', 'TARGETING_TYPE_VIDEO_PLAYER_SIZE', 'TARGETING_TYPE_USER_REWARDED_CONTENT', 'TARGETING_TYPE_PARENTAL_STATUS', 'TARGETING_TYPE_CONTENT_INSTREAM_POSITION', 'TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION', 'TARGETING_TYPE_DEVICE_TYPE', 'TARGETING_TYPE_AUDIENCE_GROUP', 'TARGETING_TYPE_BROWSER', 'TARGETING_TYPE_HOUSEHOLD_INCOME', 'TARGETING_TYPE_ON_SCREEN_POSITION', 'TARGETING_TYPE_THIRD_PARTY_VERIFIER', 'TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION', 'TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION', 'TARGETING_TYPE_ENVIRONMENT', 'TARGETING_TYPE_CARRIER_AND_ISP', 'TARGETING_TYPE_OPERATING_SYSTEM', 'TARGETING_TYPE_DEVICE_MAKE_MODEL', 'TARGETING_TYPE_KEYWORD', 'TARGETING_TYPE_NEGATIVE_KEYWORD_LIST', 'TARGETING_TYPE_VIEWABILITY', 'TARGETING_TYPE_CATEGORY', 'TARGETING_TYPE_INVENTORY_SOURCE', 'TARGETING_TYPE_LANGUAGE', 'TARGETING_TYPE_AUTHORIZED_SELLER_STATUS', 'TARGETING_TYPE_GEO_REGION', 'TARGETING_TYPE_INVENTORY_SOURCE_GROUP', 'TARGETING_TYPE_EXCHANGE', 'TARGETING_TYPE_SUB_EXCHANGE', 'TARGETING_TYPE_POI', 'TARGETING_TYPE_BUSINESS_CHAIN', 'TARGETING_TYPE_CONTENT_DURATION', 'TARGETING_TYPE_CONTENT_STREAM_TYPE', 'TARGETING_TYPE_NATIVE_CONTENT_POSITION', 'TARGETING_TYPE_OMID', 'TARGETING_TYPE_AUDIO_CONTENT_TYPE', 'TARGETING_TYPE_CONTENT_GENRE', 'TARGETING_TYPE_YOUTUBE_VIDEO', 'TARGETING_TYPE_YOUTUBE_CHANNEL', 'TARGETING_TYPE_SESSION_POSITION']):
            raise ValueError("must be one of enum values ('TARGETING_TYPE_UNSPECIFIED', 'TARGETING_TYPE_CHANNEL', 'TARGETING_TYPE_APP_CATEGORY', 'TARGETING_TYPE_APP', 'TARGETING_TYPE_URL', 'TARGETING_TYPE_DAY_AND_TIME', 'TARGETING_TYPE_AGE_RANGE', 'TARGETING_TYPE_REGIONAL_LOCATION_LIST', 'TARGETING_TYPE_PROXIMITY_LOCATION_LIST', 'TARGETING_TYPE_GENDER', 'TARGETING_TYPE_VIDEO_PLAYER_SIZE', 'TARGETING_TYPE_USER_REWARDED_CONTENT', 'TARGETING_TYPE_PARENTAL_STATUS', 'TARGETING_TYPE_CONTENT_INSTREAM_POSITION', 'TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION', 'TARGETING_TYPE_DEVICE_TYPE', 'TARGETING_TYPE_AUDIENCE_GROUP', 'TARGETING_TYPE_BROWSER', 'TARGETING_TYPE_HOUSEHOLD_INCOME', 'TARGETING_TYPE_ON_SCREEN_POSITION', 'TARGETING_TYPE_THIRD_PARTY_VERIFIER', 'TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION', 'TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION', 'TARGETING_TYPE_ENVIRONMENT', 'TARGETING_TYPE_CARRIER_AND_ISP', 'TARGETING_TYPE_OPERATING_SYSTEM', 'TARGETING_TYPE_DEVICE_MAKE_MODEL', 'TARGETING_TYPE_KEYWORD', 'TARGETING_TYPE_NEGATIVE_KEYWORD_LIST', 'TARGETING_TYPE_VIEWABILITY', 'TARGETING_TYPE_CATEGORY', 'TARGETING_TYPE_INVENTORY_SOURCE', 'TARGETING_TYPE_LANGUAGE', 'TARGETING_TYPE_AUTHORIZED_SELLER_STATUS', 'TARGETING_TYPE_GEO_REGION', 'TARGETING_TYPE_INVENTORY_SOURCE_GROUP', 'TARGETING_TYPE_EXCHANGE', 'TARGETING_TYPE_SUB_EXCHANGE', 'TARGETING_TYPE_POI', 'TARGETING_TYPE_BUSINESS_CHAIN', 'TARGETING_TYPE_CONTENT_DURATION', 'TARGETING_TYPE_CONTENT_STREAM_TYPE', 'TARGETING_TYPE_NATIVE_CONTENT_POSITION', 'TARGETING_TYPE_OMID', 'TARGETING_TYPE_AUDIO_CONTENT_TYPE', 'TARGETING_TYPE_CONTENT_GENRE', 'TARGETING_TYPE_YOUTUBE_VIDEO', 'TARGETING_TYPE_YOUTUBE_CHANNEL', 'TARGETING_TYPE_SESSION_POSITION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAssignedTargetingOptionsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assigned_targeting_options (list)
        _items = []
        if self.assigned_targeting_options:
            for _item_assigned_targeting_options in self.assigned_targeting_options:
                if _item_assigned_targeting_options:
                    _items.append(_item_assigned_targeting_options.to_dict())
            _dict['assignedTargetingOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAssignedTargetingOptionsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assignedTargetingOptions": [AssignedTargetingOption.from_dict(_item) for _item in obj["assignedTargetingOptions"]] if obj.get("assignedTargetingOptions") is not None else None,
            "targetingType": obj.get("targetingType")
        })
        return _obj



# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IntegralAdScience(BaseModel):
    """
    Details of Integral Ad Science settings.
    """ # noqa: E501
    custom_segment_id: Optional[List[StrictStr]] = Field(default=None, description="The custom segment ID provided by Integral Ad Science. The ID must be between `1000001` and `1999999`, inclusive.", alias="customSegmentId")
    display_viewability: Optional[StrictStr] = Field(default=None, description="Display Viewability section (applicable to display line items only).", alias="displayViewability")
    exclude_unrateable: Optional[StrictBool] = Field(default=None, description="Brand Safety - **Unrateable**.", alias="excludeUnrateable")
    excluded_ad_fraud_risk: Optional[StrictStr] = Field(default=None, description="Ad Fraud settings.", alias="excludedAdFraudRisk")
    excluded_adult_risk: Optional[StrictStr] = Field(default=None, description="Brand Safety - **Adult content**.", alias="excludedAdultRisk")
    excluded_alcohol_risk: Optional[StrictStr] = Field(default=None, description="Brand Safety - **Alcohol**.", alias="excludedAlcoholRisk")
    excluded_drugs_risk: Optional[StrictStr] = Field(default=None, description="Brand Safety - **Drugs**.", alias="excludedDrugsRisk")
    excluded_gambling_risk: Optional[StrictStr] = Field(default=None, description="Brand Safety - **Gambling**.", alias="excludedGamblingRisk")
    excluded_hate_speech_risk: Optional[StrictStr] = Field(default=None, description="Brand Safety - **Hate speech**.", alias="excludedHateSpeechRisk")
    excluded_illegal_downloads_risk: Optional[StrictStr] = Field(default=None, description="Brand Safety - **Illegal downloads**.", alias="excludedIllegalDownloadsRisk")
    excluded_offensive_language_risk: Optional[StrictStr] = Field(default=None, description="Brand Safety - **Offensive language**.", alias="excludedOffensiveLanguageRisk")
    excluded_violence_risk: Optional[StrictStr] = Field(default=None, description="Brand Safety - **Violence**.", alias="excludedViolenceRisk")
    traq_score_option: Optional[StrictStr] = Field(default=None, description="True advertising quality (applicable to Display line items only).", alias="traqScoreOption")
    video_viewability: Optional[StrictStr] = Field(default=None, description="Video Viewability Section (applicable to video line items only).", alias="videoViewability")
    __properties: ClassVar[List[str]] = ["customSegmentId", "displayViewability", "excludeUnrateable", "excludedAdFraudRisk", "excludedAdultRisk", "excludedAlcoholRisk", "excludedDrugsRisk", "excludedGamblingRisk", "excludedHateSpeechRisk", "excludedIllegalDownloadsRisk", "excludedOffensiveLanguageRisk", "excludedViolenceRisk", "traqScoreOption", "videoViewability"]

    @field_validator('display_viewability')
    def display_viewability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PERFORMANCE_VIEWABILITY_UNSPECIFIED', 'PERFORMANCE_VIEWABILITY_40', 'PERFORMANCE_VIEWABILITY_50', 'PERFORMANCE_VIEWABILITY_60', 'PERFORMANCE_VIEWABILITY_70']):
            raise ValueError("must be one of enum values ('PERFORMANCE_VIEWABILITY_UNSPECIFIED', 'PERFORMANCE_VIEWABILITY_40', 'PERFORMANCE_VIEWABILITY_50', 'PERFORMANCE_VIEWABILITY_60', 'PERFORMANCE_VIEWABILITY_70')")
        return value

    @field_validator('excluded_ad_fraud_risk')
    def excluded_ad_fraud_risk_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SUSPICIOUS_ACTIVITY_UNSPECIFIED', 'SUSPICIOUS_ACTIVITY_HR', 'SUSPICIOUS_ACTIVITY_HMR']):
            raise ValueError("must be one of enum values ('SUSPICIOUS_ACTIVITY_UNSPECIFIED', 'SUSPICIOUS_ACTIVITY_HR', 'SUSPICIOUS_ACTIVITY_HMR')")
        return value

    @field_validator('excluded_adult_risk')
    def excluded_adult_risk_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ADULT_UNSPECIFIED', 'ADULT_HR', 'ADULT_HMR']):
            raise ValueError("must be one of enum values ('ADULT_UNSPECIFIED', 'ADULT_HR', 'ADULT_HMR')")
        return value

    @field_validator('excluded_alcohol_risk')
    def excluded_alcohol_risk_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALCOHOL_UNSPECIFIED', 'ALCOHOL_HR', 'ALCOHOL_HMR']):
            raise ValueError("must be one of enum values ('ALCOHOL_UNSPECIFIED', 'ALCOHOL_HR', 'ALCOHOL_HMR')")
        return value

    @field_validator('excluded_drugs_risk')
    def excluded_drugs_risk_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DRUGS_UNSPECIFIED', 'DRUGS_HR', 'DRUGS_HMR']):
            raise ValueError("must be one of enum values ('DRUGS_UNSPECIFIED', 'DRUGS_HR', 'DRUGS_HMR')")
        return value

    @field_validator('excluded_gambling_risk')
    def excluded_gambling_risk_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GAMBLING_UNSPECIFIED', 'GAMBLING_HR', 'GAMBLING_HMR']):
            raise ValueError("must be one of enum values ('GAMBLING_UNSPECIFIED', 'GAMBLING_HR', 'GAMBLING_HMR')")
        return value

    @field_validator('excluded_hate_speech_risk')
    def excluded_hate_speech_risk_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HATE_SPEECH_UNSPECIFIED', 'HATE_SPEECH_HR', 'HATE_SPEECH_HMR']):
            raise ValueError("must be one of enum values ('HATE_SPEECH_UNSPECIFIED', 'HATE_SPEECH_HR', 'HATE_SPEECH_HMR')")
        return value

    @field_validator('excluded_illegal_downloads_risk')
    def excluded_illegal_downloads_risk_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ILLEGAL_DOWNLOADS_UNSPECIFIED', 'ILLEGAL_DOWNLOADS_HR', 'ILLEGAL_DOWNLOADS_HMR']):
            raise ValueError("must be one of enum values ('ILLEGAL_DOWNLOADS_UNSPECIFIED', 'ILLEGAL_DOWNLOADS_HR', 'ILLEGAL_DOWNLOADS_HMR')")
        return value

    @field_validator('excluded_offensive_language_risk')
    def excluded_offensive_language_risk_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OFFENSIVE_LANGUAGE_UNSPECIFIED', 'OFFENSIVE_LANGUAGE_HR', 'OFFENSIVE_LANGUAGE_HMR']):
            raise ValueError("must be one of enum values ('OFFENSIVE_LANGUAGE_UNSPECIFIED', 'OFFENSIVE_LANGUAGE_HR', 'OFFENSIVE_LANGUAGE_HMR')")
        return value

    @field_validator('excluded_violence_risk')
    def excluded_violence_risk_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VIOLENCE_UNSPECIFIED', 'VIOLENCE_HR', 'VIOLENCE_HMR']):
            raise ValueError("must be one of enum values ('VIOLENCE_UNSPECIFIED', 'VIOLENCE_HR', 'VIOLENCE_HMR')")
        return value

    @field_validator('traq_score_option')
    def traq_score_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRAQ_UNSPECIFIED', 'TRAQ_250', 'TRAQ_500', 'TRAQ_600', 'TRAQ_700', 'TRAQ_750', 'TRAQ_875', 'TRAQ_1000']):
            raise ValueError("must be one of enum values ('TRAQ_UNSPECIFIED', 'TRAQ_250', 'TRAQ_500', 'TRAQ_600', 'TRAQ_700', 'TRAQ_750', 'TRAQ_875', 'TRAQ_1000')")
        return value

    @field_validator('video_viewability')
    def video_viewability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VIDEO_VIEWABILITY_UNSPECIFIED', 'VIDEO_VIEWABILITY_40', 'VIDEO_VIEWABILITY_50', 'VIDEO_VIEWABILITY_60', 'VIDEO_VIEWABILITY_70']):
            raise ValueError("must be one of enum values ('VIDEO_VIEWABILITY_UNSPECIFIED', 'VIDEO_VIEWABILITY_40', 'VIDEO_VIEWABILITY_50', 'VIDEO_VIEWABILITY_60', 'VIDEO_VIEWABILITY_70')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntegralAdScience from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntegralAdScience from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customSegmentId": obj.get("customSegmentId"),
            "displayViewability": obj.get("displayViewability"),
            "excludeUnrateable": obj.get("excludeUnrateable"),
            "excludedAdFraudRisk": obj.get("excludedAdFraudRisk"),
            "excludedAdultRisk": obj.get("excludedAdultRisk"),
            "excludedAlcoholRisk": obj.get("excludedAlcoholRisk"),
            "excludedDrugsRisk": obj.get("excludedDrugsRisk"),
            "excludedGamblingRisk": obj.get("excludedGamblingRisk"),
            "excludedHateSpeechRisk": obj.get("excludedHateSpeechRisk"),
            "excludedIllegalDownloadsRisk": obj.get("excludedIllegalDownloadsRisk"),
            "excludedOffensiveLanguageRisk": obj.get("excludedOffensiveLanguageRisk"),
            "excludedViolenceRisk": obj.get("excludedViolenceRisk"),
            "traqScoreOption": obj.get("traqScoreOption"),
            "videoViewability": obj.get("videoViewability")
        })
        return _obj



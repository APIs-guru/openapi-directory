# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.money import Money
from typing import Optional, Set
from typing_extensions import Self

class RateDetails(BaseModel):
    """
    The rate related settings of the inventory source.
    """ # noqa: E501
    inventory_source_rate_type: Optional[StrictStr] = Field(default=None, description="The rate type. Acceptable values are `INVENTORY_SOURCE_RATE_TYPE_CPM_FIXED`, `INVENTORY_SOURCE_RATE_TYPE_CPM_FLOOR`, and `INVENTORY_SOURCE_RATE_TYPE_CPD`.", alias="inventorySourceRateType")
    minimum_spend: Optional[Money] = Field(default=None, alias="minimumSpend")
    rate: Optional[Money] = None
    units_purchased: Optional[StrictStr] = Field(default=None, description="Required for guaranteed inventory sources. The number of impressions guaranteed by the seller.", alias="unitsPurchased")
    __properties: ClassVar[List[str]] = ["inventorySourceRateType", "minimumSpend", "rate", "unitsPurchased"]

    @field_validator('inventory_source_rate_type')
    def inventory_source_rate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INVENTORY_SOURCE_RATE_TYPE_UNSPECIFIED', 'INVENTORY_SOURCE_RATE_TYPE_CPM_FIXED', 'INVENTORY_SOURCE_RATE_TYPE_CPM_FLOOR', 'INVENTORY_SOURCE_RATE_TYPE_CPD', 'INVENTORY_SOURCE_RATE_TYPE_FLAT']):
            raise ValueError("must be one of enum values ('INVENTORY_SOURCE_RATE_TYPE_UNSPECIFIED', 'INVENTORY_SOURCE_RATE_TYPE_CPM_FIXED', 'INVENTORY_SOURCE_RATE_TYPE_CPM_FLOOR', 'INVENTORY_SOURCE_RATE_TYPE_CPD', 'INVENTORY_SOURCE_RATE_TYPE_FLAT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RateDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of minimum_spend
        if self.minimum_spend:
            _dict['minimumSpend'] = self.minimum_spend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rate
        if self.rate:
            _dict['rate'] = self.rate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RateDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inventorySourceRateType": obj.get("inventorySourceRateType"),
            "minimumSpend": Money.from_dict(obj["minimumSpend"]) if obj.get("minimumSpend") is not None else None,
            "rate": Money.from_dict(obj["rate"]) if obj.get("rate") is not None else None,
            "unitsPurchased": obj.get("unitsPurchased")
        })
        return _obj



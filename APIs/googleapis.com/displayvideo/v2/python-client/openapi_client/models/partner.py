# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.exchange_config import ExchangeConfig
from openapi_client.models.partner_ad_server_config import PartnerAdServerConfig
from openapi_client.models.partner_data_access_config import PartnerDataAccessConfig
from openapi_client.models.partner_general_config import PartnerGeneralConfig
from typing import Optional, Set
from typing_extensions import Self

class Partner(BaseModel):
    """
    A single partner in Display & Video 360 (DV360).
    """ # noqa: E501
    ad_server_config: Optional[PartnerAdServerConfig] = Field(default=None, alias="adServerConfig")
    data_access_config: Optional[PartnerDataAccessConfig] = Field(default=None, alias="dataAccessConfig")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the partner. Must be UTF-8 encoded with a maximum size of 240 bytes.", alias="displayName")
    entity_status: Optional[StrictStr] = Field(default=None, description="Output only. The status of the partner.", alias="entityStatus")
    exchange_config: Optional[ExchangeConfig] = Field(default=None, alias="exchangeConfig")
    general_config: Optional[PartnerGeneralConfig] = Field(default=None, alias="generalConfig")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the partner.")
    partner_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique ID of the partner. Assigned by the system.", alias="partnerId")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the partner was last updated. Assigned by the system.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["adServerConfig", "dataAccessConfig", "displayName", "entityStatus", "exchangeConfig", "generalConfig", "name", "partnerId", "updateTime"]

    @field_validator('entity_status')
    def entity_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENTITY_STATUS_UNSPECIFIED', 'ENTITY_STATUS_ACTIVE', 'ENTITY_STATUS_ARCHIVED', 'ENTITY_STATUS_DRAFT', 'ENTITY_STATUS_PAUSED', 'ENTITY_STATUS_SCHEDULED_FOR_DELETION']):
            raise ValueError("must be one of enum values ('ENTITY_STATUS_UNSPECIFIED', 'ENTITY_STATUS_ACTIVE', 'ENTITY_STATUS_ARCHIVED', 'ENTITY_STATUS_DRAFT', 'ENTITY_STATUS_PAUSED', 'ENTITY_STATUS_SCHEDULED_FOR_DELETION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Partner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "entity_status",
            "name",
            "partner_id",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ad_server_config
        if self.ad_server_config:
            _dict['adServerConfig'] = self.ad_server_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_access_config
        if self.data_access_config:
            _dict['dataAccessConfig'] = self.data_access_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exchange_config
        if self.exchange_config:
            _dict['exchangeConfig'] = self.exchange_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of general_config
        if self.general_config:
            _dict['generalConfig'] = self.general_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Partner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adServerConfig": PartnerAdServerConfig.from_dict(obj["adServerConfig"]) if obj.get("adServerConfig") is not None else None,
            "dataAccessConfig": PartnerDataAccessConfig.from_dict(obj["dataAccessConfig"]) if obj.get("dataAccessConfig") is not None else None,
            "displayName": obj.get("displayName"),
            "entityStatus": obj.get("entityStatus"),
            "exchangeConfig": ExchangeConfig.from_dict(obj["exchangeConfig"]) if obj.get("exchangeConfig") is not None else None,
            "generalConfig": PartnerGeneralConfig.from_dict(obj["generalConfig"]) if obj.get("generalConfig") is not None else None,
            "name": obj.get("name"),
            "partnerId": obj.get("partnerId"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



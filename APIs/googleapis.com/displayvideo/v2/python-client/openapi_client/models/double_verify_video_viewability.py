# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DoubleVerifyVideoViewability(BaseModel):
    """
    Details of DoubleVerify video viewability settings.
    """ # noqa: E501
    player_impression_rate: Optional[StrictStr] = Field(default=None, description="Target inventory to maximize impressions with 400x300 or greater player size.", alias="playerImpressionRate")
    video_iab: Optional[StrictStr] = Field(default=None, description="Target web inventory to maximize IAB viewable rate.", alias="videoIab")
    video_viewable_rate: Optional[StrictStr] = Field(default=None, description="Target web inventory to maximize fully viewable rate.", alias="videoViewableRate")
    __properties: ClassVar[List[str]] = ["playerImpressionRate", "videoIab", "videoViewableRate"]

    @field_validator('player_impression_rate')
    def player_impression_rate_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLAYER_SIZE_400X300_UNSPECIFIED', 'PLAYER_SIZE_400X300_95', 'PLAYER_SIZE_400X300_70', 'PLAYER_SIZE_400X300_25', 'PLAYER_SIZE_400X300_5']):
            raise ValueError("must be one of enum values ('PLAYER_SIZE_400X300_UNSPECIFIED', 'PLAYER_SIZE_400X300_95', 'PLAYER_SIZE_400X300_70', 'PLAYER_SIZE_400X300_25', 'PLAYER_SIZE_400X300_5')")
        return value

    @field_validator('video_iab')
    def video_iab_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VIDEO_IAB_UNSPECIFIED', 'IAB_VIEWABILITY_80_PERCENT_HIGHER', 'IAB_VIEWABILITY_75_PERCENT_HIGHER', 'IAB_VIEWABILITY_70_PERCENT_HIGHER', 'IAB_VIEWABILITY_65_PERCENT_HIHGER', 'IAB_VIEWABILITY_60_PERCENT_HIGHER', 'IAB_VIEWABILITY_55_PERCENT_HIHGER', 'IAB_VIEWABILITY_50_PERCENT_HIGHER', 'IAB_VIEWABILITY_40_PERCENT_HIHGER', 'IAB_VIEWABILITY_30_PERCENT_HIHGER']):
            raise ValueError("must be one of enum values ('VIDEO_IAB_UNSPECIFIED', 'IAB_VIEWABILITY_80_PERCENT_HIGHER', 'IAB_VIEWABILITY_75_PERCENT_HIGHER', 'IAB_VIEWABILITY_70_PERCENT_HIGHER', 'IAB_VIEWABILITY_65_PERCENT_HIHGER', 'IAB_VIEWABILITY_60_PERCENT_HIGHER', 'IAB_VIEWABILITY_55_PERCENT_HIHGER', 'IAB_VIEWABILITY_50_PERCENT_HIGHER', 'IAB_VIEWABILITY_40_PERCENT_HIHGER', 'IAB_VIEWABILITY_30_PERCENT_HIHGER')")
        return value

    @field_validator('video_viewable_rate')
    def video_viewable_rate_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VIDEO_VIEWABLE_RATE_UNSPECIFIED', 'VIEWED_PERFORMANCE_40_PERCENT_HIGHER', 'VIEWED_PERFORMANCE_35_PERCENT_HIGHER', 'VIEWED_PERFORMANCE_30_PERCENT_HIGHER', 'VIEWED_PERFORMANCE_25_PERCENT_HIGHER', 'VIEWED_PERFORMANCE_20_PERCENT_HIGHER', 'VIEWED_PERFORMANCE_10_PERCENT_HIGHER']):
            raise ValueError("must be one of enum values ('VIDEO_VIEWABLE_RATE_UNSPECIFIED', 'VIEWED_PERFORMANCE_40_PERCENT_HIGHER', 'VIEWED_PERFORMANCE_35_PERCENT_HIGHER', 'VIEWED_PERFORMANCE_30_PERCENT_HIGHER', 'VIEWED_PERFORMANCE_25_PERCENT_HIGHER', 'VIEWED_PERFORMANCE_20_PERCENT_HIGHER', 'VIEWED_PERFORMANCE_10_PERCENT_HIGHER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DoubleVerifyVideoViewability from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DoubleVerifyVideoViewability from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "playerImpressionRate": obj.get("playerImpressionRate"),
            "videoIab": obj.get("videoIab"),
            "videoViewableRate": obj.get("videoViewableRate")
        })
        return _obj



# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.id_filter import IdFilter
from openapi_client.models.inventory_source_filter import InventorySourceFilter
from openapi_client.models.parent_entity_filter import ParentEntityFilter
from typing import Optional, Set
from typing_extensions import Self

class CreateSdfDownloadTaskRequest(BaseModel):
    """
    Request message for [SdfDownloadTaskService.CreateSdfDownloadTask].
    """ # noqa: E501
    advertiser_id: Optional[StrictStr] = Field(default=None, description="The ID of the advertiser to download SDF for.", alias="advertiserId")
    id_filter: Optional[IdFilter] = Field(default=None, alias="idFilter")
    inventory_source_filter: Optional[InventorySourceFilter] = Field(default=None, alias="inventorySourceFilter")
    parent_entity_filter: Optional[ParentEntityFilter] = Field(default=None, alias="parentEntityFilter")
    partner_id: Optional[StrictStr] = Field(default=None, description="The ID of the partner to download SDF for.", alias="partnerId")
    version: Optional[StrictStr] = Field(default=None, description="Required. The SDF version of the downloaded file. If set to `SDF_VERSION_UNSPECIFIED`, this will default to the version specified by the advertiser or partner identified by `root_id`. An advertiser inherits its SDF version from its partner unless configured otherwise.")
    __properties: ClassVar[List[str]] = ["advertiserId", "idFilter", "inventorySourceFilter", "parentEntityFilter", "partnerId", "version"]

    @field_validator('version')
    def version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SDF_VERSION_UNSPECIFIED', 'SDF_VERSION_3_1', 'SDF_VERSION_4', 'SDF_VERSION_4_1', 'SDF_VERSION_4_2', 'SDF_VERSION_5', 'SDF_VERSION_5_1', 'SDF_VERSION_5_2', 'SDF_VERSION_5_3', 'SDF_VERSION_5_4', 'SDF_VERSION_5_5', 'SDF_VERSION_6', 'SDF_VERSION_7']):
            raise ValueError("must be one of enum values ('SDF_VERSION_UNSPECIFIED', 'SDF_VERSION_3_1', 'SDF_VERSION_4', 'SDF_VERSION_4_1', 'SDF_VERSION_4_2', 'SDF_VERSION_5', 'SDF_VERSION_5_1', 'SDF_VERSION_5_2', 'SDF_VERSION_5_3', 'SDF_VERSION_5_4', 'SDF_VERSION_5_5', 'SDF_VERSION_6', 'SDF_VERSION_7')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateSdfDownloadTaskRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id_filter
        if self.id_filter:
            _dict['idFilter'] = self.id_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inventory_source_filter
        if self.inventory_source_filter:
            _dict['inventorySourceFilter'] = self.inventory_source_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_entity_filter
        if self.parent_entity_filter:
            _dict['parentEntityFilter'] = self.parent_entity_filter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateSdfDownloadTaskRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advertiserId": obj.get("advertiserId"),
            "idFilter": IdFilter.from_dict(obj["idFilter"]) if obj.get("idFilter") is not None else None,
            "inventorySourceFilter": InventorySourceFilter.from_dict(obj["inventorySourceFilter"]) if obj.get("inventorySourceFilter") is not None else None,
            "parentEntityFilter": ParentEntityFilter.from_dict(obj["parentEntityFilter"]) if obj.get("parentEntityFilter") is not None else None,
            "partnerId": obj.get("partnerId"),
            "version": obj.get("version")
        })
        return _obj



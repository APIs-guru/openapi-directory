# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.tracking_floodlight_activity_config import TrackingFloodlightActivityConfig
from typing import Optional, Set
from typing_extensions import Self

class ConversionCountingConfig(BaseModel):
    """
    Settings that control how conversions are counted. All post-click conversions will be counted. A percentage value can be set for post-view conversions counting.
    """ # noqa: E501
    floodlight_activity_configs: Optional[List[TrackingFloodlightActivityConfig]] = Field(default=None, description="The Floodlight activity configs used to track conversions. The number of conversions counted is the sum of all of the conversions counted by all of the Floodlight activity IDs specified in this field.", alias="floodlightActivityConfigs")
    post_view_count_percentage_millis: Optional[StrictStr] = Field(default=None, description="The percentage of post-view conversions to count, in millis (1/1000 of a percent). Must be between 0 and 100000 inclusive. For example, to track 50% of the post-click conversions, set a value of 50000.", alias="postViewCountPercentageMillis")
    __properties: ClassVar[List[str]] = ["floodlightActivityConfigs", "postViewCountPercentageMillis"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConversionCountingConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in floodlight_activity_configs (list)
        _items = []
        if self.floodlight_activity_configs:
            for _item_floodlight_activity_configs in self.floodlight_activity_configs:
                if _item_floodlight_activity_configs:
                    _items.append(_item_floodlight_activity_configs.to_dict())
            _dict['floodlightActivityConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConversionCountingConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "floodlightActivityConfigs": [TrackingFloodlightActivityConfig.from_dict(_item) for _item in obj["floodlightActivityConfigs"]] if obj.get("floodlightActivityConfigs") is not None else None,
            "postViewCountPercentageMillis": obj.get("postViewCountPercentageMillis")
        })
        return _obj



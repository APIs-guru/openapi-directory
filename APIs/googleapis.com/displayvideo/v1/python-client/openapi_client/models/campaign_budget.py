# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.date_range import DateRange
from openapi_client.models.prisma_config import PrismaConfig
from typing import Optional, Set
from typing_extensions import Self

class CampaignBudget(BaseModel):
    """
    Settings that control how the campaign budget is allocated.
    """ # noqa: E501
    budget_amount_micros: Optional[StrictStr] = Field(default=None, description="Required. The total amount the linked insertion order segments can budget. The amount is in micros. Must be greater than 0. For example, 500000000 represents 500 standard units of the currency.", alias="budgetAmountMicros")
    budget_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the campaign budget. Assigned by the system. Do not set for new budgets. Must be included when updating or adding budgets to campaign_budgets. Otherwise, a new ID will be generated and assigned.", alias="budgetId")
    budget_unit: Optional[StrictStr] = Field(default=None, description="Required. Immutable. Specifies whether the budget is measured in currency or impressions.", alias="budgetUnit")
    date_range: Optional[DateRange] = Field(default=None, alias="dateRange")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the budget. Must be UTF-8 encoded with a maximum size of 240 bytes.", alias="displayName")
    external_budget_id: Optional[StrictStr] = Field(default=None, description="Immutable. The ID identifying this budget to the external source. If this field is set and the invoice detail level of the corresponding billing profile is set to \"Budget level PO\", all impressions served against this budget will include this ID on the invoice. Must be unique under the campaign.", alias="externalBudgetId")
    external_budget_source: Optional[StrictStr] = Field(default=None, description="Required. The external source of the budget.", alias="externalBudgetSource")
    invoice_grouping_id: Optional[StrictStr] = Field(default=None, description="Immutable. The ID used to group budgets to be included the same invoice. If this field is set and the invoice level of the corresponding billing profile is set to \"Budget invoice grouping ID\", all external_budget_id sharing the same invoice_grouping_id will be grouped in the same invoice.", alias="invoiceGroupingId")
    prisma_config: Optional[PrismaConfig] = Field(default=None, alias="prismaConfig")
    __properties: ClassVar[List[str]] = ["budgetAmountMicros", "budgetId", "budgetUnit", "dateRange", "displayName", "externalBudgetId", "externalBudgetSource", "invoiceGroupingId", "prismaConfig"]

    @field_validator('budget_unit')
    def budget_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BUDGET_UNIT_UNSPECIFIED', 'BUDGET_UNIT_CURRENCY', 'BUDGET_UNIT_IMPRESSIONS']):
            raise ValueError("must be one of enum values ('BUDGET_UNIT_UNSPECIFIED', 'BUDGET_UNIT_CURRENCY', 'BUDGET_UNIT_IMPRESSIONS')")
        return value

    @field_validator('external_budget_source')
    def external_budget_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXTERNAL_BUDGET_SOURCE_UNSPECIFIED', 'EXTERNAL_BUDGET_SOURCE_NONE', 'EXTERNAL_BUDGET_SOURCE_MEDIA_OCEAN']):
            raise ValueError("must be one of enum values ('EXTERNAL_BUDGET_SOURCE_UNSPECIFIED', 'EXTERNAL_BUDGET_SOURCE_NONE', 'EXTERNAL_BUDGET_SOURCE_MEDIA_OCEAN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CampaignBudget from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_range
        if self.date_range:
            _dict['dateRange'] = self.date_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prisma_config
        if self.prisma_config:
            _dict['prismaConfig'] = self.prisma_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CampaignBudget from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "budgetAmountMicros": obj.get("budgetAmountMicros"),
            "budgetId": obj.get("budgetId"),
            "budgetUnit": obj.get("budgetUnit"),
            "dateRange": DateRange.from_dict(obj["dateRange"]) if obj.get("dateRange") is not None else None,
            "displayName": obj.get("displayName"),
            "externalBudgetId": obj.get("externalBudgetId"),
            "externalBudgetSource": obj.get("externalBudgetSource"),
            "invoiceGroupingId": obj.get("invoiceGroupingId"),
            "prismaConfig": PrismaConfig.from_dict(obj["prismaConfig"]) if obj.get("prismaConfig") is not None else None
        })
        return _obj



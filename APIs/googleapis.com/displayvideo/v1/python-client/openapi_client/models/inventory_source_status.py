# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InventorySourceStatus(BaseModel):
    """
    The status related settings of the inventory source.
    """ # noqa: E501
    config_status: Optional[StrictStr] = Field(default=None, description="Output only. The configuration status of the inventory source. Only applicable for guaranteed inventory sources. Acceptable values are `INVENTORY_SOURCE_CONFIG_STATUS_PENDING` and `INVENTORY_SOURCE_CONFIG_STATUS_COMPLETED`. An inventory source must be configured (fill in the required fields, choose creatives, and select a default campaign) before it can serve.", alias="configStatus")
    entity_pause_reason: Optional[StrictStr] = Field(default=None, description="The user-provided reason for pausing this inventory source. Must not exceed 100 characters. Only applicable when entity_status is set to `ENTITY_STATUS_PAUSED`.", alias="entityPauseReason")
    entity_status: Optional[StrictStr] = Field(default=None, description="Whether or not the inventory source is servable. Acceptable values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_ARCHIVED`, and `ENTITY_STATUS_PAUSED`. Default value is `ENTITY_STATUS_ACTIVE`.", alias="entityStatus")
    seller_pause_reason: Optional[StrictStr] = Field(default=None, description="Output only. The seller-provided reason for pausing this inventory source. Only applicable for inventory sources synced directly from the publishers and when seller_status is set to `ENTITY_STATUS_PAUSED`.", alias="sellerPauseReason")
    seller_status: Optional[StrictStr] = Field(default=None, description="Output only. The status set by the seller for the inventory source. Only applicable for inventory sources synced directly from the publishers. Acceptable values are `ENTITY_STATUS_ACTIVE` and `ENTITY_STATUS_PAUSED`.", alias="sellerStatus")
    __properties: ClassVar[List[str]] = ["configStatus", "entityPauseReason", "entityStatus", "sellerPauseReason", "sellerStatus"]

    @field_validator('config_status')
    def config_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INVENTORY_SOURCE_CONFIG_STATUS_UNSPECIFIED', 'INVENTORY_SOURCE_CONFIG_STATUS_PENDING', 'INVENTORY_SOURCE_CONFIG_STATUS_COMPLETED']):
            raise ValueError("must be one of enum values ('INVENTORY_SOURCE_CONFIG_STATUS_UNSPECIFIED', 'INVENTORY_SOURCE_CONFIG_STATUS_PENDING', 'INVENTORY_SOURCE_CONFIG_STATUS_COMPLETED')")
        return value

    @field_validator('entity_status')
    def entity_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENTITY_STATUS_UNSPECIFIED', 'ENTITY_STATUS_ACTIVE', 'ENTITY_STATUS_ARCHIVED', 'ENTITY_STATUS_DRAFT', 'ENTITY_STATUS_PAUSED', 'ENTITY_STATUS_SCHEDULED_FOR_DELETION']):
            raise ValueError("must be one of enum values ('ENTITY_STATUS_UNSPECIFIED', 'ENTITY_STATUS_ACTIVE', 'ENTITY_STATUS_ARCHIVED', 'ENTITY_STATUS_DRAFT', 'ENTITY_STATUS_PAUSED', 'ENTITY_STATUS_SCHEDULED_FOR_DELETION')")
        return value

    @field_validator('seller_status')
    def seller_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENTITY_STATUS_UNSPECIFIED', 'ENTITY_STATUS_ACTIVE', 'ENTITY_STATUS_ARCHIVED', 'ENTITY_STATUS_DRAFT', 'ENTITY_STATUS_PAUSED', 'ENTITY_STATUS_SCHEDULED_FOR_DELETION']):
            raise ValueError("must be one of enum values ('ENTITY_STATUS_UNSPECIFIED', 'ENTITY_STATUS_ACTIVE', 'ENTITY_STATUS_ARCHIVED', 'ENTITY_STATUS_DRAFT', 'ENTITY_STATUS_PAUSED', 'ENTITY_STATUS_SCHEDULED_FOR_DELETION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InventorySourceStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "config_status",
            "seller_pause_reason",
            "seller_status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InventorySourceStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configStatus": obj.get("configStatus"),
            "entityPauseReason": obj.get("entityPauseReason"),
            "entityStatus": obj.get("entityStatus"),
            "sellerPauseReason": obj.get("sellerPauseReason"),
            "sellerStatus": obj.get("sellerStatus")
        })
        return _obj



# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.campaign_budget import CampaignBudget
from openapi_client.models.campaign_flight import CampaignFlight
from openapi_client.models.campaign_goal import CampaignGoal
from openapi_client.models.frequency_cap import FrequencyCap
from typing import Optional, Set
from typing_extensions import Self

class Campaign(BaseModel):
    """
    A single campaign.
    """ # noqa: E501
    advertiser_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique ID of the advertiser the campaign belongs to.", alias="advertiserId")
    campaign_budgets: Optional[List[CampaignBudget]] = Field(default=None, description="The list of budgets available to this campaign. If this field is not set, the campaign uses an unlimited budget.", alias="campaignBudgets")
    campaign_flight: Optional[CampaignFlight] = Field(default=None, alias="campaignFlight")
    campaign_goal: Optional[CampaignGoal] = Field(default=None, alias="campaignGoal")
    campaign_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique ID of the campaign. Assigned by the system.", alias="campaignId")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the campaign. Must be UTF-8 encoded with a maximum size of 240 bytes.", alias="displayName")
    entity_status: Optional[StrictStr] = Field(default=None, description="Required. Controls whether or not the insertion orders under this campaign can spend their budgets and bid on inventory. * Accepted values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_ARCHIVED`, and `ENTITY_STATUS_PAUSED`. * For CreateCampaign method, `ENTITY_STATUS_ARCHIVED` is not allowed.", alias="entityStatus")
    frequency_cap: Optional[FrequencyCap] = Field(default=None, alias="frequencyCap")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the campaign.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the campaign was last updated. Assigned by the system.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["advertiserId", "campaignBudgets", "campaignFlight", "campaignGoal", "campaignId", "displayName", "entityStatus", "frequencyCap", "name", "updateTime"]

    @field_validator('entity_status')
    def entity_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENTITY_STATUS_UNSPECIFIED', 'ENTITY_STATUS_ACTIVE', 'ENTITY_STATUS_ARCHIVED', 'ENTITY_STATUS_DRAFT', 'ENTITY_STATUS_PAUSED', 'ENTITY_STATUS_SCHEDULED_FOR_DELETION']):
            raise ValueError("must be one of enum values ('ENTITY_STATUS_UNSPECIFIED', 'ENTITY_STATUS_ACTIVE', 'ENTITY_STATUS_ARCHIVED', 'ENTITY_STATUS_DRAFT', 'ENTITY_STATUS_PAUSED', 'ENTITY_STATUS_SCHEDULED_FOR_DELETION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Campaign from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "advertiser_id",
            "campaign_id",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in campaign_budgets (list)
        _items = []
        if self.campaign_budgets:
            for _item_campaign_budgets in self.campaign_budgets:
                if _item_campaign_budgets:
                    _items.append(_item_campaign_budgets.to_dict())
            _dict['campaignBudgets'] = _items
        # override the default output from pydantic by calling `to_dict()` of campaign_flight
        if self.campaign_flight:
            _dict['campaignFlight'] = self.campaign_flight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of campaign_goal
        if self.campaign_goal:
            _dict['campaignGoal'] = self.campaign_goal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of frequency_cap
        if self.frequency_cap:
            _dict['frequencyCap'] = self.frequency_cap.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Campaign from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advertiserId": obj.get("advertiserId"),
            "campaignBudgets": [CampaignBudget.from_dict(_item) for _item in obj["campaignBudgets"]] if obj.get("campaignBudgets") is not None else None,
            "campaignFlight": CampaignFlight.from_dict(obj["campaignFlight"]) if obj.get("campaignFlight") is not None else None,
            "campaignGoal": CampaignGoal.from_dict(obj["campaignGoal"]) if obj.get("campaignGoal") is not None else None,
            "campaignId": obj.get("campaignId"),
            "displayName": obj.get("displayName"),
            "entityStatus": obj.get("entityStatus"),
            "frequencyCap": FrequencyCap.from_dict(obj["frequencyCap"]) if obj.get("frequencyCap") is not None else None,
            "name": obj.get("name"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



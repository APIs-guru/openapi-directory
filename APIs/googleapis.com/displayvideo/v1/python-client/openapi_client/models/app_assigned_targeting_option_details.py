# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AppAssignedTargetingOptionDetails(BaseModel):
    """
    Details for assigned app targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_APP`.
    """ # noqa: E501
    app_id: Optional[StrictStr] = Field(default=None, description="Required. The ID of the app. Android's Play store app uses bundle ID, for example `com.google.android.gm`. Apple's App store app ID uses 9 digit string, for example `422689480`.", alias="appId")
    app_platform: Optional[StrictStr] = Field(default=None, description="Indicates the platform of the targeted app. If this field is not specified, the app platform will be assumed to be mobile (i.e., Android or iOS), and we will derive the appropriate mobile platform from the app ID.", alias="appPlatform")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. The display name of the app.", alias="displayName")
    negative: Optional[StrictBool] = Field(default=None, description="Indicates if this option is being negatively targeted.")
    __properties: ClassVar[List[str]] = ["appId", "appPlatform", "displayName", "negative"]

    @field_validator('app_platform')
    def app_platform_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APP_PLATFORM_UNSPECIFIED', 'APP_PLATFORM_IOS', 'APP_PLATFORM_ANDROID', 'APP_PLATFORM_ROKU', 'APP_PLATFORM_AMAZON_FIRETV', 'APP_PLATFORM_PLAYSTATION', 'APP_PLATFORM_APPLE_TV', 'APP_PLATFORM_XBOX', 'APP_PLATFORM_SAMSUNG_TV', 'APP_PLATFORM_ANDROID_TV', 'APP_PLATFORM_GENERIC_CTV']):
            raise ValueError("must be one of enum values ('APP_PLATFORM_UNSPECIFIED', 'APP_PLATFORM_IOS', 'APP_PLATFORM_ANDROID', 'APP_PLATFORM_ROKU', 'APP_PLATFORM_AMAZON_FIRETV', 'APP_PLATFORM_PLAYSTATION', 'APP_PLATFORM_APPLE_TV', 'APP_PLATFORM_XBOX', 'APP_PLATFORM_SAMSUNG_TV', 'APP_PLATFORM_ANDROID_TV', 'APP_PLATFORM_GENERIC_CTV')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppAssignedTargetingOptionDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "display_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppAssignedTargetingOptionDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appId": obj.get("appId"),
            "appPlatform": obj.get("appPlatform"),
            "displayName": obj.get("displayName"),
            "negative": obj.get("negative")
        })
        return _obj



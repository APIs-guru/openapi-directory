# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IdFilter(BaseModel):
    """
    A filtering option that filters entities by their entity IDs.
    """ # noqa: E501
    ad_group_ad_ids: Optional[List[StrictStr]] = Field(default=None, description="YouTube Ads to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.", alias="adGroupAdIds")
    ad_group_ids: Optional[List[StrictStr]] = Field(default=None, description="YouTube Ad Groups to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.", alias="adGroupIds")
    campaign_ids: Optional[List[StrictStr]] = Field(default=None, description="Campaigns to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.", alias="campaignIds")
    insertion_order_ids: Optional[List[StrictStr]] = Field(default=None, description="Insertion Orders to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.", alias="insertionOrderIds")
    line_item_ids: Optional[List[StrictStr]] = Field(default=None, description="Line Items to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.", alias="lineItemIds")
    media_product_ids: Optional[List[StrictStr]] = Field(default=None, description="Media Products to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.", alias="mediaProductIds")
    __properties: ClassVar[List[str]] = ["adGroupAdIds", "adGroupIds", "campaignIds", "insertionOrderIds", "lineItemIds", "mediaProductIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adGroupAdIds": obj.get("adGroupAdIds"),
            "adGroupIds": obj.get("adGroupIds"),
            "campaignIds": obj.get("campaignIds"),
            "insertionOrderIds": obj.get("insertionOrderIds"),
            "lineItemIds": obj.get("lineItemIds"),
            "mediaProductIds": obj.get("mediaProductIds")
        })
        return _obj



# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProximityLocationListAssignedTargetingOptionDetails(BaseModel):
    """
    Targeting details for proximity location list. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_PROXIMITY_LOCATION_LIST`.
    """ # noqa: E501
    proximity_location_list_id: Optional[StrictStr] = Field(default=None, description="Required. ID of the proximity location list. Should refer to the location_list_id field of a LocationList resource whose type is `TARGETING_LOCATION_TYPE_PROXIMITY`.", alias="proximityLocationListId")
    proximity_radius_range: Optional[StrictStr] = Field(default=None, description="Required. Radius range for proximity location list. This represents the size of the area around a chosen location that will be targeted. `All` proximity location targeting under a single resource must have the same radius range value. Set this value to match any existing targeting. If updated, this field will change the radius range for all proximity targeting under the resource.", alias="proximityRadiusRange")
    __properties: ClassVar[List[str]] = ["proximityLocationListId", "proximityRadiusRange"]

    @field_validator('proximity_radius_range')
    def proximity_radius_range_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROXIMITY_RADIUS_RANGE_UNSPECIFIED', 'PROXIMITY_RADIUS_RANGE_SMALL', 'PROXIMITY_RADIUS_RANGE_MEDIUM', 'PROXIMITY_RADIUS_RANGE_LARGE']):
            raise ValueError("must be one of enum values ('PROXIMITY_RADIUS_RANGE_UNSPECIFIED', 'PROXIMITY_RADIUS_RANGE_SMALL', 'PROXIMITY_RADIUS_RANGE_MEDIUM', 'PROXIMITY_RADIUS_RANGE_LARGE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProximityLocationListAssignedTargetingOptionDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProximityLocationListAssignedTargetingOptionDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "proximityLocationListId": obj.get("proximityLocationListId"),
            "proximityRadiusRange": obj.get("proximityRadiusRange")
        })
        return _obj



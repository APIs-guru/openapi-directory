# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ContentOutstreamPositionAssignedTargetingOptionDetails(BaseModel):
    """
    Assigned content outstream position targeting option details. This will be populated in the content_outstream_position_details field when targeting_type is `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION`.
    """ # noqa: E501
    ad_type: Optional[StrictStr] = Field(default=None, description="Output only. The ad type to target. Only applicable to insertion order targeting and new line items supporting the specified ad type will inherit this targeting option by default. Possible values are: * `AD_TYPE_DISPLAY`, the setting will be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_DISPLAY_DEFAULT`. * `AD_TYPE_VIDEO`, the setting will be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_VIDEO_DEFAULT`.", alias="adType")
    content_outstream_position: Optional[StrictStr] = Field(default=None, description="Required. The content outstream position.", alias="contentOutstreamPosition")
    targeting_option_id: Optional[StrictStr] = Field(default=None, description="Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION`.", alias="targetingOptionId")
    __properties: ClassVar[List[str]] = ["adType", "contentOutstreamPosition", "targetingOptionId"]

    @field_validator('ad_type')
    def ad_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AD_TYPE_UNSPECIFIED', 'AD_TYPE_DISPLAY', 'AD_TYPE_VIDEO', 'AD_TYPE_AUDIO']):
            raise ValueError("must be one of enum values ('AD_TYPE_UNSPECIFIED', 'AD_TYPE_DISPLAY', 'AD_TYPE_VIDEO', 'AD_TYPE_AUDIO')")
        return value

    @field_validator('content_outstream_position')
    def content_outstream_position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONTENT_OUTSTREAM_POSITION_UNSPECIFIED', 'CONTENT_OUTSTREAM_POSITION_UNKNOWN', 'CONTENT_OUTSTREAM_POSITION_IN_ARTICLE', 'CONTENT_OUTSTREAM_POSITION_IN_BANNER', 'CONTENT_OUTSTREAM_POSITION_IN_FEED', 'CONTENT_OUTSTREAM_POSITION_INTERSTITIAL']):
            raise ValueError("must be one of enum values ('CONTENT_OUTSTREAM_POSITION_UNSPECIFIED', 'CONTENT_OUTSTREAM_POSITION_UNKNOWN', 'CONTENT_OUTSTREAM_POSITION_IN_ARTICLE', 'CONTENT_OUTSTREAM_POSITION_IN_BANNER', 'CONTENT_OUTSTREAM_POSITION_IN_FEED', 'CONTENT_OUTSTREAM_POSITION_INTERSTITIAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContentOutstreamPositionAssignedTargetingOptionDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "ad_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContentOutstreamPositionAssignedTargetingOptionDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adType": obj.get("adType"),
            "contentOutstreamPosition": obj.get("contentOutstreamPosition"),
            "targetingOptionId": obj.get("targetingOptionId")
        })
        return _obj



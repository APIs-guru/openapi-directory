# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LineItemBudget(BaseModel):
    """
    Settings that control how budget is allocated.
    """ # noqa: E501
    budget_allocation_type: Optional[StrictStr] = Field(default=None, description="Required. The type of the budget allocation. `LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC` is only applicable when automatic budget allocation is enabled for the parent insertion order.", alias="budgetAllocationType")
    budget_unit: Optional[StrictStr] = Field(default=None, description="Output only. The budget unit specifies whether the budget is currency based or impression based. This value is inherited from the parent insertion order.", alias="budgetUnit")
    max_amount: Optional[StrictStr] = Field(default=None, description="The maximum budget amount the line item will spend. Must be greater than 0. When budget_allocation_type is: * `LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC`, this field is immutable and is set by the system. * `LINE_ITEM_BUDGET_ALLOCATION_TYPE_FIXED`, if budget_unit is: - `BUDGET_UNIT_CURRENCY`, this field represents maximum budget amount to spend, in micros of the advertiser's currency. For example, 1500000 represents 1.5 standard units of the currency. - `BUDGET_UNIT_IMPRESSIONS`, this field represents the maximum number of impressions to serve. * `LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNLIMITED`, this field is not applicable and will be ignored by the system.", alias="maxAmount")
    __properties: ClassVar[List[str]] = ["budgetAllocationType", "budgetUnit", "maxAmount"]

    @field_validator('budget_allocation_type')
    def budget_allocation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNSPECIFIED', 'LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC', 'LINE_ITEM_BUDGET_ALLOCATION_TYPE_FIXED', 'LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNLIMITED']):
            raise ValueError("must be one of enum values ('LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNSPECIFIED', 'LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC', 'LINE_ITEM_BUDGET_ALLOCATION_TYPE_FIXED', 'LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNLIMITED')")
        return value

    @field_validator('budget_unit')
    def budget_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BUDGET_UNIT_UNSPECIFIED', 'BUDGET_UNIT_CURRENCY', 'BUDGET_UNIT_IMPRESSIONS']):
            raise ValueError("must be one of enum values ('BUDGET_UNIT_UNSPECIFIED', 'BUDGET_UNIT_CURRENCY', 'BUDGET_UNIT_IMPRESSIONS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LineItemBudget from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "budget_unit",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LineItemBudget from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "budgetAllocationType": obj.get("budgetAllocationType"),
            "budgetUnit": obj.get("budgetUnit"),
            "maxAmount": obj.get("maxAmount")
        })
        return _obj



# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.custom_bidding_model_readiness_state import CustomBiddingModelReadinessState
from typing import Optional, Set
from typing_extensions import Self

class CustomBiddingAlgorithm(BaseModel):
    """
    A single custom bidding algorithm.
    """ # noqa: E501
    advertiser_id: Optional[StrictStr] = Field(default=None, description="Immutable. The unique ID of the advertiser that owns the custom bidding algorithm.", alias="advertiserId")
    custom_bidding_algorithm_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique ID of the custom bidding algorithm. Assigned by the system.", alias="customBiddingAlgorithmId")
    custom_bidding_algorithm_state: Optional[StrictStr] = Field(default=None, description="Output only. The status of custom bidding algorithm.", alias="customBiddingAlgorithmState")
    custom_bidding_algorithm_type: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The type of custom bidding algorithm.", alias="customBiddingAlgorithmType")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the custom bidding algorithm. Must be UTF-8 encoded with a maximum size of 240 bytes.", alias="displayName")
    entity_status: Optional[StrictStr] = Field(default=None, description="Controls whether or not the custom bidding algorithm can be used as a bidding strategy. Accepted values are: * `ENTITY_STATUS_ACTIVE` * `ENTITY_STATUS_ARCHIVED`", alias="entityStatus")
    model_readiness: Optional[List[CustomBiddingModelReadinessState]] = Field(default=None, description="Output only. The state of custom bidding model readiness for each advertiser who has access. This field may only include the state of the queried advertiser if the algorithm [`owner`](/display-video/api/reference/rest/v1/customBiddingAlgorithms#CustomBiddingAlgorithm.FIELDS.oneof_owner) is a partner and is being retrieved using an advertiser [`accessor`](/display-video/api/reference/rest/v1/customBiddingAlgorithms/list#body.QUERY_PARAMETERS.oneof_accessor).", alias="modelReadiness")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the custom bidding algorithm.")
    partner_id: Optional[StrictStr] = Field(default=None, description="Immutable. The unique ID of the partner that owns the custom bidding algorithm.", alias="partnerId")
    shared_advertiser_ids: Optional[List[StrictStr]] = Field(default=None, description="The IDs of the advertisers who have access to this algorithm. If advertiser_id is set, this field will only consist of that value. This field will not be set if the algorithm [`owner`](/display-video/api/reference/rest/v1/customBiddingAlgorithms#CustomBiddingAlgorithm.FIELDS.oneof_owner) is a partner and is being retrieved using an advertiser [`accessor`](/display-video/api/reference/rest/v1/customBiddingAlgorithms/list#body.QUERY_PARAMETERS.oneof_accessor).", alias="sharedAdvertiserIds")
    __properties: ClassVar[List[str]] = ["advertiserId", "customBiddingAlgorithmId", "customBiddingAlgorithmState", "customBiddingAlgorithmType", "displayName", "entityStatus", "modelReadiness", "name", "partnerId", "sharedAdvertiserIds"]

    @field_validator('custom_bidding_algorithm_state')
    def custom_bidding_algorithm_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ENABLED', 'DORMANT', 'SUSPENDED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ENABLED', 'DORMANT', 'SUSPENDED')")
        return value

    @field_validator('custom_bidding_algorithm_type')
    def custom_bidding_algorithm_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CUSTOM_BIDDING_ALGORITHM_TYPE_UNSPECIFIED', 'SCRIPT_BASED', 'ADS_DATA_HUB_BASED', 'GOAL_BUILDER_BASED']):
            raise ValueError("must be one of enum values ('CUSTOM_BIDDING_ALGORITHM_TYPE_UNSPECIFIED', 'SCRIPT_BASED', 'ADS_DATA_HUB_BASED', 'GOAL_BUILDER_BASED')")
        return value

    @field_validator('entity_status')
    def entity_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENTITY_STATUS_UNSPECIFIED', 'ENTITY_STATUS_ACTIVE', 'ENTITY_STATUS_ARCHIVED', 'ENTITY_STATUS_DRAFT', 'ENTITY_STATUS_PAUSED', 'ENTITY_STATUS_SCHEDULED_FOR_DELETION']):
            raise ValueError("must be one of enum values ('ENTITY_STATUS_UNSPECIFIED', 'ENTITY_STATUS_ACTIVE', 'ENTITY_STATUS_ARCHIVED', 'ENTITY_STATUS_DRAFT', 'ENTITY_STATUS_PAUSED', 'ENTITY_STATUS_SCHEDULED_FOR_DELETION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomBiddingAlgorithm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "custom_bidding_algorithm_id",
            "custom_bidding_algorithm_state",
            "model_readiness",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in model_readiness (list)
        _items = []
        if self.model_readiness:
            for _item_model_readiness in self.model_readiness:
                if _item_model_readiness:
                    _items.append(_item_model_readiness.to_dict())
            _dict['modelReadiness'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomBiddingAlgorithm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advertiserId": obj.get("advertiserId"),
            "customBiddingAlgorithmId": obj.get("customBiddingAlgorithmId"),
            "customBiddingAlgorithmState": obj.get("customBiddingAlgorithmState"),
            "customBiddingAlgorithmType": obj.get("customBiddingAlgorithmType"),
            "displayName": obj.get("displayName"),
            "entityStatus": obj.get("entityStatus"),
            "modelReadiness": [CustomBiddingModelReadinessState.from_dict(_item) for _item in obj["modelReadiness"]] if obj.get("modelReadiness") is not None else None,
            "name": obj.get("name"),
            "partnerId": obj.get("partnerId"),
            "sharedAdvertiserIds": obj.get("sharedAdvertiserIds")
        })
        return _obj



# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PartnerCost(BaseModel):
    """
    Settings that control a partner cost. A partner cost is any type of expense involved in running a campaign, other than the costs of purchasing impressions (which is called the media cost) and using third-party audience segment data (data fee). Some examples of partner costs include the fees for using DV360, a third-party ad server, or a third-party ad serving verification service.
    """ # noqa: E501
    cost_type: Optional[StrictStr] = Field(default=None, description="Required. The type of the partner cost.", alias="costType")
    fee_amount: Optional[StrictStr] = Field(default=None, description="The CPM fee amount in micros of advertiser's currency. Applicable when the fee_type is `PARTNER_FEE_TYPE_CPM_FEE`. Must be greater than or equal to 0. For example, for 1.5 standard unit of the advertiser's currency, set this field to 1500000.", alias="feeAmount")
    fee_percentage_millis: Optional[StrictStr] = Field(default=None, description="The media fee percentage in millis (1/1000 of a percent). Applicable when the fee_type is `PARTNER_FEE_TYPE_MEDIA_FEE`. Must be greater than or equal to 0. For example: 100 represents 0.1%.", alias="feePercentageMillis")
    fee_type: Optional[StrictStr] = Field(default=None, description="Required. The fee type for this partner cost.", alias="feeType")
    invoice_type: Optional[StrictStr] = Field(default=None, description="The invoice type for this partner cost. * Required when cost_type is one of: - `PARTNER_COST_TYPE_ADLOOX` - `PARTNER_COST_TYPE_DOUBLE_VERIFY` - `PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE`. * Output only for other types.", alias="invoiceType")
    __properties: ClassVar[List[str]] = ["costType", "feeAmount", "feePercentageMillis", "feeType", "invoiceType"]

    @field_validator('cost_type')
    def cost_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PARTNER_COST_TYPE_UNSPECIFIED', 'PARTNER_COST_TYPE_ADLOOX', 'PARTNER_COST_TYPE_ADLOOX_PREBID', 'PARTNER_COST_TYPE_ADSAFE', 'PARTNER_COST_TYPE_ADXPOSE', 'PARTNER_COST_TYPE_AGGREGATE_KNOWLEDGE', 'PARTNER_COST_TYPE_AGENCY_TRADING_DESK', 'PARTNER_COST_TYPE_DV360_FEE', 'PARTNER_COST_TYPE_COMSCORE_VCE', 'PARTNER_COST_TYPE_DATA_MANAGEMENT_PLATFORM', 'PARTNER_COST_TYPE_DEFAULT', 'PARTNER_COST_TYPE_DOUBLE_VERIFY', 'PARTNER_COST_TYPE_DOUBLE_VERIFY_PREBID', 'PARTNER_COST_TYPE_EVIDON', 'PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE_VIDEO', 'PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE_PREBID', 'PARTNER_COST_TYPE_MEDIA_COST_DATA', 'PARTNER_COST_TYPE_MOAT_VIDEO', 'PARTNER_COST_TYPE_NIELSEN_DAR', 'PARTNER_COST_TYPE_SHOP_LOCAL', 'PARTNER_COST_TYPE_TERACENT', 'PARTNER_COST_TYPE_THIRD_PARTY_AD_SERVER', 'PARTNER_COST_TYPE_TRUST_METRICS', 'PARTNER_COST_TYPE_VIZU', 'PARTNER_COST_TYPE_ADLINGO_FEE', 'PARTNER_COST_TYPE_CUSTOM_FEE_1', 'PARTNER_COST_TYPE_CUSTOM_FEE_2', 'PARTNER_COST_TYPE_CUSTOM_FEE_3', 'PARTNER_COST_TYPE_CUSTOM_FEE_4', 'PARTNER_COST_TYPE_CUSTOM_FEE_5', 'PARTNER_COST_TYPE_SCIBIDS_FEE']):
            raise ValueError("must be one of enum values ('PARTNER_COST_TYPE_UNSPECIFIED', 'PARTNER_COST_TYPE_ADLOOX', 'PARTNER_COST_TYPE_ADLOOX_PREBID', 'PARTNER_COST_TYPE_ADSAFE', 'PARTNER_COST_TYPE_ADXPOSE', 'PARTNER_COST_TYPE_AGGREGATE_KNOWLEDGE', 'PARTNER_COST_TYPE_AGENCY_TRADING_DESK', 'PARTNER_COST_TYPE_DV360_FEE', 'PARTNER_COST_TYPE_COMSCORE_VCE', 'PARTNER_COST_TYPE_DATA_MANAGEMENT_PLATFORM', 'PARTNER_COST_TYPE_DEFAULT', 'PARTNER_COST_TYPE_DOUBLE_VERIFY', 'PARTNER_COST_TYPE_DOUBLE_VERIFY_PREBID', 'PARTNER_COST_TYPE_EVIDON', 'PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE_VIDEO', 'PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE_PREBID', 'PARTNER_COST_TYPE_MEDIA_COST_DATA', 'PARTNER_COST_TYPE_MOAT_VIDEO', 'PARTNER_COST_TYPE_NIELSEN_DAR', 'PARTNER_COST_TYPE_SHOP_LOCAL', 'PARTNER_COST_TYPE_TERACENT', 'PARTNER_COST_TYPE_THIRD_PARTY_AD_SERVER', 'PARTNER_COST_TYPE_TRUST_METRICS', 'PARTNER_COST_TYPE_VIZU', 'PARTNER_COST_TYPE_ADLINGO_FEE', 'PARTNER_COST_TYPE_CUSTOM_FEE_1', 'PARTNER_COST_TYPE_CUSTOM_FEE_2', 'PARTNER_COST_TYPE_CUSTOM_FEE_3', 'PARTNER_COST_TYPE_CUSTOM_FEE_4', 'PARTNER_COST_TYPE_CUSTOM_FEE_5', 'PARTNER_COST_TYPE_SCIBIDS_FEE')")
        return value

    @field_validator('fee_type')
    def fee_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PARTNER_COST_FEE_TYPE_UNSPECIFIED', 'PARTNER_COST_FEE_TYPE_CPM_FEE', 'PARTNER_COST_FEE_TYPE_MEDIA_FEE']):
            raise ValueError("must be one of enum values ('PARTNER_COST_FEE_TYPE_UNSPECIFIED', 'PARTNER_COST_FEE_TYPE_CPM_FEE', 'PARTNER_COST_FEE_TYPE_MEDIA_FEE')")
        return value

    @field_validator('invoice_type')
    def invoice_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PARTNER_COST_INVOICE_TYPE_UNSPECIFIED', 'PARTNER_COST_INVOICE_TYPE_DV360', 'PARTNER_COST_INVOICE_TYPE_PARTNER']):
            raise ValueError("must be one of enum values ('PARTNER_COST_INVOICE_TYPE_UNSPECIFIED', 'PARTNER_COST_INVOICE_TYPE_DV360', 'PARTNER_COST_INVOICE_TYPE_PARTNER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PartnerCost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PartnerCost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "costType": obj.get("costType"),
            "feeAmount": obj.get("feeAmount"),
            "feePercentageMillis": obj.get("feePercentageMillis"),
            "feeType": obj.get("feeType"),
            "invoiceType": obj.get("invoiceType")
        })
        return _obj



# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.combined_audience_group import CombinedAudienceGroup
from openapi_client.models.custom_list_group import CustomListGroup
from openapi_client.models.first_and_third_party_audience_group import FirstAndThirdPartyAudienceGroup
from openapi_client.models.google_audience_group import GoogleAudienceGroup
from typing import Optional, Set
from typing_extensions import Self

class AudienceGroupAssignedTargetingOptionDetails(BaseModel):
    """
    Assigned audience group targeting option details. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_AUDIENCE_GROUP`. The relation between each group is UNION, except for excluded_first_and_third_party_audience_group and excluded_google_audience_group, of which COMPLEMENT is used as an INTERSECTION with other groups.
    """ # noqa: E501
    excluded_first_and_third_party_audience_group: Optional[FirstAndThirdPartyAudienceGroup] = Field(default=None, alias="excludedFirstAndThirdPartyAudienceGroup")
    excluded_google_audience_group: Optional[GoogleAudienceGroup] = Field(default=None, alias="excludedGoogleAudienceGroup")
    included_combined_audience_group: Optional[CombinedAudienceGroup] = Field(default=None, alias="includedCombinedAudienceGroup")
    included_custom_list_group: Optional[CustomListGroup] = Field(default=None, alias="includedCustomListGroup")
    included_first_and_third_party_audience_groups: Optional[List[FirstAndThirdPartyAudienceGroup]] = Field(default=None, description="The first and third party audience ids and recencies of included first and third party audience groups. Each first and third party audience group contains first and third party audience ids only. The relation between each first and third party audience group is INTERSECTION, and the result is UNION'ed with other audience groups. Repeated groups with same settings will be ignored.", alias="includedFirstAndThirdPartyAudienceGroups")
    included_google_audience_group: Optional[GoogleAudienceGroup] = Field(default=None, alias="includedGoogleAudienceGroup")
    __properties: ClassVar[List[str]] = ["excludedFirstAndThirdPartyAudienceGroup", "excludedGoogleAudienceGroup", "includedCombinedAudienceGroup", "includedCustomListGroup", "includedFirstAndThirdPartyAudienceGroups", "includedGoogleAudienceGroup"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AudienceGroupAssignedTargetingOptionDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of excluded_first_and_third_party_audience_group
        if self.excluded_first_and_third_party_audience_group:
            _dict['excludedFirstAndThirdPartyAudienceGroup'] = self.excluded_first_and_third_party_audience_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of excluded_google_audience_group
        if self.excluded_google_audience_group:
            _dict['excludedGoogleAudienceGroup'] = self.excluded_google_audience_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of included_combined_audience_group
        if self.included_combined_audience_group:
            _dict['includedCombinedAudienceGroup'] = self.included_combined_audience_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of included_custom_list_group
        if self.included_custom_list_group:
            _dict['includedCustomListGroup'] = self.included_custom_list_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in included_first_and_third_party_audience_groups (list)
        _items = []
        if self.included_first_and_third_party_audience_groups:
            for _item_included_first_and_third_party_audience_groups in self.included_first_and_third_party_audience_groups:
                if _item_included_first_and_third_party_audience_groups:
                    _items.append(_item_included_first_and_third_party_audience_groups.to_dict())
            _dict['includedFirstAndThirdPartyAudienceGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of included_google_audience_group
        if self.included_google_audience_group:
            _dict['includedGoogleAudienceGroup'] = self.included_google_audience_group.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AudienceGroupAssignedTargetingOptionDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "excludedFirstAndThirdPartyAudienceGroup": FirstAndThirdPartyAudienceGroup.from_dict(obj["excludedFirstAndThirdPartyAudienceGroup"]) if obj.get("excludedFirstAndThirdPartyAudienceGroup") is not None else None,
            "excludedGoogleAudienceGroup": GoogleAudienceGroup.from_dict(obj["excludedGoogleAudienceGroup"]) if obj.get("excludedGoogleAudienceGroup") is not None else None,
            "includedCombinedAudienceGroup": CombinedAudienceGroup.from_dict(obj["includedCombinedAudienceGroup"]) if obj.get("includedCombinedAudienceGroup") is not None else None,
            "includedCustomListGroup": CustomListGroup.from_dict(obj["includedCustomListGroup"]) if obj.get("includedCustomListGroup") is not None else None,
            "includedFirstAndThirdPartyAudienceGroups": [FirstAndThirdPartyAudienceGroup.from_dict(_item) for _item in obj["includedFirstAndThirdPartyAudienceGroups"]] if obj.get("includedFirstAndThirdPartyAudienceGroups") is not None else None,
            "includedGoogleAudienceGroup": GoogleAudienceGroup.from_dict(obj["includedGoogleAudienceGroup"]) if obj.get("includedGoogleAudienceGroup") is not None else None
        })
        return _obj



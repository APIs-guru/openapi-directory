# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CmHybridConfig(BaseModel):
    """
    Settings for advertisers that use both Campaign Manager 360 (CM360) and third-party ad servers.
    """ # noqa: E501
    cm_account_id: Optional[StrictStr] = Field(default=None, description="Required. Immutable. Account ID of the CM360 Floodlight configuration linked with the DV360 advertiser.", alias="cmAccountId")
    cm_advertiser_ids: Optional[List[StrictStr]] = Field(default=None, description="Output only. The set of CM360 Advertiser IDs sharing the CM360 Floodlight configuration.", alias="cmAdvertiserIds")
    cm_floodlight_config_id: Optional[StrictStr] = Field(default=None, description="Required. Immutable. ID of the CM360 Floodlight configuration linked with the DV360 advertiser.", alias="cmFloodlightConfigId")
    cm_floodlight_linking_authorized: Optional[StrictBool] = Field(default=None, description="Required. Immutable. By setting this field to `true`, you, on behalf of your company, authorize the sharing of information from the given Floodlight configuration to this Display & Video 360 advertiser.", alias="cmFloodlightLinkingAuthorized")
    cm_syncable_site_ids: Optional[List[StrictStr]] = Field(default=None, description="A list of CM360 sites whose placements will be synced to DV360 as creatives. If absent or empty in CreateAdvertiser method, the system will automatically create a CM360 site. Removing sites from this list may cause DV360 creatives synced from CM360 to be deleted. At least one site must be specified.", alias="cmSyncableSiteIds")
    dv360_to_cm_cost_reporting_enabled: Optional[StrictBool] = Field(default=None, description="Whether or not to report DV360 cost to CM360.", alias="dv360ToCmCostReportingEnabled")
    dv360_to_cm_data_sharing_enabled: Optional[StrictBool] = Field(default=None, description="Whether or not to include DV360 data in CM360 data transfer reports.", alias="dv360ToCmDataSharingEnabled")
    __properties: ClassVar[List[str]] = ["cmAccountId", "cmAdvertiserIds", "cmFloodlightConfigId", "cmFloodlightLinkingAuthorized", "cmSyncableSiteIds", "dv360ToCmCostReportingEnabled", "dv360ToCmDataSharingEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CmHybridConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cm_advertiser_ids",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CmHybridConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cmAccountId": obj.get("cmAccountId"),
            "cmAdvertiserIds": obj.get("cmAdvertiserIds"),
            "cmFloodlightConfigId": obj.get("cmFloodlightConfigId"),
            "cmFloodlightLinkingAuthorized": obj.get("cmFloodlightLinkingAuthorized"),
            "cmSyncableSiteIds": obj.get("cmSyncableSiteIds"),
            "dv360ToCmCostReportingEnabled": obj.get("dv360ToCmCostReportingEnabled"),
            "dv360ToCmDataSharingEnabled": obj.get("dv360ToCmDataSharingEnabled")
        })
        return _obj



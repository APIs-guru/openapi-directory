# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DoubleVerifyBrandSafetyCategories(BaseModel):
    """
    Settings for brand safety controls.
    """ # noqa: E501
    avoid_unknown_brand_safety_category: Optional[StrictBool] = Field(default=None, description="Unknown or unrateable.", alias="avoidUnknownBrandSafetyCategory")
    avoided_high_severity_categories: Optional[List[StrictStr]] = Field(default=None, description="Brand safety high severity avoidance categories.", alias="avoidedHighSeverityCategories")
    avoided_medium_severity_categories: Optional[List[StrictStr]] = Field(default=None, description="Brand safety medium severity avoidance categories.", alias="avoidedMediumSeverityCategories")
    __properties: ClassVar[List[str]] = ["avoidUnknownBrandSafetyCategory", "avoidedHighSeverityCategories", "avoidedMediumSeverityCategories"]

    @field_validator('avoided_high_severity_categories')
    def avoided_high_severity_categories_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['HIGHER_SEVERITY_UNSPECIFIED', 'ADULT_CONTENT_PORNOGRAPHY', 'COPYRIGHT_INFRINGEMENT', 'SUBSTANCE_ABUSE', 'GRAPHIC_VIOLENCE_WEAPONS', 'HATE_PROFANITY', 'CRIMINAL_SKILLS', 'NUISANCE_INCENTIVIZED_MALWARE_CLUTTER']):
                raise ValueError("each list item must be one of ('HIGHER_SEVERITY_UNSPECIFIED', 'ADULT_CONTENT_PORNOGRAPHY', 'COPYRIGHT_INFRINGEMENT', 'SUBSTANCE_ABUSE', 'GRAPHIC_VIOLENCE_WEAPONS', 'HATE_PROFANITY', 'CRIMINAL_SKILLS', 'NUISANCE_INCENTIVIZED_MALWARE_CLUTTER')")
        return value

    @field_validator('avoided_medium_severity_categories')
    def avoided_medium_severity_categories_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['MEDIUM_SEVERITY_UNSPECIFIED', 'AD_SERVERS', 'ADULT_CONTENT_SWIMSUIT', 'ALTERNATIVE_LIFESTYLES', 'CELEBRITY_GOSSIP', 'GAMBLING', 'OCCULT', 'SEX_EDUCATION', 'DISASTER_AVIATION', 'DISASTER_MAN_MADE', 'DISASTER_NATURAL', 'DISASTER_TERRORIST_EVENTS', 'DISASTER_VEHICLE', 'ALCOHOL', 'SMOKING', 'NEGATIVE_NEWS_FINANCIAL', 'NON_ENGLISH', 'PARKING_PAGE', 'UNMODERATED_UGC', 'INFLAMMATORY_POLITICS_AND_NEWS', 'NEGATIVE_NEWS_PHARMACEUTICAL']):
                raise ValueError("each list item must be one of ('MEDIUM_SEVERITY_UNSPECIFIED', 'AD_SERVERS', 'ADULT_CONTENT_SWIMSUIT', 'ALTERNATIVE_LIFESTYLES', 'CELEBRITY_GOSSIP', 'GAMBLING', 'OCCULT', 'SEX_EDUCATION', 'DISASTER_AVIATION', 'DISASTER_MAN_MADE', 'DISASTER_NATURAL', 'DISASTER_TERRORIST_EVENTS', 'DISASTER_VEHICLE', 'ALCOHOL', 'SMOKING', 'NEGATIVE_NEWS_FINANCIAL', 'NON_ENGLISH', 'PARKING_PAGE', 'UNMODERATED_UGC', 'INFLAMMATORY_POLITICS_AND_NEWS', 'NEGATIVE_NEWS_PHARMACEUTICAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DoubleVerifyBrandSafetyCategories from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DoubleVerifyBrandSafetyCategories from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avoidUnknownBrandSafetyCategory": obj.get("avoidUnknownBrandSafetyCategory"),
            "avoidedHighSeverityCategories": obj.get("avoidedHighSeverityCategories"),
            "avoidedMediumSeverityCategories": obj.get("avoidedMediumSeverityCategories")
        })
        return _obj



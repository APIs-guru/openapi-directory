# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.contact_info_list import ContactInfoList
from openapi_client.models.mobile_device_id_list import MobileDeviceIdList
from typing import Optional, Set
from typing_extensions import Self

class FirstAndThirdPartyAudience(BaseModel):
    """
    Describes a first or third party audience list used for targeting. First party audiences are created via usage of client data. Third party audiences are provided by Third Party data providers and can only be licensed to customers.
    """ # noqa: E501
    active_display_audience_size: Optional[StrictStr] = Field(default=None, description="Output only. The estimated audience size for the Display network in the past month. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only returned in GET request.", alias="activeDisplayAudienceSize")
    app_id: Optional[StrictStr] = Field(default=None, description="The app_id matches with the type of the mobile_device_ids being uploaded. Only applicable to audience_type `CUSTOMER_MATCH_DEVICE_ID`", alias="appId")
    audience_source: Optional[StrictStr] = Field(default=None, description="Output only. The source of the audience.", alias="audienceSource")
    audience_type: Optional[StrictStr] = Field(default=None, description="The type of the audience.", alias="audienceType")
    contact_info_list: Optional[ContactInfoList] = Field(default=None, alias="contactInfoList")
    description: Optional[StrictStr] = Field(default=None, description="The user-provided description of the audience. Only applicable to first party audiences.")
    display_audience_size: Optional[StrictStr] = Field(default=None, description="Output only. The estimated audience size for the Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only returned in GET request.", alias="displayAudienceSize")
    display_desktop_audience_size: Optional[StrictStr] = Field(default=None, description="Output only. The estimated desktop audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.", alias="displayDesktopAudienceSize")
    display_mobile_app_audience_size: Optional[StrictStr] = Field(default=None, description="Output only. The estimated mobile app audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.", alias="displayMobileAppAudienceSize")
    display_mobile_web_audience_size: Optional[StrictStr] = Field(default=None, description="Output only. The estimated mobile web audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.", alias="displayMobileWebAudienceSize")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the first and third party audience.", alias="displayName")
    first_and_third_party_audience_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique ID of the first and third party audience. Assigned by the system.", alias="firstAndThirdPartyAudienceId")
    first_and_third_party_audience_type: Optional[StrictStr] = Field(default=None, description="Whether the audience is a first or third party audience.", alias="firstAndThirdPartyAudienceType")
    gmail_audience_size: Optional[StrictStr] = Field(default=None, description="Output only. The estimated audience size for Gmail network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.", alias="gmailAudienceSize")
    membership_duration_days: Optional[StrictStr] = Field(default=None, description="The duration in days that an entry remains in the audience after the qualifying event. If the audience has no expiration, set the value of this field to 10000. Otherwise, the set value must be greater than 0 and less than or equal to 540. Only applicable to first party audiences. This field is required if one of the following audience_type is used: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`", alias="membershipDurationDays")
    mobile_device_id_list: Optional[MobileDeviceIdList] = Field(default=None, alias="mobileDeviceIdList")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the first and third party audience.")
    youtube_audience_size: Optional[StrictStr] = Field(default=None, description="Output only. The estimated audience size for YouTube network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.", alias="youtubeAudienceSize")
    __properties: ClassVar[List[str]] = ["activeDisplayAudienceSize", "appId", "audienceSource", "audienceType", "contactInfoList", "description", "displayAudienceSize", "displayDesktopAudienceSize", "displayMobileAppAudienceSize", "displayMobileWebAudienceSize", "displayName", "firstAndThirdPartyAudienceId", "firstAndThirdPartyAudienceType", "gmailAudienceSize", "membershipDurationDays", "mobileDeviceIdList", "name", "youtubeAudienceSize"]

    @field_validator('audience_source')
    def audience_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUDIENCE_SOURCE_UNSPECIFIED', 'DISPLAY_VIDEO_360', 'CAMPAIGN_MANAGER', 'AD_MANAGER', 'SEARCH_ADS_360', 'YOUTUBE', 'ADS_DATA_HUB']):
            raise ValueError("must be one of enum values ('AUDIENCE_SOURCE_UNSPECIFIED', 'DISPLAY_VIDEO_360', 'CAMPAIGN_MANAGER', 'AD_MANAGER', 'SEARCH_ADS_360', 'YOUTUBE', 'ADS_DATA_HUB')")
        return value

    @field_validator('audience_type')
    def audience_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUDIENCE_TYPE_UNSPECIFIED', 'CUSTOMER_MATCH_CONTACT_INFO', 'CUSTOMER_MATCH_DEVICE_ID', 'CUSTOMER_MATCH_USER_ID', 'ACTIVITY_BASED', 'FREQUENCY_CAP', 'TAG_BASED', 'YOUTUBE_USERS', 'LICENSED']):
            raise ValueError("must be one of enum values ('AUDIENCE_TYPE_UNSPECIFIED', 'CUSTOMER_MATCH_CONTACT_INFO', 'CUSTOMER_MATCH_DEVICE_ID', 'CUSTOMER_MATCH_USER_ID', 'ACTIVITY_BASED', 'FREQUENCY_CAP', 'TAG_BASED', 'YOUTUBE_USERS', 'LICENSED')")
        return value

    @field_validator('first_and_third_party_audience_type')
    def first_and_third_party_audience_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_UNSPECIFIED', 'FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_FIRST_PARTY', 'FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_THIRD_PARTY']):
            raise ValueError("must be one of enum values ('FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_UNSPECIFIED', 'FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_FIRST_PARTY', 'FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_THIRD_PARTY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FirstAndThirdPartyAudience from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "active_display_audience_size",
            "audience_source",
            "display_audience_size",
            "display_desktop_audience_size",
            "display_mobile_app_audience_size",
            "display_mobile_web_audience_size",
            "first_and_third_party_audience_id",
            "gmail_audience_size",
            "name",
            "youtube_audience_size",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contact_info_list
        if self.contact_info_list:
            _dict['contactInfoList'] = self.contact_info_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mobile_device_id_list
        if self.mobile_device_id_list:
            _dict['mobileDeviceIdList'] = self.mobile_device_id_list.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FirstAndThirdPartyAudience from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeDisplayAudienceSize": obj.get("activeDisplayAudienceSize"),
            "appId": obj.get("appId"),
            "audienceSource": obj.get("audienceSource"),
            "audienceType": obj.get("audienceType"),
            "contactInfoList": ContactInfoList.from_dict(obj["contactInfoList"]) if obj.get("contactInfoList") is not None else None,
            "description": obj.get("description"),
            "displayAudienceSize": obj.get("displayAudienceSize"),
            "displayDesktopAudienceSize": obj.get("displayDesktopAudienceSize"),
            "displayMobileAppAudienceSize": obj.get("displayMobileAppAudienceSize"),
            "displayMobileWebAudienceSize": obj.get("displayMobileWebAudienceSize"),
            "displayName": obj.get("displayName"),
            "firstAndThirdPartyAudienceId": obj.get("firstAndThirdPartyAudienceId"),
            "firstAndThirdPartyAudienceType": obj.get("firstAndThirdPartyAudienceType"),
            "gmailAudienceSize": obj.get("gmailAudienceSize"),
            "membershipDurationDays": obj.get("membershipDurationDays"),
            "mobileDeviceIdList": MobileDeviceIdList.from_dict(obj["mobileDeviceIdList"]) if obj.get("mobileDeviceIdList") is not None else None,
            "name": obj.get("name"),
            "youtubeAudienceSize": obj.get("youtubeAudienceSize")
        })
        return _obj



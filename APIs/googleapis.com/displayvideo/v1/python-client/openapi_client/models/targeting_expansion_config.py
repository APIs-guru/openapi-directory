# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TargetingExpansionConfig(BaseModel):
    """
    Settings that control the [optimized targeting](//support.google.com/displayvideo/answer/12060859) settings of the line item.
    """ # noqa: E501
    exclude_first_party_audience: Optional[StrictBool] = Field(default=None, description="Whether to exclude first-party audiences from use in targeting expansion. This field was deprecated with the launch of [optimized targeting](//support.google.com/displayvideo/answer/12060859). This field will be set to `false`. If this field is set to `true` when deprecated, all positive first-party audience targeting assigned to this line item will be replaced with negative targeting of the same first-party audiences to ensure the continued exclusion of those audiences.", alias="excludeFirstPartyAudience")
    targeting_expansion_level: Optional[StrictStr] = Field(default=None, description="Required. Whether optimized targeting is turned on. This field supports the following values: * `NO_EXPANSION`: optimized targeting is turned off * `LEAST_EXPANSION`: optimized targeting is turned on If this field is set to any other value, it will automatically be set to `LEAST_EXPANSION`. `NO_EXPANSION` will be the default value for the field and will be automatically assigned if you do not set the field.", alias="targetingExpansionLevel")
    __properties: ClassVar[List[str]] = ["excludeFirstPartyAudience", "targetingExpansionLevel"]

    @field_validator('targeting_expansion_level')
    def targeting_expansion_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TARGETING_EXPANSION_LEVEL_UNSPECIFIED', 'NO_EXPANSION', 'LEAST_EXPANSION', 'SOME_EXPANSION', 'BALANCED_EXPANSION', 'MORE_EXPANSION', 'MOST_EXPANSION']):
            raise ValueError("must be one of enum values ('TARGETING_EXPANSION_LEVEL_UNSPECIFIED', 'NO_EXPANSION', 'LEAST_EXPANSION', 'SOME_EXPANSION', 'BALANCED_EXPANSION', 'MORE_EXPANSION', 'MOST_EXPANSION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TargetingExpansionConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TargetingExpansionConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "excludeFirstPartyAudience": obj.get("excludeFirstPartyAudience"),
            "targetingExpansionLevel": obj.get("targetingExpansionLevel")
        })
        return _obj



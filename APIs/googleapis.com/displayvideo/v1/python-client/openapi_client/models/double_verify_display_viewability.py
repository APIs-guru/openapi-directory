# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DoubleVerifyDisplayViewability(BaseModel):
    """
    Details of DoubleVerify display viewability settings.
    """ # noqa: E501
    iab: Optional[StrictStr] = Field(default=None, description="Target web and app inventory to maximize IAB viewable rate.")
    viewable_during: Optional[StrictStr] = Field(default=None, description="Target web and app inventory to maximize 100% viewable duration.", alias="viewableDuring")
    __properties: ClassVar[List[str]] = ["iab", "viewableDuring"]

    @field_validator('iab')
    def iab_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IAB_VIEWED_RATE_UNSPECIFIED', 'IAB_VIEWED_RATE_80_PERCENT_HIGHER', 'IAB_VIEWED_RATE_75_PERCENT_HIGHER', 'IAB_VIEWED_RATE_70_PERCENT_HIGHER', 'IAB_VIEWED_RATE_65_PERCENT_HIGHER', 'IAB_VIEWED_RATE_60_PERCENT_HIGHER', 'IAB_VIEWED_RATE_55_PERCENT_HIGHER', 'IAB_VIEWED_RATE_50_PERCENT_HIGHER', 'IAB_VIEWED_RATE_40_PERCENT_HIGHER', 'IAB_VIEWED_RATE_30_PERCENT_HIGHER']):
            raise ValueError("must be one of enum values ('IAB_VIEWED_RATE_UNSPECIFIED', 'IAB_VIEWED_RATE_80_PERCENT_HIGHER', 'IAB_VIEWED_RATE_75_PERCENT_HIGHER', 'IAB_VIEWED_RATE_70_PERCENT_HIGHER', 'IAB_VIEWED_RATE_65_PERCENT_HIGHER', 'IAB_VIEWED_RATE_60_PERCENT_HIGHER', 'IAB_VIEWED_RATE_55_PERCENT_HIGHER', 'IAB_VIEWED_RATE_50_PERCENT_HIGHER', 'IAB_VIEWED_RATE_40_PERCENT_HIGHER', 'IAB_VIEWED_RATE_30_PERCENT_HIGHER')")
        return value

    @field_validator('viewable_during')
    def viewable_during_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AVERAGE_VIEW_DURATION_UNSPECIFIED', 'AVERAGE_VIEW_DURATION_5_SEC', 'AVERAGE_VIEW_DURATION_10_SEC', 'AVERAGE_VIEW_DURATION_15_SEC']):
            raise ValueError("must be one of enum values ('AVERAGE_VIEW_DURATION_UNSPECIFIED', 'AVERAGE_VIEW_DURATION_5_SEC', 'AVERAGE_VIEW_DURATION_10_SEC', 'AVERAGE_VIEW_DURATION_15_SEC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DoubleVerifyDisplayViewability from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DoubleVerifyDisplayViewability from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "iab": obj.get("iab"),
            "viewableDuring": obj.get("viewableDuring")
        })
        return _obj



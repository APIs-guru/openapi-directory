# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.insertion_order import InsertionOrder

class TestInsertionOrder(unittest.TestCase):
    """InsertionOrder unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> InsertionOrder:
        """Test InsertionOrder
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `InsertionOrder`
        """
        model = InsertionOrder()
        if include_optional:
            return InsertionOrder(
                advertiser_id = '',
                bid_strategy = openapi_client.models.bidding_strategy.BiddingStrategy(
                    fixed_bid = openapi_client.models.fixed_bid_strategy.FixedBidStrategy(
                        bid_amount_micros = '', ), 
                    maximize_spend_auto_bid = openapi_client.models.maximize_spend_bid_strategy.MaximizeSpendBidStrategy(
                        custom_bidding_algorithm_id = '', 
                        max_average_cpm_bid_amount_micros = '', 
                        performance_goal_type = 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_UNSPECIFIED', 
                        raise_bid_for_deals = True, ), 
                    performance_goal_auto_bid = openapi_client.models.performance_goal_bid_strategy.PerformanceGoalBidStrategy(
                        custom_bidding_algorithm_id = '', 
                        max_average_cpm_bid_amount_micros = '', 
                        performance_goal_amount_micros = '', 
                        performance_goal_type = 'BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_UNSPECIFIED', ), ),
                billable_outcome = 'BILLABLE_OUTCOME_UNSPECIFIED',
                budget = openapi_client.models.insertion_order_budget.InsertionOrderBudget(
                    automation_type = 'INSERTION_ORDER_AUTOMATION_TYPE_UNSPECIFIED', 
                    budget_segments = [
                        openapi_client.models.insertion_order_budget_segment.InsertionOrderBudgetSegment(
                            budget_amount_micros = '', 
                            campaign_budget_id = '', 
                            date_range = openapi_client.models.date_range.DateRange(
                                end_date = openapi_client.models.date.Date(
                                    day = 56, 
                                    month = 56, 
                                    year = 56, ), 
                                start_date = openapi_client.models.date.Date(
                                    day = 56, 
                                    month = 56, 
                                    year = 56, ), ), 
                            description = '', )
                        ], 
                    budget_unit = 'BUDGET_UNIT_UNSPECIFIED', ),
                campaign_id = '',
                display_name = '',
                entity_status = 'ENTITY_STATUS_UNSPECIFIED',
                frequency_cap = openapi_client.models.frequency_cap.FrequencyCap(
                    max_impressions = 56, 
                    time_unit = 'TIME_UNIT_UNSPECIFIED', 
                    time_unit_count = 56, 
                    unlimited = True, ),
                insertion_order_id = '',
                insertion_order_type = 'INSERTION_ORDER_TYPE_UNSPECIFIED',
                integration_details = openapi_client.models.integration_details.IntegrationDetails(
                    details = '', 
                    integration_code = '', ),
                name = '',
                pacing = openapi_client.models.pacing.Pacing(
                    daily_max_impressions = '', 
                    daily_max_micros = '', 
                    pacing_period = 'PACING_PERIOD_UNSPECIFIED', 
                    pacing_type = 'PACING_TYPE_UNSPECIFIED', ),
                partner_costs = [
                    openapi_client.models.partner_cost.PartnerCost(
                        cost_type = 'PARTNER_COST_TYPE_UNSPECIFIED', 
                        fee_amount = '', 
                        fee_percentage_millis = '', 
                        fee_type = 'PARTNER_COST_FEE_TYPE_UNSPECIFIED', 
                        invoice_type = 'PARTNER_COST_INVOICE_TYPE_UNSPECIFIED', )
                    ],
                performance_goal = openapi_client.models.performance_goal.PerformanceGoal(
                    performance_goal_amount_micros = '', 
                    performance_goal_percentage_micros = '', 
                    performance_goal_string = '', 
                    performance_goal_type = 'PERFORMANCE_GOAL_TYPE_UNSPECIFIED', ),
                reservation_type = 'RESERVATION_TYPE_UNSPECIFIED',
                update_time = ''
            )
        else:
            return InsertionOrder(
        )
        """

    def testInsertionOrder(self):
        """Test InsertionOrder"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Display & Video 360 API

    Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_partners_response import ListPartnersResponse

class TestListPartnersResponse(unittest.TestCase):
    """ListPartnersResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListPartnersResponse:
        """Test ListPartnersResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListPartnersResponse`
        """
        model = ListPartnersResponse()
        if include_optional:
            return ListPartnersResponse(
                next_page_token = '',
                partners = [
                    openapi_client.models.partner.Partner(
                        ad_server_config = openapi_client.models.partner_ad_server_config.PartnerAdServerConfig(
                            measurement_config = openapi_client.models.measurement_config.MeasurementConfig(
                                dv360_to_cm_cost_reporting_enabled = True, 
                                dv360_to_cm_data_sharing_enabled = True, ), ), 
                        data_access_config = openapi_client.models.partner_data_access_config.PartnerDataAccessConfig(
                            sdf_config = openapi_client.models.sdf_config.SdfConfig(
                                admin_email = '', 
                                version = 'SDF_VERSION_UNSPECIFIED', ), ), 
                        display_name = '', 
                        entity_status = 'ENTITY_STATUS_UNSPECIFIED', 
                        exchange_config = openapi_client.models.exchange_config.ExchangeConfig(
                            enabled_exchanges = [
                                openapi_client.models.exchange_config_enabled_exchange.ExchangeConfigEnabledExchange(
                                    exchange = 'EXCHANGE_UNSPECIFIED', 
                                    google_ad_manager_agency_id = '', 
                                    google_ad_manager_buyer_network_id = '', 
                                    seat_id = '', )
                                ], ), 
                        general_config = openapi_client.models.partner_general_config.PartnerGeneralConfig(
                            currency_code = '', 
                            time_zone = '', ), 
                        name = '', 
                        partner_id = '', 
                        update_time = '', )
                    ]
            )
        else:
            return ListPartnersResponse(
        )
        """

    def testListPartnersResponse(self):
        """Test ListPartnersResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

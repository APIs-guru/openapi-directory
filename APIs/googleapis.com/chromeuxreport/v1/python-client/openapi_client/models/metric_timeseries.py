# coding: utf-8

"""
    Chrome UX Report API

    The Chrome UX Report API lets you view real user experience data for millions of websites. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.fraction_timeseries import FractionTimeseries
from openapi_client.models.timeseries_bin import TimeseriesBin
from openapi_client.models.timeseries_percentiles import TimeseriesPercentiles
from typing import Optional, Set
from typing_extensions import Self

class MetricTimeseries(BaseModel):
    """
    A `metric timeseries` is a set of user experience data for a single web performance metric, like \"first contentful paint\". It contains a summary histogram of real world Chrome usage as a series of `bins`, where each bin has density values for a particular time period.
    """ # noqa: E501
    fraction_timeseries: Optional[Dict[str, FractionTimeseries]] = Field(default=None, description="Mapping from labels to timeseries of fractions attributed to this label.", alias="fractionTimeseries")
    histogram_timeseries: Optional[List[TimeseriesBin]] = Field(default=None, description="The histogram of user experiences for a metric. The histogram will have at least one bin and the densities of all bins will add up to ~1, for each timeseries entry.", alias="histogramTimeseries")
    percentiles_timeseries: Optional[TimeseriesPercentiles] = Field(default=None, alias="percentilesTimeseries")
    __properties: ClassVar[List[str]] = ["fractionTimeseries", "histogramTimeseries", "percentilesTimeseries"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetricTimeseries from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in fraction_timeseries (dict)
        _field_dict = {}
        if self.fraction_timeseries:
            for _key_fraction_timeseries in self.fraction_timeseries:
                if self.fraction_timeseries[_key_fraction_timeseries]:
                    _field_dict[_key_fraction_timeseries] = self.fraction_timeseries[_key_fraction_timeseries].to_dict()
            _dict['fractionTimeseries'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in histogram_timeseries (list)
        _items = []
        if self.histogram_timeseries:
            for _item_histogram_timeseries in self.histogram_timeseries:
                if _item_histogram_timeseries:
                    _items.append(_item_histogram_timeseries.to_dict())
            _dict['histogramTimeseries'] = _items
        # override the default output from pydantic by calling `to_dict()` of percentiles_timeseries
        if self.percentiles_timeseries:
            _dict['percentilesTimeseries'] = self.percentiles_timeseries.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetricTimeseries from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fractionTimeseries": dict(
                (_k, FractionTimeseries.from_dict(_v))
                for _k, _v in obj["fractionTimeseries"].items()
            )
            if obj.get("fractionTimeseries") is not None
            else None,
            "histogramTimeseries": [TimeseriesBin.from_dict(_item) for _item in obj["histogramTimeseries"]] if obj.get("histogramTimeseries") is not None else None,
            "percentilesTimeseries": TimeseriesPercentiles.from_dict(obj["percentilesTimeseries"]) if obj.get("percentilesTimeseries") is not None else None
        })
        return _obj



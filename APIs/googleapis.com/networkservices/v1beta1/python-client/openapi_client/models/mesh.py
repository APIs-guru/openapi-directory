# coding: utf-8

"""
    Network Services API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Mesh(BaseModel):
    """
    Mesh represents a logical configuration grouping for workload to workload communication within a service mesh. Routes that point to mesh dictate how requests are routed within this logical mesh boundary.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the resource was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. A free-text description of the resource. Max length 1024 characters.")
    envoy_headers: Optional[StrictStr] = Field(default=None, description="Optional. Determines if envoy will insert internal debug headers into upstream requests. Other Envoy headers may still be injected. By default, envoy will not insert any debug headers.", alias="envoyHeaders")
    interception_port: Optional[StrictInt] = Field(default=None, description="Optional. If set to a valid TCP port (1-65535), instructs the SIDECAR proxy to listen on the specified port of localhost (127.0.0.1) address. The SIDECAR proxy will expect all traffic to be redirected to this port regardless of its actual ip:port destination. If unset, a port '15001' is used as the interception port. This is applicable only for sidecar proxy deployments.", alias="interceptionPort")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Set of label tags associated with the Mesh resource.")
    name: Optional[StrictStr] = Field(default=None, description="Required. Name of the Mesh resource. It matches pattern `projects/*/locations/global/meshes/`.")
    self_link: Optional[StrictStr] = Field(default=None, description="Output only. Server-defined URL of this resource", alias="selfLink")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the resource was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "envoyHeaders", "interceptionPort", "labels", "name", "selfLink", "updateTime"]

    @field_validator('envoy_headers')
    def envoy_headers_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENVOY_HEADERS_UNSPECIFIED', 'NONE', 'DEBUG_HEADERS']):
            raise ValueError("must be one of enum values ('ENVOY_HEADERS_UNSPECIFIED', 'NONE', 'DEBUG_HEADERS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Mesh from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "self_link",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Mesh from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "envoyHeaders": obj.get("envoyHeaders"),
            "interceptionPort": obj.get("interceptionPort"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "selfLink": obj.get("selfLink"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



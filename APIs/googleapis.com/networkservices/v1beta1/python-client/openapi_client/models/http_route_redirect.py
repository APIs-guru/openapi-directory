# coding: utf-8

"""
    Network Services API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HttpRouteRedirect(BaseModel):
    """
    The specification for redirecting traffic.
    """ # noqa: E501
    host_redirect: Optional[StrictStr] = Field(default=None, description="The host that will be used in the redirect response instead of the one that was supplied in the request.", alias="hostRedirect")
    https_redirect: Optional[StrictBool] = Field(default=None, description="If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. The default is set to false.", alias="httpsRedirect")
    path_redirect: Optional[StrictStr] = Field(default=None, description="The path that will be used in the redirect response instead of the one that was supplied in the request. path_redirect can not be supplied together with prefix_redirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.", alias="pathRedirect")
    port_redirect: Optional[StrictInt] = Field(default=None, description="The port that will be used in the redirected request instead of the one that was supplied in the request.", alias="portRedirect")
    prefix_rewrite: Optional[StrictStr] = Field(default=None, description="Indicates that during redirection, the matched prefix (or path) should be swapped with this value. This option allows URLs be dynamically created based on the request.", alias="prefixRewrite")
    response_code: Optional[StrictStr] = Field(default=None, description="The HTTP Status code to use for the redirect.", alias="responseCode")
    strip_query: Optional[StrictBool] = Field(default=None, description="if set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.", alias="stripQuery")
    __properties: ClassVar[List[str]] = ["hostRedirect", "httpsRedirect", "pathRedirect", "portRedirect", "prefixRewrite", "responseCode", "stripQuery"]

    @field_validator('response_code')
    def response_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESPONSE_CODE_UNSPECIFIED', 'MOVED_PERMANENTLY_DEFAULT', 'FOUND', 'SEE_OTHER', 'TEMPORARY_REDIRECT', 'PERMANENT_REDIRECT']):
            raise ValueError("must be one of enum values ('RESPONSE_CODE_UNSPECIFIED', 'MOVED_PERMANENTLY_DEFAULT', 'FOUND', 'SEE_OTHER', 'TEMPORARY_REDIRECT', 'PERMANENT_REDIRECT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HttpRouteRedirect from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HttpRouteRedirect from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hostRedirect": obj.get("hostRedirect"),
            "httpsRedirect": obj.get("httpsRedirect"),
            "pathRedirect": obj.get("pathRedirect"),
            "portRedirect": obj.get("portRedirect"),
            "prefixRewrite": obj.get("prefixRewrite"),
            "responseCode": obj.get("responseCode"),
            "stripQuery": obj.get("stripQuery")
        })
        return _obj



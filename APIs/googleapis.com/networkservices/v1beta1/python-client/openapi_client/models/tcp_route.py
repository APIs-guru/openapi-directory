# coding: utf-8

"""
    Network Services API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.tcp_route_route_rule import TcpRouteRouteRule
from typing import Optional, Set
from typing_extensions import Self

class TcpRoute(BaseModel):
    """
    TcpRoute is the resource defining how TCP traffic should be routed by a Mesh/Gateway resource.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the resource was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. A free-text description of the resource. Max length 1024 characters.")
    gateways: Optional[List[StrictStr]] = Field(default=None, description="Optional. Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Set of label tags associated with the TcpRoute resource.")
    meshes: Optional[List[StrictStr]] = Field(default=None, description="Optional. Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR")
    name: Optional[StrictStr] = Field(default=None, description="Required. Name of the TcpRoute resource. It matches pattern `projects/*/locations/global/tcpRoutes/tcp_route_name>`.")
    rules: Optional[List[TcpRouteRouteRule]] = Field(default=None, description="Required. Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.")
    self_link: Optional[StrictStr] = Field(default=None, description="Output only. Server-defined URL of this resource", alias="selfLink")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the resource was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "gateways", "labels", "meshes", "name", "rules", "selfLink", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TcpRoute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "self_link",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item_rules in self.rules:
                if _item_rules:
                    _items.append(_item_rules.to_dict())
            _dict['rules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TcpRoute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "gateways": obj.get("gateways"),
            "labels": obj.get("labels"),
            "meshes": obj.get("meshes"),
            "name": obj.get("name"),
            "rules": [TcpRouteRouteRule.from_dict(_item) for _item in obj["rules"]] if obj.get("rules") is not None else None,
            "selfLink": obj.get("selfLink"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



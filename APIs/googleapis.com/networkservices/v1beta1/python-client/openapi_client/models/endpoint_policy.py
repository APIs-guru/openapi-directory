# coding: utf-8

"""
    Network Services API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.endpoint_matcher import EndpointMatcher
from openapi_client.models.traffic_port_selector import TrafficPortSelector
from typing import Optional, Set
from typing_extensions import Self

class EndpointPolicy(BaseModel):
    """
    EndpointPolicy is a resource that helps apply desired configuration on the endpoints that match specific criteria. For example, this resource can be used to apply \"authentication config\" an all endpoints that serve on port 8080.
    """ # noqa: E501
    authorization_policy: Optional[StrictStr] = Field(default=None, description="Optional. This field specifies the URL of AuthorizationPolicy resource that applies authorization policies to the inbound traffic at the matched endpoints. Refer to Authorization. If this field is not specified, authorization is disabled(no authz checks) for this endpoint.", alias="authorizationPolicy")
    client_tls_policy: Optional[StrictStr] = Field(default=None, description="Optional. A URL referring to a ClientTlsPolicy resource. ClientTlsPolicy can be set to specify the authentication for traffic from the proxy to the actual endpoints. More specifically, it is applied to the outgoing traffic from the proxy to the endpoint. This is typically used for sidecar model where the proxy identifies itself as endpoint to the control plane, with the connection between sidecar and endpoint requiring authentication. If this field is not set, authentication is disabled(open). Applicable only when EndpointPolicyType is SIDECAR_PROXY.", alias="clientTlsPolicy")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the resource was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. A free-text description of the resource. Max length 1024 characters.")
    endpoint_matcher: Optional[EndpointMatcher] = Field(default=None, alias="endpointMatcher")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Set of label tags associated with the EndpointPolicy resource.")
    name: Optional[StrictStr] = Field(default=None, description="Required. Name of the EndpointPolicy resource. It matches pattern `projects/{project}/locations/global/endpointPolicies/{endpoint_policy}`.")
    server_tls_policy: Optional[StrictStr] = Field(default=None, description="Optional. A URL referring to ServerTlsPolicy resource. ServerTlsPolicy is used to determine the authentication policy to be applied to terminate the inbound traffic at the identified backends. If this field is not set, authentication is disabled(open) for this endpoint.", alias="serverTlsPolicy")
    traffic_port_selector: Optional[TrafficPortSelector] = Field(default=None, alias="trafficPortSelector")
    type: Optional[StrictStr] = Field(default=None, description="Required. The type of endpoint policy. This is primarily used to validate the configuration.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the resource was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["authorizationPolicy", "clientTlsPolicy", "createTime", "description", "endpointMatcher", "labels", "name", "serverTlsPolicy", "trafficPortSelector", "type", "updateTime"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENDPOINT_POLICY_TYPE_UNSPECIFIED', 'SIDECAR_PROXY', 'GRPC_SERVER']):
            raise ValueError("must be one of enum values ('ENDPOINT_POLICY_TYPE_UNSPECIFIED', 'SIDECAR_PROXY', 'GRPC_SERVER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EndpointPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of endpoint_matcher
        if self.endpoint_matcher:
            _dict['endpointMatcher'] = self.endpoint_matcher.to_dict()
        # override the default output from pydantic by calling `to_dict()` of traffic_port_selector
        if self.traffic_port_selector:
            _dict['trafficPortSelector'] = self.traffic_port_selector.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EndpointPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorizationPolicy": obj.get("authorizationPolicy"),
            "clientTlsPolicy": obj.get("clientTlsPolicy"),
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "endpointMatcher": EndpointMatcher.from_dict(obj["endpointMatcher"]) if obj.get("endpointMatcher") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "serverTlsPolicy": obj.get("serverTlsPolicy"),
            "trafficPortSelector": TrafficPortSelector.from_dict(obj["trafficPortSelector"]) if obj.get("trafficPortSelector") is not None else None,
            "type": obj.get("type"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



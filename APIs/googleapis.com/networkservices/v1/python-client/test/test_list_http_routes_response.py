# coding: utf-8

"""
    Network Services API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_http_routes_response import ListHttpRoutesResponse

class TestListHttpRoutesResponse(unittest.TestCase):
    """ListHttpRoutesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListHttpRoutesResponse:
        """Test ListHttpRoutesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListHttpRoutesResponse`
        """
        model = ListHttpRoutesResponse()
        if include_optional:
            return ListHttpRoutesResponse(
                http_routes = [
                    openapi_client.models.http_route.HttpRoute(
                        create_time = '', 
                        description = '', 
                        gateways = [
                            ''
                            ], 
                        hostnames = [
                            ''
                            ], 
                        labels = {
                            'key' : ''
                            }, 
                        meshes = [
                            ''
                            ], 
                        name = '', 
                        rules = [
                            openapi_client.models.http_route_route_rule.HttpRouteRouteRule(
                                action = openapi_client.models.http_route_route_action.HttpRouteRouteAction(
                                    cors_policy = openapi_client.models.http_route_cors_policy.HttpRouteCorsPolicy(
                                        allow_credentials = True, 
                                        allow_headers = [
                                            ''
                                            ], 
                                        allow_methods = [
                                            ''
                                            ], 
                                        allow_origin_regexes = [
                                            ''
                                            ], 
                                        allow_origins = [
                                            ''
                                            ], 
                                        disabled = True, 
                                        expose_headers = [
                                            ''
                                            ], 
                                        max_age = '', ), 
                                    destinations = [
                                        openapi_client.models.http_route_destination.HttpRouteDestination(
                                            request_header_modifier = openapi_client.models.http_route_header_modifier.HttpRouteHeaderModifier(
                                                add = {
                                                    'key' : ''
                                                    }, 
                                                remove = [
                                                    ''
                                                    ], 
                                                set = {
                                                    'key' : ''
                                                    }, ), 
                                            response_header_modifier = openapi_client.models.http_route_header_modifier.HttpRouteHeaderModifier(), 
                                            service_name = '', 
                                            weight = 56, )
                                        ], 
                                    direct_response = openapi_client.models.http_route_http_direct_response.HttpRouteHttpDirectResponse(
                                        bytes_body = 'YQ==', 
                                        status = 56, 
                                        string_body = '', ), 
                                    fault_injection_policy = openapi_client.models.http_route_fault_injection_policy.HttpRouteFaultInjectionPolicy(
                                        abort = openapi_client.models.http_route_fault_injection_policy_abort.HttpRouteFaultInjectionPolicyAbort(
                                            http_status = 56, 
                                            percentage = 56, ), 
                                        delay = openapi_client.models.http_route_fault_injection_policy_delay.HttpRouteFaultInjectionPolicyDelay(
                                            fixed_delay = '', 
                                            percentage = 56, ), ), 
                                    idle_timeout = '', 
                                    redirect = openapi_client.models.http_route_redirect.HttpRouteRedirect(
                                        host_redirect = '', 
                                        https_redirect = True, 
                                        path_redirect = '', 
                                        port_redirect = 56, 
                                        prefix_rewrite = '', 
                                        response_code = 'RESPONSE_CODE_UNSPECIFIED', 
                                        strip_query = True, ), 
                                    request_header_modifier = , 
                                    request_mirror_policy = openapi_client.models.http_route_request_mirror_policy.HttpRouteRequestMirrorPolicy(
                                        destination = openapi_client.models.http_route_destination.HttpRouteDestination(
                                            service_name = '', 
                                            weight = 56, ), 
                                        mirror_percent = 1.337, ), 
                                    response_header_modifier = , 
                                    retry_policy = openapi_client.models.http_route_retry_policy.HttpRouteRetryPolicy(
                                        num_retries = 56, 
                                        per_try_timeout = '', 
                                        retry_conditions = [
                                            ''
                                            ], ), 
                                    stateful_session_affinity = openapi_client.models.http_route_stateful_session_affinity_policy.HttpRouteStatefulSessionAffinityPolicy(
                                        cookie_ttl = '', ), 
                                    timeout = '', 
                                    url_rewrite = openapi_client.models.http_route_url_rewrite.HttpRouteURLRewrite(
                                        host_rewrite = '', 
                                        path_prefix_rewrite = '', ), ), 
                                matches = [
                                    openapi_client.models.http_route_route_match.HttpRouteRouteMatch(
                                        full_path_match = '', 
                                        headers = [
                                            openapi_client.models.http_route_header_match.HttpRouteHeaderMatch(
                                                exact_match = '', 
                                                header = '', 
                                                invert_match = True, 
                                                prefix_match = '', 
                                                present_match = True, 
                                                range_match = openapi_client.models.http_route_header_match_integer_range.HttpRouteHeaderMatchIntegerRange(
                                                    end = 56, 
                                                    start = 56, ), 
                                                regex_match = '', 
                                                suffix_match = '', )
                                            ], 
                                        ignore_case = True, 
                                        prefix_match = '', 
                                        query_parameters = [
                                            openapi_client.models.http_route_query_parameter_match.HttpRouteQueryParameterMatch(
                                                exact_match = '', 
                                                present_match = True, 
                                                query_parameter = '', 
                                                regex_match = '', )
                                            ], 
                                        regex_match = '', )
                                    ], )
                            ], 
                        self_link = '', 
                        update_time = '', )
                    ],
                next_page_token = ''
            )
        else:
            return ListHttpRoutesResponse(
        )
        """

    def testListHttpRoutesResponse(self):
        """Test ListHttpRoutesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Network Services API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.grpc_route_route_rule import GrpcRouteRouteRule

class TestGrpcRouteRouteRule(unittest.TestCase):
    """GrpcRouteRouteRule unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GrpcRouteRouteRule:
        """Test GrpcRouteRouteRule
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GrpcRouteRouteRule`
        """
        model = GrpcRouteRouteRule()
        if include_optional:
            return GrpcRouteRouteRule(
                action = openapi_client.models.grpc_route_route_action.GrpcRouteRouteAction(
                    destinations = [
                        openapi_client.models.grpc_route_destination.GrpcRouteDestination(
                            service_name = '', 
                            weight = 56, )
                        ], 
                    fault_injection_policy = openapi_client.models.grpc_route_fault_injection_policy.GrpcRouteFaultInjectionPolicy(
                        abort = openapi_client.models.grpc_route_fault_injection_policy_abort.GrpcRouteFaultInjectionPolicyAbort(
                            http_status = 56, 
                            percentage = 56, ), 
                        delay = openapi_client.models.grpc_route_fault_injection_policy_delay.GrpcRouteFaultInjectionPolicyDelay(
                            fixed_delay = '', 
                            percentage = 56, ), ), 
                    idle_timeout = '', 
                    retry_policy = openapi_client.models.grpc_route_retry_policy.GrpcRouteRetryPolicy(
                        num_retries = 56, 
                        retry_conditions = [
                            ''
                            ], ), 
                    stateful_session_affinity = openapi_client.models.grpc_route_stateful_session_affinity_policy.GrpcRouteStatefulSessionAffinityPolicy(
                        cookie_ttl = '', ), 
                    timeout = '', ),
                matches = [
                    openapi_client.models.grpc_route_route_match.GrpcRouteRouteMatch(
                        headers = [
                            openapi_client.models.grpc_route_header_match.GrpcRouteHeaderMatch(
                                key = '', 
                                type = 'TYPE_UNSPECIFIED', 
                                value = '', )
                            ], 
                        method = openapi_client.models.grpc_route_method_match.GrpcRouteMethodMatch(
                            case_sensitive = True, 
                            grpc_method = '', 
                            grpc_service = '', 
                            type = 'TYPE_UNSPECIFIED', ), )
                    ]
            )
        else:
            return GrpcRouteRouteRule(
        )
        """

    def testGrpcRouteRouteRule(self):
        """Test GrpcRouteRouteRule"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

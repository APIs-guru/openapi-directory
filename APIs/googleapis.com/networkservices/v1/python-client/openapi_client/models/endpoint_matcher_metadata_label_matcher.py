# coding: utf-8

"""
    Network Services API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.endpoint_matcher_metadata_label_matcher_metadata_labels import EndpointMatcherMetadataLabelMatcherMetadataLabels
from typing import Optional, Set
from typing_extensions import Self

class EndpointMatcherMetadataLabelMatcher(BaseModel):
    """
    The matcher that is based on node metadata presented by xDS clients.
    """ # noqa: E501
    metadata_label_match_criteria: Optional[StrictStr] = Field(default=None, description="Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), pick up the one with older creation time.", alias="metadataLabelMatchCriteria")
    metadata_labels: Optional[List[EndpointMatcherMetadataLabelMatcherMetadataLabels]] = Field(default=None, description="The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).", alias="metadataLabels")
    __properties: ClassVar[List[str]] = ["metadataLabelMatchCriteria", "metadataLabels"]

    @field_validator('metadata_label_match_criteria')
    def metadata_label_match_criteria_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED', 'MATCH_ANY', 'MATCH_ALL']):
            raise ValueError("must be one of enum values ('METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED', 'MATCH_ANY', 'MATCH_ALL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EndpointMatcherMetadataLabelMatcher from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metadata_labels (list)
        _items = []
        if self.metadata_labels:
            for _item_metadata_labels in self.metadata_labels:
                if _item_metadata_labels:
                    _items.append(_item_metadata_labels.to_dict())
            _dict['metadataLabels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EndpointMatcherMetadataLabelMatcher from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metadataLabelMatchCriteria": obj.get("metadataLabelMatchCriteria"),
            "metadataLabels": [EndpointMatcherMetadataLabelMatcherMetadataLabels.from_dict(_item) for _item in obj["metadataLabels"]] if obj.get("metadataLabels") is not None else None
        })
        return _obj



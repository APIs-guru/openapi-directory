# coding: utf-8

"""
    Network Services API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.extension_chain import ExtensionChain
from typing import Optional, Set
from typing_extensions import Self

class LbRouteExtension(BaseModel):
    """
    `LbRouteExtension` is a resource that lets you control where traffic is routed to for a given request.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the resource was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. A human-readable description of the resource.")
    extension_chains: Optional[List[ExtensionChain]] = Field(default=None, description="Required. A set of ordered extension chains that contain the match conditions and extensions to execute. Match conditions for each extension chain are evaluated in sequence for a given request. The first extension chain that has a condition that matches the request is executed. Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.", alias="extensionChains")
    forwarding_rules: Optional[List[StrictStr]] = Field(default=None, description="Required. A list of references to the forwarding rules to which this service extension is attached to. At least one forwarding rule is required. There can be only one `LbRouteExtension` resource per forwarding rule.", alias="forwardingRules")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Set of labels associated with the `LbRouteExtension` resource. The format must comply with [the requirements for labels](/compute/docs/labeling-resources#requirements) for Google Cloud resources.")
    load_balancing_scheme: Optional[StrictStr] = Field(default=None, description="Required. All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. Supported values: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`. For more information, refer to [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).", alias="loadBalancingScheme")
    name: Optional[StrictStr] = Field(default=None, description="Required. Identifier. Name of the `LbRouteExtension` resource in the following format: `projects/{project}/locations/{location}/lbRouteExtensions/{lb_route_extension}`.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the resource was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "extensionChains", "forwardingRules", "labels", "loadBalancingScheme", "name", "updateTime"]

    @field_validator('load_balancing_scheme')
    def load_balancing_scheme_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LOAD_BALANCING_SCHEME_UNSPECIFIED', 'INTERNAL_MANAGED', 'EXTERNAL_MANAGED']):
            raise ValueError("must be one of enum values ('LOAD_BALANCING_SCHEME_UNSPECIFIED', 'INTERNAL_MANAGED', 'EXTERNAL_MANAGED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LbRouteExtension from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in extension_chains (list)
        _items = []
        if self.extension_chains:
            for _item_extension_chains in self.extension_chains:
                if _item_extension_chains:
                    _items.append(_item_extension_chains.to_dict())
            _dict['extensionChains'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LbRouteExtension from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "extensionChains": [ExtensionChain.from_dict(_item) for _item in obj["extensionChains"]] if obj.get("extensionChains") is not None else None,
            "forwardingRules": obj.get("forwardingRules"),
            "labels": obj.get("labels"),
            "loadBalancingScheme": obj.get("loadBalancingScheme"),
            "name": obj.get("name"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Network Services API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.http_route_cors_policy import HttpRouteCorsPolicy
from openapi_client.models.http_route_destination import HttpRouteDestination
from openapi_client.models.http_route_fault_injection_policy import HttpRouteFaultInjectionPolicy
from openapi_client.models.http_route_header_modifier import HttpRouteHeaderModifier
from openapi_client.models.http_route_http_direct_response import HttpRouteHttpDirectResponse
from openapi_client.models.http_route_redirect import HttpRouteRedirect
from openapi_client.models.http_route_request_mirror_policy import HttpRouteRequestMirrorPolicy
from openapi_client.models.http_route_retry_policy import HttpRouteRetryPolicy
from openapi_client.models.http_route_stateful_session_affinity_policy import HttpRouteStatefulSessionAffinityPolicy
from openapi_client.models.http_route_url_rewrite import HttpRouteURLRewrite
from typing import Optional, Set
from typing_extensions import Self

class HttpRouteRouteAction(BaseModel):
    """
    The specifications for routing traffic and applying associated policies.
    """ # noqa: E501
    cors_policy: Optional[HttpRouteCorsPolicy] = Field(default=None, alias="corsPolicy")
    destinations: Optional[List[HttpRouteDestination]] = Field(default=None, description="The destination to which traffic should be forwarded.")
    direct_response: Optional[HttpRouteHttpDirectResponse] = Field(default=None, alias="directResponse")
    fault_injection_policy: Optional[HttpRouteFaultInjectionPolicy] = Field(default=None, alias="faultInjectionPolicy")
    idle_timeout: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the idle timeout for the selected route. The idle timeout is defined as the period in which there are no bytes sent or received on either the upstream or downstream connection. If not set, the default idle timeout is 1 hour. If set to 0s, the timeout will be disabled.", alias="idleTimeout")
    redirect: Optional[HttpRouteRedirect] = None
    request_header_modifier: Optional[HttpRouteHeaderModifier] = Field(default=None, alias="requestHeaderModifier")
    request_mirror_policy: Optional[HttpRouteRequestMirrorPolicy] = Field(default=None, alias="requestMirrorPolicy")
    response_header_modifier: Optional[HttpRouteHeaderModifier] = Field(default=None, alias="responseHeaderModifier")
    retry_policy: Optional[HttpRouteRetryPolicy] = Field(default=None, alias="retryPolicy")
    stateful_session_affinity: Optional[HttpRouteStatefulSessionAffinityPolicy] = Field(default=None, alias="statefulSessionAffinity")
    timeout: Optional[StrictStr] = Field(default=None, description="Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.")
    url_rewrite: Optional[HttpRouteURLRewrite] = Field(default=None, alias="urlRewrite")
    __properties: ClassVar[List[str]] = ["corsPolicy", "destinations", "directResponse", "faultInjectionPolicy", "idleTimeout", "redirect", "requestHeaderModifier", "requestMirrorPolicy", "responseHeaderModifier", "retryPolicy", "statefulSessionAffinity", "timeout", "urlRewrite"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HttpRouteRouteAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cors_policy
        if self.cors_policy:
            _dict['corsPolicy'] = self.cors_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in destinations (list)
        _items = []
        if self.destinations:
            for _item_destinations in self.destinations:
                if _item_destinations:
                    _items.append(_item_destinations.to_dict())
            _dict['destinations'] = _items
        # override the default output from pydantic by calling `to_dict()` of direct_response
        if self.direct_response:
            _dict['directResponse'] = self.direct_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fault_injection_policy
        if self.fault_injection_policy:
            _dict['faultInjectionPolicy'] = self.fault_injection_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of redirect
        if self.redirect:
            _dict['redirect'] = self.redirect.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_header_modifier
        if self.request_header_modifier:
            _dict['requestHeaderModifier'] = self.request_header_modifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_mirror_policy
        if self.request_mirror_policy:
            _dict['requestMirrorPolicy'] = self.request_mirror_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response_header_modifier
        if self.response_header_modifier:
            _dict['responseHeaderModifier'] = self.response_header_modifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retry_policy
        if self.retry_policy:
            _dict['retryPolicy'] = self.retry_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stateful_session_affinity
        if self.stateful_session_affinity:
            _dict['statefulSessionAffinity'] = self.stateful_session_affinity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of url_rewrite
        if self.url_rewrite:
            _dict['urlRewrite'] = self.url_rewrite.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HttpRouteRouteAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "corsPolicy": HttpRouteCorsPolicy.from_dict(obj["corsPolicy"]) if obj.get("corsPolicy") is not None else None,
            "destinations": [HttpRouteDestination.from_dict(_item) for _item in obj["destinations"]] if obj.get("destinations") is not None else None,
            "directResponse": HttpRouteHttpDirectResponse.from_dict(obj["directResponse"]) if obj.get("directResponse") is not None else None,
            "faultInjectionPolicy": HttpRouteFaultInjectionPolicy.from_dict(obj["faultInjectionPolicy"]) if obj.get("faultInjectionPolicy") is not None else None,
            "idleTimeout": obj.get("idleTimeout"),
            "redirect": HttpRouteRedirect.from_dict(obj["redirect"]) if obj.get("redirect") is not None else None,
            "requestHeaderModifier": HttpRouteHeaderModifier.from_dict(obj["requestHeaderModifier"]) if obj.get("requestHeaderModifier") is not None else None,
            "requestMirrorPolicy": HttpRouteRequestMirrorPolicy.from_dict(obj["requestMirrorPolicy"]) if obj.get("requestMirrorPolicy") is not None else None,
            "responseHeaderModifier": HttpRouteHeaderModifier.from_dict(obj["responseHeaderModifier"]) if obj.get("responseHeaderModifier") is not None else None,
            "retryPolicy": HttpRouteRetryPolicy.from_dict(obj["retryPolicy"]) if obj.get("retryPolicy") is not None else None,
            "statefulSessionAffinity": HttpRouteStatefulSessionAffinityPolicy.from_dict(obj["statefulSessionAffinity"]) if obj.get("statefulSessionAffinity") is not None else None,
            "timeout": obj.get("timeout"),
            "urlRewrite": HttpRouteURLRewrite.from_dict(obj["urlRewrite"]) if obj.get("urlRewrite") is not None else None
        })
        return _obj



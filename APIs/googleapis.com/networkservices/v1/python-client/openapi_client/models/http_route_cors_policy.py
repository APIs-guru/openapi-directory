# coding: utf-8

"""
    Network Services API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HttpRouteCorsPolicy(BaseModel):
    """
    The Specification for allowing client side cross-origin requests.
    """ # noqa: E501
    allow_credentials: Optional[StrictBool] = Field(default=None, description="In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default value is false.", alias="allowCredentials")
    allow_headers: Optional[List[StrictStr]] = Field(default=None, description="Specifies the content for Access-Control-Allow-Headers header.", alias="allowHeaders")
    allow_methods: Optional[List[StrictStr]] = Field(default=None, description="Specifies the content for Access-Control-Allow-Methods header.", alias="allowMethods")
    allow_origin_regexes: Optional[List[StrictStr]] = Field(default=None, description="Specifies the regular expression patterns that match allowed origins. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax.", alias="allowOriginRegexes")
    allow_origins: Optional[List[StrictStr]] = Field(default=None, description="Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allow_origins or an item in allow_origin_regexes.", alias="allowOrigins")
    disabled: Optional[StrictBool] = Field(default=None, description="If true, the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.")
    expose_headers: Optional[List[StrictStr]] = Field(default=None, description="Specifies the content for Access-Control-Expose-Headers header.", alias="exposeHeaders")
    max_age: Optional[StrictStr] = Field(default=None, description="Specifies how long result of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.", alias="maxAge")
    __properties: ClassVar[List[str]] = ["allowCredentials", "allowHeaders", "allowMethods", "allowOriginRegexes", "allowOrigins", "disabled", "exposeHeaders", "maxAge"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HttpRouteCorsPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HttpRouteCorsPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowCredentials": obj.get("allowCredentials"),
            "allowHeaders": obj.get("allowHeaders"),
            "allowMethods": obj.get("allowMethods"),
            "allowOriginRegexes": obj.get("allowOriginRegexes"),
            "allowOrigins": obj.get("allowOrigins"),
            "disabled": obj.get("disabled"),
            "exposeHeaders": obj.get("exposeHeaders"),
            "maxAge": obj.get("maxAge")
        })
        return _obj



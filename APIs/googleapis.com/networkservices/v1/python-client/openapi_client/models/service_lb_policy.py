# coding: utf-8

"""
    Network Services API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.service_lb_policy_auto_capacity_drain import ServiceLbPolicyAutoCapacityDrain
from openapi_client.models.service_lb_policy_failover_config import ServiceLbPolicyFailoverConfig
from typing import Optional, Set
from typing_extensions import Self

class ServiceLbPolicy(BaseModel):
    """
    ServiceLbPolicy holds global load balancing and traffic distribution configuration that can be applied to a BackendService.
    """ # noqa: E501
    auto_capacity_drain: Optional[ServiceLbPolicyAutoCapacityDrain] = Field(default=None, alias="autoCapacityDrain")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when this resource was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. A free-text description of the resource. Max length 1024 characters.")
    failover_config: Optional[ServiceLbPolicyFailoverConfig] = Field(default=None, alias="failoverConfig")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Set of label tags associated with the ServiceLbPolicy resource.")
    load_balancing_algorithm: Optional[StrictStr] = Field(default=None, description="Optional. The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.", alias="loadBalancingAlgorithm")
    name: Optional[StrictStr] = Field(default=None, description="Required. Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when this resource was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["autoCapacityDrain", "createTime", "description", "failoverConfig", "labels", "loadBalancingAlgorithm", "name", "updateTime"]

    @field_validator('load_balancing_algorithm')
    def load_balancing_algorithm_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LOAD_BALANCING_ALGORITHM_UNSPECIFIED', 'SPRAY_TO_WORLD', 'SPRAY_TO_REGION', 'WATERFALL_BY_REGION', 'WATERFALL_BY_ZONE']):
            raise ValueError("must be one of enum values ('LOAD_BALANCING_ALGORITHM_UNSPECIFIED', 'SPRAY_TO_WORLD', 'SPRAY_TO_REGION', 'WATERFALL_BY_REGION', 'WATERFALL_BY_ZONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceLbPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auto_capacity_drain
        if self.auto_capacity_drain:
            _dict['autoCapacityDrain'] = self.auto_capacity_drain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of failover_config
        if self.failover_config:
            _dict['failoverConfig'] = self.failover_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceLbPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoCapacityDrain": ServiceLbPolicyAutoCapacityDrain.from_dict(obj["autoCapacityDrain"]) if obj.get("autoCapacityDrain") is not None else None,
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "failoverConfig": ServiceLbPolicyFailoverConfig.from_dict(obj["failoverConfig"]) if obj.get("failoverConfig") is not None else None,
            "labels": obj.get("labels"),
            "loadBalancingAlgorithm": obj.get("loadBalancingAlgorithm"),
            "name": obj.get("name"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



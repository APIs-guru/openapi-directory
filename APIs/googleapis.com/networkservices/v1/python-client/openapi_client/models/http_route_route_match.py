# coding: utf-8

"""
    Network Services API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.http_route_header_match import HttpRouteHeaderMatch
from openapi_client.models.http_route_query_parameter_match import HttpRouteQueryParameterMatch
from typing import Optional, Set
from typing_extensions import Self

class HttpRouteRouteMatch(BaseModel):
    """
    RouteMatch defines specifications used to match requests. If multiple match types are set, this RouteMatch will match if ALL type of matches are matched.
    """ # noqa: E501
    full_path_match: Optional[StrictStr] = Field(default=None, description="The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used.", alias="fullPathMatch")
    headers: Optional[List[HttpRouteHeaderMatch]] = Field(default=None, description="Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.")
    ignore_case: Optional[StrictBool] = Field(default=None, description="Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false.", alias="ignoreCase")
    prefix_match: Optional[StrictStr] = Field(default=None, description="The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used.", alias="prefixMatch")
    query_parameters: Optional[List[HttpRouteQueryParameterMatch]] = Field(default=None, description="Specifies a list of query parameters to match against. ALL of the query parameters must be matched.", alias="queryParameters")
    regex_match: Optional[StrictStr] = Field(default=None, description="The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used.", alias="regexMatch")
    __properties: ClassVar[List[str]] = ["fullPathMatch", "headers", "ignoreCase", "prefixMatch", "queryParameters", "regexMatch"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HttpRouteRouteMatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in headers (list)
        _items = []
        if self.headers:
            for _item_headers in self.headers:
                if _item_headers:
                    _items.append(_item_headers.to_dict())
            _dict['headers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in query_parameters (list)
        _items = []
        if self.query_parameters:
            for _item_query_parameters in self.query_parameters:
                if _item_query_parameters:
                    _items.append(_item_query_parameters.to_dict())
            _dict['queryParameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HttpRouteRouteMatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fullPathMatch": obj.get("fullPathMatch"),
            "headers": [HttpRouteHeaderMatch.from_dict(_item) for _item in obj["headers"]] if obj.get("headers") is not None else None,
            "ignoreCase": obj.get("ignoreCase"),
            "prefixMatch": obj.get("prefixMatch"),
            "queryParameters": [HttpRouteQueryParameterMatch.from_dict(_item) for _item in obj["queryParameters"]] if obj.get("queryParameters") is not None else None,
            "regexMatch": obj.get("regexMatch")
        })
        return _obj



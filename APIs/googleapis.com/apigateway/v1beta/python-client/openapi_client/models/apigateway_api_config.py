# coding: utf-8

"""
    API Gateway API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.apigateway_api_config_file import ApigatewayApiConfigFile
from openapi_client.models.apigateway_api_config_grpc_service_definition import ApigatewayApiConfigGrpcServiceDefinition
from openapi_client.models.apigateway_api_config_open_api_document import ApigatewayApiConfigOpenApiDocument
from openapi_client.models.apigateway_gateway_config import ApigatewayGatewayConfig
from typing import Optional, Set
from typing_extensions import Self

class ApigatewayApiConfig(BaseModel):
    """
    An API Configuration is a combination of settings for both the Managed Service and Gateways serving this API Config.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Created time.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. Display name.", alias="displayName")
    gateway_config: Optional[ApigatewayGatewayConfig] = Field(default=None, alias="gatewayConfig")
    gateway_service_account: Optional[StrictStr] = Field(default=None, description="Immutable. The Google Cloud IAM Service Account that Gateways serving this config should use to authenticate to other services. This may either be the Service Account's email (`{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com`) or its full resource name (`projects/{PROJECT}/accounts/{UNIQUE_ID}`). This is most often used when the service is a GCP resource such as a Cloud Run Service or an IAP-secured service.", alias="gatewayServiceAccount")
    grpc_services: Optional[List[ApigatewayApiConfigGrpcServiceDefinition]] = Field(default=None, description="Optional. gRPC service definition files. If specified, openapi_documents must not be included.", alias="grpcServices")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources")
    managed_service_configs: Optional[List[ApigatewayApiConfigFile]] = Field(default=None, description="Optional. Service Configuration files. At least one must be included when using gRPC service definitions. See https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview for the expected file contents. If multiple files are specified, the files are merged with the following rules: * All singular scalar fields are merged using \"last one wins\" semantics in the order of the files uploaded. * Repeated fields are concatenated. * Singular embedded messages are merged using these rules for nested fields.", alias="managedServiceConfigs")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the API Config. Format: projects/{project}/locations/global/apis/{api}/configs/{api_config}")
    openapi_documents: Optional[List[ApigatewayApiConfigOpenApiDocument]] = Field(default=None, description="Optional. OpenAPI specification documents. If specified, grpc_services and managed_service_configs must not be included.", alias="openapiDocuments")
    service_config_id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the associated Service Config ( https://cloud.google.com/service-infrastructure/docs/glossary#config).", alias="serviceConfigId")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the API Config.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Updated time.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "displayName", "gatewayConfig", "gatewayServiceAccount", "grpcServices", "labels", "managedServiceConfigs", "name", "openapiDocuments", "serviceConfigId", "state", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'FAILED', 'DELETING', 'UPDATING', 'ACTIVATING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'FAILED', 'DELETING', 'UPDATING', 'ACTIVATING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApigatewayApiConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "service_config_id",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gateway_config
        if self.gateway_config:
            _dict['gatewayConfig'] = self.gateway_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in grpc_services (list)
        _items = []
        if self.grpc_services:
            for _item_grpc_services in self.grpc_services:
                if _item_grpc_services:
                    _items.append(_item_grpc_services.to_dict())
            _dict['grpcServices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in managed_service_configs (list)
        _items = []
        if self.managed_service_configs:
            for _item_managed_service_configs in self.managed_service_configs:
                if _item_managed_service_configs:
                    _items.append(_item_managed_service_configs.to_dict())
            _dict['managedServiceConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in openapi_documents (list)
        _items = []
        if self.openapi_documents:
            for _item_openapi_documents in self.openapi_documents:
                if _item_openapi_documents:
                    _items.append(_item_openapi_documents.to_dict())
            _dict['openapiDocuments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApigatewayApiConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "gatewayConfig": ApigatewayGatewayConfig.from_dict(obj["gatewayConfig"]) if obj.get("gatewayConfig") is not None else None,
            "gatewayServiceAccount": obj.get("gatewayServiceAccount"),
            "grpcServices": [ApigatewayApiConfigGrpcServiceDefinition.from_dict(_item) for _item in obj["grpcServices"]] if obj.get("grpcServices") is not None else None,
            "labels": obj.get("labels"),
            "managedServiceConfigs": [ApigatewayApiConfigFile.from_dict(_item) for _item in obj["managedServiceConfigs"]] if obj.get("managedServiceConfigs") is not None else None,
            "name": obj.get("name"),
            "openapiDocuments": [ApigatewayApiConfigOpenApiDocument.from_dict(_item) for _item in obj["openapiDocuments"]] if obj.get("openapiDocuments") is not None else None,
            "serviceConfigId": obj.get("serviceConfigId"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



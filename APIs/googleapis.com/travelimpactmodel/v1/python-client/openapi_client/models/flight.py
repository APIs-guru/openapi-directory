# coding: utf-8

"""
    Travel Impact Model API

    Travel Impact Model API lets you query travel carbon emission estimates.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.model_date import ModelDate
from typing import Optional, Set
from typing_extensions import Self

class Flight(BaseModel):
    """
    All details related to a single request item for a direct flight emission estimates.
    """ # noqa: E501
    departure_date: Optional[ModelDate] = Field(default=None, alias="departureDate")
    destination: Optional[StrictStr] = Field(default=None, description="Required. IATA airport code for flight destination, e.g. \"JFK\".")
    flight_number: Optional[StrictInt] = Field(default=None, description="Required. Flight number, e.g. 324.", alias="flightNumber")
    operating_carrier_code: Optional[StrictStr] = Field(default=None, description="Required. IATA carrier code, e.g. \"AA\".", alias="operatingCarrierCode")
    origin: Optional[StrictStr] = Field(default=None, description="Required. IATA airport code for flight origin, e.g. \"LHR\".")
    __properties: ClassVar[List[str]] = ["departureDate", "destination", "flightNumber", "operatingCarrierCode", "origin"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Flight from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of departure_date
        if self.departure_date:
            _dict['departureDate'] = self.departure_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Flight from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "departureDate": ModelDate.from_dict(obj["departureDate"]) if obj.get("departureDate") is not None else None,
            "destination": obj.get("destination"),
            "flightNumber": obj.get("flightNumber"),
            "operatingCarrierCode": obj.get("operatingCarrierCode"),
            "origin": obj.get("origin")
        })
        return _obj



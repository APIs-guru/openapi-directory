# coding: utf-8

"""
    Google Search Console API

    The Search Console API provides access to both Search Console data (verified users only) and to public information on an URL basis (anyone)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_dimension_filter_group import ApiDimensionFilterGroup
from typing import Optional, Set
from typing_extensions import Self

class SearchAnalyticsQueryRequest(BaseModel):
    """
    SearchAnalyticsQueryRequest
    """ # noqa: E501
    aggregation_type: Optional[StrictStr] = Field(default=None, description="[Optional; Default is \\\"auto\\\"] How data is aggregated. If aggregated by property, all data for the same property is aggregated; if aggregated by page, all data is aggregated by canonical URI. If you filter or group by page, choose AUTO; otherwise you can aggregate either by property or by page, depending on how you want your data calculated; see the help documentation to learn how data is calculated differently by site versus by page. **Note:** If you group or filter by page, you cannot aggregate by property. If you specify any value other than AUTO, the aggregation type in the result will match the requested type, or if you request an invalid type, you will get an error. The API will never change your aggregation type if the requested type is invalid.", alias="aggregationType")
    data_state: Optional[StrictStr] = Field(default=None, description="The data state to be fetched, can be full or all, the latter including full and partial data.", alias="dataState")
    dimension_filter_groups: Optional[List[ApiDimensionFilterGroup]] = Field(default=None, description="[Optional] Zero or more filters to apply to the dimension grouping values; for example, 'query contains \\\"buy\\\"' to see only data where the query string contains the substring \\\"buy\\\" (not case-sensitive). You can filter by a dimension without grouping by it.", alias="dimensionFilterGroups")
    dimensions: Optional[List[StrictStr]] = Field(default=None, description="[Optional] Zero or more dimensions to group results by. Dimensions are the group-by values in the Search Analytics page. Dimensions are combined to create a unique row key for each row. Results are grouped in the order that you supply these dimensions.")
    end_date: Optional[StrictStr] = Field(default=None, description="[Required] End date of the requested date range, in YYYY-MM-DD format, in PST (UTC - 8:00). Must be greater than or equal to the start date. This value is included in the range.", alias="endDate")
    row_limit: Optional[StrictInt] = Field(default=None, description="[Optional; Default is 1000] The maximum number of rows to return. Must be a number from 1 to 25,000 (inclusive).", alias="rowLimit")
    search_type: Optional[StrictStr] = Field(default=None, description="[Optional; Default is \\\"web\\\"] The search type to filter for.", alias="searchType")
    start_date: Optional[StrictStr] = Field(default=None, description=" [Required] Start date of the requested date range, in YYYY-MM-DD format, in PST time (UTC - 8:00). Must be less than or equal to the end date. This value is included in the range.", alias="startDate")
    start_row: Optional[StrictInt] = Field(default=None, description="[Optional; Default is 0] Zero-based index of the first row in the response. Must be a non-negative number.", alias="startRow")
    type: Optional[StrictStr] = Field(default=None, description="Optional. [Optional; Default is \\\"web\\\"] Type of report: search type, or either Discover or Gnews.")
    __properties: ClassVar[List[str]] = ["aggregationType", "dataState", "dimensionFilterGroups", "dimensions", "endDate", "rowLimit", "searchType", "startDate", "startRow", "type"]

    @field_validator('aggregation_type')
    def aggregation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUTO', 'BY_PROPERTY', 'BY_PAGE', 'BY_NEWS_SHOWCASE_PANEL']):
            raise ValueError("must be one of enum values ('AUTO', 'BY_PROPERTY', 'BY_PAGE', 'BY_NEWS_SHOWCASE_PANEL')")
        return value

    @field_validator('data_state')
    def data_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_STATE_UNSPECIFIED', 'FINAL', 'ALL']):
            raise ValueError("must be one of enum values ('DATA_STATE_UNSPECIFIED', 'FINAL', 'ALL')")
        return value

    @field_validator('dimensions')
    def dimensions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['DATE', 'QUERY', 'PAGE', 'COUNTRY', 'DEVICE', 'SEARCH_APPEARANCE']):
                raise ValueError("each list item must be one of ('DATE', 'QUERY', 'PAGE', 'COUNTRY', 'DEVICE', 'SEARCH_APPEARANCE')")
        return value

    @field_validator('search_type')
    def search_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WEB', 'IMAGE', 'VIDEO', 'NEWS', 'DISCOVER', 'GOOGLE_NEWS']):
            raise ValueError("must be one of enum values ('WEB', 'IMAGE', 'VIDEO', 'NEWS', 'DISCOVER', 'GOOGLE_NEWS')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WEB', 'IMAGE', 'VIDEO', 'NEWS', 'DISCOVER', 'GOOGLE_NEWS']):
            raise ValueError("must be one of enum values ('WEB', 'IMAGE', 'VIDEO', 'NEWS', 'DISCOVER', 'GOOGLE_NEWS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchAnalyticsQueryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dimension_filter_groups (list)
        _items = []
        if self.dimension_filter_groups:
            for _item_dimension_filter_groups in self.dimension_filter_groups:
                if _item_dimension_filter_groups:
                    _items.append(_item_dimension_filter_groups.to_dict())
            _dict['dimensionFilterGroups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchAnalyticsQueryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregationType": obj.get("aggregationType"),
            "dataState": obj.get("dataState"),
            "dimensionFilterGroups": [ApiDimensionFilterGroup.from_dict(_item) for _item in obj["dimensionFilterGroups"]] if obj.get("dimensionFilterGroups") is not None else None,
            "dimensions": obj.get("dimensions"),
            "endDate": obj.get("endDate"),
            "rowLimit": obj.get("rowLimit"),
            "searchType": obj.get("searchType"),
            "startDate": obj.get("startDate"),
            "startRow": obj.get("startRow"),
            "type": obj.get("type")
        })
        return _obj



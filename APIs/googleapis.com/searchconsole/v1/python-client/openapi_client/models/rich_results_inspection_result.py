# coding: utf-8

"""
    Google Search Console API

    The Search Console API provides access to both Search Console data (verified users only) and to public information on an URL basis (anyone)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.detected_items import DetectedItems
from typing import Optional, Set
from typing_extensions import Self

class RichResultsInspectionResult(BaseModel):
    """
    Rich-Results inspection result, including any rich results found at this URL.
    """ # noqa: E501
    detected_items: Optional[List[DetectedItems]] = Field(default=None, description="A list of zero or more rich results detected on this page. Rich results that cannot even be parsed due to syntactic issues will not be listed here.", alias="detectedItems")
    verdict: Optional[StrictStr] = Field(default=None, description="High-level rich results inspection result for this URL.")
    __properties: ClassVar[List[str]] = ["detectedItems", "verdict"]

    @field_validator('verdict')
    def verdict_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VERDICT_UNSPECIFIED', 'PASS', 'PARTIAL', 'FAIL', 'NEUTRAL']):
            raise ValueError("must be one of enum values ('VERDICT_UNSPECIFIED', 'PASS', 'PARTIAL', 'FAIL', 'NEUTRAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RichResultsInspectionResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in detected_items (list)
        _items = []
        if self.detected_items:
            for _item_detected_items in self.detected_items:
                if _item_detected_items:
                    _items.append(_item_detected_items.to_dict())
            _dict['detectedItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RichResultsInspectionResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detectedItems": [DetectedItems.from_dict(_item) for _item in obj["detectedItems"]] if obj.get("detectedItems") is not None else None,
            "verdict": obj.get("verdict")
        })
        return _obj



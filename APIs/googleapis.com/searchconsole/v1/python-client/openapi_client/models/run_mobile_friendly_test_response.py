# coding: utf-8

"""
    Google Search Console API

    The Search Console API provides access to both Search Console data (verified users only) and to public information on an URL basis (anyone)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image import Image
from openapi_client.models.mobile_friendly_issue import MobileFriendlyIssue
from openapi_client.models.resource_issue import ResourceIssue
from openapi_client.models.test_status import TestStatus
from typing import Optional, Set
from typing_extensions import Self

class RunMobileFriendlyTestResponse(BaseModel):
    """
    Mobile-friendly test response, including mobile-friendly issues and resource issues.
    """ # noqa: E501
    mobile_friendliness: Optional[StrictStr] = Field(default=None, description="Test verdict, whether the page is mobile friendly or not.", alias="mobileFriendliness")
    mobile_friendly_issues: Optional[List[MobileFriendlyIssue]] = Field(default=None, description="List of mobile-usability issues.", alias="mobileFriendlyIssues")
    resource_issues: Optional[List[ResourceIssue]] = Field(default=None, description="Information about embedded resources issues.", alias="resourceIssues")
    screenshot: Optional[Image] = None
    test_status: Optional[TestStatus] = Field(default=None, alias="testStatus")
    __properties: ClassVar[List[str]] = ["mobileFriendliness", "mobileFriendlyIssues", "resourceIssues", "screenshot", "testStatus"]

    @field_validator('mobile_friendliness')
    def mobile_friendliness_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MOBILE_FRIENDLY_TEST_RESULT_UNSPECIFIED', 'MOBILE_FRIENDLY', 'NOT_MOBILE_FRIENDLY']):
            raise ValueError("must be one of enum values ('MOBILE_FRIENDLY_TEST_RESULT_UNSPECIFIED', 'MOBILE_FRIENDLY', 'NOT_MOBILE_FRIENDLY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunMobileFriendlyTestResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in mobile_friendly_issues (list)
        _items = []
        if self.mobile_friendly_issues:
            for _item_mobile_friendly_issues in self.mobile_friendly_issues:
                if _item_mobile_friendly_issues:
                    _items.append(_item_mobile_friendly_issues.to_dict())
            _dict['mobileFriendlyIssues'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in resource_issues (list)
        _items = []
        if self.resource_issues:
            for _item_resource_issues in self.resource_issues:
                if _item_resource_issues:
                    _items.append(_item_resource_issues.to_dict())
            _dict['resourceIssues'] = _items
        # override the default output from pydantic by calling `to_dict()` of screenshot
        if self.screenshot:
            _dict['screenshot'] = self.screenshot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of test_status
        if self.test_status:
            _dict['testStatus'] = self.test_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunMobileFriendlyTestResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mobileFriendliness": obj.get("mobileFriendliness"),
            "mobileFriendlyIssues": [MobileFriendlyIssue.from_dict(_item) for _item in obj["mobileFriendlyIssues"]] if obj.get("mobileFriendlyIssues") is not None else None,
            "resourceIssues": [ResourceIssue.from_dict(_item) for _item in obj["resourceIssues"]] if obj.get("resourceIssues") is not None else None,
            "screenshot": Image.from_dict(obj["screenshot"]) if obj.get("screenshot") is not None else None,
            "testStatus": TestStatus.from_dict(obj["testStatus"]) if obj.get("testStatus") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Search Console API

    The Search Console API provides access to both Search Console data (verified users only) and to public information on an URL basis (anyone)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.wmx_sitemap_content import WmxSitemapContent
from typing import Optional, Set
from typing_extensions import Self

class WmxSitemap(BaseModel):
    """
    Contains detailed information about a specific URL submitted as a [sitemap](https://support.google.com/webmasters/answer/156184).
    """ # noqa: E501
    contents: Optional[List[WmxSitemapContent]] = Field(default=None, description="The various content types in the sitemap.")
    errors: Optional[StrictStr] = Field(default=None, description="Number of errors in the sitemap. These are issues with the sitemap itself that need to be fixed before it can be processed correctly.")
    is_pending: Optional[StrictBool] = Field(default=None, description="If true, the sitemap has not been processed.", alias="isPending")
    is_sitemaps_index: Optional[StrictBool] = Field(default=None, description="If true, the sitemap is a collection of sitemaps.", alias="isSitemapsIndex")
    last_downloaded: Optional[StrictStr] = Field(default=None, description="Date & time in which this sitemap was last downloaded. Date format is in RFC 3339 format (yyyy-mm-dd).", alias="lastDownloaded")
    last_submitted: Optional[StrictStr] = Field(default=None, description="Date & time in which this sitemap was submitted. Date format is in RFC 3339 format (yyyy-mm-dd).", alias="lastSubmitted")
    path: Optional[StrictStr] = Field(default=None, description="The url of the sitemap.")
    type: Optional[StrictStr] = Field(default=None, description="The type of the sitemap. For example: `rssFeed`.")
    warnings: Optional[StrictStr] = Field(default=None, description="Number of warnings for the sitemap. These are generally non-critical issues with URLs in the sitemaps.")
    __properties: ClassVar[List[str]] = ["contents", "errors", "isPending", "isSitemapsIndex", "lastDownloaded", "lastSubmitted", "path", "type", "warnings"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NOT_SITEMAP', 'URL_LIST', 'SITEMAP', 'RSS_FEED', 'ATOM_FEED', 'PATTERN_SITEMAP', 'OCEANFRONT']):
            raise ValueError("must be one of enum values ('NOT_SITEMAP', 'URL_LIST', 'SITEMAP', 'RSS_FEED', 'ATOM_FEED', 'PATTERN_SITEMAP', 'OCEANFRONT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WmxSitemap from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contents (list)
        _items = []
        if self.contents:
            for _item_contents in self.contents:
                if _item_contents:
                    _items.append(_item_contents.to_dict())
            _dict['contents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WmxSitemap from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contents": [WmxSitemapContent.from_dict(_item) for _item in obj["contents"]] if obj.get("contents") is not None else None,
            "errors": obj.get("errors"),
            "isPending": obj.get("isPending"),
            "isSitemapsIndex": obj.get("isSitemapsIndex"),
            "lastDownloaded": obj.get("lastDownloaded"),
            "lastSubmitted": obj.get("lastSubmitted"),
            "path": obj.get("path"),
            "type": obj.get("type"),
            "warnings": obj.get("warnings")
        })
        return _obj



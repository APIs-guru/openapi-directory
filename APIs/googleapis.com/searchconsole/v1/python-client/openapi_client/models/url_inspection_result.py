# coding: utf-8

"""
    Google Search Console API

    The Search Console API provides access to both Search Console data (verified users only) and to public information on an URL basis (anyone)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amp_inspection_result import AmpInspectionResult
from openapi_client.models.index_status_inspection_result import IndexStatusInspectionResult
from openapi_client.models.mobile_usability_inspection_result import MobileUsabilityInspectionResult
from openapi_client.models.rich_results_inspection_result import RichResultsInspectionResult
from typing import Optional, Set
from typing_extensions import Self

class UrlInspectionResult(BaseModel):
    """
    URL inspection result, including all inspection results.
    """ # noqa: E501
    amp_result: Optional[AmpInspectionResult] = Field(default=None, alias="ampResult")
    index_status_result: Optional[IndexStatusInspectionResult] = Field(default=None, alias="indexStatusResult")
    inspection_result_link: Optional[StrictStr] = Field(default=None, description="Link to Search Console URL inspection.", alias="inspectionResultLink")
    mobile_usability_result: Optional[MobileUsabilityInspectionResult] = Field(default=None, alias="mobileUsabilityResult")
    rich_results_result: Optional[RichResultsInspectionResult] = Field(default=None, alias="richResultsResult")
    __properties: ClassVar[List[str]] = ["ampResult", "indexStatusResult", "inspectionResultLink", "mobileUsabilityResult", "richResultsResult"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UrlInspectionResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amp_result
        if self.amp_result:
            _dict['ampResult'] = self.amp_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of index_status_result
        if self.index_status_result:
            _dict['indexStatusResult'] = self.index_status_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mobile_usability_result
        if self.mobile_usability_result:
            _dict['mobileUsabilityResult'] = self.mobile_usability_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rich_results_result
        if self.rich_results_result:
            _dict['richResultsResult'] = self.rich_results_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UrlInspectionResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ampResult": AmpInspectionResult.from_dict(obj["ampResult"]) if obj.get("ampResult") is not None else None,
            "indexStatusResult": IndexStatusInspectionResult.from_dict(obj["indexStatusResult"]) if obj.get("indexStatusResult") is not None else None,
            "inspectionResultLink": obj.get("inspectionResultLink"),
            "mobileUsabilityResult": MobileUsabilityInspectionResult.from_dict(obj["mobileUsabilityResult"]) if obj.get("mobileUsabilityResult") is not None else None,
            "richResultsResult": RichResultsInspectionResult.from_dict(obj["richResultsResult"]) if obj.get("richResultsResult") is not None else None
        })
        return _obj



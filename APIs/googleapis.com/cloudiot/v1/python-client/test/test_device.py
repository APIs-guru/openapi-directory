# coding: utf-8

"""
    Cloud IoT API

    Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.device import Device

class TestDevice(unittest.TestCase):
    """Device unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Device:
        """Test Device
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Device`
        """
        model = Device()
        if include_optional:
            return Device(
                blocked = True,
                config = openapi_client.models.device_config.DeviceConfig(
                    binary_data = 'YQ==', 
                    cloud_update_time = '', 
                    device_ack_time = '', 
                    version = '', ),
                credentials = [
                    openapi_client.models.device_credential.DeviceCredential(
                        expiration_time = '', 
                        public_key = openapi_client.models.public_key_credential.PublicKeyCredential(
                            format = 'UNSPECIFIED_PUBLIC_KEY_FORMAT', 
                            key = '', ), )
                    ],
                gateway_config = openapi_client.models.gateway_config.GatewayConfig(
                    gateway_auth_method = 'GATEWAY_AUTH_METHOD_UNSPECIFIED', 
                    gateway_type = 'GATEWAY_TYPE_UNSPECIFIED', 
                    last_accessed_gateway_id = '', 
                    last_accessed_gateway_time = '', ),
                id = '',
                last_config_ack_time = '',
                last_config_send_time = '',
                last_error_status = openapi_client.models.status.Status(
                    code = 56, 
                    details = [
                        {
                            'key' : null
                            }
                        ], 
                    message = '', ),
                last_error_time = '',
                last_event_time = '',
                last_heartbeat_time = '',
                last_state_time = '',
                log_level = 'LOG_LEVEL_UNSPECIFIED',
                metadata = {
                    'key' : ''
                    },
                name = '',
                num_id = '',
                state = openapi_client.models.device_state.DeviceState(
                    binary_data = 'YQ==', 
                    update_time = '', )
            )
        else:
            return Device(
        )
        """

    def testDevice(self):
        """Test Device"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

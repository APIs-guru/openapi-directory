# coding: utf-8

"""
    Cloud IoT API

    Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.device_registry import DeviceRegistry

class TestDeviceRegistry(unittest.TestCase):
    """DeviceRegistry unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeviceRegistry:
        """Test DeviceRegistry
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeviceRegistry`
        """
        model = DeviceRegistry()
        if include_optional:
            return DeviceRegistry(
                credentials = [
                    openapi_client.models.registry_credential.RegistryCredential(
                        public_key_certificate = openapi_client.models.public_key_certificate.PublicKeyCertificate(
                            certificate = '', 
                            format = 'UNSPECIFIED_PUBLIC_KEY_CERTIFICATE_FORMAT', 
                            x509_details = openapi_client.models.x509_certificate_details.X509CertificateDetails(
                                expiry_time = '', 
                                issuer = '', 
                                public_key_type = '', 
                                signature_algorithm = '', 
                                start_time = '', 
                                subject = '', ), ), )
                    ],
                event_notification_configs = [
                    openapi_client.models.event_notification_config.EventNotificationConfig(
                        pubsub_topic_name = '', 
                        subfolder_matches = '', )
                    ],
                http_config = openapi_client.models.http_config.HttpConfig(
                    http_enabled_state = 'HTTP_STATE_UNSPECIFIED', ),
                id = '',
                log_level = 'LOG_LEVEL_UNSPECIFIED',
                mqtt_config = openapi_client.models.mqtt_config.MqttConfig(
                    mqtt_enabled_state = 'MQTT_STATE_UNSPECIFIED', ),
                name = '',
                state_notification_config = openapi_client.models.state_notification_config.StateNotificationConfig(
                    pubsub_topic_name = '', )
            )
        else:
            return DeviceRegistry(
        )
        """

    def testDeviceRegistry(self):
        """Test DeviceRegistry"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

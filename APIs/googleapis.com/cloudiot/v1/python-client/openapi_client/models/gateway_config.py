# coding: utf-8

"""
    Cloud IoT API

    Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GatewayConfig(BaseModel):
    """
    Gateway-related configuration and state.
    """ # noqa: E501
    gateway_auth_method: Optional[StrictStr] = Field(default=None, description="Indicates how to authorize and/or authenticate devices to access the gateway.", alias="gatewayAuthMethod")
    gateway_type: Optional[StrictStr] = Field(default=None, description="Indicates whether the device is a gateway.", alias="gatewayType")
    last_accessed_gateway_id: Optional[StrictStr] = Field(default=None, description="[Output only] The ID of the gateway the device accessed most recently.", alias="lastAccessedGatewayId")
    last_accessed_gateway_time: Optional[StrictStr] = Field(default=None, description="[Output only] The most recent time at which the device accessed the gateway specified in `last_accessed_gateway`.", alias="lastAccessedGatewayTime")
    __properties: ClassVar[List[str]] = ["gatewayAuthMethod", "gatewayType", "lastAccessedGatewayId", "lastAccessedGatewayTime"]

    @field_validator('gateway_auth_method')
    def gateway_auth_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GATEWAY_AUTH_METHOD_UNSPECIFIED', 'ASSOCIATION_ONLY', 'DEVICE_AUTH_TOKEN_ONLY', 'ASSOCIATION_AND_DEVICE_AUTH_TOKEN']):
            raise ValueError("must be one of enum values ('GATEWAY_AUTH_METHOD_UNSPECIFIED', 'ASSOCIATION_ONLY', 'DEVICE_AUTH_TOKEN_ONLY', 'ASSOCIATION_AND_DEVICE_AUTH_TOKEN')")
        return value

    @field_validator('gateway_type')
    def gateway_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GATEWAY_TYPE_UNSPECIFIED', 'GATEWAY', 'NON_GATEWAY']):
            raise ValueError("must be one of enum values ('GATEWAY_TYPE_UNSPECIFIED', 'GATEWAY', 'NON_GATEWAY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GatewayConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GatewayConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gatewayAuthMethod": obj.get("gatewayAuthMethod"),
            "gatewayType": obj.get("gatewayType"),
            "lastAccessedGatewayId": obj.get("lastAccessedGatewayId"),
            "lastAccessedGatewayTime": obj.get("lastAccessedGatewayTime")
        })
        return _obj



# coding: utf-8

"""
    Cloud IoT API

    Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.event_notification_config import EventNotificationConfig
from openapi_client.models.http_config import HttpConfig
from openapi_client.models.mqtt_config import MqttConfig
from openapi_client.models.registry_credential import RegistryCredential
from openapi_client.models.state_notification_config import StateNotificationConfig
from typing import Optional, Set
from typing_extensions import Self

class DeviceRegistry(BaseModel):
    """
    A container for a group of devices.
    """ # noqa: E501
    credentials: Optional[List[RegistryCredential]] = Field(default=None, description="The credentials used to verify the device credentials. No more than 10 credentials can be bound to a single registry at a time. The verification process occurs at the time of device creation or update. If this field is empty, no verification is performed. Otherwise, the credentials of a newly created device or added credentials of an updated device should be signed with one of these registry credentials. Note, however, that existing devices will never be affected by modifications to this list of credentials: after a device has been successfully created in a registry, it should be able to connect even if its registry credentials are revoked, deleted, or modified.")
    event_notification_configs: Optional[List[EventNotificationConfig]] = Field(default=None, description="The configuration for notification of telemetry events received from the device. All telemetry events that were successfully published by the device and acknowledged by Cloud IoT Core are guaranteed to be delivered to Cloud Pub/Sub. If multiple configurations match a message, only the first matching configuration is used. If you try to publish a device telemetry event using MQTT without specifying a Cloud Pub/Sub topic for the device's registry, the connection closes automatically. If you try to do so using an HTTP connection, an error is returned. Up to 10 configurations may be provided.", alias="eventNotificationConfigs")
    http_config: Optional[HttpConfig] = Field(default=None, alias="httpConfig")
    id: Optional[StrictStr] = Field(default=None, description="The identifier of this device registry. For example, `myRegistry`.")
    log_level: Optional[StrictStr] = Field(default=None, description="**Beta Feature** The default logging verbosity for activity from devices in this registry. The verbosity level can be overridden by Device.log_level.", alias="logLevel")
    mqtt_config: Optional[MqttConfig] = Field(default=None, alias="mqttConfig")
    name: Optional[StrictStr] = Field(default=None, description="The resource path name. For example, `projects/example-project/locations/us-central1/registries/my-registry`.")
    state_notification_config: Optional[StateNotificationConfig] = Field(default=None, alias="stateNotificationConfig")
    __properties: ClassVar[List[str]] = ["credentials", "eventNotificationConfigs", "httpConfig", "id", "logLevel", "mqttConfig", "name", "stateNotificationConfig"]

    @field_validator('log_level')
    def log_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LOG_LEVEL_UNSPECIFIED', 'NONE', 'ERROR', 'INFO', 'DEBUG']):
            raise ValueError("must be one of enum values ('LOG_LEVEL_UNSPECIFIED', 'NONE', 'ERROR', 'INFO', 'DEBUG')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceRegistry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in credentials (list)
        _items = []
        if self.credentials:
            for _item_credentials in self.credentials:
                if _item_credentials:
                    _items.append(_item_credentials.to_dict())
            _dict['credentials'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in event_notification_configs (list)
        _items = []
        if self.event_notification_configs:
            for _item_event_notification_configs in self.event_notification_configs:
                if _item_event_notification_configs:
                    _items.append(_item_event_notification_configs.to_dict())
            _dict['eventNotificationConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of http_config
        if self.http_config:
            _dict['httpConfig'] = self.http_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mqtt_config
        if self.mqtt_config:
            _dict['mqttConfig'] = self.mqtt_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state_notification_config
        if self.state_notification_config:
            _dict['stateNotificationConfig'] = self.state_notification_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceRegistry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "credentials": [RegistryCredential.from_dict(_item) for _item in obj["credentials"]] if obj.get("credentials") is not None else None,
            "eventNotificationConfigs": [EventNotificationConfig.from_dict(_item) for _item in obj["eventNotificationConfigs"]] if obj.get("eventNotificationConfigs") is not None else None,
            "httpConfig": HttpConfig.from_dict(obj["httpConfig"]) if obj.get("httpConfig") is not None else None,
            "id": obj.get("id"),
            "logLevel": obj.get("logLevel"),
            "mqttConfig": MqttConfig.from_dict(obj["mqttConfig"]) if obj.get("mqttConfig") is not None else None,
            "name": obj.get("name"),
            "stateNotificationConfig": StateNotificationConfig.from_dict(obj["stateNotificationConfig"]) if obj.get("stateNotificationConfig") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromeManagementV1InstalledApp(BaseModel):
    """
    Describes an installed app.
    """ # noqa: E501
    app_id: Optional[StrictStr] = Field(default=None, description="Output only. Unique identifier of the app. For Chrome apps and extensions, the 32-character id (e.g. ehoadneljpdggcbbknedodolkkjodefl). For Android apps, the package name (e.g. com.evernote).", alias="appId")
    app_install_type: Optional[StrictStr] = Field(default=None, description="Output only. How the app was installed.", alias="appInstallType")
    app_source: Optional[StrictStr] = Field(default=None, description="Output only. Source of the installed app.", alias="appSource")
    app_type: Optional[StrictStr] = Field(default=None, description="Output only. Type of the app.", alias="appType")
    browser_device_count: Optional[StrictStr] = Field(default=None, description="Output only. Count of browser devices with this app installed.", alias="browserDeviceCount")
    description: Optional[StrictStr] = Field(default=None, description="Output only. Description of the installed app.")
    disabled: Optional[StrictBool] = Field(default=None, description="Output only. Whether the app is disabled.")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the installed app.", alias="displayName")
    homepage_uri: Optional[StrictStr] = Field(default=None, description="Output only. Homepage uri of the installed app.", alias="homepageUri")
    os_user_count: Optional[StrictStr] = Field(default=None, description="Output only. Count of ChromeOS users with this app installed.", alias="osUserCount")
    permissions: Optional[List[StrictStr]] = Field(default=None, description="Output only. Permissions of the installed app.")
    __properties: ClassVar[List[str]] = ["appId", "appInstallType", "appSource", "appType", "browserDeviceCount", "description", "disabled", "displayName", "homepageUri", "osUserCount", "permissions"]

    @field_validator('app_install_type')
    def app_install_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APP_INSTALL_TYPE_UNSPECIFIED', 'MULTIPLE', 'NORMAL', 'ADMIN', 'DEVELOPMENT', 'SIDELOAD', 'OTHER']):
            raise ValueError("must be one of enum values ('APP_INSTALL_TYPE_UNSPECIFIED', 'MULTIPLE', 'NORMAL', 'ADMIN', 'DEVELOPMENT', 'SIDELOAD', 'OTHER')")
        return value

    @field_validator('app_source')
    def app_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APP_SOURCE_UNSPECIFIED', 'CHROME_WEBSTORE', 'PLAY_STORE']):
            raise ValueError("must be one of enum values ('APP_SOURCE_UNSPECIFIED', 'CHROME_WEBSTORE', 'PLAY_STORE')")
        return value

    @field_validator('app_type')
    def app_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APP_TYPE_UNSPECIFIED', 'EXTENSION', 'APP', 'THEME', 'HOSTED_APP', 'ANDROID_APP']):
            raise ValueError("must be one of enum values ('APP_TYPE_UNSPECIFIED', 'EXTENSION', 'APP', 'THEME', 'HOSTED_APP', 'ANDROID_APP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1InstalledApp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "app_id",
            "app_install_type",
            "app_source",
            "app_type",
            "browser_device_count",
            "description",
            "disabled",
            "display_name",
            "homepage_uri",
            "os_user_count",
            "permissions",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1InstalledApp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appId": obj.get("appId"),
            "appInstallType": obj.get("appInstallType"),
            "appSource": obj.get("appSource"),
            "appType": obj.get("appType"),
            "browserDeviceCount": obj.get("browserDeviceCount"),
            "description": obj.get("description"),
            "disabled": obj.get("disabled"),
            "displayName": obj.get("displayName"),
            "homepageUri": obj.get("homepageUri"),
            "osUserCount": obj.get("osUserCount"),
            "permissions": obj.get("permissions")
        })
        return _obj



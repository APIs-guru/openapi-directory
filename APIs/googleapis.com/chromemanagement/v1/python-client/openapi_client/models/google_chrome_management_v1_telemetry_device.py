# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_chrome_management_v1_audio_status_report import GoogleChromeManagementV1AudioStatusReport
from openapi_client.models.google_chrome_management_v1_battery_info import GoogleChromeManagementV1BatteryInfo
from openapi_client.models.google_chrome_management_v1_battery_status_report import GoogleChromeManagementV1BatteryStatusReport
from openapi_client.models.google_chrome_management_v1_boot_performance_report import GoogleChromeManagementV1BootPerformanceReport
from openapi_client.models.google_chrome_management_v1_cpu_info import GoogleChromeManagementV1CpuInfo
from openapi_client.models.google_chrome_management_v1_cpu_status_report import GoogleChromeManagementV1CpuStatusReport
from openapi_client.models.google_chrome_management_v1_graphics_info import GoogleChromeManagementV1GraphicsInfo
from openapi_client.models.google_chrome_management_v1_graphics_status_report import GoogleChromeManagementV1GraphicsStatusReport
from openapi_client.models.google_chrome_management_v1_heartbeat_status_report import GoogleChromeManagementV1HeartbeatStatusReport
from openapi_client.models.google_chrome_management_v1_kiosk_app_status_report import GoogleChromeManagementV1KioskAppStatusReport
from openapi_client.models.google_chrome_management_v1_memory_info import GoogleChromeManagementV1MemoryInfo
from openapi_client.models.google_chrome_management_v1_memory_status_report import GoogleChromeManagementV1MemoryStatusReport
from openapi_client.models.google_chrome_management_v1_network_bandwidth_report import GoogleChromeManagementV1NetworkBandwidthReport
from openapi_client.models.google_chrome_management_v1_network_diagnostics_report import GoogleChromeManagementV1NetworkDiagnosticsReport
from openapi_client.models.google_chrome_management_v1_network_info import GoogleChromeManagementV1NetworkInfo
from openapi_client.models.google_chrome_management_v1_network_status_report import GoogleChromeManagementV1NetworkStatusReport
from openapi_client.models.google_chrome_management_v1_os_update_status import GoogleChromeManagementV1OsUpdateStatus
from openapi_client.models.google_chrome_management_v1_peripherals_report import GoogleChromeManagementV1PeripheralsReport
from openapi_client.models.google_chrome_management_v1_runtime_counters_report import GoogleChromeManagementV1RuntimeCountersReport
from openapi_client.models.google_chrome_management_v1_storage_info import GoogleChromeManagementV1StorageInfo
from openapi_client.models.google_chrome_management_v1_storage_status_report import GoogleChromeManagementV1StorageStatusReport
from openapi_client.models.google_chrome_management_v1_thunderbolt_info import GoogleChromeManagementV1ThunderboltInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromeManagementV1TelemetryDevice(BaseModel):
    """
    Telemetry data collected from a managed device. * Granular permission needed: TELEMETRY_API_DEVICE
    """ # noqa: E501
    audio_status_report: Optional[List[GoogleChromeManagementV1AudioStatusReport]] = Field(default=None, description="Output only. Audio reports collected periodically sorted in a decreasing order of report_time.", alias="audioStatusReport")
    battery_info: Optional[List[GoogleChromeManagementV1BatteryInfo]] = Field(default=None, description="Output only. Information on battery specs for the device.", alias="batteryInfo")
    battery_status_report: Optional[List[GoogleChromeManagementV1BatteryStatusReport]] = Field(default=None, description="Output only. Battery reports collected periodically.", alias="batteryStatusReport")
    boot_performance_report: Optional[List[GoogleChromeManagementV1BootPerformanceReport]] = Field(default=None, description="Output only. Boot performance reports of the device.", alias="bootPerformanceReport")
    cpu_info: Optional[List[GoogleChromeManagementV1CpuInfo]] = Field(default=None, description="Output only. Information regarding CPU specs for the device.", alias="cpuInfo")
    cpu_status_report: Optional[List[GoogleChromeManagementV1CpuStatusReport]] = Field(default=None, description="Output only. CPU status reports collected periodically sorted in a decreasing order of report_time.", alias="cpuStatusReport")
    customer: Optional[StrictStr] = Field(default=None, description="Output only. Google Workspace Customer whose enterprise enrolled the device.")
    device_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique Directory API ID of the device. This value is the same as the Admin Console's Directory API ID in the ChromeOS Devices tab", alias="deviceId")
    graphics_info: Optional[GoogleChromeManagementV1GraphicsInfo] = Field(default=None, alias="graphicsInfo")
    graphics_status_report: Optional[List[GoogleChromeManagementV1GraphicsStatusReport]] = Field(default=None, description="Output only. Graphics reports collected periodically.", alias="graphicsStatusReport")
    heartbeat_status_report: Optional[List[GoogleChromeManagementV1HeartbeatStatusReport]] = Field(default=None, description="Output only. Heartbeat status report containing timestamps periodically sorted in decreasing order of report_time", alias="heartbeatStatusReport")
    kiosk_app_status_report: Optional[List[GoogleChromeManagementV1KioskAppStatusReport]] = Field(default=None, description="Output only. Kiosk app status report for the kiosk device", alias="kioskAppStatusReport")
    memory_info: Optional[GoogleChromeManagementV1MemoryInfo] = Field(default=None, alias="memoryInfo")
    memory_status_report: Optional[List[GoogleChromeManagementV1MemoryStatusReport]] = Field(default=None, description="Output only. Memory status reports collected periodically sorted decreasing by report_time.", alias="memoryStatusReport")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the device.")
    network_bandwidth_report: Optional[List[GoogleChromeManagementV1NetworkBandwidthReport]] = Field(default=None, description="Output only. Network bandwidth reports collected periodically sorted in a decreasing order of report_time.", alias="networkBandwidthReport")
    network_diagnostics_report: Optional[List[GoogleChromeManagementV1NetworkDiagnosticsReport]] = Field(default=None, description="Output only. Network diagnostics collected periodically.", alias="networkDiagnosticsReport")
    network_info: Optional[GoogleChromeManagementV1NetworkInfo] = Field(default=None, alias="networkInfo")
    network_status_report: Optional[List[GoogleChromeManagementV1NetworkStatusReport]] = Field(default=None, description="Output only. Network specs collected periodically.", alias="networkStatusReport")
    org_unit_id: Optional[StrictStr] = Field(default=None, description="Output only. Organization unit ID of the device.", alias="orgUnitId")
    os_update_status: Optional[List[GoogleChromeManagementV1OsUpdateStatus]] = Field(default=None, description="Output only. Contains relevant information regarding ChromeOS update status.", alias="osUpdateStatus")
    peripherals_report: Optional[List[GoogleChromeManagementV1PeripheralsReport]] = Field(default=None, description="Output only. Peripherals reports collected periodically sorted in a decreasing order of report_time.", alias="peripheralsReport")
    runtime_counters_report: Optional[List[GoogleChromeManagementV1RuntimeCountersReport]] = Field(default=None, description="Output only. Runtime counters reports collected device lifetime runtime, as well as the counts of S0->S3, S0->S4, and S0->S5 transitions, meaning entering into sleep, hibernation, and power-off states", alias="runtimeCountersReport")
    serial_number: Optional[StrictStr] = Field(default=None, description="Output only. Device serial number. This value is the same as the Admin Console's Serial Number in the ChromeOS Devices tab.", alias="serialNumber")
    storage_info: Optional[GoogleChromeManagementV1StorageInfo] = Field(default=None, alias="storageInfo")
    storage_status_report: Optional[List[GoogleChromeManagementV1StorageStatusReport]] = Field(default=None, description="Output only. Storage reports collected periodically.", alias="storageStatusReport")
    thunderbolt_info: Optional[List[GoogleChromeManagementV1ThunderboltInfo]] = Field(default=None, description="Output only. Information on Thunderbolt bus.", alias="thunderboltInfo")
    __properties: ClassVar[List[str]] = ["audioStatusReport", "batteryInfo", "batteryStatusReport", "bootPerformanceReport", "cpuInfo", "cpuStatusReport", "customer", "deviceId", "graphicsInfo", "graphicsStatusReport", "heartbeatStatusReport", "kioskAppStatusReport", "memoryInfo", "memoryStatusReport", "name", "networkBandwidthReport", "networkDiagnosticsReport", "networkInfo", "networkStatusReport", "orgUnitId", "osUpdateStatus", "peripheralsReport", "runtimeCountersReport", "serialNumber", "storageInfo", "storageStatusReport", "thunderboltInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1TelemetryDevice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "audio_status_report",
            "battery_info",
            "battery_status_report",
            "boot_performance_report",
            "cpu_info",
            "cpu_status_report",
            "customer",
            "device_id",
            "graphics_status_report",
            "heartbeat_status_report",
            "kiosk_app_status_report",
            "memory_status_report",
            "name",
            "network_bandwidth_report",
            "network_diagnostics_report",
            "network_status_report",
            "org_unit_id",
            "os_update_status",
            "peripherals_report",
            "runtime_counters_report",
            "serial_number",
            "storage_status_report",
            "thunderbolt_info",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in audio_status_report (list)
        _items = []
        if self.audio_status_report:
            for _item_audio_status_report in self.audio_status_report:
                if _item_audio_status_report:
                    _items.append(_item_audio_status_report.to_dict())
            _dict['audioStatusReport'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in battery_info (list)
        _items = []
        if self.battery_info:
            for _item_battery_info in self.battery_info:
                if _item_battery_info:
                    _items.append(_item_battery_info.to_dict())
            _dict['batteryInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in battery_status_report (list)
        _items = []
        if self.battery_status_report:
            for _item_battery_status_report in self.battery_status_report:
                if _item_battery_status_report:
                    _items.append(_item_battery_status_report.to_dict())
            _dict['batteryStatusReport'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in boot_performance_report (list)
        _items = []
        if self.boot_performance_report:
            for _item_boot_performance_report in self.boot_performance_report:
                if _item_boot_performance_report:
                    _items.append(_item_boot_performance_report.to_dict())
            _dict['bootPerformanceReport'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cpu_info (list)
        _items = []
        if self.cpu_info:
            for _item_cpu_info in self.cpu_info:
                if _item_cpu_info:
                    _items.append(_item_cpu_info.to_dict())
            _dict['cpuInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cpu_status_report (list)
        _items = []
        if self.cpu_status_report:
            for _item_cpu_status_report in self.cpu_status_report:
                if _item_cpu_status_report:
                    _items.append(_item_cpu_status_report.to_dict())
            _dict['cpuStatusReport'] = _items
        # override the default output from pydantic by calling `to_dict()` of graphics_info
        if self.graphics_info:
            _dict['graphicsInfo'] = self.graphics_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in graphics_status_report (list)
        _items = []
        if self.graphics_status_report:
            for _item_graphics_status_report in self.graphics_status_report:
                if _item_graphics_status_report:
                    _items.append(_item_graphics_status_report.to_dict())
            _dict['graphicsStatusReport'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in heartbeat_status_report (list)
        _items = []
        if self.heartbeat_status_report:
            for _item_heartbeat_status_report in self.heartbeat_status_report:
                if _item_heartbeat_status_report:
                    _items.append(_item_heartbeat_status_report.to_dict())
            _dict['heartbeatStatusReport'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in kiosk_app_status_report (list)
        _items = []
        if self.kiosk_app_status_report:
            for _item_kiosk_app_status_report in self.kiosk_app_status_report:
                if _item_kiosk_app_status_report:
                    _items.append(_item_kiosk_app_status_report.to_dict())
            _dict['kioskAppStatusReport'] = _items
        # override the default output from pydantic by calling `to_dict()` of memory_info
        if self.memory_info:
            _dict['memoryInfo'] = self.memory_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in memory_status_report (list)
        _items = []
        if self.memory_status_report:
            for _item_memory_status_report in self.memory_status_report:
                if _item_memory_status_report:
                    _items.append(_item_memory_status_report.to_dict())
            _dict['memoryStatusReport'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in network_bandwidth_report (list)
        _items = []
        if self.network_bandwidth_report:
            for _item_network_bandwidth_report in self.network_bandwidth_report:
                if _item_network_bandwidth_report:
                    _items.append(_item_network_bandwidth_report.to_dict())
            _dict['networkBandwidthReport'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in network_diagnostics_report (list)
        _items = []
        if self.network_diagnostics_report:
            for _item_network_diagnostics_report in self.network_diagnostics_report:
                if _item_network_diagnostics_report:
                    _items.append(_item_network_diagnostics_report.to_dict())
            _dict['networkDiagnosticsReport'] = _items
        # override the default output from pydantic by calling `to_dict()` of network_info
        if self.network_info:
            _dict['networkInfo'] = self.network_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in network_status_report (list)
        _items = []
        if self.network_status_report:
            for _item_network_status_report in self.network_status_report:
                if _item_network_status_report:
                    _items.append(_item_network_status_report.to_dict())
            _dict['networkStatusReport'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in os_update_status (list)
        _items = []
        if self.os_update_status:
            for _item_os_update_status in self.os_update_status:
                if _item_os_update_status:
                    _items.append(_item_os_update_status.to_dict())
            _dict['osUpdateStatus'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in peripherals_report (list)
        _items = []
        if self.peripherals_report:
            for _item_peripherals_report in self.peripherals_report:
                if _item_peripherals_report:
                    _items.append(_item_peripherals_report.to_dict())
            _dict['peripheralsReport'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in runtime_counters_report (list)
        _items = []
        if self.runtime_counters_report:
            for _item_runtime_counters_report in self.runtime_counters_report:
                if _item_runtime_counters_report:
                    _items.append(_item_runtime_counters_report.to_dict())
            _dict['runtimeCountersReport'] = _items
        # override the default output from pydantic by calling `to_dict()` of storage_info
        if self.storage_info:
            _dict['storageInfo'] = self.storage_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in storage_status_report (list)
        _items = []
        if self.storage_status_report:
            for _item_storage_status_report in self.storage_status_report:
                if _item_storage_status_report:
                    _items.append(_item_storage_status_report.to_dict())
            _dict['storageStatusReport'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in thunderbolt_info (list)
        _items = []
        if self.thunderbolt_info:
            for _item_thunderbolt_info in self.thunderbolt_info:
                if _item_thunderbolt_info:
                    _items.append(_item_thunderbolt_info.to_dict())
            _dict['thunderboltInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1TelemetryDevice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audioStatusReport": [GoogleChromeManagementV1AudioStatusReport.from_dict(_item) for _item in obj["audioStatusReport"]] if obj.get("audioStatusReport") is not None else None,
            "batteryInfo": [GoogleChromeManagementV1BatteryInfo.from_dict(_item) for _item in obj["batteryInfo"]] if obj.get("batteryInfo") is not None else None,
            "batteryStatusReport": [GoogleChromeManagementV1BatteryStatusReport.from_dict(_item) for _item in obj["batteryStatusReport"]] if obj.get("batteryStatusReport") is not None else None,
            "bootPerformanceReport": [GoogleChromeManagementV1BootPerformanceReport.from_dict(_item) for _item in obj["bootPerformanceReport"]] if obj.get("bootPerformanceReport") is not None else None,
            "cpuInfo": [GoogleChromeManagementV1CpuInfo.from_dict(_item) for _item in obj["cpuInfo"]] if obj.get("cpuInfo") is not None else None,
            "cpuStatusReport": [GoogleChromeManagementV1CpuStatusReport.from_dict(_item) for _item in obj["cpuStatusReport"]] if obj.get("cpuStatusReport") is not None else None,
            "customer": obj.get("customer"),
            "deviceId": obj.get("deviceId"),
            "graphicsInfo": GoogleChromeManagementV1GraphicsInfo.from_dict(obj["graphicsInfo"]) if obj.get("graphicsInfo") is not None else None,
            "graphicsStatusReport": [GoogleChromeManagementV1GraphicsStatusReport.from_dict(_item) for _item in obj["graphicsStatusReport"]] if obj.get("graphicsStatusReport") is not None else None,
            "heartbeatStatusReport": [GoogleChromeManagementV1HeartbeatStatusReport.from_dict(_item) for _item in obj["heartbeatStatusReport"]] if obj.get("heartbeatStatusReport") is not None else None,
            "kioskAppStatusReport": [GoogleChromeManagementV1KioskAppStatusReport.from_dict(_item) for _item in obj["kioskAppStatusReport"]] if obj.get("kioskAppStatusReport") is not None else None,
            "memoryInfo": GoogleChromeManagementV1MemoryInfo.from_dict(obj["memoryInfo"]) if obj.get("memoryInfo") is not None else None,
            "memoryStatusReport": [GoogleChromeManagementV1MemoryStatusReport.from_dict(_item) for _item in obj["memoryStatusReport"]] if obj.get("memoryStatusReport") is not None else None,
            "name": obj.get("name"),
            "networkBandwidthReport": [GoogleChromeManagementV1NetworkBandwidthReport.from_dict(_item) for _item in obj["networkBandwidthReport"]] if obj.get("networkBandwidthReport") is not None else None,
            "networkDiagnosticsReport": [GoogleChromeManagementV1NetworkDiagnosticsReport.from_dict(_item) for _item in obj["networkDiagnosticsReport"]] if obj.get("networkDiagnosticsReport") is not None else None,
            "networkInfo": GoogleChromeManagementV1NetworkInfo.from_dict(obj["networkInfo"]) if obj.get("networkInfo") is not None else None,
            "networkStatusReport": [GoogleChromeManagementV1NetworkStatusReport.from_dict(_item) for _item in obj["networkStatusReport"]] if obj.get("networkStatusReport") is not None else None,
            "orgUnitId": obj.get("orgUnitId"),
            "osUpdateStatus": [GoogleChromeManagementV1OsUpdateStatus.from_dict(_item) for _item in obj["osUpdateStatus"]] if obj.get("osUpdateStatus") is not None else None,
            "peripheralsReport": [GoogleChromeManagementV1PeripheralsReport.from_dict(_item) for _item in obj["peripheralsReport"]] if obj.get("peripheralsReport") is not None else None,
            "runtimeCountersReport": [GoogleChromeManagementV1RuntimeCountersReport.from_dict(_item) for _item in obj["runtimeCountersReport"]] if obj.get("runtimeCountersReport") is not None else None,
            "serialNumber": obj.get("serialNumber"),
            "storageInfo": GoogleChromeManagementV1StorageInfo.from_dict(obj["storageInfo"]) if obj.get("storageInfo") is not None else None,
            "storageStatusReport": [GoogleChromeManagementV1StorageStatusReport.from_dict(_item) for _item in obj["storageStatusReport"]] if obj.get("storageStatusReport") is not None else None,
            "thunderboltInfo": [GoogleChromeManagementV1ThunderboltInfo.from_dict(_item) for _item in obj["thunderboltInfo"]] if obj.get("thunderboltInfo") is not None else None
        })
        return _obj



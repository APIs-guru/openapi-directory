# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_chrome_management_v1_battery_sample_report import GoogleChromeManagementV1BatterySampleReport
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromeManagementV1BatteryStatusReport(BaseModel):
    """
    Status data for battery. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDevicePowerStatus](https://chromeenterprise.google/policies/#ReportDevicePowerStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_BATTERY_REPORT
    """ # noqa: E501
    battery_health: Optional[StrictStr] = Field(default=None, description="Output only. Battery health.", alias="batteryHealth")
    cycle_count: Optional[StrictInt] = Field(default=None, description="Output only. Cycle count.", alias="cycleCount")
    full_charge_capacity: Optional[StrictStr] = Field(default=None, description="Output only. Full charge capacity (mAmpere-hours).", alias="fullChargeCapacity")
    report_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp of when the sample was collected on device", alias="reportTime")
    sample: Optional[List[GoogleChromeManagementV1BatterySampleReport]] = Field(default=None, description="Output only. Sampling data for the battery sorted in a decreasing order of report_time.")
    serial_number: Optional[StrictStr] = Field(default=None, description="Output only. Battery serial number.", alias="serialNumber")
    __properties: ClassVar[List[str]] = ["batteryHealth", "cycleCount", "fullChargeCapacity", "reportTime", "sample", "serialNumber"]

    @field_validator('battery_health')
    def battery_health_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BATTERY_HEALTH_UNSPECIFIED', 'BATTERY_HEALTH_NORMAL', 'BATTERY_REPLACE_SOON', 'BATTERY_REPLACE_NOW']):
            raise ValueError("must be one of enum values ('BATTERY_HEALTH_UNSPECIFIED', 'BATTERY_HEALTH_NORMAL', 'BATTERY_REPLACE_SOON', 'BATTERY_REPLACE_NOW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1BatteryStatusReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "battery_health",
            "cycle_count",
            "full_charge_capacity",
            "report_time",
            "sample",
            "serial_number",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sample (list)
        _items = []
        if self.sample:
            for _item_sample in self.sample:
                if _item_sample:
                    _items.append(_item_sample.to_dict())
            _dict['sample'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1BatteryStatusReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "batteryHealth": obj.get("batteryHealth"),
            "cycleCount": obj.get("cycleCount"),
            "fullChargeCapacity": obj.get("fullChargeCapacity"),
            "reportTime": obj.get("reportTime"),
            "sample": [GoogleChromeManagementV1BatterySampleReport.from_dict(_item) for _item in obj["sample"]] if obj.get("sample") is not None else None,
            "serialNumber": obj.get("serialNumber")
        })
        return _obj



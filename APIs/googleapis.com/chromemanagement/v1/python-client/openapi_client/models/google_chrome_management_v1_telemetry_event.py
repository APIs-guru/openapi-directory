# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_chrome_management_v1_telemetry_device_info import GoogleChromeManagementV1TelemetryDeviceInfo
from openapi_client.models.google_chrome_management_v1_telemetry_https_latency_change_event import GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent
from openapi_client.models.google_chrome_management_v1_telemetry_network_connection_state_change_event import GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent
from openapi_client.models.google_chrome_management_v1_telemetry_network_signal_strength_event import GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent
from openapi_client.models.google_chrome_management_v1_telemetry_usb_peripherals_event import GoogleChromeManagementV1TelemetryUsbPeripheralsEvent
from openapi_client.models.google_chrome_management_v1_telemetry_user_info import GoogleChromeManagementV1TelemetryUserInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromeManagementV1TelemetryEvent(BaseModel):
    """
    Telemetry data reported by a managed device.
    """ # noqa: E501
    audio_severe_underrun_event: Optional[Dict[str, Any]] = Field(default=None, description="`TelemetryAudioSevereUnderrunEvent` is triggered when a audio devices run out of buffer data for more than 5 seconds. * Granular permission needed: TELEMETRY_API_AUDIO_REPORT", alias="audioSevereUnderrunEvent")
    device: Optional[GoogleChromeManagementV1TelemetryDeviceInfo] = None
    event_type: Optional[StrictStr] = Field(default=None, description="The event type of the current event.", alias="eventType")
    https_latency_change_event: Optional[GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent] = Field(default=None, alias="httpsLatencyChangeEvent")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the event.")
    network_state_change_event: Optional[GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent] = Field(default=None, alias="networkStateChangeEvent")
    report_time: Optional[StrictStr] = Field(default=None, description="Timestamp that represents when the event was reported.", alias="reportTime")
    usb_peripherals_event: Optional[GoogleChromeManagementV1TelemetryUsbPeripheralsEvent] = Field(default=None, alias="usbPeripheralsEvent")
    user: Optional[GoogleChromeManagementV1TelemetryUserInfo] = None
    vpn_connection_state_change_event: Optional[GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent] = Field(default=None, alias="vpnConnectionStateChangeEvent")
    wifi_signal_strength_event: Optional[GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent] = Field(default=None, alias="wifiSignalStrengthEvent")
    __properties: ClassVar[List[str]] = ["audioSevereUnderrunEvent", "device", "eventType", "httpsLatencyChangeEvent", "name", "networkStateChangeEvent", "reportTime", "usbPeripheralsEvent", "user", "vpnConnectionStateChangeEvent", "wifiSignalStrengthEvent"]

    @field_validator('event_type')
    def event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EVENT_TYPE_UNSPECIFIED', 'AUDIO_SEVERE_UNDERRUN', 'NETWORK_STATE_CHANGE', 'USB_ADDED', 'USB_REMOVED', 'NETWORK_HTTPS_LATENCY_CHANGE', 'WIFI_SIGNAL_STRENGTH_LOW', 'WIFI_SIGNAL_STRENGTH_RECOVERED', 'VPN_CONNECTION_STATE_CHANGE']):
            raise ValueError("must be one of enum values ('EVENT_TYPE_UNSPECIFIED', 'AUDIO_SEVERE_UNDERRUN', 'NETWORK_STATE_CHANGE', 'USB_ADDED', 'USB_REMOVED', 'NETWORK_HTTPS_LATENCY_CHANGE', 'WIFI_SIGNAL_STRENGTH_LOW', 'WIFI_SIGNAL_STRENGTH_RECOVERED', 'VPN_CONNECTION_STATE_CHANGE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1TelemetryEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of device
        if self.device:
            _dict['device'] = self.device.to_dict()
        # override the default output from pydantic by calling `to_dict()` of https_latency_change_event
        if self.https_latency_change_event:
            _dict['httpsLatencyChangeEvent'] = self.https_latency_change_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_state_change_event
        if self.network_state_change_event:
            _dict['networkStateChangeEvent'] = self.network_state_change_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usb_peripherals_event
        if self.usb_peripherals_event:
            _dict['usbPeripheralsEvent'] = self.usb_peripherals_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vpn_connection_state_change_event
        if self.vpn_connection_state_change_event:
            _dict['vpnConnectionStateChangeEvent'] = self.vpn_connection_state_change_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wifi_signal_strength_event
        if self.wifi_signal_strength_event:
            _dict['wifiSignalStrengthEvent'] = self.wifi_signal_strength_event.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1TelemetryEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audioSevereUnderrunEvent": obj.get("audioSevereUnderrunEvent"),
            "device": GoogleChromeManagementV1TelemetryDeviceInfo.from_dict(obj["device"]) if obj.get("device") is not None else None,
            "eventType": obj.get("eventType"),
            "httpsLatencyChangeEvent": GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.from_dict(obj["httpsLatencyChangeEvent"]) if obj.get("httpsLatencyChangeEvent") is not None else None,
            "name": obj.get("name"),
            "networkStateChangeEvent": GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent.from_dict(obj["networkStateChangeEvent"]) if obj.get("networkStateChangeEvent") is not None else None,
            "reportTime": obj.get("reportTime"),
            "usbPeripheralsEvent": GoogleChromeManagementV1TelemetryUsbPeripheralsEvent.from_dict(obj["usbPeripheralsEvent"]) if obj.get("usbPeripheralsEvent") is not None else None,
            "user": GoogleChromeManagementV1TelemetryUserInfo.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "vpnConnectionStateChangeEvent": GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent.from_dict(obj["vpnConnectionStateChangeEvent"]) if obj.get("vpnConnectionStateChangeEvent") is not None else None,
            "wifiSignalStrengthEvent": GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent.from_dict(obj["wifiSignalStrengthEvent"]) if obj.get("wifiSignalStrengthEvent") is not None else None
        })
        return _obj



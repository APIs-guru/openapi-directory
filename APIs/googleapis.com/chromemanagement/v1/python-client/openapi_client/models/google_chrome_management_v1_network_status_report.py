# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromeManagementV1NetworkStatusReport(BaseModel):
    """
    State of visible/configured networks. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportNetworkStatus](https://chromeenterprise.google/policies/#ReportNetworkStatus) * Data Collection Frequency: 60 minutes * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: Yes * Granular permission needed: TELEMETRY_API_NETWORK_REPORT
    """ # noqa: E501
    connection_state: Optional[StrictStr] = Field(default=None, description="Output only. Current connection state of the network.", alias="connectionState")
    connection_type: Optional[StrictStr] = Field(default=None, description="Output only. Network connection type.", alias="connectionType")
    encryption_on: Optional[StrictBool] = Field(default=None, description="Output only. Whether the wifi encryption key is turned off.", alias="encryptionOn")
    gateway_ip_address: Optional[StrictStr] = Field(default=None, description="Output only. Gateway IP address.", alias="gatewayIpAddress")
    guid: Optional[StrictStr] = Field(default=None, description="Output only. Network connection guid.")
    lan_ip_address: Optional[StrictStr] = Field(default=None, description="Output only. LAN IP address.", alias="lanIpAddress")
    receiving_bit_rate_mbps: Optional[StrictStr] = Field(default=None, description="Output only. Receiving bit rate measured in Megabits per second.", alias="receivingBitRateMbps")
    report_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the network state was reported.", alias="reportTime")
    sample_frequency: Optional[StrictStr] = Field(default=None, description="Output only. Frequency the report is sampled.", alias="sampleFrequency")
    signal_strength_dbm: Optional[StrictInt] = Field(default=None, description="Output only. Signal strength for wireless networks measured in decibels.", alias="signalStrengthDbm")
    transmission_bit_rate_mbps: Optional[StrictStr] = Field(default=None, description="Output only. Transmission bit rate measured in Megabits per second.", alias="transmissionBitRateMbps")
    transmission_power_dbm: Optional[StrictInt] = Field(default=None, description="Output only. Transmission power measured in decibels.", alias="transmissionPowerDbm")
    wifi_link_quality: Optional[StrictStr] = Field(default=None, description="Output only. Wifi link quality. Value ranges from [0, 70]. 0 indicates no signal and 70 indicates a strong signal.", alias="wifiLinkQuality")
    wifi_power_management_enabled: Optional[StrictBool] = Field(default=None, description="Output only. Wifi power management enabled", alias="wifiPowerManagementEnabled")
    __properties: ClassVar[List[str]] = ["connectionState", "connectionType", "encryptionOn", "gatewayIpAddress", "guid", "lanIpAddress", "receivingBitRateMbps", "reportTime", "sampleFrequency", "signalStrengthDbm", "transmissionBitRateMbps", "transmissionPowerDbm", "wifiLinkQuality", "wifiPowerManagementEnabled"]

    @field_validator('connection_state')
    def connection_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NETWORK_CONNECTION_STATE_UNSPECIFIED', 'ONLINE', 'CONNECTED', 'PORTAL', 'CONNECTING', 'NOT_CONNECTED']):
            raise ValueError("must be one of enum values ('NETWORK_CONNECTION_STATE_UNSPECIFIED', 'ONLINE', 'CONNECTED', 'PORTAL', 'CONNECTING', 'NOT_CONNECTED')")
        return value

    @field_validator('connection_type')
    def connection_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NETWORK_TYPE_UNSPECIFIED', 'CELLULAR', 'ETHERNET', 'TETHER', 'VPN', 'WIFI']):
            raise ValueError("must be one of enum values ('NETWORK_TYPE_UNSPECIFIED', 'CELLULAR', 'ETHERNET', 'TETHER', 'VPN', 'WIFI')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1NetworkStatusReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "connection_state",
            "connection_type",
            "encryption_on",
            "gateway_ip_address",
            "guid",
            "lan_ip_address",
            "receiving_bit_rate_mbps",
            "report_time",
            "sample_frequency",
            "signal_strength_dbm",
            "transmission_bit_rate_mbps",
            "transmission_power_dbm",
            "wifi_link_quality",
            "wifi_power_management_enabled",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1NetworkStatusReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectionState": obj.get("connectionState"),
            "connectionType": obj.get("connectionType"),
            "encryptionOn": obj.get("encryptionOn"),
            "gatewayIpAddress": obj.get("gatewayIpAddress"),
            "guid": obj.get("guid"),
            "lanIpAddress": obj.get("lanIpAddress"),
            "receivingBitRateMbps": obj.get("receivingBitRateMbps"),
            "reportTime": obj.get("reportTime"),
            "sampleFrequency": obj.get("sampleFrequency"),
            "signalStrengthDbm": obj.get("signalStrengthDbm"),
            "transmissionBitRateMbps": obj.get("transmissionBitRateMbps"),
            "transmissionPowerDbm": obj.get("transmissionPowerDbm"),
            "wifiLinkQuality": obj.get("wifiLinkQuality"),
            "wifiPowerManagementEnabled": obj.get("wifiPowerManagementEnabled")
        })
        return _obj



# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_chrome_management_v1_android_app_info import GoogleChromeManagementV1AndroidAppInfo
from openapi_client.models.google_chrome_management_v1_chrome_app_info import GoogleChromeManagementV1ChromeAppInfo
from openapi_client.models.google_rpc_status import GoogleRpcStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromeManagementV1AppDetails(BaseModel):
    """
    Resource representing app details.
    """ # noqa: E501
    android_app_info: Optional[GoogleChromeManagementV1AndroidAppInfo] = Field(default=None, alias="androidAppInfo")
    app_id: Optional[StrictStr] = Field(default=None, description="Output only. Unique store identifier for the item. Examples: \"gmbmikajjgmnabiglmofipeabaddhgne\" for the Save to Google Drive Chrome extension, \"com.google.android.apps.docs\" for the Google Drive Android app.", alias="appId")
    chrome_app_info: Optional[GoogleChromeManagementV1ChromeAppInfo] = Field(default=None, alias="chromeAppInfo")
    description: Optional[StrictStr] = Field(default=None, description="Output only. App's description.")
    detail_uri: Optional[StrictStr] = Field(default=None, description="Output only. The uri for the detail page of the item.", alias="detailUri")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. App's display name.", alias="displayName")
    first_publish_time: Optional[StrictStr] = Field(default=None, description="Output only. First published time.", alias="firstPublishTime")
    homepage_uri: Optional[StrictStr] = Field(default=None, description="Output only. Home page or Website uri.", alias="homepageUri")
    icon_uri: Optional[StrictStr] = Field(default=None, description="Output only. A link to an image that can be used as an icon for the product.", alias="iconUri")
    is_paid_app: Optional[StrictBool] = Field(default=None, description="Output only. Indicates if the app has to be paid for OR has paid content.", alias="isPaidApp")
    latest_publish_time: Optional[StrictStr] = Field(default=None, description="Output only. Latest published time.", alias="latestPublishTime")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Format: name=customers/{customer_id}/apps/{chrome|android|web}/{app_id}@{version}")
    privacy_policy_uri: Optional[StrictStr] = Field(default=None, description="Output only. The URI pointing to the privacy policy of the app, if it was provided by the developer. Version-specific field that will only be set when the requested app version is found.", alias="privacyPolicyUri")
    publisher: Optional[StrictStr] = Field(default=None, description="Output only. The publisher of the item.")
    review_number: Optional[StrictStr] = Field(default=None, description="Output only. Number of reviews received. Chrome Web Store review information will always be for the latest version of an app.", alias="reviewNumber")
    review_rating: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. The rating of the app (on 5 stars). Chrome Web Store review information will always be for the latest version of an app.", alias="reviewRating")
    revision_id: Optional[StrictStr] = Field(default=None, description="Output only. App version. A new revision is committed whenever a new version of the app is published.", alias="revisionId")
    service_error: Optional[GoogleRpcStatus] = Field(default=None, alias="serviceError")
    type: Optional[StrictStr] = Field(default=None, description="Output only. App type.")
    __properties: ClassVar[List[str]] = ["androidAppInfo", "appId", "chromeAppInfo", "description", "detailUri", "displayName", "firstPublishTime", "homepageUri", "iconUri", "isPaidApp", "latestPublishTime", "name", "privacyPolicyUri", "publisher", "reviewNumber", "reviewRating", "revisionId", "serviceError", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APP_ITEM_TYPE_UNSPECIFIED', 'CHROME', 'ANDROID', 'WEB']):
            raise ValueError("must be one of enum values ('APP_ITEM_TYPE_UNSPECIFIED', 'CHROME', 'ANDROID', 'WEB')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1AppDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "app_id",
            "description",
            "detail_uri",
            "display_name",
            "first_publish_time",
            "homepage_uri",
            "icon_uri",
            "is_paid_app",
            "latest_publish_time",
            "name",
            "privacy_policy_uri",
            "publisher",
            "review_number",
            "review_rating",
            "revision_id",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of android_app_info
        if self.android_app_info:
            _dict['androidAppInfo'] = self.android_app_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of chrome_app_info
        if self.chrome_app_info:
            _dict['chromeAppInfo'] = self.chrome_app_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_error
        if self.service_error:
            _dict['serviceError'] = self.service_error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1AppDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "androidAppInfo": GoogleChromeManagementV1AndroidAppInfo.from_dict(obj["androidAppInfo"]) if obj.get("androidAppInfo") is not None else None,
            "appId": obj.get("appId"),
            "chromeAppInfo": GoogleChromeManagementV1ChromeAppInfo.from_dict(obj["chromeAppInfo"]) if obj.get("chromeAppInfo") is not None else None,
            "description": obj.get("description"),
            "detailUri": obj.get("detailUri"),
            "displayName": obj.get("displayName"),
            "firstPublishTime": obj.get("firstPublishTime"),
            "homepageUri": obj.get("homepageUri"),
            "iconUri": obj.get("iconUri"),
            "isPaidApp": obj.get("isPaidApp"),
            "latestPublishTime": obj.get("latestPublishTime"),
            "name": obj.get("name"),
            "privacyPolicyUri": obj.get("privacyPolicyUri"),
            "publisher": obj.get("publisher"),
            "reviewNumber": obj.get("reviewNumber"),
            "reviewRating": obj.get("reviewRating"),
            "revisionId": obj.get("revisionId"),
            "serviceError": GoogleRpcStatus.from_dict(obj["serviceError"]) if obj.get("serviceError") is not None else None,
            "type": obj.get("type")
        })
        return _obj



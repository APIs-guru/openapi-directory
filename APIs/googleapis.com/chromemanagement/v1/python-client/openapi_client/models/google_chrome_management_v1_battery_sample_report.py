# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromeManagementV1BatterySampleReport(BaseModel):
    """
    Sampling data for battery. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDevicePowerStatus](https://chromeenterprise.google/policies/#ReportDevicePowerStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A
    """ # noqa: E501
    charge_rate: Optional[StrictInt] = Field(default=None, description="Output only. Battery charge percentage.", alias="chargeRate")
    current: Optional[StrictStr] = Field(default=None, description="Output only. Battery current (mA).")
    discharge_rate: Optional[StrictInt] = Field(default=None, description="Output only. The battery discharge rate measured in mW. Positive if the battery is being discharged, negative if it's being charged.", alias="dischargeRate")
    remaining_capacity: Optional[StrictStr] = Field(default=None, description="Output only. Battery remaining capacity (mAmpere-hours).", alias="remainingCapacity")
    report_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp of when the sample was collected on device", alias="reportTime")
    status: Optional[StrictStr] = Field(default=None, description="Output only. Battery status read from sysfs. Example: Discharging")
    temperature: Optional[StrictInt] = Field(default=None, description="Output only. Temperature in Celsius degrees.")
    voltage: Optional[StrictStr] = Field(default=None, description="Output only. Battery voltage (millivolt).")
    __properties: ClassVar[List[str]] = ["chargeRate", "current", "dischargeRate", "remainingCapacity", "reportTime", "status", "temperature", "voltage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1BatterySampleReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "charge_rate",
            "current",
            "discharge_rate",
            "remaining_capacity",
            "report_time",
            "status",
            "temperature",
            "voltage",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1BatterySampleReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chargeRate": obj.get("chargeRate"),
            "current": obj.get("current"),
            "dischargeRate": obj.get("dischargeRate"),
            "remainingCapacity": obj.get("remainingCapacity"),
            "reportTime": obj.get("reportTime"),
            "status": obj.get("status"),
            "temperature": obj.get("temperature"),
            "voltage": obj.get("voltage")
        })
        return _obj



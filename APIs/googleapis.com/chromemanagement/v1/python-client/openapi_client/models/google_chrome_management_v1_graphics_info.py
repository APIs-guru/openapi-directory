# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_chrome_management_v1_display_device import GoogleChromeManagementV1DisplayDevice
from openapi_client.models.google_chrome_management_v1_graphics_adapter_info import GoogleChromeManagementV1GraphicsAdapterInfo
from openapi_client.models.google_chrome_management_v1_touch_screen_info import GoogleChromeManagementV1TouchScreenInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromeManagementV1GraphicsInfo(BaseModel):
    """
    Information of the graphics subsystem. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceGraphicsStatus](https://chromeenterprise.google/policies/#ReportDeviceGraphicsStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_GRAPHICS_INFO
    """ # noqa: E501
    adapter_info: Optional[GoogleChromeManagementV1GraphicsAdapterInfo] = Field(default=None, alias="adapterInfo")
    display_devices: Optional[List[GoogleChromeManagementV1DisplayDevice]] = Field(default=None, description="Output only. Information about the display(s) of the device.", alias="displayDevices")
    eprivacy_supported: Optional[StrictBool] = Field(default=None, description="Output only. Is ePrivacy screen supported or not.", alias="eprivacySupported")
    touch_screen_info: Optional[GoogleChromeManagementV1TouchScreenInfo] = Field(default=None, alias="touchScreenInfo")
    __properties: ClassVar[List[str]] = ["adapterInfo", "displayDevices", "eprivacySupported", "touchScreenInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1GraphicsInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "display_devices",
            "eprivacy_supported",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of adapter_info
        if self.adapter_info:
            _dict['adapterInfo'] = self.adapter_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in display_devices (list)
        _items = []
        if self.display_devices:
            for _item_display_devices in self.display_devices:
                if _item_display_devices:
                    _items.append(_item_display_devices.to_dict())
            _dict['displayDevices'] = _items
        # override the default output from pydantic by calling `to_dict()` of touch_screen_info
        if self.touch_screen_info:
            _dict['touchScreenInfo'] = self.touch_screen_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1GraphicsInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adapterInfo": GoogleChromeManagementV1GraphicsAdapterInfo.from_dict(obj["adapterInfo"]) if obj.get("adapterInfo") is not None else None,
            "displayDevices": [GoogleChromeManagementV1DisplayDevice.from_dict(_item) for _item in obj["displayDevices"]] if obj.get("displayDevices") is not None else None,
            "eprivacySupported": obj.get("eprivacySupported"),
            "touchScreenInfo": GoogleChromeManagementV1TouchScreenInfo.from_dict(obj["touchScreenInfo"]) if obj.get("touchScreenInfo") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromeManagementV1AudioStatusReport(BaseModel):
    """
    Status data for storage. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceAudioStatus](https://chromeenterprise.google/policies/#ReportDeviceAudioStatus) * Data Collection Frequency: 10 minutes * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_AUDIO_REPORT
    """ # noqa: E501
    input_device: Optional[StrictStr] = Field(default=None, description="Output only. Active input device's name.", alias="inputDevice")
    input_gain: Optional[StrictInt] = Field(default=None, description="Output only. Active input device's gain in [0, 100].", alias="inputGain")
    input_mute: Optional[StrictBool] = Field(default=None, description="Output only. Is active input device mute or not.", alias="inputMute")
    output_device: Optional[StrictStr] = Field(default=None, description="Output only. Active output device's name.", alias="outputDevice")
    output_mute: Optional[StrictBool] = Field(default=None, description="Output only. Is active output device mute or not.", alias="outputMute")
    output_volume: Optional[StrictInt] = Field(default=None, description="Output only. Active output device's volume in [0, 100].", alias="outputVolume")
    report_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp of when the sample was collected on device.", alias="reportTime")
    __properties: ClassVar[List[str]] = ["inputDevice", "inputGain", "inputMute", "outputDevice", "outputMute", "outputVolume", "reportTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1AudioStatusReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "input_device",
            "input_gain",
            "input_mute",
            "output_device",
            "output_mute",
            "output_volume",
            "report_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1AudioStatusReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inputDevice": obj.get("inputDevice"),
            "inputGain": obj.get("inputGain"),
            "inputMute": obj.get("inputMute"),
            "outputDevice": obj.get("outputDevice"),
            "outputMute": obj.get("outputMute"),
            "outputVolume": obj.get("outputVolume"),
            "reportTime": obj.get("reportTime")
        })
        return _obj



# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromeManagementV1UsbPeripheralReport(BaseModel):
    """
    USB connected peripheral report.
    """ # noqa: E501
    categories: Optional[List[StrictStr]] = Field(default=None, description="Output only. Categories the device belongs to https://www.usb.org/defined-class-codes")
    class_id: Optional[StrictInt] = Field(default=None, description="Output only. Class ID https://www.usb.org/defined-class-codes", alias="classId")
    firmware_version: Optional[StrictStr] = Field(default=None, description="Output only. Firmware version", alias="firmwareVersion")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Device name, model name, or product name")
    pid: Optional[StrictInt] = Field(default=None, description="Output only. Product ID")
    subclass_id: Optional[StrictInt] = Field(default=None, description="Output only. Subclass ID https://www.usb.org/defined-class-codes", alias="subclassId")
    vendor: Optional[StrictStr] = Field(default=None, description="Output only. Vendor name")
    vid: Optional[StrictInt] = Field(default=None, description="Output only. Vendor ID")
    __properties: ClassVar[List[str]] = ["categories", "classId", "firmwareVersion", "name", "pid", "subclassId", "vendor", "vid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1UsbPeripheralReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "categories",
            "class_id",
            "firmware_version",
            "name",
            "pid",
            "subclass_id",
            "vendor",
            "vid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1UsbPeripheralReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categories": obj.get("categories"),
            "classId": obj.get("classId"),
            "firmwareVersion": obj.get("firmwareVersion"),
            "name": obj.get("name"),
            "pid": obj.get("pid"),
            "subclassId": obj.get("subclassId"),
            "vendor": obj.get("vendor"),
            "vid": obj.get("vid")
        })
        return _obj



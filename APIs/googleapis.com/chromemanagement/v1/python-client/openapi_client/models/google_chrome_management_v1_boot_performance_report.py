# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromeManagementV1BootPerformanceReport(BaseModel):
    """
    Boot performance report of a device. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceBootMode](https://chromeenterprise.google/policies/#ReportDeviceBootMode) * Data Collection Frequency: On every boot up event * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_OS_REPORT
    """ # noqa: E501
    boot_up_duration: Optional[StrictStr] = Field(default=None, description="Total time to boot up.", alias="bootUpDuration")
    boot_up_time: Optional[StrictStr] = Field(default=None, description="The timestamp when power came on.", alias="bootUpTime")
    report_time: Optional[StrictStr] = Field(default=None, description="Timestamp when the report was collected.", alias="reportTime")
    shutdown_duration: Optional[StrictStr] = Field(default=None, description="Total time since shutdown start to power off.", alias="shutdownDuration")
    shutdown_reason: Optional[StrictStr] = Field(default=None, description="The shutdown reason.", alias="shutdownReason")
    shutdown_time: Optional[StrictStr] = Field(default=None, description="The timestamp when shutdown.", alias="shutdownTime")
    __properties: ClassVar[List[str]] = ["bootUpDuration", "bootUpTime", "reportTime", "shutdownDuration", "shutdownReason", "shutdownTime"]

    @field_validator('shutdown_reason')
    def shutdown_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SHUTDOWN_REASON_UNSPECIFIED', 'USER_REQUEST', 'SYSTEM_UPDATE', 'LOW_BATTERY', 'OTHER']):
            raise ValueError("must be one of enum values ('SHUTDOWN_REASON_UNSPECIFIED', 'USER_REQUEST', 'SYSTEM_UPDATE', 'LOW_BATTERY', 'OTHER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1BootPerformanceReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1BootPerformanceReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bootUpDuration": obj.get("bootUpDuration"),
            "bootUpTime": obj.get("bootUpTime"),
            "reportTime": obj.get("reportTime"),
            "shutdownDuration": obj.get("shutdownDuration"),
            "shutdownReason": obj.get("shutdownReason"),
            "shutdownTime": obj.get("shutdownTime")
        })
        return _obj



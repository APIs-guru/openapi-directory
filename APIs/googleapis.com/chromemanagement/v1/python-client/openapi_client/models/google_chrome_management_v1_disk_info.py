# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromeManagementV1DiskInfo(BaseModel):
    """
    Status of the single storage device.
    """ # noqa: E501
    bytes_read_this_session: Optional[StrictStr] = Field(default=None, description="Output only. Number of bytes read since last boot.", alias="bytesReadThisSession")
    bytes_written_this_session: Optional[StrictStr] = Field(default=None, description="Output only. Number of bytes written since last boot.", alias="bytesWrittenThisSession")
    discard_time_this_session: Optional[StrictStr] = Field(default=None, description="Output only. Time spent discarding since last boot. Discarding is writing to clear blocks which are no longer in use. Supported on kernels 4.18+.", alias="discardTimeThisSession")
    health: Optional[StrictStr] = Field(default=None, description="Output only. Disk health.")
    io_time_this_session: Optional[StrictStr] = Field(default=None, description="Output only. Counts the time the disk and queue were busy, so unlike the fields above, parallel requests are not counted multiple times.", alias="ioTimeThisSession")
    manufacturer: Optional[StrictStr] = Field(default=None, description="Output only. Disk manufacturer.")
    model: Optional[StrictStr] = Field(default=None, description="Output only. Disk model.")
    read_time_this_session: Optional[StrictStr] = Field(default=None, description="Output only. Time spent reading from disk since last boot.", alias="readTimeThisSession")
    serial_number: Optional[StrictStr] = Field(default=None, description="Output only. Disk serial number.", alias="serialNumber")
    size_bytes: Optional[StrictStr] = Field(default=None, description="Output only. Disk size.", alias="sizeBytes")
    type: Optional[StrictStr] = Field(default=None, description="Output only. Disk type: eMMC / NVMe / ATA / SCSI.")
    volume_ids: Optional[List[StrictStr]] = Field(default=None, description="Output only. Disk volumes.", alias="volumeIds")
    write_time_this_session: Optional[StrictStr] = Field(default=None, description="Output only. Time spent writing to disk since last boot.", alias="writeTimeThisSession")
    __properties: ClassVar[List[str]] = ["bytesReadThisSession", "bytesWrittenThisSession", "discardTimeThisSession", "health", "ioTimeThisSession", "manufacturer", "model", "readTimeThisSession", "serialNumber", "sizeBytes", "type", "volumeIds", "writeTimeThisSession"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1DiskInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "bytes_read_this_session",
            "bytes_written_this_session",
            "discard_time_this_session",
            "health",
            "io_time_this_session",
            "manufacturer",
            "model",
            "read_time_this_session",
            "serial_number",
            "size_bytes",
            "type",
            "volume_ids",
            "write_time_this_session",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1DiskInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bytesReadThisSession": obj.get("bytesReadThisSession"),
            "bytesWrittenThisSession": obj.get("bytesWrittenThisSession"),
            "discardTimeThisSession": obj.get("discardTimeThisSession"),
            "health": obj.get("health"),
            "ioTimeThisSession": obj.get("ioTimeThisSession"),
            "manufacturer": obj.get("manufacturer"),
            "model": obj.get("model"),
            "readTimeThisSession": obj.get("readTimeThisSession"),
            "serialNumber": obj.get("serialNumber"),
            "sizeBytes": obj.get("sizeBytes"),
            "type": obj.get("type"),
            "volumeIds": obj.get("volumeIds"),
            "writeTimeThisSession": obj.get("writeTimeThisSession")
        })
        return _obj



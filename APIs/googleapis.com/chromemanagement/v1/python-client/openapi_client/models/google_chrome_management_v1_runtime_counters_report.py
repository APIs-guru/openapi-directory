# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromeManagementV1RuntimeCountersReport(BaseModel):
    """
    Runtime counters retrieved from CPU. Currently the runtime counters telemetry is only supported by Intel vPro PSR on Gen 14+.
    """ # noqa: E501
    enter_hibernation_count: Optional[StrictStr] = Field(default=None, description="Number of times that the device has entered into the hibernation state. Currently obtained via the PSR, count from S0->S4.", alias="enterHibernationCount")
    enter_poweroff_count: Optional[StrictStr] = Field(default=None, description="Number of times that the device has entered into the power-off state. Currently obtained via the PSR, count from S0->S5.", alias="enterPoweroffCount")
    enter_sleep_count: Optional[StrictStr] = Field(default=None, description="Number of times that the device has entered into the sleep state. Currently obtained via the PSR, count from S0->S3.", alias="enterSleepCount")
    report_time: Optional[StrictStr] = Field(default=None, description="Timestamp when the report was collected.", alias="reportTime")
    uptime_runtime_duration: Optional[StrictStr] = Field(default=None, description="Total lifetime runtime. Currently always S0 runtime from Intel vPro PSR.", alias="uptimeRuntimeDuration")
    __properties: ClassVar[List[str]] = ["enterHibernationCount", "enterPoweroffCount", "enterSleepCount", "reportTime", "uptimeRuntimeDuration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1RuntimeCountersReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1RuntimeCountersReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enterHibernationCount": obj.get("enterHibernationCount"),
            "enterPoweroffCount": obj.get("enterPoweroffCount"),
            "enterSleepCount": obj.get("enterSleepCount"),
            "reportTime": obj.get("reportTime"),
            "uptimeRuntimeDuration": obj.get("uptimeRuntimeDuration")
        })
        return _obj



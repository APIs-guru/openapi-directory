# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_chrome_management_v1_chrome_app_permission import GoogleChromeManagementV1ChromeAppPermission
from openapi_client.models.google_chrome_management_v1_chrome_app_site_access import GoogleChromeManagementV1ChromeAppSiteAccess
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromeManagementV1ChromeAppInfo(BaseModel):
    """
    Chrome Web Store app information.
    """ # noqa: E501
    google_owned: Optional[StrictBool] = Field(default=None, description="Output only. Whether the app or extension is built and maintained by Google. Version-specific field that will only be set when the requested app version is found.", alias="googleOwned")
    is_cws_hosted: Optional[StrictBool] = Field(default=None, description="Output only. Whether the app or extension is in a published state in the Chrome Web Store.", alias="isCwsHosted")
    is_extension_policy_supported: Optional[StrictBool] = Field(default=None, description="Output only. Whether an app supports policy for extensions.", alias="isExtensionPolicySupported")
    is_kiosk_only: Optional[StrictBool] = Field(default=None, description="Output only. Whether the app is only for Kiosk mode on ChromeOS devices", alias="isKioskOnly")
    is_theme: Optional[StrictBool] = Field(default=None, description="Output only. Whether the app or extension is a theme.", alias="isTheme")
    kiosk_enabled: Optional[StrictBool] = Field(default=None, description="Output only. Whether this app is enabled for Kiosk mode on ChromeOS devices", alias="kioskEnabled")
    min_user_count: Optional[StrictInt] = Field(default=None, description="Output only. The minimum number of users using this app.", alias="minUserCount")
    permissions: Optional[List[GoogleChromeManagementV1ChromeAppPermission]] = Field(default=None, description="Output only. Every custom permission requested by the app. Version-specific field that will only be set when the requested app version is found.")
    site_access: Optional[List[GoogleChromeManagementV1ChromeAppSiteAccess]] = Field(default=None, description="Output only. Every permission giving access to domains or broad host patterns. ( e.g. www.google.com). This includes the matches from content scripts as well as hosts in the permissions node of the manifest. Version-specific field that will only be set when the requested app version is found.", alias="siteAccess")
    support_enabled: Optional[StrictBool] = Field(default=None, description="Output only. The app developer has enabled support for their app. Version-specific field that will only be set when the requested app version is found.", alias="supportEnabled")
    type: Optional[StrictStr] = Field(default=None, description="Output only. Types of an item in the Chrome Web Store")
    __properties: ClassVar[List[str]] = ["googleOwned", "isCwsHosted", "isExtensionPolicySupported", "isKioskOnly", "isTheme", "kioskEnabled", "minUserCount", "permissions", "siteAccess", "supportEnabled", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ITEM_TYPE_UNSPECIFIED', 'EXTENSION', 'OTHERS']):
            raise ValueError("must be one of enum values ('ITEM_TYPE_UNSPECIFIED', 'EXTENSION', 'OTHERS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1ChromeAppInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "google_owned",
            "is_cws_hosted",
            "is_extension_policy_supported",
            "is_kiosk_only",
            "is_theme",
            "kiosk_enabled",
            "min_user_count",
            "permissions",
            "site_access",
            "support_enabled",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item_permissions in self.permissions:
                if _item_permissions:
                    _items.append(_item_permissions.to_dict())
            _dict['permissions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in site_access (list)
        _items = []
        if self.site_access:
            for _item_site_access in self.site_access:
                if _item_site_access:
                    _items.append(_item_site_access.to_dict())
            _dict['siteAccess'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1ChromeAppInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "googleOwned": obj.get("googleOwned"),
            "isCwsHosted": obj.get("isCwsHosted"),
            "isExtensionPolicySupported": obj.get("isExtensionPolicySupported"),
            "isKioskOnly": obj.get("isKioskOnly"),
            "isTheme": obj.get("isTheme"),
            "kioskEnabled": obj.get("kioskEnabled"),
            "minUserCount": obj.get("minUserCount"),
            "permissions": [GoogleChromeManagementV1ChromeAppPermission.from_dict(_item) for _item in obj["permissions"]] if obj.get("permissions") is not None else None,
            "siteAccess": [GoogleChromeManagementV1ChromeAppSiteAccess.from_dict(_item) for _item in obj["siteAccess"]] if obj.get("siteAccess") is not None else None,
            "supportEnabled": obj.get("supportEnabled"),
            "type": obj.get("type")
        })
        return _obj



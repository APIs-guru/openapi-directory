# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromeManagementV1TotalMemoryEncryptionInfo(BaseModel):
    """
    Memory encryption information of a device. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceMemoryInfo](https://chromeenterprise.google/policies/#ReportDeviceMemoryInfo) * Data Collection Frequency: At device startup * Default Data Reporting Frequency: At device startup - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: N/A
    """ # noqa: E501
    encryption_algorithm: Optional[StrictStr] = Field(default=None, description="Memory encryption algorithm.", alias="encryptionAlgorithm")
    encryption_state: Optional[StrictStr] = Field(default=None, description="The state of memory encryption on the device.", alias="encryptionState")
    key_length: Optional[StrictStr] = Field(default=None, description="The length of the encryption keys.", alias="keyLength")
    max_keys: Optional[StrictStr] = Field(default=None, description="The maximum number of keys that can be used for encryption.", alias="maxKeys")
    __properties: ClassVar[List[str]] = ["encryptionAlgorithm", "encryptionState", "keyLength", "maxKeys"]

    @field_validator('encryption_algorithm')
    def encryption_algorithm_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MEMORY_ENCRYPTION_ALGORITHM_UNSPECIFIED', 'MEMORY_ENCRYPTION_ALGORITHM_UNKNOWN', 'MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_128', 'MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_256']):
            raise ValueError("must be one of enum values ('MEMORY_ENCRYPTION_ALGORITHM_UNSPECIFIED', 'MEMORY_ENCRYPTION_ALGORITHM_UNKNOWN', 'MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_128', 'MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_256')")
        return value

    @field_validator('encryption_state')
    def encryption_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MEMORY_ENCRYPTION_STATE_UNSPECIFIED', 'MEMORY_ENCRYPTION_STATE_UNKNOWN', 'MEMORY_ENCRYPTION_STATE_DISABLED', 'MEMORY_ENCRYPTION_STATE_TME', 'MEMORY_ENCRYPTION_STATE_MKTME']):
            raise ValueError("must be one of enum values ('MEMORY_ENCRYPTION_STATE_UNSPECIFIED', 'MEMORY_ENCRYPTION_STATE_UNKNOWN', 'MEMORY_ENCRYPTION_STATE_DISABLED', 'MEMORY_ENCRYPTION_STATE_TME', 'MEMORY_ENCRYPTION_STATE_MKTME')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1TotalMemoryEncryptionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1TotalMemoryEncryptionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "encryptionAlgorithm": obj.get("encryptionAlgorithm"),
            "encryptionState": obj.get("encryptionState"),
            "keyLength": obj.get("keyLength"),
            "maxKeys": obj.get("maxKeys")
        })
        return _obj



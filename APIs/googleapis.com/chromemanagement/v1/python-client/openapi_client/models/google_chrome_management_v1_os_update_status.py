# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromeManagementV1OsUpdateStatus(BaseModel):
    """
    Contains information regarding the current OS update status. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceOsUpdateStatus](https://chromeenterprise.google/policies/#ReportDeviceOsUpdateStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_OS_REPORT
    """ # noqa: E501
    last_reboot_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp of the last reboot.", alias="lastRebootTime")
    last_update_check_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp of the last update check.", alias="lastUpdateCheckTime")
    last_update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp of the last successful update.", alias="lastUpdateTime")
    new_platform_version: Optional[StrictStr] = Field(default=None, description="Output only. New platform version of the os image being downloaded and applied. It is only set when update status is OS_IMAGE_DOWNLOAD_IN_PROGRESS or OS_UPDATE_NEED_REBOOT. Note this could be a dummy \"0.0.0.0\" for OS_UPDATE_NEED_REBOOT status for some edge cases, e.g. update engine is restarted without a reboot.", alias="newPlatformVersion")
    new_requested_platform_version: Optional[StrictStr] = Field(default=None, description="Output only. New requested platform version from the pending updated kiosk app.", alias="newRequestedPlatformVersion")
    update_state: Optional[StrictStr] = Field(default=None, description="Output only. Current state of the os update.", alias="updateState")
    __properties: ClassVar[List[str]] = ["lastRebootTime", "lastUpdateCheckTime", "lastUpdateTime", "newPlatformVersion", "newRequestedPlatformVersion", "updateState"]

    @field_validator('update_state')
    def update_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UPDATE_STATE_UNSPECIFIED', 'OS_IMAGE_DOWNLOAD_NOT_STARTED', 'OS_IMAGE_DOWNLOAD_IN_PROGRESS', 'OS_UPDATE_NEED_REBOOT']):
            raise ValueError("must be one of enum values ('UPDATE_STATE_UNSPECIFIED', 'OS_IMAGE_DOWNLOAD_NOT_STARTED', 'OS_IMAGE_DOWNLOAD_IN_PROGRESS', 'OS_UPDATE_NEED_REBOOT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1OsUpdateStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_reboot_time",
            "last_update_check_time",
            "last_update_time",
            "new_platform_version",
            "new_requested_platform_version",
            "update_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1OsUpdateStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lastRebootTime": obj.get("lastRebootTime"),
            "lastUpdateCheckTime": obj.get("lastUpdateCheckTime"),
            "lastUpdateTime": obj.get("lastUpdateTime"),
            "newPlatformVersion": obj.get("newPlatformVersion"),
            "newRequestedPlatformVersion": obj.get("newRequestedPlatformVersion"),
            "updateState": obj.get("updateState")
        })
        return _obj



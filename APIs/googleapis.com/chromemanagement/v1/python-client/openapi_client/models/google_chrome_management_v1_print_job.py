# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromeManagementV1PrintJob(BaseModel):
    """
    Represents a request to print a document that has been submitted to a printer.
    """ # noqa: E501
    color_mode: Optional[StrictStr] = Field(default=None, description="Color mode.", alias="colorMode")
    complete_time: Optional[StrictStr] = Field(default=None, description="Print job completion timestamp.", alias="completeTime")
    copy_count: Optional[StrictInt] = Field(default=None, description="Number of copies.", alias="copyCount")
    create_time: Optional[StrictStr] = Field(default=None, description="Print job creation timestamp.", alias="createTime")
    document_page_count: Optional[StrictInt] = Field(default=None, description="Number of pages in the document.", alias="documentPageCount")
    duplex_mode: Optional[StrictStr] = Field(default=None, description="Duplex mode.", alias="duplexMode")
    id: Optional[StrictStr] = Field(default=None, description="Unique ID of the print job.")
    printer: Optional[StrictStr] = Field(default=None, description="Name of the printer used for printing.")
    printer_id: Optional[StrictStr] = Field(default=None, description="API ID of the printer used for printing.", alias="printerId")
    state: Optional[StrictStr] = Field(default=None, description="The final state of the job.")
    title: Optional[StrictStr] = Field(default=None, description="The title of the document.")
    user_email: Optional[StrictStr] = Field(default=None, description="The primary e-mail address of the user who submitted the print job.", alias="userEmail")
    user_id: Optional[StrictStr] = Field(default=None, description="The unique Directory API ID of the user who submitted the print job.", alias="userId")
    __properties: ClassVar[List[str]] = ["colorMode", "completeTime", "copyCount", "createTime", "documentPageCount", "duplexMode", "id", "printer", "printerId", "state", "title", "userEmail", "userId"]

    @field_validator('color_mode')
    def color_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COLOR_MODE_UNSPECIFIED', 'BLACK_AND_WHITE', 'COLOR']):
            raise ValueError("must be one of enum values ('COLOR_MODE_UNSPECIFIED', 'BLACK_AND_WHITE', 'COLOR')")
        return value

    @field_validator('duplex_mode')
    def duplex_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DUPLEX_MODE_UNSPECIFIED', 'ONE_SIDED', 'TWO_SIDED_LONG_EDGE', 'TWO_SIDED_SHORT_EDGE']):
            raise ValueError("must be one of enum values ('DUPLEX_MODE_UNSPECIFIED', 'ONE_SIDED', 'TWO_SIDED_LONG_EDGE', 'TWO_SIDED_SHORT_EDGE')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PRINTED', 'CANCELLED', 'FAILED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PRINTED', 'CANCELLED', 'FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1PrintJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromeManagementV1PrintJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "colorMode": obj.get("colorMode"),
            "completeTime": obj.get("completeTime"),
            "copyCount": obj.get("copyCount"),
            "createTime": obj.get("createTime"),
            "documentPageCount": obj.get("documentPageCount"),
            "duplexMode": obj.get("duplexMode"),
            "id": obj.get("id"),
            "printer": obj.get("printer"),
            "printerId": obj.get("printerId"),
            "state": obj.get("state"),
            "title": obj.get("title"),
            "userEmail": obj.get("userEmail"),
            "userId": obj.get("userId")
        })
        return _obj



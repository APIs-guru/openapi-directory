# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_chrome_management_v1_graphics_info import GoogleChromeManagementV1GraphicsInfo

class TestGoogleChromeManagementV1GraphicsInfo(unittest.TestCase):
    """GoogleChromeManagementV1GraphicsInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleChromeManagementV1GraphicsInfo:
        """Test GoogleChromeManagementV1GraphicsInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleChromeManagementV1GraphicsInfo`
        """
        model = GoogleChromeManagementV1GraphicsInfo()
        if include_optional:
            return GoogleChromeManagementV1GraphicsInfo(
                adapter_info = openapi_client.models.google_chrome_management_v1_graphics_adapter_info.GoogleChromeManagementV1GraphicsAdapterInfo(
                    adapter = '', 
                    device_id = '', 
                    driver_version = '', ),
                display_devices = [
                    openapi_client.models.google_chrome_management_v1_display_device.GoogleChromeManagementV1DisplayDevice(
                        display_height_mm = 56, 
                        display_name = '', 
                        display_width_mm = 56, 
                        internal = True, 
                        manufacture_year = 56, 
                        manufacturer_id = '', 
                        model_id = 56, )
                    ],
                eprivacy_supported = True,
                touch_screen_info = openapi_client.models.google_chrome_management_v1_touch_screen_info.GoogleChromeManagementV1TouchScreenInfo(
                    devices = [
                        openapi_client.models.google_chrome_management_v1_touch_screen_device.GoogleChromeManagementV1TouchScreenDevice(
                            display_name = '', 
                            stylus_capable = True, 
                            touch_point_count = 56, )
                        ], 
                    touchpad_library = '', )
            )
        else:
            return GoogleChromeManagementV1GraphicsInfo(
        )
        """

    def testGoogleChromeManagementV1GraphicsInfo(self):
        """Test GoogleChromeManagementV1GraphicsInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_chrome_management_v1_telemetry_user_device import GoogleChromeManagementV1TelemetryUserDevice

class TestGoogleChromeManagementV1TelemetryUserDevice(unittest.TestCase):
    """GoogleChromeManagementV1TelemetryUserDevice unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleChromeManagementV1TelemetryUserDevice:
        """Test GoogleChromeManagementV1TelemetryUserDevice
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleChromeManagementV1TelemetryUserDevice`
        """
        model = GoogleChromeManagementV1TelemetryUserDevice()
        if include_optional:
            return GoogleChromeManagementV1TelemetryUserDevice(
                audio_status_report = [
                    openapi_client.models.google_chrome_management_v1_audio_status_report.GoogleChromeManagementV1AudioStatusReport(
                        input_device = '', 
                        input_gain = 56, 
                        input_mute = True, 
                        output_device = '', 
                        output_mute = True, 
                        output_volume = 56, 
                        report_time = '', )
                    ],
                device_activity_report = [
                    openapi_client.models.google_chrome_management_v1_device_activity_report.GoogleChromeManagementV1DeviceActivityReport(
                        device_activity_state = 'DEVICE_ACTIVITY_STATE_UNSPECIFIED', 
                        report_time = '', )
                    ],
                device_id = '',
                network_bandwidth_report = [
                    openapi_client.models.google_chrome_management_v1_network_bandwidth_report.GoogleChromeManagementV1NetworkBandwidthReport(
                        download_speed_kbps = '', 
                        report_time = '', )
                    ],
                peripherals_report = [
                    openapi_client.models.google_chrome_management_v1_peripherals_report.GoogleChromeManagementV1PeripheralsReport(
                        report_time = '', 
                        usb_peripheral_report = [
                            openapi_client.models.google_chrome_management_v1_usb_peripheral_report.GoogleChromeManagementV1UsbPeripheralReport(
                                categories = [
                                    ''
                                    ], 
                                class_id = 56, 
                                firmware_version = '', 
                                name = '', 
                                pid = 56, 
                                subclass_id = 56, 
                                vendor = '', 
                                vid = 56, )
                            ], )
                    ]
            )
        else:
            return GoogleChromeManagementV1TelemetryUserDevice(
        )
        """

    def testGoogleChromeManagementV1TelemetryUserDevice(self):
        """Test GoogleChromeManagementV1TelemetryUserDevice"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_chrome_management_v1_telemetry_event import GoogleChromeManagementV1TelemetryEvent

class TestGoogleChromeManagementV1TelemetryEvent(unittest.TestCase):
    """GoogleChromeManagementV1TelemetryEvent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleChromeManagementV1TelemetryEvent:
        """Test GoogleChromeManagementV1TelemetryEvent
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleChromeManagementV1TelemetryEvent`
        """
        model = GoogleChromeManagementV1TelemetryEvent()
        if include_optional:
            return GoogleChromeManagementV1TelemetryEvent(
                audio_severe_underrun_event = openapi_client.models.google_chrome_management_v1_telemetry_audio_severe_underrun_event.GoogleChromeManagementV1TelemetryAudioSevereUnderrunEvent(),
                device = openapi_client.models.google_chrome_management_v1_telemetry_device_info.GoogleChromeManagementV1TelemetryDeviceInfo(
                    device_id = '', 
                    org_unit_id = '', ),
                event_type = 'EVENT_TYPE_UNSPECIFIED',
                https_latency_change_event = openapi_client.models.google_chrome_management_v1_telemetry_https_latency_change_event.GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent(
                    https_latency_routine_data = openapi_client.models.google_chrome_management_v1_https_latency_routine_data.GoogleChromeManagementV1HttpsLatencyRoutineData(
                        latency = '', 
                        problem = 'HTTPS_LATENCY_PROBLEM_UNSPECIFIED', ), 
                    https_latency_state = 'HTTPS_LATENCY_STATE_UNSPECIFIED', ),
                name = '',
                network_state_change_event = openapi_client.models.google_chrome_management_v1_telemetry_network_connection_state_change_event.GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent(
                    connection_state = 'NETWORK_CONNECTION_STATE_UNSPECIFIED', 
                    guid = '', ),
                report_time = '',
                usb_peripherals_event = openapi_client.models.google_chrome_management_v1_telemetry_usb_peripherals_event.GoogleChromeManagementV1TelemetryUsbPeripheralsEvent(
                    usb_peripheral_report = [
                        openapi_client.models.google_chrome_management_v1_usb_peripheral_report.GoogleChromeManagementV1UsbPeripheralReport(
                            categories = [
                                ''
                                ], 
                            class_id = 56, 
                            firmware_version = '', 
                            name = '', 
                            pid = 56, 
                            subclass_id = 56, 
                            vendor = '', 
                            vid = 56, )
                        ], ),
                user = openapi_client.models.google_chrome_management_v1_telemetry_user_info.GoogleChromeManagementV1TelemetryUserInfo(
                    email = '', 
                    org_unit_id = '', ),
                vpn_connection_state_change_event = openapi_client.models.google_chrome_management_v1_telemetry_network_connection_state_change_event.GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent(
                    connection_state = 'NETWORK_CONNECTION_STATE_UNSPECIFIED', 
                    guid = '', ),
                wifi_signal_strength_event = openapi_client.models.google_chrome_management_v1_telemetry_network_signal_strength_event.GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent(
                    guid = '', 
                    signal_strength_dbm = 56, )
            )
        else:
            return GoogleChromeManagementV1TelemetryEvent(
        )
        """

    def testGoogleChromeManagementV1TelemetryEvent(self):
        """Test GoogleChromeManagementV1TelemetryEvent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

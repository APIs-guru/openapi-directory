# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_chrome_management_v1_installed_app import GoogleChromeManagementV1InstalledApp

class TestGoogleChromeManagementV1InstalledApp(unittest.TestCase):
    """GoogleChromeManagementV1InstalledApp unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleChromeManagementV1InstalledApp:
        """Test GoogleChromeManagementV1InstalledApp
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleChromeManagementV1InstalledApp`
        """
        model = GoogleChromeManagementV1InstalledApp()
        if include_optional:
            return GoogleChromeManagementV1InstalledApp(
                app_id = '',
                app_install_type = 'APP_INSTALL_TYPE_UNSPECIFIED',
                app_source = 'APP_SOURCE_UNSPECIFIED',
                app_type = 'APP_TYPE_UNSPECIFIED',
                browser_device_count = '',
                description = '',
                disabled = True,
                display_name = '',
                homepage_uri = '',
                os_user_count = '',
                permissions = [
                    ''
                    ]
            )
        else:
            return GoogleChromeManagementV1InstalledApp(
        )
        """

    def testGoogleChromeManagementV1InstalledApp(self):
        """Test GoogleChromeManagementV1InstalledApp"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

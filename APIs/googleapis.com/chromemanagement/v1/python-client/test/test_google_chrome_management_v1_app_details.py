# coding: utf-8

"""
    Chrome Management API

    The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_chrome_management_v1_app_details import GoogleChromeManagementV1AppDetails

class TestGoogleChromeManagementV1AppDetails(unittest.TestCase):
    """GoogleChromeManagementV1AppDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleChromeManagementV1AppDetails:
        """Test GoogleChromeManagementV1AppDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleChromeManagementV1AppDetails`
        """
        model = GoogleChromeManagementV1AppDetails()
        if include_optional:
            return GoogleChromeManagementV1AppDetails(
                android_app_info = openapi_client.models.google_chrome_management_v1_android_app_info.GoogleChromeManagementV1AndroidAppInfo(
                    permissions = [
                        openapi_client.models.google_chrome_management_v1_android_app_permission.GoogleChromeManagementV1AndroidAppPermission(
                            type = '', )
                        ], ),
                app_id = '',
                chrome_app_info = openapi_client.models.google_chrome_management_v1_chrome_app_info.GoogleChromeManagementV1ChromeAppInfo(
                    google_owned = True, 
                    is_cws_hosted = True, 
                    is_extension_policy_supported = True, 
                    is_kiosk_only = True, 
                    is_theme = True, 
                    kiosk_enabled = True, 
                    min_user_count = 56, 
                    permissions = [
                        openapi_client.models.google_chrome_management_v1_chrome_app_permission.GoogleChromeManagementV1ChromeAppPermission(
                            access_user_data = True, 
                            documentation_uri = '', 
                            type = '', )
                        ], 
                    site_access = [
                        openapi_client.models.google_chrome_management_v1_chrome_app_site_access.GoogleChromeManagementV1ChromeAppSiteAccess(
                            host_match = '', )
                        ], 
                    support_enabled = True, 
                    type = 'ITEM_TYPE_UNSPECIFIED', ),
                description = '',
                detail_uri = '',
                display_name = '',
                first_publish_time = '',
                homepage_uri = '',
                icon_uri = '',
                is_paid_app = True,
                latest_publish_time = '',
                name = '',
                privacy_policy_uri = '',
                publisher = '',
                review_number = '',
                review_rating = 1.337,
                revision_id = '',
                service_error = openapi_client.models.google_rpc_status.GoogleRpcStatus(
                    code = 56, 
                    details = [
                        {
                            'key' : null
                            }
                        ], 
                    message = '', ),
                type = 'APP_ITEM_TYPE_UNSPECIFIED'
            )
        else:
            return GoogleChromeManagementV1AppDetails(
        )
        """

    def testGoogleChromeManagementV1AppDetails(self):
        """Test GoogleChromeManagementV1AppDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

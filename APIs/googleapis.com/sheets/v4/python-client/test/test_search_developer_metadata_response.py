# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.search_developer_metadata_response import SearchDeveloperMetadataResponse

class TestSearchDeveloperMetadataResponse(unittest.TestCase):
    """SearchDeveloperMetadataResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchDeveloperMetadataResponse:
        """Test SearchDeveloperMetadataResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchDeveloperMetadataResponse`
        """
        model = SearchDeveloperMetadataResponse()
        if include_optional:
            return SearchDeveloperMetadataResponse(
                matched_developer_metadata = [
                    openapi_client.models.matched_developer_metadata.MatchedDeveloperMetadata(
                        data_filters = [
                            openapi_client.models.data_filter.DataFilter(
                                a1_range = '', 
                                developer_metadata_lookup = openapi_client.models.developer_metadata_lookup.DeveloperMetadataLookup(
                                    location_matching_strategy = 'DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED', 
                                    location_type = 'DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED', 
                                    metadata_id = 56, 
                                    metadata_key = '', 
                                    metadata_location = openapi_client.models.developer_metadata_location.DeveloperMetadataLocation(
                                        dimension_range = openapi_client.models.dimension_range.DimensionRange(
                                            dimension = 'DIMENSION_UNSPECIFIED', 
                                            end_index = 56, 
                                            sheet_id = 56, 
                                            start_index = 56, ), 
                                        location_type = 'DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED', 
                                        sheet_id = 56, 
                                        spreadsheet = True, ), 
                                    metadata_value = '', 
                                    visibility = 'DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED', ), 
                                grid_range = openapi_client.models.grid_range.GridRange(
                                    end_column_index = 56, 
                                    end_row_index = 56, 
                                    sheet_id = 56, 
                                    start_column_index = 56, 
                                    start_row_index = 56, ), )
                            ], 
                        developer_metadata = openapi_client.models.developer_metadata.DeveloperMetadata(
                            location = openapi_client.models.developer_metadata_location.DeveloperMetadataLocation(
                                location_type = 'DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED', 
                                sheet_id = 56, 
                                spreadsheet = True, ), 
                            metadata_id = 56, 
                            metadata_key = '', 
                            metadata_value = '', 
                            visibility = 'DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED', ), )
                    ]
            )
        else:
            return SearchDeveloperMetadataResponse(
        )
        """

    def testSearchDeveloperMetadataResponse(self):
        """Test SearchDeveloperMetadataResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

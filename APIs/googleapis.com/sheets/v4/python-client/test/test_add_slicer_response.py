# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.add_slicer_response import AddSlicerResponse

class TestAddSlicerResponse(unittest.TestCase):
    """AddSlicerResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AddSlicerResponse:
        """Test AddSlicerResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AddSlicerResponse`
        """
        model = AddSlicerResponse()
        if include_optional:
            return AddSlicerResponse(
                slicer = openapi_client.models.slicer.Slicer(
                    position = openapi_client.models.embedded_object_position.EmbeddedObjectPosition(
                        new_sheet = True, 
                        overlay_position = openapi_client.models.overlay_position.OverlayPosition(
                            anchor_cell = openapi_client.models.grid_coordinate.GridCoordinate(
                                column_index = 56, 
                                row_index = 56, 
                                sheet_id = 56, ), 
                            height_pixels = 56, 
                            offset_x_pixels = 56, 
                            offset_y_pixels = 56, 
                            width_pixels = 56, ), 
                        sheet_id = 56, ), 
                    slicer_id = 56, 
                    spec = openapi_client.models.slicer_spec.SlicerSpec(
                        apply_to_pivot_tables = True, 
                        background_color = openapi_client.models.color.Color(
                            alpha = 1.337, 
                            blue = 1.337, 
                            green = 1.337, 
                            red = 1.337, ), 
                        background_color_style = openapi_client.models.color_style.ColorStyle(
                            rgb_color = openapi_client.models.color.Color(
                                alpha = 1.337, 
                                blue = 1.337, 
                                green = 1.337, 
                                red = 1.337, ), 
                            theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                        column_index = 56, 
                        data_range = openapi_client.models.grid_range.GridRange(
                            end_column_index = 56, 
                            end_row_index = 56, 
                            sheet_id = 56, 
                            start_column_index = 56, 
                            start_row_index = 56, ), 
                        filter_criteria = openapi_client.models.filter_criteria.FilterCriteria(
                            condition = openapi_client.models.boolean_condition.BooleanCondition(
                                type = 'CONDITION_TYPE_UNSPECIFIED', 
                                values = [
                                    openapi_client.models.condition_value.ConditionValue(
                                        relative_date = 'RELATIVE_DATE_UNSPECIFIED', 
                                        user_entered_value = '', )
                                    ], ), 
                            hidden_values = [
                                ''
                                ], 
                            visible_background_color = , 
                            visible_background_color_style = openapi_client.models.color_style.ColorStyle(
                                theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                            visible_foreground_color = , 
                            visible_foreground_color_style = , ), 
                        horizontal_alignment = 'HORIZONTAL_ALIGN_UNSPECIFIED', 
                        text_format = openapi_client.models.text_format.TextFormat(
                            bold = True, 
                            font_family = '', 
                            font_size = 56, 
                            foreground_color = , 
                            foreground_color_style = , 
                            italic = True, 
                            link = openapi_client.models.link.Link(
                                uri = '', ), 
                            strikethrough = True, 
                            underline = True, ), 
                        title = '', ), )
            )
        else:
            return AddSlicerResponse(
        )
        """

    def testAddSlicerResponse(self):
        """Test AddSlicerResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.chart_spec import ChartSpec

class TestChartSpec(unittest.TestCase):
    """ChartSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChartSpec:
        """Test ChartSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChartSpec`
        """
        model = ChartSpec()
        if include_optional:
            return ChartSpec(
                alt_text = '',
                background_color = openapi_client.models.color.Color(
                    alpha = 1.337, 
                    blue = 1.337, 
                    green = 1.337, 
                    red = 1.337, ),
                background_color_style = openapi_client.models.color_style.ColorStyle(
                    rgb_color = openapi_client.models.color.Color(
                        alpha = 1.337, 
                        blue = 1.337, 
                        green = 1.337, 
                        red = 1.337, ), 
                    theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ),
                basic_chart = openapi_client.models.basic_chart_spec.BasicChartSpec(
                    axis = [
                        openapi_client.models.basic_chart_axis.BasicChartAxis(
                            format = openapi_client.models.text_format.TextFormat(
                                bold = True, 
                                font_family = '', 
                                font_size = 56, 
                                foreground_color = openapi_client.models.color.Color(
                                    alpha = 1.337, 
                                    blue = 1.337, 
                                    green = 1.337, 
                                    red = 1.337, ), 
                                foreground_color_style = openapi_client.models.color_style.ColorStyle(
                                    rgb_color = openapi_client.models.color.Color(
                                        alpha = 1.337, 
                                        blue = 1.337, 
                                        green = 1.337, 
                                        red = 1.337, ), 
                                    theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                                italic = True, 
                                link = openapi_client.models.link.Link(
                                    uri = '', ), 
                                strikethrough = True, 
                                underline = True, ), 
                            position = 'BASIC_CHART_AXIS_POSITION_UNSPECIFIED', 
                            title = '', 
                            title_text_position = openapi_client.models.text_position.TextPosition(
                                horizontal_alignment = 'HORIZONTAL_ALIGN_UNSPECIFIED', ), 
                            view_window_options = openapi_client.models.chart_axis_view_window_options.ChartAxisViewWindowOptions(
                                view_window_max = 1.337, 
                                view_window_min = 1.337, 
                                view_window_mode = 'DEFAULT_VIEW_WINDOW_MODE', ), )
                        ], 
                    chart_type = 'BASIC_CHART_TYPE_UNSPECIFIED', 
                    compare_mode = 'BASIC_CHART_COMPARE_MODE_UNSPECIFIED', 
                    domains = [
                        openapi_client.models.basic_chart_domain.BasicChartDomain(
                            domain = openapi_client.models.chart_data.ChartData(
                                aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', 
                                column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                                    name = '', ), 
                                group_rule = openapi_client.models.chart_group_rule.ChartGroupRule(
                                    date_time_rule = openapi_client.models.chart_date_time_rule.ChartDateTimeRule(
                                        type = 'CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED', ), 
                                    histogram_rule = openapi_client.models.chart_histogram_rule.ChartHistogramRule(
                                        interval_size = 1.337, 
                                        max_value = 1.337, 
                                        min_value = 1.337, ), ), 
                                source_range = openapi_client.models.chart_source_range.ChartSourceRange(
                                    sources = [
                                        openapi_client.models.grid_range.GridRange(
                                            end_column_index = 56, 
                                            end_row_index = 56, 
                                            sheet_id = 56, 
                                            start_column_index = 56, 
                                            start_row_index = 56, )
                                        ], ), ), 
                            reversed = True, )
                        ], 
                    header_count = 56, 
                    interpolate_nulls = True, 
                    legend_position = 'BASIC_CHART_LEGEND_POSITION_UNSPECIFIED', 
                    line_smoothing = True, 
                    series = [
                        openapi_client.models.basic_chart_series.BasicChartSeries(
                            color = , 
                            color_style = openapi_client.models.color_style.ColorStyle(
                                theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                            data_label = openapi_client.models.data_label.DataLabel(
                                custom_label_data = openapi_client.models.chart_data.ChartData(
                                    aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', ), 
                                placement = 'DATA_LABEL_PLACEMENT_UNSPECIFIED', 
                                text_format = openapi_client.models.text_format.TextFormat(
                                    bold = True, 
                                    font_family = '', 
                                    font_size = 56, 
                                    italic = True, 
                                    strikethrough = True, 
                                    underline = True, ), 
                                type = 'DATA_LABEL_TYPE_UNSPECIFIED', ), 
                            line_style = openapi_client.models.line_style.LineStyle(
                                type = 'LINE_DASH_TYPE_UNSPECIFIED', 
                                width = 56, ), 
                            point_style = openapi_client.models.point_style.PointStyle(
                                shape = 'POINT_SHAPE_UNSPECIFIED', 
                                size = 1.337, ), 
                            style_overrides = [
                                openapi_client.models.basic_series_data_point_style_override.BasicSeriesDataPointStyleOverride(
                                    index = 56, )
                                ], 
                            target_axis = 'BASIC_CHART_AXIS_POSITION_UNSPECIFIED', 
                            type = 'BASIC_CHART_TYPE_UNSPECIFIED', )
                        ], 
                    stacked_type = 'BASIC_CHART_STACKED_TYPE_UNSPECIFIED', 
                    three_dimensional = True, 
                    total_data_label = openapi_client.models.data_label.DataLabel(
                        placement = 'DATA_LABEL_PLACEMENT_UNSPECIFIED', 
                        type = 'DATA_LABEL_TYPE_UNSPECIFIED', ), ),
                bubble_chart = openapi_client.models.bubble_chart_spec.BubbleChartSpec(
                    bubble_border_color = openapi_client.models.color.Color(
                        alpha = 1.337, 
                        blue = 1.337, 
                        green = 1.337, 
                        red = 1.337, ), 
                    bubble_border_color_style = openapi_client.models.color_style.ColorStyle(
                        rgb_color = openapi_client.models.color.Color(
                            alpha = 1.337, 
                            blue = 1.337, 
                            green = 1.337, 
                            red = 1.337, ), 
                        theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                    bubble_labels = openapi_client.models.chart_data.ChartData(
                        aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', 
                        column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                            name = '', ), 
                        group_rule = openapi_client.models.chart_group_rule.ChartGroupRule(
                            date_time_rule = openapi_client.models.chart_date_time_rule.ChartDateTimeRule(
                                type = 'CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED', ), 
                            histogram_rule = openapi_client.models.chart_histogram_rule.ChartHistogramRule(
                                interval_size = 1.337, 
                                max_value = 1.337, 
                                min_value = 1.337, ), ), 
                        source_range = openapi_client.models.chart_source_range.ChartSourceRange(
                            sources = [
                                openapi_client.models.grid_range.GridRange(
                                    end_column_index = 56, 
                                    end_row_index = 56, 
                                    sheet_id = 56, 
                                    start_column_index = 56, 
                                    start_row_index = 56, )
                                ], ), ), 
                    bubble_max_radius_size = 56, 
                    bubble_min_radius_size = 56, 
                    bubble_opacity = 1.337, 
                    bubble_sizes = openapi_client.models.chart_data.ChartData(
                        aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', ), 
                    bubble_text_style = openapi_client.models.text_format.TextFormat(
                        bold = True, 
                        font_family = '', 
                        font_size = 56, 
                        foreground_color = , 
                        foreground_color_style = openapi_client.models.color_style.ColorStyle(
                            theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                        italic = True, 
                        link = openapi_client.models.link.Link(
                            uri = '', ), 
                        strikethrough = True, 
                        underline = True, ), 
                    domain = , 
                    group_ids = , 
                    legend_position = 'BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED', 
                    series = , ),
                candlestick_chart = openapi_client.models.candlestick_chart_spec.CandlestickChartSpec(
                    data = [
                        openapi_client.models.candlestick_data.CandlestickData(
                            close_series = openapi_client.models.candlestick_series.CandlestickSeries(), 
                            high_series = openapi_client.models.candlestick_series.CandlestickSeries(), 
                            low_series = , 
                            open_series = , )
                        ], 
                    domain = openapi_client.models.candlestick_domain.CandlestickDomain(
                        reversed = True, ), ),
                data_source_chart_properties = openapi_client.models.data_source_chart_properties.DataSourceChartProperties(
                    data_execution_status = openapi_client.models.data_execution_status.DataExecutionStatus(
                        error_code = 'DATA_EXECUTION_ERROR_CODE_UNSPECIFIED', 
                        error_message = '', 
                        last_refresh_time = '', 
                        state = 'DATA_EXECUTION_STATE_UNSPECIFIED', ), 
                    data_source_id = '', ),
                filter_specs = [
                    openapi_client.models.filter_spec.FilterSpec(
                        column_index = 56, 
                        data_source_column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                            name = '', ), 
                        filter_criteria = openapi_client.models.filter_criteria.FilterCriteria(
                            condition = openapi_client.models.boolean_condition.BooleanCondition(
                                type = 'CONDITION_TYPE_UNSPECIFIED', 
                                values = [
                                    openapi_client.models.condition_value.ConditionValue(
                                        relative_date = 'RELATIVE_DATE_UNSPECIFIED', 
                                        user_entered_value = '', )
                                    ], ), 
                            hidden_values = [
                                ''
                                ], 
                            visible_background_color = openapi_client.models.color.Color(
                                alpha = 1.337, 
                                blue = 1.337, 
                                green = 1.337, 
                                red = 1.337, ), 
                            visible_background_color_style = openapi_client.models.color_style.ColorStyle(
                                rgb_color = openapi_client.models.color.Color(
                                    alpha = 1.337, 
                                    blue = 1.337, 
                                    green = 1.337, 
                                    red = 1.337, ), 
                                theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                            visible_foreground_color = , 
                            visible_foreground_color_style = openapi_client.models.color_style.ColorStyle(
                                theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), ), )
                    ],
                font_name = '',
                hidden_dimension_strategy = 'CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED',
                histogram_chart = openapi_client.models.histogram_chart_spec.HistogramChartSpec(
                    bucket_size = 1.337, 
                    legend_position = 'HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED', 
                    outlier_percentile = 1.337, 
                    series = [
                        openapi_client.models.histogram_series.HistogramSeries(
                            bar_color = openapi_client.models.color.Color(
                                alpha = 1.337, 
                                blue = 1.337, 
                                green = 1.337, 
                                red = 1.337, ), 
                            bar_color_style = openapi_client.models.color_style.ColorStyle(
                                rgb_color = openapi_client.models.color.Color(
                                    alpha = 1.337, 
                                    blue = 1.337, 
                                    green = 1.337, 
                                    red = 1.337, ), 
                                theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                            data = openapi_client.models.chart_data.ChartData(
                                aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', 
                                column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                                    name = '', ), 
                                group_rule = openapi_client.models.chart_group_rule.ChartGroupRule(
                                    date_time_rule = openapi_client.models.chart_date_time_rule.ChartDateTimeRule(
                                        type = 'CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED', ), 
                                    histogram_rule = openapi_client.models.chart_histogram_rule.ChartHistogramRule(
                                        interval_size = 1.337, 
                                        max_value = 1.337, 
                                        min_value = 1.337, ), ), 
                                source_range = openapi_client.models.chart_source_range.ChartSourceRange(
                                    sources = [
                                        openapi_client.models.grid_range.GridRange(
                                            end_column_index = 56, 
                                            end_row_index = 56, 
                                            sheet_id = 56, 
                                            start_column_index = 56, 
                                            start_row_index = 56, )
                                        ], ), ), )
                        ], 
                    show_item_dividers = True, ),
                maximized = True,
                org_chart = openapi_client.models.org_chart_spec.OrgChartSpec(
                    labels = openapi_client.models.chart_data.ChartData(
                        aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', 
                        column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                            name = '', ), 
                        group_rule = openapi_client.models.chart_group_rule.ChartGroupRule(
                            date_time_rule = openapi_client.models.chart_date_time_rule.ChartDateTimeRule(
                                type = 'CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED', ), 
                            histogram_rule = openapi_client.models.chart_histogram_rule.ChartHistogramRule(
                                interval_size = 1.337, 
                                max_value = 1.337, 
                                min_value = 1.337, ), ), 
                        source_range = openapi_client.models.chart_source_range.ChartSourceRange(
                            sources = [
                                openapi_client.models.grid_range.GridRange(
                                    end_column_index = 56, 
                                    end_row_index = 56, 
                                    sheet_id = 56, 
                                    start_column_index = 56, 
                                    start_row_index = 56, )
                                ], ), ), 
                    node_color = openapi_client.models.color.Color(
                        alpha = 1.337, 
                        blue = 1.337, 
                        green = 1.337, 
                        red = 1.337, ), 
                    node_color_style = openapi_client.models.color_style.ColorStyle(
                        rgb_color = openapi_client.models.color.Color(
                            alpha = 1.337, 
                            blue = 1.337, 
                            green = 1.337, 
                            red = 1.337, ), 
                        theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                    node_size = 'ORG_CHART_LABEL_SIZE_UNSPECIFIED', 
                    parent_labels = openapi_client.models.chart_data.ChartData(
                        aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', ), 
                    selected_node_color = , 
                    selected_node_color_style = openapi_client.models.color_style.ColorStyle(
                        theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                    tooltips = , ),
                pie_chart = openapi_client.models.pie_chart_spec.PieChartSpec(
                    domain = openapi_client.models.chart_data.ChartData(
                        aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', 
                        column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                            name = '', ), 
                        group_rule = openapi_client.models.chart_group_rule.ChartGroupRule(
                            date_time_rule = openapi_client.models.chart_date_time_rule.ChartDateTimeRule(
                                type = 'CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED', ), 
                            histogram_rule = openapi_client.models.chart_histogram_rule.ChartHistogramRule(
                                interval_size = 1.337, 
                                max_value = 1.337, 
                                min_value = 1.337, ), ), 
                        source_range = openapi_client.models.chart_source_range.ChartSourceRange(
                            sources = [
                                openapi_client.models.grid_range.GridRange(
                                    end_column_index = 56, 
                                    end_row_index = 56, 
                                    sheet_id = 56, 
                                    start_column_index = 56, 
                                    start_row_index = 56, )
                                ], ), ), 
                    legend_position = 'PIE_CHART_LEGEND_POSITION_UNSPECIFIED', 
                    pie_hole = 1.337, 
                    series = openapi_client.models.chart_data.ChartData(
                        aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', ), 
                    three_dimensional = True, ),
                scorecard_chart = openapi_client.models.scorecard_chart_spec.ScorecardChartSpec(
                    aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', 
                    baseline_value_data = openapi_client.models.chart_data.ChartData(
                        aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', 
                        column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                            name = '', ), 
                        group_rule = openapi_client.models.chart_group_rule.ChartGroupRule(
                            date_time_rule = openapi_client.models.chart_date_time_rule.ChartDateTimeRule(
                                type = 'CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED', ), 
                            histogram_rule = openapi_client.models.chart_histogram_rule.ChartHistogramRule(
                                interval_size = 1.337, 
                                max_value = 1.337, 
                                min_value = 1.337, ), ), 
                        source_range = openapi_client.models.chart_source_range.ChartSourceRange(
                            sources = [
                                openapi_client.models.grid_range.GridRange(
                                    end_column_index = 56, 
                                    end_row_index = 56, 
                                    sheet_id = 56, 
                                    start_column_index = 56, 
                                    start_row_index = 56, )
                                ], ), ), 
                    baseline_value_format = openapi_client.models.baseline_value_format.BaselineValueFormat(
                        comparison_type = 'COMPARISON_TYPE_UNDEFINED', 
                        description = '', 
                        negative_color = openapi_client.models.color.Color(
                            alpha = 1.337, 
                            blue = 1.337, 
                            green = 1.337, 
                            red = 1.337, ), 
                        negative_color_style = openapi_client.models.color_style.ColorStyle(
                            rgb_color = openapi_client.models.color.Color(
                                alpha = 1.337, 
                                blue = 1.337, 
                                green = 1.337, 
                                red = 1.337, ), 
                            theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                        position = openapi_client.models.text_position.TextPosition(
                            horizontal_alignment = 'HORIZONTAL_ALIGN_UNSPECIFIED', ), 
                        positive_color = , 
                        positive_color_style = openapi_client.models.color_style.ColorStyle(
                            theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                        text_format = openapi_client.models.text_format.TextFormat(
                            bold = True, 
                            font_family = '', 
                            font_size = 56, 
                            foreground_color = , 
                            foreground_color_style = , 
                            italic = True, 
                            link = openapi_client.models.link.Link(
                                uri = '', ), 
                            strikethrough = True, 
                            underline = True, ), ), 
                    custom_format_options = openapi_client.models.chart_custom_number_format_options.ChartCustomNumberFormatOptions(
                        prefix = '', 
                        suffix = '', ), 
                    key_value_data = openapi_client.models.chart_data.ChartData(
                        aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', ), 
                    key_value_format = openapi_client.models.key_value_format.KeyValueFormat(), 
                    number_format_source = 'CHART_NUMBER_FORMAT_SOURCE_UNDEFINED', 
                    scale_factor = 1.337, ),
                sort_specs = [
                    openapi_client.models.sort_spec.SortSpec(
                        background_color = openapi_client.models.color.Color(
                            alpha = 1.337, 
                            blue = 1.337, 
                            green = 1.337, 
                            red = 1.337, ), 
                        background_color_style = openapi_client.models.color_style.ColorStyle(
                            rgb_color = openapi_client.models.color.Color(
                                alpha = 1.337, 
                                blue = 1.337, 
                                green = 1.337, 
                                red = 1.337, ), 
                            theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                        data_source_column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                            name = '', ), 
                        dimension_index = 56, 
                        foreground_color = , 
                        foreground_color_style = openapi_client.models.color_style.ColorStyle(
                            theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                        sort_order = 'SORT_ORDER_UNSPECIFIED', )
                    ],
                subtitle = '',
                subtitle_text_format = openapi_client.models.text_format.TextFormat(
                    bold = True, 
                    font_family = '', 
                    font_size = 56, 
                    foreground_color = openapi_client.models.color.Color(
                        alpha = 1.337, 
                        blue = 1.337, 
                        green = 1.337, 
                        red = 1.337, ), 
                    foreground_color_style = openapi_client.models.color_style.ColorStyle(
                        rgb_color = openapi_client.models.color.Color(
                            alpha = 1.337, 
                            blue = 1.337, 
                            green = 1.337, 
                            red = 1.337, ), 
                        theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                    italic = True, 
                    link = openapi_client.models.link.Link(
                        uri = '', ), 
                    strikethrough = True, 
                    underline = True, ),
                subtitle_text_position = openapi_client.models.text_position.TextPosition(
                    horizontal_alignment = 'HORIZONTAL_ALIGN_UNSPECIFIED', ),
                title = '',
                title_text_format = openapi_client.models.text_format.TextFormat(
                    bold = True, 
                    font_family = '', 
                    font_size = 56, 
                    foreground_color = openapi_client.models.color.Color(
                        alpha = 1.337, 
                        blue = 1.337, 
                        green = 1.337, 
                        red = 1.337, ), 
                    foreground_color_style = openapi_client.models.color_style.ColorStyle(
                        rgb_color = openapi_client.models.color.Color(
                            alpha = 1.337, 
                            blue = 1.337, 
                            green = 1.337, 
                            red = 1.337, ), 
                        theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                    italic = True, 
                    link = openapi_client.models.link.Link(
                        uri = '', ), 
                    strikethrough = True, 
                    underline = True, ),
                title_text_position = openapi_client.models.text_position.TextPosition(
                    horizontal_alignment = 'HORIZONTAL_ALIGN_UNSPECIFIED', ),
                treemap_chart = openapi_client.models.treemap_chart_spec.TreemapChartSpec(
                    color_data = openapi_client.models.chart_data.ChartData(
                        aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', 
                        column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                            name = '', ), 
                        group_rule = openapi_client.models.chart_group_rule.ChartGroupRule(
                            date_time_rule = openapi_client.models.chart_date_time_rule.ChartDateTimeRule(
                                type = 'CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED', ), 
                            histogram_rule = openapi_client.models.chart_histogram_rule.ChartHistogramRule(
                                interval_size = 1.337, 
                                max_value = 1.337, 
                                min_value = 1.337, ), ), 
                        source_range = openapi_client.models.chart_source_range.ChartSourceRange(
                            sources = [
                                openapi_client.models.grid_range.GridRange(
                                    end_column_index = 56, 
                                    end_row_index = 56, 
                                    sheet_id = 56, 
                                    start_column_index = 56, 
                                    start_row_index = 56, )
                                ], ), ), 
                    color_scale = openapi_client.models.treemap_chart_color_scale.TreemapChartColorScale(
                        max_value_color = openapi_client.models.color.Color(
                            alpha = 1.337, 
                            blue = 1.337, 
                            green = 1.337, 
                            red = 1.337, ), 
                        max_value_color_style = openapi_client.models.color_style.ColorStyle(
                            rgb_color = openapi_client.models.color.Color(
                                alpha = 1.337, 
                                blue = 1.337, 
                                green = 1.337, 
                                red = 1.337, ), 
                            theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                        mid_value_color = , 
                        mid_value_color_style = openapi_client.models.color_style.ColorStyle(
                            theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                        min_value_color = , 
                        min_value_color_style = , 
                        no_data_color = , 
                        no_data_color_style = , ), 
                    header_color = , 
                    header_color_style = , 
                    hide_tooltips = True, 
                    hinted_levels = 56, 
                    labels = openapi_client.models.chart_data.ChartData(
                        aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', ), 
                    levels = 56, 
                    max_value = 1.337, 
                    min_value = 1.337, 
                    parent_labels = , 
                    size_data = , 
                    text_format = openapi_client.models.text_format.TextFormat(
                        bold = True, 
                        font_family = '', 
                        font_size = 56, 
                        foreground_color = , 
                        foreground_color_style = , 
                        italic = True, 
                        link = openapi_client.models.link.Link(
                            uri = '', ), 
                        strikethrough = True, 
                        underline = True, ), ),
                waterfall_chart = openapi_client.models.waterfall_chart_spec.WaterfallChartSpec(
                    connector_line_style = openapi_client.models.line_style.LineStyle(
                        type = 'LINE_DASH_TYPE_UNSPECIFIED', 
                        width = 56, ), 
                    domain = openapi_client.models.waterfall_chart_domain.WaterfallChartDomain(
                        data = openapi_client.models.chart_data.ChartData(
                            aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', 
                            column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                                name = '', ), 
                            group_rule = openapi_client.models.chart_group_rule.ChartGroupRule(
                                date_time_rule = openapi_client.models.chart_date_time_rule.ChartDateTimeRule(
                                    type = 'CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED', ), 
                                histogram_rule = openapi_client.models.chart_histogram_rule.ChartHistogramRule(
                                    interval_size = 1.337, 
                                    max_value = 1.337, 
                                    min_value = 1.337, ), ), 
                            source_range = openapi_client.models.chart_source_range.ChartSourceRange(
                                sources = [
                                    openapi_client.models.grid_range.GridRange(
                                        end_column_index = 56, 
                                        end_row_index = 56, 
                                        sheet_id = 56, 
                                        start_column_index = 56, 
                                        start_row_index = 56, )
                                    ], ), ), 
                        reversed = True, ), 
                    first_value_is_total = True, 
                    hide_connector_lines = True, 
                    series = [
                        openapi_client.models.waterfall_chart_series.WaterfallChartSeries(
                            custom_subtotals = [
                                openapi_client.models.waterfall_chart_custom_subtotal.WaterfallChartCustomSubtotal(
                                    data_is_subtotal = True, 
                                    label = '', 
                                    subtotal_index = 56, )
                                ], 
                            data_label = openapi_client.models.data_label.DataLabel(
                                custom_label_data = openapi_client.models.chart_data.ChartData(
                                    aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', ), 
                                placement = 'DATA_LABEL_PLACEMENT_UNSPECIFIED', 
                                text_format = openapi_client.models.text_format.TextFormat(
                                    bold = True, 
                                    font_family = '', 
                                    font_size = 56, 
                                    foreground_color = openapi_client.models.color.Color(
                                        alpha = 1.337, 
                                        blue = 1.337, 
                                        green = 1.337, 
                                        red = 1.337, ), 
                                    foreground_color_style = openapi_client.models.color_style.ColorStyle(
                                        rgb_color = openapi_client.models.color.Color(
                                            alpha = 1.337, 
                                            blue = 1.337, 
                                            green = 1.337, 
                                            red = 1.337, ), 
                                        theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                                    italic = True, 
                                    link = openapi_client.models.link.Link(
                                        uri = '', ), 
                                    strikethrough = True, 
                                    underline = True, ), 
                                type = 'DATA_LABEL_TYPE_UNSPECIFIED', ), 
                            hide_trailing_subtotal = True, 
                            negative_columns_style = openapi_client.models.waterfall_chart_column_style.WaterfallChartColumnStyle(
                                color = , 
                                color_style = openapi_client.models.color_style.ColorStyle(
                                    theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                                label = '', ), 
                            positive_columns_style = openapi_client.models.waterfall_chart_column_style.WaterfallChartColumnStyle(
                                label = '', ), 
                            subtotal_columns_style = , )
                        ], 
                    stacked_type = 'WATERFALL_STACKED_TYPE_UNSPECIFIED', 
                    total_data_label = openapi_client.models.data_label.DataLabel(
                        placement = 'DATA_LABEL_PLACEMENT_UNSPECIFIED', 
                        type = 'DATA_LABEL_TYPE_UNSPECIFIED', ), )
            )
        else:
            return ChartSpec(
        )
        """

    def testChartSpec(self):
        """Test ChartSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

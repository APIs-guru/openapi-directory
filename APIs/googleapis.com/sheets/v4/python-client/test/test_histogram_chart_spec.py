# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.histogram_chart_spec import HistogramChartSpec

class TestHistogramChartSpec(unittest.TestCase):
    """HistogramChartSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> HistogramChartSpec:
        """Test HistogramChartSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `HistogramChartSpec`
        """
        model = HistogramChartSpec()
        if include_optional:
            return HistogramChartSpec(
                bucket_size = 1.337,
                legend_position = 'HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED',
                outlier_percentile = 1.337,
                series = [
                    openapi_client.models.histogram_series.HistogramSeries(
                        bar_color = openapi_client.models.color.Color(
                            alpha = 1.337, 
                            blue = 1.337, 
                            green = 1.337, 
                            red = 1.337, ), 
                        bar_color_style = openapi_client.models.color_style.ColorStyle(
                            rgb_color = openapi_client.models.color.Color(
                                alpha = 1.337, 
                                blue = 1.337, 
                                green = 1.337, 
                                red = 1.337, ), 
                            theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                        data = openapi_client.models.chart_data.ChartData(
                            aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', 
                            column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                                name = '', ), 
                            group_rule = openapi_client.models.chart_group_rule.ChartGroupRule(
                                date_time_rule = openapi_client.models.chart_date_time_rule.ChartDateTimeRule(
                                    type = 'CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED', ), 
                                histogram_rule = openapi_client.models.chart_histogram_rule.ChartHistogramRule(
                                    interval_size = 1.337, 
                                    max_value = 1.337, 
                                    min_value = 1.337, ), ), 
                            source_range = openapi_client.models.chart_source_range.ChartSourceRange(
                                sources = [
                                    openapi_client.models.grid_range.GridRange(
                                        end_column_index = 56, 
                                        end_row_index = 56, 
                                        sheet_id = 56, 
                                        start_column_index = 56, 
                                        start_row_index = 56, )
                                    ], ), ), )
                    ],
                show_item_dividers = True
            )
        else:
            return HistogramChartSpec(
        )
        """

    def testHistogramChartSpec(self):
        """Test HistogramChartSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

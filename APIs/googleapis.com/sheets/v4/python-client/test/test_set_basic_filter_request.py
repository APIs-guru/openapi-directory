# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.set_basic_filter_request import SetBasicFilterRequest

class TestSetBasicFilterRequest(unittest.TestCase):
    """SetBasicFilterRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SetBasicFilterRequest:
        """Test SetBasicFilterRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SetBasicFilterRequest`
        """
        model = SetBasicFilterRequest()
        if include_optional:
            return SetBasicFilterRequest(
                filter = openapi_client.models.basic_filter.BasicFilter(
                    criteria = {
                        'key' : openapi_client.models.filter_criteria.FilterCriteria(
                            condition = openapi_client.models.boolean_condition.BooleanCondition(
                                type = 'CONDITION_TYPE_UNSPECIFIED', 
                                values = [
                                    openapi_client.models.condition_value.ConditionValue(
                                        relative_date = 'RELATIVE_DATE_UNSPECIFIED', 
                                        user_entered_value = '', )
                                    ], ), 
                            hidden_values = [
                                ''
                                ], 
                            visible_background_color = openapi_client.models.color.Color(
                                alpha = 1.337, 
                                blue = 1.337, 
                                green = 1.337, 
                                red = 1.337, ), 
                            visible_background_color_style = openapi_client.models.color_style.ColorStyle(
                                rgb_color = openapi_client.models.color.Color(
                                    alpha = 1.337, 
                                    blue = 1.337, 
                                    green = 1.337, 
                                    red = 1.337, ), 
                                theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                            visible_foreground_color = , 
                            visible_foreground_color_style = openapi_client.models.color_style.ColorStyle(
                                theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), )
                        }, 
                    filter_specs = [
                        openapi_client.models.filter_spec.FilterSpec(
                            column_index = 56, 
                            data_source_column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                                name = '', ), 
                            filter_criteria = openapi_client.models.filter_criteria.FilterCriteria(), )
                        ], 
                    range = openapi_client.models.grid_range.GridRange(
                        end_column_index = 56, 
                        end_row_index = 56, 
                        sheet_id = 56, 
                        start_column_index = 56, 
                        start_row_index = 56, ), 
                    sort_specs = [
                        openapi_client.models.sort_spec.SortSpec(
                            background_color = , 
                            background_color_style = , 
                            dimension_index = 56, 
                            foreground_color = , 
                            foreground_color_style = , 
                            sort_order = 'SORT_ORDER_UNSPECIFIED', )
                        ], )
            )
        else:
            return SetBasicFilterRequest(
        )
        """

    def testSetBasicFilterRequest(self):
        """Test SetBasicFilterRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

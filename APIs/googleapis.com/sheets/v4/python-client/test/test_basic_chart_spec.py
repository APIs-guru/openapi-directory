# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.basic_chart_spec import BasicChartSpec

class TestBasicChartSpec(unittest.TestCase):
    """BasicChartSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BasicChartSpec:
        """Test BasicChartSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BasicChartSpec`
        """
        model = BasicChartSpec()
        if include_optional:
            return BasicChartSpec(
                axis = [
                    openapi_client.models.basic_chart_axis.BasicChartAxis(
                        format = openapi_client.models.text_format.TextFormat(
                            bold = True, 
                            font_family = '', 
                            font_size = 56, 
                            foreground_color = openapi_client.models.color.Color(
                                alpha = 1.337, 
                                blue = 1.337, 
                                green = 1.337, 
                                red = 1.337, ), 
                            foreground_color_style = openapi_client.models.color_style.ColorStyle(
                                rgb_color = openapi_client.models.color.Color(
                                    alpha = 1.337, 
                                    blue = 1.337, 
                                    green = 1.337, 
                                    red = 1.337, ), 
                                theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                            italic = True, 
                            link = openapi_client.models.link.Link(
                                uri = '', ), 
                            strikethrough = True, 
                            underline = True, ), 
                        position = 'BASIC_CHART_AXIS_POSITION_UNSPECIFIED', 
                        title = '', 
                        title_text_position = openapi_client.models.text_position.TextPosition(
                            horizontal_alignment = 'HORIZONTAL_ALIGN_UNSPECIFIED', ), 
                        view_window_options = openapi_client.models.chart_axis_view_window_options.ChartAxisViewWindowOptions(
                            view_window_max = 1.337, 
                            view_window_min = 1.337, 
                            view_window_mode = 'DEFAULT_VIEW_WINDOW_MODE', ), )
                    ],
                chart_type = 'BASIC_CHART_TYPE_UNSPECIFIED',
                compare_mode = 'BASIC_CHART_COMPARE_MODE_UNSPECIFIED',
                domains = [
                    openapi_client.models.basic_chart_domain.BasicChartDomain(
                        domain = openapi_client.models.chart_data.ChartData(
                            aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', 
                            column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                                name = '', ), 
                            group_rule = openapi_client.models.chart_group_rule.ChartGroupRule(
                                date_time_rule = openapi_client.models.chart_date_time_rule.ChartDateTimeRule(
                                    type = 'CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED', ), 
                                histogram_rule = openapi_client.models.chart_histogram_rule.ChartHistogramRule(
                                    interval_size = 1.337, 
                                    max_value = 1.337, 
                                    min_value = 1.337, ), ), 
                            source_range = openapi_client.models.chart_source_range.ChartSourceRange(
                                sources = [
                                    openapi_client.models.grid_range.GridRange(
                                        end_column_index = 56, 
                                        end_row_index = 56, 
                                        sheet_id = 56, 
                                        start_column_index = 56, 
                                        start_row_index = 56, )
                                    ], ), ), 
                        reversed = True, )
                    ],
                header_count = 56,
                interpolate_nulls = True,
                legend_position = 'BASIC_CHART_LEGEND_POSITION_UNSPECIFIED',
                line_smoothing = True,
                series = [
                    openapi_client.models.basic_chart_series.BasicChartSeries(
                        color = openapi_client.models.color.Color(
                            alpha = 1.337, 
                            blue = 1.337, 
                            green = 1.337, 
                            red = 1.337, ), 
                        color_style = openapi_client.models.color_style.ColorStyle(
                            rgb_color = openapi_client.models.color.Color(
                                alpha = 1.337, 
                                blue = 1.337, 
                                green = 1.337, 
                                red = 1.337, ), 
                            theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                        data_label = openapi_client.models.data_label.DataLabel(
                            custom_label_data = openapi_client.models.chart_data.ChartData(
                                aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', 
                                column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                                    name = '', ), 
                                group_rule = openapi_client.models.chart_group_rule.ChartGroupRule(
                                    date_time_rule = openapi_client.models.chart_date_time_rule.ChartDateTimeRule(
                                        type = 'CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED', ), 
                                    histogram_rule = openapi_client.models.chart_histogram_rule.ChartHistogramRule(
                                        interval_size = 1.337, 
                                        max_value = 1.337, 
                                        min_value = 1.337, ), ), 
                                source_range = openapi_client.models.chart_source_range.ChartSourceRange(
                                    sources = [
                                        openapi_client.models.grid_range.GridRange(
                                            end_column_index = 56, 
                                            end_row_index = 56, 
                                            sheet_id = 56, 
                                            start_column_index = 56, 
                                            start_row_index = 56, )
                                        ], ), ), 
                            placement = 'DATA_LABEL_PLACEMENT_UNSPECIFIED', 
                            text_format = openapi_client.models.text_format.TextFormat(
                                bold = True, 
                                font_family = '', 
                                font_size = 56, 
                                foreground_color = , 
                                foreground_color_style = openapi_client.models.color_style.ColorStyle(
                                    theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                                italic = True, 
                                link = openapi_client.models.link.Link(
                                    uri = '', ), 
                                strikethrough = True, 
                                underline = True, ), 
                            type = 'DATA_LABEL_TYPE_UNSPECIFIED', ), 
                        line_style = openapi_client.models.line_style.LineStyle(
                            type = 'LINE_DASH_TYPE_UNSPECIFIED', 
                            width = 56, ), 
                        point_style = openapi_client.models.point_style.PointStyle(
                            shape = 'POINT_SHAPE_UNSPECIFIED', 
                            size = 1.337, ), 
                        style_overrides = [
                            openapi_client.models.basic_series_data_point_style_override.BasicSeriesDataPointStyleOverride(
                                index = 56, )
                            ], 
                        target_axis = 'BASIC_CHART_AXIS_POSITION_UNSPECIFIED', 
                        type = 'BASIC_CHART_TYPE_UNSPECIFIED', )
                    ],
                stacked_type = 'BASIC_CHART_STACKED_TYPE_UNSPECIFIED',
                three_dimensional = True,
                total_data_label = openapi_client.models.data_label.DataLabel(
                    custom_label_data = openapi_client.models.chart_data.ChartData(
                        aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', 
                        column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                            name = '', ), 
                        group_rule = openapi_client.models.chart_group_rule.ChartGroupRule(
                            date_time_rule = openapi_client.models.chart_date_time_rule.ChartDateTimeRule(
                                type = 'CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED', ), 
                            histogram_rule = openapi_client.models.chart_histogram_rule.ChartHistogramRule(
                                interval_size = 1.337, 
                                max_value = 1.337, 
                                min_value = 1.337, ), ), 
                        source_range = openapi_client.models.chart_source_range.ChartSourceRange(
                            sources = [
                                openapi_client.models.grid_range.GridRange(
                                    end_column_index = 56, 
                                    end_row_index = 56, 
                                    sheet_id = 56, 
                                    start_column_index = 56, 
                                    start_row_index = 56, )
                                ], ), ), 
                    placement = 'DATA_LABEL_PLACEMENT_UNSPECIFIED', 
                    text_format = openapi_client.models.text_format.TextFormat(
                        bold = True, 
                        font_family = '', 
                        font_size = 56, 
                        foreground_color = openapi_client.models.color.Color(
                            alpha = 1.337, 
                            blue = 1.337, 
                            green = 1.337, 
                            red = 1.337, ), 
                        foreground_color_style = openapi_client.models.color_style.ColorStyle(
                            rgb_color = openapi_client.models.color.Color(
                                alpha = 1.337, 
                                blue = 1.337, 
                                green = 1.337, 
                                red = 1.337, ), 
                            theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                        italic = True, 
                        link = openapi_client.models.link.Link(
                            uri = '', ), 
                        strikethrough = True, 
                        underline = True, ), 
                    type = 'DATA_LABEL_TYPE_UNSPECIFIED', )
            )
        else:
            return BasicChartSpec(
        )
        """

    def testBasicChartSpec(self):
        """Test BasicChartSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

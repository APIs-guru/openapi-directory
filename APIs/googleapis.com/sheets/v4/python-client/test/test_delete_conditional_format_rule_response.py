# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.delete_conditional_format_rule_response import DeleteConditionalFormatRuleResponse

class TestDeleteConditionalFormatRuleResponse(unittest.TestCase):
    """DeleteConditionalFormatRuleResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeleteConditionalFormatRuleResponse:
        """Test DeleteConditionalFormatRuleResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeleteConditionalFormatRuleResponse`
        """
        model = DeleteConditionalFormatRuleResponse()
        if include_optional:
            return DeleteConditionalFormatRuleResponse(
                rule = openapi_client.models.conditional_format_rule.ConditionalFormatRule(
                    boolean_rule = openapi_client.models.boolean_rule.BooleanRule(
                        condition = openapi_client.models.boolean_condition.BooleanCondition(
                            type = 'CONDITION_TYPE_UNSPECIFIED', 
                            values = [
                                openapi_client.models.condition_value.ConditionValue(
                                    relative_date = 'RELATIVE_DATE_UNSPECIFIED', 
                                    user_entered_value = '', )
                                ], ), 
                        format = openapi_client.models.cell_format.CellFormat(
                            background_color = openapi_client.models.color.Color(
                                alpha = 1.337, 
                                blue = 1.337, 
                                green = 1.337, 
                                red = 1.337, ), 
                            background_color_style = openapi_client.models.color_style.ColorStyle(
                                rgb_color = openapi_client.models.color.Color(
                                    alpha = 1.337, 
                                    blue = 1.337, 
                                    green = 1.337, 
                                    red = 1.337, ), 
                                theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                            borders = openapi_client.models.borders.Borders(
                                bottom = openapi_client.models.border.Border(
                                    color = , 
                                    color_style = openapi_client.models.color_style.ColorStyle(
                                        theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                                    style = 'STYLE_UNSPECIFIED', 
                                    width = 56, ), 
                                left = openapi_client.models.border.Border(
                                    style = 'STYLE_UNSPECIFIED', 
                                    width = 56, ), 
                                right = , 
                                top = , ), 
                            horizontal_alignment = 'HORIZONTAL_ALIGN_UNSPECIFIED', 
                            hyperlink_display_type = 'HYPERLINK_DISPLAY_TYPE_UNSPECIFIED', 
                            number_format = openapi_client.models.number_format.NumberFormat(
                                pattern = '', 
                                type = 'NUMBER_FORMAT_TYPE_UNSPECIFIED', ), 
                            padding = openapi_client.models.padding.Padding(), 
                            text_direction = 'TEXT_DIRECTION_UNSPECIFIED', 
                            text_format = openapi_client.models.text_format.TextFormat(
                                bold = True, 
                                font_family = '', 
                                font_size = 56, 
                                foreground_color = , 
                                foreground_color_style = , 
                                italic = True, 
                                link = openapi_client.models.link.Link(
                                    uri = '', ), 
                                strikethrough = True, 
                                underline = True, ), 
                            text_rotation = openapi_client.models.text_rotation.TextRotation(
                                angle = 56, 
                                vertical = True, ), 
                            vertical_alignment = 'VERTICAL_ALIGN_UNSPECIFIED', 
                            wrap_strategy = 'WRAP_STRATEGY_UNSPECIFIED', ), ), 
                    gradient_rule = openapi_client.models.gradient_rule.GradientRule(
                        maxpoint = openapi_client.models.interpolation_point.InterpolationPoint(
                            type = 'INTERPOLATION_POINT_TYPE_UNSPECIFIED', 
                            value = '', ), 
                        midpoint = openapi_client.models.interpolation_point.InterpolationPoint(
                            type = 'INTERPOLATION_POINT_TYPE_UNSPECIFIED', 
                            value = '', ), 
                        minpoint = , ), 
                    ranges = [
                        openapi_client.models.grid_range.GridRange(
                            end_column_index = 56, 
                            end_row_index = 56, 
                            sheet_id = 56, 
                            start_column_index = 56, 
                            start_row_index = 56, )
                        ], )
            )
        else:
            return DeleteConditionalFormatRuleResponse(
        )
        """

    def testDeleteConditionalFormatRuleResponse(self):
        """Test DeleteConditionalFormatRuleResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

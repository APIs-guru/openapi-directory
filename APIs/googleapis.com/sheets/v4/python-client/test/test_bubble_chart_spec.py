# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.bubble_chart_spec import BubbleChartSpec

class TestBubbleChartSpec(unittest.TestCase):
    """BubbleChartSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BubbleChartSpec:
        """Test BubbleChartSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BubbleChartSpec`
        """
        model = BubbleChartSpec()
        if include_optional:
            return BubbleChartSpec(
                bubble_border_color = openapi_client.models.color.Color(
                    alpha = 1.337, 
                    blue = 1.337, 
                    green = 1.337, 
                    red = 1.337, ),
                bubble_border_color_style = openapi_client.models.color_style.ColorStyle(
                    rgb_color = openapi_client.models.color.Color(
                        alpha = 1.337, 
                        blue = 1.337, 
                        green = 1.337, 
                        red = 1.337, ), 
                    theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ),
                bubble_labels = openapi_client.models.chart_data.ChartData(
                    aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', 
                    column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                        name = '', ), 
                    group_rule = openapi_client.models.chart_group_rule.ChartGroupRule(
                        date_time_rule = openapi_client.models.chart_date_time_rule.ChartDateTimeRule(
                            type = 'CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED', ), 
                        histogram_rule = openapi_client.models.chart_histogram_rule.ChartHistogramRule(
                            interval_size = 1.337, 
                            max_value = 1.337, 
                            min_value = 1.337, ), ), 
                    source_range = openapi_client.models.chart_source_range.ChartSourceRange(
                        sources = [
                            openapi_client.models.grid_range.GridRange(
                                end_column_index = 56, 
                                end_row_index = 56, 
                                sheet_id = 56, 
                                start_column_index = 56, 
                                start_row_index = 56, )
                            ], ), ),
                bubble_max_radius_size = 56,
                bubble_min_radius_size = 56,
                bubble_opacity = 1.337,
                bubble_sizes = openapi_client.models.chart_data.ChartData(
                    aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', 
                    column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                        name = '', ), 
                    group_rule = openapi_client.models.chart_group_rule.ChartGroupRule(
                        date_time_rule = openapi_client.models.chart_date_time_rule.ChartDateTimeRule(
                            type = 'CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED', ), 
                        histogram_rule = openapi_client.models.chart_histogram_rule.ChartHistogramRule(
                            interval_size = 1.337, 
                            max_value = 1.337, 
                            min_value = 1.337, ), ), 
                    source_range = openapi_client.models.chart_source_range.ChartSourceRange(
                        sources = [
                            openapi_client.models.grid_range.GridRange(
                                end_column_index = 56, 
                                end_row_index = 56, 
                                sheet_id = 56, 
                                start_column_index = 56, 
                                start_row_index = 56, )
                            ], ), ),
                bubble_text_style = openapi_client.models.text_format.TextFormat(
                    bold = True, 
                    font_family = '', 
                    font_size = 56, 
                    foreground_color = openapi_client.models.color.Color(
                        alpha = 1.337, 
                        blue = 1.337, 
                        green = 1.337, 
                        red = 1.337, ), 
                    foreground_color_style = openapi_client.models.color_style.ColorStyle(
                        rgb_color = openapi_client.models.color.Color(
                            alpha = 1.337, 
                            blue = 1.337, 
                            green = 1.337, 
                            red = 1.337, ), 
                        theme_color = 'THEME_COLOR_TYPE_UNSPECIFIED', ), 
                    italic = True, 
                    link = openapi_client.models.link.Link(
                        uri = '', ), 
                    strikethrough = True, 
                    underline = True, ),
                domain = openapi_client.models.chart_data.ChartData(
                    aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', 
                    column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                        name = '', ), 
                    group_rule = openapi_client.models.chart_group_rule.ChartGroupRule(
                        date_time_rule = openapi_client.models.chart_date_time_rule.ChartDateTimeRule(
                            type = 'CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED', ), 
                        histogram_rule = openapi_client.models.chart_histogram_rule.ChartHistogramRule(
                            interval_size = 1.337, 
                            max_value = 1.337, 
                            min_value = 1.337, ), ), 
                    source_range = openapi_client.models.chart_source_range.ChartSourceRange(
                        sources = [
                            openapi_client.models.grid_range.GridRange(
                                end_column_index = 56, 
                                end_row_index = 56, 
                                sheet_id = 56, 
                                start_column_index = 56, 
                                start_row_index = 56, )
                            ], ), ),
                group_ids = openapi_client.models.chart_data.ChartData(
                    aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', 
                    column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                        name = '', ), 
                    group_rule = openapi_client.models.chart_group_rule.ChartGroupRule(
                        date_time_rule = openapi_client.models.chart_date_time_rule.ChartDateTimeRule(
                            type = 'CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED', ), 
                        histogram_rule = openapi_client.models.chart_histogram_rule.ChartHistogramRule(
                            interval_size = 1.337, 
                            max_value = 1.337, 
                            min_value = 1.337, ), ), 
                    source_range = openapi_client.models.chart_source_range.ChartSourceRange(
                        sources = [
                            openapi_client.models.grid_range.GridRange(
                                end_column_index = 56, 
                                end_row_index = 56, 
                                sheet_id = 56, 
                                start_column_index = 56, 
                                start_row_index = 56, )
                            ], ), ),
                legend_position = 'BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED',
                series = openapi_client.models.chart_data.ChartData(
                    aggregate_type = 'CHART_AGGREGATE_TYPE_UNSPECIFIED', 
                    column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                        name = '', ), 
                    group_rule = openapi_client.models.chart_group_rule.ChartGroupRule(
                        date_time_rule = openapi_client.models.chart_date_time_rule.ChartDateTimeRule(
                            type = 'CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED', ), 
                        histogram_rule = openapi_client.models.chart_histogram_rule.ChartHistogramRule(
                            interval_size = 1.337, 
                            max_value = 1.337, 
                            min_value = 1.337, ), ), 
                    source_range = openapi_client.models.chart_source_range.ChartSourceRange(
                        sources = [
                            openapi_client.models.grid_range.GridRange(
                                end_column_index = 56, 
                                end_row_index = 56, 
                                sheet_id = 56, 
                                start_column_index = 56, 
                                start_row_index = 56, )
                            ], ), )
            )
        else:
            return BubbleChartSpec(
        )
        """

    def testBubbleChartSpec(self):
        """Test BubbleChartSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

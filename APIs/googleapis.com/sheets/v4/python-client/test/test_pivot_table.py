# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.pivot_table import PivotTable

class TestPivotTable(unittest.TestCase):
    """PivotTable unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PivotTable:
        """Test PivotTable
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PivotTable`
        """
        model = PivotTable()
        if include_optional:
            return PivotTable(
                columns = [
                    openapi_client.models.pivot_group.PivotGroup(
                        data_source_column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                            name = '', ), 
                        group_limit = openapi_client.models.pivot_group_limit.PivotGroupLimit(
                            apply_order = 56, 
                            count_limit = 56, ), 
                        group_rule = openapi_client.models.pivot_group_rule.PivotGroupRule(
                            date_time_rule = openapi_client.models.date_time_rule.DateTimeRule(
                                type = 'DATE_TIME_RULE_TYPE_UNSPECIFIED', ), 
                            histogram_rule = openapi_client.models.histogram_rule.HistogramRule(
                                end = 1.337, 
                                interval = 1.337, 
                                start = 1.337, ), 
                            manual_rule = openapi_client.models.manual_rule.ManualRule(
                                groups = [
                                    openapi_client.models.manual_rule_group.ManualRuleGroup(
                                        group_name = openapi_client.models.extended_value.ExtendedValue(
                                            bool_value = True, 
                                            error_value = openapi_client.models.error_value.ErrorValue(
                                                message = '', 
                                                type = 'ERROR_TYPE_UNSPECIFIED', ), 
                                            formula_value = '', 
                                            number_value = 1.337, 
                                            string_value = '', ), 
                                        items = [
                                            openapi_client.models.extended_value.ExtendedValue(
                                                bool_value = True, 
                                                formula_value = '', 
                                                number_value = 1.337, 
                                                string_value = '', )
                                            ], )
                                    ], ), ), 
                        label = '', 
                        repeat_headings = True, 
                        show_totals = True, 
                        sort_order = 'SORT_ORDER_UNSPECIFIED', 
                        source_column_offset = 56, 
                        value_bucket = openapi_client.models.pivot_group_sort_value_bucket.PivotGroupSortValueBucket(
                            buckets = [
                                
                                ], 
                            values_index = 56, ), 
                        value_metadata = [
                            openapi_client.models.pivot_group_value_metadata.PivotGroupValueMetadata(
                                collapsed = True, 
                                value = , )
                            ], )
                    ],
                criteria = {
                    'key' : openapi_client.models.pivot_filter_criteria.PivotFilterCriteria(
                        condition = openapi_client.models.boolean_condition.BooleanCondition(
                            type = 'CONDITION_TYPE_UNSPECIFIED', 
                            values = [
                                openapi_client.models.condition_value.ConditionValue(
                                    relative_date = 'RELATIVE_DATE_UNSPECIFIED', 
                                    user_entered_value = '', )
                                ], ), 
                        visible_by_default = True, 
                        visible_values = [
                            ''
                            ], )
                    },
                data_execution_status = openapi_client.models.data_execution_status.DataExecutionStatus(
                    error_code = 'DATA_EXECUTION_ERROR_CODE_UNSPECIFIED', 
                    error_message = '', 
                    last_refresh_time = '', 
                    state = 'DATA_EXECUTION_STATE_UNSPECIFIED', ),
                data_source_id = '',
                filter_specs = [
                    openapi_client.models.pivot_filter_spec.PivotFilterSpec(
                        column_offset_index = 56, 
                        data_source_column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                            name = '', ), 
                        filter_criteria = openapi_client.models.pivot_filter_criteria.PivotFilterCriteria(
                            condition = openapi_client.models.boolean_condition.BooleanCondition(
                                type = 'CONDITION_TYPE_UNSPECIFIED', 
                                values = [
                                    openapi_client.models.condition_value.ConditionValue(
                                        relative_date = 'RELATIVE_DATE_UNSPECIFIED', 
                                        user_entered_value = '', )
                                    ], ), 
                            visible_by_default = True, 
                            visible_values = [
                                ''
                                ], ), )
                    ],
                rows = [
                    openapi_client.models.pivot_group.PivotGroup(
                        data_source_column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                            name = '', ), 
                        group_limit = openapi_client.models.pivot_group_limit.PivotGroupLimit(
                            apply_order = 56, 
                            count_limit = 56, ), 
                        group_rule = openapi_client.models.pivot_group_rule.PivotGroupRule(
                            date_time_rule = openapi_client.models.date_time_rule.DateTimeRule(
                                type = 'DATE_TIME_RULE_TYPE_UNSPECIFIED', ), 
                            histogram_rule = openapi_client.models.histogram_rule.HistogramRule(
                                end = 1.337, 
                                interval = 1.337, 
                                start = 1.337, ), 
                            manual_rule = openapi_client.models.manual_rule.ManualRule(
                                groups = [
                                    openapi_client.models.manual_rule_group.ManualRuleGroup(
                                        group_name = openapi_client.models.extended_value.ExtendedValue(
                                            bool_value = True, 
                                            error_value = openapi_client.models.error_value.ErrorValue(
                                                message = '', 
                                                type = 'ERROR_TYPE_UNSPECIFIED', ), 
                                            formula_value = '', 
                                            number_value = 1.337, 
                                            string_value = '', ), 
                                        items = [
                                            openapi_client.models.extended_value.ExtendedValue(
                                                bool_value = True, 
                                                formula_value = '', 
                                                number_value = 1.337, 
                                                string_value = '', )
                                            ], )
                                    ], ), ), 
                        label = '', 
                        repeat_headings = True, 
                        show_totals = True, 
                        sort_order = 'SORT_ORDER_UNSPECIFIED', 
                        source_column_offset = 56, 
                        value_bucket = openapi_client.models.pivot_group_sort_value_bucket.PivotGroupSortValueBucket(
                            buckets = [
                                
                                ], 
                            values_index = 56, ), 
                        value_metadata = [
                            openapi_client.models.pivot_group_value_metadata.PivotGroupValueMetadata(
                                collapsed = True, 
                                value = , )
                            ], )
                    ],
                source = openapi_client.models.grid_range.GridRange(
                    end_column_index = 56, 
                    end_row_index = 56, 
                    sheet_id = 56, 
                    start_column_index = 56, 
                    start_row_index = 56, ),
                value_layout = 'HORIZONTAL',
                values = [
                    openapi_client.models.pivot_value.PivotValue(
                        calculated_display_type = 'PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED', 
                        data_source_column_reference = openapi_client.models.data_source_column_reference.DataSourceColumnReference(
                            name = '', ), 
                        formula = '', 
                        name = '', 
                        source_column_offset = 56, 
                        summarize_function = 'PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED', )
                    ]
            )
        else:
            return PivotTable(
        )
        """

    def testPivotTable(self):
        """Test PivotTable"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.banded_range import BandedRange
from openapi_client.models.basic_filter import BasicFilter
from openapi_client.models.conditional_format_rule import ConditionalFormatRule
from openapi_client.models.developer_metadata import DeveloperMetadata
from openapi_client.models.dimension_group import DimensionGroup
from openapi_client.models.embedded_chart import EmbeddedChart
from openapi_client.models.filter_view import FilterView
from openapi_client.models.grid_data import GridData
from openapi_client.models.grid_range import GridRange
from openapi_client.models.protected_range import ProtectedRange
from openapi_client.models.sheet_properties import SheetProperties
from openapi_client.models.slicer import Slicer
from typing import Optional, Set
from typing_extensions import Self

class Sheet(BaseModel):
    """
    A sheet in a spreadsheet.
    """ # noqa: E501
    banded_ranges: Optional[List[BandedRange]] = Field(default=None, description="The banded (alternating colors) ranges on this sheet.", alias="bandedRanges")
    basic_filter: Optional[BasicFilter] = Field(default=None, alias="basicFilter")
    charts: Optional[List[EmbeddedChart]] = Field(default=None, description="The specifications of every chart on this sheet.")
    column_groups: Optional[List[DimensionGroup]] = Field(default=None, description="All column groups on this sheet, ordered by increasing range start index, then by group depth.", alias="columnGroups")
    conditional_formats: Optional[List[ConditionalFormatRule]] = Field(default=None, description="The conditional format rules in this sheet.", alias="conditionalFormats")
    data: Optional[List[GridData]] = Field(default=None, description="Data in the grid, if this is a grid sheet. The number of GridData objects returned is dependent on the number of ranges requested on this sheet. For example, if this is representing `Sheet1`, and the spreadsheet was requested with ranges `Sheet1!A1:C10` and `Sheet1!D15:E20`, then the first GridData will have a startRow/startColumn of `0`, while the second one will have `startRow 14` (zero-based row 15), and `startColumn 3` (zero-based column D). For a DATA_SOURCE sheet, you can not request a specific range, the GridData contains all the values.")
    developer_metadata: Optional[List[DeveloperMetadata]] = Field(default=None, description="The developer metadata associated with a sheet.", alias="developerMetadata")
    filter_views: Optional[List[FilterView]] = Field(default=None, description="The filter views in this sheet.", alias="filterViews")
    merges: Optional[List[GridRange]] = Field(default=None, description="The ranges that are merged together.")
    properties: Optional[SheetProperties] = None
    protected_ranges: Optional[List[ProtectedRange]] = Field(default=None, description="The protected ranges in this sheet.", alias="protectedRanges")
    row_groups: Optional[List[DimensionGroup]] = Field(default=None, description="All row groups on this sheet, ordered by increasing range start index, then by group depth.", alias="rowGroups")
    slicers: Optional[List[Slicer]] = Field(default=None, description="The slicers on this sheet.")
    __properties: ClassVar[List[str]] = ["bandedRanges", "basicFilter", "charts", "columnGroups", "conditionalFormats", "data", "developerMetadata", "filterViews", "merges", "properties", "protectedRanges", "rowGroups", "slicers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Sheet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in banded_ranges (list)
        _items = []
        if self.banded_ranges:
            for _item_banded_ranges in self.banded_ranges:
                if _item_banded_ranges:
                    _items.append(_item_banded_ranges.to_dict())
            _dict['bandedRanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of basic_filter
        if self.basic_filter:
            _dict['basicFilter'] = self.basic_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in charts (list)
        _items = []
        if self.charts:
            for _item_charts in self.charts:
                if _item_charts:
                    _items.append(_item_charts.to_dict())
            _dict['charts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in column_groups (list)
        _items = []
        if self.column_groups:
            for _item_column_groups in self.column_groups:
                if _item_column_groups:
                    _items.append(_item_column_groups.to_dict())
            _dict['columnGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in conditional_formats (list)
        _items = []
        if self.conditional_formats:
            for _item_conditional_formats in self.conditional_formats:
                if _item_conditional_formats:
                    _items.append(_item_conditional_formats.to_dict())
            _dict['conditionalFormats'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item_data in self.data:
                if _item_data:
                    _items.append(_item_data.to_dict())
            _dict['data'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in developer_metadata (list)
        _items = []
        if self.developer_metadata:
            for _item_developer_metadata in self.developer_metadata:
                if _item_developer_metadata:
                    _items.append(_item_developer_metadata.to_dict())
            _dict['developerMetadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filter_views (list)
        _items = []
        if self.filter_views:
            for _item_filter_views in self.filter_views:
                if _item_filter_views:
                    _items.append(_item_filter_views.to_dict())
            _dict['filterViews'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in merges (list)
        _items = []
        if self.merges:
            for _item_merges in self.merges:
                if _item_merges:
                    _items.append(_item_merges.to_dict())
            _dict['merges'] = _items
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in protected_ranges (list)
        _items = []
        if self.protected_ranges:
            for _item_protected_ranges in self.protected_ranges:
                if _item_protected_ranges:
                    _items.append(_item_protected_ranges.to_dict())
            _dict['protectedRanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in row_groups (list)
        _items = []
        if self.row_groups:
            for _item_row_groups in self.row_groups:
                if _item_row_groups:
                    _items.append(_item_row_groups.to_dict())
            _dict['rowGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in slicers (list)
        _items = []
        if self.slicers:
            for _item_slicers in self.slicers:
                if _item_slicers:
                    _items.append(_item_slicers.to_dict())
            _dict['slicers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Sheet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bandedRanges": [BandedRange.from_dict(_item) for _item in obj["bandedRanges"]] if obj.get("bandedRanges") is not None else None,
            "basicFilter": BasicFilter.from_dict(obj["basicFilter"]) if obj.get("basicFilter") is not None else None,
            "charts": [EmbeddedChart.from_dict(_item) for _item in obj["charts"]] if obj.get("charts") is not None else None,
            "columnGroups": [DimensionGroup.from_dict(_item) for _item in obj["columnGroups"]] if obj.get("columnGroups") is not None else None,
            "conditionalFormats": [ConditionalFormatRule.from_dict(_item) for _item in obj["conditionalFormats"]] if obj.get("conditionalFormats") is not None else None,
            "data": [GridData.from_dict(_item) for _item in obj["data"]] if obj.get("data") is not None else None,
            "developerMetadata": [DeveloperMetadata.from_dict(_item) for _item in obj["developerMetadata"]] if obj.get("developerMetadata") is not None else None,
            "filterViews": [FilterView.from_dict(_item) for _item in obj["filterViews"]] if obj.get("filterViews") is not None else None,
            "merges": [GridRange.from_dict(_item) for _item in obj["merges"]] if obj.get("merges") is not None else None,
            "properties": SheetProperties.from_dict(obj["properties"]) if obj.get("properties") is not None else None,
            "protectedRanges": [ProtectedRange.from_dict(_item) for _item in obj["protectedRanges"]] if obj.get("protectedRanges") is not None else None,
            "rowGroups": [DimensionGroup.from_dict(_item) for _item in obj["rowGroups"]] if obj.get("rowGroups") is not None else None,
            "slicers": [Slicer.from_dict(_item) for _item in obj["slicers"]] if obj.get("slicers") is not None else None
        })
        return _obj



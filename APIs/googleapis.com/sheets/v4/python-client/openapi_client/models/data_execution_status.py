# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DataExecutionStatus(BaseModel):
    """
    The data execution status. A data execution is created to sync a data source object with the latest data from a DataSource. It is usually scheduled to run at background, you can check its state to tell if an execution completes There are several scenarios where a data execution is triggered to run: * Adding a data source creates an associated data source sheet as well as a data execution to sync the data from the data source to the sheet. * Updating a data source creates a data execution to refresh the associated data source sheet similarly. * You can send refresh request to explicitly refresh one or multiple data source objects.
    """ # noqa: E501
    error_code: Optional[StrictStr] = Field(default=None, description="The error code.", alias="errorCode")
    error_message: Optional[StrictStr] = Field(default=None, description="The error message, which may be empty.", alias="errorMessage")
    last_refresh_time: Optional[StrictStr] = Field(default=None, description="Gets the time the data last successfully refreshed.", alias="lastRefreshTime")
    state: Optional[StrictStr] = Field(default=None, description="The state of the data execution.")
    __properties: ClassVar[List[str]] = ["errorCode", "errorMessage", "lastRefreshTime", "state"]

    @field_validator('error_code')
    def error_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_EXECUTION_ERROR_CODE_UNSPECIFIED', 'TIMED_OUT', 'TOO_MANY_ROWS', 'TOO_MANY_COLUMNS', 'TOO_MANY_CELLS', 'ENGINE', 'PARAMETER_INVALID', 'UNSUPPORTED_DATA_TYPE', 'DUPLICATE_COLUMN_NAMES', 'INTERRUPTED', 'CONCURRENT_QUERY', 'OTHER', 'TOO_MANY_CHARS_PER_CELL', 'DATA_NOT_FOUND', 'PERMISSION_DENIED', 'MISSING_COLUMN_ALIAS', 'OBJECT_NOT_FOUND', 'OBJECT_IN_ERROR_STATE', 'OBJECT_SPEC_INVALID']):
            raise ValueError("must be one of enum values ('DATA_EXECUTION_ERROR_CODE_UNSPECIFIED', 'TIMED_OUT', 'TOO_MANY_ROWS', 'TOO_MANY_COLUMNS', 'TOO_MANY_CELLS', 'ENGINE', 'PARAMETER_INVALID', 'UNSUPPORTED_DATA_TYPE', 'DUPLICATE_COLUMN_NAMES', 'INTERRUPTED', 'CONCURRENT_QUERY', 'OTHER', 'TOO_MANY_CHARS_PER_CELL', 'DATA_NOT_FOUND', 'PERMISSION_DENIED', 'MISSING_COLUMN_ALIAS', 'OBJECT_NOT_FOUND', 'OBJECT_IN_ERROR_STATE', 'OBJECT_SPEC_INVALID')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_EXECUTION_STATE_UNSPECIFIED', 'NOT_STARTED', 'RUNNING', 'SUCCEEDED', 'FAILED']):
            raise ValueError("must be one of enum values ('DATA_EXECUTION_STATE_UNSPECIFIED', 'NOT_STARTED', 'RUNNING', 'SUCCEEDED', 'FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataExecutionStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataExecutionStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorCode": obj.get("errorCode"),
            "errorMessage": obj.get("errorMessage"),
            "lastRefreshTime": obj.get("lastRefreshTime"),
            "state": obj.get("state")
        })
        return _obj



# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_source import DataSource
from openapi_client.models.data_source_refresh_schedule import DataSourceRefreshSchedule
from openapi_client.models.developer_metadata import DeveloperMetadata
from openapi_client.models.named_range import NamedRange
from openapi_client.models.sheet import Sheet
from openapi_client.models.spreadsheet_properties import SpreadsheetProperties
from typing import Optional, Set
from typing_extensions import Self

class Spreadsheet(BaseModel):
    """
    Resource that represents a spreadsheet.
    """ # noqa: E501
    data_source_schedules: Optional[List[DataSourceRefreshSchedule]] = Field(default=None, description="Output only. A list of data source refresh schedules.", alias="dataSourceSchedules")
    data_sources: Optional[List[DataSource]] = Field(default=None, description="A list of external data sources connected with the spreadsheet.", alias="dataSources")
    developer_metadata: Optional[List[DeveloperMetadata]] = Field(default=None, description="The developer metadata associated with a spreadsheet.", alias="developerMetadata")
    named_ranges: Optional[List[NamedRange]] = Field(default=None, description="The named ranges defined in a spreadsheet.", alias="namedRanges")
    properties: Optional[SpreadsheetProperties] = None
    sheets: Optional[List[Sheet]] = Field(default=None, description="The sheets that are part of a spreadsheet.")
    spreadsheet_id: Optional[StrictStr] = Field(default=None, description="The ID of the spreadsheet. This field is read-only.", alias="spreadsheetId")
    spreadsheet_url: Optional[StrictStr] = Field(default=None, description="The url of the spreadsheet. This field is read-only.", alias="spreadsheetUrl")
    __properties: ClassVar[List[str]] = ["dataSourceSchedules", "dataSources", "developerMetadata", "namedRanges", "properties", "sheets", "spreadsheetId", "spreadsheetUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Spreadsheet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "data_source_schedules",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data_source_schedules (list)
        _items = []
        if self.data_source_schedules:
            for _item_data_source_schedules in self.data_source_schedules:
                if _item_data_source_schedules:
                    _items.append(_item_data_source_schedules.to_dict())
            _dict['dataSourceSchedules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_sources (list)
        _items = []
        if self.data_sources:
            for _item_data_sources in self.data_sources:
                if _item_data_sources:
                    _items.append(_item_data_sources.to_dict())
            _dict['dataSources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in developer_metadata (list)
        _items = []
        if self.developer_metadata:
            for _item_developer_metadata in self.developer_metadata:
                if _item_developer_metadata:
                    _items.append(_item_developer_metadata.to_dict())
            _dict['developerMetadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in named_ranges (list)
        _items = []
        if self.named_ranges:
            for _item_named_ranges in self.named_ranges:
                if _item_named_ranges:
                    _items.append(_item_named_ranges.to_dict())
            _dict['namedRanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sheets (list)
        _items = []
        if self.sheets:
            for _item_sheets in self.sheets:
                if _item_sheets:
                    _items.append(_item_sheets.to_dict())
            _dict['sheets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Spreadsheet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataSourceSchedules": [DataSourceRefreshSchedule.from_dict(_item) for _item in obj["dataSourceSchedules"]] if obj.get("dataSourceSchedules") is not None else None,
            "dataSources": [DataSource.from_dict(_item) for _item in obj["dataSources"]] if obj.get("dataSources") is not None else None,
            "developerMetadata": [DeveloperMetadata.from_dict(_item) for _item in obj["developerMetadata"]] if obj.get("developerMetadata") is not None else None,
            "namedRanges": [NamedRange.from_dict(_item) for _item in obj["namedRanges"]] if obj.get("namedRanges") is not None else None,
            "properties": SpreadsheetProperties.from_dict(obj["properties"]) if obj.get("properties") is not None else None,
            "sheets": [Sheet.from_dict(_item) for _item in obj["sheets"]] if obj.get("sheets") is not None else None,
            "spreadsheetId": obj.get("spreadsheetId"),
            "spreadsheetUrl": obj.get("spreadsheetUrl")
        })
        return _obj



# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.chart_data import ChartData
from openapi_client.models.color import Color
from openapi_client.models.color_style import ColorStyle
from openapi_client.models.text_format import TextFormat
from openapi_client.models.treemap_chart_color_scale import TreemapChartColorScale
from typing import Optional, Set
from typing_extensions import Self

class TreemapChartSpec(BaseModel):
    """
    A Treemap chart.
    """ # noqa: E501
    color_data: Optional[ChartData] = Field(default=None, alias="colorData")
    color_scale: Optional[TreemapChartColorScale] = Field(default=None, alias="colorScale")
    header_color: Optional[Color] = Field(default=None, alias="headerColor")
    header_color_style: Optional[ColorStyle] = Field(default=None, alias="headerColorStyle")
    hide_tooltips: Optional[StrictBool] = Field(default=None, description="True to hide tooltips.", alias="hideTooltips")
    hinted_levels: Optional[StrictInt] = Field(default=None, description="The number of additional data levels beyond the labeled levels to be shown on the treemap chart. These levels are not interactive and are shown without their labels. Defaults to 0 if not specified.", alias="hintedLevels")
    labels: Optional[ChartData] = None
    levels: Optional[StrictInt] = Field(default=None, description="The number of data levels to show on the treemap chart. These levels are interactive and are shown with their labels. Defaults to 2 if not specified.")
    max_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The maximum possible data value. Cells with values greater than this will have the same color as cells with this value. If not specified, defaults to the actual maximum value from color_data, or the maximum value from size_data if color_data is not specified.", alias="maxValue")
    min_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The minimum possible data value. Cells with values less than this will have the same color as cells with this value. If not specified, defaults to the actual minimum value from color_data, or the minimum value from size_data if color_data is not specified.", alias="minValue")
    parent_labels: Optional[ChartData] = Field(default=None, alias="parentLabels")
    size_data: Optional[ChartData] = Field(default=None, alias="sizeData")
    text_format: Optional[TextFormat] = Field(default=None, alias="textFormat")
    __properties: ClassVar[List[str]] = ["colorData", "colorScale", "headerColor", "headerColorStyle", "hideTooltips", "hintedLevels", "labels", "levels", "maxValue", "minValue", "parentLabels", "sizeData", "textFormat"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TreemapChartSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of color_data
        if self.color_data:
            _dict['colorData'] = self.color_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of color_scale
        if self.color_scale:
            _dict['colorScale'] = self.color_scale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of header_color
        if self.header_color:
            _dict['headerColor'] = self.header_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of header_color_style
        if self.header_color_style:
            _dict['headerColorStyle'] = self.header_color_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of labels
        if self.labels:
            _dict['labels'] = self.labels.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_labels
        if self.parent_labels:
            _dict['parentLabels'] = self.parent_labels.to_dict()
        # override the default output from pydantic by calling `to_dict()` of size_data
        if self.size_data:
            _dict['sizeData'] = self.size_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_format
        if self.text_format:
            _dict['textFormat'] = self.text_format.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TreemapChartSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "colorData": ChartData.from_dict(obj["colorData"]) if obj.get("colorData") is not None else None,
            "colorScale": TreemapChartColorScale.from_dict(obj["colorScale"]) if obj.get("colorScale") is not None else None,
            "headerColor": Color.from_dict(obj["headerColor"]) if obj.get("headerColor") is not None else None,
            "headerColorStyle": ColorStyle.from_dict(obj["headerColorStyle"]) if obj.get("headerColorStyle") is not None else None,
            "hideTooltips": obj.get("hideTooltips"),
            "hintedLevels": obj.get("hintedLevels"),
            "labels": ChartData.from_dict(obj["labels"]) if obj.get("labels") is not None else None,
            "levels": obj.get("levels"),
            "maxValue": obj.get("maxValue"),
            "minValue": obj.get("minValue"),
            "parentLabels": ChartData.from_dict(obj["parentLabels"]) if obj.get("parentLabels") is not None else None,
            "sizeData": ChartData.from_dict(obj["sizeData"]) if obj.get("sizeData") is not None else None,
            "textFormat": TextFormat.from_dict(obj["textFormat"]) if obj.get("textFormat") is not None else None
        })
        return _obj



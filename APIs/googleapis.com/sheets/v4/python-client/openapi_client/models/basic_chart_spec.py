# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.basic_chart_axis import BasicChartAxis
from openapi_client.models.basic_chart_domain import BasicChartDomain
from openapi_client.models.basic_chart_series import BasicChartSeries
from openapi_client.models.data_label import DataLabel
from typing import Optional, Set
from typing_extensions import Self

class BasicChartSpec(BaseModel):
    """
    The specification for a basic chart. See BasicChartType for the list of charts this supports.
    """ # noqa: E501
    axis: Optional[List[BasicChartAxis]] = Field(default=None, description="The axis on the chart.")
    chart_type: Optional[StrictStr] = Field(default=None, description="The type of the chart.", alias="chartType")
    compare_mode: Optional[StrictStr] = Field(default=None, description="The behavior of tooltips and data highlighting when hovering on data and chart area.", alias="compareMode")
    domains: Optional[List[BasicChartDomain]] = Field(default=None, description="The domain of data this is charting. Only a single domain is supported.")
    header_count: Optional[StrictInt] = Field(default=None, description="The number of rows or columns in the data that are \"headers\". If not set, Google Sheets will guess how many rows are headers based on the data. (Note that BasicChartAxis.title may override the axis title inferred from the header values.)", alias="headerCount")
    interpolate_nulls: Optional[StrictBool] = Field(default=None, description="If some values in a series are missing, gaps may appear in the chart (e.g, segments of lines in a line chart will be missing). To eliminate these gaps set this to true. Applies to Line, Area, and Combo charts.", alias="interpolateNulls")
    legend_position: Optional[StrictStr] = Field(default=None, description="The position of the chart legend.", alias="legendPosition")
    line_smoothing: Optional[StrictBool] = Field(default=None, description="Gets whether all lines should be rendered smooth or straight by default. Applies to Line charts.", alias="lineSmoothing")
    series: Optional[List[BasicChartSeries]] = Field(default=None, description="The data this chart is visualizing.")
    stacked_type: Optional[StrictStr] = Field(default=None, description="The stacked type for charts that support vertical stacking. Applies to Area, Bar, Column, Combo, and Stepped Area charts.", alias="stackedType")
    three_dimensional: Optional[StrictBool] = Field(default=None, description="True to make the chart 3D. Applies to Bar and Column charts.", alias="threeDimensional")
    total_data_label: Optional[DataLabel] = Field(default=None, alias="totalDataLabel")
    __properties: ClassVar[List[str]] = ["axis", "chartType", "compareMode", "domains", "headerCount", "interpolateNulls", "legendPosition", "lineSmoothing", "series", "stackedType", "threeDimensional", "totalDataLabel"]

    @field_validator('chart_type')
    def chart_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BASIC_CHART_TYPE_UNSPECIFIED', 'BAR', 'LINE', 'AREA', 'COLUMN', 'SCATTER', 'COMBO', 'STEPPED_AREA']):
            raise ValueError("must be one of enum values ('BASIC_CHART_TYPE_UNSPECIFIED', 'BAR', 'LINE', 'AREA', 'COLUMN', 'SCATTER', 'COMBO', 'STEPPED_AREA')")
        return value

    @field_validator('compare_mode')
    def compare_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BASIC_CHART_COMPARE_MODE_UNSPECIFIED', 'DATUM', 'CATEGORY']):
            raise ValueError("must be one of enum values ('BASIC_CHART_COMPARE_MODE_UNSPECIFIED', 'DATUM', 'CATEGORY')")
        return value

    @field_validator('legend_position')
    def legend_position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BASIC_CHART_LEGEND_POSITION_UNSPECIFIED', 'BOTTOM_LEGEND', 'LEFT_LEGEND', 'RIGHT_LEGEND', 'TOP_LEGEND', 'NO_LEGEND']):
            raise ValueError("must be one of enum values ('BASIC_CHART_LEGEND_POSITION_UNSPECIFIED', 'BOTTOM_LEGEND', 'LEFT_LEGEND', 'RIGHT_LEGEND', 'TOP_LEGEND', 'NO_LEGEND')")
        return value

    @field_validator('stacked_type')
    def stacked_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BASIC_CHART_STACKED_TYPE_UNSPECIFIED', 'NOT_STACKED', 'STACKED', 'PERCENT_STACKED']):
            raise ValueError("must be one of enum values ('BASIC_CHART_STACKED_TYPE_UNSPECIFIED', 'NOT_STACKED', 'STACKED', 'PERCENT_STACKED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BasicChartSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in axis (list)
        _items = []
        if self.axis:
            for _item_axis in self.axis:
                if _item_axis:
                    _items.append(_item_axis.to_dict())
            _dict['axis'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in domains (list)
        _items = []
        if self.domains:
            for _item_domains in self.domains:
                if _item_domains:
                    _items.append(_item_domains.to_dict())
            _dict['domains'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in series (list)
        _items = []
        if self.series:
            for _item_series in self.series:
                if _item_series:
                    _items.append(_item_series.to_dict())
            _dict['series'] = _items
        # override the default output from pydantic by calling `to_dict()` of total_data_label
        if self.total_data_label:
            _dict['totalDataLabel'] = self.total_data_label.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BasicChartSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "axis": [BasicChartAxis.from_dict(_item) for _item in obj["axis"]] if obj.get("axis") is not None else None,
            "chartType": obj.get("chartType"),
            "compareMode": obj.get("compareMode"),
            "domains": [BasicChartDomain.from_dict(_item) for _item in obj["domains"]] if obj.get("domains") is not None else None,
            "headerCount": obj.get("headerCount"),
            "interpolateNulls": obj.get("interpolateNulls"),
            "legendPosition": obj.get("legendPosition"),
            "lineSmoothing": obj.get("lineSmoothing"),
            "series": [BasicChartSeries.from_dict(_item) for _item in obj["series"]] if obj.get("series") is not None else None,
            "stackedType": obj.get("stackedType"),
            "threeDimensional": obj.get("threeDimensional"),
            "totalDataLabel": DataLabel.from_dict(obj["totalDataLabel"]) if obj.get("totalDataLabel") is not None else None
        })
        return _obj



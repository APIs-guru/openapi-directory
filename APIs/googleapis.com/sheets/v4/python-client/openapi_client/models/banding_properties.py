# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.color import Color
from openapi_client.models.color_style import ColorStyle
from typing import Optional, Set
from typing_extensions import Self

class BandingProperties(BaseModel):
    """
    Properties referring a single dimension (either row or column). If both BandedRange.row_properties and BandedRange.column_properties are set, the fill colors are applied to cells according to the following rules: * header_color and footer_color take priority over band colors. * first_band_color takes priority over second_band_color. * row_properties takes priority over column_properties. For example, the first row color takes priority over the first column color, but the first column color takes priority over the second row color. Similarly, the row header takes priority over the column header in the top left cell, but the column header takes priority over the first row color if the row header is not set.
    """ # noqa: E501
    first_band_color: Optional[Color] = Field(default=None, alias="firstBandColor")
    first_band_color_style: Optional[ColorStyle] = Field(default=None, alias="firstBandColorStyle")
    footer_color: Optional[Color] = Field(default=None, alias="footerColor")
    footer_color_style: Optional[ColorStyle] = Field(default=None, alias="footerColorStyle")
    header_color: Optional[Color] = Field(default=None, alias="headerColor")
    header_color_style: Optional[ColorStyle] = Field(default=None, alias="headerColorStyle")
    second_band_color: Optional[Color] = Field(default=None, alias="secondBandColor")
    second_band_color_style: Optional[ColorStyle] = Field(default=None, alias="secondBandColorStyle")
    __properties: ClassVar[List[str]] = ["firstBandColor", "firstBandColorStyle", "footerColor", "footerColorStyle", "headerColor", "headerColorStyle", "secondBandColor", "secondBandColorStyle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BandingProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of first_band_color
        if self.first_band_color:
            _dict['firstBandColor'] = self.first_band_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of first_band_color_style
        if self.first_band_color_style:
            _dict['firstBandColorStyle'] = self.first_band_color_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of footer_color
        if self.footer_color:
            _dict['footerColor'] = self.footer_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of footer_color_style
        if self.footer_color_style:
            _dict['footerColorStyle'] = self.footer_color_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of header_color
        if self.header_color:
            _dict['headerColor'] = self.header_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of header_color_style
        if self.header_color_style:
            _dict['headerColorStyle'] = self.header_color_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of second_band_color
        if self.second_band_color:
            _dict['secondBandColor'] = self.second_band_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of second_band_color_style
        if self.second_band_color_style:
            _dict['secondBandColorStyle'] = self.second_band_color_style.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BandingProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "firstBandColor": Color.from_dict(obj["firstBandColor"]) if obj.get("firstBandColor") is not None else None,
            "firstBandColorStyle": ColorStyle.from_dict(obj["firstBandColorStyle"]) if obj.get("firstBandColorStyle") is not None else None,
            "footerColor": Color.from_dict(obj["footerColor"]) if obj.get("footerColor") is not None else None,
            "footerColorStyle": ColorStyle.from_dict(obj["footerColorStyle"]) if obj.get("footerColorStyle") is not None else None,
            "headerColor": Color.from_dict(obj["headerColor"]) if obj.get("headerColor") is not None else None,
            "headerColorStyle": ColorStyle.from_dict(obj["headerColorStyle"]) if obj.get("headerColorStyle") is not None else None,
            "secondBandColor": Color.from_dict(obj["secondBandColor"]) if obj.get("secondBandColor") is not None else None,
            "secondBandColorStyle": ColorStyle.from_dict(obj["secondBandColorStyle"]) if obj.get("secondBandColorStyle") is not None else None
        })
        return _obj



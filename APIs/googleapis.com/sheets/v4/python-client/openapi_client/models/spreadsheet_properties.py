# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cell_format import CellFormat
from openapi_client.models.iterative_calculation_settings import IterativeCalculationSettings
from openapi_client.models.spreadsheet_theme import SpreadsheetTheme
from typing import Optional, Set
from typing_extensions import Self

class SpreadsheetProperties(BaseModel):
    """
    Properties of a spreadsheet.
    """ # noqa: E501
    auto_recalc: Optional[StrictStr] = Field(default=None, description="The amount of time to wait before volatile functions are recalculated.", alias="autoRecalc")
    default_format: Optional[CellFormat] = Field(default=None, alias="defaultFormat")
    iterative_calculation_settings: Optional[IterativeCalculationSettings] = Field(default=None, alias="iterativeCalculationSettings")
    locale: Optional[StrictStr] = Field(default=None, description="The locale of the spreadsheet in one of the following formats: * an ISO 639-1 language code such as `en` * an ISO 639-2 language code such as `fil`, if no 639-1 code exists * a combination of the ISO language code and country code, such as `en_US` Note: when updating this field, not all locales/languages are supported.")
    spreadsheet_theme: Optional[SpreadsheetTheme] = Field(default=None, alias="spreadsheetTheme")
    time_zone: Optional[StrictStr] = Field(default=None, description="The time zone of the spreadsheet, in CLDR format such as `America/New_York`. If the time zone isn't recognized, this may be a custom time zone such as `GMT-07:00`.", alias="timeZone")
    title: Optional[StrictStr] = Field(default=None, description="The title of the spreadsheet.")
    __properties: ClassVar[List[str]] = ["autoRecalc", "defaultFormat", "iterativeCalculationSettings", "locale", "spreadsheetTheme", "timeZone", "title"]

    @field_validator('auto_recalc')
    def auto_recalc_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RECALCULATION_INTERVAL_UNSPECIFIED', 'ON_CHANGE', 'MINUTE', 'HOUR']):
            raise ValueError("must be one of enum values ('RECALCULATION_INTERVAL_UNSPECIFIED', 'ON_CHANGE', 'MINUTE', 'HOUR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpreadsheetProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_format
        if self.default_format:
            _dict['defaultFormat'] = self.default_format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of iterative_calculation_settings
        if self.iterative_calculation_settings:
            _dict['iterativeCalculationSettings'] = self.iterative_calculation_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spreadsheet_theme
        if self.spreadsheet_theme:
            _dict['spreadsheetTheme'] = self.spreadsheet_theme.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpreadsheetProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoRecalc": obj.get("autoRecalc"),
            "defaultFormat": CellFormat.from_dict(obj["defaultFormat"]) if obj.get("defaultFormat") is not None else None,
            "iterativeCalculationSettings": IterativeCalculationSettings.from_dict(obj["iterativeCalculationSettings"]) if obj.get("iterativeCalculationSettings") is not None else None,
            "locale": obj.get("locale"),
            "spreadsheetTheme": SpreadsheetTheme.from_dict(obj["spreadsheetTheme"]) if obj.get("spreadsheetTheme") is not None else None,
            "timeZone": obj.get("timeZone"),
            "title": obj.get("title")
        })
        return _obj



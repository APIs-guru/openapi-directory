# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.chart_group_rule import ChartGroupRule
from openapi_client.models.chart_source_range import ChartSourceRange
from openapi_client.models.data_source_column_reference import DataSourceColumnReference
from typing import Optional, Set
from typing_extensions import Self

class ChartData(BaseModel):
    """
    The data included in a domain or series.
    """ # noqa: E501
    aggregate_type: Optional[StrictStr] = Field(default=None, description="The aggregation type for the series of a data source chart. Only supported for data source charts.", alias="aggregateType")
    column_reference: Optional[DataSourceColumnReference] = Field(default=None, alias="columnReference")
    group_rule: Optional[ChartGroupRule] = Field(default=None, alias="groupRule")
    source_range: Optional[ChartSourceRange] = Field(default=None, alias="sourceRange")
    __properties: ClassVar[List[str]] = ["aggregateType", "columnReference", "groupRule", "sourceRange"]

    @field_validator('aggregate_type')
    def aggregate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHART_AGGREGATE_TYPE_UNSPECIFIED', 'AVERAGE', 'COUNT', 'MAX', 'MEDIAN', 'MIN', 'SUM']):
            raise ValueError("must be one of enum values ('CHART_AGGREGATE_TYPE_UNSPECIFIED', 'AVERAGE', 'COUNT', 'MAX', 'MEDIAN', 'MIN', 'SUM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChartData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of column_reference
        if self.column_reference:
            _dict['columnReference'] = self.column_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group_rule
        if self.group_rule:
            _dict['groupRule'] = self.group_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_range
        if self.source_range:
            _dict['sourceRange'] = self.source_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChartData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregateType": obj.get("aggregateType"),
            "columnReference": DataSourceColumnReference.from_dict(obj["columnReference"]) if obj.get("columnReference") is not None else None,
            "groupRule": ChartGroupRule.from_dict(obj["groupRule"]) if obj.get("groupRule") is not None else None,
            "sourceRange": ChartSourceRange.from_dict(obj["sourceRange"]) if obj.get("sourceRange") is not None else None
        })
        return _obj



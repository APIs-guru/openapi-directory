# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.border import Border
from openapi_client.models.grid_range import GridRange
from typing import Optional, Set
from typing_extensions import Self

class UpdateBordersRequest(BaseModel):
    """
    Updates the borders of a range. If a field is not set in the request, that means the border remains as-is. For example, with two subsequent UpdateBordersRequest: 1. range: A1:A5 `{ top: RED, bottom: WHITE }` 2. range: A1:A5 `{ left: BLUE }` That would result in A1:A5 having a borders of `{ top: RED, bottom: WHITE, left: BLUE }`. If you want to clear a border, explicitly set the style to NONE.
    """ # noqa: E501
    bottom: Optional[Border] = None
    inner_horizontal: Optional[Border] = Field(default=None, alias="innerHorizontal")
    inner_vertical: Optional[Border] = Field(default=None, alias="innerVertical")
    left: Optional[Border] = None
    range: Optional[GridRange] = None
    right: Optional[Border] = None
    top: Optional[Border] = None
    __properties: ClassVar[List[str]] = ["bottom", "innerHorizontal", "innerVertical", "left", "range", "right", "top"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateBordersRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bottom
        if self.bottom:
            _dict['bottom'] = self.bottom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inner_horizontal
        if self.inner_horizontal:
            _dict['innerHorizontal'] = self.inner_horizontal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inner_vertical
        if self.inner_vertical:
            _dict['innerVertical'] = self.inner_vertical.to_dict()
        # override the default output from pydantic by calling `to_dict()` of left
        if self.left:
            _dict['left'] = self.left.to_dict()
        # override the default output from pydantic by calling `to_dict()` of range
        if self.range:
            _dict['range'] = self.range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of right
        if self.right:
            _dict['right'] = self.right.to_dict()
        # override the default output from pydantic by calling `to_dict()` of top
        if self.top:
            _dict['top'] = self.top.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateBordersRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bottom": Border.from_dict(obj["bottom"]) if obj.get("bottom") is not None else None,
            "innerHorizontal": Border.from_dict(obj["innerHorizontal"]) if obj.get("innerHorizontal") is not None else None,
            "innerVertical": Border.from_dict(obj["innerVertical"]) if obj.get("innerVertical") is not None else None,
            "left": Border.from_dict(obj["left"]) if obj.get("left") is not None else None,
            "range": GridRange.from_dict(obj["range"]) if obj.get("range") is not None else None,
            "right": Border.from_dict(obj["right"]) if obj.get("right") is not None else None,
            "top": Border.from_dict(obj["top"]) if obj.get("top") is not None else None
        })
        return _obj



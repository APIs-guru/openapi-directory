# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.color import Color
from openapi_client.models.color_style import ColorStyle
from openapi_client.models.data_source_sheet_properties import DataSourceSheetProperties
from openapi_client.models.grid_properties import GridProperties
from typing import Optional, Set
from typing_extensions import Self

class SheetProperties(BaseModel):
    """
    Properties of a sheet.
    """ # noqa: E501
    data_source_sheet_properties: Optional[DataSourceSheetProperties] = Field(default=None, alias="dataSourceSheetProperties")
    grid_properties: Optional[GridProperties] = Field(default=None, alias="gridProperties")
    hidden: Optional[StrictBool] = Field(default=None, description="True if the sheet is hidden in the UI, false if it's visible.")
    index: Optional[StrictInt] = Field(default=None, description="The index of the sheet within the spreadsheet. When adding or updating sheet properties, if this field is excluded then the sheet is added or moved to the end of the sheet list. When updating sheet indices or inserting sheets, movement is considered in \"before the move\" indexes. For example, if there were three sheets (S1, S2, S3) in order to move S1 ahead of S2 the index would have to be set to 2. A sheet index update request is ignored if the requested index is identical to the sheets current index or if the requested new index is equal to the current sheet index + 1.")
    right_to_left: Optional[StrictBool] = Field(default=None, description="True if the sheet is an RTL sheet instead of an LTR sheet.", alias="rightToLeft")
    sheet_id: Optional[StrictInt] = Field(default=None, description="The ID of the sheet. Must be non-negative. This field cannot be changed once set.", alias="sheetId")
    sheet_type: Optional[StrictStr] = Field(default=None, description="The type of sheet. Defaults to GRID. This field cannot be changed once set.", alias="sheetType")
    tab_color: Optional[Color] = Field(default=None, alias="tabColor")
    tab_color_style: Optional[ColorStyle] = Field(default=None, alias="tabColorStyle")
    title: Optional[StrictStr] = Field(default=None, description="The name of the sheet.")
    __properties: ClassVar[List[str]] = ["dataSourceSheetProperties", "gridProperties", "hidden", "index", "rightToLeft", "sheetId", "sheetType", "tabColor", "tabColorStyle", "title"]

    @field_validator('sheet_type')
    def sheet_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SHEET_TYPE_UNSPECIFIED', 'GRID', 'OBJECT', 'DATA_SOURCE']):
            raise ValueError("must be one of enum values ('SHEET_TYPE_UNSPECIFIED', 'GRID', 'OBJECT', 'DATA_SOURCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SheetProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_source_sheet_properties
        if self.data_source_sheet_properties:
            _dict['dataSourceSheetProperties'] = self.data_source_sheet_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of grid_properties
        if self.grid_properties:
            _dict['gridProperties'] = self.grid_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tab_color
        if self.tab_color:
            _dict['tabColor'] = self.tab_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tab_color_style
        if self.tab_color_style:
            _dict['tabColorStyle'] = self.tab_color_style.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SheetProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataSourceSheetProperties": DataSourceSheetProperties.from_dict(obj["dataSourceSheetProperties"]) if obj.get("dataSourceSheetProperties") is not None else None,
            "gridProperties": GridProperties.from_dict(obj["gridProperties"]) if obj.get("gridProperties") is not None else None,
            "hidden": obj.get("hidden"),
            "index": obj.get("index"),
            "rightToLeft": obj.get("rightToLeft"),
            "sheetId": obj.get("sheetId"),
            "sheetType": obj.get("sheetType"),
            "tabColor": Color.from_dict(obj["tabColor"]) if obj.get("tabColor") is not None else None,
            "tabColorStyle": ColorStyle.from_dict(obj["tabColorStyle"]) if obj.get("tabColorStyle") is not None else None,
            "title": obj.get("title")
        })
        return _obj



# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.chart_data import ChartData
from openapi_client.models.color import Color
from openapi_client.models.color_style import ColorStyle
from openapi_client.models.text_format import TextFormat
from typing import Optional, Set
from typing_extensions import Self

class BubbleChartSpec(BaseModel):
    """
    A bubble chart.
    """ # noqa: E501
    bubble_border_color: Optional[Color] = Field(default=None, alias="bubbleBorderColor")
    bubble_border_color_style: Optional[ColorStyle] = Field(default=None, alias="bubbleBorderColorStyle")
    bubble_labels: Optional[ChartData] = Field(default=None, alias="bubbleLabels")
    bubble_max_radius_size: Optional[StrictInt] = Field(default=None, description="The max radius size of the bubbles, in pixels. If specified, the field must be a positive value.", alias="bubbleMaxRadiusSize")
    bubble_min_radius_size: Optional[StrictInt] = Field(default=None, description="The minimum radius size of the bubbles, in pixels. If specific, the field must be a positive value.", alias="bubbleMinRadiusSize")
    bubble_opacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The opacity of the bubbles between 0 and 1.0. 0 is fully transparent and 1 is fully opaque.", alias="bubbleOpacity")
    bubble_sizes: Optional[ChartData] = Field(default=None, alias="bubbleSizes")
    bubble_text_style: Optional[TextFormat] = Field(default=None, alias="bubbleTextStyle")
    domain: Optional[ChartData] = None
    group_ids: Optional[ChartData] = Field(default=None, alias="groupIds")
    legend_position: Optional[StrictStr] = Field(default=None, description="Where the legend of the chart should be drawn.", alias="legendPosition")
    series: Optional[ChartData] = None
    __properties: ClassVar[List[str]] = ["bubbleBorderColor", "bubbleBorderColorStyle", "bubbleLabels", "bubbleMaxRadiusSize", "bubbleMinRadiusSize", "bubbleOpacity", "bubbleSizes", "bubbleTextStyle", "domain", "groupIds", "legendPosition", "series"]

    @field_validator('legend_position')
    def legend_position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED', 'BOTTOM_LEGEND', 'LEFT_LEGEND', 'RIGHT_LEGEND', 'TOP_LEGEND', 'NO_LEGEND', 'INSIDE_LEGEND']):
            raise ValueError("must be one of enum values ('BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED', 'BOTTOM_LEGEND', 'LEFT_LEGEND', 'RIGHT_LEGEND', 'TOP_LEGEND', 'NO_LEGEND', 'INSIDE_LEGEND')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BubbleChartSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bubble_border_color
        if self.bubble_border_color:
            _dict['bubbleBorderColor'] = self.bubble_border_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bubble_border_color_style
        if self.bubble_border_color_style:
            _dict['bubbleBorderColorStyle'] = self.bubble_border_color_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bubble_labels
        if self.bubble_labels:
            _dict['bubbleLabels'] = self.bubble_labels.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bubble_sizes
        if self.bubble_sizes:
            _dict['bubbleSizes'] = self.bubble_sizes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bubble_text_style
        if self.bubble_text_style:
            _dict['bubbleTextStyle'] = self.bubble_text_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of domain
        if self.domain:
            _dict['domain'] = self.domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group_ids
        if self.group_ids:
            _dict['groupIds'] = self.group_ids.to_dict()
        # override the default output from pydantic by calling `to_dict()` of series
        if self.series:
            _dict['series'] = self.series.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BubbleChartSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bubbleBorderColor": Color.from_dict(obj["bubbleBorderColor"]) if obj.get("bubbleBorderColor") is not None else None,
            "bubbleBorderColorStyle": ColorStyle.from_dict(obj["bubbleBorderColorStyle"]) if obj.get("bubbleBorderColorStyle") is not None else None,
            "bubbleLabels": ChartData.from_dict(obj["bubbleLabels"]) if obj.get("bubbleLabels") is not None else None,
            "bubbleMaxRadiusSize": obj.get("bubbleMaxRadiusSize"),
            "bubbleMinRadiusSize": obj.get("bubbleMinRadiusSize"),
            "bubbleOpacity": obj.get("bubbleOpacity"),
            "bubbleSizes": ChartData.from_dict(obj["bubbleSizes"]) if obj.get("bubbleSizes") is not None else None,
            "bubbleTextStyle": TextFormat.from_dict(obj["bubbleTextStyle"]) if obj.get("bubbleTextStyle") is not None else None,
            "domain": ChartData.from_dict(obj["domain"]) if obj.get("domain") is not None else None,
            "groupIds": ChartData.from_dict(obj["groupIds"]) if obj.get("groupIds") is not None else None,
            "legendPosition": obj.get("legendPosition"),
            "series": ChartData.from_dict(obj["series"]) if obj.get("series") is not None else None
        })
        return _obj



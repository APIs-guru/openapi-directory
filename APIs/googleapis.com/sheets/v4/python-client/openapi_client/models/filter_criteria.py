# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.boolean_condition import BooleanCondition
from openapi_client.models.color import Color
from openapi_client.models.color_style import ColorStyle
from typing import Optional, Set
from typing_extensions import Self

class FilterCriteria(BaseModel):
    """
    Criteria for showing/hiding rows in a filter or filter view.
    """ # noqa: E501
    condition: Optional[BooleanCondition] = None
    hidden_values: Optional[List[StrictStr]] = Field(default=None, description="Values that should be hidden.", alias="hiddenValues")
    visible_background_color: Optional[Color] = Field(default=None, alias="visibleBackgroundColor")
    visible_background_color_style: Optional[ColorStyle] = Field(default=None, alias="visibleBackgroundColorStyle")
    visible_foreground_color: Optional[Color] = Field(default=None, alias="visibleForegroundColor")
    visible_foreground_color_style: Optional[ColorStyle] = Field(default=None, alias="visibleForegroundColorStyle")
    __properties: ClassVar[List[str]] = ["condition", "hiddenValues", "visibleBackgroundColor", "visibleBackgroundColorStyle", "visibleForegroundColor", "visibleForegroundColorStyle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilterCriteria from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of condition
        if self.condition:
            _dict['condition'] = self.condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of visible_background_color
        if self.visible_background_color:
            _dict['visibleBackgroundColor'] = self.visible_background_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of visible_background_color_style
        if self.visible_background_color_style:
            _dict['visibleBackgroundColorStyle'] = self.visible_background_color_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of visible_foreground_color
        if self.visible_foreground_color:
            _dict['visibleForegroundColor'] = self.visible_foreground_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of visible_foreground_color_style
        if self.visible_foreground_color_style:
            _dict['visibleForegroundColorStyle'] = self.visible_foreground_color_style.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilterCriteria from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "condition": BooleanCondition.from_dict(obj["condition"]) if obj.get("condition") is not None else None,
            "hiddenValues": obj.get("hiddenValues"),
            "visibleBackgroundColor": Color.from_dict(obj["visibleBackgroundColor"]) if obj.get("visibleBackgroundColor") is not None else None,
            "visibleBackgroundColorStyle": ColorStyle.from_dict(obj["visibleBackgroundColorStyle"]) if obj.get("visibleBackgroundColorStyle") is not None else None,
            "visibleForegroundColor": Color.from_dict(obj["visibleForegroundColor"]) if obj.get("visibleForegroundColor") is not None else None,
            "visibleForegroundColorStyle": ColorStyle.from_dict(obj["visibleForegroundColorStyle"]) if obj.get("visibleForegroundColorStyle") is not None else None
        })
        return _obj



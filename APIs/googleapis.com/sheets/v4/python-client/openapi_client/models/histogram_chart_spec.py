# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.histogram_series import HistogramSeries
from typing import Optional, Set
from typing_extensions import Self

class HistogramChartSpec(BaseModel):
    """
    A histogram chart. A histogram chart groups data items into bins, displaying each bin as a column of stacked items. Histograms are used to display the distribution of a dataset. Each column of items represents a range into which those items fall. The number of bins can be chosen automatically or specified explicitly.
    """ # noqa: E501
    bucket_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="By default the bucket size (the range of values stacked in a single column) is chosen automatically, but it may be overridden here. E.g., A bucket size of 1.5 results in buckets from 0 - 1.5, 1.5 - 3.0, etc. Cannot be negative. This field is optional.", alias="bucketSize")
    legend_position: Optional[StrictStr] = Field(default=None, description="The position of the chart legend.", alias="legendPosition")
    outlier_percentile: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The outlier percentile is used to ensure that outliers do not adversely affect the calculation of bucket sizes. For example, setting an outlier percentile of 0.05 indicates that the top and bottom 5% of values when calculating buckets. The values are still included in the chart, they will be added to the first or last buckets instead of their own buckets. Must be between 0.0 and 0.5.", alias="outlierPercentile")
    series: Optional[List[HistogramSeries]] = Field(default=None, description="The series for a histogram may be either a single series of values to be bucketed or multiple series, each of the same length, containing the name of the series followed by the values to be bucketed for that series.")
    show_item_dividers: Optional[StrictBool] = Field(default=None, description="Whether horizontal divider lines should be displayed between items in each column.", alias="showItemDividers")
    __properties: ClassVar[List[str]] = ["bucketSize", "legendPosition", "outlierPercentile", "series", "showItemDividers"]

    @field_validator('legend_position')
    def legend_position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED', 'BOTTOM_LEGEND', 'LEFT_LEGEND', 'RIGHT_LEGEND', 'TOP_LEGEND', 'NO_LEGEND', 'INSIDE_LEGEND']):
            raise ValueError("must be one of enum values ('HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED', 'BOTTOM_LEGEND', 'LEFT_LEGEND', 'RIGHT_LEGEND', 'TOP_LEGEND', 'NO_LEGEND', 'INSIDE_LEGEND')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HistogramChartSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in series (list)
        _items = []
        if self.series:
            for _item_series in self.series:
                if _item_series:
                    _items.append(_item_series.to_dict())
            _dict['series'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HistogramChartSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bucketSize": obj.get("bucketSize"),
            "legendPosition": obj.get("legendPosition"),
            "outlierPercentile": obj.get("outlierPercentile"),
            "series": [HistogramSeries.from_dict(_item) for _item in obj["series"]] if obj.get("series") is not None else None,
            "showItemDividers": obj.get("showItemDividers")
        })
        return _obj



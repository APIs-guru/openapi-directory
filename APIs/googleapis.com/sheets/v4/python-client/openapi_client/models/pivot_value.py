# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_source_column_reference import DataSourceColumnReference
from typing import Optional, Set
from typing_extensions import Self

class PivotValue(BaseModel):
    """
    The definition of how a value in a pivot table should be calculated.
    """ # noqa: E501
    calculated_display_type: Optional[StrictStr] = Field(default=None, description="If specified, indicates that pivot values should be displayed as the result of a calculation with another pivot value. For example, if calculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the pivot values are displayed as the percentage of the grand total. In the Sheets editor, this is referred to as \"Show As\" in the value section of a pivot table.", alias="calculatedDisplayType")
    data_source_column_reference: Optional[DataSourceColumnReference] = Field(default=None, alias="dataSourceColumnReference")
    formula: Optional[StrictStr] = Field(default=None, description="A custom formula to calculate the value. The formula must start with an `=` character.")
    name: Optional[StrictStr] = Field(default=None, description="A name to use for the value.")
    source_column_offset: Optional[StrictInt] = Field(default=None, description="The column offset of the source range that this value reads from. For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0` means this value refers to column `C`, whereas the offset `1` would refer to column `D`.", alias="sourceColumnOffset")
    summarize_function: Optional[StrictStr] = Field(default=None, description="A function to summarize the value. If formula is set, the only supported values are SUM and CUSTOM. If sourceColumnOffset is set, then `CUSTOM` is not supported.", alias="summarizeFunction")
    __properties: ClassVar[List[str]] = ["calculatedDisplayType", "dataSourceColumnReference", "formula", "name", "sourceColumnOffset", "summarizeFunction"]

    @field_validator('calculated_display_type')
    def calculated_display_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED', 'PERCENT_OF_ROW_TOTAL', 'PERCENT_OF_COLUMN_TOTAL', 'PERCENT_OF_GRAND_TOTAL']):
            raise ValueError("must be one of enum values ('PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED', 'PERCENT_OF_ROW_TOTAL', 'PERCENT_OF_COLUMN_TOTAL', 'PERCENT_OF_GRAND_TOTAL')")
        return value

    @field_validator('summarize_function')
    def summarize_function_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED', 'SUM', 'COUNTA', 'COUNT', 'COUNTUNIQUE', 'AVERAGE', 'MAX', 'MIN', 'MEDIAN', 'PRODUCT', 'STDEV', 'STDEVP', 'VAR', 'VARP', 'CUSTOM']):
            raise ValueError("must be one of enum values ('PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED', 'SUM', 'COUNTA', 'COUNT', 'COUNTUNIQUE', 'AVERAGE', 'MAX', 'MIN', 'MEDIAN', 'PRODUCT', 'STDEV', 'STDEVP', 'VAR', 'VARP', 'CUSTOM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PivotValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_source_column_reference
        if self.data_source_column_reference:
            _dict['dataSourceColumnReference'] = self.data_source_column_reference.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PivotValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "calculatedDisplayType": obj.get("calculatedDisplayType"),
            "dataSourceColumnReference": DataSourceColumnReference.from_dict(obj["dataSourceColumnReference"]) if obj.get("dataSourceColumnReference") is not None else None,
            "formula": obj.get("formula"),
            "name": obj.get("name"),
            "sourceColumnOffset": obj.get("sourceColumnOffset"),
            "summarizeFunction": obj.get("summarizeFunction")
        })
        return _obj



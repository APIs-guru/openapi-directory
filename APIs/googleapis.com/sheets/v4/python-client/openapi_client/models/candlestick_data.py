# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.candlestick_series import CandlestickSeries
from typing import Optional, Set
from typing_extensions import Self

class CandlestickData(BaseModel):
    """
    The Candlestick chart data, each containing the low, open, close, and high values for a series.
    """ # noqa: E501
    close_series: Optional[CandlestickSeries] = Field(default=None, alias="closeSeries")
    high_series: Optional[CandlestickSeries] = Field(default=None, alias="highSeries")
    low_series: Optional[CandlestickSeries] = Field(default=None, alias="lowSeries")
    open_series: Optional[CandlestickSeries] = Field(default=None, alias="openSeries")
    __properties: ClassVar[List[str]] = ["closeSeries", "highSeries", "lowSeries", "openSeries"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CandlestickData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of close_series
        if self.close_series:
            _dict['closeSeries'] = self.close_series.to_dict()
        # override the default output from pydantic by calling `to_dict()` of high_series
        if self.high_series:
            _dict['highSeries'] = self.high_series.to_dict()
        # override the default output from pydantic by calling `to_dict()` of low_series
        if self.low_series:
            _dict['lowSeries'] = self.low_series.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_series
        if self.open_series:
            _dict['openSeries'] = self.open_series.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CandlestickData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "closeSeries": CandlestickSeries.from_dict(obj["closeSeries"]) if obj.get("closeSeries") is not None else None,
            "highSeries": CandlestickSeries.from_dict(obj["highSeries"]) if obj.get("highSeries") is not None else None,
            "lowSeries": CandlestickSeries.from_dict(obj["lowSeries"]) if obj.get("lowSeries") is not None else None,
            "openSeries": CandlestickSeries.from_dict(obj["openSeries"]) if obj.get("openSeries") is not None else None
        })
        return _obj



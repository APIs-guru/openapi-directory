# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_filter_value_range import DataFilterValueRange
from typing import Optional, Set
from typing_extensions import Self

class BatchUpdateValuesByDataFilterRequest(BaseModel):
    """
    The request for updating more than one range of values in a spreadsheet.
    """ # noqa: E501
    data: Optional[List[DataFilterValueRange]] = Field(default=None, description="The new values to apply to the spreadsheet. If more than one range is matched by the specified DataFilter the specified values are applied to all of those ranges.")
    include_values_in_response: Optional[StrictBool] = Field(default=None, description="Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. The `updatedData` field within each of the BatchUpdateValuesResponse.responses contains the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns).", alias="includeValuesInResponse")
    response_date_time_render_option: Optional[StrictStr] = Field(default=None, description="Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.", alias="responseDateTimeRenderOption")
    response_value_render_option: Optional[StrictStr] = Field(default=None, description="Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.", alias="responseValueRenderOption")
    value_input_option: Optional[StrictStr] = Field(default=None, description="How the input data should be interpreted.", alias="valueInputOption")
    __properties: ClassVar[List[str]] = ["data", "includeValuesInResponse", "responseDateTimeRenderOption", "responseValueRenderOption", "valueInputOption"]

    @field_validator('response_date_time_render_option')
    def response_date_time_render_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SERIAL_NUMBER', 'FORMATTED_STRING']):
            raise ValueError("must be one of enum values ('SERIAL_NUMBER', 'FORMATTED_STRING')")
        return value

    @field_validator('response_value_render_option')
    def response_value_render_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FORMATTED_VALUE', 'UNFORMATTED_VALUE', 'FORMULA']):
            raise ValueError("must be one of enum values ('FORMATTED_VALUE', 'UNFORMATTED_VALUE', 'FORMULA')")
        return value

    @field_validator('value_input_option')
    def value_input_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INPUT_VALUE_OPTION_UNSPECIFIED', 'RAW', 'USER_ENTERED']):
            raise ValueError("must be one of enum values ('INPUT_VALUE_OPTION_UNSPECIFIED', 'RAW', 'USER_ENTERED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BatchUpdateValuesByDataFilterRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item_data in self.data:
                if _item_data:
                    _items.append(_item_data.to_dict())
            _dict['data'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BatchUpdateValuesByDataFilterRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "data": [DataFilterValueRange.from_dict(_item) for _item in obj["data"]] if obj.get("data") is not None else None,
            "includeValuesInResponse": obj.get("includeValuesInResponse"),
            "responseDateTimeRenderOption": obj.get("responseDateTimeRenderOption"),
            "responseValueRenderOption": obj.get("responseValueRenderOption"),
            "valueInputOption": obj.get("valueInputOption")
        })
        return _obj



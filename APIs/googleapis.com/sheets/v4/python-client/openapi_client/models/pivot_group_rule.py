# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.date_time_rule import DateTimeRule
from openapi_client.models.histogram_rule import HistogramRule
from openapi_client.models.manual_rule import ManualRule
from typing import Optional, Set
from typing_extensions import Self

class PivotGroupRule(BaseModel):
    """
    An optional setting on a PivotGroup that defines buckets for the values in the source data column rather than breaking out each individual value. Only one PivotGroup with a group rule may be added for each column in the source data, though on any given column you may add both a PivotGroup that has a rule and a PivotGroup that does not.
    """ # noqa: E501
    date_time_rule: Optional[DateTimeRule] = Field(default=None, alias="dateTimeRule")
    histogram_rule: Optional[HistogramRule] = Field(default=None, alias="histogramRule")
    manual_rule: Optional[ManualRule] = Field(default=None, alias="manualRule")
    __properties: ClassVar[List[str]] = ["dateTimeRule", "histogramRule", "manualRule"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PivotGroupRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_time_rule
        if self.date_time_rule:
            _dict['dateTimeRule'] = self.date_time_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of histogram_rule
        if self.histogram_rule:
            _dict['histogramRule'] = self.histogram_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manual_rule
        if self.manual_rule:
            _dict['manualRule'] = self.manual_rule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PivotGroupRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dateTimeRule": DateTimeRule.from_dict(obj["dateTimeRule"]) if obj.get("dateTimeRule") is not None else None,
            "histogramRule": HistogramRule.from_dict(obj["histogramRule"]) if obj.get("histogramRule") is not None else None,
            "manualRule": ManualRule.from_dict(obj["manualRule"]) if obj.get("manualRule") is not None else None
        })
        return _obj



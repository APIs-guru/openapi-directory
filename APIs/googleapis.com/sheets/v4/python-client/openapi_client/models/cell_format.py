# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.borders import Borders
from openapi_client.models.color import Color
from openapi_client.models.color_style import ColorStyle
from openapi_client.models.number_format import NumberFormat
from openapi_client.models.padding import Padding
from openapi_client.models.text_format import TextFormat
from openapi_client.models.text_rotation import TextRotation
from typing import Optional, Set
from typing_extensions import Self

class CellFormat(BaseModel):
    """
    The format of a cell.
    """ # noqa: E501
    background_color: Optional[Color] = Field(default=None, alias="backgroundColor")
    background_color_style: Optional[ColorStyle] = Field(default=None, alias="backgroundColorStyle")
    borders: Optional[Borders] = None
    horizontal_alignment: Optional[StrictStr] = Field(default=None, description="The horizontal alignment of the value in the cell.", alias="horizontalAlignment")
    hyperlink_display_type: Optional[StrictStr] = Field(default=None, description="If one exists, how a hyperlink should be displayed in the cell.", alias="hyperlinkDisplayType")
    number_format: Optional[NumberFormat] = Field(default=None, alias="numberFormat")
    padding: Optional[Padding] = None
    text_direction: Optional[StrictStr] = Field(default=None, description="The direction of the text in the cell.", alias="textDirection")
    text_format: Optional[TextFormat] = Field(default=None, alias="textFormat")
    text_rotation: Optional[TextRotation] = Field(default=None, alias="textRotation")
    vertical_alignment: Optional[StrictStr] = Field(default=None, description="The vertical alignment of the value in the cell.", alias="verticalAlignment")
    wrap_strategy: Optional[StrictStr] = Field(default=None, description="The wrap strategy for the value in the cell.", alias="wrapStrategy")
    __properties: ClassVar[List[str]] = ["backgroundColor", "backgroundColorStyle", "borders", "horizontalAlignment", "hyperlinkDisplayType", "numberFormat", "padding", "textDirection", "textFormat", "textRotation", "verticalAlignment", "wrapStrategy"]

    @field_validator('horizontal_alignment')
    def horizontal_alignment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HORIZONTAL_ALIGN_UNSPECIFIED', 'LEFT', 'CENTER', 'RIGHT']):
            raise ValueError("must be one of enum values ('HORIZONTAL_ALIGN_UNSPECIFIED', 'LEFT', 'CENTER', 'RIGHT')")
        return value

    @field_validator('hyperlink_display_type')
    def hyperlink_display_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HYPERLINK_DISPLAY_TYPE_UNSPECIFIED', 'LINKED', 'PLAIN_TEXT']):
            raise ValueError("must be one of enum values ('HYPERLINK_DISPLAY_TYPE_UNSPECIFIED', 'LINKED', 'PLAIN_TEXT')")
        return value

    @field_validator('text_direction')
    def text_direction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TEXT_DIRECTION_UNSPECIFIED', 'LEFT_TO_RIGHT', 'RIGHT_TO_LEFT']):
            raise ValueError("must be one of enum values ('TEXT_DIRECTION_UNSPECIFIED', 'LEFT_TO_RIGHT', 'RIGHT_TO_LEFT')")
        return value

    @field_validator('vertical_alignment')
    def vertical_alignment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VERTICAL_ALIGN_UNSPECIFIED', 'TOP', 'MIDDLE', 'BOTTOM']):
            raise ValueError("must be one of enum values ('VERTICAL_ALIGN_UNSPECIFIED', 'TOP', 'MIDDLE', 'BOTTOM')")
        return value

    @field_validator('wrap_strategy')
    def wrap_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WRAP_STRATEGY_UNSPECIFIED', 'OVERFLOW_CELL', 'LEGACY_WRAP', 'CLIP', 'WRAP']):
            raise ValueError("must be one of enum values ('WRAP_STRATEGY_UNSPECIFIED', 'OVERFLOW_CELL', 'LEGACY_WRAP', 'CLIP', 'WRAP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CellFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of background_color
        if self.background_color:
            _dict['backgroundColor'] = self.background_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of background_color_style
        if self.background_color_style:
            _dict['backgroundColorStyle'] = self.background_color_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of borders
        if self.borders:
            _dict['borders'] = self.borders.to_dict()
        # override the default output from pydantic by calling `to_dict()` of number_format
        if self.number_format:
            _dict['numberFormat'] = self.number_format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of padding
        if self.padding:
            _dict['padding'] = self.padding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_format
        if self.text_format:
            _dict['textFormat'] = self.text_format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_rotation
        if self.text_rotation:
            _dict['textRotation'] = self.text_rotation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CellFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backgroundColor": Color.from_dict(obj["backgroundColor"]) if obj.get("backgroundColor") is not None else None,
            "backgroundColorStyle": ColorStyle.from_dict(obj["backgroundColorStyle"]) if obj.get("backgroundColorStyle") is not None else None,
            "borders": Borders.from_dict(obj["borders"]) if obj.get("borders") is not None else None,
            "horizontalAlignment": obj.get("horizontalAlignment"),
            "hyperlinkDisplayType": obj.get("hyperlinkDisplayType"),
            "numberFormat": NumberFormat.from_dict(obj["numberFormat"]) if obj.get("numberFormat") is not None else None,
            "padding": Padding.from_dict(obj["padding"]) if obj.get("padding") is not None else None,
            "textDirection": obj.get("textDirection"),
            "textFormat": TextFormat.from_dict(obj["textFormat"]) if obj.get("textFormat") is not None else None,
            "textRotation": TextRotation.from_dict(obj["textRotation"]) if obj.get("textRotation") is not None else None,
            "verticalAlignment": obj.get("verticalAlignment"),
            "wrapStrategy": obj.get("wrapStrategy")
        })
        return _obj



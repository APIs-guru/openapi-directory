# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.baseline_value_format import BaselineValueFormat
from openapi_client.models.chart_custom_number_format_options import ChartCustomNumberFormatOptions
from openapi_client.models.chart_data import ChartData
from openapi_client.models.key_value_format import KeyValueFormat
from typing import Optional, Set
from typing_extensions import Self

class ScorecardChartSpec(BaseModel):
    """
    A scorecard chart. Scorecard charts are used to highlight key performance indicators, known as KPIs, on the spreadsheet. A scorecard chart can represent things like total sales, average cost, or a top selling item. You can specify a single data value, or aggregate over a range of data. Percentage or absolute difference from a baseline value can be highlighted, like changes over time.
    """ # noqa: E501
    aggregate_type: Optional[StrictStr] = Field(default=None, description="The aggregation type for key and baseline chart data in scorecard chart. This field is not supported for data source charts. Use the ChartData.aggregateType field of the key_value_data or baseline_value_data instead for data source charts. This field is optional.", alias="aggregateType")
    baseline_value_data: Optional[ChartData] = Field(default=None, alias="baselineValueData")
    baseline_value_format: Optional[BaselineValueFormat] = Field(default=None, alias="baselineValueFormat")
    custom_format_options: Optional[ChartCustomNumberFormatOptions] = Field(default=None, alias="customFormatOptions")
    key_value_data: Optional[ChartData] = Field(default=None, alias="keyValueData")
    key_value_format: Optional[KeyValueFormat] = Field(default=None, alias="keyValueFormat")
    number_format_source: Optional[StrictStr] = Field(default=None, description="The number format source used in the scorecard chart. This field is optional.", alias="numberFormatSource")
    scale_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value to scale scorecard key and baseline value. For example, a factor of 10 can be used to divide all values in the chart by 10. This field is optional.", alias="scaleFactor")
    __properties: ClassVar[List[str]] = ["aggregateType", "baselineValueData", "baselineValueFormat", "customFormatOptions", "keyValueData", "keyValueFormat", "numberFormatSource", "scaleFactor"]

    @field_validator('aggregate_type')
    def aggregate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHART_AGGREGATE_TYPE_UNSPECIFIED', 'AVERAGE', 'COUNT', 'MAX', 'MEDIAN', 'MIN', 'SUM']):
            raise ValueError("must be one of enum values ('CHART_AGGREGATE_TYPE_UNSPECIFIED', 'AVERAGE', 'COUNT', 'MAX', 'MEDIAN', 'MIN', 'SUM')")
        return value

    @field_validator('number_format_source')
    def number_format_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHART_NUMBER_FORMAT_SOURCE_UNDEFINED', 'FROM_DATA', 'CUSTOM']):
            raise ValueError("must be one of enum values ('CHART_NUMBER_FORMAT_SOURCE_UNDEFINED', 'FROM_DATA', 'CUSTOM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScorecardChartSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of baseline_value_data
        if self.baseline_value_data:
            _dict['baselineValueData'] = self.baseline_value_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of baseline_value_format
        if self.baseline_value_format:
            _dict['baselineValueFormat'] = self.baseline_value_format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_format_options
        if self.custom_format_options:
            _dict['customFormatOptions'] = self.custom_format_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of key_value_data
        if self.key_value_data:
            _dict['keyValueData'] = self.key_value_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of key_value_format
        if self.key_value_format:
            _dict['keyValueFormat'] = self.key_value_format.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScorecardChartSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregateType": obj.get("aggregateType"),
            "baselineValueData": ChartData.from_dict(obj["baselineValueData"]) if obj.get("baselineValueData") is not None else None,
            "baselineValueFormat": BaselineValueFormat.from_dict(obj["baselineValueFormat"]) if obj.get("baselineValueFormat") is not None else None,
            "customFormatOptions": ChartCustomNumberFormatOptions.from_dict(obj["customFormatOptions"]) if obj.get("customFormatOptions") is not None else None,
            "keyValueData": ChartData.from_dict(obj["keyValueData"]) if obj.get("keyValueData") is not None else None,
            "keyValueFormat": KeyValueFormat.from_dict(obj["keyValueFormat"]) if obj.get("keyValueFormat") is not None else None,
            "numberFormatSource": obj.get("numberFormatSource"),
            "scaleFactor": obj.get("scaleFactor")
        })
        return _obj



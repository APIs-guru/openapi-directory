# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_label import DataLabel
from openapi_client.models.line_style import LineStyle
from openapi_client.models.waterfall_chart_domain import WaterfallChartDomain
from openapi_client.models.waterfall_chart_series import WaterfallChartSeries
from typing import Optional, Set
from typing_extensions import Self

class WaterfallChartSpec(BaseModel):
    """
    A waterfall chart.
    """ # noqa: E501
    connector_line_style: Optional[LineStyle] = Field(default=None, alias="connectorLineStyle")
    domain: Optional[WaterfallChartDomain] = None
    first_value_is_total: Optional[StrictBool] = Field(default=None, description="True to interpret the first value as a total.", alias="firstValueIsTotal")
    hide_connector_lines: Optional[StrictBool] = Field(default=None, description="True to hide connector lines between columns.", alias="hideConnectorLines")
    series: Optional[List[WaterfallChartSeries]] = Field(default=None, description="The data this waterfall chart is visualizing.")
    stacked_type: Optional[StrictStr] = Field(default=None, description="The stacked type.", alias="stackedType")
    total_data_label: Optional[DataLabel] = Field(default=None, alias="totalDataLabel")
    __properties: ClassVar[List[str]] = ["connectorLineStyle", "domain", "firstValueIsTotal", "hideConnectorLines", "series", "stackedType", "totalDataLabel"]

    @field_validator('stacked_type')
    def stacked_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WATERFALL_STACKED_TYPE_UNSPECIFIED', 'STACKED', 'SEQUENTIAL']):
            raise ValueError("must be one of enum values ('WATERFALL_STACKED_TYPE_UNSPECIFIED', 'STACKED', 'SEQUENTIAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WaterfallChartSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of connector_line_style
        if self.connector_line_style:
            _dict['connectorLineStyle'] = self.connector_line_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of domain
        if self.domain:
            _dict['domain'] = self.domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in series (list)
        _items = []
        if self.series:
            for _item_series in self.series:
                if _item_series:
                    _items.append(_item_series.to_dict())
            _dict['series'] = _items
        # override the default output from pydantic by calling `to_dict()` of total_data_label
        if self.total_data_label:
            _dict['totalDataLabel'] = self.total_data_label.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WaterfallChartSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectorLineStyle": LineStyle.from_dict(obj["connectorLineStyle"]) if obj.get("connectorLineStyle") is not None else None,
            "domain": WaterfallChartDomain.from_dict(obj["domain"]) if obj.get("domain") is not None else None,
            "firstValueIsTotal": obj.get("firstValueIsTotal"),
            "hideConnectorLines": obj.get("hideConnectorLines"),
            "series": [WaterfallChartSeries.from_dict(_item) for _item in obj["series"]] if obj.get("series") is not None else None,
            "stackedType": obj.get("stackedType"),
            "totalDataLabel": DataLabel.from_dict(obj["totalDataLabel"]) if obj.get("totalDataLabel") is not None else None
        })
        return _obj



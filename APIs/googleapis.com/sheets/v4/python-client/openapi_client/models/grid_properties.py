# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GridProperties(BaseModel):
    """
    Properties of a grid.
    """ # noqa: E501
    column_count: Optional[StrictInt] = Field(default=None, description="The number of columns in the grid.", alias="columnCount")
    column_group_control_after: Optional[StrictBool] = Field(default=None, description="True if the column grouping control toggle is shown after the group.", alias="columnGroupControlAfter")
    frozen_column_count: Optional[StrictInt] = Field(default=None, description="The number of columns that are frozen in the grid.", alias="frozenColumnCount")
    frozen_row_count: Optional[StrictInt] = Field(default=None, description="The number of rows that are frozen in the grid.", alias="frozenRowCount")
    hide_gridlines: Optional[StrictBool] = Field(default=None, description="True if the grid isn't showing gridlines in the UI.", alias="hideGridlines")
    row_count: Optional[StrictInt] = Field(default=None, description="The number of rows in the grid.", alias="rowCount")
    row_group_control_after: Optional[StrictBool] = Field(default=None, description="True if the row grouping control toggle is shown after the group.", alias="rowGroupControlAfter")
    __properties: ClassVar[List[str]] = ["columnCount", "columnGroupControlAfter", "frozenColumnCount", "frozenRowCount", "hideGridlines", "rowCount", "rowGroupControlAfter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GridProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GridProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "columnCount": obj.get("columnCount"),
            "columnGroupControlAfter": obj.get("columnGroupControlAfter"),
            "frozenColumnCount": obj.get("frozenColumnCount"),
            "frozenRowCount": obj.get("frozenRowCount"),
            "hideGridlines": obj.get("hideGridlines"),
            "rowCount": obj.get("rowCount"),
            "rowGroupControlAfter": obj.get("rowGroupControlAfter")
        })
        return _obj



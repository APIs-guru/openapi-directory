# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.color import Color
from openapi_client.models.color_style import ColorStyle
from openapi_client.models.data_source_column_reference import DataSourceColumnReference
from typing import Optional, Set
from typing_extensions import Self

class SortSpec(BaseModel):
    """
    A sort order associated with a specific column or row.
    """ # noqa: E501
    background_color: Optional[Color] = Field(default=None, alias="backgroundColor")
    background_color_style: Optional[ColorStyle] = Field(default=None, alias="backgroundColorStyle")
    data_source_column_reference: Optional[DataSourceColumnReference] = Field(default=None, alias="dataSourceColumnReference")
    dimension_index: Optional[StrictInt] = Field(default=None, description="The dimension the sort should be applied to.", alias="dimensionIndex")
    foreground_color: Optional[Color] = Field(default=None, alias="foregroundColor")
    foreground_color_style: Optional[ColorStyle] = Field(default=None, alias="foregroundColorStyle")
    sort_order: Optional[StrictStr] = Field(default=None, description="The order data should be sorted.", alias="sortOrder")
    __properties: ClassVar[List[str]] = ["backgroundColor", "backgroundColorStyle", "dataSourceColumnReference", "dimensionIndex", "foregroundColor", "foregroundColorStyle", "sortOrder"]

    @field_validator('sort_order')
    def sort_order_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SORT_ORDER_UNSPECIFIED', 'ASCENDING', 'DESCENDING']):
            raise ValueError("must be one of enum values ('SORT_ORDER_UNSPECIFIED', 'ASCENDING', 'DESCENDING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SortSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of background_color
        if self.background_color:
            _dict['backgroundColor'] = self.background_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of background_color_style
        if self.background_color_style:
            _dict['backgroundColorStyle'] = self.background_color_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_source_column_reference
        if self.data_source_column_reference:
            _dict['dataSourceColumnReference'] = self.data_source_column_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of foreground_color
        if self.foreground_color:
            _dict['foregroundColor'] = self.foreground_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of foreground_color_style
        if self.foreground_color_style:
            _dict['foregroundColorStyle'] = self.foreground_color_style.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SortSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backgroundColor": Color.from_dict(obj["backgroundColor"]) if obj.get("backgroundColor") is not None else None,
            "backgroundColorStyle": ColorStyle.from_dict(obj["backgroundColorStyle"]) if obj.get("backgroundColorStyle") is not None else None,
            "dataSourceColumnReference": DataSourceColumnReference.from_dict(obj["dataSourceColumnReference"]) if obj.get("dataSourceColumnReference") is not None else None,
            "dimensionIndex": obj.get("dimensionIndex"),
            "foregroundColor": Color.from_dict(obj["foregroundColor"]) if obj.get("foregroundColor") is not None else None,
            "foregroundColorStyle": ColorStyle.from_dict(obj["foregroundColorStyle"]) if obj.get("foregroundColorStyle") is not None else None,
            "sortOrder": obj.get("sortOrder")
        })
        return _obj



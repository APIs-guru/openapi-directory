# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_filter import DataFilter
from typing import Optional, Set
from typing_extensions import Self

class BatchGetValuesByDataFilterRequest(BaseModel):
    """
    The request for retrieving a range of values in a spreadsheet selected by a set of DataFilters.
    """ # noqa: E501
    data_filters: Optional[List[DataFilter]] = Field(default=None, description="The data filters used to match the ranges of values to retrieve. Ranges that match any of the specified data filters are included in the response.", alias="dataFilters")
    date_time_render_option: Optional[StrictStr] = Field(default=None, description="How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.", alias="dateTimeRenderOption")
    major_dimension: Optional[StrictStr] = Field(default=None, description="The major dimension that results should use. For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then a request that selects that range and sets `majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas a request that sets `majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.", alias="majorDimension")
    value_render_option: Optional[StrictStr] = Field(default=None, description="How values should be represented in the output. The default render option is FORMATTED_VALUE.", alias="valueRenderOption")
    __properties: ClassVar[List[str]] = ["dataFilters", "dateTimeRenderOption", "majorDimension", "valueRenderOption"]

    @field_validator('date_time_render_option')
    def date_time_render_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SERIAL_NUMBER', 'FORMATTED_STRING']):
            raise ValueError("must be one of enum values ('SERIAL_NUMBER', 'FORMATTED_STRING')")
        return value

    @field_validator('major_dimension')
    def major_dimension_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DIMENSION_UNSPECIFIED', 'ROWS', 'COLUMNS']):
            raise ValueError("must be one of enum values ('DIMENSION_UNSPECIFIED', 'ROWS', 'COLUMNS')")
        return value

    @field_validator('value_render_option')
    def value_render_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FORMATTED_VALUE', 'UNFORMATTED_VALUE', 'FORMULA']):
            raise ValueError("must be one of enum values ('FORMATTED_VALUE', 'UNFORMATTED_VALUE', 'FORMULA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BatchGetValuesByDataFilterRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data_filters (list)
        _items = []
        if self.data_filters:
            for _item_data_filters in self.data_filters:
                if _item_data_filters:
                    _items.append(_item_data_filters.to_dict())
            _dict['dataFilters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BatchGetValuesByDataFilterRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataFilters": [DataFilter.from_dict(_item) for _item in obj["dataFilters"]] if obj.get("dataFilters") is not None else None,
            "dateTimeRenderOption": obj.get("dateTimeRenderOption"),
            "majorDimension": obj.get("majorDimension"),
            "valueRenderOption": obj.get("valueRenderOption")
        })
        return _obj



# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_source_refresh_daily_schedule import DataSourceRefreshDailySchedule
from openapi_client.models.data_source_refresh_monthly_schedule import DataSourceRefreshMonthlySchedule
from openapi_client.models.data_source_refresh_weekly_schedule import DataSourceRefreshWeeklySchedule
from openapi_client.models.interval import Interval
from typing import Optional, Set
from typing_extensions import Self

class DataSourceRefreshSchedule(BaseModel):
    """
    Schedule for refreshing the data source. Data sources in the spreadsheet are refreshed within a time interval. You can specify the start time by clicking the Scheduled Refresh button in the Sheets editor, but the interval is fixed at 4 hours. For example, if you specify a start time of 8 AM , the refresh will take place between 8 AM and 12 PM every day.
    """ # noqa: E501
    daily_schedule: Optional[DataSourceRefreshDailySchedule] = Field(default=None, alias="dailySchedule")
    enabled: Optional[StrictBool] = Field(default=None, description="True if the refresh schedule is enabled, or false otherwise.")
    monthly_schedule: Optional[DataSourceRefreshMonthlySchedule] = Field(default=None, alias="monthlySchedule")
    next_run: Optional[Interval] = Field(default=None, alias="nextRun")
    refresh_scope: Optional[StrictStr] = Field(default=None, description="The scope of the refresh. Must be ALL_DATA_SOURCES.", alias="refreshScope")
    weekly_schedule: Optional[DataSourceRefreshWeeklySchedule] = Field(default=None, alias="weeklySchedule")
    __properties: ClassVar[List[str]] = ["dailySchedule", "enabled", "monthlySchedule", "nextRun", "refreshScope", "weeklySchedule"]

    @field_validator('refresh_scope')
    def refresh_scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_SOURCE_REFRESH_SCOPE_UNSPECIFIED', 'ALL_DATA_SOURCES']):
            raise ValueError("must be one of enum values ('DATA_SOURCE_REFRESH_SCOPE_UNSPECIFIED', 'ALL_DATA_SOURCES')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataSourceRefreshSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of daily_schedule
        if self.daily_schedule:
            _dict['dailySchedule'] = self.daily_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monthly_schedule
        if self.monthly_schedule:
            _dict['monthlySchedule'] = self.monthly_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next_run
        if self.next_run:
            _dict['nextRun'] = self.next_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weekly_schedule
        if self.weekly_schedule:
            _dict['weeklySchedule'] = self.weekly_schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataSourceRefreshSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dailySchedule": DataSourceRefreshDailySchedule.from_dict(obj["dailySchedule"]) if obj.get("dailySchedule") is not None else None,
            "enabled": obj.get("enabled"),
            "monthlySchedule": DataSourceRefreshMonthlySchedule.from_dict(obj["monthlySchedule"]) if obj.get("monthlySchedule") is not None else None,
            "nextRun": Interval.from_dict(obj["nextRun"]) if obj.get("nextRun") is not None else None,
            "refreshScope": obj.get("refreshScope"),
            "weeklySchedule": DataSourceRefreshWeeklySchedule.from_dict(obj["weeklySchedule"]) if obj.get("weeklySchedule") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.chart_axis_view_window_options import ChartAxisViewWindowOptions
from openapi_client.models.text_format import TextFormat
from openapi_client.models.text_position import TextPosition
from typing import Optional, Set
from typing_extensions import Self

class BasicChartAxis(BaseModel):
    """
    An axis of the chart. A chart may not have more than one axis per axis position.
    """ # noqa: E501
    format: Optional[TextFormat] = None
    position: Optional[StrictStr] = Field(default=None, description="The position of this axis.")
    title: Optional[StrictStr] = Field(default=None, description="The title of this axis. If set, this overrides any title inferred from headers of the data.")
    title_text_position: Optional[TextPosition] = Field(default=None, alias="titleTextPosition")
    view_window_options: Optional[ChartAxisViewWindowOptions] = Field(default=None, alias="viewWindowOptions")
    __properties: ClassVar[List[str]] = ["format", "position", "title", "titleTextPosition", "viewWindowOptions"]

    @field_validator('position')
    def position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BASIC_CHART_AXIS_POSITION_UNSPECIFIED', 'BOTTOM_AXIS', 'LEFT_AXIS', 'RIGHT_AXIS']):
            raise ValueError("must be one of enum values ('BASIC_CHART_AXIS_POSITION_UNSPECIFIED', 'BOTTOM_AXIS', 'LEFT_AXIS', 'RIGHT_AXIS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BasicChartAxis from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of format
        if self.format:
            _dict['format'] = self.format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of title_text_position
        if self.title_text_position:
            _dict['titleTextPosition'] = self.title_text_position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of view_window_options
        if self.view_window_options:
            _dict['viewWindowOptions'] = self.view_window_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BasicChartAxis from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "format": TextFormat.from_dict(obj["format"]) if obj.get("format") is not None else None,
            "position": obj.get("position"),
            "title": obj.get("title"),
            "titleTextPosition": TextPosition.from_dict(obj["titleTextPosition"]) if obj.get("titleTextPosition") is not None else None,
            "viewWindowOptions": ChartAxisViewWindowOptions.from_dict(obj["viewWindowOptions"]) if obj.get("viewWindowOptions") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_source_column_reference import DataSourceColumnReference
from openapi_client.models.pivot_group_limit import PivotGroupLimit
from openapi_client.models.pivot_group_rule import PivotGroupRule
from openapi_client.models.pivot_group_sort_value_bucket import PivotGroupSortValueBucket
from openapi_client.models.pivot_group_value_metadata import PivotGroupValueMetadata
from typing import Optional, Set
from typing_extensions import Self

class PivotGroup(BaseModel):
    """
    A single grouping (either row or column) in a pivot table.
    """ # noqa: E501
    data_source_column_reference: Optional[DataSourceColumnReference] = Field(default=None, alias="dataSourceColumnReference")
    group_limit: Optional[PivotGroupLimit] = Field(default=None, alias="groupLimit")
    group_rule: Optional[PivotGroupRule] = Field(default=None, alias="groupRule")
    label: Optional[StrictStr] = Field(default=None, description="The labels to use for the row/column groups which can be customized. For example, in the following pivot table, the row label is `Region` (which could be renamed to `State`) and the column label is `Product` (which could be renamed `Item`). Pivot tables created before December 2017 do not have header labels. If you'd like to add header labels to an existing pivot table, please delete the existing pivot table and then create a new pivot table with same parameters. +--------------+---------+-------+ | SUM of Units | Product | | | Region | Pen | Paper | +--------------+---------+-------+ | New York | 345 | 98 | | Oregon | 234 | 123 | | Tennessee | 531 | 415 | +--------------+---------+-------+ | Grand Total | 1110 | 636 | +--------------+---------+-------+")
    repeat_headings: Optional[StrictBool] = Field(default=None, description="True if the headings in this pivot group should be repeated. This is only valid for row groupings and is ignored by columns. By default, we minimize repetition of headings by not showing higher level headings where they are the same. For example, even though the third row below corresponds to \"Q1 Mar\", \"Q1\" is not shown because it is redundant with previous rows. Setting repeat_headings to true would cause \"Q1\" to be repeated for \"Feb\" and \"Mar\". +--------------+ | Q1 | Jan | | | Feb | | | Mar | +--------+-----+ | Q1 Total | +--------------+", alias="repeatHeadings")
    show_totals: Optional[StrictBool] = Field(default=None, description="True if the pivot table should include the totals for this grouping.", alias="showTotals")
    sort_order: Optional[StrictStr] = Field(default=None, description="The order the values in this group should be sorted.", alias="sortOrder")
    source_column_offset: Optional[StrictInt] = Field(default=None, description="The column offset of the source range that this grouping is based on. For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0` means this group refers to column `C`, whereas the offset `1` would refer to column `D`.", alias="sourceColumnOffset")
    value_bucket: Optional[PivotGroupSortValueBucket] = Field(default=None, alias="valueBucket")
    value_metadata: Optional[List[PivotGroupValueMetadata]] = Field(default=None, description="Metadata about values in the grouping.", alias="valueMetadata")
    __properties: ClassVar[List[str]] = ["dataSourceColumnReference", "groupLimit", "groupRule", "label", "repeatHeadings", "showTotals", "sortOrder", "sourceColumnOffset", "valueBucket", "valueMetadata"]

    @field_validator('sort_order')
    def sort_order_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SORT_ORDER_UNSPECIFIED', 'ASCENDING', 'DESCENDING']):
            raise ValueError("must be one of enum values ('SORT_ORDER_UNSPECIFIED', 'ASCENDING', 'DESCENDING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PivotGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_source_column_reference
        if self.data_source_column_reference:
            _dict['dataSourceColumnReference'] = self.data_source_column_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group_limit
        if self.group_limit:
            _dict['groupLimit'] = self.group_limit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group_rule
        if self.group_rule:
            _dict['groupRule'] = self.group_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value_bucket
        if self.value_bucket:
            _dict['valueBucket'] = self.value_bucket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in value_metadata (list)
        _items = []
        if self.value_metadata:
            for _item_value_metadata in self.value_metadata:
                if _item_value_metadata:
                    _items.append(_item_value_metadata.to_dict())
            _dict['valueMetadata'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PivotGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataSourceColumnReference": DataSourceColumnReference.from_dict(obj["dataSourceColumnReference"]) if obj.get("dataSourceColumnReference") is not None else None,
            "groupLimit": PivotGroupLimit.from_dict(obj["groupLimit"]) if obj.get("groupLimit") is not None else None,
            "groupRule": PivotGroupRule.from_dict(obj["groupRule"]) if obj.get("groupRule") is not None else None,
            "label": obj.get("label"),
            "repeatHeadings": obj.get("repeatHeadings"),
            "showTotals": obj.get("showTotals"),
            "sortOrder": obj.get("sortOrder"),
            "sourceColumnOffset": obj.get("sourceColumnOffset"),
            "valueBucket": PivotGroupSortValueBucket.from_dict(obj["valueBucket"]) if obj.get("valueBucket") is not None else None,
            "valueMetadata": [PivotGroupValueMetadata.from_dict(_item) for _item in obj["valueMetadata"]] if obj.get("valueMetadata") is not None else None
        })
        return _obj



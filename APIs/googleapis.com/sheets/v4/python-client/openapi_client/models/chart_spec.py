# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.basic_chart_spec import BasicChartSpec
from openapi_client.models.bubble_chart_spec import BubbleChartSpec
from openapi_client.models.candlestick_chart_spec import CandlestickChartSpec
from openapi_client.models.color import Color
from openapi_client.models.color_style import ColorStyle
from openapi_client.models.data_source_chart_properties import DataSourceChartProperties
from openapi_client.models.filter_spec import FilterSpec
from openapi_client.models.histogram_chart_spec import HistogramChartSpec
from openapi_client.models.org_chart_spec import OrgChartSpec
from openapi_client.models.pie_chart_spec import PieChartSpec
from openapi_client.models.scorecard_chart_spec import ScorecardChartSpec
from openapi_client.models.sort_spec import SortSpec
from openapi_client.models.text_format import TextFormat
from openapi_client.models.text_position import TextPosition
from openapi_client.models.treemap_chart_spec import TreemapChartSpec
from openapi_client.models.waterfall_chart_spec import WaterfallChartSpec
from typing import Optional, Set
from typing_extensions import Self

class ChartSpec(BaseModel):
    """
    The specifications of a chart.
    """ # noqa: E501
    alt_text: Optional[StrictStr] = Field(default=None, description="The alternative text that describes the chart. This is often used for accessibility.", alias="altText")
    background_color: Optional[Color] = Field(default=None, alias="backgroundColor")
    background_color_style: Optional[ColorStyle] = Field(default=None, alias="backgroundColorStyle")
    basic_chart: Optional[BasicChartSpec] = Field(default=None, alias="basicChart")
    bubble_chart: Optional[BubbleChartSpec] = Field(default=None, alias="bubbleChart")
    candlestick_chart: Optional[CandlestickChartSpec] = Field(default=None, alias="candlestickChart")
    data_source_chart_properties: Optional[DataSourceChartProperties] = Field(default=None, alias="dataSourceChartProperties")
    filter_specs: Optional[List[FilterSpec]] = Field(default=None, description="The filters applied to the source data of the chart. Only supported for data source charts.", alias="filterSpecs")
    font_name: Optional[StrictStr] = Field(default=None, description="The name of the font to use by default for all chart text (e.g. title, axis labels, legend). If a font is specified for a specific part of the chart it will override this font name.", alias="fontName")
    hidden_dimension_strategy: Optional[StrictStr] = Field(default=None, description="Determines how the charts will use hidden rows or columns.", alias="hiddenDimensionStrategy")
    histogram_chart: Optional[HistogramChartSpec] = Field(default=None, alias="histogramChart")
    maximized: Optional[StrictBool] = Field(default=None, description="True to make a chart fill the entire space in which it's rendered with minimum padding. False to use the default padding. (Not applicable to Geo and Org charts.)")
    org_chart: Optional[OrgChartSpec] = Field(default=None, alias="orgChart")
    pie_chart: Optional[PieChartSpec] = Field(default=None, alias="pieChart")
    scorecard_chart: Optional[ScorecardChartSpec] = Field(default=None, alias="scorecardChart")
    sort_specs: Optional[List[SortSpec]] = Field(default=None, description="The order to sort the chart data by. Only a single sort spec is supported. Only supported for data source charts.", alias="sortSpecs")
    subtitle: Optional[StrictStr] = Field(default=None, description="The subtitle of the chart.")
    subtitle_text_format: Optional[TextFormat] = Field(default=None, alias="subtitleTextFormat")
    subtitle_text_position: Optional[TextPosition] = Field(default=None, alias="subtitleTextPosition")
    title: Optional[StrictStr] = Field(default=None, description="The title of the chart.")
    title_text_format: Optional[TextFormat] = Field(default=None, alias="titleTextFormat")
    title_text_position: Optional[TextPosition] = Field(default=None, alias="titleTextPosition")
    treemap_chart: Optional[TreemapChartSpec] = Field(default=None, alias="treemapChart")
    waterfall_chart: Optional[WaterfallChartSpec] = Field(default=None, alias="waterfallChart")
    __properties: ClassVar[List[str]] = ["altText", "backgroundColor", "backgroundColorStyle", "basicChart", "bubbleChart", "candlestickChart", "dataSourceChartProperties", "filterSpecs", "fontName", "hiddenDimensionStrategy", "histogramChart", "maximized", "orgChart", "pieChart", "scorecardChart", "sortSpecs", "subtitle", "subtitleTextFormat", "subtitleTextPosition", "title", "titleTextFormat", "titleTextPosition", "treemapChart", "waterfallChart"]

    @field_validator('hidden_dimension_strategy')
    def hidden_dimension_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED', 'SKIP_HIDDEN_ROWS_AND_COLUMNS', 'SKIP_HIDDEN_ROWS', 'SKIP_HIDDEN_COLUMNS', 'SHOW_ALL']):
            raise ValueError("must be one of enum values ('CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED', 'SKIP_HIDDEN_ROWS_AND_COLUMNS', 'SKIP_HIDDEN_ROWS', 'SKIP_HIDDEN_COLUMNS', 'SHOW_ALL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChartSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of background_color
        if self.background_color:
            _dict['backgroundColor'] = self.background_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of background_color_style
        if self.background_color_style:
            _dict['backgroundColorStyle'] = self.background_color_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of basic_chart
        if self.basic_chart:
            _dict['basicChart'] = self.basic_chart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bubble_chart
        if self.bubble_chart:
            _dict['bubbleChart'] = self.bubble_chart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of candlestick_chart
        if self.candlestick_chart:
            _dict['candlestickChart'] = self.candlestick_chart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_source_chart_properties
        if self.data_source_chart_properties:
            _dict['dataSourceChartProperties'] = self.data_source_chart_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in filter_specs (list)
        _items = []
        if self.filter_specs:
            for _item_filter_specs in self.filter_specs:
                if _item_filter_specs:
                    _items.append(_item_filter_specs.to_dict())
            _dict['filterSpecs'] = _items
        # override the default output from pydantic by calling `to_dict()` of histogram_chart
        if self.histogram_chart:
            _dict['histogramChart'] = self.histogram_chart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of org_chart
        if self.org_chart:
            _dict['orgChart'] = self.org_chart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pie_chart
        if self.pie_chart:
            _dict['pieChart'] = self.pie_chart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scorecard_chart
        if self.scorecard_chart:
            _dict['scorecardChart'] = self.scorecard_chart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sort_specs (list)
        _items = []
        if self.sort_specs:
            for _item_sort_specs in self.sort_specs:
                if _item_sort_specs:
                    _items.append(_item_sort_specs.to_dict())
            _dict['sortSpecs'] = _items
        # override the default output from pydantic by calling `to_dict()` of subtitle_text_format
        if self.subtitle_text_format:
            _dict['subtitleTextFormat'] = self.subtitle_text_format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subtitle_text_position
        if self.subtitle_text_position:
            _dict['subtitleTextPosition'] = self.subtitle_text_position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of title_text_format
        if self.title_text_format:
            _dict['titleTextFormat'] = self.title_text_format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of title_text_position
        if self.title_text_position:
            _dict['titleTextPosition'] = self.title_text_position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of treemap_chart
        if self.treemap_chart:
            _dict['treemapChart'] = self.treemap_chart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of waterfall_chart
        if self.waterfall_chart:
            _dict['waterfallChart'] = self.waterfall_chart.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChartSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "altText": obj.get("altText"),
            "backgroundColor": Color.from_dict(obj["backgroundColor"]) if obj.get("backgroundColor") is not None else None,
            "backgroundColorStyle": ColorStyle.from_dict(obj["backgroundColorStyle"]) if obj.get("backgroundColorStyle") is not None else None,
            "basicChart": BasicChartSpec.from_dict(obj["basicChart"]) if obj.get("basicChart") is not None else None,
            "bubbleChart": BubbleChartSpec.from_dict(obj["bubbleChart"]) if obj.get("bubbleChart") is not None else None,
            "candlestickChart": CandlestickChartSpec.from_dict(obj["candlestickChart"]) if obj.get("candlestickChart") is not None else None,
            "dataSourceChartProperties": DataSourceChartProperties.from_dict(obj["dataSourceChartProperties"]) if obj.get("dataSourceChartProperties") is not None else None,
            "filterSpecs": [FilterSpec.from_dict(_item) for _item in obj["filterSpecs"]] if obj.get("filterSpecs") is not None else None,
            "fontName": obj.get("fontName"),
            "hiddenDimensionStrategy": obj.get("hiddenDimensionStrategy"),
            "histogramChart": HistogramChartSpec.from_dict(obj["histogramChart"]) if obj.get("histogramChart") is not None else None,
            "maximized": obj.get("maximized"),
            "orgChart": OrgChartSpec.from_dict(obj["orgChart"]) if obj.get("orgChart") is not None else None,
            "pieChart": PieChartSpec.from_dict(obj["pieChart"]) if obj.get("pieChart") is not None else None,
            "scorecardChart": ScorecardChartSpec.from_dict(obj["scorecardChart"]) if obj.get("scorecardChart") is not None else None,
            "sortSpecs": [SortSpec.from_dict(_item) for _item in obj["sortSpecs"]] if obj.get("sortSpecs") is not None else None,
            "subtitle": obj.get("subtitle"),
            "subtitleTextFormat": TextFormat.from_dict(obj["subtitleTextFormat"]) if obj.get("subtitleTextFormat") is not None else None,
            "subtitleTextPosition": TextPosition.from_dict(obj["subtitleTextPosition"]) if obj.get("subtitleTextPosition") is not None else None,
            "title": obj.get("title"),
            "titleTextFormat": TextFormat.from_dict(obj["titleTextFormat"]) if obj.get("titleTextFormat") is not None else None,
            "titleTextPosition": TextPosition.from_dict(obj["titleTextPosition"]) if obj.get("titleTextPosition") is not None else None,
            "treemapChart": TreemapChartSpec.from_dict(obj["treemapChart"]) if obj.get("treemapChart") is not None else None,
            "waterfallChart": WaterfallChartSpec.from_dict(obj["waterfallChart"]) if obj.get("waterfallChart") is not None else None
        })
        return _obj



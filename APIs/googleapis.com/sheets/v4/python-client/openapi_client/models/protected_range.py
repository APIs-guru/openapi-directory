# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.editors import Editors
from openapi_client.models.grid_range import GridRange
from typing import Optional, Set
from typing_extensions import Self

class ProtectedRange(BaseModel):
    """
    A protected range.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The description of this protected range.")
    editors: Optional[Editors] = None
    named_range_id: Optional[StrictStr] = Field(default=None, description="The named range this protected range is backed by, if any. When writing, only one of range or named_range_id may be set.", alias="namedRangeId")
    protected_range_id: Optional[StrictInt] = Field(default=None, description="The ID of the protected range. This field is read-only.", alias="protectedRangeId")
    range: Optional[GridRange] = None
    requesting_user_can_edit: Optional[StrictBool] = Field(default=None, description="True if the user who requested this protected range can edit the protected area. This field is read-only.", alias="requestingUserCanEdit")
    unprotected_ranges: Optional[List[GridRange]] = Field(default=None, description="The list of unprotected ranges within a protected sheet. Unprotected ranges are only supported on protected sheets.", alias="unprotectedRanges")
    warning_only: Optional[StrictBool] = Field(default=None, description="True if this protected range will show a warning when editing. Warning-based protection means that every user can edit data in the protected range, except editing will prompt a warning asking the user to confirm the edit. When writing: if this field is true, then editors are ignored. Additionally, if this field is changed from true to false and the `editors` field is not set (nor included in the field mask), then the editors will be set to all the editors in the document.", alias="warningOnly")
    __properties: ClassVar[List[str]] = ["description", "editors", "namedRangeId", "protectedRangeId", "range", "requestingUserCanEdit", "unprotectedRanges", "warningOnly"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProtectedRange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of editors
        if self.editors:
            _dict['editors'] = self.editors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of range
        if self.range:
            _dict['range'] = self.range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in unprotected_ranges (list)
        _items = []
        if self.unprotected_ranges:
            for _item_unprotected_ranges in self.unprotected_ranges:
                if _item_unprotected_ranges:
                    _items.append(_item_unprotected_ranges.to_dict())
            _dict['unprotectedRanges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProtectedRange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "editors": Editors.from_dict(obj["editors"]) if obj.get("editors") is not None else None,
            "namedRangeId": obj.get("namedRangeId"),
            "protectedRangeId": obj.get("protectedRangeId"),
            "range": GridRange.from_dict(obj["range"]) if obj.get("range") is not None else None,
            "requestingUserCanEdit": obj.get("requestingUserCanEdit"),
            "unprotectedRanges": [GridRange.from_dict(_item) for _item in obj["unprotectedRanges"]] if obj.get("unprotectedRanges") is not None else None,
            "warningOnly": obj.get("warningOnly")
        })
        return _obj



# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.grid_range import GridRange
from typing import Optional, Set
from typing_extensions import Self

class FindReplaceRequest(BaseModel):
    """
    Finds and replaces data in cells over a range, sheet, or all sheets.
    """ # noqa: E501
    all_sheets: Optional[StrictBool] = Field(default=None, description="True to find/replace over all sheets.", alias="allSheets")
    find: Optional[StrictStr] = Field(default=None, description="The value to search.")
    include_formulas: Optional[StrictBool] = Field(default=None, description="True if the search should include cells with formulas. False to skip cells with formulas.", alias="includeFormulas")
    match_case: Optional[StrictBool] = Field(default=None, description="True if the search is case sensitive.", alias="matchCase")
    match_entire_cell: Optional[StrictBool] = Field(default=None, description="True if the find value should match the entire cell.", alias="matchEntireCell")
    range: Optional[GridRange] = None
    replacement: Optional[StrictStr] = Field(default=None, description="The value to use as the replacement.")
    search_by_regex: Optional[StrictBool] = Field(default=None, description="True if the find value is a regex. The regular expression and replacement should follow Java regex rules at https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html. The replacement string is allowed to refer to capturing groups. For example, if one cell has the contents `\"Google Sheets\"` and another has `\"Google Docs\"`, then searching for `\"o.* (.*)\"` with a replacement of `\"$1 Rocks\"` would change the contents of the cells to `\"GSheets Rocks\"` and `\"GDocs Rocks\"` respectively.", alias="searchByRegex")
    sheet_id: Optional[StrictInt] = Field(default=None, description="The sheet to find/replace over.", alias="sheetId")
    __properties: ClassVar[List[str]] = ["allSheets", "find", "includeFormulas", "matchCase", "matchEntireCell", "range", "replacement", "searchByRegex", "sheetId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FindReplaceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of range
        if self.range:
            _dict['range'] = self.range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FindReplaceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allSheets": obj.get("allSheets"),
            "find": obj.get("find"),
            "includeFormulas": obj.get("includeFormulas"),
            "matchCase": obj.get("matchCase"),
            "matchEntireCell": obj.get("matchEntireCell"),
            "range": GridRange.from_dict(obj["range"]) if obj.get("range") is not None else None,
            "replacement": obj.get("replacement"),
            "searchByRegex": obj.get("searchByRegex"),
            "sheetId": obj.get("sheetId")
        })
        return _obj



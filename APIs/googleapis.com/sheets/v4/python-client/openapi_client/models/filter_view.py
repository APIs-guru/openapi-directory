# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.filter_criteria import FilterCriteria
from openapi_client.models.filter_spec import FilterSpec
from openapi_client.models.grid_range import GridRange
from openapi_client.models.sort_spec import SortSpec
from typing import Optional, Set
from typing_extensions import Self

class FilterView(BaseModel):
    """
    A filter view.
    """ # noqa: E501
    criteria: Optional[Dict[str, FilterCriteria]] = Field(default=None, description="The criteria for showing/hiding values per column. The map's key is the column index, and the value is the criteria for that column. This field is deprecated in favor of filter_specs.")
    filter_specs: Optional[List[FilterSpec]] = Field(default=None, description="The filter criteria for showing/hiding values per column. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.", alias="filterSpecs")
    filter_view_id: Optional[StrictInt] = Field(default=None, description="The ID of the filter view.", alias="filterViewId")
    named_range_id: Optional[StrictStr] = Field(default=None, description="The named range this filter view is backed by, if any. When writing, only one of range or named_range_id may be set.", alias="namedRangeId")
    range: Optional[GridRange] = None
    sort_specs: Optional[List[SortSpec]] = Field(default=None, description="The sort order per column. Later specifications are used when values are equal in the earlier specifications.", alias="sortSpecs")
    title: Optional[StrictStr] = Field(default=None, description="The name of the filter view.")
    __properties: ClassVar[List[str]] = ["criteria", "filterSpecs", "filterViewId", "namedRangeId", "range", "sortSpecs", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilterView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in criteria (dict)
        _field_dict = {}
        if self.criteria:
            for _key_criteria in self.criteria:
                if self.criteria[_key_criteria]:
                    _field_dict[_key_criteria] = self.criteria[_key_criteria].to_dict()
            _dict['criteria'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in filter_specs (list)
        _items = []
        if self.filter_specs:
            for _item_filter_specs in self.filter_specs:
                if _item_filter_specs:
                    _items.append(_item_filter_specs.to_dict())
            _dict['filterSpecs'] = _items
        # override the default output from pydantic by calling `to_dict()` of range
        if self.range:
            _dict['range'] = self.range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sort_specs (list)
        _items = []
        if self.sort_specs:
            for _item_sort_specs in self.sort_specs:
                if _item_sort_specs:
                    _items.append(_item_sort_specs.to_dict())
            _dict['sortSpecs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilterView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "criteria": dict(
                (_k, FilterCriteria.from_dict(_v))
                for _k, _v in obj["criteria"].items()
            )
            if obj.get("criteria") is not None
            else None,
            "filterSpecs": [FilterSpec.from_dict(_item) for _item in obj["filterSpecs"]] if obj.get("filterSpecs") is not None else None,
            "filterViewId": obj.get("filterViewId"),
            "namedRangeId": obj.get("namedRangeId"),
            "range": GridRange.from_dict(obj["range"]) if obj.get("range") is not None else None,
            "sortSpecs": [SortSpec.from_dict(_item) for _item in obj["sortSpecs"]] if obj.get("sortSpecs") is not None else None,
            "title": obj.get("title")
        })
        return _obj



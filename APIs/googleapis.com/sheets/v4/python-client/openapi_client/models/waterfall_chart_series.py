# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.chart_data import ChartData
from openapi_client.models.data_label import DataLabel
from openapi_client.models.waterfall_chart_column_style import WaterfallChartColumnStyle
from openapi_client.models.waterfall_chart_custom_subtotal import WaterfallChartCustomSubtotal
from typing import Optional, Set
from typing_extensions import Self

class WaterfallChartSeries(BaseModel):
    """
    A single series of data for a waterfall chart.
    """ # noqa: E501
    custom_subtotals: Optional[List[WaterfallChartCustomSubtotal]] = Field(default=None, description="Custom subtotal columns appearing in this series. The order in which subtotals are defined is not significant. Only one subtotal may be defined for each data point.", alias="customSubtotals")
    data: Optional[ChartData] = None
    data_label: Optional[DataLabel] = Field(default=None, alias="dataLabel")
    hide_trailing_subtotal: Optional[StrictBool] = Field(default=None, description="True to hide the subtotal column from the end of the series. By default, a subtotal column will appear at the end of each series. Setting this field to true will hide that subtotal column for this series.", alias="hideTrailingSubtotal")
    negative_columns_style: Optional[WaterfallChartColumnStyle] = Field(default=None, alias="negativeColumnsStyle")
    positive_columns_style: Optional[WaterfallChartColumnStyle] = Field(default=None, alias="positiveColumnsStyle")
    subtotal_columns_style: Optional[WaterfallChartColumnStyle] = Field(default=None, alias="subtotalColumnsStyle")
    __properties: ClassVar[List[str]] = ["customSubtotals", "data", "dataLabel", "hideTrailingSubtotal", "negativeColumnsStyle", "positiveColumnsStyle", "subtotalColumnsStyle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WaterfallChartSeries from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_subtotals (list)
        _items = []
        if self.custom_subtotals:
            for _item_custom_subtotals in self.custom_subtotals:
                if _item_custom_subtotals:
                    _items.append(_item_custom_subtotals.to_dict())
            _dict['customSubtotals'] = _items
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_label
        if self.data_label:
            _dict['dataLabel'] = self.data_label.to_dict()
        # override the default output from pydantic by calling `to_dict()` of negative_columns_style
        if self.negative_columns_style:
            _dict['negativeColumnsStyle'] = self.negative_columns_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of positive_columns_style
        if self.positive_columns_style:
            _dict['positiveColumnsStyle'] = self.positive_columns_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subtotal_columns_style
        if self.subtotal_columns_style:
            _dict['subtotalColumnsStyle'] = self.subtotal_columns_style.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WaterfallChartSeries from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customSubtotals": [WaterfallChartCustomSubtotal.from_dict(_item) for _item in obj["customSubtotals"]] if obj.get("customSubtotals") is not None else None,
            "data": ChartData.from_dict(obj["data"]) if obj.get("data") is not None else None,
            "dataLabel": DataLabel.from_dict(obj["dataLabel"]) if obj.get("dataLabel") is not None else None,
            "hideTrailingSubtotal": obj.get("hideTrailingSubtotal"),
            "negativeColumnsStyle": WaterfallChartColumnStyle.from_dict(obj["negativeColumnsStyle"]) if obj.get("negativeColumnsStyle") is not None else None,
            "positiveColumnsStyle": WaterfallChartColumnStyle.from_dict(obj["positiveColumnsStyle"]) if obj.get("positiveColumnsStyle") is not None else None,
            "subtotalColumnsStyle": WaterfallChartColumnStyle.from_dict(obj["subtotalColumnsStyle"]) if obj.get("subtotalColumnsStyle") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.chart_data import ChartData
from openapi_client.models.color import Color
from openapi_client.models.color_style import ColorStyle
from typing import Optional, Set
from typing_extensions import Self

class OrgChartSpec(BaseModel):
    """
    An org chart. Org charts require a unique set of labels in labels and may optionally include parent_labels and tooltips. parent_labels contain, for each node, the label identifying the parent node. tooltips contain, for each node, an optional tooltip. For example, to describe an OrgChart with Alice as the CEO, Bob as the President (reporting to Alice) and Cathy as VP of Sales (also reporting to Alice), have labels contain \"Alice\", \"Bob\", \"Cathy\", parent_labels contain \"\", \"Alice\", \"Alice\" and tooltips contain \"CEO\", \"President\", \"VP Sales\".
    """ # noqa: E501
    labels: Optional[ChartData] = None
    node_color: Optional[Color] = Field(default=None, alias="nodeColor")
    node_color_style: Optional[ColorStyle] = Field(default=None, alias="nodeColorStyle")
    node_size: Optional[StrictStr] = Field(default=None, description="The size of the org chart nodes.", alias="nodeSize")
    parent_labels: Optional[ChartData] = Field(default=None, alias="parentLabels")
    selected_node_color: Optional[Color] = Field(default=None, alias="selectedNodeColor")
    selected_node_color_style: Optional[ColorStyle] = Field(default=None, alias="selectedNodeColorStyle")
    tooltips: Optional[ChartData] = None
    __properties: ClassVar[List[str]] = ["labels", "nodeColor", "nodeColorStyle", "nodeSize", "parentLabels", "selectedNodeColor", "selectedNodeColorStyle", "tooltips"]

    @field_validator('node_size')
    def node_size_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ORG_CHART_LABEL_SIZE_UNSPECIFIED', 'SMALL', 'MEDIUM', 'LARGE']):
            raise ValueError("must be one of enum values ('ORG_CHART_LABEL_SIZE_UNSPECIFIED', 'SMALL', 'MEDIUM', 'LARGE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrgChartSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of labels
        if self.labels:
            _dict['labels'] = self.labels.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_color
        if self.node_color:
            _dict['nodeColor'] = self.node_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_color_style
        if self.node_color_style:
            _dict['nodeColorStyle'] = self.node_color_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_labels
        if self.parent_labels:
            _dict['parentLabels'] = self.parent_labels.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selected_node_color
        if self.selected_node_color:
            _dict['selectedNodeColor'] = self.selected_node_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selected_node_color_style
        if self.selected_node_color_style:
            _dict['selectedNodeColorStyle'] = self.selected_node_color_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tooltips
        if self.tooltips:
            _dict['tooltips'] = self.tooltips.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrgChartSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "labels": ChartData.from_dict(obj["labels"]) if obj.get("labels") is not None else None,
            "nodeColor": Color.from_dict(obj["nodeColor"]) if obj.get("nodeColor") is not None else None,
            "nodeColorStyle": ColorStyle.from_dict(obj["nodeColorStyle"]) if obj.get("nodeColorStyle") is not None else None,
            "nodeSize": obj.get("nodeSize"),
            "parentLabels": ChartData.from_dict(obj["parentLabels"]) if obj.get("parentLabels") is not None else None,
            "selectedNodeColor": Color.from_dict(obj["selectedNodeColor"]) if obj.get("selectedNodeColor") is not None else None,
            "selectedNodeColorStyle": ColorStyle.from_dict(obj["selectedNodeColorStyle"]) if obj.get("selectedNodeColorStyle") is not None else None,
            "tooltips": ChartData.from_dict(obj["tooltips"]) if obj.get("tooltips") is not None else None
        })
        return _obj



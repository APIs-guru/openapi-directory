# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.add_banding_request import AddBandingRequest
from openapi_client.models.add_chart_request import AddChartRequest
from openapi_client.models.add_conditional_format_rule_request import AddConditionalFormatRuleRequest
from openapi_client.models.add_data_source_request import AddDataSourceRequest
from openapi_client.models.add_dimension_group_request import AddDimensionGroupRequest
from openapi_client.models.add_filter_view_request import AddFilterViewRequest
from openapi_client.models.add_named_range_request import AddNamedRangeRequest
from openapi_client.models.add_protected_range_request import AddProtectedRangeRequest
from openapi_client.models.add_sheet_request import AddSheetRequest
from openapi_client.models.add_slicer_request import AddSlicerRequest
from openapi_client.models.append_cells_request import AppendCellsRequest
from openapi_client.models.append_dimension_request import AppendDimensionRequest
from openapi_client.models.auto_fill_request import AutoFillRequest
from openapi_client.models.auto_resize_dimensions_request import AutoResizeDimensionsRequest
from openapi_client.models.clear_basic_filter_request import ClearBasicFilterRequest
from openapi_client.models.copy_paste_request import CopyPasteRequest
from openapi_client.models.create_developer_metadata_request import CreateDeveloperMetadataRequest
from openapi_client.models.cut_paste_request import CutPasteRequest
from openapi_client.models.delete_banding_request import DeleteBandingRequest
from openapi_client.models.delete_conditional_format_rule_request import DeleteConditionalFormatRuleRequest
from openapi_client.models.delete_data_source_request import DeleteDataSourceRequest
from openapi_client.models.delete_developer_metadata_request import DeleteDeveloperMetadataRequest
from openapi_client.models.delete_dimension_group_request import DeleteDimensionGroupRequest
from openapi_client.models.delete_dimension_request import DeleteDimensionRequest
from openapi_client.models.delete_duplicates_request import DeleteDuplicatesRequest
from openapi_client.models.delete_embedded_object_request import DeleteEmbeddedObjectRequest
from openapi_client.models.delete_filter_view_request import DeleteFilterViewRequest
from openapi_client.models.delete_named_range_request import DeleteNamedRangeRequest
from openapi_client.models.delete_protected_range_request import DeleteProtectedRangeRequest
from openapi_client.models.delete_range_request import DeleteRangeRequest
from openapi_client.models.delete_sheet_request import DeleteSheetRequest
from openapi_client.models.duplicate_filter_view_request import DuplicateFilterViewRequest
from openapi_client.models.duplicate_sheet_request import DuplicateSheetRequest
from openapi_client.models.find_replace_request import FindReplaceRequest
from openapi_client.models.insert_dimension_request import InsertDimensionRequest
from openapi_client.models.insert_range_request import InsertRangeRequest
from openapi_client.models.merge_cells_request import MergeCellsRequest
from openapi_client.models.move_dimension_request import MoveDimensionRequest
from openapi_client.models.paste_data_request import PasteDataRequest
from openapi_client.models.randomize_range_request import RandomizeRangeRequest
from openapi_client.models.refresh_data_source_request import RefreshDataSourceRequest
from openapi_client.models.repeat_cell_request import RepeatCellRequest
from openapi_client.models.set_basic_filter_request import SetBasicFilterRequest
from openapi_client.models.set_data_validation_request import SetDataValidationRequest
from openapi_client.models.sort_range_request import SortRangeRequest
from openapi_client.models.text_to_columns_request import TextToColumnsRequest
from openapi_client.models.trim_whitespace_request import TrimWhitespaceRequest
from openapi_client.models.unmerge_cells_request import UnmergeCellsRequest
from openapi_client.models.update_banding_request import UpdateBandingRequest
from openapi_client.models.update_borders_request import UpdateBordersRequest
from openapi_client.models.update_cells_request import UpdateCellsRequest
from openapi_client.models.update_chart_spec_request import UpdateChartSpecRequest
from openapi_client.models.update_conditional_format_rule_request import UpdateConditionalFormatRuleRequest
from openapi_client.models.update_data_source_request import UpdateDataSourceRequest
from openapi_client.models.update_developer_metadata_request import UpdateDeveloperMetadataRequest
from openapi_client.models.update_dimension_group_request import UpdateDimensionGroupRequest
from openapi_client.models.update_dimension_properties_request import UpdateDimensionPropertiesRequest
from openapi_client.models.update_embedded_object_border_request import UpdateEmbeddedObjectBorderRequest
from openapi_client.models.update_embedded_object_position_request import UpdateEmbeddedObjectPositionRequest
from openapi_client.models.update_filter_view_request import UpdateFilterViewRequest
from openapi_client.models.update_named_range_request import UpdateNamedRangeRequest
from openapi_client.models.update_protected_range_request import UpdateProtectedRangeRequest
from openapi_client.models.update_sheet_properties_request import UpdateSheetPropertiesRequest
from openapi_client.models.update_slicer_spec_request import UpdateSlicerSpecRequest
from openapi_client.models.update_spreadsheet_properties_request import UpdateSpreadsheetPropertiesRequest
from typing import Optional, Set
from typing_extensions import Self

class Request(BaseModel):
    """
    A single kind of update to apply to a spreadsheet.
    """ # noqa: E501
    add_banding: Optional[AddBandingRequest] = Field(default=None, alias="addBanding")
    add_chart: Optional[AddChartRequest] = Field(default=None, alias="addChart")
    add_conditional_format_rule: Optional[AddConditionalFormatRuleRequest] = Field(default=None, alias="addConditionalFormatRule")
    add_data_source: Optional[AddDataSourceRequest] = Field(default=None, alias="addDataSource")
    add_dimension_group: Optional[AddDimensionGroupRequest] = Field(default=None, alias="addDimensionGroup")
    add_filter_view: Optional[AddFilterViewRequest] = Field(default=None, alias="addFilterView")
    add_named_range: Optional[AddNamedRangeRequest] = Field(default=None, alias="addNamedRange")
    add_protected_range: Optional[AddProtectedRangeRequest] = Field(default=None, alias="addProtectedRange")
    add_sheet: Optional[AddSheetRequest] = Field(default=None, alias="addSheet")
    add_slicer: Optional[AddSlicerRequest] = Field(default=None, alias="addSlicer")
    append_cells: Optional[AppendCellsRequest] = Field(default=None, alias="appendCells")
    append_dimension: Optional[AppendDimensionRequest] = Field(default=None, alias="appendDimension")
    auto_fill: Optional[AutoFillRequest] = Field(default=None, alias="autoFill")
    auto_resize_dimensions: Optional[AutoResizeDimensionsRequest] = Field(default=None, alias="autoResizeDimensions")
    clear_basic_filter: Optional[ClearBasicFilterRequest] = Field(default=None, alias="clearBasicFilter")
    copy_paste: Optional[CopyPasteRequest] = Field(default=None, alias="copyPaste")
    create_developer_metadata: Optional[CreateDeveloperMetadataRequest] = Field(default=None, alias="createDeveloperMetadata")
    cut_paste: Optional[CutPasteRequest] = Field(default=None, alias="cutPaste")
    delete_banding: Optional[DeleteBandingRequest] = Field(default=None, alias="deleteBanding")
    delete_conditional_format_rule: Optional[DeleteConditionalFormatRuleRequest] = Field(default=None, alias="deleteConditionalFormatRule")
    delete_data_source: Optional[DeleteDataSourceRequest] = Field(default=None, alias="deleteDataSource")
    delete_developer_metadata: Optional[DeleteDeveloperMetadataRequest] = Field(default=None, alias="deleteDeveloperMetadata")
    delete_dimension: Optional[DeleteDimensionRequest] = Field(default=None, alias="deleteDimension")
    delete_dimension_group: Optional[DeleteDimensionGroupRequest] = Field(default=None, alias="deleteDimensionGroup")
    delete_duplicates: Optional[DeleteDuplicatesRequest] = Field(default=None, alias="deleteDuplicates")
    delete_embedded_object: Optional[DeleteEmbeddedObjectRequest] = Field(default=None, alias="deleteEmbeddedObject")
    delete_filter_view: Optional[DeleteFilterViewRequest] = Field(default=None, alias="deleteFilterView")
    delete_named_range: Optional[DeleteNamedRangeRequest] = Field(default=None, alias="deleteNamedRange")
    delete_protected_range: Optional[DeleteProtectedRangeRequest] = Field(default=None, alias="deleteProtectedRange")
    delete_range: Optional[DeleteRangeRequest] = Field(default=None, alias="deleteRange")
    delete_sheet: Optional[DeleteSheetRequest] = Field(default=None, alias="deleteSheet")
    duplicate_filter_view: Optional[DuplicateFilterViewRequest] = Field(default=None, alias="duplicateFilterView")
    duplicate_sheet: Optional[DuplicateSheetRequest] = Field(default=None, alias="duplicateSheet")
    find_replace: Optional[FindReplaceRequest] = Field(default=None, alias="findReplace")
    insert_dimension: Optional[InsertDimensionRequest] = Field(default=None, alias="insertDimension")
    insert_range: Optional[InsertRangeRequest] = Field(default=None, alias="insertRange")
    merge_cells: Optional[MergeCellsRequest] = Field(default=None, alias="mergeCells")
    move_dimension: Optional[MoveDimensionRequest] = Field(default=None, alias="moveDimension")
    paste_data: Optional[PasteDataRequest] = Field(default=None, alias="pasteData")
    randomize_range: Optional[RandomizeRangeRequest] = Field(default=None, alias="randomizeRange")
    refresh_data_source: Optional[RefreshDataSourceRequest] = Field(default=None, alias="refreshDataSource")
    repeat_cell: Optional[RepeatCellRequest] = Field(default=None, alias="repeatCell")
    set_basic_filter: Optional[SetBasicFilterRequest] = Field(default=None, alias="setBasicFilter")
    set_data_validation: Optional[SetDataValidationRequest] = Field(default=None, alias="setDataValidation")
    sort_range: Optional[SortRangeRequest] = Field(default=None, alias="sortRange")
    text_to_columns: Optional[TextToColumnsRequest] = Field(default=None, alias="textToColumns")
    trim_whitespace: Optional[TrimWhitespaceRequest] = Field(default=None, alias="trimWhitespace")
    unmerge_cells: Optional[UnmergeCellsRequest] = Field(default=None, alias="unmergeCells")
    update_banding: Optional[UpdateBandingRequest] = Field(default=None, alias="updateBanding")
    update_borders: Optional[UpdateBordersRequest] = Field(default=None, alias="updateBorders")
    update_cells: Optional[UpdateCellsRequest] = Field(default=None, alias="updateCells")
    update_chart_spec: Optional[UpdateChartSpecRequest] = Field(default=None, alias="updateChartSpec")
    update_conditional_format_rule: Optional[UpdateConditionalFormatRuleRequest] = Field(default=None, alias="updateConditionalFormatRule")
    update_data_source: Optional[UpdateDataSourceRequest] = Field(default=None, alias="updateDataSource")
    update_developer_metadata: Optional[UpdateDeveloperMetadataRequest] = Field(default=None, alias="updateDeveloperMetadata")
    update_dimension_group: Optional[UpdateDimensionGroupRequest] = Field(default=None, alias="updateDimensionGroup")
    update_dimension_properties: Optional[UpdateDimensionPropertiesRequest] = Field(default=None, alias="updateDimensionProperties")
    update_embedded_object_border: Optional[UpdateEmbeddedObjectBorderRequest] = Field(default=None, alias="updateEmbeddedObjectBorder")
    update_embedded_object_position: Optional[UpdateEmbeddedObjectPositionRequest] = Field(default=None, alias="updateEmbeddedObjectPosition")
    update_filter_view: Optional[UpdateFilterViewRequest] = Field(default=None, alias="updateFilterView")
    update_named_range: Optional[UpdateNamedRangeRequest] = Field(default=None, alias="updateNamedRange")
    update_protected_range: Optional[UpdateProtectedRangeRequest] = Field(default=None, alias="updateProtectedRange")
    update_sheet_properties: Optional[UpdateSheetPropertiesRequest] = Field(default=None, alias="updateSheetProperties")
    update_slicer_spec: Optional[UpdateSlicerSpecRequest] = Field(default=None, alias="updateSlicerSpec")
    update_spreadsheet_properties: Optional[UpdateSpreadsheetPropertiesRequest] = Field(default=None, alias="updateSpreadsheetProperties")
    __properties: ClassVar[List[str]] = ["addBanding", "addChart", "addConditionalFormatRule", "addDataSource", "addDimensionGroup", "addFilterView", "addNamedRange", "addProtectedRange", "addSheet", "addSlicer", "appendCells", "appendDimension", "autoFill", "autoResizeDimensions", "clearBasicFilter", "copyPaste", "createDeveloperMetadata", "cutPaste", "deleteBanding", "deleteConditionalFormatRule", "deleteDataSource", "deleteDeveloperMetadata", "deleteDimension", "deleteDimensionGroup", "deleteDuplicates", "deleteEmbeddedObject", "deleteFilterView", "deleteNamedRange", "deleteProtectedRange", "deleteRange", "deleteSheet", "duplicateFilterView", "duplicateSheet", "findReplace", "insertDimension", "insertRange", "mergeCells", "moveDimension", "pasteData", "randomizeRange", "refreshDataSource", "repeatCell", "setBasicFilter", "setDataValidation", "sortRange", "textToColumns", "trimWhitespace", "unmergeCells", "updateBanding", "updateBorders", "updateCells", "updateChartSpec", "updateConditionalFormatRule", "updateDataSource", "updateDeveloperMetadata", "updateDimensionGroup", "updateDimensionProperties", "updateEmbeddedObjectBorder", "updateEmbeddedObjectPosition", "updateFilterView", "updateNamedRange", "updateProtectedRange", "updateSheetProperties", "updateSlicerSpec", "updateSpreadsheetProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Request from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of add_banding
        if self.add_banding:
            _dict['addBanding'] = self.add_banding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_chart
        if self.add_chart:
            _dict['addChart'] = self.add_chart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_conditional_format_rule
        if self.add_conditional_format_rule:
            _dict['addConditionalFormatRule'] = self.add_conditional_format_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_data_source
        if self.add_data_source:
            _dict['addDataSource'] = self.add_data_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_dimension_group
        if self.add_dimension_group:
            _dict['addDimensionGroup'] = self.add_dimension_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_filter_view
        if self.add_filter_view:
            _dict['addFilterView'] = self.add_filter_view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_named_range
        if self.add_named_range:
            _dict['addNamedRange'] = self.add_named_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_protected_range
        if self.add_protected_range:
            _dict['addProtectedRange'] = self.add_protected_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_sheet
        if self.add_sheet:
            _dict['addSheet'] = self.add_sheet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_slicer
        if self.add_slicer:
            _dict['addSlicer'] = self.add_slicer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of append_cells
        if self.append_cells:
            _dict['appendCells'] = self.append_cells.to_dict()
        # override the default output from pydantic by calling `to_dict()` of append_dimension
        if self.append_dimension:
            _dict['appendDimension'] = self.append_dimension.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auto_fill
        if self.auto_fill:
            _dict['autoFill'] = self.auto_fill.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auto_resize_dimensions
        if self.auto_resize_dimensions:
            _dict['autoResizeDimensions'] = self.auto_resize_dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of clear_basic_filter
        if self.clear_basic_filter:
            _dict['clearBasicFilter'] = self.clear_basic_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of copy_paste
        if self.copy_paste:
            _dict['copyPaste'] = self.copy_paste.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_developer_metadata
        if self.create_developer_metadata:
            _dict['createDeveloperMetadata'] = self.create_developer_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cut_paste
        if self.cut_paste:
            _dict['cutPaste'] = self.cut_paste.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_banding
        if self.delete_banding:
            _dict['deleteBanding'] = self.delete_banding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_conditional_format_rule
        if self.delete_conditional_format_rule:
            _dict['deleteConditionalFormatRule'] = self.delete_conditional_format_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_data_source
        if self.delete_data_source:
            _dict['deleteDataSource'] = self.delete_data_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_developer_metadata
        if self.delete_developer_metadata:
            _dict['deleteDeveloperMetadata'] = self.delete_developer_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_dimension
        if self.delete_dimension:
            _dict['deleteDimension'] = self.delete_dimension.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_dimension_group
        if self.delete_dimension_group:
            _dict['deleteDimensionGroup'] = self.delete_dimension_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_duplicates
        if self.delete_duplicates:
            _dict['deleteDuplicates'] = self.delete_duplicates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_embedded_object
        if self.delete_embedded_object:
            _dict['deleteEmbeddedObject'] = self.delete_embedded_object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_filter_view
        if self.delete_filter_view:
            _dict['deleteFilterView'] = self.delete_filter_view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_named_range
        if self.delete_named_range:
            _dict['deleteNamedRange'] = self.delete_named_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_protected_range
        if self.delete_protected_range:
            _dict['deleteProtectedRange'] = self.delete_protected_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_range
        if self.delete_range:
            _dict['deleteRange'] = self.delete_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_sheet
        if self.delete_sheet:
            _dict['deleteSheet'] = self.delete_sheet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duplicate_filter_view
        if self.duplicate_filter_view:
            _dict['duplicateFilterView'] = self.duplicate_filter_view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duplicate_sheet
        if self.duplicate_sheet:
            _dict['duplicateSheet'] = self.duplicate_sheet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of find_replace
        if self.find_replace:
            _dict['findReplace'] = self.find_replace.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insert_dimension
        if self.insert_dimension:
            _dict['insertDimension'] = self.insert_dimension.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insert_range
        if self.insert_range:
            _dict['insertRange'] = self.insert_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of merge_cells
        if self.merge_cells:
            _dict['mergeCells'] = self.merge_cells.to_dict()
        # override the default output from pydantic by calling `to_dict()` of move_dimension
        if self.move_dimension:
            _dict['moveDimension'] = self.move_dimension.to_dict()
        # override the default output from pydantic by calling `to_dict()` of paste_data
        if self.paste_data:
            _dict['pasteData'] = self.paste_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of randomize_range
        if self.randomize_range:
            _dict['randomizeRange'] = self.randomize_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refresh_data_source
        if self.refresh_data_source:
            _dict['refreshDataSource'] = self.refresh_data_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repeat_cell
        if self.repeat_cell:
            _dict['repeatCell'] = self.repeat_cell.to_dict()
        # override the default output from pydantic by calling `to_dict()` of set_basic_filter
        if self.set_basic_filter:
            _dict['setBasicFilter'] = self.set_basic_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of set_data_validation
        if self.set_data_validation:
            _dict['setDataValidation'] = self.set_data_validation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sort_range
        if self.sort_range:
            _dict['sortRange'] = self.sort_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_to_columns
        if self.text_to_columns:
            _dict['textToColumns'] = self.text_to_columns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trim_whitespace
        if self.trim_whitespace:
            _dict['trimWhitespace'] = self.trim_whitespace.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unmerge_cells
        if self.unmerge_cells:
            _dict['unmergeCells'] = self.unmerge_cells.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_banding
        if self.update_banding:
            _dict['updateBanding'] = self.update_banding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_borders
        if self.update_borders:
            _dict['updateBorders'] = self.update_borders.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_cells
        if self.update_cells:
            _dict['updateCells'] = self.update_cells.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_chart_spec
        if self.update_chart_spec:
            _dict['updateChartSpec'] = self.update_chart_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_conditional_format_rule
        if self.update_conditional_format_rule:
            _dict['updateConditionalFormatRule'] = self.update_conditional_format_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_data_source
        if self.update_data_source:
            _dict['updateDataSource'] = self.update_data_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_developer_metadata
        if self.update_developer_metadata:
            _dict['updateDeveloperMetadata'] = self.update_developer_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_dimension_group
        if self.update_dimension_group:
            _dict['updateDimensionGroup'] = self.update_dimension_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_dimension_properties
        if self.update_dimension_properties:
            _dict['updateDimensionProperties'] = self.update_dimension_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_embedded_object_border
        if self.update_embedded_object_border:
            _dict['updateEmbeddedObjectBorder'] = self.update_embedded_object_border.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_embedded_object_position
        if self.update_embedded_object_position:
            _dict['updateEmbeddedObjectPosition'] = self.update_embedded_object_position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_filter_view
        if self.update_filter_view:
            _dict['updateFilterView'] = self.update_filter_view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_named_range
        if self.update_named_range:
            _dict['updateNamedRange'] = self.update_named_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_protected_range
        if self.update_protected_range:
            _dict['updateProtectedRange'] = self.update_protected_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_sheet_properties
        if self.update_sheet_properties:
            _dict['updateSheetProperties'] = self.update_sheet_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_slicer_spec
        if self.update_slicer_spec:
            _dict['updateSlicerSpec'] = self.update_slicer_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_spreadsheet_properties
        if self.update_spreadsheet_properties:
            _dict['updateSpreadsheetProperties'] = self.update_spreadsheet_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Request from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addBanding": AddBandingRequest.from_dict(obj["addBanding"]) if obj.get("addBanding") is not None else None,
            "addChart": AddChartRequest.from_dict(obj["addChart"]) if obj.get("addChart") is not None else None,
            "addConditionalFormatRule": AddConditionalFormatRuleRequest.from_dict(obj["addConditionalFormatRule"]) if obj.get("addConditionalFormatRule") is not None else None,
            "addDataSource": AddDataSourceRequest.from_dict(obj["addDataSource"]) if obj.get("addDataSource") is not None else None,
            "addDimensionGroup": AddDimensionGroupRequest.from_dict(obj["addDimensionGroup"]) if obj.get("addDimensionGroup") is not None else None,
            "addFilterView": AddFilterViewRequest.from_dict(obj["addFilterView"]) if obj.get("addFilterView") is not None else None,
            "addNamedRange": AddNamedRangeRequest.from_dict(obj["addNamedRange"]) if obj.get("addNamedRange") is not None else None,
            "addProtectedRange": AddProtectedRangeRequest.from_dict(obj["addProtectedRange"]) if obj.get("addProtectedRange") is not None else None,
            "addSheet": AddSheetRequest.from_dict(obj["addSheet"]) if obj.get("addSheet") is not None else None,
            "addSlicer": AddSlicerRequest.from_dict(obj["addSlicer"]) if obj.get("addSlicer") is not None else None,
            "appendCells": AppendCellsRequest.from_dict(obj["appendCells"]) if obj.get("appendCells") is not None else None,
            "appendDimension": AppendDimensionRequest.from_dict(obj["appendDimension"]) if obj.get("appendDimension") is not None else None,
            "autoFill": AutoFillRequest.from_dict(obj["autoFill"]) if obj.get("autoFill") is not None else None,
            "autoResizeDimensions": AutoResizeDimensionsRequest.from_dict(obj["autoResizeDimensions"]) if obj.get("autoResizeDimensions") is not None else None,
            "clearBasicFilter": ClearBasicFilterRequest.from_dict(obj["clearBasicFilter"]) if obj.get("clearBasicFilter") is not None else None,
            "copyPaste": CopyPasteRequest.from_dict(obj["copyPaste"]) if obj.get("copyPaste") is not None else None,
            "createDeveloperMetadata": CreateDeveloperMetadataRequest.from_dict(obj["createDeveloperMetadata"]) if obj.get("createDeveloperMetadata") is not None else None,
            "cutPaste": CutPasteRequest.from_dict(obj["cutPaste"]) if obj.get("cutPaste") is not None else None,
            "deleteBanding": DeleteBandingRequest.from_dict(obj["deleteBanding"]) if obj.get("deleteBanding") is not None else None,
            "deleteConditionalFormatRule": DeleteConditionalFormatRuleRequest.from_dict(obj["deleteConditionalFormatRule"]) if obj.get("deleteConditionalFormatRule") is not None else None,
            "deleteDataSource": DeleteDataSourceRequest.from_dict(obj["deleteDataSource"]) if obj.get("deleteDataSource") is not None else None,
            "deleteDeveloperMetadata": DeleteDeveloperMetadataRequest.from_dict(obj["deleteDeveloperMetadata"]) if obj.get("deleteDeveloperMetadata") is not None else None,
            "deleteDimension": DeleteDimensionRequest.from_dict(obj["deleteDimension"]) if obj.get("deleteDimension") is not None else None,
            "deleteDimensionGroup": DeleteDimensionGroupRequest.from_dict(obj["deleteDimensionGroup"]) if obj.get("deleteDimensionGroup") is not None else None,
            "deleteDuplicates": DeleteDuplicatesRequest.from_dict(obj["deleteDuplicates"]) if obj.get("deleteDuplicates") is not None else None,
            "deleteEmbeddedObject": DeleteEmbeddedObjectRequest.from_dict(obj["deleteEmbeddedObject"]) if obj.get("deleteEmbeddedObject") is not None else None,
            "deleteFilterView": DeleteFilterViewRequest.from_dict(obj["deleteFilterView"]) if obj.get("deleteFilterView") is not None else None,
            "deleteNamedRange": DeleteNamedRangeRequest.from_dict(obj["deleteNamedRange"]) if obj.get("deleteNamedRange") is not None else None,
            "deleteProtectedRange": DeleteProtectedRangeRequest.from_dict(obj["deleteProtectedRange"]) if obj.get("deleteProtectedRange") is not None else None,
            "deleteRange": DeleteRangeRequest.from_dict(obj["deleteRange"]) if obj.get("deleteRange") is not None else None,
            "deleteSheet": DeleteSheetRequest.from_dict(obj["deleteSheet"]) if obj.get("deleteSheet") is not None else None,
            "duplicateFilterView": DuplicateFilterViewRequest.from_dict(obj["duplicateFilterView"]) if obj.get("duplicateFilterView") is not None else None,
            "duplicateSheet": DuplicateSheetRequest.from_dict(obj["duplicateSheet"]) if obj.get("duplicateSheet") is not None else None,
            "findReplace": FindReplaceRequest.from_dict(obj["findReplace"]) if obj.get("findReplace") is not None else None,
            "insertDimension": InsertDimensionRequest.from_dict(obj["insertDimension"]) if obj.get("insertDimension") is not None else None,
            "insertRange": InsertRangeRequest.from_dict(obj["insertRange"]) if obj.get("insertRange") is not None else None,
            "mergeCells": MergeCellsRequest.from_dict(obj["mergeCells"]) if obj.get("mergeCells") is not None else None,
            "moveDimension": MoveDimensionRequest.from_dict(obj["moveDimension"]) if obj.get("moveDimension") is not None else None,
            "pasteData": PasteDataRequest.from_dict(obj["pasteData"]) if obj.get("pasteData") is not None else None,
            "randomizeRange": RandomizeRangeRequest.from_dict(obj["randomizeRange"]) if obj.get("randomizeRange") is not None else None,
            "refreshDataSource": RefreshDataSourceRequest.from_dict(obj["refreshDataSource"]) if obj.get("refreshDataSource") is not None else None,
            "repeatCell": RepeatCellRequest.from_dict(obj["repeatCell"]) if obj.get("repeatCell") is not None else None,
            "setBasicFilter": SetBasicFilterRequest.from_dict(obj["setBasicFilter"]) if obj.get("setBasicFilter") is not None else None,
            "setDataValidation": SetDataValidationRequest.from_dict(obj["setDataValidation"]) if obj.get("setDataValidation") is not None else None,
            "sortRange": SortRangeRequest.from_dict(obj["sortRange"]) if obj.get("sortRange") is not None else None,
            "textToColumns": TextToColumnsRequest.from_dict(obj["textToColumns"]) if obj.get("textToColumns") is not None else None,
            "trimWhitespace": TrimWhitespaceRequest.from_dict(obj["trimWhitespace"]) if obj.get("trimWhitespace") is not None else None,
            "unmergeCells": UnmergeCellsRequest.from_dict(obj["unmergeCells"]) if obj.get("unmergeCells") is not None else None,
            "updateBanding": UpdateBandingRequest.from_dict(obj["updateBanding"]) if obj.get("updateBanding") is not None else None,
            "updateBorders": UpdateBordersRequest.from_dict(obj["updateBorders"]) if obj.get("updateBorders") is not None else None,
            "updateCells": UpdateCellsRequest.from_dict(obj["updateCells"]) if obj.get("updateCells") is not None else None,
            "updateChartSpec": UpdateChartSpecRequest.from_dict(obj["updateChartSpec"]) if obj.get("updateChartSpec") is not None else None,
            "updateConditionalFormatRule": UpdateConditionalFormatRuleRequest.from_dict(obj["updateConditionalFormatRule"]) if obj.get("updateConditionalFormatRule") is not None else None,
            "updateDataSource": UpdateDataSourceRequest.from_dict(obj["updateDataSource"]) if obj.get("updateDataSource") is not None else None,
            "updateDeveloperMetadata": UpdateDeveloperMetadataRequest.from_dict(obj["updateDeveloperMetadata"]) if obj.get("updateDeveloperMetadata") is not None else None,
            "updateDimensionGroup": UpdateDimensionGroupRequest.from_dict(obj["updateDimensionGroup"]) if obj.get("updateDimensionGroup") is not None else None,
            "updateDimensionProperties": UpdateDimensionPropertiesRequest.from_dict(obj["updateDimensionProperties"]) if obj.get("updateDimensionProperties") is not None else None,
            "updateEmbeddedObjectBorder": UpdateEmbeddedObjectBorderRequest.from_dict(obj["updateEmbeddedObjectBorder"]) if obj.get("updateEmbeddedObjectBorder") is not None else None,
            "updateEmbeddedObjectPosition": UpdateEmbeddedObjectPositionRequest.from_dict(obj["updateEmbeddedObjectPosition"]) if obj.get("updateEmbeddedObjectPosition") is not None else None,
            "updateFilterView": UpdateFilterViewRequest.from_dict(obj["updateFilterView"]) if obj.get("updateFilterView") is not None else None,
            "updateNamedRange": UpdateNamedRangeRequest.from_dict(obj["updateNamedRange"]) if obj.get("updateNamedRange") is not None else None,
            "updateProtectedRange": UpdateProtectedRangeRequest.from_dict(obj["updateProtectedRange"]) if obj.get("updateProtectedRange") is not None else None,
            "updateSheetProperties": UpdateSheetPropertiesRequest.from_dict(obj["updateSheetProperties"]) if obj.get("updateSheetProperties") is not None else None,
            "updateSlicerSpec": UpdateSlicerSpecRequest.from_dict(obj["updateSlicerSpec"]) if obj.get("updateSlicerSpec") is not None else None,
            "updateSpreadsheetProperties": UpdateSpreadsheetPropertiesRequest.from_dict(obj["updateSpreadsheetProperties"]) if obj.get("updateSpreadsheetProperties") is not None else None
        })
        return _obj



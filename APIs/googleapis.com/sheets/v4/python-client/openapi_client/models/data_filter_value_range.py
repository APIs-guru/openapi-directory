# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_filter import DataFilter
from typing import Optional, Set
from typing_extensions import Self

class DataFilterValueRange(BaseModel):
    """
    A range of values whose location is specified by a DataFilter.
    """ # noqa: E501
    data_filter: Optional[DataFilter] = Field(default=None, alias="dataFilter")
    major_dimension: Optional[StrictStr] = Field(default=None, description="The major dimension of the values.", alias="majorDimension")
    values: Optional[List[List[Any]]] = Field(default=None, description="The data to be written. If the provided values exceed any of the ranges matched by the data filter then the request fails. If the provided values are less than the matched ranges only the specified values are written, existing values in the matched ranges remain unaffected.")
    __properties: ClassVar[List[str]] = ["dataFilter", "majorDimension", "values"]

    @field_validator('major_dimension')
    def major_dimension_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DIMENSION_UNSPECIFIED', 'ROWS', 'COLUMNS']):
            raise ValueError("must be one of enum values ('DIMENSION_UNSPECIFIED', 'ROWS', 'COLUMNS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataFilterValueRange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_filter
        if self.data_filter:
            _dict['dataFilter'] = self.data_filter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataFilterValueRange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataFilter": DataFilter.from_dict(obj["dataFilter"]) if obj.get("dataFilter") is not None else None,
            "majorDimension": obj.get("majorDimension"),
            "values": obj.get("values")
        })
        return _obj



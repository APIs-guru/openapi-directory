# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.chart_data import ChartData
from openapi_client.models.text_format import TextFormat
from typing import Optional, Set
from typing_extensions import Self

class DataLabel(BaseModel):
    """
    Settings for one set of data labels. Data labels are annotations that appear next to a set of data, such as the points on a line chart, and provide additional information about what the data represents, such as a text representation of the value behind that point on the graph.
    """ # noqa: E501
    custom_label_data: Optional[ChartData] = Field(default=None, alias="customLabelData")
    placement: Optional[StrictStr] = Field(default=None, description="The placement of the data label relative to the labeled data.")
    text_format: Optional[TextFormat] = Field(default=None, alias="textFormat")
    type: Optional[StrictStr] = Field(default=None, description="The type of the data label.")
    __properties: ClassVar[List[str]] = ["customLabelData", "placement", "textFormat", "type"]

    @field_validator('placement')
    def placement_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_LABEL_PLACEMENT_UNSPECIFIED', 'CENTER', 'LEFT', 'RIGHT', 'ABOVE', 'BELOW', 'INSIDE_END', 'INSIDE_BASE', 'OUTSIDE_END']):
            raise ValueError("must be one of enum values ('DATA_LABEL_PLACEMENT_UNSPECIFIED', 'CENTER', 'LEFT', 'RIGHT', 'ABOVE', 'BELOW', 'INSIDE_END', 'INSIDE_BASE', 'OUTSIDE_END')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_LABEL_TYPE_UNSPECIFIED', 'NONE', 'DATA', 'CUSTOM']):
            raise ValueError("must be one of enum values ('DATA_LABEL_TYPE_UNSPECIFIED', 'NONE', 'DATA', 'CUSTOM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataLabel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_label_data
        if self.custom_label_data:
            _dict['customLabelData'] = self.custom_label_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_format
        if self.text_format:
            _dict['textFormat'] = self.text_format.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataLabel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customLabelData": ChartData.from_dict(obj["customLabelData"]) if obj.get("customLabelData") is not None else None,
            "placement": obj.get("placement"),
            "textFormat": TextFormat.from_dict(obj["textFormat"]) if obj.get("textFormat") is not None else None,
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DuplicateSheetRequest(BaseModel):
    """
    Duplicates the contents of a sheet.
    """ # noqa: E501
    insert_sheet_index: Optional[StrictInt] = Field(default=None, description="The zero-based index where the new sheet should be inserted. The index of all sheets after this are incremented.", alias="insertSheetIndex")
    new_sheet_id: Optional[StrictInt] = Field(default=None, description="If set, the ID of the new sheet. If not set, an ID is chosen. If set, the ID must not conflict with any existing sheet ID. If set, it must be non-negative.", alias="newSheetId")
    new_sheet_name: Optional[StrictStr] = Field(default=None, description="The name of the new sheet. If empty, a new name is chosen for you.", alias="newSheetName")
    source_sheet_id: Optional[StrictInt] = Field(default=None, description="The sheet to duplicate. If the source sheet is of DATA_SOURCE type, its backing DataSource is also duplicated and associated with the new copy of the sheet. No data execution is triggered, the grid data of this sheet is also copied over but only available after the batch request completes.", alias="sourceSheetId")
    __properties: ClassVar[List[str]] = ["insertSheetIndex", "newSheetId", "newSheetName", "sourceSheetId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DuplicateSheetRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DuplicateSheetRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "insertSheetIndex": obj.get("insertSheetIndex"),
            "newSheetId": obj.get("newSheetId"),
            "newSheetName": obj.get("newSheetName"),
            "sourceSheetId": obj.get("sourceSheetId")
        })
        return _obj



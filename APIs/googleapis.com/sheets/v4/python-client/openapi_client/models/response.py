# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.add_banding_response import AddBandingResponse
from openapi_client.models.add_chart_response import AddChartResponse
from openapi_client.models.add_data_source_response import AddDataSourceResponse
from openapi_client.models.add_dimension_group_response import AddDimensionGroupResponse
from openapi_client.models.add_filter_view_response import AddFilterViewResponse
from openapi_client.models.add_named_range_response import AddNamedRangeResponse
from openapi_client.models.add_protected_range_response import AddProtectedRangeResponse
from openapi_client.models.add_sheet_response import AddSheetResponse
from openapi_client.models.add_slicer_response import AddSlicerResponse
from openapi_client.models.create_developer_metadata_response import CreateDeveloperMetadataResponse
from openapi_client.models.delete_conditional_format_rule_response import DeleteConditionalFormatRuleResponse
from openapi_client.models.delete_developer_metadata_response import DeleteDeveloperMetadataResponse
from openapi_client.models.delete_dimension_group_response import DeleteDimensionGroupResponse
from openapi_client.models.delete_duplicates_response import DeleteDuplicatesResponse
from openapi_client.models.duplicate_filter_view_response import DuplicateFilterViewResponse
from openapi_client.models.duplicate_sheet_response import DuplicateSheetResponse
from openapi_client.models.find_replace_response import FindReplaceResponse
from openapi_client.models.refresh_data_source_response import RefreshDataSourceResponse
from openapi_client.models.trim_whitespace_response import TrimWhitespaceResponse
from openapi_client.models.update_conditional_format_rule_response import UpdateConditionalFormatRuleResponse
from openapi_client.models.update_data_source_response import UpdateDataSourceResponse
from openapi_client.models.update_developer_metadata_response import UpdateDeveloperMetadataResponse
from openapi_client.models.update_embedded_object_position_response import UpdateEmbeddedObjectPositionResponse
from typing import Optional, Set
from typing_extensions import Self

class Response(BaseModel):
    """
    A single response from an update.
    """ # noqa: E501
    add_banding: Optional[AddBandingResponse] = Field(default=None, alias="addBanding")
    add_chart: Optional[AddChartResponse] = Field(default=None, alias="addChart")
    add_data_source: Optional[AddDataSourceResponse] = Field(default=None, alias="addDataSource")
    add_dimension_group: Optional[AddDimensionGroupResponse] = Field(default=None, alias="addDimensionGroup")
    add_filter_view: Optional[AddFilterViewResponse] = Field(default=None, alias="addFilterView")
    add_named_range: Optional[AddNamedRangeResponse] = Field(default=None, alias="addNamedRange")
    add_protected_range: Optional[AddProtectedRangeResponse] = Field(default=None, alias="addProtectedRange")
    add_sheet: Optional[AddSheetResponse] = Field(default=None, alias="addSheet")
    add_slicer: Optional[AddSlicerResponse] = Field(default=None, alias="addSlicer")
    create_developer_metadata: Optional[CreateDeveloperMetadataResponse] = Field(default=None, alias="createDeveloperMetadata")
    delete_conditional_format_rule: Optional[DeleteConditionalFormatRuleResponse] = Field(default=None, alias="deleteConditionalFormatRule")
    delete_developer_metadata: Optional[DeleteDeveloperMetadataResponse] = Field(default=None, alias="deleteDeveloperMetadata")
    delete_dimension_group: Optional[DeleteDimensionGroupResponse] = Field(default=None, alias="deleteDimensionGroup")
    delete_duplicates: Optional[DeleteDuplicatesResponse] = Field(default=None, alias="deleteDuplicates")
    duplicate_filter_view: Optional[DuplicateFilterViewResponse] = Field(default=None, alias="duplicateFilterView")
    duplicate_sheet: Optional[DuplicateSheetResponse] = Field(default=None, alias="duplicateSheet")
    find_replace: Optional[FindReplaceResponse] = Field(default=None, alias="findReplace")
    refresh_data_source: Optional[RefreshDataSourceResponse] = Field(default=None, alias="refreshDataSource")
    trim_whitespace: Optional[TrimWhitespaceResponse] = Field(default=None, alias="trimWhitespace")
    update_conditional_format_rule: Optional[UpdateConditionalFormatRuleResponse] = Field(default=None, alias="updateConditionalFormatRule")
    update_data_source: Optional[UpdateDataSourceResponse] = Field(default=None, alias="updateDataSource")
    update_developer_metadata: Optional[UpdateDeveloperMetadataResponse] = Field(default=None, alias="updateDeveloperMetadata")
    update_embedded_object_position: Optional[UpdateEmbeddedObjectPositionResponse] = Field(default=None, alias="updateEmbeddedObjectPosition")
    __properties: ClassVar[List[str]] = ["addBanding", "addChart", "addDataSource", "addDimensionGroup", "addFilterView", "addNamedRange", "addProtectedRange", "addSheet", "addSlicer", "createDeveloperMetadata", "deleteConditionalFormatRule", "deleteDeveloperMetadata", "deleteDimensionGroup", "deleteDuplicates", "duplicateFilterView", "duplicateSheet", "findReplace", "refreshDataSource", "trimWhitespace", "updateConditionalFormatRule", "updateDataSource", "updateDeveloperMetadata", "updateEmbeddedObjectPosition"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of add_banding
        if self.add_banding:
            _dict['addBanding'] = self.add_banding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_chart
        if self.add_chart:
            _dict['addChart'] = self.add_chart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_data_source
        if self.add_data_source:
            _dict['addDataSource'] = self.add_data_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_dimension_group
        if self.add_dimension_group:
            _dict['addDimensionGroup'] = self.add_dimension_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_filter_view
        if self.add_filter_view:
            _dict['addFilterView'] = self.add_filter_view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_named_range
        if self.add_named_range:
            _dict['addNamedRange'] = self.add_named_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_protected_range
        if self.add_protected_range:
            _dict['addProtectedRange'] = self.add_protected_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_sheet
        if self.add_sheet:
            _dict['addSheet'] = self.add_sheet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_slicer
        if self.add_slicer:
            _dict['addSlicer'] = self.add_slicer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_developer_metadata
        if self.create_developer_metadata:
            _dict['createDeveloperMetadata'] = self.create_developer_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_conditional_format_rule
        if self.delete_conditional_format_rule:
            _dict['deleteConditionalFormatRule'] = self.delete_conditional_format_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_developer_metadata
        if self.delete_developer_metadata:
            _dict['deleteDeveloperMetadata'] = self.delete_developer_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_dimension_group
        if self.delete_dimension_group:
            _dict['deleteDimensionGroup'] = self.delete_dimension_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_duplicates
        if self.delete_duplicates:
            _dict['deleteDuplicates'] = self.delete_duplicates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duplicate_filter_view
        if self.duplicate_filter_view:
            _dict['duplicateFilterView'] = self.duplicate_filter_view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duplicate_sheet
        if self.duplicate_sheet:
            _dict['duplicateSheet'] = self.duplicate_sheet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of find_replace
        if self.find_replace:
            _dict['findReplace'] = self.find_replace.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refresh_data_source
        if self.refresh_data_source:
            _dict['refreshDataSource'] = self.refresh_data_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trim_whitespace
        if self.trim_whitespace:
            _dict['trimWhitespace'] = self.trim_whitespace.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_conditional_format_rule
        if self.update_conditional_format_rule:
            _dict['updateConditionalFormatRule'] = self.update_conditional_format_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_data_source
        if self.update_data_source:
            _dict['updateDataSource'] = self.update_data_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_developer_metadata
        if self.update_developer_metadata:
            _dict['updateDeveloperMetadata'] = self.update_developer_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_embedded_object_position
        if self.update_embedded_object_position:
            _dict['updateEmbeddedObjectPosition'] = self.update_embedded_object_position.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addBanding": AddBandingResponse.from_dict(obj["addBanding"]) if obj.get("addBanding") is not None else None,
            "addChart": AddChartResponse.from_dict(obj["addChart"]) if obj.get("addChart") is not None else None,
            "addDataSource": AddDataSourceResponse.from_dict(obj["addDataSource"]) if obj.get("addDataSource") is not None else None,
            "addDimensionGroup": AddDimensionGroupResponse.from_dict(obj["addDimensionGroup"]) if obj.get("addDimensionGroup") is not None else None,
            "addFilterView": AddFilterViewResponse.from_dict(obj["addFilterView"]) if obj.get("addFilterView") is not None else None,
            "addNamedRange": AddNamedRangeResponse.from_dict(obj["addNamedRange"]) if obj.get("addNamedRange") is not None else None,
            "addProtectedRange": AddProtectedRangeResponse.from_dict(obj["addProtectedRange"]) if obj.get("addProtectedRange") is not None else None,
            "addSheet": AddSheetResponse.from_dict(obj["addSheet"]) if obj.get("addSheet") is not None else None,
            "addSlicer": AddSlicerResponse.from_dict(obj["addSlicer"]) if obj.get("addSlicer") is not None else None,
            "createDeveloperMetadata": CreateDeveloperMetadataResponse.from_dict(obj["createDeveloperMetadata"]) if obj.get("createDeveloperMetadata") is not None else None,
            "deleteConditionalFormatRule": DeleteConditionalFormatRuleResponse.from_dict(obj["deleteConditionalFormatRule"]) if obj.get("deleteConditionalFormatRule") is not None else None,
            "deleteDeveloperMetadata": DeleteDeveloperMetadataResponse.from_dict(obj["deleteDeveloperMetadata"]) if obj.get("deleteDeveloperMetadata") is not None else None,
            "deleteDimensionGroup": DeleteDimensionGroupResponse.from_dict(obj["deleteDimensionGroup"]) if obj.get("deleteDimensionGroup") is not None else None,
            "deleteDuplicates": DeleteDuplicatesResponse.from_dict(obj["deleteDuplicates"]) if obj.get("deleteDuplicates") is not None else None,
            "duplicateFilterView": DuplicateFilterViewResponse.from_dict(obj["duplicateFilterView"]) if obj.get("duplicateFilterView") is not None else None,
            "duplicateSheet": DuplicateSheetResponse.from_dict(obj["duplicateSheet"]) if obj.get("duplicateSheet") is not None else None,
            "findReplace": FindReplaceResponse.from_dict(obj["findReplace"]) if obj.get("findReplace") is not None else None,
            "refreshDataSource": RefreshDataSourceResponse.from_dict(obj["refreshDataSource"]) if obj.get("refreshDataSource") is not None else None,
            "trimWhitespace": TrimWhitespaceResponse.from_dict(obj["trimWhitespace"]) if obj.get("trimWhitespace") is not None else None,
            "updateConditionalFormatRule": UpdateConditionalFormatRuleResponse.from_dict(obj["updateConditionalFormatRule"]) if obj.get("updateConditionalFormatRule") is not None else None,
            "updateDataSource": UpdateDataSourceResponse.from_dict(obj["updateDataSource"]) if obj.get("updateDataSource") is not None else None,
            "updateDeveloperMetadata": UpdateDeveloperMetadataResponse.from_dict(obj["updateDeveloperMetadata"]) if obj.get("updateDeveloperMetadata") is not None else None,
            "updateEmbeddedObjectPosition": UpdateEmbeddedObjectPositionResponse.from_dict(obj["updateEmbeddedObjectPosition"]) if obj.get("updateEmbeddedObjectPosition") is not None else None
        })
        return _obj



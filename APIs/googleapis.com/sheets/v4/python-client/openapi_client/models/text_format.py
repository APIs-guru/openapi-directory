# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.color import Color
from openapi_client.models.color_style import ColorStyle
from openapi_client.models.link import Link
from typing import Optional, Set
from typing_extensions import Self

class TextFormat(BaseModel):
    """
    The format of a run of text in a cell. Absent values indicate that the field isn't specified.
    """ # noqa: E501
    bold: Optional[StrictBool] = Field(default=None, description="True if the text is bold.")
    font_family: Optional[StrictStr] = Field(default=None, description="The font family.", alias="fontFamily")
    font_size: Optional[StrictInt] = Field(default=None, description="The size of the font.", alias="fontSize")
    foreground_color: Optional[Color] = Field(default=None, alias="foregroundColor")
    foreground_color_style: Optional[ColorStyle] = Field(default=None, alias="foregroundColorStyle")
    italic: Optional[StrictBool] = Field(default=None, description="True if the text is italicized.")
    link: Optional[Link] = None
    strikethrough: Optional[StrictBool] = Field(default=None, description="True if the text has a strikethrough.")
    underline: Optional[StrictBool] = Field(default=None, description="True if the text is underlined.")
    __properties: ClassVar[List[str]] = ["bold", "fontFamily", "fontSize", "foregroundColor", "foregroundColorStyle", "italic", "link", "strikethrough", "underline"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TextFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of foreground_color
        if self.foreground_color:
            _dict['foregroundColor'] = self.foreground_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of foreground_color_style
        if self.foreground_color_style:
            _dict['foregroundColorStyle'] = self.foreground_color_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of link
        if self.link:
            _dict['link'] = self.link.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TextFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bold": obj.get("bold"),
            "fontFamily": obj.get("fontFamily"),
            "fontSize": obj.get("fontSize"),
            "foregroundColor": Color.from_dict(obj["foregroundColor"]) if obj.get("foregroundColor") is not None else None,
            "foregroundColorStyle": ColorStyle.from_dict(obj["foregroundColorStyle"]) if obj.get("foregroundColorStyle") is not None else None,
            "italic": obj.get("italic"),
            "link": Link.from_dict(obj["link"]) if obj.get("link") is not None else None,
            "strikethrough": obj.get("strikethrough"),
            "underline": obj.get("underline")
        })
        return _obj



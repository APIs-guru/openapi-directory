# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.color import Color
from openapi_client.models.color_style import ColorStyle
from typing import Optional, Set
from typing_extensions import Self

class TreemapChartColorScale(BaseModel):
    """
    A color scale for a treemap chart.
    """ # noqa: E501
    max_value_color: Optional[Color] = Field(default=None, alias="maxValueColor")
    max_value_color_style: Optional[ColorStyle] = Field(default=None, alias="maxValueColorStyle")
    mid_value_color: Optional[Color] = Field(default=None, alias="midValueColor")
    mid_value_color_style: Optional[ColorStyle] = Field(default=None, alias="midValueColorStyle")
    min_value_color: Optional[Color] = Field(default=None, alias="minValueColor")
    min_value_color_style: Optional[ColorStyle] = Field(default=None, alias="minValueColorStyle")
    no_data_color: Optional[Color] = Field(default=None, alias="noDataColor")
    no_data_color_style: Optional[ColorStyle] = Field(default=None, alias="noDataColorStyle")
    __properties: ClassVar[List[str]] = ["maxValueColor", "maxValueColorStyle", "midValueColor", "midValueColorStyle", "minValueColor", "minValueColorStyle", "noDataColor", "noDataColorStyle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TreemapChartColorScale from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of max_value_color
        if self.max_value_color:
            _dict['maxValueColor'] = self.max_value_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_value_color_style
        if self.max_value_color_style:
            _dict['maxValueColorStyle'] = self.max_value_color_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mid_value_color
        if self.mid_value_color:
            _dict['midValueColor'] = self.mid_value_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mid_value_color_style
        if self.mid_value_color_style:
            _dict['midValueColorStyle'] = self.mid_value_color_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_value_color
        if self.min_value_color:
            _dict['minValueColor'] = self.min_value_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_value_color_style
        if self.min_value_color_style:
            _dict['minValueColorStyle'] = self.min_value_color_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of no_data_color
        if self.no_data_color:
            _dict['noDataColor'] = self.no_data_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of no_data_color_style
        if self.no_data_color_style:
            _dict['noDataColorStyle'] = self.no_data_color_style.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TreemapChartColorScale from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maxValueColor": Color.from_dict(obj["maxValueColor"]) if obj.get("maxValueColor") is not None else None,
            "maxValueColorStyle": ColorStyle.from_dict(obj["maxValueColorStyle"]) if obj.get("maxValueColorStyle") is not None else None,
            "midValueColor": Color.from_dict(obj["midValueColor"]) if obj.get("midValueColor") is not None else None,
            "midValueColorStyle": ColorStyle.from_dict(obj["midValueColorStyle"]) if obj.get("midValueColorStyle") is not None else None,
            "minValueColor": Color.from_dict(obj["minValueColor"]) if obj.get("minValueColor") is not None else None,
            "minValueColorStyle": ColorStyle.from_dict(obj["minValueColorStyle"]) if obj.get("minValueColorStyle") is not None else None,
            "noDataColor": Color.from_dict(obj["noDataColor"]) if obj.get("noDataColor") is not None else None,
            "noDataColorStyle": ColorStyle.from_dict(obj["noDataColorStyle"]) if obj.get("noDataColorStyle") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Sheets API

    Reads and writes Google Sheets.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.color import Color
from openapi_client.models.color_style import ColorStyle
from openapi_client.models.text_format import TextFormat
from openapi_client.models.text_position import TextPosition
from typing import Optional, Set
from typing_extensions import Self

class BaselineValueFormat(BaseModel):
    """
    Formatting options for baseline value.
    """ # noqa: E501
    comparison_type: Optional[StrictStr] = Field(default=None, description="The comparison type of key value with baseline value.", alias="comparisonType")
    description: Optional[StrictStr] = Field(default=None, description="Description which is appended after the baseline value. This field is optional.")
    negative_color: Optional[Color] = Field(default=None, alias="negativeColor")
    negative_color_style: Optional[ColorStyle] = Field(default=None, alias="negativeColorStyle")
    position: Optional[TextPosition] = None
    positive_color: Optional[Color] = Field(default=None, alias="positiveColor")
    positive_color_style: Optional[ColorStyle] = Field(default=None, alias="positiveColorStyle")
    text_format: Optional[TextFormat] = Field(default=None, alias="textFormat")
    __properties: ClassVar[List[str]] = ["comparisonType", "description", "negativeColor", "negativeColorStyle", "position", "positiveColor", "positiveColorStyle", "textFormat"]

    @field_validator('comparison_type')
    def comparison_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPARISON_TYPE_UNDEFINED', 'ABSOLUTE_DIFFERENCE', 'PERCENTAGE_DIFFERENCE']):
            raise ValueError("must be one of enum values ('COMPARISON_TYPE_UNDEFINED', 'ABSOLUTE_DIFFERENCE', 'PERCENTAGE_DIFFERENCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BaselineValueFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of negative_color
        if self.negative_color:
            _dict['negativeColor'] = self.negative_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of negative_color_style
        if self.negative_color_style:
            _dict['negativeColorStyle'] = self.negative_color_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of position
        if self.position:
            _dict['position'] = self.position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of positive_color
        if self.positive_color:
            _dict['positiveColor'] = self.positive_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of positive_color_style
        if self.positive_color_style:
            _dict['positiveColorStyle'] = self.positive_color_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_format
        if self.text_format:
            _dict['textFormat'] = self.text_format.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BaselineValueFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comparisonType": obj.get("comparisonType"),
            "description": obj.get("description"),
            "negativeColor": Color.from_dict(obj["negativeColor"]) if obj.get("negativeColor") is not None else None,
            "negativeColorStyle": ColorStyle.from_dict(obj["negativeColorStyle"]) if obj.get("negativeColorStyle") is not None else None,
            "position": TextPosition.from_dict(obj["position"]) if obj.get("position") is not None else None,
            "positiveColor": Color.from_dict(obj["positiveColor"]) if obj.get("positiveColor") is not None else None,
            "positiveColorStyle": ColorStyle.from_dict(obj["positiveColorStyle"]) if obj.get("positiveColorStyle") is not None else None,
            "textFormat": TextFormat.from_dict(obj["textFormat"]) if obj.get("textFormat") is not None else None
        })
        return _obj



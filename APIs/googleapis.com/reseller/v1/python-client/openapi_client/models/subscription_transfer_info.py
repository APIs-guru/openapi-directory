# coding: utf-8

"""
    Google Workspace Reseller API

    Perform common functions that are available on the Channel Services console at scale, like placing orders and viewing customer information

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionTransferInfo(BaseModel):
    """
    Read-only transfer related information for the subscription. For more information, see retrieve transferable subscriptions for a customer.
    """ # noqa: E501
    current_legacy_sku_id: Optional[StrictStr] = Field(default=None, description="The `skuId` of the current resold subscription. This is populated only when the customer has a subscription with a legacy SKU and the subscription resource is populated with the `skuId` of the SKU recommended for the transfer.", alias="currentLegacySkuId")
    minimum_transferable_seats: Optional[StrictInt] = Field(default=None, description="When inserting a subscription, this is the minimum number of seats listed in the transfer order for this product. For example, if the customer has 20 users, the reseller cannot place a transfer order of 15 seats. The minimum is 20 seats.", alias="minimumTransferableSeats")
    transferability_expiration_time: Optional[StrictStr] = Field(default=None, description="The time when transfer token or intent to transfer will expire. The time is in milliseconds using UNIX Epoch format.", alias="transferabilityExpirationTime")
    __properties: ClassVar[List[str]] = ["currentLegacySkuId", "minimumTransferableSeats", "transferabilityExpirationTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionTransferInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionTransferInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentLegacySkuId": obj.get("currentLegacySkuId"),
            "minimumTransferableSeats": obj.get("minimumTransferableSeats"),
            "transferabilityExpirationTime": obj.get("transferabilityExpirationTime")
        })
        return _obj



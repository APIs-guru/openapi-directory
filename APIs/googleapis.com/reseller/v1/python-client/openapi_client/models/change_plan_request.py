# coding: utf-8

"""
    Google Workspace Reseller API

    Perform common functions that are available on the Channel Services console at scale, like placing orders and viewing customer information

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.seats import Seats
from typing import Optional, Set
from typing_extensions import Self

class ChangePlanRequest(BaseModel):
    """
    JSON template for the ChangePlan rpc request.
    """ # noqa: E501
    deal_code: Optional[StrictStr] = Field(default=None, description="Google-issued code (100 char max) for discounted pricing on subscription plans. Deal code must be included in `changePlan` request in order to receive discounted rate. This property is optional. If a deal code has already been added to a subscription, this property may be left empty and the existing discounted rate will still apply (if not empty, only provide the deal code that is already present on the subscription). If a deal code has never been added to a subscription and this property is left blank, regular pricing will apply.", alias="dealCode")
    kind: Optional[StrictStr] = Field(default='subscriptions#changePlanRequest', description="Identifies the resource as a subscription change plan request. Value: `subscriptions#changePlanRequest`")
    plan_name: Optional[StrictStr] = Field(default=None, description="The `planName` property is required. This is the name of the subscription's payment plan. For more information about the Google payment plans, see API concepts. Possible values are: - `ANNUAL_MONTHLY_PAY` - The annual commitment plan with monthly payments *Caution: *`ANNUAL_MONTHLY_PAY` is returned as `ANNUAL` in all API responses. - `ANNUAL_YEARLY_PAY` - The annual commitment plan with yearly payments - `FLEXIBLE` - The flexible plan - `TRIAL` - The 30-day free trial plan ", alias="planName")
    purchase_order_id: Optional[StrictStr] = Field(default=None, description="This is an optional property. This purchase order (PO) information is for resellers to use for their company tracking usage. If a `purchaseOrderId` value is given it appears in the API responses and shows up in the invoice. The property accepts up to 80 plain text characters.", alias="purchaseOrderId")
    seats: Optional[Seats] = None
    __properties: ClassVar[List[str]] = ["dealCode", "kind", "planName", "purchaseOrderId", "seats"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChangePlanRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of seats
        if self.seats:
            _dict['seats'] = self.seats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChangePlanRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dealCode": obj.get("dealCode"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'subscriptions#changePlanRequest',
            "planName": obj.get("planName"),
            "purchaseOrderId": obj.get("purchaseOrderId"),
            "seats": Seats.from_dict(obj["seats"]) if obj.get("seats") is not None else None
        })
        return _obj



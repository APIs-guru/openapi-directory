# coding: utf-8

"""
    Google Workspace Reseller API

    Perform common functions that are available on the Channel Services console at scale, like placing orders and viewing customer information

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.renewal_settings import RenewalSettings
from openapi_client.models.seats import Seats
from openapi_client.models.subscription_plan import SubscriptionPlan
from openapi_client.models.subscription_transfer_info import SubscriptionTransferInfo
from openapi_client.models.subscription_trial_settings import SubscriptionTrialSettings
from typing import Optional, Set
from typing_extensions import Self

class Subscription(BaseModel):
    """
    JSON template for a subscription.
    """ # noqa: E501
    billing_method: Optional[StrictStr] = Field(default=None, description="Read-only field that returns the current billing method for a subscription.", alias="billingMethod")
    creation_time: Optional[StrictStr] = Field(default=None, description="The `creationTime` property is the date when subscription was created. It is in milliseconds using the Epoch format. See an example Epoch converter.", alias="creationTime")
    customer_domain: Optional[StrictStr] = Field(default=None, description="Primary domain name of the customer", alias="customerDomain")
    customer_id: Optional[StrictStr] = Field(default=None, description="This property will always be returned in a response as the unique identifier generated by Google. In a request, this property can be either the primary domain or the unique identifier generated by Google.", alias="customerId")
    deal_code: Optional[StrictStr] = Field(default=None, description="Google-issued code (100 char max) for discounted pricing on subscription plans. Deal code must be included in `insert` requests in order to receive discounted rate. This property is optional, regular pricing applies if left empty.", alias="dealCode")
    kind: Optional[StrictStr] = Field(default='reseller#subscription', description="Identifies the resource as a Subscription. Value: `reseller#subscription`")
    plan: Optional[SubscriptionPlan] = None
    purchase_order_id: Optional[StrictStr] = Field(default=None, description="This is an optional property. This purchase order (PO) information is for resellers to use for their company tracking usage. If a `purchaseOrderId` value is given it appears in the API responses and shows up in the invoice. The property accepts up to 80 plain text characters.", alias="purchaseOrderId")
    renewal_settings: Optional[RenewalSettings] = Field(default=None, alias="renewalSettings")
    resource_ui_url: Optional[StrictStr] = Field(default=None, description="URL to customer's Subscriptions page in the Admin console. The read-only URL is generated by the API service. This is used if your client application requires the customer to complete a task using the Subscriptions page in the Admin console.", alias="resourceUiUrl")
    seats: Optional[Seats] = None
    sku_id: Optional[StrictStr] = Field(default=None, description="A required property. The `skuId` is a unique system identifier for a product's SKU assigned to a customer in the subscription. For products and SKUs available in this version of the API, see Product and SKU IDs.", alias="skuId")
    sku_name: Optional[StrictStr] = Field(default=None, description="Read-only external display name for a product's SKU assigned to a customer in the subscription. SKU names are subject to change at Google's discretion. For products and SKUs available in this version of the API, see Product and SKU IDs.", alias="skuName")
    status: Optional[StrictStr] = Field(default=None, description="This is an optional property.")
    subscription_id: Optional[StrictStr] = Field(default=None, description="The `subscriptionId` is the subscription identifier and is unique for each customer. This is a required property. Since a `subscriptionId` changes when a subscription is updated, we recommend not using this ID as a key for persistent data. Use the `subscriptionId` as described in retrieve all reseller subscriptions.", alias="subscriptionId")
    suspension_reasons: Optional[List[StrictStr]] = Field(default=None, description="Read-only field containing an enumerable of all the current suspension reasons for a subscription. It is possible for a subscription to have many concurrent, overlapping suspension reasons. A subscription's `STATUS` is `SUSPENDED` until all pending suspensions are removed. Possible options include: - `PENDING_TOS_ACCEPTANCE` - The customer has not logged in and accepted the G Suite Resold Terms of Services. - `RENEWAL_WITH_TYPE_CANCEL` - The customer's commitment ended and their service was cancelled at the end of their term. - `RESELLER_INITIATED` - A manual suspension invoked by a Reseller. - `TRIAL_ENDED` - The customer's trial expired without a plan selected. - `OTHER` - The customer is suspended for an internal Google reason (e.g. abuse or otherwise). ", alias="suspensionReasons")
    transfer_info: Optional[SubscriptionTransferInfo] = Field(default=None, alias="transferInfo")
    trial_settings: Optional[SubscriptionTrialSettings] = Field(default=None, alias="trialSettings")
    __properties: ClassVar[List[str]] = ["billingMethod", "creationTime", "customerDomain", "customerId", "dealCode", "kind", "plan", "purchaseOrderId", "renewalSettings", "resourceUiUrl", "seats", "skuId", "skuName", "status", "subscriptionId", "suspensionReasons", "transferInfo", "trialSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Subscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of plan
        if self.plan:
            _dict['plan'] = self.plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of renewal_settings
        if self.renewal_settings:
            _dict['renewalSettings'] = self.renewal_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seats
        if self.seats:
            _dict['seats'] = self.seats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfer_info
        if self.transfer_info:
            _dict['transferInfo'] = self.transfer_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trial_settings
        if self.trial_settings:
            _dict['trialSettings'] = self.trial_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Subscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingMethod": obj.get("billingMethod"),
            "creationTime": obj.get("creationTime"),
            "customerDomain": obj.get("customerDomain"),
            "customerId": obj.get("customerId"),
            "dealCode": obj.get("dealCode"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'reseller#subscription',
            "plan": SubscriptionPlan.from_dict(obj["plan"]) if obj.get("plan") is not None else None,
            "purchaseOrderId": obj.get("purchaseOrderId"),
            "renewalSettings": RenewalSettings.from_dict(obj["renewalSettings"]) if obj.get("renewalSettings") is not None else None,
            "resourceUiUrl": obj.get("resourceUiUrl"),
            "seats": Seats.from_dict(obj["seats"]) if obj.get("seats") is not None else None,
            "skuId": obj.get("skuId"),
            "skuName": obj.get("skuName"),
            "status": obj.get("status"),
            "subscriptionId": obj.get("subscriptionId"),
            "suspensionReasons": obj.get("suspensionReasons"),
            "transferInfo": SubscriptionTransferInfo.from_dict(obj["transferInfo"]) if obj.get("transferInfo") is not None else None,
            "trialSettings": SubscriptionTrialSettings.from_dict(obj["trialSettings"]) if obj.get("trialSettings") is not None else None
        })
        return _obj



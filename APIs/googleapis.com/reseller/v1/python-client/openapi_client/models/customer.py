# coding: utf-8

"""
    Google Workspace Reseller API

    Perform common functions that are available on the Channel Services console at scale, like placing orders and viewing customer information

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.primary_admin import PrimaryAdmin
from typing import Optional, Set
from typing_extensions import Self

class Customer(BaseModel):
    """
    When a Google customer's account is registered with a reseller, the customer's subscriptions for Google services are managed by this reseller. A customer is described by a primary domain name and a physical address.
    """ # noqa: E501
    alternate_email: Optional[StrictStr] = Field(default=None, description="Like the \"Customer email\" in the reseller tools, this email is the secondary contact used if something happens to the customer's service such as service outage or a security issue. This property is required when creating a new \"domain\" customer and should not use the same domain as `customerDomain`. The `alternateEmail` field is not necessary to create a \"team\" customer.", alias="alternateEmail")
    customer_domain: Optional[StrictStr] = Field(default=None, description="The customer's primary domain name string. `customerDomain` is required when creating a new customer. Do not include the `www` prefix in the domain when adding a customer.", alias="customerDomain")
    customer_domain_verified: Optional[StrictBool] = Field(default=None, description="Whether the customer's primary domain has been verified.", alias="customerDomainVerified")
    customer_id: Optional[StrictStr] = Field(default=None, description="This property will always be returned in a response as the unique identifier generated by Google. In a request, this property can be either the primary domain or the unique identifier generated by Google.", alias="customerId")
    customer_type: Optional[StrictStr] = Field(default=None, description="Identifies the type of the customer. Acceptable values include: * `domain`: Implies a domain-verified customer (default). * `team`: Implies an email-verified customer. For more information, see [managed teams](https://support.google.com/a/users/answer/9939479).", alias="customerType")
    kind: Optional[StrictStr] = Field(default='reseller#customer', description="Identifies the resource as a customer. Value: `reseller#customer`")
    phone_number: Optional[StrictStr] = Field(default=None, description="Customer contact phone number. Must start with \"+\" followed by the country code. The rest of the number can be contiguous numbers or respect the phone local format conventions, but it must be a real phone number and not, for example, \"123\". This field is silently ignored if invalid.", alias="phoneNumber")
    postal_address: Optional[Address] = Field(default=None, alias="postalAddress")
    primary_admin: Optional[PrimaryAdmin] = Field(default=None, alias="primaryAdmin")
    resource_ui_url: Optional[StrictStr] = Field(default=None, description="URL to customer's Admin console dashboard. The read-only URL is generated by the API service. This is used if your client application requires the customer to complete a task in the Admin console.", alias="resourceUiUrl")
    __properties: ClassVar[List[str]] = ["alternateEmail", "customerDomain", "customerDomainVerified", "customerId", "customerType", "kind", "phoneNumber", "postalAddress", "primaryAdmin", "resourceUiUrl"]

    @field_validator('customer_type')
    def customer_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['customerTypeUnspecified', 'domain', 'team']):
            raise ValueError("must be one of enum values ('customerTypeUnspecified', 'domain', 'team')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Customer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of postal_address
        if self.postal_address:
            _dict['postalAddress'] = self.postal_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primary_admin
        if self.primary_admin:
            _dict['primaryAdmin'] = self.primary_admin.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Customer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alternateEmail": obj.get("alternateEmail"),
            "customerDomain": obj.get("customerDomain"),
            "customerDomainVerified": obj.get("customerDomainVerified"),
            "customerId": obj.get("customerId"),
            "customerType": obj.get("customerType"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'reseller#customer',
            "phoneNumber": obj.get("phoneNumber"),
            "postalAddress": Address.from_dict(obj["postalAddress"]) if obj.get("postalAddress") is not None else None,
            "primaryAdmin": PrimaryAdmin.from_dict(obj["primaryAdmin"]) if obj.get("primaryAdmin") is not None else None,
            "resourceUiUrl": obj.get("resourceUiUrl")
        })
        return _obj



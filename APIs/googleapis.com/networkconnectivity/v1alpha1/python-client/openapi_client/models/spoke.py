# coding: utf-8

"""
    Network Connectivity API

    This API enables connectivity with and between Google Cloud resources.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.router_appliance_instance import RouterApplianceInstance
from typing import Optional, Set
from typing_extensions import Self

class Spoke(BaseModel):
    """
    A Spoke is an abstraction of a network attachment being attached to a Hub. A Spoke can be underlying a VPN tunnel, a VLAN (interconnect) attachment, a Router appliance, etc.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="The time when the Spoke was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Short description of the spoke resource")
    hub: Optional[StrictStr] = Field(default=None, description="The resource URL of the hub resource that the spoke is attached to")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="User-defined labels.")
    linked_interconnect_attachments: Optional[List[StrictStr]] = Field(default=None, description="The URIs of linked interconnect attachment resources", alias="linkedInterconnectAttachments")
    linked_router_appliance_instances: Optional[List[RouterApplianceInstance]] = Field(default=None, description="The URIs of linked Router appliance resources", alias="linkedRouterApplianceInstances")
    linked_vpn_tunnels: Optional[List[StrictStr]] = Field(default=None, description="The URIs of linked VPN tunnel resources", alias="linkedVpnTunnels")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The name of a Spoke resource.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current lifecycle state of this Hub.")
    unique_id: Optional[StrictStr] = Field(default=None, description="Output only. Google-generated UUID for this resource. This is unique across all Spoke resources. If a Spoke resource is deleted and another with the same name is created, it gets a different unique_id.", alias="uniqueId")
    update_time: Optional[StrictStr] = Field(default=None, description="The time when the Spoke was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "hub", "labels", "linkedInterconnectAttachments", "linkedRouterApplianceInstances", "linkedVpnTunnels", "name", "state", "uniqueId", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'DELETING', 'UPDATING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'DELETING', 'UPDATING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Spoke from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "state",
            "unique_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in linked_router_appliance_instances (list)
        _items = []
        if self.linked_router_appliance_instances:
            for _item_linked_router_appliance_instances in self.linked_router_appliance_instances:
                if _item_linked_router_appliance_instances:
                    _items.append(_item_linked_router_appliance_instances.to_dict())
            _dict['linkedRouterApplianceInstances'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Spoke from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "hub": obj.get("hub"),
            "labels": obj.get("labels"),
            "linkedInterconnectAttachments": obj.get("linkedInterconnectAttachments"),
            "linkedRouterApplianceInstances": [RouterApplianceInstance.from_dict(_item) for _item in obj["linkedRouterApplianceInstances"]] if obj.get("linkedRouterApplianceInstances") is not None else None,
            "linkedVpnTunnels": obj.get("linkedVpnTunnels"),
            "name": obj.get("name"),
            "state": obj.get("state"),
            "uniqueId": obj.get("uniqueId"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



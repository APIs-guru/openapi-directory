# coding: utf-8

"""
    Network Connectivity API

    This API enables connectivity with and between Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.linked_interconnect_attachments import LinkedInterconnectAttachments
from openapi_client.models.linked_router_appliance_instances import LinkedRouterApplianceInstances
from openapi_client.models.linked_vpc_network import LinkedVpcNetwork
from openapi_client.models.linked_vpn_tunnels import LinkedVpnTunnels
from openapi_client.models.state_reason import StateReason
from typing import Optional, Set
from typing_extensions import Self

class Spoke(BaseModel):
    """
    A Network Connectivity Center spoke represents one or more network connectivity resources. When you create a spoke, you associate it with a hub. You must also identify a value for exactly one of the following fields: * linked_vpn_tunnels * linked_interconnect_attachments * linked_router_appliance_instances * linked_vpc_network
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the spoke was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="An optional description of the spoke.")
    group: Optional[StrictStr] = Field(default=None, description="Optional. The name of the group that this spoke is associated with.")
    hub: Optional[StrictStr] = Field(default=None, description="Immutable. The name of the hub that this spoke is attached to.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional labels in key-value pair format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).")
    linked_interconnect_attachments: Optional[LinkedInterconnectAttachments] = Field(default=None, alias="linkedInterconnectAttachments")
    linked_router_appliance_instances: Optional[LinkedRouterApplianceInstances] = Field(default=None, alias="linkedRouterApplianceInstances")
    linked_vpc_network: Optional[LinkedVpcNetwork] = Field(default=None, alias="linkedVpcNetwork")
    linked_vpn_tunnels: Optional[LinkedVpnTunnels] = Field(default=None, alias="linkedVpnTunnels")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The name of the spoke. Spoke names must be unique. They use the following form: `projects/{project_number}/locations/{region}/spokes/{spoke_id}`")
    reasons: Optional[List[StateReason]] = Field(default=None, description="Output only. The reasons for current state of the spoke. Only present when the spoke is in the `INACTIVE` state.")
    spoke_type: Optional[StrictStr] = Field(default=None, description="Output only. The type of resource associated with the spoke.", alias="spokeType")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current lifecycle state of this spoke.")
    unique_id: Optional[StrictStr] = Field(default=None, description="Output only. The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is deleted and another with the same name is created, the new spoke is assigned a different `unique_id`.", alias="uniqueId")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the spoke was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "group", "hub", "labels", "linkedInterconnectAttachments", "linkedRouterApplianceInstances", "linkedVpcNetwork", "linkedVpnTunnels", "name", "reasons", "spokeType", "state", "uniqueId", "updateTime"]

    @field_validator('spoke_type')
    def spoke_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SPOKE_TYPE_UNSPECIFIED', 'VPN_TUNNEL', 'INTERCONNECT_ATTACHMENT', 'ROUTER_APPLIANCE', 'VPC_NETWORK']):
            raise ValueError("must be one of enum values ('SPOKE_TYPE_UNSPECIFIED', 'VPN_TUNNEL', 'INTERCONNECT_ATTACHMENT', 'ROUTER_APPLIANCE', 'VPC_NETWORK')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'DELETING', 'ACCEPTING', 'REJECTING', 'UPDATING', 'INACTIVE', 'OBSOLETE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'DELETING', 'ACCEPTING', 'REJECTING', 'UPDATING', 'INACTIVE', 'OBSOLETE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Spoke from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "reasons",
            "spoke_type",
            "state",
            "unique_id",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of linked_interconnect_attachments
        if self.linked_interconnect_attachments:
            _dict['linkedInterconnectAttachments'] = self.linked_interconnect_attachments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linked_router_appliance_instances
        if self.linked_router_appliance_instances:
            _dict['linkedRouterApplianceInstances'] = self.linked_router_appliance_instances.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linked_vpc_network
        if self.linked_vpc_network:
            _dict['linkedVpcNetwork'] = self.linked_vpc_network.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linked_vpn_tunnels
        if self.linked_vpn_tunnels:
            _dict['linkedVpnTunnels'] = self.linked_vpn_tunnels.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item_reasons in self.reasons:
                if _item_reasons:
                    _items.append(_item_reasons.to_dict())
            _dict['reasons'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Spoke from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "group": obj.get("group"),
            "hub": obj.get("hub"),
            "labels": obj.get("labels"),
            "linkedInterconnectAttachments": LinkedInterconnectAttachments.from_dict(obj["linkedInterconnectAttachments"]) if obj.get("linkedInterconnectAttachments") is not None else None,
            "linkedRouterApplianceInstances": LinkedRouterApplianceInstances.from_dict(obj["linkedRouterApplianceInstances"]) if obj.get("linkedRouterApplianceInstances") is not None else None,
            "linkedVpcNetwork": LinkedVpcNetwork.from_dict(obj["linkedVpcNetwork"]) if obj.get("linkedVpcNetwork") is not None else None,
            "linkedVpnTunnels": LinkedVpnTunnels.from_dict(obj["linkedVpnTunnels"]) if obj.get("linkedVpnTunnels") is not None else None,
            "name": obj.get("name"),
            "reasons": [StateReason.from_dict(_item) for _item in obj["reasons"]] if obj.get("reasons") is not None else None,
            "spokeType": obj.get("spokeType"),
            "state": obj.get("state"),
            "uniqueId": obj.get("uniqueId"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



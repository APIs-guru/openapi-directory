# coding: utf-8

"""
    Network Connectivity API

    This API enables connectivity with and between Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InternalRange(BaseModel):
    """
    The internal range resource for IPAM operations within a VPC network. Used to represent a private address range along with behavioral characterstics of that range (its usage and peering behavior). Networking resources can link to this range if they are created as belonging to it.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Time when the internal range was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="A description of this resource.")
    ip_cidr_range: Optional[StrictStr] = Field(default=None, description="The IP range that this internal range defines.", alias="ipCidrRange")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="User-defined labels.")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The name of an internal range. Format: projects/{project}/locations/{location}/internalRanges/{internal_range} See: https://google.aip.dev/122#fields-representing-resource-names")
    network: Optional[StrictStr] = Field(default=None, description="The URL or resource ID of the network in which to reserve the internal range. The network cannot be deleted if there are any reserved internal ranges referring to it. Legacy networks are not supported. This can only be specified for a global internal address. Example: - URL: /compute/v1/projects/{project}/global/networks/{resourceId} - ID: network123")
    overlaps: Optional[List[StrictStr]] = Field(default=None, description="Optional. Types of resources that are allowed to overlap with the current internal range.")
    peering: Optional[StrictStr] = Field(default=None, description="The type of peering set for this internal range.")
    prefix_length: Optional[StrictInt] = Field(default=None, description="An alternate to ip_cidr_range. Can be set when trying to create a reservation that automatically finds a free range of the given size. If both ip_cidr_range and prefix_length are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.", alias="prefixLength")
    target_cidr_range: Optional[List[StrictStr]] = Field(default=None, description="Optional. Can be set to narrow down or pick a different address space while searching for a free range. If not set, defaults to the \"10.0.0.0/8\" address space. This can be used to search in other rfc-1918 address spaces like \"172.16.0.0/12\" and \"192.168.0.0/16\" or non-rfc-1918 address spaces used in the VPC.", alias="targetCidrRange")
    update_time: Optional[StrictStr] = Field(default=None, description="Time when the internal range was updated.", alias="updateTime")
    usage: Optional[StrictStr] = Field(default=None, description="The type of usage set for this InternalRange.")
    users: Optional[List[StrictStr]] = Field(default=None, description="Output only. The list of resources that refer to this internal range. Resources that use the internal range for their range allocation are referred to as users of the range. Other resources mark themselves as users while doing so by creating a reference to this internal range. Having a user, based on this reference, prevents deletion of the internal range referred to. Can be empty.")
    __properties: ClassVar[List[str]] = ["createTime", "description", "ipCidrRange", "labels", "name", "network", "overlaps", "peering", "prefixLength", "targetCidrRange", "updateTime", "usage", "users"]

    @field_validator('overlaps')
    def overlaps_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['OVERLAP_UNSPECIFIED', 'OVERLAP_ROUTE_RANGE', 'OVERLAP_EXISTING_SUBNET_RANGE']):
                raise ValueError("each list item must be one of ('OVERLAP_UNSPECIFIED', 'OVERLAP_ROUTE_RANGE', 'OVERLAP_EXISTING_SUBNET_RANGE')")
        return value

    @field_validator('peering')
    def peering_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PEERING_UNSPECIFIED', 'FOR_SELF', 'FOR_PEER', 'NOT_SHARED']):
            raise ValueError("must be one of enum values ('PEERING_UNSPECIFIED', 'FOR_SELF', 'FOR_PEER', 'NOT_SHARED')")
        return value

    @field_validator('usage')
    def usage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['USAGE_UNSPECIFIED', 'FOR_VPC', 'EXTERNAL_TO_VPC']):
            raise ValueError("must be one of enum values ('USAGE_UNSPECIFIED', 'FOR_VPC', 'EXTERNAL_TO_VPC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InternalRange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "users",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InternalRange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "ipCidrRange": obj.get("ipCidrRange"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "network": obj.get("network"),
            "overlaps": obj.get("overlaps"),
            "peering": obj.get("peering"),
            "prefixLength": obj.get("prefixLength"),
            "targetCidrRange": obj.get("targetCidrRange"),
            "updateTime": obj.get("updateTime"),
            "usage": obj.get("usage"),
            "users": obj.get("users")
        })
        return _obj



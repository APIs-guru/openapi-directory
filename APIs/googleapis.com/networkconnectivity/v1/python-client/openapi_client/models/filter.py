# coding: utf-8

"""
    Network Connectivity API

    This API enables connectivity with and between Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Filter(BaseModel):
    """
    Filter matches L4 traffic.
    """ # noqa: E501
    dest_range: Optional[StrictStr] = Field(default=None, description="Optional. The destination IP range of outgoing packets that this policy-based route applies to. Default is \"0.0.0.0/0\" if protocol version is IPv4.", alias="destRange")
    ip_protocol: Optional[StrictStr] = Field(default=None, description="Optional. The IP protocol that this policy-based route applies to. Valid values are 'TCP', 'UDP', and 'ALL'. Default is 'ALL'.", alias="ipProtocol")
    protocol_version: Optional[StrictStr] = Field(default=None, description="Required. Internet protocol versions this policy-based route applies to. For this version, only IPV4 is supported.", alias="protocolVersion")
    src_range: Optional[StrictStr] = Field(default=None, description="Optional. The source IP range of outgoing packets that this policy-based route applies to. Default is \"0.0.0.0/0\" if protocol version is IPv4.", alias="srcRange")
    __properties: ClassVar[List[str]] = ["destRange", "ipProtocol", "protocolVersion", "srcRange"]

    @field_validator('protocol_version')
    def protocol_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROTOCOL_VERSION_UNSPECIFIED', 'IPV4']):
            raise ValueError("must be one of enum values ('PROTOCOL_VERSION_UNSPECIFIED', 'IPV4')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Filter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Filter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destRange": obj.get("destRange"),
            "ipProtocol": obj.get("ipProtocol"),
            "protocolVersion": obj.get("protocolVersion"),
            "srcRange": obj.get("srcRange")
        })
        return _obj



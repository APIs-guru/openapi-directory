# coding: utf-8

"""
    Network Connectivity API

    This API enables connectivity with and between Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.filter import Filter
from openapi_client.models.interconnect_attachment import InterconnectAttachment
from openapi_client.models.virtual_machine import VirtualMachine
from openapi_client.models.warnings import Warnings
from typing import Optional, Set
from typing_extensions import Self

class PolicyBasedRoute(BaseModel):
    """
    Policy-based routes route L4 network traffic based on not just destination IP address, but also source IP address, protocol, and more. If a policy-based route conflicts with other types of routes, the policy-based route always take precedence.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the policy-based route was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. An optional description of this resource. Provide this field when you create the resource.")
    filter: Optional[Filter] = None
    interconnect_attachment: Optional[InterconnectAttachment] = Field(default=None, alias="interconnectAttachment")
    kind: Optional[StrictStr] = Field(default=None, description="Output only. Type of this resource. Always networkconnectivity#policyBasedRoute for policy-based Route resources.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="User-defined labels.")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. A unique name of the resource in the form of `projects/{project_number}/locations/global/PolicyBasedRoutes/{policy_based_route_id}`")
    network: Optional[StrictStr] = Field(default=None, description="Required. Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.")
    next_hop_ilb_ip: Optional[StrictStr] = Field(default=None, description="Optional. The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets. For this version, only nextHopIlbIp is supported.", alias="nextHopIlbIp")
    next_hop_other_routes: Optional[StrictStr] = Field(default=None, description="Optional. Other routes that will be referenced to determine the next hop of the packet.", alias="nextHopOtherRoutes")
    priority: Optional[StrictInt] = Field(default=None, description="Optional. The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.")
    self_link: Optional[StrictStr] = Field(default=None, description="Output only. Server-defined fully-qualified URL for this resource.", alias="selfLink")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the policy-based route was updated.", alias="updateTime")
    virtual_machine: Optional[VirtualMachine] = Field(default=None, alias="virtualMachine")
    warnings: Optional[List[Warnings]] = Field(default=None, description="Output only. If potential misconfigurations are detected for this route, this field will be populated with warning messages.")
    __properties: ClassVar[List[str]] = ["createTime", "description", "filter", "interconnectAttachment", "kind", "labels", "name", "network", "nextHopIlbIp", "nextHopOtherRoutes", "priority", "selfLink", "updateTime", "virtualMachine", "warnings"]

    @field_validator('next_hop_other_routes')
    def next_hop_other_routes_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OTHER_ROUTES_UNSPECIFIED', 'DEFAULT_ROUTING']):
            raise ValueError("must be one of enum values ('OTHER_ROUTES_UNSPECIFIED', 'DEFAULT_ROUTING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyBasedRoute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "kind",
            "self_link",
            "update_time",
            "warnings",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interconnect_attachment
        if self.interconnect_attachment:
            _dict['interconnectAttachment'] = self.interconnect_attachment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of virtual_machine
        if self.virtual_machine:
            _dict['virtualMachine'] = self.virtual_machine.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyBasedRoute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "filter": Filter.from_dict(obj["filter"]) if obj.get("filter") is not None else None,
            "interconnectAttachment": InterconnectAttachment.from_dict(obj["interconnectAttachment"]) if obj.get("interconnectAttachment") is not None else None,
            "kind": obj.get("kind"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "network": obj.get("network"),
            "nextHopIlbIp": obj.get("nextHopIlbIp"),
            "nextHopOtherRoutes": obj.get("nextHopOtherRoutes"),
            "priority": obj.get("priority"),
            "selfLink": obj.get("selfLink"),
            "updateTime": obj.get("updateTime"),
            "virtualMachine": VirtualMachine.from_dict(obj["virtualMachine"]) if obj.get("virtualMachine") is not None else None,
            "warnings": [Warnings.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None
        })
        return _obj



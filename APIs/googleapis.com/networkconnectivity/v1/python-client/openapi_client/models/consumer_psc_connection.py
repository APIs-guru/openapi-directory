# coding: utf-8

"""
    Network Connectivity API

    This API enables connectivity with and between Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_rpc_error_info import GoogleRpcErrorInfo
from openapi_client.models.google_rpc_status import GoogleRpcStatus
from typing import Optional, Set
from typing_extensions import Self

class ConsumerPscConnection(BaseModel):
    """
    PSC connection details on consumer side.
    """ # noqa: E501
    error: Optional[GoogleRpcStatus] = None
    error_info: Optional[GoogleRpcErrorInfo] = Field(default=None, alias="errorInfo")
    error_type: Optional[StrictStr] = Field(default=None, description="The error type indicates whether the error is consumer facing, producer facing or system internal.", alias="errorType")
    forwarding_rule: Optional[StrictStr] = Field(default=None, description="The URI of the consumer forwarding rule created. Example: projects/{projectNumOrId}/regions/us-east1/networks/{resourceId}.", alias="forwardingRule")
    gce_operation: Optional[StrictStr] = Field(default=None, description="The last Compute Engine operation to setup PSC connection.", alias="gceOperation")
    ip: Optional[StrictStr] = Field(default=None, description="The IP literal allocated on the consumer network for the PSC forwarding rule that is created to connect to the producer service attachment in this service connection map.")
    network: Optional[StrictStr] = Field(default=None, description="The consumer network whose PSC forwarding rule is connected to the service attachments in this service connection map. Note that the network could be on a different project (shared VPC).")
    project: Optional[StrictStr] = Field(default=None, description="The consumer project whose PSC forwarding rule is connected to the service attachments in this service connection map.")
    psc_connection_id: Optional[StrictStr] = Field(default=None, description="The PSC connection id of the PSC forwarding rule connected to the service attachments in this service connection map.", alias="pscConnectionId")
    selected_subnetwork: Optional[StrictStr] = Field(default=None, description="Output only. The URI of the selected subnetwork selected to allocate IP address for this connection.", alias="selectedSubnetwork")
    service_attachment_uri: Optional[StrictStr] = Field(default=None, description="The URI of a service attachment which is the target of the PSC connection.", alias="serviceAttachmentUri")
    state: Optional[StrictStr] = Field(default=None, description="The state of the PSC connection.")
    __properties: ClassVar[List[str]] = ["error", "errorInfo", "errorType", "forwardingRule", "gceOperation", "ip", "network", "project", "pscConnectionId", "selectedSubnetwork", "serviceAttachmentUri", "state"]

    @field_validator('error_type')
    def error_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONNECTION_ERROR_TYPE_UNSPECIFIED', 'ERROR_INTERNAL', 'ERROR_CONSUMER_SIDE', 'ERROR_PRODUCER_SIDE']):
            raise ValueError("must be one of enum values ('CONNECTION_ERROR_TYPE_UNSPECIFIED', 'ERROR_INTERNAL', 'ERROR_CONSUMER_SIDE', 'ERROR_PRODUCER_SIDE')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'FAILED', 'CREATING', 'DELETING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'FAILED', 'CREATING', 'DELETING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsumerPscConnection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "selected_subnetwork",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error_info
        if self.error_info:
            _dict['errorInfo'] = self.error_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsumerPscConnection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "error": GoogleRpcStatus.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "errorInfo": GoogleRpcErrorInfo.from_dict(obj["errorInfo"]) if obj.get("errorInfo") is not None else None,
            "errorType": obj.get("errorType"),
            "forwardingRule": obj.get("forwardingRule"),
            "gceOperation": obj.get("gceOperation"),
            "ip": obj.get("ip"),
            "network": obj.get("network"),
            "project": obj.get("project"),
            "pscConnectionId": obj.get("pscConnectionId"),
            "selectedSubnetwork": obj.get("selectedSubnetwork"),
            "serviceAttachmentUri": obj.get("serviceAttachmentUri"),
            "state": obj.get("state")
        })
        return _obj



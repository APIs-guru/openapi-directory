# coding: utf-8

"""
    Network Connectivity API

    This API enables connectivity with and between Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.next_hop_vpc_network import NextHopVpcNetwork
from typing import Optional, Set
from typing_extensions import Self

class Route(BaseModel):
    """
    A route defines a path from VM instances within a spoke to a specific destination resource. Only VPC spokes have routes.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the route was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="An optional description of the route.")
    ip_cidr_range: Optional[StrictStr] = Field(default=None, description="The destination IP address range.", alias="ipCidrRange")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional labels in key-value pair format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).")
    location: Optional[StrictStr] = Field(default=None, description="Output only. The location of the route. Uses the following form: \"projects/{project}/locations/{location}\" Example: projects/1234/locations/us-central1")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The name of the route. Route names must be unique. Route names use the following form: `projects/{project_number}/locations/global/hubs/{hub}/routeTables/{route_table_id}/routes/{route_id}`")
    next_hop_vpc_network: Optional[NextHopVpcNetwork] = Field(default=None, alias="nextHopVpcNetwork")
    spoke: Optional[StrictStr] = Field(default=None, description="Immutable. The spoke that this route leads to. Example: projects/12345/locations/global/spokes/SPOKE")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current lifecycle state of the route.")
    type: Optional[StrictStr] = Field(default=None, description="Output only. The route's type. Its type is determined by the properties of its IP address range.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. The Google-generated UUID for the route. This value is unique across all Network Connectivity Center route resources. If a route is deleted and another with the same name is created, the new route is assigned a different `uid`.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the route was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "ipCidrRange", "labels", "location", "name", "nextHopVpcNetwork", "spoke", "state", "type", "uid", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'DELETING', 'ACCEPTING', 'REJECTING', 'UPDATING', 'INACTIVE', 'OBSOLETE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'DELETING', 'ACCEPTING', 'REJECTING', 'UPDATING', 'INACTIVE', 'OBSOLETE')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ROUTE_TYPE_UNSPECIFIED', 'VPC_PRIMARY_SUBNET', 'VPC_SECONDARY_SUBNET']):
            raise ValueError("must be one of enum values ('ROUTE_TYPE_UNSPECIFIED', 'VPC_PRIMARY_SUBNET', 'VPC_SECONDARY_SUBNET')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Route from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "location",
            "state",
            "type",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of next_hop_vpc_network
        if self.next_hop_vpc_network:
            _dict['nextHopVpcNetwork'] = self.next_hop_vpc_network.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Route from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "ipCidrRange": obj.get("ipCidrRange"),
            "labels": obj.get("labels"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "nextHopVpcNetwork": NextHopVpcNetwork.from_dict(obj["nextHopVpcNetwork"]) if obj.get("nextHopVpcNetwork") is not None else None,
            "spoke": obj.get("spoke"),
            "state": obj.get("state"),
            "type": obj.get("type"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



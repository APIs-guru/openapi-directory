# coding: utf-8

"""
    Network Connectivity API

    This API enables connectivity with and between Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.accept_hub_spoke_response import AcceptHubSpokeResponse

class TestAcceptHubSpokeResponse(unittest.TestCase):
    """AcceptHubSpokeResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AcceptHubSpokeResponse:
        """Test AcceptHubSpokeResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AcceptHubSpokeResponse`
        """
        model = AcceptHubSpokeResponse()
        if include_optional:
            return AcceptHubSpokeResponse(
                spoke = openapi_client.models.spoke.Spoke(
                    create_time = '', 
                    description = '', 
                    group = '', 
                    hub = '', 
                    labels = {
                        'key' : ''
                        }, 
                    linked_interconnect_attachments = openapi_client.models.linked_interconnect_attachments.LinkedInterconnectAttachments(
                        site_to_site_data_transfer = True, 
                        uris = [
                            ''
                            ], 
                        vpc_network = '', ), 
                    linked_router_appliance_instances = openapi_client.models.linked_router_appliance_instances.LinkedRouterApplianceInstances(
                        instances = [
                            openapi_client.models.router_appliance_instance.RouterApplianceInstance(
                                ip_address = '', 
                                virtual_machine = '', )
                            ], 
                        site_to_site_data_transfer = True, 
                        vpc_network = '', ), 
                    linked_vpc_network = openapi_client.models.linked_vpc_network.LinkedVpcNetwork(
                        exclude_export_ranges = [
                            ''
                            ], 
                        uri = '', ), 
                    linked_vpn_tunnels = openapi_client.models.linked_vpn_tunnels.LinkedVpnTunnels(
                        site_to_site_data_transfer = True, 
                        vpc_network = '', ), 
                    name = '', 
                    reasons = [
                        openapi_client.models.state_reason.StateReason(
                            code = 'CODE_UNSPECIFIED', 
                            message = '', 
                            user_details = '', )
                        ], 
                    spoke_type = 'SPOKE_TYPE_UNSPECIFIED', 
                    state = 'STATE_UNSPECIFIED', 
                    unique_id = '', 
                    update_time = '', )
            )
        else:
            return AcceptHubSpokeResponse(
        )
        """

    def testAcceptHubSpokeResponse(self):
        """Test AcceptHubSpokeResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Backup for GKE API

    Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.transformation_rule import TransformationRule

class TestTransformationRule(unittest.TestCase):
    """TransformationRule unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TransformationRule:
        """Test TransformationRule
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TransformationRule`
        """
        model = TransformationRule()
        if include_optional:
            return TransformationRule(
                description = '',
                field_actions = [
                    openapi_client.models.transformation_rule_action.TransformationRuleAction(
                        from_path = '', 
                        op = 'OP_UNSPECIFIED', 
                        path = '', 
                        value = '', )
                    ],
                resource_filter = openapi_client.models.resource_filter.ResourceFilter(
                    group_kinds = [
                        openapi_client.models.group_kind.GroupKind(
                            resource_group = '', 
                            resource_kind = '', )
                        ], 
                    json_path = '', 
                    namespaces = [
                        ''
                        ], )
            )
        else:
            return TransformationRule(
        )
        """

    def testTransformationRule(self):
        """Test TransformationRule"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

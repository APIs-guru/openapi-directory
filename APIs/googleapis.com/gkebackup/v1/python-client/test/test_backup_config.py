# coding: utf-8

"""
    Backup for GKE API

    Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.backup_config import BackupConfig

class TestBackupConfig(unittest.TestCase):
    """BackupConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BackupConfig:
        """Test BackupConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BackupConfig`
        """
        model = BackupConfig()
        if include_optional:
            return BackupConfig(
                all_namespaces = True,
                encryption_key = openapi_client.models.encryption_key.EncryptionKey(
                    gcp_kms_encryption_key = '', ),
                include_secrets = True,
                include_volume_data = True,
                selected_applications = openapi_client.models.namespaced_names.NamespacedNames(
                    namespaced_names = [
                        openapi_client.models.namespaced_name.NamespacedName(
                            name = '', 
                            namespace = '', )
                        ], ),
                selected_namespaces = openapi_client.models.namespaces.Namespaces(
                    namespaces = [
                        ''
                        ], )
            )
        else:
            return BackupConfig(
        )
        """

    def testBackupConfig(self):
        """Test BackupConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

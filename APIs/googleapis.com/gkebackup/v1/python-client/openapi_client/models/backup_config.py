# coding: utf-8

"""
    Backup for GKE API

    Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption_key import EncryptionKey
from openapi_client.models.namespaced_names import NamespacedNames
from openapi_client.models.namespaces import Namespaces
from typing import Optional, Set
from typing_extensions import Self

class BackupConfig(BaseModel):
    """
    BackupConfig defines the configuration of Backups created via this BackupPlan.
    """ # noqa: E501
    all_namespaces: Optional[StrictBool] = Field(default=None, description="If True, include all namespaced resources", alias="allNamespaces")
    encryption_key: Optional[EncryptionKey] = Field(default=None, alias="encryptionKey")
    include_secrets: Optional[StrictBool] = Field(default=None, description="Optional. This flag specifies whether Kubernetes Secret resources should be included when they fall into the scope of Backups. Default: False", alias="includeSecrets")
    include_volume_data: Optional[StrictBool] = Field(default=None, description="Optional. This flag specifies whether volume data should be backed up when PVCs are included in the scope of a Backup. Default: False", alias="includeVolumeData")
    selected_applications: Optional[NamespacedNames] = Field(default=None, alias="selectedApplications")
    selected_namespaces: Optional[Namespaces] = Field(default=None, alias="selectedNamespaces")
    __properties: ClassVar[List[str]] = ["allNamespaces", "encryptionKey", "includeSecrets", "includeVolumeData", "selectedApplications", "selectedNamespaces"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackupConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption_key
        if self.encryption_key:
            _dict['encryptionKey'] = self.encryption_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selected_applications
        if self.selected_applications:
            _dict['selectedApplications'] = self.selected_applications.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selected_namespaces
        if self.selected_namespaces:
            _dict['selectedNamespaces'] = self.selected_namespaces.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackupConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allNamespaces": obj.get("allNamespaces"),
            "encryptionKey": EncryptionKey.from_dict(obj["encryptionKey"]) if obj.get("encryptionKey") is not None else None,
            "includeSecrets": obj.get("includeSecrets"),
            "includeVolumeData": obj.get("includeVolumeData"),
            "selectedApplications": NamespacedNames.from_dict(obj["selectedApplications"]) if obj.get("selectedApplications") is not None else None,
            "selectedNamespaces": Namespaces.from_dict(obj["selectedNamespaces"]) if obj.get("selectedNamespaces") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Backup for GKE API

    Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.group_kind import GroupKind
from typing import Optional, Set
from typing_extensions import Self

class ClusterResourceRestoreScope(BaseModel):
    """
    Defines the scope of cluster-scoped resources to restore. Some group kinds are not reasonable choices for a restore, and will cause an error if selected here. Any scope selection that would restore \"all valid\" resources automatically excludes these group kinds. - gkebackup.gke.io/BackupJob - gkebackup.gke.io/RestoreJob - metrics.k8s.io/NodeMetrics - migration.k8s.io/StorageState - migration.k8s.io/StorageVersionMigration - Node - snapshot.storage.k8s.io/VolumeSnapshotContent - storage.k8s.io/CSINode Some group kinds are driven by restore configuration elsewhere, and will cause an error if selected here. - Namespace - PersistentVolume
    """ # noqa: E501
    all_group_kinds: Optional[StrictBool] = Field(default=None, description="Optional. If True, all valid cluster-scoped resources will be restored. Mutually exclusive to any other field in the message.", alias="allGroupKinds")
    excluded_group_kinds: Optional[List[GroupKind]] = Field(default=None, description="Optional. A list of cluster-scoped resource group kinds to NOT restore from the backup. If specified, all valid cluster-scoped resources will be restored except for those specified in the list. Mutually exclusive to any other field in the message.", alias="excludedGroupKinds")
    no_group_kinds: Optional[StrictBool] = Field(default=None, description="Optional. If True, no cluster-scoped resources will be restored. This has the same restore scope as if the message is not defined. Mutually exclusive to any other field in the message.", alias="noGroupKinds")
    selected_group_kinds: Optional[List[GroupKind]] = Field(default=None, description="Optional. A list of cluster-scoped resource group kinds to restore from the backup. If specified, only the selected resources will be restored. Mutually exclusive to any other field in the message.", alias="selectedGroupKinds")
    __properties: ClassVar[List[str]] = ["allGroupKinds", "excludedGroupKinds", "noGroupKinds", "selectedGroupKinds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterResourceRestoreScope from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in excluded_group_kinds (list)
        _items = []
        if self.excluded_group_kinds:
            for _item_excluded_group_kinds in self.excluded_group_kinds:
                if _item_excluded_group_kinds:
                    _items.append(_item_excluded_group_kinds.to_dict())
            _dict['excludedGroupKinds'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in selected_group_kinds (list)
        _items = []
        if self.selected_group_kinds:
            for _item_selected_group_kinds in self.selected_group_kinds:
                if _item_selected_group_kinds:
                    _items.append(_item_selected_group_kinds.to_dict())
            _dict['selectedGroupKinds'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterResourceRestoreScope from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allGroupKinds": obj.get("allGroupKinds"),
            "excludedGroupKinds": [GroupKind.from_dict(_item) for _item in obj["excludedGroupKinds"]] if obj.get("excludedGroupKinds") is not None else None,
            "noGroupKinds": obj.get("noGroupKinds"),
            "selectedGroupKinds": [GroupKind.from_dict(_item) for _item in obj["selectedGroupKinds"]] if obj.get("selectedGroupKinds") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Backup for GKE API

    Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cluster_resource_restore_scope import ClusterResourceRestoreScope
from openapi_client.models.namespaced_names import NamespacedNames
from openapi_client.models.namespaces import Namespaces
from openapi_client.models.substitution_rule import SubstitutionRule
from openapi_client.models.transformation_rule import TransformationRule
from typing import Optional, Set
from typing_extensions import Self

class RestoreConfig(BaseModel):
    """
    Configuration of a restore. Next id: 14
    """ # noqa: E501
    all_namespaces: Optional[StrictBool] = Field(default=None, description="Restore all namespaced resources in the Backup if set to \"True\". Specifying this field to \"False\" is an error.", alias="allNamespaces")
    cluster_resource_conflict_policy: Optional[StrictStr] = Field(default=None, description="Optional. Defines the behavior for handling the situation where cluster-scoped resources being restored already exist in the target cluster. This MUST be set to a value other than CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED if cluster_resource_restore_scope is not empty.", alias="clusterResourceConflictPolicy")
    cluster_resource_restore_scope: Optional[ClusterResourceRestoreScope] = Field(default=None, alias="clusterResourceRestoreScope")
    excluded_namespaces: Optional[Namespaces] = Field(default=None, alias="excludedNamespaces")
    namespaced_resource_restore_mode: Optional[StrictStr] = Field(default=None, description="Optional. Defines the behavior for handling the situation where sets of namespaced resources being restored already exist in the target cluster. This MUST be set to a value other than NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED.", alias="namespacedResourceRestoreMode")
    no_namespaces: Optional[StrictBool] = Field(default=None, description="Do not restore any namespaced resources if set to \"True\". Specifying this field to \"False\" is not allowed.", alias="noNamespaces")
    selected_applications: Optional[NamespacedNames] = Field(default=None, alias="selectedApplications")
    selected_namespaces: Optional[Namespaces] = Field(default=None, alias="selectedNamespaces")
    substitution_rules: Optional[List[SubstitutionRule]] = Field(default=None, description="Optional. A list of transformation rules to be applied against Kubernetes resources as they are selected for restoration from a Backup. Rules are executed in order defined - this order matters, as changes made by a rule may impact the filtering logic of subsequent rules. An empty list means no substitution will occur.", alias="substitutionRules")
    transformation_rules: Optional[List[TransformationRule]] = Field(default=None, description="Optional. A list of transformation rules to be applied against Kubernetes resources as they are selected for restoration from a Backup. Rules are executed in order defined - this order matters, as changes made by a rule may impact the filtering logic of subsequent rules. An empty list means no transformation will occur.", alias="transformationRules")
    volume_data_restore_policy: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the mechanism to be used to restore volume data. Default: VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED (will be treated as NO_VOLUME_DATA_RESTORATION).", alias="volumeDataRestorePolicy")
    __properties: ClassVar[List[str]] = ["allNamespaces", "clusterResourceConflictPolicy", "clusterResourceRestoreScope", "excludedNamespaces", "namespacedResourceRestoreMode", "noNamespaces", "selectedApplications", "selectedNamespaces", "substitutionRules", "transformationRules", "volumeDataRestorePolicy"]

    @field_validator('cluster_resource_conflict_policy')
    def cluster_resource_conflict_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED', 'USE_EXISTING_VERSION', 'USE_BACKUP_VERSION']):
            raise ValueError("must be one of enum values ('CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED', 'USE_EXISTING_VERSION', 'USE_BACKUP_VERSION')")
        return value

    @field_validator('namespaced_resource_restore_mode')
    def namespaced_resource_restore_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED', 'DELETE_AND_RESTORE', 'FAIL_ON_CONFLICT']):
            raise ValueError("must be one of enum values ('NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED', 'DELETE_AND_RESTORE', 'FAIL_ON_CONFLICT')")
        return value

    @field_validator('volume_data_restore_policy')
    def volume_data_restore_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED', 'RESTORE_VOLUME_DATA_FROM_BACKUP', 'REUSE_VOLUME_HANDLE_FROM_BACKUP', 'NO_VOLUME_DATA_RESTORATION']):
            raise ValueError("must be one of enum values ('VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED', 'RESTORE_VOLUME_DATA_FROM_BACKUP', 'REUSE_VOLUME_HANDLE_FROM_BACKUP', 'NO_VOLUME_DATA_RESTORATION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestoreConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cluster_resource_restore_scope
        if self.cluster_resource_restore_scope:
            _dict['clusterResourceRestoreScope'] = self.cluster_resource_restore_scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of excluded_namespaces
        if self.excluded_namespaces:
            _dict['excludedNamespaces'] = self.excluded_namespaces.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selected_applications
        if self.selected_applications:
            _dict['selectedApplications'] = self.selected_applications.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selected_namespaces
        if self.selected_namespaces:
            _dict['selectedNamespaces'] = self.selected_namespaces.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in substitution_rules (list)
        _items = []
        if self.substitution_rules:
            for _item_substitution_rules in self.substitution_rules:
                if _item_substitution_rules:
                    _items.append(_item_substitution_rules.to_dict())
            _dict['substitutionRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transformation_rules (list)
        _items = []
        if self.transformation_rules:
            for _item_transformation_rules in self.transformation_rules:
                if _item_transformation_rules:
                    _items.append(_item_transformation_rules.to_dict())
            _dict['transformationRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestoreConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allNamespaces": obj.get("allNamespaces"),
            "clusterResourceConflictPolicy": obj.get("clusterResourceConflictPolicy"),
            "clusterResourceRestoreScope": ClusterResourceRestoreScope.from_dict(obj["clusterResourceRestoreScope"]) if obj.get("clusterResourceRestoreScope") is not None else None,
            "excludedNamespaces": Namespaces.from_dict(obj["excludedNamespaces"]) if obj.get("excludedNamespaces") is not None else None,
            "namespacedResourceRestoreMode": obj.get("namespacedResourceRestoreMode"),
            "noNamespaces": obj.get("noNamespaces"),
            "selectedApplications": NamespacedNames.from_dict(obj["selectedApplications"]) if obj.get("selectedApplications") is not None else None,
            "selectedNamespaces": Namespaces.from_dict(obj["selectedNamespaces"]) if obj.get("selectedNamespaces") is not None else None,
            "substitutionRules": [SubstitutionRule.from_dict(_item) for _item in obj["substitutionRules"]] if obj.get("substitutionRules") is not None else None,
            "transformationRules": [TransformationRule.from_dict(_item) for _item in obj["transformationRules"]] if obj.get("transformationRules") is not None else None,
            "volumeDataRestorePolicy": obj.get("volumeDataRestorePolicy")
        })
        return _obj



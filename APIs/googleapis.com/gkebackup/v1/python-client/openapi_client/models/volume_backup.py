# coding: utf-8

"""
    Backup for GKE API

    Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.namespaced_name import NamespacedName
from typing import Optional, Set
from typing_extensions import Self

class VolumeBackup(BaseModel):
    """
    Represents the backup of a specific persistent volume as a component of a Backup - both the record of the operation and a pointer to the underlying storage-specific artifacts. Next id: 14
    """ # noqa: E501
    complete_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the associated underlying volume backup operation completed.", alias="completeTime")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when this VolumeBackup resource was created.", alias="createTime")
    disk_size_bytes: Optional[StrictStr] = Field(default=None, description="Output only. The minimum size of the disk to which this VolumeBackup can be restored.", alias="diskSizeBytes")
    etag: Optional[StrictStr] = Field(default=None, description="Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a volume backup from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform volume backup updates in order to avoid race conditions.")
    format: Optional[StrictStr] = Field(default=None, description="Output only. The format used for the volume backup.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The full name of the VolumeBackup resource. Format: `projects/*/locations/*/backupPlans/*/backups/*/volumeBackups/*`.")
    source_pvc: Optional[NamespacedName] = Field(default=None, alias="sourcePvc")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of this VolumeBackup.")
    state_message: Optional[StrictStr] = Field(default=None, description="Output only. A human readable message explaining why the VolumeBackup is in its current state.", alias="stateMessage")
    storage_bytes: Optional[StrictStr] = Field(default=None, description="Output only. The aggregate size of the underlying artifacts associated with this VolumeBackup in the backup storage. This may change over time when multiple backups of the same volume share the same backup storage location. In particular, this is likely to increase in size when the immediately preceding backup of the same volume is deleted.", alias="storageBytes")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when this VolumeBackup resource was last updated.", alias="updateTime")
    volume_backup_handle: Optional[StrictStr] = Field(default=None, description="Output only. A storage system-specific opaque handle to the underlying volume backup.", alias="volumeBackupHandle")
    __properties: ClassVar[List[str]] = ["completeTime", "createTime", "diskSizeBytes", "etag", "format", "name", "sourcePvc", "state", "stateMessage", "storageBytes", "uid", "updateTime", "volumeBackupHandle"]

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VOLUME_BACKUP_FORMAT_UNSPECIFIED', 'GCE_PERSISTENT_DISK']):
            raise ValueError("must be one of enum values ('VOLUME_BACKUP_FORMAT_UNSPECIFIED', 'GCE_PERSISTENT_DISK')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'SNAPSHOTTING', 'UPLOADING', 'SUCCEEDED', 'FAILED', 'DELETING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'SNAPSHOTTING', 'UPLOADING', 'SUCCEEDED', 'FAILED', 'DELETING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VolumeBackup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "complete_time",
            "create_time",
            "disk_size_bytes",
            "etag",
            "format",
            "name",
            "state",
            "state_message",
            "storage_bytes",
            "uid",
            "update_time",
            "volume_backup_handle",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source_pvc
        if self.source_pvc:
            _dict['sourcePvc'] = self.source_pvc.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VolumeBackup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "completeTime": obj.get("completeTime"),
            "createTime": obj.get("createTime"),
            "diskSizeBytes": obj.get("diskSizeBytes"),
            "etag": obj.get("etag"),
            "format": obj.get("format"),
            "name": obj.get("name"),
            "sourcePvc": NamespacedName.from_dict(obj["sourcePvc"]) if obj.get("sourcePvc") is not None else None,
            "state": obj.get("state"),
            "stateMessage": obj.get("stateMessage"),
            "storageBytes": obj.get("storageBytes"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime"),
            "volumeBackupHandle": obj.get("volumeBackupHandle")
        })
        return _obj



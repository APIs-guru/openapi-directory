# coding: utf-8

"""
    Backup for GKE API

    Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.restore_config import RestoreConfig
from typing import Optional, Set
from typing_extensions import Self

class Restore(BaseModel):
    """
    Represents both a request to Restore some portion of a Backup into a target GKE cluster and a record of the restore operation itself. Next id: 20
    """ # noqa: E501
    backup: Optional[StrictStr] = Field(default=None, description="Required. Immutable. A reference to the Backup used as the source from which this Restore will restore. Note that this Backup must be a sub-resource of the RestorePlan's backup_plan. Format: `projects/*/locations/*/backupPlans/*/backups/*`.")
    cluster: Optional[StrictStr] = Field(default=None, description="Output only. The target cluster into which this Restore will restore data. Valid formats: - `projects/*/locations/*/clusters/*` - `projects/*/zones/*/clusters/*` Inherited from parent RestorePlan's cluster value.")
    complete_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp of when the restore operation completed.", alias="completeTime")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when this Restore resource was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="User specified descriptive string for this Restore.")
    etag: Optional[StrictStr] = Field(default=None, description="Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a restore from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform restore updates in order to avoid race conditions: An `etag` is returned in the response to `GetRestore`, and systems are expected to put that etag in the request to `UpdateRestore` or `DeleteRestore` to ensure that their change will be applied to the same version of the resource.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="A set of custom labels supplied by user.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The full name of the Restore resource. Format: `projects/*/locations/*/restorePlans/*/restores/*`")
    resources_excluded_count: Optional[StrictInt] = Field(default=None, description="Output only. Number of resources excluded during the restore execution.", alias="resourcesExcludedCount")
    resources_failed_count: Optional[StrictInt] = Field(default=None, description="Output only. Number of resources that failed to be restored during the restore execution.", alias="resourcesFailedCount")
    resources_restored_count: Optional[StrictInt] = Field(default=None, description="Output only. Number of resources restored during the restore execution.", alias="resourcesRestoredCount")
    restore_config: Optional[RestoreConfig] = Field(default=None, alias="restoreConfig")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the Restore.")
    state_reason: Optional[StrictStr] = Field(default=None, description="Output only. Human-readable description of why the Restore is in its current state.", alias="stateReason")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when this Restore resource was last updated.", alias="updateTime")
    volumes_restored_count: Optional[StrictInt] = Field(default=None, description="Output only. Number of volumes restored during the restore execution.", alias="volumesRestoredCount")
    __properties: ClassVar[List[str]] = ["backup", "cluster", "completeTime", "createTime", "description", "etag", "labels", "name", "resourcesExcludedCount", "resourcesFailedCount", "resourcesRestoredCount", "restoreConfig", "state", "stateReason", "uid", "updateTime", "volumesRestoredCount"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'IN_PROGRESS', 'SUCCEEDED', 'FAILED', 'DELETING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'IN_PROGRESS', 'SUCCEEDED', 'FAILED', 'DELETING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Restore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cluster",
            "complete_time",
            "create_time",
            "etag",
            "name",
            "resources_excluded_count",
            "resources_failed_count",
            "resources_restored_count",
            "state",
            "state_reason",
            "uid",
            "update_time",
            "volumes_restored_count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of restore_config
        if self.restore_config:
            _dict['restoreConfig'] = self.restore_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Restore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backup": obj.get("backup"),
            "cluster": obj.get("cluster"),
            "completeTime": obj.get("completeTime"),
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "resourcesExcludedCount": obj.get("resourcesExcludedCount"),
            "resourcesFailedCount": obj.get("resourcesFailedCount"),
            "resourcesRestoredCount": obj.get("resourcesRestoredCount"),
            "restoreConfig": RestoreConfig.from_dict(obj["restoreConfig"]) if obj.get("restoreConfig") is not None else None,
            "state": obj.get("state"),
            "stateReason": obj.get("stateReason"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime"),
            "volumesRestoredCount": obj.get("volumesRestoredCount")
        })
        return _obj



# coding: utf-8

"""
    Backup for GKE API

    Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.namespaced_name import NamespacedName
from typing import Optional, Set
from typing_extensions import Self

class VolumeRestore(BaseModel):
    """
    Represents the operation of restoring a volume from a VolumeBackup. Next id: 13
    """ # noqa: E501
    complete_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the associated underlying volume restoration completed.", alias="completeTime")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when this VolumeRestore resource was created.", alias="createTime")
    etag: Optional[StrictStr] = Field(default=None, description="Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a volume restore from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform volume restore updates in order to avoid race conditions.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Full name of the VolumeRestore resource. Format: `projects/*/locations/*/restorePlans/*/restores/*/volumeRestores/*`")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of this VolumeRestore.")
    state_message: Optional[StrictStr] = Field(default=None, description="Output only. A human readable message explaining why the VolumeRestore is in its current state.", alias="stateMessage")
    target_pvc: Optional[NamespacedName] = Field(default=None, alias="targetPvc")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when this VolumeRestore resource was last updated.", alias="updateTime")
    volume_backup: Optional[StrictStr] = Field(default=None, description="Output only. The full name of the VolumeBackup from which the volume will be restored. Format: `projects/*/locations/*/backupPlans/*/backups/*/volumeBackups/*`.", alias="volumeBackup")
    volume_handle: Optional[StrictStr] = Field(default=None, description="Output only. A storage system-specific opaque handler to the underlying volume created for the target PVC from the volume backup.", alias="volumeHandle")
    volume_type: Optional[StrictStr] = Field(default=None, description="Output only. The type of volume provisioned", alias="volumeType")
    __properties: ClassVar[List[str]] = ["completeTime", "createTime", "etag", "name", "state", "stateMessage", "targetPvc", "uid", "updateTime", "volumeBackup", "volumeHandle", "volumeType"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'RESTORING', 'SUCCEEDED', 'FAILED', 'DELETING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'RESTORING', 'SUCCEEDED', 'FAILED', 'DELETING')")
        return value

    @field_validator('volume_type')
    def volume_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VOLUME_TYPE_UNSPECIFIED', 'GCE_PERSISTENT_DISK']):
            raise ValueError("must be one of enum values ('VOLUME_TYPE_UNSPECIFIED', 'GCE_PERSISTENT_DISK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VolumeRestore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "complete_time",
            "create_time",
            "etag",
            "name",
            "state",
            "state_message",
            "uid",
            "update_time",
            "volume_backup",
            "volume_handle",
            "volume_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of target_pvc
        if self.target_pvc:
            _dict['targetPvc'] = self.target_pvc.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VolumeRestore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "completeTime": obj.get("completeTime"),
            "createTime": obj.get("createTime"),
            "etag": obj.get("etag"),
            "name": obj.get("name"),
            "state": obj.get("state"),
            "stateMessage": obj.get("stateMessage"),
            "targetPvc": NamespacedName.from_dict(obj["targetPvc"]) if obj.get("targetPvc") is not None else None,
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime"),
            "volumeBackup": obj.get("volumeBackup"),
            "volumeHandle": obj.get("volumeHandle"),
            "volumeType": obj.get("volumeType")
        })
        return _obj



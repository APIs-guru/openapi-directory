# coding: utf-8

"""
    Backup for GKE API

    Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource_filter import ResourceFilter
from openapi_client.models.transformation_rule_action import TransformationRuleAction
from typing import Optional, Set
from typing_extensions import Self

class TransformationRule(BaseModel):
    """
    A transformation rule to be applied against Kubernetes resources as they are selected for restoration from a Backup. A rule contains both filtering logic (which resources are subject to transform) and transformation logic.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Optional. The description is a user specified string description of the transformation rule.")
    field_actions: Optional[List[TransformationRuleAction]] = Field(default=None, description="Required. A list of transformation rule actions to take against candidate resources. Actions are executed in order defined - this order matters, as they could potentially interfere with each other and the first operation could affect the outcome of the second operation.", alias="fieldActions")
    resource_filter: Optional[ResourceFilter] = Field(default=None, alias="resourceFilter")
    __properties: ClassVar[List[str]] = ["description", "fieldActions", "resourceFilter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransformationRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in field_actions (list)
        _items = []
        if self.field_actions:
            for _item_field_actions in self.field_actions:
                if _item_field_actions:
                    _items.append(_item_field_actions.to_dict())
            _dict['fieldActions'] = _items
        # override the default output from pydantic by calling `to_dict()` of resource_filter
        if self.resource_filter:
            _dict['resourceFilter'] = self.resource_filter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransformationRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "fieldActions": [TransformationRuleAction.from_dict(_item) for _item in obj["fieldActions"]] if obj.get("fieldActions") is not None else None,
            "resourceFilter": ResourceFilter.from_dict(obj["resourceFilter"]) if obj.get("resourceFilter") is not None else None
        })
        return _obj



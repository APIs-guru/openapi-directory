# coding: utf-8

"""
    Backup for GKE API

    Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ClusterMetadata(BaseModel):
    """
    Information about the GKE cluster from which this Backup was created.
    """ # noqa: E501
    anthos_version: Optional[StrictStr] = Field(default=None, description="Output only. Anthos version", alias="anthosVersion")
    backup_crd_versions: Optional[Dict[str, StrictStr]] = Field(default=None, description="Output only. A list of the Backup for GKE CRD versions found in the cluster.", alias="backupCrdVersions")
    cluster: Optional[StrictStr] = Field(default=None, description="Output only. The source cluster from which this Backup was created. Valid formats: - `projects/*/locations/*/clusters/*` - `projects/*/zones/*/clusters/*` This is inherited from the parent BackupPlan's cluster field.")
    gke_version: Optional[StrictStr] = Field(default=None, description="Output only. GKE version", alias="gkeVersion")
    k8s_version: Optional[StrictStr] = Field(default=None, description="Output only. The Kubernetes server version of the source cluster.", alias="k8sVersion")
    __properties: ClassVar[List[str]] = ["anthosVersion", "backupCrdVersions", "cluster", "gkeVersion", "k8sVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "anthos_version",
            "backup_crd_versions",
            "cluster",
            "gke_version",
            "k8s_version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "anthosVersion": obj.get("anthosVersion"),
            "backupCrdVersions": obj.get("backupCrdVersions"),
            "cluster": obj.get("cluster"),
            "gkeVersion": obj.get("gkeVersion"),
            "k8sVersion": obj.get("k8sVersion")
        })
        return _obj



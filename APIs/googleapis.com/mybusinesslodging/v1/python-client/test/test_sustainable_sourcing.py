# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.sustainable_sourcing import SustainableSourcing

class TestSustainableSourcing(unittest.TestCase):
    """SustainableSourcing unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SustainableSourcing:
        """Test SustainableSourcing
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SustainableSourcing`
        """
        model = SustainableSourcing()
        if include_optional:
            return SustainableSourcing(
                eco_friendly_toiletries = True,
                eco_friendly_toiletries_exception = 'EXCEPTION_UNSPECIFIED',
                locally_sourced_food_and_beverages = True,
                locally_sourced_food_and_beverages_exception = 'EXCEPTION_UNSPECIFIED',
                organic_cage_free_eggs = True,
                organic_cage_free_eggs_exception = 'EXCEPTION_UNSPECIFIED',
                organic_food_and_beverages = True,
                organic_food_and_beverages_exception = 'EXCEPTION_UNSPECIFIED',
                responsible_purchasing_policy = True,
                responsible_purchasing_policy_exception = 'EXCEPTION_UNSPECIFIED',
                responsibly_sources_seafood = True,
                responsibly_sources_seafood_exception = 'EXCEPTION_UNSPECIFIED',
                vegan_meals = True,
                vegan_meals_exception = 'EXCEPTION_UNSPECIFIED',
                vegetarian_meals = True,
                vegetarian_meals_exception = 'EXCEPTION_UNSPECIFIED'
            )
        else:
            return SustainableSourcing(
        )
        """

    def testSustainableSourcing(self):
        """Test SustainableSourcing"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

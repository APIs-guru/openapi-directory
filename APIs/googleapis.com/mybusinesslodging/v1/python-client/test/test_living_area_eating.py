# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.living_area_eating import LivingAreaEating

class TestLivingAreaEating(unittest.TestCase):
    """LivingAreaEating unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LivingAreaEating:
        """Test LivingAreaEating
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LivingAreaEating`
        """
        model = LivingAreaEating()
        if include_optional:
            return LivingAreaEating(
                coffee_maker = True,
                coffee_maker_exception = 'EXCEPTION_UNSPECIFIED',
                cookware = True,
                cookware_exception = 'EXCEPTION_UNSPECIFIED',
                dishwasher = True,
                dishwasher_exception = 'EXCEPTION_UNSPECIFIED',
                indoor_grill = True,
                indoor_grill_exception = 'EXCEPTION_UNSPECIFIED',
                kettle = True,
                kettle_exception = 'EXCEPTION_UNSPECIFIED',
                kitchen_available = True,
                kitchen_available_exception = 'EXCEPTION_UNSPECIFIED',
                microwave = True,
                microwave_exception = 'EXCEPTION_UNSPECIFIED',
                minibar = True,
                minibar_exception = 'EXCEPTION_UNSPECIFIED',
                outdoor_grill = True,
                outdoor_grill_exception = 'EXCEPTION_UNSPECIFIED',
                oven = True,
                oven_exception = 'EXCEPTION_UNSPECIFIED',
                refrigerator = True,
                refrigerator_exception = 'EXCEPTION_UNSPECIFIED',
                sink = True,
                sink_exception = 'EXCEPTION_UNSPECIFIED',
                snackbar = True,
                snackbar_exception = 'EXCEPTION_UNSPECIFIED',
                stove = True,
                stove_exception = 'EXCEPTION_UNSPECIFIED',
                tea_station = True,
                tea_station_exception = 'EXCEPTION_UNSPECIFIED',
                toaster = True,
                toaster_exception = 'EXCEPTION_UNSPECIFIED'
            )
        else:
            return LivingAreaEating(
        )
        """

    def testLivingAreaEating(self):
        """Test LivingAreaEating"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

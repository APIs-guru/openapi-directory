# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.sustainability import Sustainability

class TestSustainability(unittest.TestCase):
    """Sustainability unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Sustainability:
        """Test Sustainability
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Sustainability`
        """
        model = Sustainability()
        if include_optional:
            return Sustainability(
                energy_efficiency = openapi_client.models.energy_efficiency.EnergyEfficiency(
                    carbon_free_energy_sources = True, 
                    carbon_free_energy_sources_exception = 'EXCEPTION_UNSPECIFIED', 
                    energy_conservation_program = True, 
                    energy_conservation_program_exception = 'EXCEPTION_UNSPECIFIED', 
                    energy_efficient_heating_and_cooling_systems = True, 
                    energy_efficient_heating_and_cooling_systems_exception = 'EXCEPTION_UNSPECIFIED', 
                    energy_efficient_lighting = True, 
                    energy_efficient_lighting_exception = 'EXCEPTION_UNSPECIFIED', 
                    energy_saving_thermostats = True, 
                    energy_saving_thermostats_exception = 'EXCEPTION_UNSPECIFIED', 
                    green_building_design = True, 
                    green_building_design_exception = 'EXCEPTION_UNSPECIFIED', 
                    independent_organization_audits_energy_use = True, 
                    independent_organization_audits_energy_use_exception = 'EXCEPTION_UNSPECIFIED', ),
                sustainability_certifications = openapi_client.models.sustainability_certifications.SustainabilityCertifications(
                    breeam_certification = 'BREEAM_CERTIFICATION_UNSPECIFIED', 
                    breeam_certification_exception = 'EXCEPTION_UNSPECIFIED', 
                    eco_certifications = [
                        openapi_client.models.eco_certification.EcoCertification(
                            awarded = True, 
                            awarded_exception = 'EXCEPTION_UNSPECIFIED', 
                            eco_certificate = 'ECO_CERTIFICATE_UNSPECIFIED', )
                        ], 
                    leed_certification = 'LEED_CERTIFICATION_UNSPECIFIED', 
                    leed_certification_exception = 'EXCEPTION_UNSPECIFIED', ),
                sustainable_sourcing = openapi_client.models.sustainable_sourcing.SustainableSourcing(
                    eco_friendly_toiletries = True, 
                    eco_friendly_toiletries_exception = 'EXCEPTION_UNSPECIFIED', 
                    locally_sourced_food_and_beverages = True, 
                    locally_sourced_food_and_beverages_exception = 'EXCEPTION_UNSPECIFIED', 
                    organic_cage_free_eggs = True, 
                    organic_cage_free_eggs_exception = 'EXCEPTION_UNSPECIFIED', 
                    organic_food_and_beverages = True, 
                    organic_food_and_beverages_exception = 'EXCEPTION_UNSPECIFIED', 
                    responsible_purchasing_policy = True, 
                    responsible_purchasing_policy_exception = 'EXCEPTION_UNSPECIFIED', 
                    responsibly_sources_seafood = True, 
                    responsibly_sources_seafood_exception = 'EXCEPTION_UNSPECIFIED', 
                    vegan_meals = True, 
                    vegan_meals_exception = 'EXCEPTION_UNSPECIFIED', 
                    vegetarian_meals = True, 
                    vegetarian_meals_exception = 'EXCEPTION_UNSPECIFIED', ),
                waste_reduction = openapi_client.models.waste_reduction.WasteReduction(
                    compostable_food_containers_and_cutlery = True, 
                    compostable_food_containers_and_cutlery_exception = 'EXCEPTION_UNSPECIFIED', 
                    composts_excess_food = True, 
                    composts_excess_food_exception = 'EXCEPTION_UNSPECIFIED', 
                    donates_excess_food = True, 
                    donates_excess_food_exception = 'EXCEPTION_UNSPECIFIED', 
                    food_waste_reduction_program = True, 
                    food_waste_reduction_program_exception = 'EXCEPTION_UNSPECIFIED', 
                    no_single_use_plastic_straws = True, 
                    no_single_use_plastic_straws_exception = 'EXCEPTION_UNSPECIFIED', 
                    no_single_use_plastic_water_bottles = True, 
                    no_single_use_plastic_water_bottles_exception = 'EXCEPTION_UNSPECIFIED', 
                    no_styrofoam_food_containers = True, 
                    no_styrofoam_food_containers_exception = 'EXCEPTION_UNSPECIFIED', 
                    recycling_program = True, 
                    recycling_program_exception = 'EXCEPTION_UNSPECIFIED', 
                    refillable_toiletry_containers = True, 
                    refillable_toiletry_containers_exception = 'EXCEPTION_UNSPECIFIED', 
                    safely_disposes_batteries = True, 
                    safely_disposes_batteries_exception = 'EXCEPTION_UNSPECIFIED', 
                    safely_disposes_electronics = True, 
                    safely_disposes_electronics_exception = 'EXCEPTION_UNSPECIFIED', 
                    safely_disposes_lightbulbs = True, 
                    safely_disposes_lightbulbs_exception = 'EXCEPTION_UNSPECIFIED', 
                    safely_handles_hazardous_substances = True, 
                    safely_handles_hazardous_substances_exception = 'EXCEPTION_UNSPECIFIED', 
                    soap_donation_program = True, 
                    soap_donation_program_exception = 'EXCEPTION_UNSPECIFIED', 
                    toiletry_donation_program = True, 
                    toiletry_donation_program_exception = 'EXCEPTION_UNSPECIFIED', 
                    water_bottle_filling_stations = True, 
                    water_bottle_filling_stations_exception = 'EXCEPTION_UNSPECIFIED', ),
                water_conservation = openapi_client.models.water_conservation.WaterConservation(
                    independent_organization_audits_water_use = True, 
                    independent_organization_audits_water_use_exception = 'EXCEPTION_UNSPECIFIED', 
                    linen_reuse_program = True, 
                    linen_reuse_program_exception = 'EXCEPTION_UNSPECIFIED', 
                    towel_reuse_program = True, 
                    towel_reuse_program_exception = 'EXCEPTION_UNSPECIFIED', 
                    water_saving_showers = True, 
                    water_saving_showers_exception = 'EXCEPTION_UNSPECIFIED', 
                    water_saving_sinks = True, 
                    water_saving_sinks_exception = 'EXCEPTION_UNSPECIFIED', 
                    water_saving_toilets = True, 
                    water_saving_toilets_exception = 'EXCEPTION_UNSPECIFIED', )
            )
        else:
            return Sustainability(
        )
        """

    def testSustainability(self):
        """Test Sustainability"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

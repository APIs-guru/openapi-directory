# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.energy_efficiency import EnergyEfficiency

class TestEnergyEfficiency(unittest.TestCase):
    """EnergyEfficiency unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EnergyEfficiency:
        """Test EnergyEfficiency
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EnergyEfficiency`
        """
        model = EnergyEfficiency()
        if include_optional:
            return EnergyEfficiency(
                carbon_free_energy_sources = True,
                carbon_free_energy_sources_exception = 'EXCEPTION_UNSPECIFIED',
                energy_conservation_program = True,
                energy_conservation_program_exception = 'EXCEPTION_UNSPECIFIED',
                energy_efficient_heating_and_cooling_systems = True,
                energy_efficient_heating_and_cooling_systems_exception = 'EXCEPTION_UNSPECIFIED',
                energy_efficient_lighting = True,
                energy_efficient_lighting_exception = 'EXCEPTION_UNSPECIFIED',
                energy_saving_thermostats = True,
                energy_saving_thermostats_exception = 'EXCEPTION_UNSPECIFIED',
                green_building_design = True,
                green_building_design_exception = 'EXCEPTION_UNSPECIFIED',
                independent_organization_audits_energy_use = True,
                independent_organization_audits_energy_use_exception = 'EXCEPTION_UNSPECIFIED'
            )
        else:
            return EnergyEfficiency(
        )
        """

    def testEnergyEfficiency(self):
        """Test EnergyEfficiency"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

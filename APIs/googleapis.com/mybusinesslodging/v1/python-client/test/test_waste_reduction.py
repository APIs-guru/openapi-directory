# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.waste_reduction import WasteReduction

class TestWasteReduction(unittest.TestCase):
    """WasteReduction unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WasteReduction:
        """Test WasteReduction
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WasteReduction`
        """
        model = WasteReduction()
        if include_optional:
            return WasteReduction(
                compostable_food_containers_and_cutlery = True,
                compostable_food_containers_and_cutlery_exception = 'EXCEPTION_UNSPECIFIED',
                composts_excess_food = True,
                composts_excess_food_exception = 'EXCEPTION_UNSPECIFIED',
                donates_excess_food = True,
                donates_excess_food_exception = 'EXCEPTION_UNSPECIFIED',
                food_waste_reduction_program = True,
                food_waste_reduction_program_exception = 'EXCEPTION_UNSPECIFIED',
                no_single_use_plastic_straws = True,
                no_single_use_plastic_straws_exception = 'EXCEPTION_UNSPECIFIED',
                no_single_use_plastic_water_bottles = True,
                no_single_use_plastic_water_bottles_exception = 'EXCEPTION_UNSPECIFIED',
                no_styrofoam_food_containers = True,
                no_styrofoam_food_containers_exception = 'EXCEPTION_UNSPECIFIED',
                recycling_program = True,
                recycling_program_exception = 'EXCEPTION_UNSPECIFIED',
                refillable_toiletry_containers = True,
                refillable_toiletry_containers_exception = 'EXCEPTION_UNSPECIFIED',
                safely_disposes_batteries = True,
                safely_disposes_batteries_exception = 'EXCEPTION_UNSPECIFIED',
                safely_disposes_electronics = True,
                safely_disposes_electronics_exception = 'EXCEPTION_UNSPECIFIED',
                safely_disposes_lightbulbs = True,
                safely_disposes_lightbulbs_exception = 'EXCEPTION_UNSPECIFIED',
                safely_handles_hazardous_substances = True,
                safely_handles_hazardous_substances_exception = 'EXCEPTION_UNSPECIFIED',
                soap_donation_program = True,
                soap_donation_program_exception = 'EXCEPTION_UNSPECIFIED',
                toiletry_donation_program = True,
                toiletry_donation_program_exception = 'EXCEPTION_UNSPECIFIED',
                water_bottle_filling_stations = True,
                water_bottle_filling_stations_exception = 'EXCEPTION_UNSPECIFIED'
            )
        else:
            return WasteReduction(
        )
        """

    def testWasteReduction(self):
        """Test WasteReduction"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

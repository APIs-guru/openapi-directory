# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Accessibility(BaseModel):
    """
    Physical adaptations made to the property in consideration of varying levels of human physical ability.
    """ # noqa: E501
    mobility_accessible: Optional[StrictBool] = Field(default=None, description="Mobility accessible. Throughout the property there are physical adaptations to ease the stay of a person in a wheelchair, such as auto-opening doors, wide elevators, wide bathrooms or ramps.", alias="mobilityAccessible")
    mobility_accessible_elevator: Optional[StrictBool] = Field(default=None, description="Mobility accessible elevator. A lift that transports people from one level to another and is built to accommodate a wheelchair-using passenger owing to the width of its doors and placement of call buttons.", alias="mobilityAccessibleElevator")
    mobility_accessible_elevator_exception: Optional[StrictStr] = Field(default=None, description="Mobility accessible elevator exception.", alias="mobilityAccessibleElevatorException")
    mobility_accessible_exception: Optional[StrictStr] = Field(default=None, description="Mobility accessible exception.", alias="mobilityAccessibleException")
    mobility_accessible_parking: Optional[StrictBool] = Field(default=None, description="Mobility accessible parking. The presence of a marked, designated area of prescribed size in which only registered, labeled vehicles transporting a person with physical challenges may park.", alias="mobilityAccessibleParking")
    mobility_accessible_parking_exception: Optional[StrictStr] = Field(default=None, description="Mobility accessible parking exception.", alias="mobilityAccessibleParkingException")
    mobility_accessible_pool: Optional[StrictBool] = Field(default=None, description="Mobility accessible pool. A swimming pool equipped with a mechanical chair that can be lowered and raised for the purpose of moving physically challenged guests into and out of the pool. May be powered by electricity or water. Also known as pool lift.", alias="mobilityAccessiblePool")
    mobility_accessible_pool_exception: Optional[StrictStr] = Field(default=None, description="Mobility accessible pool exception.", alias="mobilityAccessiblePoolException")
    __properties: ClassVar[List[str]] = ["mobilityAccessible", "mobilityAccessibleElevator", "mobilityAccessibleElevatorException", "mobilityAccessibleException", "mobilityAccessibleParking", "mobilityAccessibleParkingException", "mobilityAccessiblePool", "mobilityAccessiblePoolException"]

    @field_validator('mobility_accessible_elevator_exception')
    def mobility_accessible_elevator_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('mobility_accessible_exception')
    def mobility_accessible_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('mobility_accessible_parking_exception')
    def mobility_accessible_parking_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('mobility_accessible_pool_exception')
    def mobility_accessible_pool_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Accessibility from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Accessibility from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mobilityAccessible": obj.get("mobilityAccessible"),
            "mobilityAccessibleElevator": obj.get("mobilityAccessibleElevator"),
            "mobilityAccessibleElevatorException": obj.get("mobilityAccessibleElevatorException"),
            "mobilityAccessibleException": obj.get("mobilityAccessibleException"),
            "mobilityAccessibleParking": obj.get("mobilityAccessibleParking"),
            "mobilityAccessibleParkingException": obj.get("mobilityAccessibleParkingException"),
            "mobilityAccessiblePool": obj.get("mobilityAccessiblePool"),
            "mobilityAccessiblePoolException": obj.get("mobilityAccessiblePoolException")
        })
        return _obj



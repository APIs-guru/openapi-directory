# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Transportation(BaseModel):
    """
    Vehicles or vehicular services facilitated or owned by the property.
    """ # noqa: E501
    airport_shuttle: Optional[StrictBool] = Field(default=None, description="Airport shuttle. The hotel provides guests with a chauffeured van or bus to and from the airport. Can be free or for a fee. Guests may share the vehicle with other guests unknown to them. Applies if the hotel has a third-party shuttle service (office/desk etc.) within the hotel. As long as hotel provides this service, it doesn't matter if it's directly with them or a third party they work with. Does not apply if guest has to coordinate with an entity outside/other than the hotel.", alias="airportShuttle")
    airport_shuttle_exception: Optional[StrictStr] = Field(default=None, description="Airport shuttle exception.", alias="airportShuttleException")
    car_rental_on_property: Optional[StrictBool] = Field(default=None, description="Car rental on property. A branch of a rental car company with a processing desk in the hotel. Available cars for rent may be awaiting at the hotel or in a nearby lot.", alias="carRentalOnProperty")
    car_rental_on_property_exception: Optional[StrictStr] = Field(default=None, description="Car rental on property exception.", alias="carRentalOnPropertyException")
    free_airport_shuttle: Optional[StrictBool] = Field(default=None, description="Free airport shuttle. Airport shuttle is free to guests. Must be free to all guests without any conditions.", alias="freeAirportShuttle")
    free_airport_shuttle_exception: Optional[StrictStr] = Field(default=None, description="Free airport shuttle exception.", alias="freeAirportShuttleException")
    free_private_car_service: Optional[StrictBool] = Field(default=None, description="Free private car service. Private chauffeured car service is free to guests.", alias="freePrivateCarService")
    free_private_car_service_exception: Optional[StrictStr] = Field(default=None, description="Free private car service exception.", alias="freePrivateCarServiceException")
    local_shuttle: Optional[StrictBool] = Field(default=None, description="Local shuttle. A car, van or bus provided by the hotel to transport guests to destinations within a specified range of distance around the hotel. Usually shopping and/or convention centers, downtown districts, or beaches. Can be free or for a fee.", alias="localShuttle")
    local_shuttle_exception: Optional[StrictStr] = Field(default=None, description="Local shuttle exception.", alias="localShuttleException")
    private_car_service: Optional[StrictBool] = Field(default=None, description="Private car service. Hotel provides a private chauffeured car to transport guests to destinations. Passengers in the car are either alone or are known to one another and have requested the car together. Service can be free or for a fee and travel distance is usually limited to a specific range. Not a taxi.", alias="privateCarService")
    private_car_service_exception: Optional[StrictStr] = Field(default=None, description="Private car service exception.", alias="privateCarServiceException")
    transfer: Optional[StrictBool] = Field(default=None, description="Transfer. Hotel provides a shuttle service or car service to take guests to and from the nearest airport or train station. Can be free or for a fee. Guests may share the vehicle with other guests unknown to them.")
    transfer_exception: Optional[StrictStr] = Field(default=None, description="Transfer exception.", alias="transferException")
    __properties: ClassVar[List[str]] = ["airportShuttle", "airportShuttleException", "carRentalOnProperty", "carRentalOnPropertyException", "freeAirportShuttle", "freeAirportShuttleException", "freePrivateCarService", "freePrivateCarServiceException", "localShuttle", "localShuttleException", "privateCarService", "privateCarServiceException", "transfer", "transferException"]

    @field_validator('airport_shuttle_exception')
    def airport_shuttle_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('car_rental_on_property_exception')
    def car_rental_on_property_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('free_airport_shuttle_exception')
    def free_airport_shuttle_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('free_private_car_service_exception')
    def free_private_car_service_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('local_shuttle_exception')
    def local_shuttle_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('private_car_service_exception')
    def private_car_service_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('transfer_exception')
    def transfer_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transportation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transportation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "airportShuttle": obj.get("airportShuttle"),
            "airportShuttleException": obj.get("airportShuttleException"),
            "carRentalOnProperty": obj.get("carRentalOnProperty"),
            "carRentalOnPropertyException": obj.get("carRentalOnPropertyException"),
            "freeAirportShuttle": obj.get("freeAirportShuttle"),
            "freeAirportShuttleException": obj.get("freeAirportShuttleException"),
            "freePrivateCarService": obj.get("freePrivateCarService"),
            "freePrivateCarServiceException": obj.get("freePrivateCarServiceException"),
            "localShuttle": obj.get("localShuttle"),
            "localShuttleException": obj.get("localShuttleException"),
            "privateCarService": obj.get("privateCarService"),
            "privateCarServiceException": obj.get("privateCarServiceException"),
            "transfer": obj.get("transfer"),
            "transferException": obj.get("transferException")
        })
        return _obj



# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IncreasedFoodSafety(BaseModel):
    """
    Increased food safety measures implemented by the hotel during COVID-19.
    """ # noqa: E501
    dining_areas_additional_sanitation: Optional[StrictBool] = Field(default=None, description="Additional sanitation in dining areas.", alias="diningAreasAdditionalSanitation")
    dining_areas_additional_sanitation_exception: Optional[StrictStr] = Field(default=None, description="Dining areas additional sanitation exception.", alias="diningAreasAdditionalSanitationException")
    disposable_flatware: Optional[StrictBool] = Field(default=None, description="Disposable flatware.", alias="disposableFlatware")
    disposable_flatware_exception: Optional[StrictStr] = Field(default=None, description="Disposable flatware exception.", alias="disposableFlatwareException")
    food_preparation_and_serving_additional_safety: Optional[StrictBool] = Field(default=None, description="Additional safety measures during food prep and serving.", alias="foodPreparationAndServingAdditionalSafety")
    food_preparation_and_serving_additional_safety_exception: Optional[StrictStr] = Field(default=None, description="Food preparation and serving additional safety exception.", alias="foodPreparationAndServingAdditionalSafetyException")
    individual_packaged_meals: Optional[StrictBool] = Field(default=None, description="Individually-packaged meals.", alias="individualPackagedMeals")
    individual_packaged_meals_exception: Optional[StrictStr] = Field(default=None, description="Individual packaged meals exception.", alias="individualPackagedMealsException")
    single_use_food_menus: Optional[StrictBool] = Field(default=None, description="Single-use menus.", alias="singleUseFoodMenus")
    single_use_food_menus_exception: Optional[StrictStr] = Field(default=None, description="Single use food menus exception.", alias="singleUseFoodMenusException")
    __properties: ClassVar[List[str]] = ["diningAreasAdditionalSanitation", "diningAreasAdditionalSanitationException", "disposableFlatware", "disposableFlatwareException", "foodPreparationAndServingAdditionalSafety", "foodPreparationAndServingAdditionalSafetyException", "individualPackagedMeals", "individualPackagedMealsException", "singleUseFoodMenus", "singleUseFoodMenusException"]

    @field_validator('dining_areas_additional_sanitation_exception')
    def dining_areas_additional_sanitation_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('disposable_flatware_exception')
    def disposable_flatware_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('food_preparation_and_serving_additional_safety_exception')
    def food_preparation_and_serving_additional_safety_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('individual_packaged_meals_exception')
    def individual_packaged_meals_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('single_use_food_menus_exception')
    def single_use_food_menus_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IncreasedFoodSafety from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IncreasedFoodSafety from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "diningAreasAdditionalSanitation": obj.get("diningAreasAdditionalSanitation"),
            "diningAreasAdditionalSanitationException": obj.get("diningAreasAdditionalSanitationException"),
            "disposableFlatware": obj.get("disposableFlatware"),
            "disposableFlatwareException": obj.get("disposableFlatwareException"),
            "foodPreparationAndServingAdditionalSafety": obj.get("foodPreparationAndServingAdditionalSafety"),
            "foodPreparationAndServingAdditionalSafetyException": obj.get("foodPreparationAndServingAdditionalSafetyException"),
            "individualPackagedMeals": obj.get("individualPackagedMeals"),
            "individualPackagedMealsException": obj.get("individualPackagedMealsException"),
            "singleUseFoodMenus": obj.get("singleUseFoodMenus"),
            "singleUseFoodMenusException": obj.get("singleUseFoodMenusException")
        })
        return _obj



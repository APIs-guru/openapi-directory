# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SustainableSourcing(BaseModel):
    """
    Sustainable sourcing practices implemented at the hotel.
    """ # noqa: E501
    eco_friendly_toiletries: Optional[StrictBool] = Field(default=None, description="Eco friendly toiletries. Soap, shampoo, lotion, and other toiletries provided for guests have a nationally or internationally recognized sustainability certification, such as USDA Organic, EU Organic, or cruelty-free.", alias="ecoFriendlyToiletries")
    eco_friendly_toiletries_exception: Optional[StrictStr] = Field(default=None, description="Eco friendly toiletries exception.", alias="ecoFriendlyToiletriesException")
    locally_sourced_food_and_beverages: Optional[StrictBool] = Field(default=None, description="Locally sourced food and beverages. Property sources locally in order to lower the environmental footprint from reduced transportation and to stimulate the local economy. Products produced less than 62 miles from the establishment are normally considered as locally produced.", alias="locallySourcedFoodAndBeverages")
    locally_sourced_food_and_beverages_exception: Optional[StrictStr] = Field(default=None, description="Locally sourced food and beverages exception.", alias="locallySourcedFoodAndBeveragesException")
    organic_cage_free_eggs: Optional[StrictBool] = Field(default=None, description="Organic cage free eggs. The property sources 100% certified organic and cage-free eggs (shell, liquid, and egg products). Cage-free means hens are able to walk, spread their wings and lay their eggs in nests).", alias="organicCageFreeEggs")
    organic_cage_free_eggs_exception: Optional[StrictStr] = Field(default=None, description="Organic cage free eggs exception.", alias="organicCageFreeEggsException")
    organic_food_and_beverages: Optional[StrictBool] = Field(default=None, description="Organic food and beverages. At least 25% of food and beverages, by spend, are certified organic. Organic means products that are certified to one of the organic standard listed in the IFOAM family of standards. Qualifying certifications include USDA Organic and EU Organic, among others.", alias="organicFoodAndBeverages")
    organic_food_and_beverages_exception: Optional[StrictStr] = Field(default=None, description="Organic food and beverages exception.", alias="organicFoodAndBeveragesException")
    responsible_purchasing_policy: Optional[StrictBool] = Field(default=None, description="Responsible purchasing policy. The property has a responsible procurement policy in place. Responsible means integration of social, ethical, and/or environmental performance factors into the procurement process when selecting suppliers.", alias="responsiblePurchasingPolicy")
    responsible_purchasing_policy_exception: Optional[StrictStr] = Field(default=None, description="Responsible purchasing policy exception.", alias="responsiblePurchasingPolicyException")
    responsibly_sources_seafood: Optional[StrictBool] = Field(default=None, description="Responsibly sources seafood. The property does not source seafood from the Monterey Bay Aquarium Seafood Watch \"avoid\" list, and must sustainably source seafood listed as \"good alternative,\" \"eco-certified,\" and \"best choice\". The property has a policy outlining a commitment to source Marine Stewardship Council (MSC) and/or Aquaculture Stewardship Council (ASC) Chain of Custody certified seafood.", alias="responsiblySourcesSeafood")
    responsibly_sources_seafood_exception: Optional[StrictStr] = Field(default=None, description="Responsibly sources seafood exception.", alias="responsiblySourcesSeafoodException")
    vegan_meals: Optional[StrictBool] = Field(default=None, description="Vegan meals. The property provides vegan menu options for guests. Vegan food does not contain animal products or byproducts.", alias="veganMeals")
    vegan_meals_exception: Optional[StrictStr] = Field(default=None, description="Vegan meals exception.", alias="veganMealsException")
    vegetarian_meals: Optional[StrictBool] = Field(default=None, description="Vegetarian meals. The property provides vegetarian menu options for guests. Vegetarian food does not contain meat, poultry, fish, or seafood.", alias="vegetarianMeals")
    vegetarian_meals_exception: Optional[StrictStr] = Field(default=None, description="Vegetarian meals exception.", alias="vegetarianMealsException")
    __properties: ClassVar[List[str]] = ["ecoFriendlyToiletries", "ecoFriendlyToiletriesException", "locallySourcedFoodAndBeverages", "locallySourcedFoodAndBeveragesException", "organicCageFreeEggs", "organicCageFreeEggsException", "organicFoodAndBeverages", "organicFoodAndBeveragesException", "responsiblePurchasingPolicy", "responsiblePurchasingPolicyException", "responsiblySourcesSeafood", "responsiblySourcesSeafoodException", "veganMeals", "veganMealsException", "vegetarianMeals", "vegetarianMealsException"]

    @field_validator('eco_friendly_toiletries_exception')
    def eco_friendly_toiletries_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('locally_sourced_food_and_beverages_exception')
    def locally_sourced_food_and_beverages_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('organic_cage_free_eggs_exception')
    def organic_cage_free_eggs_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('organic_food_and_beverages_exception')
    def organic_food_and_beverages_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('responsible_purchasing_policy_exception')
    def responsible_purchasing_policy_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('responsibly_sources_seafood_exception')
    def responsibly_sources_seafood_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('vegan_meals_exception')
    def vegan_meals_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('vegetarian_meals_exception')
    def vegetarian_meals_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SustainableSourcing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SustainableSourcing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ecoFriendlyToiletries": obj.get("ecoFriendlyToiletries"),
            "ecoFriendlyToiletriesException": obj.get("ecoFriendlyToiletriesException"),
            "locallySourcedFoodAndBeverages": obj.get("locallySourcedFoodAndBeverages"),
            "locallySourcedFoodAndBeveragesException": obj.get("locallySourcedFoodAndBeveragesException"),
            "organicCageFreeEggs": obj.get("organicCageFreeEggs"),
            "organicCageFreeEggsException": obj.get("organicCageFreeEggsException"),
            "organicFoodAndBeverages": obj.get("organicFoodAndBeverages"),
            "organicFoodAndBeveragesException": obj.get("organicFoodAndBeveragesException"),
            "responsiblePurchasingPolicy": obj.get("responsiblePurchasingPolicy"),
            "responsiblePurchasingPolicyException": obj.get("responsiblePurchasingPolicyException"),
            "responsiblySourcesSeafood": obj.get("responsiblySourcesSeafood"),
            "responsiblySourcesSeafoodException": obj.get("responsiblySourcesSeafoodException"),
            "veganMeals": obj.get("veganMeals"),
            "veganMealsException": obj.get("veganMealsException"),
            "vegetarianMeals": obj.get("vegetarianMeals"),
            "vegetarianMealsException": obj.get("vegetarianMealsException")
        })
        return _obj



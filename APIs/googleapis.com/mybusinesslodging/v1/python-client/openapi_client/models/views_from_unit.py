# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ViewsFromUnit(BaseModel):
    """
    Views available from the guest unit itself.
    """ # noqa: E501
    beach_view: Optional[StrictBool] = Field(default=None, description="Beach view. A guestroom that features a window through which guests can see the beach.", alias="beachView")
    beach_view_exception: Optional[StrictStr] = Field(default=None, description="Beach view exception.", alias="beachViewException")
    city_view: Optional[StrictBool] = Field(default=None, description="City view. A guestroom that features a window through which guests can see the buildings, parks and/or streets of the city.", alias="cityView")
    city_view_exception: Optional[StrictStr] = Field(default=None, description="City view exception.", alias="cityViewException")
    garden_view: Optional[StrictBool] = Field(default=None, description="Garden view. A guestroom that features a window through which guests can see a garden.", alias="gardenView")
    garden_view_exception: Optional[StrictStr] = Field(default=None, description="Garden view exception.", alias="gardenViewException")
    lake_view: Optional[StrictBool] = Field(default=None, description="Lake view.", alias="lakeView")
    lake_view_exception: Optional[StrictStr] = Field(default=None, description="Lake view exception.", alias="lakeViewException")
    landmark_view: Optional[StrictBool] = Field(default=None, description="Landmark view. A guestroom that features a window through which guests can see a landmark such as the countryside, a golf course, the forest, a park, a rain forst, a mountain or a slope.", alias="landmarkView")
    landmark_view_exception: Optional[StrictStr] = Field(default=None, description="Landmark view exception.", alias="landmarkViewException")
    ocean_view: Optional[StrictBool] = Field(default=None, description="Ocean view. A guestroom that features a window through which guests can see the ocean.", alias="oceanView")
    ocean_view_exception: Optional[StrictStr] = Field(default=None, description="Ocean view exception.", alias="oceanViewException")
    pool_view: Optional[StrictBool] = Field(default=None, description="Pool view. A guestroom that features a window through which guests can see the hotel's swimming pool.", alias="poolView")
    pool_view_exception: Optional[StrictStr] = Field(default=None, description="Pool view exception.", alias="poolViewException")
    valley_view: Optional[StrictBool] = Field(default=None, description="Valley view. A guestroom that features a window through which guests can see over a valley.", alias="valleyView")
    valley_view_exception: Optional[StrictStr] = Field(default=None, description="Valley view exception.", alias="valleyViewException")
    __properties: ClassVar[List[str]] = ["beachView", "beachViewException", "cityView", "cityViewException", "gardenView", "gardenViewException", "lakeView", "lakeViewException", "landmarkView", "landmarkViewException", "oceanView", "oceanViewException", "poolView", "poolViewException", "valleyView", "valleyViewException"]

    @field_validator('beach_view_exception')
    def beach_view_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('city_view_exception')
    def city_view_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('garden_view_exception')
    def garden_view_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('lake_view_exception')
    def lake_view_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('landmark_view_exception')
    def landmark_view_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('ocean_view_exception')
    def ocean_view_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('pool_view_exception')
    def pool_view_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('valley_view_exception')
    def valley_view_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ViewsFromUnit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ViewsFromUnit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "beachView": obj.get("beachView"),
            "beachViewException": obj.get("beachViewException"),
            "cityView": obj.get("cityView"),
            "cityViewException": obj.get("cityViewException"),
            "gardenView": obj.get("gardenView"),
            "gardenViewException": obj.get("gardenViewException"),
            "lakeView": obj.get("lakeView"),
            "lakeViewException": obj.get("lakeViewException"),
            "landmarkView": obj.get("landmarkView"),
            "landmarkViewException": obj.get("landmarkViewException"),
            "oceanView": obj.get("oceanView"),
            "oceanViewException": obj.get("oceanViewException"),
            "poolView": obj.get("poolView"),
            "poolViewException": obj.get("poolViewException"),
            "valleyView": obj.get("valleyView"),
            "valleyViewException": obj.get("valleyViewException")
        })
        return _obj



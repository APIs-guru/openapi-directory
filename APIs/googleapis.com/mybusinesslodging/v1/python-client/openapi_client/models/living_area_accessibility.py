# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LivingAreaAccessibility(BaseModel):
    """
    Accessibility features of the living area.
    """ # noqa: E501
    ada_compliant_unit: Optional[StrictBool] = Field(default=None, description="ADA compliant unit. A guestroom designed to accommodate the physical challenges of a guest with mobility and/or auditory and/or visual issues, as determined by legislative policy. Usually features enlarged doorways, roll-in showers with seats, bathroom grab bars, and communication equipment for the hearing and sight challenged.", alias="adaCompliantUnit")
    ada_compliant_unit_exception: Optional[StrictStr] = Field(default=None, description="ADA compliant unit exception.", alias="adaCompliantUnitException")
    hearing_accessible_doorbell: Optional[StrictBool] = Field(default=None, description="Hearing-accessible doorbell. A visual indicator(s) of a knock or ring at the door.", alias="hearingAccessibleDoorbell")
    hearing_accessible_doorbell_exception: Optional[StrictStr] = Field(default=None, description="Hearing-accessible doorbell exception.", alias="hearingAccessibleDoorbellException")
    hearing_accessible_fire_alarm: Optional[StrictBool] = Field(default=None, description="Hearing-accessible fire alarm. A device that gives warning of a fire through flashing lights.", alias="hearingAccessibleFireAlarm")
    hearing_accessible_fire_alarm_exception: Optional[StrictStr] = Field(default=None, description="Hearing-accessible fire alarm exception.", alias="hearingAccessibleFireAlarmException")
    hearing_accessible_unit: Optional[StrictBool] = Field(default=None, description="Hearing-accessible unit. A guestroom designed to accommodate the physical challenges of a guest with auditory issues.", alias="hearingAccessibleUnit")
    hearing_accessible_unit_exception: Optional[StrictStr] = Field(default=None, description="Hearing-accessible unit exception.", alias="hearingAccessibleUnitException")
    mobility_accessible_bathtub: Optional[StrictBool] = Field(default=None, description="Mobility-accessible bathtub. A bathtub that accomodates the physically challenged with additional railings or hand grips, a transfer seat or lift, and/or a door to enable walking into the tub.", alias="mobilityAccessibleBathtub")
    mobility_accessible_bathtub_exception: Optional[StrictStr] = Field(default=None, description="Mobility-accessible bathtub exception.", alias="mobilityAccessibleBathtubException")
    mobility_accessible_shower: Optional[StrictBool] = Field(default=None, description="Mobility-accessible shower. A shower with an enlarged door or access point to accommodate a wheelchair or a waterproof seat for the physically challenged.", alias="mobilityAccessibleShower")
    mobility_accessible_shower_exception: Optional[StrictStr] = Field(default=None, description="Mobility-accessible shower exception.", alias="mobilityAccessibleShowerException")
    mobility_accessible_toilet: Optional[StrictBool] = Field(default=None, description="Mobility-accessible toilet. A toilet with a higher seat, grab bars, and/or a larger area around it to accommodate the physically challenged.", alias="mobilityAccessibleToilet")
    mobility_accessible_toilet_exception: Optional[StrictStr] = Field(default=None, description="Mobility-accessible toilet exception.", alias="mobilityAccessibleToiletException")
    mobility_accessible_unit: Optional[StrictBool] = Field(default=None, description="Mobility-accessible unit. A guestroom designed to accommodate the physical challenges of a guest with mobility and/or auditory and/or visual issues. Usually features enlarged doorways, roll-in showers with seats, bathroom grab bars, and communication equipment for the hearing and sight challenged.", alias="mobilityAccessibleUnit")
    mobility_accessible_unit_exception: Optional[StrictStr] = Field(default=None, description="Mobility-accessible unit exception.", alias="mobilityAccessibleUnitException")
    __properties: ClassVar[List[str]] = ["adaCompliantUnit", "adaCompliantUnitException", "hearingAccessibleDoorbell", "hearingAccessibleDoorbellException", "hearingAccessibleFireAlarm", "hearingAccessibleFireAlarmException", "hearingAccessibleUnit", "hearingAccessibleUnitException", "mobilityAccessibleBathtub", "mobilityAccessibleBathtubException", "mobilityAccessibleShower", "mobilityAccessibleShowerException", "mobilityAccessibleToilet", "mobilityAccessibleToiletException", "mobilityAccessibleUnit", "mobilityAccessibleUnitException"]

    @field_validator('ada_compliant_unit_exception')
    def ada_compliant_unit_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('hearing_accessible_doorbell_exception')
    def hearing_accessible_doorbell_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('hearing_accessible_fire_alarm_exception')
    def hearing_accessible_fire_alarm_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('hearing_accessible_unit_exception')
    def hearing_accessible_unit_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('mobility_accessible_bathtub_exception')
    def mobility_accessible_bathtub_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('mobility_accessible_shower_exception')
    def mobility_accessible_shower_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('mobility_accessible_toilet_exception')
    def mobility_accessible_toilet_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('mobility_accessible_unit_exception')
    def mobility_accessible_unit_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LivingAreaAccessibility from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LivingAreaAccessibility from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adaCompliantUnit": obj.get("adaCompliantUnit"),
            "adaCompliantUnitException": obj.get("adaCompliantUnitException"),
            "hearingAccessibleDoorbell": obj.get("hearingAccessibleDoorbell"),
            "hearingAccessibleDoorbellException": obj.get("hearingAccessibleDoorbellException"),
            "hearingAccessibleFireAlarm": obj.get("hearingAccessibleFireAlarm"),
            "hearingAccessibleFireAlarmException": obj.get("hearingAccessibleFireAlarmException"),
            "hearingAccessibleUnit": obj.get("hearingAccessibleUnit"),
            "hearingAccessibleUnitException": obj.get("hearingAccessibleUnitException"),
            "mobilityAccessibleBathtub": obj.get("mobilityAccessibleBathtub"),
            "mobilityAccessibleBathtubException": obj.get("mobilityAccessibleBathtubException"),
            "mobilityAccessibleShower": obj.get("mobilityAccessibleShower"),
            "mobilityAccessibleShowerException": obj.get("mobilityAccessibleShowerException"),
            "mobilityAccessibleToilet": obj.get("mobilityAccessibleToilet"),
            "mobilityAccessibleToiletException": obj.get("mobilityAccessibleToiletException"),
            "mobilityAccessibleUnit": obj.get("mobilityAccessibleUnit"),
            "mobilityAccessibleUnitException": obj.get("mobilityAccessibleUnitException")
        })
        return _obj



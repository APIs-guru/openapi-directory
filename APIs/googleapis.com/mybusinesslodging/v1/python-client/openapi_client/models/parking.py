# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Parking(BaseModel):
    """
    Parking options at the property.
    """ # noqa: E501
    electric_car_charging_stations: Optional[StrictBool] = Field(default=None, description="Electric car charging stations. Electric power stations, usually located outdoors, into which guests plug their electric cars to receive a charge.", alias="electricCarChargingStations")
    electric_car_charging_stations_exception: Optional[StrictStr] = Field(default=None, description="Electric car charging stations exception.", alias="electricCarChargingStationsException")
    free_parking: Optional[StrictBool] = Field(default=None, description="Free parking. The hotel allows the cars of guests to be parked for free. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Parking may be performed by the guest or by hotel staff. Free parking must be available to all guests (limited conditions does not apply).", alias="freeParking")
    free_parking_exception: Optional[StrictStr] = Field(default=None, description="Free parking exception.", alias="freeParkingException")
    free_self_parking: Optional[StrictBool] = Field(default=None, description="Free self parking. Guests park their own cars for free. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply.", alias="freeSelfParking")
    free_self_parking_exception: Optional[StrictStr] = Field(default=None, description="Free self parking exception.", alias="freeSelfParkingException")
    free_valet_parking: Optional[StrictBool] = Field(default=None, description="Free valet parking. Hotel staff member parks the cars of guests. Parking with this service is free.", alias="freeValetParking")
    free_valet_parking_exception: Optional[StrictStr] = Field(default=None, description="Free valet parking exception.", alias="freeValetParkingException")
    parking_available: Optional[StrictBool] = Field(default=None, description="Parking available. The hotel allows the cars of guests to be parked. Can be free or for a fee. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Parking may be performed by the guest or by hotel staff.", alias="parkingAvailable")
    parking_available_exception: Optional[StrictStr] = Field(default=None, description="Parking available exception.", alias="parkingAvailableException")
    self_parking_available: Optional[StrictBool] = Field(default=None, description="Self parking available. Guests park their own cars. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Can be free or for a fee.", alias="selfParkingAvailable")
    self_parking_available_exception: Optional[StrictStr] = Field(default=None, description="Self parking available exception.", alias="selfParkingAvailableException")
    valet_parking_available: Optional[StrictBool] = Field(default=None, description="Valet parking available. Hotel staff member parks the cars of guests. Parking with this service can be free or for a fee.", alias="valetParkingAvailable")
    valet_parking_available_exception: Optional[StrictStr] = Field(default=None, description="Valet parking available exception.", alias="valetParkingAvailableException")
    __properties: ClassVar[List[str]] = ["electricCarChargingStations", "electricCarChargingStationsException", "freeParking", "freeParkingException", "freeSelfParking", "freeSelfParkingException", "freeValetParking", "freeValetParkingException", "parkingAvailable", "parkingAvailableException", "selfParkingAvailable", "selfParkingAvailableException", "valetParkingAvailable", "valetParkingAvailableException"]

    @field_validator('electric_car_charging_stations_exception')
    def electric_car_charging_stations_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('free_parking_exception')
    def free_parking_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('free_self_parking_exception')
    def free_self_parking_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('free_valet_parking_exception')
    def free_valet_parking_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('parking_available_exception')
    def parking_available_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('self_parking_available_exception')
    def self_parking_available_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('valet_parking_available_exception')
    def valet_parking_available_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Parking from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Parking from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "electricCarChargingStations": obj.get("electricCarChargingStations"),
            "electricCarChargingStationsException": obj.get("electricCarChargingStationsException"),
            "freeParking": obj.get("freeParking"),
            "freeParkingException": obj.get("freeParkingException"),
            "freeSelfParking": obj.get("freeSelfParking"),
            "freeSelfParkingException": obj.get("freeSelfParkingException"),
            "freeValetParking": obj.get("freeValetParking"),
            "freeValetParkingException": obj.get("freeValetParkingException"),
            "parkingAvailable": obj.get("parkingAvailable"),
            "parkingAvailableException": obj.get("parkingAvailableException"),
            "selfParkingAvailable": obj.get("selfParkingAvailable"),
            "selfParkingAvailableException": obj.get("selfParkingAvailableException"),
            "valetParkingAvailable": obj.get("valetParkingAvailable"),
            "valetParkingAvailableException": obj.get("valetParkingAvailableException")
        })
        return _obj



# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.payment_options import PaymentOptions
from openapi_client.models.time_of_day import TimeOfDay
from typing import Optional, Set
from typing_extensions import Self

class Policies(BaseModel):
    """
    Property rules that impact guests.
    """ # noqa: E501
    all_inclusive_available: Optional[StrictBool] = Field(default=None, description="All inclusive available. The hotel offers a rate option that includes the cost of the room, meals, activities, and other amenities that might otherwise be charged separately.", alias="allInclusiveAvailable")
    all_inclusive_available_exception: Optional[StrictStr] = Field(default=None, description="All inclusive available exception.", alias="allInclusiveAvailableException")
    all_inclusive_only: Optional[StrictBool] = Field(default=None, description="All inclusive only. The only rate option offered by the hotel is a rate that includes the cost of the room, meals, activities and other amenities that might otherwise be charged separately.", alias="allInclusiveOnly")
    all_inclusive_only_exception: Optional[StrictStr] = Field(default=None, description="All inclusive only exception.", alias="allInclusiveOnlyException")
    checkin_time: Optional[TimeOfDay] = Field(default=None, alias="checkinTime")
    checkin_time_exception: Optional[StrictStr] = Field(default=None, description="Check-in time exception.", alias="checkinTimeException")
    checkout_time: Optional[TimeOfDay] = Field(default=None, alias="checkoutTime")
    checkout_time_exception: Optional[StrictStr] = Field(default=None, description="Check-out time exception.", alias="checkoutTimeException")
    kids_stay_free: Optional[StrictBool] = Field(default=None, description="Kids stay free. The children of guests are allowed to stay in the room/suite of a parent or adult without an additional fee. The policy may or may not stipulate a limit of the child's age or the overall number of children allowed.", alias="kidsStayFree")
    kids_stay_free_exception: Optional[StrictStr] = Field(default=None, description="Kids stay free exception.", alias="kidsStayFreeException")
    max_child_age: Optional[StrictInt] = Field(default=None, description="Max child age. The hotel allows children up to a certain age to stay in the room/suite of a parent or adult without an additional fee.", alias="maxChildAge")
    max_child_age_exception: Optional[StrictStr] = Field(default=None, description="Max child age exception.", alias="maxChildAgeException")
    max_kids_stay_free_count: Optional[StrictInt] = Field(default=None, description="Max kids stay free count. The hotel allows a specific, defined number of children to stay in the room/suite of a parent or adult without an additional fee.", alias="maxKidsStayFreeCount")
    max_kids_stay_free_count_exception: Optional[StrictStr] = Field(default=None, description="Max kids stay free count exception.", alias="maxKidsStayFreeCountException")
    payment_options: Optional[PaymentOptions] = Field(default=None, alias="paymentOptions")
    smoke_free_property: Optional[StrictBool] = Field(default=None, description="Smoke free property. Smoking is not allowed inside the building, on balconies, or in outside spaces. Hotels that offer a designated area for guests to smoke are not considered smoke-free properties.", alias="smokeFreeProperty")
    smoke_free_property_exception: Optional[StrictStr] = Field(default=None, description="Smoke free property exception.", alias="smokeFreePropertyException")
    __properties: ClassVar[List[str]] = ["allInclusiveAvailable", "allInclusiveAvailableException", "allInclusiveOnly", "allInclusiveOnlyException", "checkinTime", "checkinTimeException", "checkoutTime", "checkoutTimeException", "kidsStayFree", "kidsStayFreeException", "maxChildAge", "maxChildAgeException", "maxKidsStayFreeCount", "maxKidsStayFreeCountException", "paymentOptions", "smokeFreeProperty", "smokeFreePropertyException"]

    @field_validator('all_inclusive_available_exception')
    def all_inclusive_available_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('all_inclusive_only_exception')
    def all_inclusive_only_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('checkin_time_exception')
    def checkin_time_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('checkout_time_exception')
    def checkout_time_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('kids_stay_free_exception')
    def kids_stay_free_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('max_child_age_exception')
    def max_child_age_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('max_kids_stay_free_count_exception')
    def max_kids_stay_free_count_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('smoke_free_property_exception')
    def smoke_free_property_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Policies from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of checkin_time
        if self.checkin_time:
            _dict['checkinTime'] = self.checkin_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of checkout_time
        if self.checkout_time:
            _dict['checkoutTime'] = self.checkout_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_options
        if self.payment_options:
            _dict['paymentOptions'] = self.payment_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Policies from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allInclusiveAvailable": obj.get("allInclusiveAvailable"),
            "allInclusiveAvailableException": obj.get("allInclusiveAvailableException"),
            "allInclusiveOnly": obj.get("allInclusiveOnly"),
            "allInclusiveOnlyException": obj.get("allInclusiveOnlyException"),
            "checkinTime": TimeOfDay.from_dict(obj["checkinTime"]) if obj.get("checkinTime") is not None else None,
            "checkinTimeException": obj.get("checkinTimeException"),
            "checkoutTime": TimeOfDay.from_dict(obj["checkoutTime"]) if obj.get("checkoutTime") is not None else None,
            "checkoutTimeException": obj.get("checkoutTimeException"),
            "kidsStayFree": obj.get("kidsStayFree"),
            "kidsStayFreeException": obj.get("kidsStayFreeException"),
            "maxChildAge": obj.get("maxChildAge"),
            "maxChildAgeException": obj.get("maxChildAgeException"),
            "maxKidsStayFreeCount": obj.get("maxKidsStayFreeCount"),
            "maxKidsStayFreeCountException": obj.get("maxKidsStayFreeCountException"),
            "paymentOptions": PaymentOptions.from_dict(obj["paymentOptions"]) if obj.get("paymentOptions") is not None else None,
            "smokeFreeProperty": obj.get("smokeFreeProperty"),
            "smokeFreePropertyException": obj.get("smokeFreePropertyException")
        })
        return _obj



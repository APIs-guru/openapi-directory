# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.eco_certification import EcoCertification
from typing import Optional, Set
from typing_extensions import Self

class SustainabilityCertifications(BaseModel):
    """
    Sustainability certifications the hotel has been awarded. Deprecated: this message is no longer populated. All certification data is now provided by BeCause.
    """ # noqa: E501
    breeam_certification: Optional[StrictStr] = Field(default=None, description="BREEAM certification.", alias="breeamCertification")
    breeam_certification_exception: Optional[StrictStr] = Field(default=None, description="BREEAM certification exception.", alias="breeamCertificationException")
    eco_certifications: Optional[List[EcoCertification]] = Field(default=None, description="The eco certificates awarded to the hotel.", alias="ecoCertifications")
    leed_certification: Optional[StrictStr] = Field(default=None, description="LEED certification.", alias="leedCertification")
    leed_certification_exception: Optional[StrictStr] = Field(default=None, description="LEED certification exception.", alias="leedCertificationException")
    __properties: ClassVar[List[str]] = ["breeamCertification", "breeamCertificationException", "ecoCertifications", "leedCertification", "leedCertificationException"]

    @field_validator('breeam_certification')
    def breeam_certification_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BREEAM_CERTIFICATION_UNSPECIFIED', 'NO_BREEAM_CERTIFICATION', 'BREEAM_PASS', 'BREEAM_GOOD', 'BREEAM_VERY_GOOD', 'BREEAM_EXCELLENT', 'BREEAM_OUTSTANDING']):
            raise ValueError("must be one of enum values ('BREEAM_CERTIFICATION_UNSPECIFIED', 'NO_BREEAM_CERTIFICATION', 'BREEAM_PASS', 'BREEAM_GOOD', 'BREEAM_VERY_GOOD', 'BREEAM_EXCELLENT', 'BREEAM_OUTSTANDING')")
        return value

    @field_validator('breeam_certification_exception')
    def breeam_certification_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('leed_certification')
    def leed_certification_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LEED_CERTIFICATION_UNSPECIFIED', 'NO_LEED_CERTIFICATION', 'LEED_CERTIFIED', 'LEED_SILVER', 'LEED_GOLD', 'LEED_PLATINUM']):
            raise ValueError("must be one of enum values ('LEED_CERTIFICATION_UNSPECIFIED', 'NO_LEED_CERTIFICATION', 'LEED_CERTIFIED', 'LEED_SILVER', 'LEED_GOLD', 'LEED_PLATINUM')")
        return value

    @field_validator('leed_certification_exception')
    def leed_certification_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SustainabilityCertifications from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in eco_certifications (list)
        _items = []
        if self.eco_certifications:
            for _item_eco_certifications in self.eco_certifications:
                if _item_eco_certifications:
                    _items.append(_item_eco_certifications.to_dict())
            _dict['ecoCertifications'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SustainabilityCertifications from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "breeamCertification": obj.get("breeamCertification"),
            "breeamCertificationException": obj.get("breeamCertificationException"),
            "ecoCertifications": [EcoCertification.from_dict(_item) for _item in obj["ecoCertifications"]] if obj.get("ecoCertifications") is not None else None,
            "leedCertification": obj.get("leedCertification"),
            "leedCertificationException": obj.get("leedCertificationException")
        })
        return _obj



# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.language_spoken import LanguageSpoken
from typing import Optional, Set
from typing_extensions import Self

class Services(BaseModel):
    """
    Conveniences or help provided by the property to facilitate an easier, more comfortable stay.
    """ # noqa: E501
    baggage_storage: Optional[StrictBool] = Field(default=None, description="Baggage storage. A provision for guests to leave their bags at the hotel when they arrive for their stay before the official check-in time. May or may not apply for guests who wish to leave their bags after check-out and before departing the locale. Also known as bag dropoff.", alias="baggageStorage")
    baggage_storage_exception: Optional[StrictStr] = Field(default=None, description="Baggage storage exception.", alias="baggageStorageException")
    concierge: Optional[StrictBool] = Field(default=None, description="Concierge. Hotel staff member(s) responsible for facilitating an easy, comfortable stay through making reservations for meals, sourcing theater tickets, arranging tours, finding a doctor, making recommendations, and answering questions.")
    concierge_exception: Optional[StrictStr] = Field(default=None, description="Concierge exception.", alias="conciergeException")
    convenience_store: Optional[StrictBool] = Field(default=None, description="Convenience store. A shop at the hotel primarily selling snacks, drinks, non-prescription medicines, health and beauty aids, magazines and newspapers.", alias="convenienceStore")
    convenience_store_exception: Optional[StrictStr] = Field(default=None, description="Convenience store exception.", alias="convenienceStoreException")
    currency_exchange: Optional[StrictBool] = Field(default=None, description="Currency exchange. A staff member or automated machine tasked with the transaction of providing the native currency of the hotel's locale in exchange for the foreign currency provided by a guest.", alias="currencyExchange")
    currency_exchange_exception: Optional[StrictStr] = Field(default=None, description="Currency exchange exception.", alias="currencyExchangeException")
    elevator: Optional[StrictBool] = Field(default=None, description="Elevator. A passenger elevator that transports guests from one story to another. Also known as lift.")
    elevator_exception: Optional[StrictStr] = Field(default=None, description="Elevator exception.", alias="elevatorException")
    front_desk: Optional[StrictBool] = Field(default=None, description="Front desk. A counter or desk in the lobby or the immediate interior of the hotel where a member of the staff greets guests and processes the information related to their stay (including check-in and check-out). May or may not be manned and open 24/7.", alias="frontDesk")
    front_desk_exception: Optional[StrictStr] = Field(default=None, description="Front desk exception.", alias="frontDeskException")
    full_service_laundry: Optional[StrictBool] = Field(default=None, description="Full service laundry. Laundry and dry cleaning facilitated and handled by the hotel on behalf of the guest. Does not include the provision for guests to do their own laundry in on-site machines.", alias="fullServiceLaundry")
    full_service_laundry_exception: Optional[StrictStr] = Field(default=None, description="Full service laundry exception.", alias="fullServiceLaundryException")
    gift_shop: Optional[StrictBool] = Field(default=None, description="Gift shop. An on-site store primarily selling souvenirs, mementos and other gift items. May or may not also sell sundries, magazines and newspapers, clothing, or snacks.", alias="giftShop")
    gift_shop_exception: Optional[StrictStr] = Field(default=None, description="Gift shop exception.", alias="giftShopException")
    languages_spoken: Optional[List[LanguageSpoken]] = Field(default=None, description="Languages spoken by at least one staff member.", alias="languagesSpoken")
    self_service_laundry: Optional[StrictBool] = Field(default=None, description="Self service laundry. On-site clothes washers and dryers accessible to guests for the purpose of washing and drying their own clothes. May or may not require payment to use the machines.", alias="selfServiceLaundry")
    self_service_laundry_exception: Optional[StrictStr] = Field(default=None, description="Self service laundry exception.", alias="selfServiceLaundryException")
    social_hour: Optional[StrictBool] = Field(default=None, description="Social hour. A reception with complimentary soft drinks, tea, coffee, wine and/or cocktails in the afternoon or evening. Can be hosted by hotel staff or guests may serve themselves. Also known as wine hour. The availability of coffee/tea in the lobby throughout the day does not constitute a social or wine hour.", alias="socialHour")
    social_hour_exception: Optional[StrictStr] = Field(default=None, description="Social hour exception.", alias="socialHourException")
    twenty_four_hour_front_desk: Optional[StrictBool] = Field(default=None, description="24hr front desk. Front desk is staffed 24 hours a day.", alias="twentyFourHourFrontDesk")
    twenty_four_hour_front_desk_exception: Optional[StrictStr] = Field(default=None, description="24hr front desk exception.", alias="twentyFourHourFrontDeskException")
    wake_up_calls: Optional[StrictBool] = Field(default=None, description="Wake up calls. By direction of the guest, a hotel staff member will phone the guest unit at the requested hour. Also known as morning call.", alias="wakeUpCalls")
    wake_up_calls_exception: Optional[StrictStr] = Field(default=None, description="Wake up calls exception.", alias="wakeUpCallsException")
    __properties: ClassVar[List[str]] = ["baggageStorage", "baggageStorageException", "concierge", "conciergeException", "convenienceStore", "convenienceStoreException", "currencyExchange", "currencyExchangeException", "elevator", "elevatorException", "frontDesk", "frontDeskException", "fullServiceLaundry", "fullServiceLaundryException", "giftShop", "giftShopException", "languagesSpoken", "selfServiceLaundry", "selfServiceLaundryException", "socialHour", "socialHourException", "twentyFourHourFrontDesk", "twentyFourHourFrontDeskException", "wakeUpCalls", "wakeUpCallsException"]

    @field_validator('baggage_storage_exception')
    def baggage_storage_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('concierge_exception')
    def concierge_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('convenience_store_exception')
    def convenience_store_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('currency_exchange_exception')
    def currency_exchange_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('elevator_exception')
    def elevator_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('front_desk_exception')
    def front_desk_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('full_service_laundry_exception')
    def full_service_laundry_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('gift_shop_exception')
    def gift_shop_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('self_service_laundry_exception')
    def self_service_laundry_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('social_hour_exception')
    def social_hour_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('twenty_four_hour_front_desk_exception')
    def twenty_four_hour_front_desk_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('wake_up_calls_exception')
    def wake_up_calls_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Services from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in languages_spoken (list)
        _items = []
        if self.languages_spoken:
            for _item_languages_spoken in self.languages_spoken:
                if _item_languages_spoken:
                    _items.append(_item_languages_spoken.to_dict())
            _dict['languagesSpoken'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Services from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baggageStorage": obj.get("baggageStorage"),
            "baggageStorageException": obj.get("baggageStorageException"),
            "concierge": obj.get("concierge"),
            "conciergeException": obj.get("conciergeException"),
            "convenienceStore": obj.get("convenienceStore"),
            "convenienceStoreException": obj.get("convenienceStoreException"),
            "currencyExchange": obj.get("currencyExchange"),
            "currencyExchangeException": obj.get("currencyExchangeException"),
            "elevator": obj.get("elevator"),
            "elevatorException": obj.get("elevatorException"),
            "frontDesk": obj.get("frontDesk"),
            "frontDeskException": obj.get("frontDeskException"),
            "fullServiceLaundry": obj.get("fullServiceLaundry"),
            "fullServiceLaundryException": obj.get("fullServiceLaundryException"),
            "giftShop": obj.get("giftShop"),
            "giftShopException": obj.get("giftShopException"),
            "languagesSpoken": [LanguageSpoken.from_dict(_item) for _item in obj["languagesSpoken"]] if obj.get("languagesSpoken") is not None else None,
            "selfServiceLaundry": obj.get("selfServiceLaundry"),
            "selfServiceLaundryException": obj.get("selfServiceLaundryException"),
            "socialHour": obj.get("socialHour"),
            "socialHourException": obj.get("socialHourException"),
            "twentyFourHourFrontDesk": obj.get("twentyFourHourFrontDesk"),
            "twentyFourHourFrontDeskException": obj.get("twentyFourHourFrontDeskException"),
            "wakeUpCalls": obj.get("wakeUpCalls"),
            "wakeUpCallsException": obj.get("wakeUpCallsException")
        })
        return _obj



# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EnergyEfficiency(BaseModel):
    """
    Energy efficiency practices implemented at the hotel.
    """ # noqa: E501
    carbon_free_energy_sources: Optional[StrictBool] = Field(default=None, description="Carbon free energy sources. Property sources carbon-free electricity via at least one of the following methods: on-site clean energy generation, power purchase agreement(s) with clean energy generators, green power provided by electricity supplier, or purchases of Energy Attribute Certificates (such as Renewable Energy Certificates or Guarantees of Origin).", alias="carbonFreeEnergySources")
    carbon_free_energy_sources_exception: Optional[StrictStr] = Field(default=None, description="Carbon free energy sources exception.", alias="carbonFreeEnergySourcesException")
    energy_conservation_program: Optional[StrictBool] = Field(default=None, description="Energy conservation program. The property tracks corporate-level Scope 1 and 2 GHG emissions, and Scope 3 emissions if available. The property has a commitment to implement initiatives that reduce GHG emissions year over year. The property has shown an absolute reduction in emissions for at least 2 years. Emissions are either verfied by a third-party and/or published in external communications.", alias="energyConservationProgram")
    energy_conservation_program_exception: Optional[StrictStr] = Field(default=None, description="Energy conservation program exception.", alias="energyConservationProgramException")
    energy_efficient_heating_and_cooling_systems: Optional[StrictBool] = Field(default=None, description="Energy efficient heating and cooling systems. The property doesn't use chlorofluorocarbon (CFC)-based refrigerants in heating, ventilating, and air-conditioning systems unless a third-party audit shows it's not economically feasible. The CFC-based refrigerants which are used should have a Global Warming Potential (GWP) ≤ 10. The property uses occupancy sensors on HVAC systems in back-of-house spaces, meeting rooms, and other low-traffic areas.", alias="energyEfficientHeatingAndCoolingSystems")
    energy_efficient_heating_and_cooling_systems_exception: Optional[StrictStr] = Field(default=None, description="Energy efficient heating and cooling systems exception.", alias="energyEfficientHeatingAndCoolingSystemsException")
    energy_efficient_lighting: Optional[StrictBool] = Field(default=None, description="Energy efficient lighting. At least 75% of the property's lighting is energy efficient, using lighting that is more than 45 lumens per watt – typically LED or CFL lightbulbs.", alias="energyEfficientLighting")
    energy_efficient_lighting_exception: Optional[StrictStr] = Field(default=None, description="Energy efficient lighting exception.", alias="energyEfficientLightingException")
    energy_saving_thermostats: Optional[StrictBool] = Field(default=None, description="Energy saving thermostats. The property installed energy-saving thermostats throughout the building to conserve energy when rooms or areas are not in use. Energy-saving thermostats are devices that control heating/cooling in the building by learning temperature preferences and automatically adjusting to energy-saving temperatures as the default. The thermostats are automatically set to a temperature between 68-78 degrees F (20-26 °C), depending on seasonality. In the winter, set the thermostat to 68°F (20°C) when the room is occupied, lowering room temperature when unoccupied. In the summer, set the thermostat to 78°F (26°C) when the room is occupied.", alias="energySavingThermostats")
    energy_saving_thermostats_exception: Optional[StrictStr] = Field(default=None, description="Energy saving thermostats exception.", alias="energySavingThermostatsException")
    green_building_design: Optional[StrictBool] = Field(default=None, description="Output only. Green building design. True if the property has been awarded a relevant certification.", alias="greenBuildingDesign")
    green_building_design_exception: Optional[StrictStr] = Field(default=None, description="Output only. Green building design exception.", alias="greenBuildingDesignException")
    independent_organization_audits_energy_use: Optional[StrictBool] = Field(default=None, description="Independent organization audits energy use. The property conducts an energy audit at least every 5 years, the results of which are either verified by a third-party and/or published in external communications. An energy audit is a detailed assessment of the facility which provides recommendations to existing operations and procedures to improve energy efficiency, available incentives or rebates,and opportunities for improvements through renovations or upgrades. Examples of organizations that conduct credible third party audits include: Engie Impact, DNV GL (EU), Dexma, and local utility providers (they often provide energy and water audits).", alias="independentOrganizationAuditsEnergyUse")
    independent_organization_audits_energy_use_exception: Optional[StrictStr] = Field(default=None, description="Independent organization audits energy use exception.", alias="independentOrganizationAuditsEnergyUseException")
    __properties: ClassVar[List[str]] = ["carbonFreeEnergySources", "carbonFreeEnergySourcesException", "energyConservationProgram", "energyConservationProgramException", "energyEfficientHeatingAndCoolingSystems", "energyEfficientHeatingAndCoolingSystemsException", "energyEfficientLighting", "energyEfficientLightingException", "energySavingThermostats", "energySavingThermostatsException", "greenBuildingDesign", "greenBuildingDesignException", "independentOrganizationAuditsEnergyUse", "independentOrganizationAuditsEnergyUseException"]

    @field_validator('carbon_free_energy_sources_exception')
    def carbon_free_energy_sources_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('energy_conservation_program_exception')
    def energy_conservation_program_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('energy_efficient_heating_and_cooling_systems_exception')
    def energy_efficient_heating_and_cooling_systems_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('energy_efficient_lighting_exception')
    def energy_efficient_lighting_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('energy_saving_thermostats_exception')
    def energy_saving_thermostats_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('green_building_design_exception')
    def green_building_design_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('independent_organization_audits_energy_use_exception')
    def independent_organization_audits_energy_use_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnergyEfficiency from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "green_building_design",
            "green_building_design_exception",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnergyEfficiency from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "carbonFreeEnergySources": obj.get("carbonFreeEnergySources"),
            "carbonFreeEnergySourcesException": obj.get("carbonFreeEnergySourcesException"),
            "energyConservationProgram": obj.get("energyConservationProgram"),
            "energyConservationProgramException": obj.get("energyConservationProgramException"),
            "energyEfficientHeatingAndCoolingSystems": obj.get("energyEfficientHeatingAndCoolingSystems"),
            "energyEfficientHeatingAndCoolingSystemsException": obj.get("energyEfficientHeatingAndCoolingSystemsException"),
            "energyEfficientLighting": obj.get("energyEfficientLighting"),
            "energyEfficientLightingException": obj.get("energyEfficientLightingException"),
            "energySavingThermostats": obj.get("energySavingThermostats"),
            "energySavingThermostatsException": obj.get("energySavingThermostatsException"),
            "greenBuildingDesign": obj.get("greenBuildingDesign"),
            "greenBuildingDesignException": obj.get("greenBuildingDesignException"),
            "independentOrganizationAuditsEnergyUse": obj.get("independentOrganizationAuditsEnergyUse"),
            "independentOrganizationAuditsEnergyUseException": obj.get("independentOrganizationAuditsEnergyUseException")
        })
        return _obj



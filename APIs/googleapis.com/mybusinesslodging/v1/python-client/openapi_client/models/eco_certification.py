# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EcoCertification(BaseModel):
    """
    An eco certificate awarded to the hotel. Deprecated: this message is no longer populated. All certification data is now provided by BeCause.
    """ # noqa: E501
    awarded: Optional[StrictBool] = Field(default=None, description="Whether the eco certificate was awarded or not.")
    awarded_exception: Optional[StrictStr] = Field(default=None, description="Awarded exception.", alias="awardedException")
    eco_certificate: Optional[StrictStr] = Field(default=None, description="Required. The eco certificate.", alias="ecoCertificate")
    __properties: ClassVar[List[str]] = ["awarded", "awardedException", "ecoCertificate"]

    @field_validator('awarded_exception')
    def awarded_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('eco_certificate')
    def eco_certificate_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ECO_CERTIFICATE_UNSPECIFIED', 'ISO14001', 'ISO50001', 'ASIAN_ECOTOURISM', 'BIOSPHERE_RESPOSNIBLE_TOURISM', 'BUREAU_VERITAS', 'CONTROL_UNION', 'EARTHCHECK', 'ECO_CERTIFICATION_MALTA', 'ECOTOURISM_AUSTRALIAS_ECO', 'GREAT_GREEN_DEAL', 'GREEN_GLOBE', 'GREEN_GROWTH2050', 'GREEN_KEY', 'GREEN_KEY_ECO_RATING', 'GREEN_SEAL', 'GREEN_STAR', 'GREEN_TOURISM_ACTIVE', 'HILTON_LIGHTSTAY', 'HOSTELLING_INTERNATIONALS_QUALITY_AND_SUSTAINABILITY', 'HOTELES_MAS_VERDES', 'NORDIC_SWAN_ECOLABEL', 'PREFERRED_BY_NATURE_SUSTAINABLE_TOURISM', 'SUSTAINABLE_TRAVEL_IRELAND', 'TOF_TIGERS_INITITIVES_PUG', 'TRAVELIFE', 'UNITED_CERTIFICATION_SYSTEMS_LIMITED', 'VIREO_SRL']):
            raise ValueError("must be one of enum values ('ECO_CERTIFICATE_UNSPECIFIED', 'ISO14001', 'ISO50001', 'ASIAN_ECOTOURISM', 'BIOSPHERE_RESPOSNIBLE_TOURISM', 'BUREAU_VERITAS', 'CONTROL_UNION', 'EARTHCHECK', 'ECO_CERTIFICATION_MALTA', 'ECOTOURISM_AUSTRALIAS_ECO', 'GREAT_GREEN_DEAL', 'GREEN_GLOBE', 'GREEN_GROWTH2050', 'GREEN_KEY', 'GREEN_KEY_ECO_RATING', 'GREEN_SEAL', 'GREEN_STAR', 'GREEN_TOURISM_ACTIVE', 'HILTON_LIGHTSTAY', 'HOSTELLING_INTERNATIONALS_QUALITY_AND_SUSTAINABILITY', 'HOTELES_MAS_VERDES', 'NORDIC_SWAN_ECOLABEL', 'PREFERRED_BY_NATURE_SUSTAINABLE_TOURISM', 'SUSTAINABLE_TRAVEL_IRELAND', 'TOF_TIGERS_INITITIVES_PUG', 'TRAVELIFE', 'UNITED_CERTIFICATION_SYSTEMS_LIMITED', 'VIREO_SRL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EcoCertification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EcoCertification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "awarded": obj.get("awarded"),
            "awardedException": obj.get("awardedException"),
            "ecoCertificate": obj.get("ecoCertificate")
        })
        return _obj



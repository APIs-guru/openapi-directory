# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WaterConservation(BaseModel):
    """
    Water conservation practices implemented at the hotel.
    """ # noqa: E501
    independent_organization_audits_water_use: Optional[StrictBool] = Field(default=None, description="Independent organization audits water use. The property conducts a water conservation audit every 5 years, the results of which are either verified by a third-party and/or published in external communications. A water conservation audit is a detailed assessment of the facility, providing recommendations to existing operations and procedures to improve water efficiency, available incentives or rebates, and opportunities for improvements through renovations or upgrades. Examples of organizations who conduct credible third party audits include: Engie Impact, and local utility providers (they often provide energy and water audits).", alias="independentOrganizationAuditsWaterUse")
    independent_organization_audits_water_use_exception: Optional[StrictStr] = Field(default=None, description="Independent organization audits water use exception.", alias="independentOrganizationAuditsWaterUseException")
    linen_reuse_program: Optional[StrictBool] = Field(default=None, description="Linen reuse program. The property offers a linen reuse program.", alias="linenReuseProgram")
    linen_reuse_program_exception: Optional[StrictStr] = Field(default=None, description="Linen reuse program exception.", alias="linenReuseProgramException")
    towel_reuse_program: Optional[StrictBool] = Field(default=None, description="Towel reuse program. The property offers a towel reuse program.", alias="towelReuseProgram")
    towel_reuse_program_exception: Optional[StrictStr] = Field(default=None, description="Towel reuse program exception.", alias="towelReuseProgramException")
    water_saving_showers: Optional[StrictBool] = Field(default=None, description="Water saving showers. All of the property's guest rooms have shower heads that use no more than 2.0 gallons per minute (gpm).", alias="waterSavingShowers")
    water_saving_showers_exception: Optional[StrictStr] = Field(default=None, description="Water saving showers exception.", alias="waterSavingShowersException")
    water_saving_sinks: Optional[StrictBool] = Field(default=None, description="Water saving sinks. All of the property's guest rooms have bathroom faucets that use a maximum of 1.5 gallons per minute (gpm), public restroom faucets do not exceed 0.5 gpm, and kitchen faucets (excluding faucets used exclusively for filling operations) do not exceed 2.2 gpm.", alias="waterSavingSinks")
    water_saving_sinks_exception: Optional[StrictStr] = Field(default=None, description="Water saving sinks exception.", alias="waterSavingSinksException")
    water_saving_toilets: Optional[StrictBool] = Field(default=None, description="Water saving toilets. All of the property's toilets use 1.6 gallons per flush, or less.", alias="waterSavingToilets")
    water_saving_toilets_exception: Optional[StrictStr] = Field(default=None, description="Water saving toilets exception.", alias="waterSavingToiletsException")
    __properties: ClassVar[List[str]] = ["independentOrganizationAuditsWaterUse", "independentOrganizationAuditsWaterUseException", "linenReuseProgram", "linenReuseProgramException", "towelReuseProgram", "towelReuseProgramException", "waterSavingShowers", "waterSavingShowersException", "waterSavingSinks", "waterSavingSinksException", "waterSavingToilets", "waterSavingToiletsException"]

    @field_validator('independent_organization_audits_water_use_exception')
    def independent_organization_audits_water_use_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('linen_reuse_program_exception')
    def linen_reuse_program_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('towel_reuse_program_exception')
    def towel_reuse_program_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('water_saving_showers_exception')
    def water_saving_showers_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('water_saving_sinks_exception')
    def water_saving_sinks_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('water_saving_toilets_exception')
    def water_saving_toilets_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WaterConservation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WaterConservation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "independentOrganizationAuditsWaterUse": obj.get("independentOrganizationAuditsWaterUse"),
            "independentOrganizationAuditsWaterUseException": obj.get("independentOrganizationAuditsWaterUseException"),
            "linenReuseProgram": obj.get("linenReuseProgram"),
            "linenReuseProgramException": obj.get("linenReuseProgramException"),
            "towelReuseProgram": obj.get("towelReuseProgram"),
            "towelReuseProgramException": obj.get("towelReuseProgramException"),
            "waterSavingShowers": obj.get("waterSavingShowers"),
            "waterSavingShowersException": obj.get("waterSavingShowersException"),
            "waterSavingSinks": obj.get("waterSavingSinks"),
            "waterSavingSinksException": obj.get("waterSavingSinksException"),
            "waterSavingToilets": obj.get("waterSavingToilets"),
            "waterSavingToiletsException": obj.get("waterSavingToiletsException")
        })
        return _obj



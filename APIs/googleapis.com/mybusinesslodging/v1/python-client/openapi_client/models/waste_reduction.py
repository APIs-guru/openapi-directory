# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WasteReduction(BaseModel):
    """
    Waste reduction practices implemented at the hotel.
    """ # noqa: E501
    compostable_food_containers_and_cutlery: Optional[StrictBool] = Field(default=None, description="Compostable food containers and cutlery. 100% of food service containers and to-go cutlery are compostable, and reusable utensils are offered wherever possible. Compostable materials are capable of undergoing biological decomposition in a compost site, such that material is not visually distinguishable and breaks down into carbon dioxide, water, inorganic compounds, and biomass.", alias="compostableFoodContainersAndCutlery")
    compostable_food_containers_and_cutlery_exception: Optional[StrictStr] = Field(default=None, description="Compostable food containers and cutlery exception.", alias="compostableFoodContainersAndCutleryException")
    composts_excess_food: Optional[StrictBool] = Field(default=None, description="Composts excess food. The property has a program and/or policy for diverting waste from landfill by composting food and yard waste, either through compost collection and off-site processing or on-site compost processing.", alias="compostsExcessFood")
    composts_excess_food_exception: Optional[StrictStr] = Field(default=None, description="Composts excess food exception.", alias="compostsExcessFoodException")
    donates_excess_food: Optional[StrictBool] = Field(default=None, description="Donates excess food. The property has a program and/or policy for diverting waste from landfill that may include efforts to donate for human consumption or divert food for animal feed.", alias="donatesExcessFood")
    donates_excess_food_exception: Optional[StrictStr] = Field(default=None, description="Donates excess food exception.", alias="donatesExcessFoodException")
    food_waste_reduction_program: Optional[StrictBool] = Field(default=None, description="Food waste reduction program. The property has established a food waste reduction and donation program, aiming to reduce food waste by half. These programs typically use tools such as the Hotel Kitchen Toolkit and others to track waste and measure progress.", alias="foodWasteReductionProgram")
    food_waste_reduction_program_exception: Optional[StrictStr] = Field(default=None, description="Food waste reduction program exception.", alias="foodWasteReductionProgramException")
    no_single_use_plastic_straws: Optional[StrictBool] = Field(default=None, description="No single use plastic straws. The property bans single-use plastic straws.", alias="noSingleUsePlasticStraws")
    no_single_use_plastic_straws_exception: Optional[StrictStr] = Field(default=None, description="No single use plastic straws exception.", alias="noSingleUsePlasticStrawsException")
    no_single_use_plastic_water_bottles: Optional[StrictBool] = Field(default=None, description="No single use plastic water bottles. The property bans single-use plastic water bottles.", alias="noSingleUsePlasticWaterBottles")
    no_single_use_plastic_water_bottles_exception: Optional[StrictStr] = Field(default=None, description="No single use plastic water bottles exception.", alias="noSingleUsePlasticWaterBottlesException")
    no_styrofoam_food_containers: Optional[StrictBool] = Field(default=None, description="No styrofoam food containers. The property eliminates the use of Styrofoam in disposable food service items.", alias="noStyrofoamFoodContainers")
    no_styrofoam_food_containers_exception: Optional[StrictStr] = Field(default=None, description="No styrofoam food containers exception.", alias="noStyrofoamFoodContainersException")
    recycling_program: Optional[StrictBool] = Field(default=None, description="Recycling program. The property has a recycling program, aligned with LEED waste requirements, and a policy outlining efforts to send less than 50% of waste to landfill. The recycling program includes storage locations for recyclable materials, including mixed paper, corrugated cardboard, glass, plastics, and metals.", alias="recyclingProgram")
    recycling_program_exception: Optional[StrictStr] = Field(default=None, description="Recycling program exception.", alias="recyclingProgramException")
    refillable_toiletry_containers: Optional[StrictBool] = Field(default=None, description="Refillable toiletry containers. The property has replaced miniature individual containers with refillable amenity dispensers for shampoo, conditioner, soap, and lotion.", alias="refillableToiletryContainers")
    refillable_toiletry_containers_exception: Optional[StrictStr] = Field(default=None, description="Refillable toiletry containers exception.", alias="refillableToiletryContainersException")
    safely_disposes_batteries: Optional[StrictBool] = Field(default=None, description="Safely disposes batteries. The property safely stores and disposes batteries.", alias="safelyDisposesBatteries")
    safely_disposes_batteries_exception: Optional[StrictStr] = Field(default=None, description="Safely disposes batteries exception.", alias="safelyDisposesBatteriesException")
    safely_disposes_electronics: Optional[StrictBool] = Field(default=None, description="Safely disposes electronics. The property has a reputable recycling program that keeps hazardous electronic parts and chemical compounds out of landfills, dumps and other unauthorized abandonment sites, and recycles/reuses applicable materials. (e.g. certified electronics recyclers).", alias="safelyDisposesElectronics")
    safely_disposes_electronics_exception: Optional[StrictStr] = Field(default=None, description="Safely disposes electronics exception.", alias="safelyDisposesElectronicsException")
    safely_disposes_lightbulbs: Optional[StrictBool] = Field(default=None, description="Safely disposes lightbulbs. The property safely stores and disposes lightbulbs.", alias="safelyDisposesLightbulbs")
    safely_disposes_lightbulbs_exception: Optional[StrictStr] = Field(default=None, description="Safely disposes lightbulbs exception.", alias="safelyDisposesLightbulbsException")
    safely_handles_hazardous_substances: Optional[StrictBool] = Field(default=None, description="Safely handles hazardous substances. The property has a hazardous waste management program aligned wit GreenSeal and LEED requirements, and meets all regulatory requirements for hazardous waste disposal and recycling. Hazardous means substances that are classified as \"hazardous\" by an authoritative body (such as OSHA or DOT), are labeled with signal words such as \"Danger,\" \"Caution,\" \"Warning,\" or are flammable, corrosive, or ignitable. Requirements include: - The property shall maintain records of the efforts it has made to replace the hazardous substances it uses with less hazardous alternatives. - An inventory of the hazardous materials stored on-site. - Products intended for cleaning, dishwashing, laundry, and pool maintenance shall be stored in clearly labeled containers. These containers shall be checked regularly for leaks, and replaced a necessary. - Spill containment devices shall be installed to collect spills, drips, or leaching of chemicals.", alias="safelyHandlesHazardousSubstances")
    safely_handles_hazardous_substances_exception: Optional[StrictStr] = Field(default=None, description="Safely handles hazardous substances exception.", alias="safelyHandlesHazardousSubstancesException")
    soap_donation_program: Optional[StrictBool] = Field(default=None, description="Soap donation program. The property participates in a soap donation program such as Clean the World or something similar.", alias="soapDonationProgram")
    soap_donation_program_exception: Optional[StrictStr] = Field(default=None, description="Soap donation program exception.", alias="soapDonationProgramException")
    toiletry_donation_program: Optional[StrictBool] = Field(default=None, description="Toiletry donation program. The property participates in a toiletry donation program such as Clean the World or something similar.", alias="toiletryDonationProgram")
    toiletry_donation_program_exception: Optional[StrictStr] = Field(default=None, description="Toiletry donation program exception.", alias="toiletryDonationProgramException")
    water_bottle_filling_stations: Optional[StrictBool] = Field(default=None, description="Water bottle filling stations. The property offers water stations throughout the building for guest use.", alias="waterBottleFillingStations")
    water_bottle_filling_stations_exception: Optional[StrictStr] = Field(default=None, description="Water bottle filling stations exception.", alias="waterBottleFillingStationsException")
    __properties: ClassVar[List[str]] = ["compostableFoodContainersAndCutlery", "compostableFoodContainersAndCutleryException", "compostsExcessFood", "compostsExcessFoodException", "donatesExcessFood", "donatesExcessFoodException", "foodWasteReductionProgram", "foodWasteReductionProgramException", "noSingleUsePlasticStraws", "noSingleUsePlasticStrawsException", "noSingleUsePlasticWaterBottles", "noSingleUsePlasticWaterBottlesException", "noStyrofoamFoodContainers", "noStyrofoamFoodContainersException", "recyclingProgram", "recyclingProgramException", "refillableToiletryContainers", "refillableToiletryContainersException", "safelyDisposesBatteries", "safelyDisposesBatteriesException", "safelyDisposesElectronics", "safelyDisposesElectronicsException", "safelyDisposesLightbulbs", "safelyDisposesLightbulbsException", "safelyHandlesHazardousSubstances", "safelyHandlesHazardousSubstancesException", "soapDonationProgram", "soapDonationProgramException", "toiletryDonationProgram", "toiletryDonationProgramException", "waterBottleFillingStations", "waterBottleFillingStationsException"]

    @field_validator('compostable_food_containers_and_cutlery_exception')
    def compostable_food_containers_and_cutlery_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('composts_excess_food_exception')
    def composts_excess_food_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('donates_excess_food_exception')
    def donates_excess_food_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('food_waste_reduction_program_exception')
    def food_waste_reduction_program_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('no_single_use_plastic_straws_exception')
    def no_single_use_plastic_straws_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('no_single_use_plastic_water_bottles_exception')
    def no_single_use_plastic_water_bottles_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('no_styrofoam_food_containers_exception')
    def no_styrofoam_food_containers_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('recycling_program_exception')
    def recycling_program_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('refillable_toiletry_containers_exception')
    def refillable_toiletry_containers_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('safely_disposes_batteries_exception')
    def safely_disposes_batteries_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('safely_disposes_electronics_exception')
    def safely_disposes_electronics_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('safely_disposes_lightbulbs_exception')
    def safely_disposes_lightbulbs_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('safely_handles_hazardous_substances_exception')
    def safely_handles_hazardous_substances_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('soap_donation_program_exception')
    def soap_donation_program_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('toiletry_donation_program_exception')
    def toiletry_donation_program_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('water_bottle_filling_stations_exception')
    def water_bottle_filling_stations_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WasteReduction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WasteReduction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "compostableFoodContainersAndCutlery": obj.get("compostableFoodContainersAndCutlery"),
            "compostableFoodContainersAndCutleryException": obj.get("compostableFoodContainersAndCutleryException"),
            "compostsExcessFood": obj.get("compostsExcessFood"),
            "compostsExcessFoodException": obj.get("compostsExcessFoodException"),
            "donatesExcessFood": obj.get("donatesExcessFood"),
            "donatesExcessFoodException": obj.get("donatesExcessFoodException"),
            "foodWasteReductionProgram": obj.get("foodWasteReductionProgram"),
            "foodWasteReductionProgramException": obj.get("foodWasteReductionProgramException"),
            "noSingleUsePlasticStraws": obj.get("noSingleUsePlasticStraws"),
            "noSingleUsePlasticStrawsException": obj.get("noSingleUsePlasticStrawsException"),
            "noSingleUsePlasticWaterBottles": obj.get("noSingleUsePlasticWaterBottles"),
            "noSingleUsePlasticWaterBottlesException": obj.get("noSingleUsePlasticWaterBottlesException"),
            "noStyrofoamFoodContainers": obj.get("noStyrofoamFoodContainers"),
            "noStyrofoamFoodContainersException": obj.get("noStyrofoamFoodContainersException"),
            "recyclingProgram": obj.get("recyclingProgram"),
            "recyclingProgramException": obj.get("recyclingProgramException"),
            "refillableToiletryContainers": obj.get("refillableToiletryContainers"),
            "refillableToiletryContainersException": obj.get("refillableToiletryContainersException"),
            "safelyDisposesBatteries": obj.get("safelyDisposesBatteries"),
            "safelyDisposesBatteriesException": obj.get("safelyDisposesBatteriesException"),
            "safelyDisposesElectronics": obj.get("safelyDisposesElectronics"),
            "safelyDisposesElectronicsException": obj.get("safelyDisposesElectronicsException"),
            "safelyDisposesLightbulbs": obj.get("safelyDisposesLightbulbs"),
            "safelyDisposesLightbulbsException": obj.get("safelyDisposesLightbulbsException"),
            "safelyHandlesHazardousSubstances": obj.get("safelyHandlesHazardousSubstances"),
            "safelyHandlesHazardousSubstancesException": obj.get("safelyHandlesHazardousSubstancesException"),
            "soapDonationProgram": obj.get("soapDonationProgram"),
            "soapDonationProgramException": obj.get("soapDonationProgramException"),
            "toiletryDonationProgram": obj.get("toiletryDonationProgram"),
            "toiletryDonationProgramException": obj.get("toiletryDonationProgramException"),
            "waterBottleFillingStations": obj.get("waterBottleFillingStations"),
            "waterBottleFillingStationsException": obj.get("waterBottleFillingStationsException")
        })
        return _obj



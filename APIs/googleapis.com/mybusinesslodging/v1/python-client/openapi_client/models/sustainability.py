# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.energy_efficiency import EnergyEfficiency
from openapi_client.models.sustainability_certifications import SustainabilityCertifications
from openapi_client.models.sustainable_sourcing import SustainableSourcing
from openapi_client.models.waste_reduction import WasteReduction
from openapi_client.models.water_conservation import WaterConservation
from typing import Optional, Set
from typing_extensions import Self

class Sustainability(BaseModel):
    """
    Sustainability practices implemented at the hotel.
    """ # noqa: E501
    energy_efficiency: Optional[EnergyEfficiency] = Field(default=None, alias="energyEfficiency")
    sustainability_certifications: Optional[SustainabilityCertifications] = Field(default=None, alias="sustainabilityCertifications")
    sustainable_sourcing: Optional[SustainableSourcing] = Field(default=None, alias="sustainableSourcing")
    waste_reduction: Optional[WasteReduction] = Field(default=None, alias="wasteReduction")
    water_conservation: Optional[WaterConservation] = Field(default=None, alias="waterConservation")
    __properties: ClassVar[List[str]] = ["energyEfficiency", "sustainabilityCertifications", "sustainableSourcing", "wasteReduction", "waterConservation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Sustainability from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of energy_efficiency
        if self.energy_efficiency:
            _dict['energyEfficiency'] = self.energy_efficiency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sustainability_certifications
        if self.sustainability_certifications:
            _dict['sustainabilityCertifications'] = self.sustainability_certifications.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sustainable_sourcing
        if self.sustainable_sourcing:
            _dict['sustainableSourcing'] = self.sustainable_sourcing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of waste_reduction
        if self.waste_reduction:
            _dict['wasteReduction'] = self.waste_reduction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of water_conservation
        if self.water_conservation:
            _dict['waterConservation'] = self.water_conservation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Sustainability from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "energyEfficiency": EnergyEfficiency.from_dict(obj["energyEfficiency"]) if obj.get("energyEfficiency") is not None else None,
            "sustainabilityCertifications": SustainabilityCertifications.from_dict(obj["sustainabilityCertifications"]) if obj.get("sustainabilityCertifications") is not None else None,
            "sustainableSourcing": SustainableSourcing.from_dict(obj["sustainableSourcing"]) if obj.get("sustainableSourcing") is not None else None,
            "wasteReduction": WasteReduction.from_dict(obj["wasteReduction"]) if obj.get("wasteReduction") is not None else None,
            "waterConservation": WaterConservation.from_dict(obj["waterConservation"]) if obj.get("waterConservation") is not None else None
        })
        return _obj



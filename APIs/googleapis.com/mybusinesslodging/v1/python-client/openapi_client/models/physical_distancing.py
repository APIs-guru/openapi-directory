# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PhysicalDistancing(BaseModel):
    """
    Physical distancing measures implemented by the hotel during COVID-19.
    """ # noqa: E501
    common_areas_physical_distancing_arranged: Optional[StrictBool] = Field(default=None, description="Common areas arranged to maintain physical distancing.", alias="commonAreasPhysicalDistancingArranged")
    common_areas_physical_distancing_arranged_exception: Optional[StrictStr] = Field(default=None, description="Common areas physical distancing arranged exception.", alias="commonAreasPhysicalDistancingArrangedException")
    physical_distancing_required: Optional[StrictBool] = Field(default=None, description="Physical distancing required.", alias="physicalDistancingRequired")
    physical_distancing_required_exception: Optional[StrictStr] = Field(default=None, description="Physical distancing required exception.", alias="physicalDistancingRequiredException")
    safety_dividers: Optional[StrictBool] = Field(default=None, description="Safety dividers at front desk and other locations.", alias="safetyDividers")
    safety_dividers_exception: Optional[StrictStr] = Field(default=None, description="Safety dividers exception.", alias="safetyDividersException")
    shared_areas_limited_occupancy: Optional[StrictBool] = Field(default=None, description="Guest occupancy limited within shared facilities.", alias="sharedAreasLimitedOccupancy")
    shared_areas_limited_occupancy_exception: Optional[StrictStr] = Field(default=None, description="Shared areas limited occupancy exception.", alias="sharedAreasLimitedOccupancyException")
    wellness_areas_have_private_spaces: Optional[StrictBool] = Field(default=None, description="Private spaces designated in spa and wellness areas.", alias="wellnessAreasHavePrivateSpaces")
    wellness_areas_have_private_spaces_exception: Optional[StrictStr] = Field(default=None, description="Wellness areas have private spaces exception.", alias="wellnessAreasHavePrivateSpacesException")
    __properties: ClassVar[List[str]] = ["commonAreasPhysicalDistancingArranged", "commonAreasPhysicalDistancingArrangedException", "physicalDistancingRequired", "physicalDistancingRequiredException", "safetyDividers", "safetyDividersException", "sharedAreasLimitedOccupancy", "sharedAreasLimitedOccupancyException", "wellnessAreasHavePrivateSpaces", "wellnessAreasHavePrivateSpacesException"]

    @field_validator('common_areas_physical_distancing_arranged_exception')
    def common_areas_physical_distancing_arranged_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('physical_distancing_required_exception')
    def physical_distancing_required_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('safety_dividers_exception')
    def safety_dividers_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('shared_areas_limited_occupancy_exception')
    def shared_areas_limited_occupancy_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('wellness_areas_have_private_spaces_exception')
    def wellness_areas_have_private_spaces_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PhysicalDistancing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PhysicalDistancing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commonAreasPhysicalDistancingArranged": obj.get("commonAreasPhysicalDistancingArranged"),
            "commonAreasPhysicalDistancingArrangedException": obj.get("commonAreasPhysicalDistancingArrangedException"),
            "physicalDistancingRequired": obj.get("physicalDistancingRequired"),
            "physicalDistancingRequiredException": obj.get("physicalDistancingRequiredException"),
            "safetyDividers": obj.get("safetyDividers"),
            "safetyDividersException": obj.get("safetyDividersException"),
            "sharedAreasLimitedOccupancy": obj.get("sharedAreasLimitedOccupancy"),
            "sharedAreasLimitedOccupancyException": obj.get("sharedAreasLimitedOccupancyException"),
            "wellnessAreasHavePrivateSpaces": obj.get("wellnessAreasHavePrivateSpaces"),
            "wellnessAreasHavePrivateSpacesException": obj.get("wellnessAreasHavePrivateSpacesException")
        })
        return _obj



# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.living_area import LivingArea
from openapi_client.models.views_from_unit import ViewsFromUnit
from typing import Optional, Set
from typing_extensions import Self

class GuestUnitFeatures(BaseModel):
    """
    Features and available amenities in the guest unit.
    """ # noqa: E501
    bungalow_or_villa: Optional[StrictBool] = Field(default=None, description="Bungalow or villa. An independent structure that is part of a hotel or resort that is rented to one party for a vacation stay. The hotel or resort may be completely comprised of bungalows or villas, or they may be one of several guestroom options. Guests in the bungalows or villas most often have the same, if not more, amenities and services offered to guests in other guestroom types.", alias="bungalowOrVilla")
    bungalow_or_villa_exception: Optional[StrictStr] = Field(default=None, description="Bungalow or villa exception.", alias="bungalowOrVillaException")
    connecting_unit_available: Optional[StrictBool] = Field(default=None, description="Connecting unit available. A guestroom type that features access to an adjacent guestroom for the purpose of booking both rooms. Most often used by families who need more than one room to accommodate the number of people in their group.", alias="connectingUnitAvailable")
    connecting_unit_available_exception: Optional[StrictStr] = Field(default=None, description="Connecting unit available exception.", alias="connectingUnitAvailableException")
    executive_floor: Optional[StrictBool] = Field(default=None, description="Executive floor. A floor of the hotel where the guestrooms are only bookable by members of the hotel's frequent guest membership program. Benefits of this room class include access to a designated lounge which may or may not feature free breakfast, cocktails or other perks specific to members of the program.", alias="executiveFloor")
    executive_floor_exception: Optional[StrictStr] = Field(default=None, description="Executive floor exception.", alias="executiveFloorException")
    max_adult_occupants_count: Optional[StrictInt] = Field(default=None, description="Max adult occupants count. The total number of adult guests allowed to stay overnight in the guestroom.", alias="maxAdultOccupantsCount")
    max_adult_occupants_count_exception: Optional[StrictStr] = Field(default=None, description="Max adult occupants count exception.", alias="maxAdultOccupantsCountException")
    max_child_occupants_count: Optional[StrictInt] = Field(default=None, description="Max child occupants count. The total number of children allowed to stay overnight in the room.", alias="maxChildOccupantsCount")
    max_child_occupants_count_exception: Optional[StrictStr] = Field(default=None, description="Max child occupants count exception.", alias="maxChildOccupantsCountException")
    max_occupants_count: Optional[StrictInt] = Field(default=None, description="Max occupants count. The total number of guests allowed to stay overnight in the guestroom.", alias="maxOccupantsCount")
    max_occupants_count_exception: Optional[StrictStr] = Field(default=None, description="Max occupants count exception.", alias="maxOccupantsCountException")
    private_home: Optional[StrictBool] = Field(default=None, description="Private home. A privately owned home (house, townhouse, apartment, cabin, bungalow etc) that may or not serve as the owner's residence, but is rented out in its entirety or by the room(s) to paying guest(s) for vacation stays. Not for lease-based, long-term residency.", alias="privateHome")
    private_home_exception: Optional[StrictStr] = Field(default=None, description="Private home exception.", alias="privateHomeException")
    suite: Optional[StrictBool] = Field(default=None, description="Suite. A guestroom category that implies both a bedroom area and a separate living area. There may or may not be full walls and doors separating the two areas, but regardless, they are very distinct. Does not mean a couch or chair in a bedroom.")
    suite_exception: Optional[StrictStr] = Field(default=None, description="Suite exception.", alias="suiteException")
    tier: Optional[StrictStr] = Field(default=None, description="Tier. Classification of the unit based on available features/amenities. A non-standard tier is only permitted if at least one other unit type falls under the standard tier.")
    tier_exception: Optional[StrictStr] = Field(default=None, description="Tier exception.", alias="tierException")
    total_living_areas: Optional[LivingArea] = Field(default=None, alias="totalLivingAreas")
    views: Optional[ViewsFromUnit] = None
    __properties: ClassVar[List[str]] = ["bungalowOrVilla", "bungalowOrVillaException", "connectingUnitAvailable", "connectingUnitAvailableException", "executiveFloor", "executiveFloorException", "maxAdultOccupantsCount", "maxAdultOccupantsCountException", "maxChildOccupantsCount", "maxChildOccupantsCountException", "maxOccupantsCount", "maxOccupantsCountException", "privateHome", "privateHomeException", "suite", "suiteException", "tier", "tierException", "totalLivingAreas", "views"]

    @field_validator('bungalow_or_villa_exception')
    def bungalow_or_villa_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('connecting_unit_available_exception')
    def connecting_unit_available_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('executive_floor_exception')
    def executive_floor_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('max_adult_occupants_count_exception')
    def max_adult_occupants_count_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('max_child_occupants_count_exception')
    def max_child_occupants_count_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('max_occupants_count_exception')
    def max_occupants_count_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('private_home_exception')
    def private_home_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('suite_exception')
    def suite_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('tier')
    def tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNIT_TIER_UNSPECIFIED', 'STANDARD_UNIT', 'DELUXE_UNIT']):
            raise ValueError("must be one of enum values ('UNIT_TIER_UNSPECIFIED', 'STANDARD_UNIT', 'DELUXE_UNIT')")
        return value

    @field_validator('tier_exception')
    def tier_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GuestUnitFeatures from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of total_living_areas
        if self.total_living_areas:
            _dict['totalLivingAreas'] = self.total_living_areas.to_dict()
        # override the default output from pydantic by calling `to_dict()` of views
        if self.views:
            _dict['views'] = self.views.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GuestUnitFeatures from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bungalowOrVilla": obj.get("bungalowOrVilla"),
            "bungalowOrVillaException": obj.get("bungalowOrVillaException"),
            "connectingUnitAvailable": obj.get("connectingUnitAvailable"),
            "connectingUnitAvailableException": obj.get("connectingUnitAvailableException"),
            "executiveFloor": obj.get("executiveFloor"),
            "executiveFloorException": obj.get("executiveFloorException"),
            "maxAdultOccupantsCount": obj.get("maxAdultOccupantsCount"),
            "maxAdultOccupantsCountException": obj.get("maxAdultOccupantsCountException"),
            "maxChildOccupantsCount": obj.get("maxChildOccupantsCount"),
            "maxChildOccupantsCountException": obj.get("maxChildOccupantsCountException"),
            "maxOccupantsCount": obj.get("maxOccupantsCount"),
            "maxOccupantsCountException": obj.get("maxOccupantsCountException"),
            "privateHome": obj.get("privateHome"),
            "privateHomeException": obj.get("privateHomeException"),
            "suite": obj.get("suite"),
            "suiteException": obj.get("suiteException"),
            "tier": obj.get("tier"),
            "tierException": obj.get("tierException"),
            "totalLivingAreas": LivingArea.from_dict(obj["totalLivingAreas"]) if obj.get("totalLivingAreas") is not None else None,
            "views": ViewsFromUnit.from_dict(obj["views"]) if obj.get("views") is not None else None
        })
        return _obj



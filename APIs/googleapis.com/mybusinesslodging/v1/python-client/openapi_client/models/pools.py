# coding: utf-8

"""
    My Business Lodging API

    The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Pools(BaseModel):
    """
    Swimming pool or recreational water facilities available at the hotel.
    """ # noqa: E501
    adult_pool: Optional[StrictBool] = Field(default=None, description="Adult pool. A pool restricted for use by adults only. Can be indoors or outdoors.", alias="adultPool")
    adult_pool_exception: Optional[StrictStr] = Field(default=None, description="Adult pool exception.", alias="adultPoolException")
    hot_tub: Optional[StrictBool] = Field(default=None, description="Hot tub. A man-made pool containing bubbling water maintained at a higher temperature and circulated by aerating jets for the purpose of soaking, relaxation and hydrotherapy. Can be indoors or outdoors. Not used for active swimming. Also known as Jacuzzi. Hot tub must be in a common area where all guests can access it. Does not apply to room-specific hot tubs that are only accessible to guest occupying that room.", alias="hotTub")
    hot_tub_exception: Optional[StrictStr] = Field(default=None, description="Hot tub exception.", alias="hotTubException")
    indoor_pool: Optional[StrictBool] = Field(default=None, description="Indoor pool. A pool located inside the hotel and available for guests to use for swimming and/or soaking. Use may or may not be restricted to adults and/or children.", alias="indoorPool")
    indoor_pool_exception: Optional[StrictStr] = Field(default=None, description="Indoor pool exception.", alias="indoorPoolException")
    indoor_pools_count: Optional[StrictInt] = Field(default=None, description="Indoor pools count. The sum of all indoor pools at the hotel.", alias="indoorPoolsCount")
    indoor_pools_count_exception: Optional[StrictStr] = Field(default=None, description="Indoor pools count exception.", alias="indoorPoolsCountException")
    lazy_river: Optional[StrictBool] = Field(default=None, description="Lazy river. A man-made pool or several interconnected recreational pools built to mimic the shape and current of a winding river where guests float in the water on inflated rubber tubes. Can be indoors or outdoors.", alias="lazyRiver")
    lazy_river_exception: Optional[StrictStr] = Field(default=None, description="Lazy river exception.", alias="lazyRiverException")
    lifeguard: Optional[StrictBool] = Field(default=None, description="Lifeguard. A trained member of the hotel staff stationed by the hotel's indoor or outdoor swimming area and responsible for the safety of swimming guests.")
    lifeguard_exception: Optional[StrictStr] = Field(default=None, description="Lifeguard exception.", alias="lifeguardException")
    outdoor_pool: Optional[StrictBool] = Field(default=None, description="Outdoor pool. A pool located outside on the grounds of the hotel and available for guests to use for swimming, soaking or recreation. Use may or may not be restricted to adults and/or children.", alias="outdoorPool")
    outdoor_pool_exception: Optional[StrictStr] = Field(default=None, description="Outdoor pool exception.", alias="outdoorPoolException")
    outdoor_pools_count: Optional[StrictInt] = Field(default=None, description="Outdoor pools count. The sum of all outdoor pools at the hotel.", alias="outdoorPoolsCount")
    outdoor_pools_count_exception: Optional[StrictStr] = Field(default=None, description="Outdoor pools count exception.", alias="outdoorPoolsCountException")
    pool: Optional[StrictBool] = Field(default=None, description="Pool. The presence of a pool, either indoors or outdoors, for guests to use for swimming and/or soaking. Use may or may not be restricted to adults and/or children.")
    pool_exception: Optional[StrictStr] = Field(default=None, description="Pool exception.", alias="poolException")
    pools_count: Optional[StrictInt] = Field(default=None, description="Pools count. The sum of all pools at the hotel.", alias="poolsCount")
    pools_count_exception: Optional[StrictStr] = Field(default=None, description="Pools count exception.", alias="poolsCountException")
    wading_pool: Optional[StrictBool] = Field(default=None, description="Wading pool. A shallow pool designed for small children to play in. Can be indoors or outdoors. Also known as kiddie pool.", alias="wadingPool")
    wading_pool_exception: Optional[StrictStr] = Field(default=None, description="Wading pool exception.", alias="wadingPoolException")
    water_park: Optional[StrictBool] = Field(default=None, description="Water park. An aquatic recreation area with a large pool or series of pools that has features such as a water slide or tube, wavepool, fountains, rope swings, and/or obstacle course. Can be indoors or outdoors. Also known as adventure pool.", alias="waterPark")
    water_park_exception: Optional[StrictStr] = Field(default=None, description="Water park exception.", alias="waterParkException")
    waterslide: Optional[StrictBool] = Field(default=None, description="Waterslide. A continuously wetted chute positioned by an indoor or outdoor pool which people slide down into the water.")
    waterslide_exception: Optional[StrictStr] = Field(default=None, description="Waterslide exception.", alias="waterslideException")
    wave_pool: Optional[StrictBool] = Field(default=None, description="Wave pool. A large indoor or outdoor pool with a machine that produces water currents to mimic the ocean's crests.", alias="wavePool")
    wave_pool_exception: Optional[StrictStr] = Field(default=None, description="Wave pool exception.", alias="wavePoolException")
    __properties: ClassVar[List[str]] = ["adultPool", "adultPoolException", "hotTub", "hotTubException", "indoorPool", "indoorPoolException", "indoorPoolsCount", "indoorPoolsCountException", "lazyRiver", "lazyRiverException", "lifeguard", "lifeguardException", "outdoorPool", "outdoorPoolException", "outdoorPoolsCount", "outdoorPoolsCountException", "pool", "poolException", "poolsCount", "poolsCountException", "wadingPool", "wadingPoolException", "waterPark", "waterParkException", "waterslide", "waterslideException", "wavePool", "wavePoolException"]

    @field_validator('adult_pool_exception')
    def adult_pool_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('hot_tub_exception')
    def hot_tub_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('indoor_pool_exception')
    def indoor_pool_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('indoor_pools_count_exception')
    def indoor_pools_count_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('lazy_river_exception')
    def lazy_river_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('lifeguard_exception')
    def lifeguard_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('outdoor_pool_exception')
    def outdoor_pool_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('outdoor_pools_count_exception')
    def outdoor_pools_count_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('pool_exception')
    def pool_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('pools_count_exception')
    def pools_count_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('wading_pool_exception')
    def wading_pool_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('water_park_exception')
    def water_park_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('waterslide_exception')
    def waterslide_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('wave_pool_exception')
    def wave_pool_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Pools from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Pools from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adultPool": obj.get("adultPool"),
            "adultPoolException": obj.get("adultPoolException"),
            "hotTub": obj.get("hotTub"),
            "hotTubException": obj.get("hotTubException"),
            "indoorPool": obj.get("indoorPool"),
            "indoorPoolException": obj.get("indoorPoolException"),
            "indoorPoolsCount": obj.get("indoorPoolsCount"),
            "indoorPoolsCountException": obj.get("indoorPoolsCountException"),
            "lazyRiver": obj.get("lazyRiver"),
            "lazyRiverException": obj.get("lazyRiverException"),
            "lifeguard": obj.get("lifeguard"),
            "lifeguardException": obj.get("lifeguardException"),
            "outdoorPool": obj.get("outdoorPool"),
            "outdoorPoolException": obj.get("outdoorPoolException"),
            "outdoorPoolsCount": obj.get("outdoorPoolsCount"),
            "outdoorPoolsCountException": obj.get("outdoorPoolsCountException"),
            "pool": obj.get("pool"),
            "poolException": obj.get("poolException"),
            "poolsCount": obj.get("poolsCount"),
            "poolsCountException": obj.get("poolsCountException"),
            "wadingPool": obj.get("wadingPool"),
            "wadingPoolException": obj.get("wadingPoolException"),
            "waterPark": obj.get("waterPark"),
            "waterParkException": obj.get("waterParkException"),
            "waterslide": obj.get("waterslide"),
            "waterslideException": obj.get("waterslideException"),
            "wavePool": obj.get("wavePool"),
            "wavePoolException": obj.get("wavePoolException")
        })
        return _obj



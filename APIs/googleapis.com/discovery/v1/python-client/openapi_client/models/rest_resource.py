# coding: utf-8

"""
    API Discovery Service

    Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.rest_method import RestMethod
from typing import Optional, Set
from typing_extensions import Self

class RestResource(BaseModel):
    """
    RestResource
    """ # noqa: E501
    deprecated: Optional[StrictBool] = Field(default=None, description="Whether this resource is deprecated.")
    methods: Optional[Dict[str, RestMethod]] = Field(default=None, description="Methods on this resource.")
    resources: Optional[Dict[str, RestResource]] = Field(default=None, description="Sub-resources on this resource.")
    __properties: ClassVar[List[str]] = ["deprecated", "methods", "resources"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in methods (dict)
        _field_dict = {}
        if self.methods:
            for _key_methods in self.methods:
                if self.methods[_key_methods]:
                    _field_dict[_key_methods] = self.methods[_key_methods].to_dict()
            _dict['methods'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in resources (dict)
        _field_dict = {}
        if self.resources:
            for _key_resources in self.resources:
                if self.resources[_key_resources]:
                    _field_dict[_key_resources] = self.resources[_key_resources].to_dict()
            _dict['resources'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deprecated": obj.get("deprecated"),
            "methods": dict(
                (_k, RestMethod.from_dict(_v))
                for _k, _v in obj["methods"].items()
            )
            if obj.get("methods") is not None
            else None,
            "resources": dict(
                (_k, RestResource.from_dict(_v))
                for _k, _v in obj["resources"].items()
            )
            if obj.get("resources") is not None
            else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
RestResource.model_rebuild(raise_errors=False)


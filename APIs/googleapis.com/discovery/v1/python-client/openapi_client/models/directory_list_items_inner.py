# coding: utf-8

"""
    API Discovery Service

    Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.directory_list_items_inner_icons import DirectoryListItemsInnerIcons
from typing import Optional, Set
from typing_extensions import Self

class DirectoryListItemsInner(BaseModel):
    """
    DirectoryListItemsInner
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The description of this API.")
    discovery_link: Optional[StrictStr] = Field(default=None, description="A link to the discovery document.", alias="discoveryLink")
    discovery_rest_url: Optional[StrictStr] = Field(default=None, description="The URL for the discovery REST document.", alias="discoveryRestUrl")
    documentation_link: Optional[StrictStr] = Field(default=None, description="A link to human readable documentation for the API.", alias="documentationLink")
    icons: Optional[DirectoryListItemsInnerIcons] = None
    id: Optional[StrictStr] = Field(default=None, description="The id of this API.")
    kind: Optional[StrictStr] = Field(default='discovery#directoryItem', description="The kind for this response.")
    labels: Optional[List[StrictStr]] = Field(default=None, description="Labels for the status of this API, such as labs or deprecated.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the API.")
    preferred: Optional[StrictBool] = Field(default=None, description="True if this version is the preferred version to use.")
    title: Optional[StrictStr] = Field(default=None, description="The title of this API.")
    version: Optional[StrictStr] = Field(default=None, description="The version of the API.")
    __properties: ClassVar[List[str]] = ["description", "discoveryLink", "discoveryRestUrl", "documentationLink", "icons", "id", "kind", "labels", "name", "preferred", "title", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DirectoryListItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of icons
        if self.icons:
            _dict['icons'] = self.icons.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DirectoryListItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "discoveryLink": obj.get("discoveryLink"),
            "discoveryRestUrl": obj.get("discoveryRestUrl"),
            "documentationLink": obj.get("documentationLink"),
            "icons": DirectoryListItemsInnerIcons.from_dict(obj["icons"]) if obj.get("icons") is not None else None,
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'discovery#directoryItem',
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "preferred": obj.get("preferred"),
            "title": obj.get("title"),
            "version": obj.get("version")
        })
        return _obj



# coding: utf-8

"""
    API Discovery Service

    Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.json_schema import JsonSchema
from openapi_client.models.rest_method_media_upload import RestMethodMediaUpload
from openapi_client.models.rest_method_request import RestMethodRequest
from openapi_client.models.rest_method_response import RestMethodResponse
from typing import Optional, Set
from typing_extensions import Self

class RestMethod(BaseModel):
    """
    RestMethod
    """ # noqa: E501
    deprecated: Optional[StrictBool] = Field(default=None, description="Whether this method is deprecated.")
    description: Optional[StrictStr] = Field(default=None, description="Description of this method.")
    etag_required: Optional[StrictBool] = Field(default=None, description="Whether this method requires an ETag to be specified. The ETag is sent as an HTTP If-Match or If-None-Match header.", alias="etagRequired")
    flat_path: Optional[StrictStr] = Field(default=None, description="The URI path of this REST method in (RFC 6570) format without level 2 features ({+var}). Supplementary to the path property.", alias="flatPath")
    http_method: Optional[StrictStr] = Field(default=None, description="HTTP method used by this method.", alias="httpMethod")
    id: Optional[StrictStr] = Field(default=None, description="A unique ID for this method. This property can be used to match methods between different versions of Discovery.")
    media_upload: Optional[RestMethodMediaUpload] = Field(default=None, alias="mediaUpload")
    parameter_order: Optional[List[StrictStr]] = Field(default=None, description="Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures. The array is ordered such that the \"most-significant\" parameter appears first.", alias="parameterOrder")
    parameters: Optional[Dict[str, JsonSchema]] = Field(default=None, description="Details for all parameters in this method.")
    path: Optional[StrictStr] = Field(default=None, description="The URI path of this REST method. Should be used in conjunction with the basePath property at the api-level.")
    request: Optional[RestMethodRequest] = None
    response: Optional[RestMethodResponse] = None
    scopes: Optional[List[StrictStr]] = Field(default=None, description="OAuth 2.0 scopes applicable to this method.")
    supports_media_download: Optional[StrictBool] = Field(default=None, description="Whether this method supports media downloads.", alias="supportsMediaDownload")
    supports_media_upload: Optional[StrictBool] = Field(default=None, description="Whether this method supports media uploads.", alias="supportsMediaUpload")
    supports_subscription: Optional[StrictBool] = Field(default=None, description="Whether this method supports subscriptions.", alias="supportsSubscription")
    use_media_download_service: Optional[StrictBool] = Field(default=None, description="Indicates that downloads from this method should use the download service URL (i.e. \"/download\"). Only applies if the method supports media download.", alias="useMediaDownloadService")
    __properties: ClassVar[List[str]] = ["deprecated", "description", "etagRequired", "flatPath", "httpMethod", "id", "mediaUpload", "parameterOrder", "parameters", "path", "request", "response", "scopes", "supportsMediaDownload", "supportsMediaUpload", "supportsSubscription", "useMediaDownloadService"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestMethod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of media_upload
        if self.media_upload:
            _dict['mediaUpload'] = self.media_upload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in parameters (dict)
        _field_dict = {}
        if self.parameters:
            for _key_parameters in self.parameters:
                if self.parameters[_key_parameters]:
                    _field_dict[_key_parameters] = self.parameters[_key_parameters].to_dict()
            _dict['parameters'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['response'] = self.response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestMethod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deprecated": obj.get("deprecated"),
            "description": obj.get("description"),
            "etagRequired": obj.get("etagRequired"),
            "flatPath": obj.get("flatPath"),
            "httpMethod": obj.get("httpMethod"),
            "id": obj.get("id"),
            "mediaUpload": RestMethodMediaUpload.from_dict(obj["mediaUpload"]) if obj.get("mediaUpload") is not None else None,
            "parameterOrder": obj.get("parameterOrder"),
            "parameters": dict(
                (_k, JsonSchema.from_dict(_v))
                for _k, _v in obj["parameters"].items()
            )
            if obj.get("parameters") is not None
            else None,
            "path": obj.get("path"),
            "request": RestMethodRequest.from_dict(obj["request"]) if obj.get("request") is not None else None,
            "response": RestMethodResponse.from_dict(obj["response"]) if obj.get("response") is not None else None,
            "scopes": obj.get("scopes"),
            "supportsMediaDownload": obj.get("supportsMediaDownload"),
            "supportsMediaUpload": obj.get("supportsMediaUpload"),
            "supportsSubscription": obj.get("supportsSubscription"),
            "useMediaDownloadService": obj.get("useMediaDownloadService")
        })
        return _obj



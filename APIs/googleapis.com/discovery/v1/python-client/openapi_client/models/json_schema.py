# coding: utf-8

"""
    API Discovery Service

    Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.json_schema_annotations import JsonSchemaAnnotations
from openapi_client.models.json_schema_variant import JsonSchemaVariant
from typing import Optional, Set
from typing_extensions import Self

class JsonSchema(BaseModel):
    """
    JsonSchema
    """ # noqa: E501
    ref: Optional[StrictStr] = Field(default=None, description="A reference to another schema. The value of this property is the \"id\" of another schema.", alias="$ref")
    additional_properties: Optional[JsonSchema] = Field(default=None, alias="additionalProperties")
    annotations: Optional[JsonSchemaAnnotations] = None
    deprecated: Optional[StrictBool] = Field(default=None, description="Whether the parameter is deprecated.")
    description: Optional[StrictStr] = Field(default=None, description="A description of this object.")
    enum: Optional[List[StrictStr]] = Field(default=None, description="Values this parameter may take (if it is an enum).")
    enum_deprecated: Optional[List[StrictBool]] = Field(default=None, description="The deprecation status for the enums. Each position maps to the corresponding value in the \"enum\" array.", alias="enumDeprecated")
    enum_descriptions: Optional[List[StrictStr]] = Field(default=None, description="The descriptions for the enums. Each position maps to the corresponding value in the \"enum\" array.", alias="enumDescriptions")
    format: Optional[StrictStr] = Field(default=None, description="An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for this schema.")
    items: Optional[JsonSchema] = None
    location: Optional[StrictStr] = Field(default=None, description="Whether this parameter goes in the query or the path for REST requests.")
    maximum: Optional[StrictStr] = Field(default=None, description="The maximum value of this parameter.")
    minimum: Optional[StrictStr] = Field(default=None, description="The minimum value of this parameter.")
    pattern: Optional[StrictStr] = Field(default=None, description="The regular expression this parameter must conform to. Uses Java 6 regex format: http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html")
    properties: Optional[Dict[str, JsonSchema]] = Field(default=None, description="If this is a schema for an object, list the schema for each property of this object.")
    read_only: Optional[StrictBool] = Field(default=None, description="The value is read-only, generated by the service. The value cannot be modified by the client. If the value is included in a POST, PUT, or PATCH request, it is ignored by the service.", alias="readOnly")
    repeated: Optional[StrictBool] = Field(default=None, description="Whether this parameter may appear multiple times.")
    required: Optional[StrictBool] = Field(default=None, description="Whether the parameter is required.")
    type: Optional[StrictStr] = Field(default=None, description="The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1")
    variant: Optional[JsonSchemaVariant] = None
    __properties: ClassVar[List[str]] = ["$ref", "additionalProperties", "annotations", "deprecated", "description", "enum", "enumDeprecated", "enumDescriptions", "format", "id", "items", "location", "maximum", "minimum", "pattern", "properties", "readOnly", "repeated", "required", "type", "variant"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of additional_properties
        if self.additional_properties:
            _dict['additionalProperties'] = self.additional_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of annotations
        if self.annotations:
            _dict['annotations'] = self.annotations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of items
        if self.items:
            _dict['items'] = self.items.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in properties (dict)
        _field_dict = {}
        if self.properties:
            for _key_properties in self.properties:
                if self.properties[_key_properties]:
                    _field_dict[_key_properties] = self.properties[_key_properties].to_dict()
            _dict['properties'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of variant
        if self.variant:
            _dict['variant'] = self.variant.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "$ref": obj.get("$ref"),
            "additionalProperties": JsonSchema.from_dict(obj["additionalProperties"]) if obj.get("additionalProperties") is not None else None,
            "annotations": JsonSchemaAnnotations.from_dict(obj["annotations"]) if obj.get("annotations") is not None else None,
            "deprecated": obj.get("deprecated"),
            "description": obj.get("description"),
            "enum": obj.get("enum"),
            "enumDeprecated": obj.get("enumDeprecated"),
            "enumDescriptions": obj.get("enumDescriptions"),
            "format": obj.get("format"),
            "id": obj.get("id"),
            "items": JsonSchema.from_dict(obj["items"]) if obj.get("items") is not None else None,
            "location": obj.get("location"),
            "maximum": obj.get("maximum"),
            "minimum": obj.get("minimum"),
            "pattern": obj.get("pattern"),
            "properties": dict(
                (_k, JsonSchema.from_dict(_v))
                for _k, _v in obj["properties"].items()
            )
            if obj.get("properties") is not None
            else None,
            "readOnly": obj.get("readOnly"),
            "repeated": obj.get("repeated"),
            "required": obj.get("required"),
            "type": obj.get("type"),
            "variant": JsonSchemaVariant.from_dict(obj["variant"]) if obj.get("variant") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
JsonSchema.model_rebuild(raise_errors=False)


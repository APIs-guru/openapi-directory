# coding: utf-8

"""
    API Discovery Service

    Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.rest_method import RestMethod

class TestRestMethod(unittest.TestCase):
    """RestMethod unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RestMethod:
        """Test RestMethod
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RestMethod`
        """
        model = RestMethod()
        if include_optional:
            return RestMethod(
                deprecated = True,
                description = '',
                etag_required = True,
                flat_path = '',
                http_method = '',
                id = '',
                media_upload = openapi_client.models.rest_method_media_upload.RestMethod_mediaUpload(
                    accept = [
                        ''
                        ], 
                    max_size = '', 
                    protocols = openapi_client.models.rest_method_media_upload_protocols.RestMethod_mediaUpload_protocols(
                        resumable = openapi_client.models.rest_method_media_upload_protocols_resumable.RestMethod_mediaUpload_protocols_resumable(
                            multipart = True, 
                            path = '', ), 
                        simple = openapi_client.models.rest_method_media_upload_protocols_simple.RestMethod_mediaUpload_protocols_simple(
                            multipart = True, 
                            path = '', ), ), ),
                parameter_order = [
                    ''
                    ],
                parameters = {
                    'key' : openapi_client.models.json_schema.JsonSchema(
                        __ref = '', 
                        additional_properties = openapi_client.models.json_schema.JsonSchema(
                            __ref = '', 
                            annotations = openapi_client.models.json_schema_annotations.JsonSchema_annotations(
                                required = [
                                    ''
                                    ], ), 
                            deprecated = True, 
                            description = '', 
                            enum = [
                                ''
                                ], 
                            enum_deprecated = [
                                True
                                ], 
                            enum_descriptions = [
                                ''
                                ], 
                            format = '', 
                            id = '', 
                            items = , 
                            location = '', 
                            maximum = '', 
                            minimum = '', 
                            pattern = '', 
                            properties = {
                                'key' : 
                                }, 
                            read_only = True, 
                            repeated = True, 
                            required = True, 
                            type = '', 
                            variant = openapi_client.models.json_schema_variant.JsonSchema_variant(
                                discriminant = '', 
                                map = [
                                    openapi_client.models.json_schema_variant_map_inner.JsonSchema_variant_map_inner(
                                        __ref = '', 
                                        type_value = '', )
                                    ], ), ), 
                        annotations = openapi_client.models.json_schema_annotations.JsonSchema_annotations(), 
                        deprecated = True, 
                        description = '', 
                        enum = [
                            ''
                            ], 
                        enum_deprecated = [
                            True
                            ], 
                        enum_descriptions = [
                            ''
                            ], 
                        format = '', 
                        id = '', 
                        items = , 
                        location = '', 
                        maximum = '', 
                        minimum = '', 
                        pattern = '', 
                        properties = {
                            'key' : 
                            }, 
                        read_only = True, 
                        repeated = True, 
                        required = True, 
                        type = '', 
                        variant = openapi_client.models.json_schema_variant.JsonSchema_variant(
                            discriminant = '', ), )
                    },
                path = '',
                request = openapi_client.models.rest_method_request.RestMethod_request(
                    __ref = '', 
                    parameter_name = '', ),
                response = openapi_client.models.rest_method_response.RestMethod_response(
                    __ref = '', ),
                scopes = [
                    ''
                    ],
                supports_media_download = True,
                supports_media_upload = True,
                supports_subscription = True,
                use_media_download_service = True
            )
        else:
            return RestMethod(
        )
        """

    def testRestMethod(self):
        """Test RestMethod"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Search Ads 360 API

    The Search Ads 360 API allows developers to automate uploading conversions and downloading reports from Search Ads 360.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.custom_dimension import CustomDimension
from openapi_client.models.custom_metric import CustomMetric
from typing import Optional, Set
from typing_extensions import Self

class Conversion(BaseModel):
    """
    A conversion containing data relevant to DoubleClick Search.
    """ # noqa: E501
    ad_group_id: Optional[StrictStr] = Field(default=None, description="DS ad group ID.", alias="adGroupId")
    ad_id: Optional[StrictStr] = Field(default=None, description="DS ad ID.", alias="adId")
    ad_user_data_consent: Optional[StrictStr] = Field(default=None, description="Represents consent for core platform services (CPS) preferences in settings. No default value. Acceptable values are: GRANTED: The desired consent status is to grant. Read the CPS preferences from GTE settings. DENIED: The desired consent status is to deny; CPS list is empty.", alias="adUserDataConsent")
    advertiser_id: Optional[StrictStr] = Field(default=None, description="DS advertiser ID.", alias="advertiserId")
    agency_id: Optional[StrictStr] = Field(default=None, description="DS agency ID.", alias="agencyId")
    attribution_model: Optional[StrictStr] = Field(default=None, description="Available to advertisers only after contacting DoubleClick Search customer support.", alias="attributionModel")
    campaign_id: Optional[StrictStr] = Field(default=None, description="DS campaign ID.", alias="campaignId")
    channel: Optional[StrictStr] = Field(default=None, description="Sales channel for the product. Acceptable values are: - \"`local`\": a physical store - \"`online`\": an online store ")
    click_id: Optional[StrictStr] = Field(default=None, description="DS click ID for the conversion.", alias="clickId")
    conversion_id: Optional[StrictStr] = Field(default=None, description="For offline conversions, advertisers provide this ID. Advertisers can specify any ID that is meaningful to them. Each conversion in a request must specify a unique ID, and the combination of ID and timestamp must be unique amongst all conversions within the advertiser. For online conversions, DS copies the `dsConversionId` or `floodlightOrderId` into this property depending on the advertiser's Floodlight instructions.", alias="conversionId")
    conversion_modified_timestamp: Optional[StrictStr] = Field(default=None, description="The time at which the conversion was last modified, in epoch millis UTC.", alias="conversionModifiedTimestamp")
    conversion_timestamp: Optional[StrictStr] = Field(default=None, description="The time at which the conversion took place, in epoch millis UTC.", alias="conversionTimestamp")
    count_millis: Optional[StrictStr] = Field(default=None, description="Available to advertisers only after contacting DoubleClick Search customer support.", alias="countMillis")
    criterion_id: Optional[StrictStr] = Field(default=None, description="DS criterion (keyword) ID.", alias="criterionId")
    currency_code: Optional[StrictStr] = Field(default=None, description="The currency code for the conversion's revenue. Should be in ISO 4217 alphabetic (3-char) format.", alias="currencyCode")
    custom_dimension: Optional[List[CustomDimension]] = Field(default=None, description="Custom dimensions for the conversion, which can be used to filter data in a report.", alias="customDimension")
    custom_metric: Optional[List[CustomMetric]] = Field(default=None, description="Custom metrics for the conversion.", alias="customMetric")
    customer_id: Optional[StrictStr] = Field(default=None, description="Customer ID of a client account in the new Search Ads 360 experience.", alias="customerId")
    device_type: Optional[StrictStr] = Field(default=None, description="The type of device on which the conversion occurred.", alias="deviceType")
    ds_conversion_id: Optional[StrictStr] = Field(default=None, description="ID that DoubleClick Search generates for each conversion.", alias="dsConversionId")
    engine_account_id: Optional[StrictStr] = Field(default=None, description="DS engine account ID.", alias="engineAccountId")
    floodlight_order_id: Optional[StrictStr] = Field(default=None, description="The Floodlight order ID provided by the advertiser for the conversion.", alias="floodlightOrderId")
    inventory_account_id: Optional[StrictStr] = Field(default=None, description="ID that DS generates and uses to uniquely identify the inventory account that contains the product.", alias="inventoryAccountId")
    product_country: Optional[StrictStr] = Field(default=None, description="The country registered for the Merchant Center feed that contains the product. Use an ISO 3166 code to specify a country.", alias="productCountry")
    product_group_id: Optional[StrictStr] = Field(default=None, description="DS product group ID.", alias="productGroupId")
    product_id: Optional[StrictStr] = Field(default=None, description="The product ID (SKU).", alias="productId")
    product_language: Optional[StrictStr] = Field(default=None, description="The language registered for the Merchant Center feed that contains the product. Use an ISO 639 code to specify a language.", alias="productLanguage")
    quantity_millis: Optional[StrictStr] = Field(default=None, description="The quantity of this conversion, in millis.", alias="quantityMillis")
    revenue_micros: Optional[StrictStr] = Field(default=None, description="The revenue amount of this `TRANSACTION` conversion, in micros (value multiplied by 1000000, no decimal). For example, to specify a revenue value of \"10\" enter \"10000000\" (10 million) in your request.", alias="revenueMicros")
    segmentation_id: Optional[StrictStr] = Field(default=None, description="The numeric segmentation identifier (for example, DoubleClick Search Floodlight activity ID).", alias="segmentationId")
    segmentation_name: Optional[StrictStr] = Field(default=None, description="The friendly segmentation identifier (for example, DoubleClick Search Floodlight activity name).", alias="segmentationName")
    segmentation_type: Optional[StrictStr] = Field(default=None, description="The segmentation type of this conversion (for example, `FLOODLIGHT`).", alias="segmentationType")
    state: Optional[StrictStr] = Field(default=None, description="The state of the conversion, that is, either `ACTIVE` or `REMOVED`. Note: state DELETED is deprecated.")
    store_id: Optional[StrictStr] = Field(default=None, description="The ID of the local store for which the product was advertised. Applicable only when the channel is \"`local`\".", alias="storeId")
    type: Optional[StrictStr] = Field(default=None, description="The type of the conversion, that is, either `ACTION` or `TRANSACTION`. An `ACTION` conversion is an action by the user that has no monetarily quantifiable value, while a `TRANSACTION` conversion is an action that does have a monetarily quantifiable value. Examples are email list signups (`ACTION`) versus ecommerce purchases (`TRANSACTION`).")
    __properties: ClassVar[List[str]] = ["adGroupId", "adId", "adUserDataConsent", "advertiserId", "agencyId", "attributionModel", "campaignId", "channel", "clickId", "conversionId", "conversionModifiedTimestamp", "conversionTimestamp", "countMillis", "criterionId", "currencyCode", "customDimension", "customMetric", "customerId", "deviceType", "dsConversionId", "engineAccountId", "floodlightOrderId", "inventoryAccountId", "productCountry", "productGroupId", "productId", "productLanguage", "quantityMillis", "revenueMicros", "segmentationId", "segmentationName", "segmentationType", "state", "storeId", "type"]

    @field_validator('ad_user_data_consent')
    def ad_user_data_consent_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'GRANTED', 'DENIED']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'GRANTED', 'DENIED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Conversion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_dimension (list)
        _items = []
        if self.custom_dimension:
            for _item_custom_dimension in self.custom_dimension:
                if _item_custom_dimension:
                    _items.append(_item_custom_dimension.to_dict())
            _dict['customDimension'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_metric (list)
        _items = []
        if self.custom_metric:
            for _item_custom_metric in self.custom_metric:
                if _item_custom_metric:
                    _items.append(_item_custom_metric.to_dict())
            _dict['customMetric'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Conversion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adGroupId": obj.get("adGroupId"),
            "adId": obj.get("adId"),
            "adUserDataConsent": obj.get("adUserDataConsent"),
            "advertiserId": obj.get("advertiserId"),
            "agencyId": obj.get("agencyId"),
            "attributionModel": obj.get("attributionModel"),
            "campaignId": obj.get("campaignId"),
            "channel": obj.get("channel"),
            "clickId": obj.get("clickId"),
            "conversionId": obj.get("conversionId"),
            "conversionModifiedTimestamp": obj.get("conversionModifiedTimestamp"),
            "conversionTimestamp": obj.get("conversionTimestamp"),
            "countMillis": obj.get("countMillis"),
            "criterionId": obj.get("criterionId"),
            "currencyCode": obj.get("currencyCode"),
            "customDimension": [CustomDimension.from_dict(_item) for _item in obj["customDimension"]] if obj.get("customDimension") is not None else None,
            "customMetric": [CustomMetric.from_dict(_item) for _item in obj["customMetric"]] if obj.get("customMetric") is not None else None,
            "customerId": obj.get("customerId"),
            "deviceType": obj.get("deviceType"),
            "dsConversionId": obj.get("dsConversionId"),
            "engineAccountId": obj.get("engineAccountId"),
            "floodlightOrderId": obj.get("floodlightOrderId"),
            "inventoryAccountId": obj.get("inventoryAccountId"),
            "productCountry": obj.get("productCountry"),
            "productGroupId": obj.get("productGroupId"),
            "productId": obj.get("productId"),
            "productLanguage": obj.get("productLanguage"),
            "quantityMillis": obj.get("quantityMillis"),
            "revenueMicros": obj.get("revenueMicros"),
            "segmentationId": obj.get("segmentationId"),
            "segmentationName": obj.get("segmentationName"),
            "segmentationType": obj.get("segmentationType"),
            "state": obj.get("state"),
            "storeId": obj.get("storeId"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Search Ads 360 API

    The Search Ads 360 API allows developers to automate uploading conversions and downloading reports from Search Ads 360.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.report_api_column_spec import ReportApiColumnSpec
from openapi_client.models.report_request_filters_inner import ReportRequestFiltersInner
from openapi_client.models.report_request_order_by_inner import ReportRequestOrderByInner
from openapi_client.models.report_request_report_scope import ReportRequestReportScope
from openapi_client.models.report_request_time_range import ReportRequestTimeRange
from typing import Optional, Set
from typing_extensions import Self

class ReportRequest(BaseModel):
    """
    A request object used to create a DoubleClick Search report.
    """ # noqa: E501
    columns: Optional[List[ReportApiColumnSpec]] = Field(default=None, description="The columns to include in the report. This includes both DoubleClick Search columns and saved columns. For DoubleClick Search columns, only the `columnName` parameter is required. For saved columns only the `savedColumnName` parameter is required. Both `columnName` and `savedColumnName` cannot be set in the same stanza.\\ The maximum number of columns per request is 300.")
    download_format: Optional[StrictStr] = Field(default=None, description="Format that the report should be returned in. Currently `csv` or `tsv` is supported.", alias="downloadFormat")
    filters: Optional[List[ReportRequestFiltersInner]] = Field(default=None, description="A list of filters to be applied to the report.\\ The maximum number of filters per request is 300.")
    include_deleted_entities: Optional[StrictBool] = Field(default=None, description="Determines if removed entities should be included in the report. Defaults to `false`. Deprecated, please use `includeRemovedEntities` instead.", alias="includeDeletedEntities")
    include_removed_entities: Optional[StrictBool] = Field(default=None, description="Determines if removed entities should be included in the report. Defaults to `false`.", alias="includeRemovedEntities")
    max_rows_per_file: Optional[StrictInt] = Field(default=None, description="Asynchronous report only. The maximum number of rows per report file. A large report is split into many files based on this field. Acceptable values are `1000000` to `100000000`, inclusive.", alias="maxRowsPerFile")
    order_by: Optional[List[ReportRequestOrderByInner]] = Field(default=None, description="Synchronous report only. A list of columns and directions defining sorting to be performed on the report rows.\\ The maximum number of orderings per request is 300.", alias="orderBy")
    report_scope: Optional[ReportRequestReportScope] = Field(default=None, alias="reportScope")
    report_type: Optional[StrictStr] = Field(default=None, description="Determines the type of rows that are returned in the report. For example, if you specify `reportType: keyword`, each row in the report will contain data about a keyword. See the [Types of Reports](/search-ads/v2/report-types/) reference for the columns that are available for each type.", alias="reportType")
    row_count: Optional[StrictInt] = Field(default=None, description="Synchronous report only. The maximum number of rows to return; additional rows are dropped. Acceptable values are `0` to `10000`, inclusive. Defaults to `10000`.", alias="rowCount")
    start_row: Optional[StrictInt] = Field(default=None, description="Synchronous report only. Zero-based index of the first row to return. Acceptable values are `0` to `50000`, inclusive. Defaults to `0`.", alias="startRow")
    statistics_currency: Optional[StrictStr] = Field(default=None, description="Specifies the currency in which monetary will be returned. Possible values are: `usd`, `agency` (valid if the report is scoped to agency or lower), `advertiser` (valid if the report is scoped to * advertiser or lower), or `account` (valid if the report is scoped to engine account or lower).", alias="statisticsCurrency")
    time_range: Optional[ReportRequestTimeRange] = Field(default=None, alias="timeRange")
    verify_single_time_zone: Optional[StrictBool] = Field(default=None, description="If `true`, the report would only be created if all the requested stat data are sourced from a single timezone. Defaults to `false`.", alias="verifySingleTimeZone")
    __properties: ClassVar[List[str]] = ["columns", "downloadFormat", "filters", "includeDeletedEntities", "includeRemovedEntities", "maxRowsPerFile", "orderBy", "reportScope", "reportType", "rowCount", "startRow", "statisticsCurrency", "timeRange", "verifySingleTimeZone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in columns (list)
        _items = []
        if self.columns:
            for _item_columns in self.columns:
                if _item_columns:
                    _items.append(_item_columns.to_dict())
            _dict['columns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item_filters in self.filters:
                if _item_filters:
                    _items.append(_item_filters.to_dict())
            _dict['filters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_by (list)
        _items = []
        if self.order_by:
            for _item_order_by in self.order_by:
                if _item_order_by:
                    _items.append(_item_order_by.to_dict())
            _dict['orderBy'] = _items
        # override the default output from pydantic by calling `to_dict()` of report_scope
        if self.report_scope:
            _dict['reportScope'] = self.report_scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_range
        if self.time_range:
            _dict['timeRange'] = self.time_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "columns": [ReportApiColumnSpec.from_dict(_item) for _item in obj["columns"]] if obj.get("columns") is not None else None,
            "downloadFormat": obj.get("downloadFormat"),
            "filters": [ReportRequestFiltersInner.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "includeDeletedEntities": obj.get("includeDeletedEntities"),
            "includeRemovedEntities": obj.get("includeRemovedEntities"),
            "maxRowsPerFile": obj.get("maxRowsPerFile"),
            "orderBy": [ReportRequestOrderByInner.from_dict(_item) for _item in obj["orderBy"]] if obj.get("orderBy") is not None else None,
            "reportScope": ReportRequestReportScope.from_dict(obj["reportScope"]) if obj.get("reportScope") is not None else None,
            "reportType": obj.get("reportType"),
            "rowCount": obj.get("rowCount"),
            "startRow": obj.get("startRow"),
            "statisticsCurrency": obj.get("statisticsCurrency"),
            "timeRange": ReportRequestTimeRange.from_dict(obj["timeRange"]) if obj.get("timeRange") is not None else None,
            "verifySingleTimeZone": obj.get("verifySingleTimeZone")
        })
        return _obj



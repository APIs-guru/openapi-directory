# coding: utf-8

"""
    Cloud Bigtable Admin API

    Administer your Cloud Bigtable tables and instances.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_clusters_response import ListClustersResponse

class TestListClustersResponse(unittest.TestCase):
    """ListClustersResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListClustersResponse:
        """Test ListClustersResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListClustersResponse`
        """
        model = ListClustersResponse()
        if include_optional:
            return ListClustersResponse(
                clusters = [
                    openapi_client.models.cluster.Cluster(
                        cluster_config = openapi_client.models.cluster_config.ClusterConfig(
                            cluster_autoscaling_config = openapi_client.models.cluster_autoscaling_config.ClusterAutoscalingConfig(
                                autoscaling_limits = openapi_client.models.autoscaling_limits.AutoscalingLimits(
                                    max_serve_nodes = 56, 
                                    min_serve_nodes = 56, ), 
                                autoscaling_targets = openapi_client.models.autoscaling_targets.AutoscalingTargets(
                                    cpu_utilization_percent = 56, 
                                    storage_utilization_gib_per_node = 56, ), ), ), 
                        default_storage_type = 'STORAGE_TYPE_UNSPECIFIED', 
                        encryption_config = openapi_client.models.encryption_config.EncryptionConfig(
                            kms_key_name = '', ), 
                        location = '', 
                        name = '', 
                        serve_nodes = 56, 
                        state = 'STATE_NOT_KNOWN', )
                    ],
                failed_locations = [
                    ''
                    ],
                next_page_token = ''
            )
        else:
            return ListClustersResponse(
        )
        """

    def testListClustersResponse(self):
        """Test ListClustersResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Bigtable Admin API

    Administer your Cloud Bigtable tables and instances.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.table import Table

class TestTable(unittest.TestCase):
    """Table unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Table:
        """Test Table
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Table`
        """
        model = Table()
        if include_optional:
            return Table(
                change_stream_config = openapi_client.models.change_stream_config.ChangeStreamConfig(
                    retention_period = '', ),
                cluster_states = {
                    'key' : openapi_client.models.cluster_state.ClusterState(
                        encryption_info = [
                            openapi_client.models.encryption_info.EncryptionInfo(
                                encryption_status = openapi_client.models.status.Status(
                                    code = 56, 
                                    details = [
                                        {
                                            'key' : null
                                            }
                                        ], 
                                    message = '', ), 
                                encryption_type = 'ENCRYPTION_TYPE_UNSPECIFIED', 
                                kms_key_version = '', )
                            ], 
                        replication_state = 'STATE_NOT_KNOWN', )
                    },
                column_families = {
                    'key' : openapi_client.models.column_family.ColumnFamily(
                        gc_rule = openapi_client.models.gc_rule.GcRule(
                            intersection = openapi_client.models.intersection.Intersection(
                                rules = [
                                    openapi_client.models.gc_rule.GcRule(
                                        max_age = '', 
                                        max_num_versions = 56, 
                                        union = openapi_client.models.union.Union(), )
                                    ], ), 
                            max_age = '', 
                            max_num_versions = 56, 
                            union = openapi_client.models.union.Union(), ), 
                        stats = openapi_client.models.column_family_stats.ColumnFamilyStats(
                            average_cells_per_column = 1.337, 
                            average_columns_per_row = 1.337, 
                            logical_data_bytes = '', ), )
                    },
                deletion_protection = True,
                granularity = 'TIMESTAMP_GRANULARITY_UNSPECIFIED',
                name = '',
                restore_info = openapi_client.models.restore_info.RestoreInfo(
                    backup_info = openapi_client.models.backup_info.BackupInfo(
                        backup = '', 
                        end_time = '', 
                        source_backup = '', 
                        source_table = '', 
                        start_time = '', ), 
                    source_type = 'RESTORE_SOURCE_TYPE_UNSPECIFIED', ),
                stats = openapi_client.models.table_stats.TableStats(
                    average_cells_per_column = 1.337, 
                    average_columns_per_row = 1.337, 
                    logical_data_bytes = '', 
                    row_count = '', )
            )
        else:
            return Table(
        )
        """

    def testTable(self):
        """Test Table"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

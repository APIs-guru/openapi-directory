# coding: utf-8

"""
    Cloud Bigtable Admin API

    Administer your Cloud Bigtable tables and instances.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.multi_cluster_routing_use_any import MultiClusterRoutingUseAny
from openapi_client.models.single_cluster_routing import SingleClusterRouting
from openapi_client.models.standard_isolation import StandardIsolation
from typing import Optional, Set
from typing_extensions import Self

class AppProfile(BaseModel):
    """
    A configuration object describing how Cloud Bigtable should treat traffic from a particular end user application.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Long form description of the use case for this AppProfile.")
    etag: Optional[StrictStr] = Field(default=None, description="Strongly validated etag for optimistic concurrency control. Preserve the value returned from `GetAppProfile` when calling `UpdateAppProfile` to fail the request if there has been a modification in the mean time. The `update_mask` of the request need not include `etag` for this protection to apply. See [Wikipedia](https://en.wikipedia.org/wiki/HTTP_ETag) and [RFC 7232](https://tools.ietf.org/html/rfc7232#section-2.3) for more details.")
    multi_cluster_routing_use_any: Optional[MultiClusterRoutingUseAny] = Field(default=None, alias="multiClusterRoutingUseAny")
    name: Optional[StrictStr] = Field(default=None, description="The unique name of the app profile. Values are of the form `projects/{project}/instances/{instance}/appProfiles/_a-zA-Z0-9*`.")
    priority: Optional[StrictStr] = Field(default=None, description="This field has been deprecated in favor of `standard_isolation.priority`. If you set this field, `standard_isolation.priority` will be set instead. The priority of requests sent using this app profile.")
    single_cluster_routing: Optional[SingleClusterRouting] = Field(default=None, alias="singleClusterRouting")
    standard_isolation: Optional[StandardIsolation] = Field(default=None, alias="standardIsolation")
    __properties: ClassVar[List[str]] = ["description", "etag", "multiClusterRoutingUseAny", "name", "priority", "singleClusterRouting", "standardIsolation"]

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRIORITY_UNSPECIFIED', 'PRIORITY_LOW', 'PRIORITY_MEDIUM', 'PRIORITY_HIGH']):
            raise ValueError("must be one of enum values ('PRIORITY_UNSPECIFIED', 'PRIORITY_LOW', 'PRIORITY_MEDIUM', 'PRIORITY_HIGH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of multi_cluster_routing_use_any
        if self.multi_cluster_routing_use_any:
            _dict['multiClusterRoutingUseAny'] = self.multi_cluster_routing_use_any.to_dict()
        # override the default output from pydantic by calling `to_dict()` of single_cluster_routing
        if self.single_cluster_routing:
            _dict['singleClusterRouting'] = self.single_cluster_routing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standard_isolation
        if self.standard_isolation:
            _dict['standardIsolation'] = self.standard_isolation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "multiClusterRoutingUseAny": MultiClusterRoutingUseAny.from_dict(obj["multiClusterRoutingUseAny"]) if obj.get("multiClusterRoutingUseAny") is not None else None,
            "name": obj.get("name"),
            "priority": obj.get("priority"),
            "singleClusterRouting": SingleClusterRouting.from_dict(obj["singleClusterRouting"]) if obj.get("singleClusterRouting") is not None else None,
            "standardIsolation": StandardIsolation.from_dict(obj["standardIsolation"]) if obj.get("standardIsolation") is not None else None
        })
        return _obj



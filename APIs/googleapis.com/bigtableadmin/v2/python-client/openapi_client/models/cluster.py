# coding: utf-8

"""
    Cloud Bigtable Admin API

    Administer your Cloud Bigtable tables and instances.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cluster_config import ClusterConfig
from openapi_client.models.encryption_config import EncryptionConfig
from typing import Optional, Set
from typing_extensions import Self

class Cluster(BaseModel):
    """
    A resizable group of nodes in a particular cloud location, capable of serving all Tables in the parent Instance.
    """ # noqa: E501
    cluster_config: Optional[ClusterConfig] = Field(default=None, alias="clusterConfig")
    default_storage_type: Optional[StrictStr] = Field(default=None, description="Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden.", alias="defaultStorageType")
    encryption_config: Optional[EncryptionConfig] = Field(default=None, alias="encryptionConfig")
    location: Optional[StrictStr] = Field(default=None, description="Immutable. The location where this cluster's nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.")
    name: Optional[StrictStr] = Field(default=None, description="The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.")
    serve_nodes: Optional[StrictInt] = Field(default=None, description="The number of nodes in the cluster. If no value is set, Cloud Bigtable automatically allocates nodes based on your data footprint and optimized for 50% storage utilization.", alias="serveNodes")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the cluster.")
    __properties: ClassVar[List[str]] = ["clusterConfig", "defaultStorageType", "encryptionConfig", "location", "name", "serveNodes", "state"]

    @field_validator('default_storage_type')
    def default_storage_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STORAGE_TYPE_UNSPECIFIED', 'SSD', 'HDD']):
            raise ValueError("must be one of enum values ('STORAGE_TYPE_UNSPECIFIED', 'SSD', 'HDD')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_NOT_KNOWN', 'READY', 'CREATING', 'RESIZING', 'DISABLED']):
            raise ValueError("must be one of enum values ('STATE_NOT_KNOWN', 'READY', 'CREATING', 'RESIZING', 'DISABLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Cluster from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cluster_config
        if self.cluster_config:
            _dict['clusterConfig'] = self.cluster_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encryption_config
        if self.encryption_config:
            _dict['encryptionConfig'] = self.encryption_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Cluster from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterConfig": ClusterConfig.from_dict(obj["clusterConfig"]) if obj.get("clusterConfig") is not None else None,
            "defaultStorageType": obj.get("defaultStorageType"),
            "encryptionConfig": EncryptionConfig.from_dict(obj["encryptionConfig"]) if obj.get("encryptionConfig") is not None else None,
            "location": obj.get("location"),
            "name": obj.get("name"),
            "serveNodes": obj.get("serveNodes"),
            "state": obj.get("state")
        })
        return _obj



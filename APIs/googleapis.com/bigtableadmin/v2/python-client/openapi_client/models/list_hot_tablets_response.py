# coding: utf-8

"""
    Cloud Bigtable Admin API

    Administer your Cloud Bigtable tables and instances.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.hot_tablet import HotTablet
from typing import Optional, Set
from typing_extensions import Self

class ListHotTabletsResponse(BaseModel):
    """
    Response message for BigtableInstanceAdmin.ListHotTablets.
    """ # noqa: E501
    hot_tablets: Optional[List[HotTablet]] = Field(default=None, description="List of hot tablets in the tables of the requested cluster that fall within the requested time range. Hot tablets are ordered by node cpu usage percent. If there are multiple hot tablets that correspond to the same tablet within a 15-minute interval, only the hot tablet with the highest node cpu usage will be included in the response.", alias="hotTablets")
    next_page_token: Optional[StrictStr] = Field(default=None, description="Set if not all hot tablets could be returned in a single response. Pass this value to `page_token` in another request to get the next page of results.", alias="nextPageToken")
    __properties: ClassVar[List[str]] = ["hotTablets", "nextPageToken"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListHotTabletsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in hot_tablets (list)
        _items = []
        if self.hot_tablets:
            for _item_hot_tablets in self.hot_tablets:
                if _item_hot_tablets:
                    _items.append(_item_hot_tablets.to_dict())
            _dict['hotTablets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListHotTabletsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hotTablets": [HotTablet.from_dict(_item) for _item in obj["hotTablets"]] if obj.get("hotTablets") is not None else None,
            "nextPageToken": obj.get("nextPageToken")
        })
        return _obj



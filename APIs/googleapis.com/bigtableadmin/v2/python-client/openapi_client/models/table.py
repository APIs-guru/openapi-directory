# coding: utf-8

"""
    Cloud Bigtable Admin API

    Administer your Cloud Bigtable tables and instances.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.change_stream_config import ChangeStreamConfig
from openapi_client.models.cluster_state import ClusterState
from openapi_client.models.column_family import ColumnFamily
from openapi_client.models.restore_info import RestoreInfo
from openapi_client.models.table_stats import TableStats
from typing import Optional, Set
from typing_extensions import Self

class Table(BaseModel):
    """
    A collection of user data indexed by row, column, and timestamp. Each table is served using the resources of its parent cluster.
    """ # noqa: E501
    change_stream_config: Optional[ChangeStreamConfig] = Field(default=None, alias="changeStreamConfig")
    cluster_states: Optional[Dict[str, ClusterState]] = Field(default=None, description="Output only. Map from cluster ID to per-cluster table state. If it could not be determined whether or not the table has data in a particular cluster (for example, if its zone is unavailable), then there will be an entry for the cluster with UNKNOWN `replication_status`. Views: `REPLICATION_VIEW`, `ENCRYPTION_VIEW`, `FULL`", alias="clusterStates")
    column_families: Optional[Dict[str, ColumnFamily]] = Field(default=None, description="The column families configured for this table, mapped by column family ID. Views: `SCHEMA_VIEW`, `STATS_VIEW`, `FULL`", alias="columnFamilies")
    deletion_protection: Optional[StrictBool] = Field(default=None, description="Set to true to make the table protected against data loss. i.e. deleting the following resources through Admin APIs are prohibited: * The table. * The column families in the table. * The instance containing the table. Note one can still delete the data stored in the table through Data APIs.", alias="deletionProtection")
    granularity: Optional[StrictStr] = Field(default=None, description="Immutable. The granularity (i.e. `MILLIS`) at which timestamps are stored in this table. Timestamps not matching the granularity will be rejected. If unspecified at creation time, the value will be set to `MILLIS`. Views: `SCHEMA_VIEW`, `FULL`.")
    name: Optional[StrictStr] = Field(default=None, description="The unique name of the table. Values are of the form `projects/{project}/instances/{instance}/tables/_a-zA-Z0-9*`. Views: `NAME_ONLY`, `SCHEMA_VIEW`, `REPLICATION_VIEW`, `STATS_VIEW`, `FULL`")
    restore_info: Optional[RestoreInfo] = Field(default=None, alias="restoreInfo")
    stats: Optional[TableStats] = None
    __properties: ClassVar[List[str]] = ["changeStreamConfig", "clusterStates", "columnFamilies", "deletionProtection", "granularity", "name", "restoreInfo", "stats"]

    @field_validator('granularity')
    def granularity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TIMESTAMP_GRANULARITY_UNSPECIFIED', 'MILLIS']):
            raise ValueError("must be one of enum values ('TIMESTAMP_GRANULARITY_UNSPECIFIED', 'MILLIS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Table from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cluster_states",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of change_stream_config
        if self.change_stream_config:
            _dict['changeStreamConfig'] = self.change_stream_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in cluster_states (dict)
        _field_dict = {}
        if self.cluster_states:
            for _key_cluster_states in self.cluster_states:
                if self.cluster_states[_key_cluster_states]:
                    _field_dict[_key_cluster_states] = self.cluster_states[_key_cluster_states].to_dict()
            _dict['clusterStates'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in column_families (dict)
        _field_dict = {}
        if self.column_families:
            for _key_column_families in self.column_families:
                if self.column_families[_key_column_families]:
                    _field_dict[_key_column_families] = self.column_families[_key_column_families].to_dict()
            _dict['columnFamilies'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of restore_info
        if self.restore_info:
            _dict['restoreInfo'] = self.restore_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Table from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "changeStreamConfig": ChangeStreamConfig.from_dict(obj["changeStreamConfig"]) if obj.get("changeStreamConfig") is not None else None,
            "clusterStates": dict(
                (_k, ClusterState.from_dict(_v))
                for _k, _v in obj["clusterStates"].items()
            )
            if obj.get("clusterStates") is not None
            else None,
            "columnFamilies": dict(
                (_k, ColumnFamily.from_dict(_v))
                for _k, _v in obj["columnFamilies"].items()
            )
            if obj.get("columnFamilies") is not None
            else None,
            "deletionProtection": obj.get("deletionProtection"),
            "granularity": obj.get("granularity"),
            "name": obj.get("name"),
            "restoreInfo": RestoreInfo.from_dict(obj["restoreInfo"]) if obj.get("restoreInfo") is not None else None,
            "stats": TableStats.from_dict(obj["stats"]) if obj.get("stats") is not None else None
        })
        return _obj



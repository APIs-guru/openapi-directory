# coding: utf-8

"""
    Cloud Bigtable Admin API

    Administer your Cloud Bigtable tables and instances.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption_info import EncryptionInfo
from typing import Optional, Set
from typing_extensions import Self

class ClusterState(BaseModel):
    """
    The state of a table's data in a particular cluster.
    """ # noqa: E501
    encryption_info: Optional[List[EncryptionInfo]] = Field(default=None, description="Output only. The encryption information for the table in this cluster. If the encryption key protecting this resource is customer managed, then its version can be rotated in Cloud Key Management Service (Cloud KMS). The primary version of the key and its status will be reflected here when changes propagate from Cloud KMS.", alias="encryptionInfo")
    replication_state: Optional[StrictStr] = Field(default=None, description="Output only. The state of replication for the table in this cluster.", alias="replicationState")
    __properties: ClassVar[List[str]] = ["encryptionInfo", "replicationState"]

    @field_validator('replication_state')
    def replication_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_NOT_KNOWN', 'INITIALIZING', 'PLANNED_MAINTENANCE', 'UNPLANNED_MAINTENANCE', 'READY', 'READY_OPTIMIZING']):
            raise ValueError("must be one of enum values ('STATE_NOT_KNOWN', 'INITIALIZING', 'PLANNED_MAINTENANCE', 'UNPLANNED_MAINTENANCE', 'READY', 'READY_OPTIMIZING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "encryption_info",
            "replication_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in encryption_info (list)
        _items = []
        if self.encryption_info:
            for _item_encryption_info in self.encryption_info:
                if _item_encryption_info:
                    _items.append(_item_encryption_info.to_dict())
            _dict['encryptionInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "encryptionInfo": [EncryptionInfo.from_dict(_item) for _item in obj["encryptionInfo"]] if obj.get("encryptionInfo") is not None else None,
            "replicationState": obj.get("replicationState")
        })
        return _obj



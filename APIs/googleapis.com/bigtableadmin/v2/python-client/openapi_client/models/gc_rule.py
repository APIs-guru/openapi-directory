# coding: utf-8

"""
    Cloud Bigtable Admin API

    Administer your Cloud Bigtable tables and instances.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GcRule(BaseModel):
    """
    Rule for determining which cells to delete during garbage collection.
    """ # noqa: E501
    intersection: Optional[Intersection] = None
    max_age: Optional[StrictStr] = Field(default=None, description="Delete cells in a column older than the given age. Values must be at least one millisecond, and will be truncated to microsecond granularity.", alias="maxAge")
    max_num_versions: Optional[StrictInt] = Field(default=None, description="Delete all cells in a column except the most recent N.", alias="maxNumVersions")
    union: Optional[Union] = None
    __properties: ClassVar[List[str]] = ["intersection", "maxAge", "maxNumVersions", "union"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GcRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of intersection
        if self.intersection:
            _dict['intersection'] = self.intersection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of union
        if self.union:
            _dict['union'] = self.union.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GcRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "intersection": Intersection.from_dict(obj["intersection"]) if obj.get("intersection") is not None else None,
            "maxAge": obj.get("maxAge"),
            "maxNumVersions": obj.get("maxNumVersions"),
            "union": Union.from_dict(obj["union"]) if obj.get("union") is not None else None
        })
        return _obj

from openapi_client.models.intersection import Intersection
from openapi_client.models.union import Union
# TODO: Rewrite to not use raise_errors
GcRule.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    Cloud Bigtable Admin API

    Administer your Cloud Bigtable tables and instances.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class HotTablet(BaseModel):
    """
    A tablet is a defined by a start and end key and is explained in https://cloud.google.com/bigtable/docs/overview#architecture and https://cloud.google.com/bigtable/docs/performance#optimization. A Hot tablet is a tablet that exhibits high average cpu usage during the time interval from start time to end time.
    """ # noqa: E501
    end_key: Optional[StrictStr] = Field(default=None, description="Tablet End Key (inclusive).", alias="endKey")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. The end time of the hot tablet.", alias="endTime")
    name: Optional[StrictStr] = Field(default=None, description="The unique name of the hot tablet. Values are of the form `projects/{project}/instances/{instance}/clusters/{cluster}/hotTablets/[a-zA-Z0-9_-]*`.")
    node_cpu_usage_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. The average CPU usage spent by a node on this tablet over the start_time to end_time time range. The percentage is the amount of CPU used by the node to serve the tablet, from 0% (tablet was not interacted with) to 100% (the node spent all cycles serving the hot tablet).", alias="nodeCpuUsagePercent")
    start_key: Optional[StrictStr] = Field(default=None, description="Tablet Start Key (inclusive).", alias="startKey")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. The start time of the hot tablet.", alias="startTime")
    table_name: Optional[StrictStr] = Field(default=None, description="Name of the table that contains the tablet. Values are of the form `projects/{project}/instances/{instance}/tables/_a-zA-Z0-9*`.", alias="tableName")
    __properties: ClassVar[List[str]] = ["endKey", "endTime", "name", "nodeCpuUsagePercent", "startKey", "startTime", "tableName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HotTablet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "end_time",
            "node_cpu_usage_percent",
            "start_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HotTablet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endKey": obj.get("endKey"),
            "endTime": obj.get("endTime"),
            "name": obj.get("name"),
            "nodeCpuUsagePercent": obj.get("nodeCpuUsagePercent"),
            "startKey": obj.get("startKey"),
            "startTime": obj.get("startTime"),
            "tableName": obj.get("tableName")
        })
        return _obj



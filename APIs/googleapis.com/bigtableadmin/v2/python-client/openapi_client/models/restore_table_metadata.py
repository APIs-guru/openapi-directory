# coding: utf-8

"""
    Cloud Bigtable Admin API

    Administer your Cloud Bigtable tables and instances.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.backup_info import BackupInfo
from openapi_client.models.operation_progress import OperationProgress
from typing import Optional, Set
from typing_extensions import Self

class RestoreTableMetadata(BaseModel):
    """
    Metadata type for the long-running operation returned by RestoreTable.
    """ # noqa: E501
    backup_info: Optional[BackupInfo] = Field(default=None, alias="backupInfo")
    name: Optional[StrictStr] = Field(default=None, description="Name of the table being created and restored to.")
    optimize_table_operation_name: Optional[StrictStr] = Field(default=None, description="If exists, the name of the long-running operation that will be used to track the post-restore optimization process to optimize the performance of the restored table. The metadata type of the long-running operation is OptimizeRestoreTableMetadata. The response type is Empty. This long-running operation may be automatically created by the system if applicable after the RestoreTable long-running operation completes successfully. This operation may not be created if the table is already optimized or the restore was not successful.", alias="optimizeTableOperationName")
    progress: Optional[OperationProgress] = None
    source_type: Optional[StrictStr] = Field(default=None, description="The type of the restore source.", alias="sourceType")
    __properties: ClassVar[List[str]] = ["backupInfo", "name", "optimizeTableOperationName", "progress", "sourceType"]

    @field_validator('source_type')
    def source_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESTORE_SOURCE_TYPE_UNSPECIFIED', 'BACKUP']):
            raise ValueError("must be one of enum values ('RESTORE_SOURCE_TYPE_UNSPECIFIED', 'BACKUP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestoreTableMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of backup_info
        if self.backup_info:
            _dict['backupInfo'] = self.backup_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of progress
        if self.progress:
            _dict['progress'] = self.progress.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestoreTableMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupInfo": BackupInfo.from_dict(obj["backupInfo"]) if obj.get("backupInfo") is not None else None,
            "name": obj.get("name"),
            "optimizeTableOperationName": obj.get("optimizeTableOperationName"),
            "progress": OperationProgress.from_dict(obj["progress"]) if obj.get("progress") is not None else None,
            "sourceType": obj.get("sourceType")
        })
        return _obj



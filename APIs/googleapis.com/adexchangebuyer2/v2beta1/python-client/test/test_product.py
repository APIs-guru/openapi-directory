# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.product import Product

class TestProduct(unittest.TestCase):
    """Product unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Product:
        """Test Product
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Product`
        """
        model = Product()
        if include_optional:
            return Product(
                available_end_time = '',
                available_start_time = '',
                create_time = '',
                creator_contacts = [
                    openapi_client.models.contact_information.ContactInformation(
                        email = '', 
                        name = '', )
                    ],
                display_name = '',
                has_creator_signed_off = True,
                product_id = '',
                product_revision = '',
                publisher_profile_id = '',
                seller = openapi_client.models.seller.Seller(
                    account_id = '', 
                    sub_account_id = '', ),
                syndication_product = 'SYNDICATION_PRODUCT_UNSPECIFIED',
                targeting_criterion = [
                    openapi_client.models.targeting_criteria.TargetingCriteria(
                        exclusions = [
                            openapi_client.models.targeting_value.TargetingValue(
                                creative_size_value = openapi_client.models.creative_size.CreativeSize(
                                    allowed_formats = [
                                        'UNKNOWN'
                                        ], 
                                    companion_sizes = [
                                        openapi_client.models.size.Size(
                                            height = 56, 
                                            width = 56, )
                                        ], 
                                    creative_size_type = 'CREATIVE_SIZE_TYPE_UNSPECIFIED', 
                                    native_template = 'UNKNOWN_NATIVE_TEMPLATE', 
                                    size = openapi_client.models.size.Size(
                                        height = 56, 
                                        width = 56, ), 
                                    skippable_ad_type = 'SKIPPABLE_AD_TYPE_UNSPECIFIED', ), 
                                day_part_targeting_value = openapi_client.models.day_part_targeting.DayPartTargeting(
                                    day_parts = [
                                        openapi_client.models.day_part.DayPart(
                                            day_of_week = 'DAY_OF_WEEK_UNSPECIFIED', 
                                            end_time = openapi_client.models.time_of_day.TimeOfDay(
                                                hours = 56, 
                                                minutes = 56, 
                                                nanos = 56, 
                                                seconds = 56, ), 
                                            start_time = openapi_client.models.time_of_day.TimeOfDay(
                                                hours = 56, 
                                                minutes = 56, 
                                                nanos = 56, 
                                                seconds = 56, ), )
                                        ], 
                                    time_zone_type = 'TIME_ZONE_SOURCE_UNSPECIFIED', ), 
                                long_value = '', 
                                string_value = '', )
                            ], 
                        inclusions = [
                            openapi_client.models.targeting_value.TargetingValue(
                                long_value = '', 
                                string_value = '', )
                            ], 
                        key = '', )
                    ],
                terms = openapi_client.models.deal_terms.DealTerms(
                    branding_type = 'BRANDING_TYPE_UNSPECIFIED', 
                    description = '', 
                    estimated_gross_spend = openapi_client.models.price.Price(
                        amount = openapi_client.models.money.Money(
                            currency_code = '', 
                            nanos = 56, 
                            units = '', ), 
                        pricing_type = 'PRICING_TYPE_UNSPECIFIED', ), 
                    estimated_impressions_per_day = '', 
                    guaranteed_fixed_price_terms = openapi_client.models.guaranteed_fixed_price_terms.GuaranteedFixedPriceTerms(
                        fixed_prices = [
                            openapi_client.models.price_per_buyer.PricePerBuyer(
                                advertiser_ids = [
                                    ''
                                    ], 
                                buyer = openapi_client.models.buyer.Buyer(
                                    account_id = '', ), 
                                price = openapi_client.models.price.Price(
                                    pricing_type = 'PRICING_TYPE_UNSPECIFIED', ), )
                            ], 
                        guaranteed_impressions = '', 
                        guaranteed_looks = '', 
                        impression_cap = '', 
                        minimum_daily_looks = '', 
                        percent_share_of_voice = '', 
                        reservation_type = 'RESERVATION_TYPE_UNSPECIFIED', ), 
                    non_guaranteed_auction_terms = openapi_client.models.non_guaranteed_auction_terms.NonGuaranteedAuctionTerms(
                        auto_optimize_private_auction = True, 
                        reserve_prices_per_buyer = [
                            openapi_client.models.price_per_buyer.PricePerBuyer()
                            ], ), 
                    non_guaranteed_fixed_price_terms = openapi_client.models.non_guaranteed_fixed_price_terms.NonGuaranteedFixedPriceTerms(), 
                    seller_time_zone = '', ),
                update_time = '',
                web_property_code = ''
            )
        else:
            return Product(
        )
        """

    def testProduct(self):
        """Test Product"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

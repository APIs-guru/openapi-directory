# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_non_billable_winning_bids_response import ListNonBillableWinningBidsResponse

class TestListNonBillableWinningBidsResponse(unittest.TestCase):
    """ListNonBillableWinningBidsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListNonBillableWinningBidsResponse:
        """Test ListNonBillableWinningBidsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListNonBillableWinningBidsResponse`
        """
        model = ListNonBillableWinningBidsResponse()
        if include_optional:
            return ListNonBillableWinningBidsResponse(
                next_page_token = '',
                non_billable_winning_bid_status_rows = [
                    openapi_client.models.non_billable_winning_bid_status_row.NonBillableWinningBidStatusRow(
                        bid_count = openapi_client.models.metric_value.MetricValue(
                            value = '', 
                            variance = '', ), 
                        row_dimensions = openapi_client.models.row_dimensions.RowDimensions(
                            publisher_identifier = '', 
                            time_interval = openapi_client.models.time_interval.TimeInterval(
                                end_time = '', 
                                start_time = '', ), ), 
                        status = 'STATUS_UNSPECIFIED', )
                    ]
            )
        else:
            return ListNonBillableWinningBidsResponse(
        )
        """

    def testListNonBillableWinningBidsResponse(self):
        """Test ListNonBillableWinningBidsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

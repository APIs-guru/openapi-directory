# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.serving_context import ServingContext

class TestServingContext(unittest.TestCase):
    """ServingContext unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ServingContext:
        """Test ServingContext
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ServingContext`
        """
        model = ServingContext()
        if include_optional:
            return ServingContext(
                all = 'SIMPLE_CONTEXT',
                app_type = openapi_client.models.app_context.AppContext(
                    app_types = [
                        'NATIVE'
                        ], ),
                auction_type = openapi_client.models.auction_context.AuctionContext(
                    auction_types = [
                        'OPEN_AUCTION'
                        ], ),
                location = openapi_client.models.location_context.LocationContext(
                    geo_criteria_ids = [
                        56
                        ], ),
                platform = openapi_client.models.platform_context.PlatformContext(
                    platforms = [
                        'DESKTOP'
                        ], ),
                security_type = openapi_client.models.security_context.SecurityContext(
                    securities = [
                        'INSECURE'
                        ], )
            )
        else:
            return ServingContext(
        )
        """

    def testServingContext(self):
        """Test ServingContext"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

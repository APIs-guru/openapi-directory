# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_creatives_response import ListCreativesResponse

class TestListCreativesResponse(unittest.TestCase):
    """ListCreativesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListCreativesResponse:
        """Test ListCreativesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListCreativesResponse`
        """
        model = ListCreativesResponse()
        if include_optional:
            return ListCreativesResponse(
                creatives = [
                    openapi_client.models.creative.Creative(
                        account_id = '', 
                        ad_choices_destination_url = '', 
                        ad_technology_providers = openapi_client.models.ad_technology_providers.AdTechnologyProviders(
                            detected_provider_ids = [
                                ''
                                ], 
                            has_unidentified_provider = True, ), 
                        advertiser_name = '', 
                        agency_id = '', 
                        api_update_time = '', 
                        attributes = [
                            'ATTRIBUTE_UNSPECIFIED'
                            ], 
                        click_through_urls = [
                            ''
                            ], 
                        corrections = [
                            openapi_client.models.correction.Correction(
                                contexts = [
                                    openapi_client.models.serving_context.ServingContext(
                                        all = 'SIMPLE_CONTEXT', 
                                        app_type = openapi_client.models.app_context.AppContext(
                                            app_types = [
                                                'NATIVE'
                                                ], ), 
                                        auction_type = openapi_client.models.auction_context.AuctionContext(
                                            auction_types = [
                                                'OPEN_AUCTION'
                                                ], ), 
                                        location = openapi_client.models.location_context.LocationContext(
                                            geo_criteria_ids = [
                                                56
                                                ], ), 
                                        platform = openapi_client.models.platform_context.PlatformContext(
                                            platforms = [
                                                'DESKTOP'
                                                ], ), 
                                        security_type = openapi_client.models.security_context.SecurityContext(
                                            securities = [
                                                'INSECURE'
                                                ], ), )
                                    ], 
                                details = [
                                    ''
                                    ], 
                                type = 'CORRECTION_TYPE_UNSPECIFIED', )
                            ], 
                        creative_id = '', 
                        deals_status = 'STATUS_UNSPECIFIED', 
                        declared_click_through_urls = [
                            ''
                            ], 
                        detected_advertiser_ids = [
                            ''
                            ], 
                        detected_domains = [
                            ''
                            ], 
                        detected_languages = [
                            ''
                            ], 
                        detected_product_categories = [
                            56
                            ], 
                        detected_sensitive_categories = [
                            56
                            ], 
                        html = openapi_client.models.html_content.HtmlContent(
                            height = 56, 
                            snippet = '', 
                            width = 56, ), 
                        impression_tracking_urls = [
                            ''
                            ], 
                        native = openapi_client.models.native_content.NativeContent(
                            advertiser_name = '', 
                            app_icon = openapi_client.models.image.Image(
                                height = 56, 
                                url = '', 
                                width = 56, ), 
                            body = '', 
                            call_to_action = '', 
                            click_link_url = '', 
                            click_tracking_url = '', 
                            headline = '', 
                            image = openapi_client.models.image.Image(
                                height = 56, 
                                url = '', 
                                width = 56, ), 
                            logo = , 
                            price_display_text = '', 
                            star_rating = 1.337, 
                            store_url = '', 
                            video_url = '', ), 
                        open_auction_status = 'STATUS_UNSPECIFIED', 
                        restricted_categories = [
                            'NO_RESTRICTED_CATEGORIES'
                            ], 
                        serving_restrictions = [
                            openapi_client.models.serving_restriction.ServingRestriction(
                                disapproval = openapi_client.models.disapproval.Disapproval(
                                    reason = 'LENGTH_OF_IMAGE_ANIMATION', ), 
                                disapproval_reasons = [
                                    openapi_client.models.disapproval.Disapproval(
                                        reason = 'LENGTH_OF_IMAGE_ANIMATION', )
                                    ], 
                                status = 'STATUS_UNSPECIFIED', )
                            ], 
                        vendor_ids = [
                            56
                            ], 
                        version = 56, 
                        video = openapi_client.models.video_content.VideoContent(
                            video_url = '', 
                            video_vast_xml = '', ), )
                    ],
                next_page_token = ''
            )
        else:
            return ListCreativesResponse(
        )
        """

    def testListCreativesResponse(self):
        """Test ListCreativesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

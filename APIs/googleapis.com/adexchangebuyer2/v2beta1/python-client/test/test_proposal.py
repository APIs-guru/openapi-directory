# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.proposal import Proposal

class TestProposal(unittest.TestCase):
    """Proposal unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Proposal:
        """Test Proposal
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Proposal`
        """
        model = Proposal()
        if include_optional:
            return Proposal(
                billed_buyer = openapi_client.models.buyer.Buyer(
                    account_id = '', ),
                buyer = openapi_client.models.buyer.Buyer(
                    account_id = '', ),
                buyer_contacts = [
                    openapi_client.models.contact_information.ContactInformation(
                        email = '', 
                        name = '', )
                    ],
                buyer_private_data = openapi_client.models.private_data.PrivateData(
                    reference_id = '', ),
                deals = [
                    openapi_client.models.deal.Deal(
                        available_end_time = '', 
                        available_start_time = '', 
                        buyer_private_data = openapi_client.models.private_data.PrivateData(
                            reference_id = '', ), 
                        create_product_id = '', 
                        create_product_revision = '', 
                        create_time = '', 
                        creative_pre_approval_policy = 'CREATIVE_PRE_APPROVAL_POLICY_UNSPECIFIED', 
                        creative_restrictions = openapi_client.models.creative_restrictions.CreativeRestrictions(
                            creative_format = 'CREATIVE_FORMAT_UNSPECIFIED', 
                            creative_specifications = [
                                openapi_client.models.creative_specification.CreativeSpecification(
                                    creative_companion_sizes = [
                                        openapi_client.models.ad_size.AdSize(
                                            height = '', 
                                            size_type = 'SIZE_TYPE_UNSPECIFIED', 
                                            width = '', )
                                        ], 
                                    creative_size = openapi_client.models.ad_size.AdSize(
                                        height = '', 
                                        size_type = 'SIZE_TYPE_UNSPECIFIED', 
                                        width = '', ), )
                                ], 
                            skippable_ad_type = 'SKIPPABLE_AD_TYPE_UNSPECIFIED', ), 
                        creative_safe_frame_compatibility = 'CREATIVE_SAFE_FRAME_COMPATIBILITY_UNSPECIFIED', 
                        deal_id = '', 
                        deal_serving_metadata = openapi_client.models.deal_serving_metadata.DealServingMetadata(
                            deal_pause_status = openapi_client.models.deal_pause_status.DealPauseStatus(
                                buyer_pause_reason = '', 
                                first_paused_by = 'BUYER_SELLER_ROLE_UNSPECIFIED', 
                                has_buyer_paused = True, 
                                has_seller_paused = True, 
                                seller_pause_reason = '', ), ), 
                        deal_terms = openapi_client.models.deal_terms.DealTerms(
                            branding_type = 'BRANDING_TYPE_UNSPECIFIED', 
                            description = '', 
                            estimated_gross_spend = openapi_client.models.price.Price(
                                amount = openapi_client.models.money.Money(
                                    currency_code = '', 
                                    nanos = 56, 
                                    units = '', ), 
                                pricing_type = 'PRICING_TYPE_UNSPECIFIED', ), 
                            estimated_impressions_per_day = '', 
                            guaranteed_fixed_price_terms = openapi_client.models.guaranteed_fixed_price_terms.GuaranteedFixedPriceTerms(
                                fixed_prices = [
                                    openapi_client.models.price_per_buyer.PricePerBuyer(
                                        advertiser_ids = [
                                            ''
                                            ], 
                                        buyer = openapi_client.models.buyer.Buyer(
                                            account_id = '', ), 
                                        price = openapi_client.models.price.Price(
                                            pricing_type = 'PRICING_TYPE_UNSPECIFIED', ), )
                                    ], 
                                guaranteed_impressions = '', 
                                guaranteed_looks = '', 
                                impression_cap = '', 
                                minimum_daily_looks = '', 
                                percent_share_of_voice = '', 
                                reservation_type = 'RESERVATION_TYPE_UNSPECIFIED', ), 
                            non_guaranteed_auction_terms = openapi_client.models.non_guaranteed_auction_terms.NonGuaranteedAuctionTerms(
                                auto_optimize_private_auction = True, 
                                reserve_prices_per_buyer = [
                                    openapi_client.models.price_per_buyer.PricePerBuyer()
                                    ], ), 
                            non_guaranteed_fixed_price_terms = openapi_client.models.non_guaranteed_fixed_price_terms.NonGuaranteedFixedPriceTerms(), 
                            seller_time_zone = '', ), 
                        delivery_control = openapi_client.models.delivery_control.DeliveryControl(
                            creative_blocking_level = 'CREATIVE_BLOCKING_LEVEL_UNSPECIFIED', 
                            delivery_rate_type = 'DELIVERY_RATE_TYPE_UNSPECIFIED', 
                            frequency_caps = [
                                openapi_client.models.frequency_cap.FrequencyCap(
                                    max_impressions = 56, 
                                    num_time_units = 56, 
                                    time_unit_type = 'TIME_UNIT_TYPE_UNSPECIFIED', )
                                ], ), 
                        description = '', 
                        display_name = '', 
                        external_deal_id = '', 
                        is_setup_complete = True, 
                        programmatic_creative_source = 'PROGRAMMATIC_CREATIVE_SOURCE_UNSPECIFIED', 
                        proposal_id = '', 
                        seller_contacts = [
                            openapi_client.models.contact_information.ContactInformation(
                                email = '', 
                                name = '', )
                            ], 
                        syndication_product = 'SYNDICATION_PRODUCT_UNSPECIFIED', 
                        targeting = openapi_client.models.marketplace_targeting.MarketplaceTargeting(
                            geo_targeting = openapi_client.models.criteria_targeting.CriteriaTargeting(
                                excluded_criteria_ids = [
                                    ''
                                    ], 
                                targeted_criteria_ids = [
                                    ''
                                    ], ), 
                            inventory_size_targeting = openapi_client.models.inventory_size_targeting.InventorySizeTargeting(
                                excluded_inventory_sizes = [
                                    
                                    ], 
                                targeted_inventory_sizes = [
                                    
                                    ], ), 
                            placement_targeting = openapi_client.models.placement_targeting.PlacementTargeting(
                                mobile_application_targeting = openapi_client.models.mobile_application_targeting.MobileApplicationTargeting(
                                    first_party_targeting = openapi_client.models.first_party_mobile_application_targeting.FirstPartyMobileApplicationTargeting(
                                        excluded_app_ids = [
                                            ''
                                            ], 
                                        targeted_app_ids = [
                                            ''
                                            ], ), ), 
                                url_targeting = openapi_client.models.url_targeting.UrlTargeting(
                                    excluded_urls = [
                                        ''
                                        ], 
                                    targeted_urls = [
                                        ''
                                        ], ), ), 
                            technology_targeting = openapi_client.models.technology_targeting.TechnologyTargeting(
                                device_capability_targeting = openapi_client.models.criteria_targeting.CriteriaTargeting(), 
                                device_category_targeting = , 
                                operating_system_targeting = openapi_client.models.operating_system_targeting.OperatingSystemTargeting(
                                    operating_system_criteria = , 
                                    operating_system_version_criteria = , ), ), 
                            video_targeting = openapi_client.models.video_targeting.VideoTargeting(
                                excluded_position_types = [
                                    'POSITION_TYPE_UNSPECIFIED'
                                    ], 
                                targeted_position_types = [
                                    'POSITION_TYPE_UNSPECIFIED'
                                    ], ), ), 
                        targeting_criterion = [
                            openapi_client.models.targeting_criteria.TargetingCriteria(
                                exclusions = [
                                    openapi_client.models.targeting_value.TargetingValue(
                                        creative_size_value = openapi_client.models.creative_size.CreativeSize(
                                            allowed_formats = [
                                                'UNKNOWN'
                                                ], 
                                            companion_sizes = [
                                                openapi_client.models.size.Size(
                                                    height = 56, 
                                                    width = 56, )
                                                ], 
                                            creative_size_type = 'CREATIVE_SIZE_TYPE_UNSPECIFIED', 
                                            native_template = 'UNKNOWN_NATIVE_TEMPLATE', 
                                            size = openapi_client.models.size.Size(
                                                height = 56, 
                                                width = 56, ), 
                                            skippable_ad_type = 'SKIPPABLE_AD_TYPE_UNSPECIFIED', ), 
                                        day_part_targeting_value = openapi_client.models.day_part_targeting.DayPartTargeting(
                                            day_parts = [
                                                openapi_client.models.day_part.DayPart(
                                                    day_of_week = 'DAY_OF_WEEK_UNSPECIFIED', 
                                                    end_time = openapi_client.models.time_of_day.TimeOfDay(
                                                        hours = 56, 
                                                        minutes = 56, 
                                                        nanos = 56, 
                                                        seconds = 56, ), 
                                                    start_time = openapi_client.models.time_of_day.TimeOfDay(
                                                        hours = 56, 
                                                        minutes = 56, 
                                                        nanos = 56, 
                                                        seconds = 56, ), )
                                                ], 
                                            time_zone_type = 'TIME_ZONE_SOURCE_UNSPECIFIED', ), 
                                        long_value = '', 
                                        string_value = '', )
                                    ], 
                                inclusions = [
                                    openapi_client.models.targeting_value.TargetingValue(
                                        long_value = '', 
                                        string_value = '', )
                                    ], 
                                key = '', )
                            ], 
                        update_time = '', 
                        web_property_code = '', )
                    ],
                display_name = '',
                is_renegotiating = True,
                is_setup_complete = True,
                last_updater_or_commentor_role = 'BUYER_SELLER_ROLE_UNSPECIFIED',
                notes = [
                    openapi_client.models.note.Note(
                        create_time = '', 
                        creator_role = 'BUYER_SELLER_ROLE_UNSPECIFIED', 
                        note = '', 
                        note_id = '', 
                        proposal_revision = '', )
                    ],
                originator_role = 'BUYER_SELLER_ROLE_UNSPECIFIED',
                private_auction_id = '',
                proposal_id = '',
                proposal_revision = '',
                proposal_state = 'PROPOSAL_STATE_UNSPECIFIED',
                seller = openapi_client.models.seller.Seller(
                    account_id = '', 
                    sub_account_id = '', ),
                seller_contacts = [
                    openapi_client.models.contact_information.ContactInformation(
                        email = '', 
                        name = '', )
                    ],
                terms_and_conditions = '',
                update_time = ''
            )
        else:
            return Proposal(
        )
        """

    def testProposal(self):
        """Test Proposal"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

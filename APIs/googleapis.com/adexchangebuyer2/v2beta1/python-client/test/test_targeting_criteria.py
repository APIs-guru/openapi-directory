# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.targeting_criteria import TargetingCriteria

class TestTargetingCriteria(unittest.TestCase):
    """TargetingCriteria unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TargetingCriteria:
        """Test TargetingCriteria
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TargetingCriteria`
        """
        model = TargetingCriteria()
        if include_optional:
            return TargetingCriteria(
                exclusions = [
                    openapi_client.models.targeting_value.TargetingValue(
                        creative_size_value = openapi_client.models.creative_size.CreativeSize(
                            allowed_formats = [
                                'UNKNOWN'
                                ], 
                            companion_sizes = [
                                openapi_client.models.size.Size(
                                    height = 56, 
                                    width = 56, )
                                ], 
                            creative_size_type = 'CREATIVE_SIZE_TYPE_UNSPECIFIED', 
                            native_template = 'UNKNOWN_NATIVE_TEMPLATE', 
                            size = openapi_client.models.size.Size(
                                height = 56, 
                                width = 56, ), 
                            skippable_ad_type = 'SKIPPABLE_AD_TYPE_UNSPECIFIED', ), 
                        day_part_targeting_value = openapi_client.models.day_part_targeting.DayPartTargeting(
                            day_parts = [
                                openapi_client.models.day_part.DayPart(
                                    day_of_week = 'DAY_OF_WEEK_UNSPECIFIED', 
                                    end_time = openapi_client.models.time_of_day.TimeOfDay(
                                        hours = 56, 
                                        minutes = 56, 
                                        nanos = 56, 
                                        seconds = 56, ), 
                                    start_time = openapi_client.models.time_of_day.TimeOfDay(
                                        hours = 56, 
                                        minutes = 56, 
                                        nanos = 56, 
                                        seconds = 56, ), )
                                ], 
                            time_zone_type = 'TIME_ZONE_SOURCE_UNSPECIFIED', ), 
                        long_value = '', 
                        string_value = '', )
                    ],
                inclusions = [
                    openapi_client.models.targeting_value.TargetingValue(
                        creative_size_value = openapi_client.models.creative_size.CreativeSize(
                            allowed_formats = [
                                'UNKNOWN'
                                ], 
                            companion_sizes = [
                                openapi_client.models.size.Size(
                                    height = 56, 
                                    width = 56, )
                                ], 
                            creative_size_type = 'CREATIVE_SIZE_TYPE_UNSPECIFIED', 
                            native_template = 'UNKNOWN_NATIVE_TEMPLATE', 
                            size = openapi_client.models.size.Size(
                                height = 56, 
                                width = 56, ), 
                            skippable_ad_type = 'SKIPPABLE_AD_TYPE_UNSPECIFIED', ), 
                        day_part_targeting_value = openapi_client.models.day_part_targeting.DayPartTargeting(
                            day_parts = [
                                openapi_client.models.day_part.DayPart(
                                    day_of_week = 'DAY_OF_WEEK_UNSPECIFIED', 
                                    end_time = openapi_client.models.time_of_day.TimeOfDay(
                                        hours = 56, 
                                        minutes = 56, 
                                        nanos = 56, 
                                        seconds = 56, ), 
                                    start_time = openapi_client.models.time_of_day.TimeOfDay(
                                        hours = 56, 
                                        minutes = 56, 
                                        nanos = 56, 
                                        seconds = 56, ), )
                                ], 
                            time_zone_type = 'TIME_ZONE_SOURCE_UNSPECIFIED', ), 
                        long_value = '', 
                        string_value = '', )
                    ],
                key = ''
            )
        else:
            return TargetingCriteria(
        )
        """

    def testTargetingCriteria(self):
        """Test TargetingCriteria"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

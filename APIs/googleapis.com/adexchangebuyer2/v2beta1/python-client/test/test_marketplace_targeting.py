# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.marketplace_targeting import MarketplaceTargeting

class TestMarketplaceTargeting(unittest.TestCase):
    """MarketplaceTargeting unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MarketplaceTargeting:
        """Test MarketplaceTargeting
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MarketplaceTargeting`
        """
        model = MarketplaceTargeting()
        if include_optional:
            return MarketplaceTargeting(
                geo_targeting = openapi_client.models.criteria_targeting.CriteriaTargeting(
                    excluded_criteria_ids = [
                        ''
                        ], 
                    targeted_criteria_ids = [
                        ''
                        ], ),
                inventory_size_targeting = openapi_client.models.inventory_size_targeting.InventorySizeTargeting(
                    excluded_inventory_sizes = [
                        openapi_client.models.ad_size.AdSize(
                            height = '', 
                            size_type = 'SIZE_TYPE_UNSPECIFIED', 
                            width = '', )
                        ], 
                    targeted_inventory_sizes = [
                        openapi_client.models.ad_size.AdSize(
                            height = '', 
                            size_type = 'SIZE_TYPE_UNSPECIFIED', 
                            width = '', )
                        ], ),
                placement_targeting = openapi_client.models.placement_targeting.PlacementTargeting(
                    mobile_application_targeting = openapi_client.models.mobile_application_targeting.MobileApplicationTargeting(
                        first_party_targeting = openapi_client.models.first_party_mobile_application_targeting.FirstPartyMobileApplicationTargeting(
                            excluded_app_ids = [
                                ''
                                ], 
                            targeted_app_ids = [
                                ''
                                ], ), ), 
                    url_targeting = openapi_client.models.url_targeting.UrlTargeting(
                        excluded_urls = [
                            ''
                            ], 
                        targeted_urls = [
                            ''
                            ], ), ),
                technology_targeting = openapi_client.models.technology_targeting.TechnologyTargeting(
                    device_capability_targeting = openapi_client.models.criteria_targeting.CriteriaTargeting(
                        excluded_criteria_ids = [
                            ''
                            ], 
                        targeted_criteria_ids = [
                            ''
                            ], ), 
                    device_category_targeting = openapi_client.models.criteria_targeting.CriteriaTargeting(), 
                    operating_system_targeting = openapi_client.models.operating_system_targeting.OperatingSystemTargeting(
                        operating_system_criteria = , 
                        operating_system_version_criteria = , ), ),
                video_targeting = openapi_client.models.video_targeting.VideoTargeting(
                    excluded_position_types = [
                        'POSITION_TYPE_UNSPECIFIED'
                        ], 
                    targeted_position_types = [
                        'POSITION_TYPE_UNSPECIFIED'
                        ], )
            )
        else:
            return MarketplaceTargeting(
        )
        """

    def testMarketplaceTargeting(self):
        """Test MarketplaceTargeting"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

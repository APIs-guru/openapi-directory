# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.deal_terms import DealTerms

class TestDealTerms(unittest.TestCase):
    """DealTerms unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DealTerms:
        """Test DealTerms
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DealTerms`
        """
        model = DealTerms()
        if include_optional:
            return DealTerms(
                branding_type = 'BRANDING_TYPE_UNSPECIFIED',
                description = '',
                estimated_gross_spend = openapi_client.models.price.Price(
                    amount = openapi_client.models.money.Money(
                        currency_code = '', 
                        nanos = 56, 
                        units = '', ), 
                    pricing_type = 'PRICING_TYPE_UNSPECIFIED', ),
                estimated_impressions_per_day = '',
                guaranteed_fixed_price_terms = openapi_client.models.guaranteed_fixed_price_terms.GuaranteedFixedPriceTerms(
                    fixed_prices = [
                        openapi_client.models.price_per_buyer.PricePerBuyer(
                            advertiser_ids = [
                                ''
                                ], 
                            buyer = openapi_client.models.buyer.Buyer(
                                account_id = '', ), 
                            price = openapi_client.models.price.Price(
                                amount = openapi_client.models.money.Money(
                                    currency_code = '', 
                                    nanos = 56, 
                                    units = '', ), 
                                pricing_type = 'PRICING_TYPE_UNSPECIFIED', ), )
                        ], 
                    guaranteed_impressions = '', 
                    guaranteed_looks = '', 
                    impression_cap = '', 
                    minimum_daily_looks = '', 
                    percent_share_of_voice = '', 
                    reservation_type = 'RESERVATION_TYPE_UNSPECIFIED', ),
                non_guaranteed_auction_terms = openapi_client.models.non_guaranteed_auction_terms.NonGuaranteedAuctionTerms(
                    auto_optimize_private_auction = True, 
                    reserve_prices_per_buyer = [
                        openapi_client.models.price_per_buyer.PricePerBuyer(
                            advertiser_ids = [
                                ''
                                ], 
                            buyer = openapi_client.models.buyer.Buyer(
                                account_id = '', ), 
                            price = openapi_client.models.price.Price(
                                amount = openapi_client.models.money.Money(
                                    currency_code = '', 
                                    nanos = 56, 
                                    units = '', ), 
                                pricing_type = 'PRICING_TYPE_UNSPECIFIED', ), )
                        ], ),
                non_guaranteed_fixed_price_terms = openapi_client.models.non_guaranteed_fixed_price_terms.NonGuaranteedFixedPriceTerms(
                    fixed_prices = [
                        openapi_client.models.price_per_buyer.PricePerBuyer(
                            advertiser_ids = [
                                ''
                                ], 
                            buyer = openapi_client.models.buyer.Buyer(
                                account_id = '', ), 
                            price = openapi_client.models.price.Price(
                                amount = openapi_client.models.money.Money(
                                    currency_code = '', 
                                    nanos = 56, 
                                    units = '', ), 
                                pricing_type = 'PRICING_TYPE_UNSPECIFIED', ), )
                        ], ),
                seller_time_zone = ''
            )
        else:
            return DealTerms(
        )
        """

    def testDealTerms(self):
        """Test DealTerms"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

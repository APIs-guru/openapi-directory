# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.metric_value import MetricValue
from openapi_client.models.row_dimensions import RowDimensions
from typing import Optional, Set
from typing_extensions import Self

class BidMetricsRow(BaseModel):
    """
    The set of metrics that are measured in numbers of bids, representing how many bids with the specified dimension values were considered eligible at each stage of the bidding funnel;
    """ # noqa: E501
    bids: Optional[MetricValue] = None
    bids_in_auction: Optional[MetricValue] = Field(default=None, alias="bidsInAuction")
    billed_impressions: Optional[MetricValue] = Field(default=None, alias="billedImpressions")
    impressions_won: Optional[MetricValue] = Field(default=None, alias="impressionsWon")
    measurable_impressions: Optional[MetricValue] = Field(default=None, alias="measurableImpressions")
    reached_queries: Optional[MetricValue] = Field(default=None, alias="reachedQueries")
    row_dimensions: Optional[RowDimensions] = Field(default=None, alias="rowDimensions")
    viewable_impressions: Optional[MetricValue] = Field(default=None, alias="viewableImpressions")
    __properties: ClassVar[List[str]] = ["bids", "bidsInAuction", "billedImpressions", "impressionsWon", "measurableImpressions", "reachedQueries", "rowDimensions", "viewableImpressions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BidMetricsRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bids
        if self.bids:
            _dict['bids'] = self.bids.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bids_in_auction
        if self.bids_in_auction:
            _dict['bidsInAuction'] = self.bids_in_auction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billed_impressions
        if self.billed_impressions:
            _dict['billedImpressions'] = self.billed_impressions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of impressions_won
        if self.impressions_won:
            _dict['impressionsWon'] = self.impressions_won.to_dict()
        # override the default output from pydantic by calling `to_dict()` of measurable_impressions
        if self.measurable_impressions:
            _dict['measurableImpressions'] = self.measurable_impressions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reached_queries
        if self.reached_queries:
            _dict['reachedQueries'] = self.reached_queries.to_dict()
        # override the default output from pydantic by calling `to_dict()` of row_dimensions
        if self.row_dimensions:
            _dict['rowDimensions'] = self.row_dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of viewable_impressions
        if self.viewable_impressions:
            _dict['viewableImpressions'] = self.viewable_impressions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BidMetricsRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bids": MetricValue.from_dict(obj["bids"]) if obj.get("bids") is not None else None,
            "bidsInAuction": MetricValue.from_dict(obj["bidsInAuction"]) if obj.get("bidsInAuction") is not None else None,
            "billedImpressions": MetricValue.from_dict(obj["billedImpressions"]) if obj.get("billedImpressions") is not None else None,
            "impressionsWon": MetricValue.from_dict(obj["impressionsWon"]) if obj.get("impressionsWon") is not None else None,
            "measurableImpressions": MetricValue.from_dict(obj["measurableImpressions"]) if obj.get("measurableImpressions") is not None else None,
            "reachedQueries": MetricValue.from_dict(obj["reachedQueries"]) if obj.get("reachedQueries") is not None else None,
            "rowDimensions": RowDimensions.from_dict(obj["rowDimensions"]) if obj.get("rowDimensions") is not None else None,
            "viewableImpressions": MetricValue.from_dict(obj["viewableImpressions"]) if obj.get("viewableImpressions") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.size import Size
from typing import Optional, Set
from typing_extensions import Self

class CreativeSize(BaseModel):
    """
    Specifies the size of the creative.
    """ # noqa: E501
    allowed_formats: Optional[List[StrictStr]] = Field(default=None, description="What formats are allowed by the publisher. If this repeated field is empty then all formats are allowed. For example, if this field contains AllowedFormatType.AUDIO then the publisher only allows an audio ad (without any video).", alias="allowedFormats")
    companion_sizes: Optional[List[Size]] = Field(default=None, description="For video creatives specifies the sizes of companion ads (if present). Companion sizes may be filled in only when creative_size_type = VIDEO", alias="companionSizes")
    creative_size_type: Optional[StrictStr] = Field(default=None, description="The creative size type.", alias="creativeSizeType")
    native_template: Optional[StrictStr] = Field(default=None, description="Output only. The native template for this creative. It will have a value only if creative_size_type = CreativeSizeType.NATIVE.", alias="nativeTemplate")
    size: Optional[Size] = None
    skippable_ad_type: Optional[StrictStr] = Field(default=None, description="The type of skippable ad for this creative. It will have a value only if creative_size_type = CreativeSizeType.VIDEO.", alias="skippableAdType")
    __properties: ClassVar[List[str]] = ["allowedFormats", "companionSizes", "creativeSizeType", "nativeTemplate", "size", "skippableAdType"]

    @field_validator('allowed_formats')
    def allowed_formats_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['UNKNOWN', 'AUDIO']):
                raise ValueError("each list item must be one of ('UNKNOWN', 'AUDIO')")
        return value

    @field_validator('creative_size_type')
    def creative_size_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREATIVE_SIZE_TYPE_UNSPECIFIED', 'REGULAR', 'INTERSTITIAL', 'VIDEO', 'NATIVE']):
            raise ValueError("must be one of enum values ('CREATIVE_SIZE_TYPE_UNSPECIFIED', 'REGULAR', 'INTERSTITIAL', 'VIDEO', 'NATIVE')")
        return value

    @field_validator('native_template')
    def native_template_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_NATIVE_TEMPLATE', 'NATIVE_CONTENT_AD', 'NATIVE_APP_INSTALL_AD', 'NATIVE_VIDEO_CONTENT_AD', 'NATIVE_VIDEO_APP_INSTALL_AD']):
            raise ValueError("must be one of enum values ('UNKNOWN_NATIVE_TEMPLATE', 'NATIVE_CONTENT_AD', 'NATIVE_APP_INSTALL_AD', 'NATIVE_VIDEO_CONTENT_AD', 'NATIVE_VIDEO_APP_INSTALL_AD')")
        return value

    @field_validator('skippable_ad_type')
    def skippable_ad_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SKIPPABLE_AD_TYPE_UNSPECIFIED', 'GENERIC', 'INSTREAM_SELECT', 'NOT_SKIPPABLE']):
            raise ValueError("must be one of enum values ('SKIPPABLE_AD_TYPE_UNSPECIFIED', 'GENERIC', 'INSTREAM_SELECT', 'NOT_SKIPPABLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreativeSize from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in companion_sizes (list)
        _items = []
        if self.companion_sizes:
            for _item_companion_sizes in self.companion_sizes:
                if _item_companion_sizes:
                    _items.append(_item_companion_sizes.to_dict())
            _dict['companionSizes'] = _items
        # override the default output from pydantic by calling `to_dict()` of size
        if self.size:
            _dict['size'] = self.size.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreativeSize from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedFormats": obj.get("allowedFormats"),
            "companionSizes": [Size.from_dict(_item) for _item in obj["companionSizes"]] if obj.get("companionSizes") is not None else None,
            "creativeSizeType": obj.get("creativeSizeType"),
            "nativeTemplate": obj.get("nativeTemplate"),
            "size": Size.from_dict(obj["size"]) if obj.get("size") is not None else None,
            "skippableAdType": obj.get("skippableAdType")
        })
        return _obj



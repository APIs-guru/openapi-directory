# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VideoTargeting(BaseModel):
    """
    Represents targeting information about video.
    """ # noqa: E501
    excluded_position_types: Optional[List[StrictStr]] = Field(default=None, description="A list of video positions to be excluded. Position types can either be included or excluded (XOR).", alias="excludedPositionTypes")
    targeted_position_types: Optional[List[StrictStr]] = Field(default=None, description="A list of video positions to be included. When the included list is present, the excluded list must be empty. When the excluded list is present, the included list must be empty.", alias="targetedPositionTypes")
    __properties: ClassVar[List[str]] = ["excludedPositionTypes", "targetedPositionTypes"]

    @field_validator('excluded_position_types')
    def excluded_position_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['POSITION_TYPE_UNSPECIFIED', 'PREROLL', 'MIDROLL', 'POSTROLL']):
                raise ValueError("each list item must be one of ('POSITION_TYPE_UNSPECIFIED', 'PREROLL', 'MIDROLL', 'POSTROLL')")
        return value

    @field_validator('targeted_position_types')
    def targeted_position_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['POSITION_TYPE_UNSPECIFIED', 'PREROLL', 'MIDROLL', 'POSTROLL']):
                raise ValueError("each list item must be one of ('POSITION_TYPE_UNSPECIFIED', 'PREROLL', 'MIDROLL', 'POSTROLL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VideoTargeting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VideoTargeting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "excludedPositionTypes": obj.get("excludedPositionTypes"),
            "targetedPositionTypes": obj.get("targetedPositionTypes")
        })
        return _obj



# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.disapproval import Disapproval
from openapi_client.models.serving_context import ServingContext
from typing import Optional, Set
from typing_extensions import Self

class ServingRestriction(BaseModel):
    """
    Output only. A representation of the status of an ad in a specific context. A context here relates to where something ultimately serves (for example, a user or publisher geo, a platform, an HTTPS versus HTTP request, or the type of auction).
    """ # noqa: E501
    contexts: Optional[List[ServingContext]] = Field(default=None, description="The contexts for the restriction.")
    disapproval: Optional[Disapproval] = None
    disapproval_reasons: Optional[List[Disapproval]] = Field(default=None, description="Any disapprovals bound to this restriction. Only present if status=DISAPPROVED. Can be used to filter the response of the creatives.list method. Deprecated; use disapproval field instead.", alias="disapprovalReasons")
    status: Optional[StrictStr] = Field(default=None, description="The status of the creative in this context (for example, it has been explicitly disapproved or is pending review).")
    __properties: ClassVar[List[str]] = ["contexts", "disapproval", "disapprovalReasons", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATUS_UNSPECIFIED', 'DISAPPROVAL', 'PENDING_REVIEW']):
            raise ValueError("must be one of enum values ('STATUS_UNSPECIFIED', 'DISAPPROVAL', 'PENDING_REVIEW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServingRestriction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contexts (list)
        _items = []
        if self.contexts:
            for _item_contexts in self.contexts:
                if _item_contexts:
                    _items.append(_item_contexts.to_dict())
            _dict['contexts'] = _items
        # override the default output from pydantic by calling `to_dict()` of disapproval
        if self.disapproval:
            _dict['disapproval'] = self.disapproval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in disapproval_reasons (list)
        _items = []
        if self.disapproval_reasons:
            for _item_disapproval_reasons in self.disapproval_reasons:
                if _item_disapproval_reasons:
                    _items.append(_item_disapproval_reasons.to_dict())
            _dict['disapprovalReasons'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServingRestriction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contexts": [ServingContext.from_dict(_item) for _item in obj["contexts"]] if obj.get("contexts") is not None else None,
            "disapproval": Disapproval.from_dict(obj["disapproval"]) if obj.get("disapproval") is not None else None,
            "disapprovalReasons": [Disapproval.from_dict(_item) for _item in obj["disapprovalReasons"]] if obj.get("disapprovalReasons") is not None else None,
            "status": obj.get("status")
        })
        return _obj



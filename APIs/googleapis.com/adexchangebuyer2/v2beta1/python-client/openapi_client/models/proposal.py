# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.buyer import Buyer
from openapi_client.models.contact_information import ContactInformation
from openapi_client.models.deal import Deal
from openapi_client.models.note import Note
from openapi_client.models.private_data import PrivateData
from openapi_client.models.seller import Seller
from typing import Optional, Set
from typing_extensions import Self

class Proposal(BaseModel):
    """
    Represents a proposal in the Marketplace. A proposal is the unit of negotiation between a seller and a buyer and contains deals which are served. Note: You can't update, create, or otherwise modify Private Auction deals through the API. Fields are updatable unless noted otherwise.
    """ # noqa: E501
    billed_buyer: Optional[Buyer] = Field(default=None, alias="billedBuyer")
    buyer: Optional[Buyer] = None
    buyer_contacts: Optional[List[ContactInformation]] = Field(default=None, description="Contact information for the buyer.", alias="buyerContacts")
    buyer_private_data: Optional[PrivateData] = Field(default=None, alias="buyerPrivateData")
    deals: Optional[List[Deal]] = Field(default=None, description="The deals associated with this proposal. For Private Auction proposals (whose deals have NonGuaranteedAuctionTerms), there will only be one deal.")
    display_name: Optional[StrictStr] = Field(default=None, description="The name for the proposal.", alias="displayName")
    is_renegotiating: Optional[StrictBool] = Field(default=None, description="Output only. True if the proposal is being renegotiated.", alias="isRenegotiating")
    is_setup_complete: Optional[StrictBool] = Field(default=None, description="Output only. True, if the buyside inventory setup is complete for this proposal.", alias="isSetupComplete")
    last_updater_or_commentor_role: Optional[StrictStr] = Field(default=None, description="Output only. The role of the last user that either updated the proposal or left a comment.", alias="lastUpdaterOrCommentorRole")
    notes: Optional[List[Note]] = Field(default=None, description="Output only. The notes associated with this proposal.")
    originator_role: Optional[StrictStr] = Field(default=None, description="Output only. Indicates whether the buyer/seller created the proposal.", alias="originatorRole")
    private_auction_id: Optional[StrictStr] = Field(default=None, description="Output only. Private auction ID if this proposal is a private auction proposal.", alias="privateAuctionId")
    proposal_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique ID of the proposal.", alias="proposalId")
    proposal_revision: Optional[StrictStr] = Field(default=None, description="Output only. The revision number for the proposal. Each update to the proposal or the deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.", alias="proposalRevision")
    proposal_state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the proposal.", alias="proposalState")
    seller: Optional[Seller] = None
    seller_contacts: Optional[List[ContactInformation]] = Field(default=None, description="Output only. Contact information for the seller.", alias="sellerContacts")
    terms_and_conditions: Optional[StrictStr] = Field(default=None, description="Output only. The terms and conditions set by the publisher for this proposal.", alias="termsAndConditions")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the proposal was last revised.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["billedBuyer", "buyer", "buyerContacts", "buyerPrivateData", "deals", "displayName", "isRenegotiating", "isSetupComplete", "lastUpdaterOrCommentorRole", "notes", "originatorRole", "privateAuctionId", "proposalId", "proposalRevision", "proposalState", "seller", "sellerContacts", "termsAndConditions", "updateTime"]

    @field_validator('last_updater_or_commentor_role')
    def last_updater_or_commentor_role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BUYER_SELLER_ROLE_UNSPECIFIED', 'BUYER', 'SELLER']):
            raise ValueError("must be one of enum values ('BUYER_SELLER_ROLE_UNSPECIFIED', 'BUYER', 'SELLER')")
        return value

    @field_validator('originator_role')
    def originator_role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BUYER_SELLER_ROLE_UNSPECIFIED', 'BUYER', 'SELLER']):
            raise ValueError("must be one of enum values ('BUYER_SELLER_ROLE_UNSPECIFIED', 'BUYER', 'SELLER')")
        return value

    @field_validator('proposal_state')
    def proposal_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROPOSAL_STATE_UNSPECIFIED', 'PROPOSED', 'BUYER_ACCEPTED', 'SELLER_ACCEPTED', 'CANCELED', 'FINALIZED']):
            raise ValueError("must be one of enum values ('PROPOSAL_STATE_UNSPECIFIED', 'PROPOSED', 'BUYER_ACCEPTED', 'SELLER_ACCEPTED', 'CANCELED', 'FINALIZED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Proposal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "is_renegotiating",
            "is_setup_complete",
            "last_updater_or_commentor_role",
            "notes",
            "originator_role",
            "private_auction_id",
            "proposal_id",
            "proposal_revision",
            "proposal_state",
            "seller_contacts",
            "terms_and_conditions",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billed_buyer
        if self.billed_buyer:
            _dict['billedBuyer'] = self.billed_buyer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of buyer
        if self.buyer:
            _dict['buyer'] = self.buyer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in buyer_contacts (list)
        _items = []
        if self.buyer_contacts:
            for _item_buyer_contacts in self.buyer_contacts:
                if _item_buyer_contacts:
                    _items.append(_item_buyer_contacts.to_dict())
            _dict['buyerContacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of buyer_private_data
        if self.buyer_private_data:
            _dict['buyerPrivateData'] = self.buyer_private_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in deals (list)
        _items = []
        if self.deals:
            for _item_deals in self.deals:
                if _item_deals:
                    _items.append(_item_deals.to_dict())
            _dict['deals'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in notes (list)
        _items = []
        if self.notes:
            for _item_notes in self.notes:
                if _item_notes:
                    _items.append(_item_notes.to_dict())
            _dict['notes'] = _items
        # override the default output from pydantic by calling `to_dict()` of seller
        if self.seller:
            _dict['seller'] = self.seller.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in seller_contacts (list)
        _items = []
        if self.seller_contacts:
            for _item_seller_contacts in self.seller_contacts:
                if _item_seller_contacts:
                    _items.append(_item_seller_contacts.to_dict())
            _dict['sellerContacts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Proposal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billedBuyer": Buyer.from_dict(obj["billedBuyer"]) if obj.get("billedBuyer") is not None else None,
            "buyer": Buyer.from_dict(obj["buyer"]) if obj.get("buyer") is not None else None,
            "buyerContacts": [ContactInformation.from_dict(_item) for _item in obj["buyerContacts"]] if obj.get("buyerContacts") is not None else None,
            "buyerPrivateData": PrivateData.from_dict(obj["buyerPrivateData"]) if obj.get("buyerPrivateData") is not None else None,
            "deals": [Deal.from_dict(_item) for _item in obj["deals"]] if obj.get("deals") is not None else None,
            "displayName": obj.get("displayName"),
            "isRenegotiating": obj.get("isRenegotiating"),
            "isSetupComplete": obj.get("isSetupComplete"),
            "lastUpdaterOrCommentorRole": obj.get("lastUpdaterOrCommentorRole"),
            "notes": [Note.from_dict(_item) for _item in obj["notes"]] if obj.get("notes") is not None else None,
            "originatorRole": obj.get("originatorRole"),
            "privateAuctionId": obj.get("privateAuctionId"),
            "proposalId": obj.get("proposalId"),
            "proposalRevision": obj.get("proposalRevision"),
            "proposalState": obj.get("proposalState"),
            "seller": Seller.from_dict(obj["seller"]) if obj.get("seller") is not None else None,
            "sellerContacts": [ContactInformation.from_dict(_item) for _item in obj["sellerContacts"]] if obj.get("sellerContacts") is not None else None,
            "termsAndConditions": obj.get("termsAndConditions"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



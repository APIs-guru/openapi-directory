# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.metric_value import MetricValue
from openapi_client.models.row_dimensions import RowDimensions
from typing import Optional, Set
from typing_extensions import Self

class BidResponseWithoutBidsStatusRow(BaseModel):
    """
    The number of impressions with the specified dimension values that were considered to have no applicable bids, as described by the specified status.
    """ # noqa: E501
    impression_count: Optional[MetricValue] = Field(default=None, alias="impressionCount")
    row_dimensions: Optional[RowDimensions] = Field(default=None, alias="rowDimensions")
    status: Optional[StrictStr] = Field(default=None, description="The status specifying why the bid responses were considered to have no applicable bids.")
    __properties: ClassVar[List[str]] = ["impressionCount", "rowDimensions", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATUS_UNSPECIFIED', 'RESPONSES_WITHOUT_BIDS', 'RESPONSES_WITHOUT_BIDS_FOR_ACCOUNT', 'RESPONSES_WITHOUT_BIDS_FOR_DEAL']):
            raise ValueError("must be one of enum values ('STATUS_UNSPECIFIED', 'RESPONSES_WITHOUT_BIDS', 'RESPONSES_WITHOUT_BIDS_FOR_ACCOUNT', 'RESPONSES_WITHOUT_BIDS_FOR_DEAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BidResponseWithoutBidsStatusRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of impression_count
        if self.impression_count:
            _dict['impressionCount'] = self.impression_count.to_dict()
        # override the default output from pydantic by calling `to_dict()` of row_dimensions
        if self.row_dimensions:
            _dict['rowDimensions'] = self.row_dimensions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BidResponseWithoutBidsStatusRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "impressionCount": MetricValue.from_dict(obj["impressionCount"]) if obj.get("impressionCount") is not None else None,
            "rowDimensions": RowDimensions.from_dict(obj["rowDimensions"]) if obj.get("rowDimensions") is not None else None,
            "status": obj.get("status")
        })
        return _obj



# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_context import AppContext
from openapi_client.models.auction_context import AuctionContext
from openapi_client.models.location_context import LocationContext
from openapi_client.models.platform_context import PlatformContext
from openapi_client.models.security_context import SecurityContext
from typing import Optional, Set
from typing_extensions import Self

class ServingContext(BaseModel):
    """
    The serving context for this restriction.
    """ # noqa: E501
    all: Optional[StrictStr] = Field(default=None, description="Matches all contexts.")
    app_type: Optional[AppContext] = Field(default=None, alias="appType")
    auction_type: Optional[AuctionContext] = Field(default=None, alias="auctionType")
    location: Optional[LocationContext] = None
    platform: Optional[PlatformContext] = None
    security_type: Optional[SecurityContext] = Field(default=None, alias="securityType")
    __properties: ClassVar[List[str]] = ["all", "appType", "auctionType", "location", "platform", "securityType"]

    @field_validator('all')
    def all_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SIMPLE_CONTEXT']):
            raise ValueError("must be one of enum values ('SIMPLE_CONTEXT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServingContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_type
        if self.app_type:
            _dict['appType'] = self.app_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auction_type
        if self.auction_type:
            _dict['auctionType'] = self.auction_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of platform
        if self.platform:
            _dict['platform'] = self.platform.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_type
        if self.security_type:
            _dict['securityType'] = self.security_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServingContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "all": obj.get("all"),
            "appType": AppContext.from_dict(obj["appType"]) if obj.get("appType") is not None else None,
            "auctionType": AuctionContext.from_dict(obj["auctionType"]) if obj.get("auctionType") is not None else None,
            "location": LocationContext.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "platform": PlatformContext.from_dict(obj["platform"]) if obj.get("platform") is not None else None,
            "securityType": SecurityContext.from_dict(obj["securityType"]) if obj.get("securityType") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.metric_value import MetricValue
from openapi_client.models.row_dimensions import RowDimensions
from typing import Optional, Set
from typing_extensions import Self

class ImpressionMetricsRow(BaseModel):
    """
    The set of metrics that are measured in numbers of impressions, representing how many impressions with the specified dimension values were considered eligible at each stage of the bidding funnel.
    """ # noqa: E501
    available_impressions: Optional[MetricValue] = Field(default=None, alias="availableImpressions")
    bid_requests: Optional[MetricValue] = Field(default=None, alias="bidRequests")
    inventory_matches: Optional[MetricValue] = Field(default=None, alias="inventoryMatches")
    responses_with_bids: Optional[MetricValue] = Field(default=None, alias="responsesWithBids")
    row_dimensions: Optional[RowDimensions] = Field(default=None, alias="rowDimensions")
    successful_responses: Optional[MetricValue] = Field(default=None, alias="successfulResponses")
    __properties: ClassVar[List[str]] = ["availableImpressions", "bidRequests", "inventoryMatches", "responsesWithBids", "rowDimensions", "successfulResponses"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImpressionMetricsRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of available_impressions
        if self.available_impressions:
            _dict['availableImpressions'] = self.available_impressions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bid_requests
        if self.bid_requests:
            _dict['bidRequests'] = self.bid_requests.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inventory_matches
        if self.inventory_matches:
            _dict['inventoryMatches'] = self.inventory_matches.to_dict()
        # override the default output from pydantic by calling `to_dict()` of responses_with_bids
        if self.responses_with_bids:
            _dict['responsesWithBids'] = self.responses_with_bids.to_dict()
        # override the default output from pydantic by calling `to_dict()` of row_dimensions
        if self.row_dimensions:
            _dict['rowDimensions'] = self.row_dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of successful_responses
        if self.successful_responses:
            _dict['successfulResponses'] = self.successful_responses.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImpressionMetricsRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableImpressions": MetricValue.from_dict(obj["availableImpressions"]) if obj.get("availableImpressions") is not None else None,
            "bidRequests": MetricValue.from_dict(obj["bidRequests"]) if obj.get("bidRequests") is not None else None,
            "inventoryMatches": MetricValue.from_dict(obj["inventoryMatches"]) if obj.get("inventoryMatches") is not None else None,
            "responsesWithBids": MetricValue.from_dict(obj["responsesWithBids"]) if obj.get("responsesWithBids") is not None else None,
            "rowDimensions": RowDimensions.from_dict(obj["rowDimensions"]) if obj.get("rowDimensions") is not None else None,
            "successfulResponses": MetricValue.from_dict(obj["successfulResponses"]) if obj.get("successfulResponses") is not None else None
        })
        return _obj



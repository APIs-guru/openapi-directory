# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.price_per_buyer import PricePerBuyer
from typing import Optional, Set
from typing_extensions import Self

class GuaranteedFixedPriceTerms(BaseModel):
    """
    Terms for Programmatic Guaranteed Deals.
    """ # noqa: E501
    fixed_prices: Optional[List[PricePerBuyer]] = Field(default=None, description="Fixed price for the specified buyer.", alias="fixedPrices")
    guaranteed_impressions: Optional[StrictStr] = Field(default=None, description="Guaranteed impressions as a percentage. This is the percentage of guaranteed looks that the buyer is guaranteeing to buy.", alias="guaranteedImpressions")
    guaranteed_looks: Optional[StrictStr] = Field(default=None, description="Count of guaranteed looks. Required for deal, optional for product. For CPD deals, buyer changes to guaranteed_looks will be ignored.", alias="guaranteedLooks")
    impression_cap: Optional[StrictStr] = Field(default=None, description="The lifetime impression cap for CPM sponsorship deals. The deal will stop serving when the cap is reached.", alias="impressionCap")
    minimum_daily_looks: Optional[StrictStr] = Field(default=None, description="Daily minimum looks for CPD deal types. For CPD deals, buyer should negotiate on this field instead of guaranteed_looks.", alias="minimumDailyLooks")
    percent_share_of_voice: Optional[StrictStr] = Field(default=None, description="For sponsorship deals, this is the percentage of the seller's eligible impressions that the deal will serve until the cap is reached.", alias="percentShareOfVoice")
    reservation_type: Optional[StrictStr] = Field(default=None, description="The reservation type for a Programmatic Guaranteed deal. This indicates whether the number of impressions is fixed, or a percent of available impressions. If not specified, the default reservation type is STANDARD.", alias="reservationType")
    __properties: ClassVar[List[str]] = ["fixedPrices", "guaranteedImpressions", "guaranteedLooks", "impressionCap", "minimumDailyLooks", "percentShareOfVoice", "reservationType"]

    @field_validator('reservation_type')
    def reservation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESERVATION_TYPE_UNSPECIFIED', 'STANDARD', 'SPONSORSHIP']):
            raise ValueError("must be one of enum values ('RESERVATION_TYPE_UNSPECIFIED', 'STANDARD', 'SPONSORSHIP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GuaranteedFixedPriceTerms from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fixed_prices (list)
        _items = []
        if self.fixed_prices:
            for _item_fixed_prices in self.fixed_prices:
                if _item_fixed_prices:
                    _items.append(_item_fixed_prices.to_dict())
            _dict['fixedPrices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GuaranteedFixedPriceTerms from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fixedPrices": [PricePerBuyer.from_dict(_item) for _item in obj["fixedPrices"]] if obj.get("fixedPrices") is not None else None,
            "guaranteedImpressions": obj.get("guaranteedImpressions"),
            "guaranteedLooks": obj.get("guaranteedLooks"),
            "impressionCap": obj.get("impressionCap"),
            "minimumDailyLooks": obj.get("minimumDailyLooks"),
            "percentShareOfVoice": obj.get("percentShareOfVoice"),
            "reservationType": obj.get("reservationType")
        })
        return _obj



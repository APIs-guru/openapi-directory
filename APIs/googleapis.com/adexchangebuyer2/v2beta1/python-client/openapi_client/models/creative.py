# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ad_technology_providers import AdTechnologyProviders
from openapi_client.models.correction import Correction
from openapi_client.models.html_content import HtmlContent
from openapi_client.models.native_content import NativeContent
from openapi_client.models.serving_restriction import ServingRestriction
from openapi_client.models.video_content import VideoContent
from typing import Optional, Set
from typing_extensions import Self

class Creative(BaseModel):
    """
    A creative and its classification data.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="The account that this creative belongs to. Can be used to filter the response of the creatives.list method.", alias="accountId")
    ad_choices_destination_url: Optional[StrictStr] = Field(default=None, description="The link to AdChoices destination page.", alias="adChoicesDestinationUrl")
    ad_technology_providers: Optional[AdTechnologyProviders] = Field(default=None, alias="adTechnologyProviders")
    advertiser_name: Optional[StrictStr] = Field(default=None, description="The name of the company being advertised in the creative.", alias="advertiserName")
    agency_id: Optional[StrictStr] = Field(default=None, description="The agency ID for this creative.", alias="agencyId")
    api_update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last update timestamp of the creative through the API.", alias="apiUpdateTime")
    attributes: Optional[List[StrictStr]] = Field(default=None, description="All attributes for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method.")
    click_through_urls: Optional[List[StrictStr]] = Field(default=None, description="The set of destination URLs for the creative.", alias="clickThroughUrls")
    corrections: Optional[List[Correction]] = Field(default=None, description="Output only. Shows any corrections that were applied to this creative.")
    creative_id: Optional[StrictStr] = Field(default=None, description="The buyer-defined creative ID of this creative. Can be used to filter the response of the creatives.list method.", alias="creativeId")
    deals_status: Optional[StrictStr] = Field(default=None, description="Output only. The top-level deals status of this creative. If disapproved, an entry for 'auctionType=DIRECT_DEALS' (or 'ALL') in serving_restrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of the creatives.list method.", alias="dealsStatus")
    declared_click_through_urls: Optional[List[StrictStr]] = Field(default=None, description="The set of declared destination URLs for the creative.", alias="declaredClickThroughUrls")
    detected_advertiser_ids: Optional[List[StrictStr]] = Field(default=None, description="Output only. Detected advertiser IDs, if any.", alias="detectedAdvertiserIds")
    detected_domains: Optional[List[StrictStr]] = Field(default=None, description="Output only. The detected domains for this creative.", alias="detectedDomains")
    detected_languages: Optional[List[StrictStr]] = Field(default=None, description="Output only. The detected languages for this creative. The order is arbitrary. The codes are 2 or 5 characters and are documented at https://developers.google.com/adwords/api/docs/appendix/languagecodes.", alias="detectedLanguages")
    detected_product_categories: Optional[List[StrictInt]] = Field(default=None, description="Output only. Detected product categories, if any. See the ad-product-categories.txt file in the technical documentation for a list of IDs.", alias="detectedProductCategories")
    detected_sensitive_categories: Optional[List[StrictInt]] = Field(default=None, description="Output only. Detected sensitive categories, if any. See the ad-sensitive-categories.txt file in the technical documentation for a list of IDs. You should use these IDs along with the excluded-sensitive-category field in the bid request to filter your bids.", alias="detectedSensitiveCategories")
    html: Optional[HtmlContent] = None
    impression_tracking_urls: Optional[List[StrictStr]] = Field(default=None, description="The set of URLs to be called to record an impression.", alias="impressionTrackingUrls")
    native: Optional[NativeContent] = None
    open_auction_status: Optional[StrictStr] = Field(default=None, description="Output only. The top-level open auction status of this creative. If disapproved, an entry for 'auctionType = OPEN_AUCTION' (or 'ALL') in serving_restrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of the creatives.list method.", alias="openAuctionStatus")
    restricted_categories: Optional[List[StrictStr]] = Field(default=None, description="All restricted categories for the ads that may be shown from this creative.", alias="restrictedCategories")
    serving_restrictions: Optional[List[ServingRestriction]] = Field(default=None, description="Output only. The granular status of this ad in specific contexts. A context here relates to where something ultimately serves (for example, a physical location, a platform, an HTTPS versus HTTP request, or the type of auction).", alias="servingRestrictions")
    vendor_ids: Optional[List[StrictInt]] = Field(default=None, description="All vendor IDs for the ads that may be shown from this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for possible values.", alias="vendorIds")
    version: Optional[StrictInt] = Field(default=None, description="Output only. The version of this creative.")
    video: Optional[VideoContent] = None
    __properties: ClassVar[List[str]] = ["accountId", "adChoicesDestinationUrl", "adTechnologyProviders", "advertiserName", "agencyId", "apiUpdateTime", "attributes", "clickThroughUrls", "corrections", "creativeId", "dealsStatus", "declaredClickThroughUrls", "detectedAdvertiserIds", "detectedDomains", "detectedLanguages", "detectedProductCategories", "detectedSensitiveCategories", "html", "impressionTrackingUrls", "native", "openAuctionStatus", "restrictedCategories", "servingRestrictions", "vendorIds", "version", "video"]

    @field_validator('attributes')
    def attributes_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ATTRIBUTE_UNSPECIFIED', 'IMAGE_RICH_MEDIA', 'ADOBE_FLASH_FLV', 'IS_TAGGED', 'IS_COOKIE_TARGETED', 'IS_USER_INTEREST_TARGETED', 'EXPANDING_DIRECTION_NONE', 'EXPANDING_DIRECTION_UP', 'EXPANDING_DIRECTION_DOWN', 'EXPANDING_DIRECTION_LEFT', 'EXPANDING_DIRECTION_RIGHT', 'EXPANDING_DIRECTION_UP_LEFT', 'EXPANDING_DIRECTION_UP_RIGHT', 'EXPANDING_DIRECTION_DOWN_LEFT', 'EXPANDING_DIRECTION_DOWN_RIGHT', 'CREATIVE_TYPE_HTML', 'CREATIVE_TYPE_VAST_VIDEO', 'EXPANDING_DIRECTION_UP_OR_DOWN', 'EXPANDING_DIRECTION_LEFT_OR_RIGHT', 'EXPANDING_DIRECTION_ANY_DIAGONAL', 'EXPANDING_ACTION_ROLLOVER_TO_EXPAND', 'INSTREAM_VAST_VIDEO_TYPE_VPAID_FLASH', 'RICH_MEDIA_CAPABILITY_TYPE_MRAID', 'RICH_MEDIA_CAPABILITY_TYPE_FLASH', 'RICH_MEDIA_CAPABILITY_TYPE_HTML5', 'SKIPPABLE_INSTREAM_VIDEO', 'RICH_MEDIA_CAPABILITY_TYPE_SSL', 'RICH_MEDIA_CAPABILITY_TYPE_NON_SSL', 'RICH_MEDIA_CAPABILITY_TYPE_INTERSTITIAL', 'NON_SKIPPABLE_INSTREAM_VIDEO', 'NATIVE_ELIGIBILITY_ELIGIBLE', 'NON_VPAID', 'NATIVE_ELIGIBILITY_NOT_ELIGIBLE', 'ANY_INTERSTITIAL', 'NON_INTERSTITIAL', 'IN_BANNER_VIDEO', 'RENDERING_SIZELESS_ADX', 'OMSDK_1_0', 'RENDERING_PLAYABLE']):
                raise ValueError("each list item must be one of ('ATTRIBUTE_UNSPECIFIED', 'IMAGE_RICH_MEDIA', 'ADOBE_FLASH_FLV', 'IS_TAGGED', 'IS_COOKIE_TARGETED', 'IS_USER_INTEREST_TARGETED', 'EXPANDING_DIRECTION_NONE', 'EXPANDING_DIRECTION_UP', 'EXPANDING_DIRECTION_DOWN', 'EXPANDING_DIRECTION_LEFT', 'EXPANDING_DIRECTION_RIGHT', 'EXPANDING_DIRECTION_UP_LEFT', 'EXPANDING_DIRECTION_UP_RIGHT', 'EXPANDING_DIRECTION_DOWN_LEFT', 'EXPANDING_DIRECTION_DOWN_RIGHT', 'CREATIVE_TYPE_HTML', 'CREATIVE_TYPE_VAST_VIDEO', 'EXPANDING_DIRECTION_UP_OR_DOWN', 'EXPANDING_DIRECTION_LEFT_OR_RIGHT', 'EXPANDING_DIRECTION_ANY_DIAGONAL', 'EXPANDING_ACTION_ROLLOVER_TO_EXPAND', 'INSTREAM_VAST_VIDEO_TYPE_VPAID_FLASH', 'RICH_MEDIA_CAPABILITY_TYPE_MRAID', 'RICH_MEDIA_CAPABILITY_TYPE_FLASH', 'RICH_MEDIA_CAPABILITY_TYPE_HTML5', 'SKIPPABLE_INSTREAM_VIDEO', 'RICH_MEDIA_CAPABILITY_TYPE_SSL', 'RICH_MEDIA_CAPABILITY_TYPE_NON_SSL', 'RICH_MEDIA_CAPABILITY_TYPE_INTERSTITIAL', 'NON_SKIPPABLE_INSTREAM_VIDEO', 'NATIVE_ELIGIBILITY_ELIGIBLE', 'NON_VPAID', 'NATIVE_ELIGIBILITY_NOT_ELIGIBLE', 'ANY_INTERSTITIAL', 'NON_INTERSTITIAL', 'IN_BANNER_VIDEO', 'RENDERING_SIZELESS_ADX', 'OMSDK_1_0', 'RENDERING_PLAYABLE')")
        return value

    @field_validator('deals_status')
    def deals_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATUS_UNSPECIFIED', 'NOT_CHECKED', 'CONDITIONALLY_APPROVED', 'APPROVED', 'DISAPPROVED', 'PENDING_REVIEW', 'STATUS_TYPE_UNSPECIFIED']):
            raise ValueError("must be one of enum values ('STATUS_UNSPECIFIED', 'NOT_CHECKED', 'CONDITIONALLY_APPROVED', 'APPROVED', 'DISAPPROVED', 'PENDING_REVIEW', 'STATUS_TYPE_UNSPECIFIED')")
        return value

    @field_validator('open_auction_status')
    def open_auction_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATUS_UNSPECIFIED', 'NOT_CHECKED', 'CONDITIONALLY_APPROVED', 'APPROVED', 'DISAPPROVED', 'PENDING_REVIEW', 'STATUS_TYPE_UNSPECIFIED']):
            raise ValueError("must be one of enum values ('STATUS_UNSPECIFIED', 'NOT_CHECKED', 'CONDITIONALLY_APPROVED', 'APPROVED', 'DISAPPROVED', 'PENDING_REVIEW', 'STATUS_TYPE_UNSPECIFIED')")
        return value

    @field_validator('restricted_categories')
    def restricted_categories_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['NO_RESTRICTED_CATEGORIES', 'ALCOHOL']):
                raise ValueError("each list item must be one of ('NO_RESTRICTED_CATEGORIES', 'ALCOHOL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Creative from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ad_technology_providers
        if self.ad_technology_providers:
            _dict['adTechnologyProviders'] = self.ad_technology_providers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in corrections (list)
        _items = []
        if self.corrections:
            for _item_corrections in self.corrections:
                if _item_corrections:
                    _items.append(_item_corrections.to_dict())
            _dict['corrections'] = _items
        # override the default output from pydantic by calling `to_dict()` of html
        if self.html:
            _dict['html'] = self.html.to_dict()
        # override the default output from pydantic by calling `to_dict()` of native
        if self.native:
            _dict['native'] = self.native.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in serving_restrictions (list)
        _items = []
        if self.serving_restrictions:
            for _item_serving_restrictions in self.serving_restrictions:
                if _item_serving_restrictions:
                    _items.append(_item_serving_restrictions.to_dict())
            _dict['servingRestrictions'] = _items
        # override the default output from pydantic by calling `to_dict()` of video
        if self.video:
            _dict['video'] = self.video.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Creative from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "adChoicesDestinationUrl": obj.get("adChoicesDestinationUrl"),
            "adTechnologyProviders": AdTechnologyProviders.from_dict(obj["adTechnologyProviders"]) if obj.get("adTechnologyProviders") is not None else None,
            "advertiserName": obj.get("advertiserName"),
            "agencyId": obj.get("agencyId"),
            "apiUpdateTime": obj.get("apiUpdateTime"),
            "attributes": obj.get("attributes"),
            "clickThroughUrls": obj.get("clickThroughUrls"),
            "corrections": [Correction.from_dict(_item) for _item in obj["corrections"]] if obj.get("corrections") is not None else None,
            "creativeId": obj.get("creativeId"),
            "dealsStatus": obj.get("dealsStatus"),
            "declaredClickThroughUrls": obj.get("declaredClickThroughUrls"),
            "detectedAdvertiserIds": obj.get("detectedAdvertiserIds"),
            "detectedDomains": obj.get("detectedDomains"),
            "detectedLanguages": obj.get("detectedLanguages"),
            "detectedProductCategories": obj.get("detectedProductCategories"),
            "detectedSensitiveCategories": obj.get("detectedSensitiveCategories"),
            "html": HtmlContent.from_dict(obj["html"]) if obj.get("html") is not None else None,
            "impressionTrackingUrls": obj.get("impressionTrackingUrls"),
            "native": NativeContent.from_dict(obj["native"]) if obj.get("native") is not None else None,
            "openAuctionStatus": obj.get("openAuctionStatus"),
            "restrictedCategories": obj.get("restrictedCategories"),
            "servingRestrictions": [ServingRestriction.from_dict(_item) for _item in obj["servingRestrictions"]] if obj.get("servingRestrictions") is not None else None,
            "vendorIds": obj.get("vendorIds"),
            "version": obj.get("version"),
            "video": VideoContent.from_dict(obj["video"]) if obj.get("video") is not None else None
        })
        return _obj



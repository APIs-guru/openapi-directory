# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.absolute_date_range import AbsoluteDateRange
from openapi_client.models.realtime_time_range import RealtimeTimeRange
from openapi_client.models.relative_date_range import RelativeDateRange
from typing import Optional, Set
from typing_extensions import Self

class FilterSet(BaseModel):
    """
    A set of filters that is applied to a request for data. Within a filter set, an AND operation is performed across the filters represented by each field. An OR operation is performed across the filters represented by the multiple values of a repeated field, for example, \"format=VIDEO AND deal_id=12 AND (seller_network_id=34 OR seller_network_id=56)\".
    """ # noqa: E501
    absolute_date_range: Optional[AbsoluteDateRange] = Field(default=None, alias="absoluteDateRange")
    breakdown_dimensions: Optional[List[StrictStr]] = Field(default=None, description="The set of dimensions along which to break down the response; may be empty. If multiple dimensions are requested, the breakdown is along the Cartesian product of the requested dimensions.", alias="breakdownDimensions")
    creative_id: Optional[StrictStr] = Field(default=None, description="The ID of the creative on which to filter; optional. This field may be set only for a filter set that accesses account-level troubleshooting data, for example, one whose name matches the `bidders/*/accounts/*/filterSets/*` pattern.", alias="creativeId")
    deal_id: Optional[StrictStr] = Field(default=None, description="The ID of the deal on which to filter; optional. This field may be set only for a filter set that accesses account-level troubleshooting data, for example, one whose name matches the `bidders/*/accounts/*/filterSets/*` pattern.", alias="dealId")
    environment: Optional[StrictStr] = Field(default=None, description="The environment on which to filter; optional.")
    format: Optional[StrictStr] = Field(default=None, description="Creative format bidded on or allowed to bid on, can be empty.")
    formats: Optional[List[StrictStr]] = Field(default=None, description="Creative formats bidded on or allowed to bid on, can be empty. Although this field is a list, it can only be populated with a single item. A HTTP 400 bad request error will be returned in the response if you specify multiple items.")
    name: Optional[StrictStr] = Field(default=None, description="A user-defined name of the filter set. Filter set names must be unique globally and match one of the patterns: - `bidders/*/filterSets/*` (for accessing bidder-level troubleshooting data) - `bidders/*/accounts/*/filterSets/*` (for accessing account-level troubleshooting data) This field is required in create operations.")
    platforms: Optional[List[StrictStr]] = Field(default=None, description="The list of platforms on which to filter; may be empty. The filters represented by multiple platforms are ORed together (for example, if non-empty, results must match any one of the platforms).")
    publisher_identifiers: Optional[List[StrictStr]] = Field(default=None, description="For Open Bidding partners only. The list of publisher identifiers on which to filter; may be empty. The filters represented by multiple publisher identifiers are ORed together.", alias="publisherIdentifiers")
    realtime_time_range: Optional[RealtimeTimeRange] = Field(default=None, alias="realtimeTimeRange")
    relative_date_range: Optional[RelativeDateRange] = Field(default=None, alias="relativeDateRange")
    seller_network_ids: Optional[List[StrictInt]] = Field(default=None, description="For Authorized Buyers only. The list of IDs of the seller (publisher) networks on which to filter; may be empty. The filters represented by multiple seller network IDs are ORed together (for example, if non-empty, results must match any one of the publisher networks). See [seller-network-ids](https://developers.google.com/authorized-buyers/rtb/downloads/seller-network-ids) file for the set of existing seller network IDs.", alias="sellerNetworkIds")
    time_series_granularity: Optional[StrictStr] = Field(default=None, description="The granularity of time intervals if a time series breakdown is preferred; optional.", alias="timeSeriesGranularity")
    __properties: ClassVar[List[str]] = ["absoluteDateRange", "breakdownDimensions", "creativeId", "dealId", "environment", "format", "formats", "name", "platforms", "publisherIdentifiers", "realtimeTimeRange", "relativeDateRange", "sellerNetworkIds", "timeSeriesGranularity"]

    @field_validator('breakdown_dimensions')
    def breakdown_dimensions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['BREAKDOWN_DIMENSION_UNSPECIFIED', 'PUBLISHER_IDENTIFIER']):
                raise ValueError("each list item must be one of ('BREAKDOWN_DIMENSION_UNSPECIFIED', 'PUBLISHER_IDENTIFIER')")
        return value

    @field_validator('environment')
    def environment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENVIRONMENT_UNSPECIFIED', 'WEB', 'APP']):
            raise ValueError("must be one of enum values ('ENVIRONMENT_UNSPECIFIED', 'WEB', 'APP')")
        return value

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FORMAT_UNSPECIFIED', 'NATIVE_DISPLAY', 'NATIVE_VIDEO', 'NON_NATIVE_DISPLAY', 'NON_NATIVE_VIDEO']):
            raise ValueError("must be one of enum values ('FORMAT_UNSPECIFIED', 'NATIVE_DISPLAY', 'NATIVE_VIDEO', 'NON_NATIVE_DISPLAY', 'NON_NATIVE_VIDEO')")
        return value

    @field_validator('formats')
    def formats_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['FORMAT_UNSPECIFIED', 'NATIVE_DISPLAY', 'NATIVE_VIDEO', 'NON_NATIVE_DISPLAY', 'NON_NATIVE_VIDEO']):
                raise ValueError("each list item must be one of ('FORMAT_UNSPECIFIED', 'NATIVE_DISPLAY', 'NATIVE_VIDEO', 'NON_NATIVE_DISPLAY', 'NON_NATIVE_VIDEO')")
        return value

    @field_validator('platforms')
    def platforms_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['PLATFORM_UNSPECIFIED', 'DESKTOP', 'TABLET', 'MOBILE']):
                raise ValueError("each list item must be one of ('PLATFORM_UNSPECIFIED', 'DESKTOP', 'TABLET', 'MOBILE')")
        return value

    @field_validator('time_series_granularity')
    def time_series_granularity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TIME_SERIES_GRANULARITY_UNSPECIFIED', 'HOURLY', 'DAILY']):
            raise ValueError("must be one of enum values ('TIME_SERIES_GRANULARITY_UNSPECIFIED', 'HOURLY', 'DAILY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilterSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of absolute_date_range
        if self.absolute_date_range:
            _dict['absoluteDateRange'] = self.absolute_date_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of realtime_time_range
        if self.realtime_time_range:
            _dict['realtimeTimeRange'] = self.realtime_time_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of relative_date_range
        if self.relative_date_range:
            _dict['relativeDateRange'] = self.relative_date_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilterSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "absoluteDateRange": AbsoluteDateRange.from_dict(obj["absoluteDateRange"]) if obj.get("absoluteDateRange") is not None else None,
            "breakdownDimensions": obj.get("breakdownDimensions"),
            "creativeId": obj.get("creativeId"),
            "dealId": obj.get("dealId"),
            "environment": obj.get("environment"),
            "format": obj.get("format"),
            "formats": obj.get("formats"),
            "name": obj.get("name"),
            "platforms": obj.get("platforms"),
            "publisherIdentifiers": obj.get("publisherIdentifiers"),
            "realtimeTimeRange": RealtimeTimeRange.from_dict(obj["realtimeTimeRange"]) if obj.get("realtimeTimeRange") is not None else None,
            "relativeDateRange": RelativeDateRange.from_dict(obj["relativeDateRange"]) if obj.get("relativeDateRange") is not None else None,
            "sellerNetworkIds": obj.get("sellerNetworkIds"),
            "timeSeriesGranularity": obj.get("timeSeriesGranularity")
        })
        return _obj



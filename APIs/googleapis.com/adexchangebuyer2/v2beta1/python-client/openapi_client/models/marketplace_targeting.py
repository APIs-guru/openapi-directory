# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.criteria_targeting import CriteriaTargeting
from openapi_client.models.inventory_size_targeting import InventorySizeTargeting
from openapi_client.models.placement_targeting import PlacementTargeting
from openapi_client.models.technology_targeting import TechnologyTargeting
from openapi_client.models.video_targeting import VideoTargeting
from typing import Optional, Set
from typing_extensions import Self

class MarketplaceTargeting(BaseModel):
    """
    Targeting represents different criteria that can be used by advertisers to target ad inventory. For example, they can choose to target ad requests only if the user is in the US. Multiple types of targeting are always applied as a logical AND, unless noted otherwise.
    """ # noqa: E501
    geo_targeting: Optional[CriteriaTargeting] = Field(default=None, alias="geoTargeting")
    inventory_size_targeting: Optional[InventorySizeTargeting] = Field(default=None, alias="inventorySizeTargeting")
    placement_targeting: Optional[PlacementTargeting] = Field(default=None, alias="placementTargeting")
    technology_targeting: Optional[TechnologyTargeting] = Field(default=None, alias="technologyTargeting")
    video_targeting: Optional[VideoTargeting] = Field(default=None, alias="videoTargeting")
    __properties: ClassVar[List[str]] = ["geoTargeting", "inventorySizeTargeting", "placementTargeting", "technologyTargeting", "videoTargeting"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketplaceTargeting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of geo_targeting
        if self.geo_targeting:
            _dict['geoTargeting'] = self.geo_targeting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inventory_size_targeting
        if self.inventory_size_targeting:
            _dict['inventorySizeTargeting'] = self.inventory_size_targeting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of placement_targeting
        if self.placement_targeting:
            _dict['placementTargeting'] = self.placement_targeting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of technology_targeting
        if self.technology_targeting:
            _dict['technologyTargeting'] = self.technology_targeting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_targeting
        if self.video_targeting:
            _dict['videoTargeting'] = self.video_targeting.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketplaceTargeting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "geoTargeting": CriteriaTargeting.from_dict(obj["geoTargeting"]) if obj.get("geoTargeting") is not None else None,
            "inventorySizeTargeting": InventorySizeTargeting.from_dict(obj["inventorySizeTargeting"]) if obj.get("inventorySizeTargeting") is not None else None,
            "placementTargeting": PlacementTargeting.from_dict(obj["placementTargeting"]) if obj.get("placementTargeting") is not None else None,
            "technologyTargeting": TechnologyTargeting.from_dict(obj["technologyTargeting"]) if obj.get("technologyTargeting") is not None else None,
            "videoTargeting": VideoTargeting.from_dict(obj["videoTargeting"]) if obj.get("videoTargeting") is not None else None
        })
        return _obj



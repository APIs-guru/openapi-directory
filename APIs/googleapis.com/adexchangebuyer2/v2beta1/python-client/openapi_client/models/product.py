# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.contact_information import ContactInformation
from openapi_client.models.deal_terms import DealTerms
from openapi_client.models.seller import Seller
from openapi_client.models.targeting_criteria import TargetingCriteria
from typing import Optional, Set
from typing_extensions import Self

class Product(BaseModel):
    """
    A product is a segment of inventory that a seller wants to sell. It is associated with certain terms and targeting information which helps the buyer know more about the inventory.
    """ # noqa: E501
    available_end_time: Optional[StrictStr] = Field(default=None, description="The proposed end time for the deal. The field will be truncated to the order of seconds during serving.", alias="availableEndTime")
    available_start_time: Optional[StrictStr] = Field(default=None, description="Inventory availability dates. The start time will be truncated to seconds during serving. Thus, a field specified as 3:23:34.456 (HH:mm:ss.SSS) will be truncated to 3:23:34 when serving.", alias="availableStartTime")
    create_time: Optional[StrictStr] = Field(default=None, description="Creation time.", alias="createTime")
    creator_contacts: Optional[List[ContactInformation]] = Field(default=None, description="Optional contact information for the creator of this product.", alias="creatorContacts")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name for this product as set by the seller.", alias="displayName")
    has_creator_signed_off: Optional[StrictBool] = Field(default=None, description="If the creator has already signed off on the product, then the buyer can finalize the deal by accepting the product as is. When copying to a proposal, if any of the terms are changed, then auto_finalize is automatically set to false.", alias="hasCreatorSignedOff")
    product_id: Optional[StrictStr] = Field(default=None, description="The unique ID for the product.", alias="productId")
    product_revision: Optional[StrictStr] = Field(default=None, description="The revision number of the product (auto-assigned by Marketplace).", alias="productRevision")
    publisher_profile_id: Optional[StrictStr] = Field(default=None, description="An ID which can be used by the Publisher Profile API to get more information about the seller that created this product.", alias="publisherProfileId")
    seller: Optional[Seller] = None
    syndication_product: Optional[StrictStr] = Field(default=None, description="The syndication product associated with the deal.", alias="syndicationProduct")
    targeting_criterion: Optional[List[TargetingCriteria]] = Field(default=None, description="Targeting that is shared between the buyer and the seller. Each targeting criterion has a specified key and for each key there is a list of inclusion value or exclusion values.", alias="targetingCriterion")
    terms: Optional[DealTerms] = None
    update_time: Optional[StrictStr] = Field(default=None, description="Time of last update.", alias="updateTime")
    web_property_code: Optional[StrictStr] = Field(default=None, description="The web-property code for the seller. This needs to be copied as is when adding a new deal to a proposal.", alias="webPropertyCode")
    __properties: ClassVar[List[str]] = ["availableEndTime", "availableStartTime", "createTime", "creatorContacts", "displayName", "hasCreatorSignedOff", "productId", "productRevision", "publisherProfileId", "seller", "syndicationProduct", "targetingCriterion", "terms", "updateTime", "webPropertyCode"]

    @field_validator('syndication_product')
    def syndication_product_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SYNDICATION_PRODUCT_UNSPECIFIED', 'CONTENT', 'MOBILE', 'VIDEO', 'GAMES']):
            raise ValueError("must be one of enum values ('SYNDICATION_PRODUCT_UNSPECIFIED', 'CONTENT', 'MOBILE', 'VIDEO', 'GAMES')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Product from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in creator_contacts (list)
        _items = []
        if self.creator_contacts:
            for _item_creator_contacts in self.creator_contacts:
                if _item_creator_contacts:
                    _items.append(_item_creator_contacts.to_dict())
            _dict['creatorContacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of seller
        if self.seller:
            _dict['seller'] = self.seller.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in targeting_criterion (list)
        _items = []
        if self.targeting_criterion:
            for _item_targeting_criterion in self.targeting_criterion:
                if _item_targeting_criterion:
                    _items.append(_item_targeting_criterion.to_dict())
            _dict['targetingCriterion'] = _items
        # override the default output from pydantic by calling `to_dict()` of terms
        if self.terms:
            _dict['terms'] = self.terms.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Product from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableEndTime": obj.get("availableEndTime"),
            "availableStartTime": obj.get("availableStartTime"),
            "createTime": obj.get("createTime"),
            "creatorContacts": [ContactInformation.from_dict(_item) for _item in obj["creatorContacts"]] if obj.get("creatorContacts") is not None else None,
            "displayName": obj.get("displayName"),
            "hasCreatorSignedOff": obj.get("hasCreatorSignedOff"),
            "productId": obj.get("productId"),
            "productRevision": obj.get("productRevision"),
            "publisherProfileId": obj.get("publisherProfileId"),
            "seller": Seller.from_dict(obj["seller"]) if obj.get("seller") is not None else None,
            "syndicationProduct": obj.get("syndicationProduct"),
            "targetingCriterion": [TargetingCriteria.from_dict(_item) for _item in obj["targetingCriterion"]] if obj.get("targetingCriterion") is not None else None,
            "terms": DealTerms.from_dict(obj["terms"]) if obj.get("terms") is not None else None,
            "updateTime": obj.get("updateTime"),
            "webPropertyCode": obj.get("webPropertyCode")
        })
        return _obj



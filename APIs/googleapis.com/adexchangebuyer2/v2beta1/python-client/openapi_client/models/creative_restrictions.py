# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.creative_specification import CreativeSpecification
from typing import Optional, Set
from typing_extensions import Self

class CreativeRestrictions(BaseModel):
    """
    Represents creative restrictions associated to Programmatic Guaranteed/ Preferred Deal in Ad Manager. This doesn't apply to Private Auction and AdX Preferred Deals.
    """ # noqa: E501
    creative_format: Optional[StrictStr] = Field(default=None, description="The format of the environment that the creatives will be displayed in.", alias="creativeFormat")
    creative_specifications: Optional[List[CreativeSpecification]] = Field(default=None, alias="creativeSpecifications")
    skippable_ad_type: Optional[StrictStr] = Field(default=None, description="Skippable video ads allow viewers to skip ads after 5 seconds.", alias="skippableAdType")
    __properties: ClassVar[List[str]] = ["creativeFormat", "creativeSpecifications", "skippableAdType"]

    @field_validator('creative_format')
    def creative_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREATIVE_FORMAT_UNSPECIFIED', 'DISPLAY', 'VIDEO']):
            raise ValueError("must be one of enum values ('CREATIVE_FORMAT_UNSPECIFIED', 'DISPLAY', 'VIDEO')")
        return value

    @field_validator('skippable_ad_type')
    def skippable_ad_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SKIPPABLE_AD_TYPE_UNSPECIFIED', 'SKIPPABLE', 'INSTREAM_SELECT', 'NOT_SKIPPABLE']):
            raise ValueError("must be one of enum values ('SKIPPABLE_AD_TYPE_UNSPECIFIED', 'SKIPPABLE', 'INSTREAM_SELECT', 'NOT_SKIPPABLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreativeRestrictions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in creative_specifications (list)
        _items = []
        if self.creative_specifications:
            for _item_creative_specifications in self.creative_specifications:
                if _item_creative_specifications:
                    _items.append(_item_creative_specifications.to_dict())
            _dict['creativeSpecifications'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreativeRestrictions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creativeFormat": obj.get("creativeFormat"),
            "creativeSpecifications": [CreativeSpecification.from_dict(_item) for _item in obj["creativeSpecifications"]] if obj.get("creativeSpecifications") is not None else None,
            "skippableAdType": obj.get("skippableAdType")
        })
        return _obj



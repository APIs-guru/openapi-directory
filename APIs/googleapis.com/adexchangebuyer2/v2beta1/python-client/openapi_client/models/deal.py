# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.contact_information import ContactInformation
from openapi_client.models.creative_restrictions import CreativeRestrictions
from openapi_client.models.deal_serving_metadata import DealServingMetadata
from openapi_client.models.deal_terms import DealTerms
from openapi_client.models.delivery_control import DeliveryControl
from openapi_client.models.marketplace_targeting import MarketplaceTargeting
from openapi_client.models.private_data import PrivateData
from openapi_client.models.targeting_criteria import TargetingCriteria
from typing import Optional, Set
from typing_extensions import Self

class Deal(BaseModel):
    """
    A deal represents a segment of inventory for displaying ads on. A proposal can contain multiple deals. A deal contains the terms and targeting information that is used for serving.
    """ # noqa: E501
    available_end_time: Optional[StrictStr] = Field(default=None, description="Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not required for Private Auction deals or Preferred Deals.", alias="availableEndTime")
    available_start_time: Optional[StrictStr] = Field(default=None, description="Optional. Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (for example, in milliseconds) will be truncated towards the start of time in seconds.", alias="availableStartTime")
    buyer_private_data: Optional[PrivateData] = Field(default=None, alias="buyerPrivateData")
    create_product_id: Optional[StrictStr] = Field(default=None, description="The product ID from which this deal was created. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.", alias="createProductId")
    create_product_revision: Optional[StrictStr] = Field(default=None, description="Optional. Revision number of the product that the deal was created from. If present on create, and the server `product_revision` has advanced since the passed-in `create_product_revision`, an `ABORTED` error will be returned. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.", alias="createProductRevision")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time of the deal creation.", alias="createTime")
    creative_pre_approval_policy: Optional[StrictStr] = Field(default=None, description="Output only. Specifies the creative pre-approval policy.", alias="creativePreApprovalPolicy")
    creative_restrictions: Optional[CreativeRestrictions] = Field(default=None, alias="creativeRestrictions")
    creative_safe_frame_compatibility: Optional[StrictStr] = Field(default=None, description="Output only. Specifies whether the creative is safeFrame compatible.", alias="creativeSafeFrameCompatibility")
    deal_id: Optional[StrictStr] = Field(default=None, description="Output only. A unique deal ID for the deal (server-assigned).", alias="dealId")
    deal_serving_metadata: Optional[DealServingMetadata] = Field(default=None, alias="dealServingMetadata")
    deal_terms: Optional[DealTerms] = Field(default=None, alias="dealTerms")
    delivery_control: Optional[DeliveryControl] = Field(default=None, alias="deliveryControl")
    description: Optional[StrictStr] = Field(default=None, description="Description for the deal terms.")
    display_name: Optional[StrictStr] = Field(default=None, description="The name of the deal.", alias="displayName")
    external_deal_id: Optional[StrictStr] = Field(default=None, description="Output only. The external deal ID assigned to this deal once the deal is finalized. This is the deal ID that shows up in serving/reporting etc.", alias="externalDealId")
    is_setup_complete: Optional[StrictBool] = Field(default=None, description="Output only. True, if the buyside inventory setup is complete for this deal.", alias="isSetupComplete")
    programmatic_creative_source: Optional[StrictStr] = Field(default=None, description="Output only. Specifies the creative source for programmatic deals. PUBLISHER means creative is provided by seller and ADVERTISER means creative is provided by buyer.", alias="programmaticCreativeSource")
    proposal_id: Optional[StrictStr] = Field(default=None, description="Output only. ID of the proposal that this deal is part of.", alias="proposalId")
    seller_contacts: Optional[List[ContactInformation]] = Field(default=None, description="Output only. Seller contact information for the deal.", alias="sellerContacts")
    syndication_product: Optional[StrictStr] = Field(default=None, description="The syndication product associated with the deal. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.", alias="syndicationProduct")
    targeting: Optional[MarketplaceTargeting] = None
    targeting_criterion: Optional[List[TargetingCriteria]] = Field(default=None, description="The shared targeting visible to buyers and sellers. Each shared targeting entity is AND'd together.", alias="targetingCriterion")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the deal was last updated.", alias="updateTime")
    web_property_code: Optional[StrictStr] = Field(default=None, description="The web property code for the seller copied over from the product.", alias="webPropertyCode")
    __properties: ClassVar[List[str]] = ["availableEndTime", "availableStartTime", "buyerPrivateData", "createProductId", "createProductRevision", "createTime", "creativePreApprovalPolicy", "creativeRestrictions", "creativeSafeFrameCompatibility", "dealId", "dealServingMetadata", "dealTerms", "deliveryControl", "description", "displayName", "externalDealId", "isSetupComplete", "programmaticCreativeSource", "proposalId", "sellerContacts", "syndicationProduct", "targeting", "targetingCriterion", "updateTime", "webPropertyCode"]

    @field_validator('creative_pre_approval_policy')
    def creative_pre_approval_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREATIVE_PRE_APPROVAL_POLICY_UNSPECIFIED', 'SELLER_PRE_APPROVAL_REQUIRED', 'SELLER_PRE_APPROVAL_NOT_REQUIRED']):
            raise ValueError("must be one of enum values ('CREATIVE_PRE_APPROVAL_POLICY_UNSPECIFIED', 'SELLER_PRE_APPROVAL_REQUIRED', 'SELLER_PRE_APPROVAL_NOT_REQUIRED')")
        return value

    @field_validator('creative_safe_frame_compatibility')
    def creative_safe_frame_compatibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREATIVE_SAFE_FRAME_COMPATIBILITY_UNSPECIFIED', 'COMPATIBLE', 'INCOMPATIBLE']):
            raise ValueError("must be one of enum values ('CREATIVE_SAFE_FRAME_COMPATIBILITY_UNSPECIFIED', 'COMPATIBLE', 'INCOMPATIBLE')")
        return value

    @field_validator('programmatic_creative_source')
    def programmatic_creative_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROGRAMMATIC_CREATIVE_SOURCE_UNSPECIFIED', 'ADVERTISER', 'PUBLISHER']):
            raise ValueError("must be one of enum values ('PROGRAMMATIC_CREATIVE_SOURCE_UNSPECIFIED', 'ADVERTISER', 'PUBLISHER')")
        return value

    @field_validator('syndication_product')
    def syndication_product_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SYNDICATION_PRODUCT_UNSPECIFIED', 'CONTENT', 'MOBILE', 'VIDEO', 'GAMES']):
            raise ValueError("must be one of enum values ('SYNDICATION_PRODUCT_UNSPECIFIED', 'CONTENT', 'MOBILE', 'VIDEO', 'GAMES')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Deal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "creative_pre_approval_policy",
            "creative_safe_frame_compatibility",
            "deal_id",
            "external_deal_id",
            "is_setup_complete",
            "programmatic_creative_source",
            "proposal_id",
            "seller_contacts",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of buyer_private_data
        if self.buyer_private_data:
            _dict['buyerPrivateData'] = self.buyer_private_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creative_restrictions
        if self.creative_restrictions:
            _dict['creativeRestrictions'] = self.creative_restrictions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deal_serving_metadata
        if self.deal_serving_metadata:
            _dict['dealServingMetadata'] = self.deal_serving_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deal_terms
        if self.deal_terms:
            _dict['dealTerms'] = self.deal_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_control
        if self.delivery_control:
            _dict['deliveryControl'] = self.delivery_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in seller_contacts (list)
        _items = []
        if self.seller_contacts:
            for _item_seller_contacts in self.seller_contacts:
                if _item_seller_contacts:
                    _items.append(_item_seller_contacts.to_dict())
            _dict['sellerContacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of targeting
        if self.targeting:
            _dict['targeting'] = self.targeting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in targeting_criterion (list)
        _items = []
        if self.targeting_criterion:
            for _item_targeting_criterion in self.targeting_criterion:
                if _item_targeting_criterion:
                    _items.append(_item_targeting_criterion.to_dict())
            _dict['targetingCriterion'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Deal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableEndTime": obj.get("availableEndTime"),
            "availableStartTime": obj.get("availableStartTime"),
            "buyerPrivateData": PrivateData.from_dict(obj["buyerPrivateData"]) if obj.get("buyerPrivateData") is not None else None,
            "createProductId": obj.get("createProductId"),
            "createProductRevision": obj.get("createProductRevision"),
            "createTime": obj.get("createTime"),
            "creativePreApprovalPolicy": obj.get("creativePreApprovalPolicy"),
            "creativeRestrictions": CreativeRestrictions.from_dict(obj["creativeRestrictions"]) if obj.get("creativeRestrictions") is not None else None,
            "creativeSafeFrameCompatibility": obj.get("creativeSafeFrameCompatibility"),
            "dealId": obj.get("dealId"),
            "dealServingMetadata": DealServingMetadata.from_dict(obj["dealServingMetadata"]) if obj.get("dealServingMetadata") is not None else None,
            "dealTerms": DealTerms.from_dict(obj["dealTerms"]) if obj.get("dealTerms") is not None else None,
            "deliveryControl": DeliveryControl.from_dict(obj["deliveryControl"]) if obj.get("deliveryControl") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "externalDealId": obj.get("externalDealId"),
            "isSetupComplete": obj.get("isSetupComplete"),
            "programmaticCreativeSource": obj.get("programmaticCreativeSource"),
            "proposalId": obj.get("proposalId"),
            "sellerContacts": [ContactInformation.from_dict(_item) for _item in obj["sellerContacts"]] if obj.get("sellerContacts") is not None else None,
            "syndicationProduct": obj.get("syndicationProduct"),
            "targeting": MarketplaceTargeting.from_dict(obj["targeting"]) if obj.get("targeting") is not None else None,
            "targetingCriterion": [TargetingCriteria.from_dict(_item) for _item in obj["targetingCriterion"]] if obj.get("targetingCriterion") is not None else None,
            "updateTime": obj.get("updateTime"),
            "webPropertyCode": obj.get("webPropertyCode")
        })
        return _obj



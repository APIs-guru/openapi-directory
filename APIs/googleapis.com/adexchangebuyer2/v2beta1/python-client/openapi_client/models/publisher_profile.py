# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.publisher_profile_mobile_application import PublisherProfileMobileApplication
from openapi_client.models.seller import Seller
from typing import Optional, Set
from typing_extensions import Self

class PublisherProfile(BaseModel):
    """
    Represents a publisher profile (https://support.google.com/admanager/answer/6035806) in Marketplace. All fields are read only. All string fields are free-form text entered by the publisher unless noted otherwise.
    """ # noqa: E501
    audience_description: Optional[StrictStr] = Field(default=None, description="Description on the publisher's audience.", alias="audienceDescription")
    buyer_pitch_statement: Optional[StrictStr] = Field(default=None, description="Statement explaining what's unique about publisher's business, and why buyers should partner with the publisher.", alias="buyerPitchStatement")
    direct_deals_contact: Optional[StrictStr] = Field(default=None, description="Contact information for direct reservation deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.", alias="directDealsContact")
    display_name: Optional[StrictStr] = Field(default=None, description="Name of the publisher profile.", alias="displayName")
    domains: Optional[List[StrictStr]] = Field(default=None, description="The list of domains represented in this publisher profile. Empty if this is a parent profile. These are top private domains, meaning that these will not contain a string like \"photos.google.co.uk/123\", but will instead contain \"google.co.uk\".")
    google_plus_url: Optional[StrictStr] = Field(default=None, description="URL to publisher's Google+ page.", alias="googlePlusUrl")
    is_parent: Optional[StrictBool] = Field(default=None, description="Indicates if this profile is the parent profile of the seller. A parent profile represents all the inventory from the seller, as opposed to child profile that is created to brand a portion of inventory. One seller should have only one parent publisher profile, and can have multiple child profiles. Publisher profiles for the same seller will have same value of field google.ads.adexchange.buyer.v2beta1.PublisherProfile.seller. See https://support.google.com/admanager/answer/6035806 for details.", alias="isParent")
    logo_url: Optional[StrictStr] = Field(default=None, description="A Google public URL to the logo for this publisher profile. The logo is stored as a PNG, JPG, or GIF image.", alias="logoUrl")
    media_kit_url: Optional[StrictStr] = Field(default=None, description="URL to additional marketing and sales materials.", alias="mediaKitUrl")
    mobile_apps: Optional[List[PublisherProfileMobileApplication]] = Field(default=None, description="The list of apps represented in this publisher profile. Empty if this is a parent profile.", alias="mobileApps")
    overview: Optional[StrictStr] = Field(default=None, description="Overview of the publisher.")
    programmatic_deals_contact: Optional[StrictStr] = Field(default=None, description="Contact information for programmatic deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.", alias="programmaticDealsContact")
    publisher_profile_id: Optional[StrictStr] = Field(default=None, description="Unique ID for publisher profile.", alias="publisherProfileId")
    rate_card_info_url: Optional[StrictStr] = Field(default=None, description="URL to a publisher rate card.", alias="rateCardInfoUrl")
    sample_page_url: Optional[StrictStr] = Field(default=None, description="URL to a sample content page.", alias="samplePageUrl")
    seller: Optional[Seller] = None
    top_headlines: Optional[List[StrictStr]] = Field(default=None, description="Up to three key metrics and rankings. Max 100 characters each. For example \"#1 Mobile News Site for 20 Straight Months\".", alias="topHeadlines")
    __properties: ClassVar[List[str]] = ["audienceDescription", "buyerPitchStatement", "directDealsContact", "displayName", "domains", "googlePlusUrl", "isParent", "logoUrl", "mediaKitUrl", "mobileApps", "overview", "programmaticDealsContact", "publisherProfileId", "rateCardInfoUrl", "samplePageUrl", "seller", "topHeadlines"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublisherProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in mobile_apps (list)
        _items = []
        if self.mobile_apps:
            for _item_mobile_apps in self.mobile_apps:
                if _item_mobile_apps:
                    _items.append(_item_mobile_apps.to_dict())
            _dict['mobileApps'] = _items
        # override the default output from pydantic by calling `to_dict()` of seller
        if self.seller:
            _dict['seller'] = self.seller.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublisherProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audienceDescription": obj.get("audienceDescription"),
            "buyerPitchStatement": obj.get("buyerPitchStatement"),
            "directDealsContact": obj.get("directDealsContact"),
            "displayName": obj.get("displayName"),
            "domains": obj.get("domains"),
            "googlePlusUrl": obj.get("googlePlusUrl"),
            "isParent": obj.get("isParent"),
            "logoUrl": obj.get("logoUrl"),
            "mediaKitUrl": obj.get("mediaKitUrl"),
            "mobileApps": [PublisherProfileMobileApplication.from_dict(_item) for _item in obj["mobileApps"]] if obj.get("mobileApps") is not None else None,
            "overview": obj.get("overview"),
            "programmaticDealsContact": obj.get("programmaticDealsContact"),
            "publisherProfileId": obj.get("publisherProfileId"),
            "rateCardInfoUrl": obj.get("rateCardInfoUrl"),
            "samplePageUrl": obj.get("samplePageUrl"),
            "seller": Seller.from_dict(obj["seller"]) if obj.get("seller") is not None else None,
            "topHeadlines": obj.get("topHeadlines")
        })
        return _obj



# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.image import Image
from typing import Optional, Set
from typing_extensions import Self

class NativeContent(BaseModel):
    """
    Native content for a creative.
    """ # noqa: E501
    advertiser_name: Optional[StrictStr] = Field(default=None, description="The name of the advertiser or sponsor, to be displayed in the ad creative.", alias="advertiserName")
    app_icon: Optional[Image] = Field(default=None, alias="appIcon")
    body: Optional[StrictStr] = Field(default=None, description="A long description of the ad.")
    call_to_action: Optional[StrictStr] = Field(default=None, description="A label for the button that the user is supposed to click.", alias="callToAction")
    click_link_url: Optional[StrictStr] = Field(default=None, description="The URL that the browser/SDK will load when the user clicks the ad.", alias="clickLinkUrl")
    click_tracking_url: Optional[StrictStr] = Field(default=None, description="The URL to use for click tracking.", alias="clickTrackingUrl")
    headline: Optional[StrictStr] = Field(default=None, description="A short title for the ad.")
    image: Optional[Image] = None
    logo: Optional[Image] = None
    price_display_text: Optional[StrictStr] = Field(default=None, description="The price of the promoted app including currency info.", alias="priceDisplayText")
    star_rating: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The app rating in the app store. Must be in the range [0-5].", alias="starRating")
    store_url: Optional[StrictStr] = Field(default=None, description="The URL to the app store to purchase/download the promoted app.", alias="storeUrl")
    video_url: Optional[StrictStr] = Field(default=None, description="The URL to fetch a native video ad.", alias="videoUrl")
    __properties: ClassVar[List[str]] = ["advertiserName", "appIcon", "body", "callToAction", "clickLinkUrl", "clickTrackingUrl", "headline", "image", "logo", "priceDisplayText", "starRating", "storeUrl", "videoUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NativeContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_icon
        if self.app_icon:
            _dict['appIcon'] = self.app_icon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logo
        if self.logo:
            _dict['logo'] = self.logo.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NativeContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advertiserName": obj.get("advertiserName"),
            "appIcon": Image.from_dict(obj["appIcon"]) if obj.get("appIcon") is not None else None,
            "body": obj.get("body"),
            "callToAction": obj.get("callToAction"),
            "clickLinkUrl": obj.get("clickLinkUrl"),
            "clickTrackingUrl": obj.get("clickTrackingUrl"),
            "headline": obj.get("headline"),
            "image": Image.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "logo": Image.from_dict(obj["logo"]) if obj.get("logo") is not None else None,
            "priceDisplayText": obj.get("priceDisplayText"),
            "starRating": obj.get("starRating"),
            "storeUrl": obj.get("storeUrl"),
            "videoUrl": obj.get("videoUrl")
        })
        return _obj



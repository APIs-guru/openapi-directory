# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.targeting_value import TargetingValue
from typing import Optional, Set
from typing_extensions import Self

class TargetingCriteria(BaseModel):
    """
    Advertisers can target different attributes of an ad slot. For example, they can choose to show ads only if the user is in the U.S. Such targeting criteria can be specified as part of Shared Targeting.
    """ # noqa: E501
    exclusions: Optional[List[TargetingValue]] = Field(default=None, description="The list of values to exclude from targeting. Each value is AND'd together.")
    inclusions: Optional[List[TargetingValue]] = Field(default=None, description="The list of value to include as part of the targeting. Each value is OR'd together.")
    key: Optional[StrictStr] = Field(default=None, description="The key representing the shared targeting criterion. Targeting criteria defined by Google ad servers will begin with GOOG_. Third parties may define their own keys. A list of permissible keys along with the acceptable values will be provided as part of the external documentation.")
    __properties: ClassVar[List[str]] = ["exclusions", "inclusions", "key"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TargetingCriteria from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in exclusions (list)
        _items = []
        if self.exclusions:
            for _item_exclusions in self.exclusions:
                if _item_exclusions:
                    _items.append(_item_exclusions.to_dict())
            _dict['exclusions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inclusions (list)
        _items = []
        if self.inclusions:
            for _item_inclusions in self.inclusions:
                if _item_inclusions:
                    _items.append(_item_inclusions.to_dict())
            _dict['inclusions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TargetingCriteria from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exclusions": [TargetingValue.from_dict(_item) for _item in obj["exclusions"]] if obj.get("exclusions") is not None else None,
            "inclusions": [TargetingValue.from_dict(_item) for _item in obj["inclusions"]] if obj.get("inclusions") is not None else None,
            "key": obj.get("key")
        })
        return _obj



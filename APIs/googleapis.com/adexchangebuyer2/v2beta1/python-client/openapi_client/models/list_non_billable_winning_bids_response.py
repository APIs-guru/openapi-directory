# coding: utf-8

"""
    Ad Exchange Buyer API II

    Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.non_billable_winning_bid_status_row import NonBillableWinningBidStatusRow
from typing import Optional, Set
from typing_extensions import Self

class ListNonBillableWinningBidsResponse(BaseModel):
    """
    Response message for listing all reasons for which a buyer was not billed for a winning bid.
    """ # noqa: E501
    next_page_token: Optional[StrictStr] = Field(default=None, description="A token to retrieve the next page of results. Pass this value in the ListNonBillableWinningBidsRequest.pageToken field in the subsequent call to the nonBillableWinningBids.list method to retrieve the next page of results.", alias="nextPageToken")
    non_billable_winning_bid_status_rows: Optional[List[NonBillableWinningBidStatusRow]] = Field(default=None, description="List of rows, with counts of bids not billed aggregated by reason.", alias="nonBillableWinningBidStatusRows")
    __properties: ClassVar[List[str]] = ["nextPageToken", "nonBillableWinningBidStatusRows"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListNonBillableWinningBidsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in non_billable_winning_bid_status_rows (list)
        _items = []
        if self.non_billable_winning_bid_status_rows:
            for _item_non_billable_winning_bid_status_rows in self.non_billable_winning_bid_status_rows:
                if _item_non_billable_winning_bid_status_rows:
                    _items.append(_item_non_billable_winning_bid_status_rows.to_dict())
            _dict['nonBillableWinningBidStatusRows'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListNonBillableWinningBidsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nextPageToken": obj.get("nextPageToken"),
            "nonBillableWinningBidStatusRows": [NonBillableWinningBidStatusRow.from_dict(_item) for _item in obj["nonBillableWinningBidStatusRows"]] if obj.get("nonBillableWinningBidStatusRows") is not None else None
        })
        return _obj



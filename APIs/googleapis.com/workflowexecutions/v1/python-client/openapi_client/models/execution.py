# coding: utf-8

"""
    Workflow Executions API

    Execute workflows created with Workflows API.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error import Error
from openapi_client.models.state_error import StateError
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class Execution(BaseModel):
    """
    A running instance of a [Workflow](/workflows/docs/reference/rest/v1/projects.locations.workflows).
    """ # noqa: E501
    argument: Optional[StrictStr] = Field(default=None, description="Input parameters of the execution represented as a JSON string. The size limit is 32KB. *Note*: If you are using the REST API directly to run your workflow, you must escape any JSON string value of `argument`. Example: `'{\"argument\":\"{\\\"firstName\\\":\\\"FIRST\\\",\\\"lastName\\\":\\\"LAST\\\"}\"}'`")
    call_log_level: Optional[StrictStr] = Field(default=None, description="The call logging level associated to this execution.", alias="callLogLevel")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Marks the creation of the execution.", alias="createTime")
    disable_concurrency_quota_overflow_buffering: Optional[StrictBool] = Field(default=None, description="Optional. If set to true, the execution will not be backlogged when the concurrency quota is exhausted. The backlog execution starts when the concurrency quota becomes available.", alias="disableConcurrencyQuotaOverflowBuffering")
    duration: Optional[StrictStr] = Field(default=None, description="Output only. Measures the duration of the execution.")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. Marks the end of execution, successful or not.", alias="endTime")
    error: Optional[Error] = None
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels associated with this execution. Labels can contain at most 64 entries. Keys and values can be no longer than 63 characters and can only contain lowercase letters, numeric characters, underscores, and dashes. Label keys must start with a letter. International characters are allowed. By default, labels are inherited from the workflow but are overridden by any labels associated with the execution.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the execution. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}")
    result: Optional[StrictStr] = Field(default=None, description="Output only. Output of the execution represented as a JSON string. The value can only be present if the execution's state is `SUCCEEDED`.")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. Marks the beginning of execution.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Current state of the execution.")
    state_error: Optional[StateError] = Field(default=None, alias="stateError")
    status: Optional[Status] = None
    workflow_revision_id: Optional[StrictStr] = Field(default=None, description="Output only. Revision of the workflow this execution is using.", alias="workflowRevisionId")
    __properties: ClassVar[List[str]] = ["argument", "callLogLevel", "createTime", "disableConcurrencyQuotaOverflowBuffering", "duration", "endTime", "error", "labels", "name", "result", "startTime", "state", "stateError", "status", "workflowRevisionId"]

    @field_validator('call_log_level')
    def call_log_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CALL_LOG_LEVEL_UNSPECIFIED', 'LOG_ALL_CALLS', 'LOG_ERRORS_ONLY', 'LOG_NONE']):
            raise ValueError("must be one of enum values ('CALL_LOG_LEVEL_UNSPECIFIED', 'LOG_ALL_CALLS', 'LOG_ERRORS_ONLY', 'LOG_NONE')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'SUCCEEDED', 'FAILED', 'CANCELLED', 'UNAVAILABLE', 'QUEUED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'SUCCEEDED', 'FAILED', 'CANCELLED', 'UNAVAILABLE', 'QUEUED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Execution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "duration",
            "end_time",
            "name",
            "result",
            "start_time",
            "state",
            "workflow_revision_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state_error
        if self.state_error:
            _dict['stateError'] = self.state_error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Execution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "argument": obj.get("argument"),
            "callLogLevel": obj.get("callLogLevel"),
            "createTime": obj.get("createTime"),
            "disableConcurrencyQuotaOverflowBuffering": obj.get("disableConcurrencyQuotaOverflowBuffering"),
            "duration": obj.get("duration"),
            "endTime": obj.get("endTime"),
            "error": Error.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "result": obj.get("result"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "stateError": StateError.from_dict(obj["stateError"]) if obj.get("stateError") is not None else None,
            "status": Status.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "workflowRevisionId": obj.get("workflowRevisionId")
        })
        return _obj



# coding: utf-8

"""
    Workflow Executions API

    Execute workflows created with Workflows API.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.exception import Exception
from openapi_client.models.navigation_info import NavigationInfo
from openapi_client.models.step_entry_metadata import StepEntryMetadata
from typing import Optional, Set
from typing_extensions import Self

class StepEntry(BaseModel):
    """
    An StepEntry contains debugging information for a step transition in a workflow execution.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The creation time of the step entry.", alias="createTime")
    entry_id: Optional[StrictStr] = Field(default=None, description="Output only. The numeric ID of this step entry, used for navigation.", alias="entryId")
    exception: Optional[Exception] = None
    name: Optional[StrictStr] = Field(default=None, description="Output only. The full resource name of the step entry. Each step entry has a unique entry ID, which is a monotonically increasing counter. Step entry names have the format: `projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}/stepEntries/{step_entry}`.")
    navigation_info: Optional[NavigationInfo] = Field(default=None, alias="navigationInfo")
    routine: Optional[StrictStr] = Field(default=None, description="Output only. The name of the routine this step entry belongs to. A routine name is the subworkflow name defined in the YAML source code. The top level routine name is `main`.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the step entry.")
    step: Optional[StrictStr] = Field(default=None, description="Output only. The name of the step this step entry belongs to.")
    step_entry_metadata: Optional[StepEntryMetadata] = Field(default=None, alias="stepEntryMetadata")
    step_type: Optional[StrictStr] = Field(default=None, description="Output only. The type of the step this step entry belongs to.", alias="stepType")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The most recently updated time of the step entry.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "entryId", "exception", "name", "navigationInfo", "routine", "state", "step", "stepEntryMetadata", "stepType", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'STATE_IN_PROGRESS', 'STATE_SUCCEEDED', 'STATE_FAILED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'STATE_IN_PROGRESS', 'STATE_SUCCEEDED', 'STATE_FAILED')")
        return value

    @field_validator('step_type')
    def step_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STEP_TYPE_UNSPECIFIED', 'STEP_ASSIGN', 'STEP_STD_LIB_CALL', 'STEP_CONNECTOR_CALL', 'STEP_SUBWORKFLOW_CALL', 'STEP_CALL', 'STEP_SWITCH', 'STEP_CONDITION', 'STEP_FOR', 'STEP_FOR_ITERATION', 'STEP_PARALLEL_FOR', 'STEP_PARALLEL_BRANCH', 'STEP_PARALLEL_BRANCH_ENTRY', 'STEP_TRY_RETRY_EXCEPT', 'STEP_TRY', 'STEP_RETRY', 'STEP_EXCEPT', 'STEP_RETURN', 'STEP_RAISE', 'STEP_GOTO']):
            raise ValueError("must be one of enum values ('STEP_TYPE_UNSPECIFIED', 'STEP_ASSIGN', 'STEP_STD_LIB_CALL', 'STEP_CONNECTOR_CALL', 'STEP_SUBWORKFLOW_CALL', 'STEP_CALL', 'STEP_SWITCH', 'STEP_CONDITION', 'STEP_FOR', 'STEP_FOR_ITERATION', 'STEP_PARALLEL_FOR', 'STEP_PARALLEL_BRANCH', 'STEP_PARALLEL_BRANCH_ENTRY', 'STEP_TRY_RETRY_EXCEPT', 'STEP_TRY', 'STEP_RETRY', 'STEP_EXCEPT', 'STEP_RETURN', 'STEP_RAISE', 'STEP_GOTO')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StepEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "entry_id",
            "name",
            "routine",
            "state",
            "step",
            "step_type",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of exception
        if self.exception:
            _dict['exception'] = self.exception.to_dict()
        # override the default output from pydantic by calling `to_dict()` of navigation_info
        if self.navigation_info:
            _dict['navigationInfo'] = self.navigation_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of step_entry_metadata
        if self.step_entry_metadata:
            _dict['stepEntryMetadata'] = self.step_entry_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StepEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "entryId": obj.get("entryId"),
            "exception": Exception.from_dict(obj["exception"]) if obj.get("exception") is not None else None,
            "name": obj.get("name"),
            "navigationInfo": NavigationInfo.from_dict(obj["navigationInfo"]) if obj.get("navigationInfo") is not None else None,
            "routine": obj.get("routine"),
            "state": obj.get("state"),
            "step": obj.get("step"),
            "stepEntryMetadata": StepEntryMetadata.from_dict(obj["stepEntryMetadata"]) if obj.get("stepEntryMetadata") is not None else None,
            "stepType": obj.get("stepType"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Playable Locations API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_maps_playablelocations_v3_sample_area_filter import GoogleMapsPlayablelocationsV3SampleAreaFilter
from openapi_client.models.google_maps_playablelocations_v3_sample_criterion import GoogleMapsPlayablelocationsV3SampleCriterion
from typing import Optional, Set
from typing_extensions import Self

class GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest(BaseModel):
    """
     Life of a query: - When a game starts in a new location, your game server issues a SamplePlayableLocations request. The request specifies the S2 cell, and contains one or more \"criteria\" for filtering: - Criterion 0: i locations for long-lived bases, or level 0 monsters, or... - Criterion 1: j locations for short-lived bases, or level 1 monsters, ... - Criterion 2: k locations for random objects. - etc (up to 5 criterion may be specified). `PlayableLocationList` will then contain mutually exclusive lists of `PlayableLocation` objects that satisfy each of the criteria. Think of it as a collection of real-world locations that you can then associate with your game state. Note: These points are impermanent in nature. E.g, parks can close, and places can be removed. The response specifies how long you can expect the playable locations to last. Once they expire, you should query the `samplePlayableLocations` API again to get a fresh view of the real world.
    """ # noqa: E501
    area_filter: Optional[GoogleMapsPlayablelocationsV3SampleAreaFilter] = Field(default=None, alias="areaFilter")
    criteria: Optional[List[GoogleMapsPlayablelocationsV3SampleCriterion]] = Field(default=None, description="Required. Specifies one or more (up to 5) criteria for filtering the returned playable locations.")
    __properties: ClassVar[List[str]] = ["areaFilter", "criteria"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of area_filter
        if self.area_filter:
            _dict['areaFilter'] = self.area_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in criteria (list)
        _items = []
        if self.criteria:
            for _item_criteria in self.criteria:
                if _item_criteria:
                    _items.append(_item_criteria.to_dict())
            _dict['criteria'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "areaFilter": GoogleMapsPlayablelocationsV3SampleAreaFilter.from_dict(obj["areaFilter"]) if obj.get("areaFilter") is not None else None,
            "criteria": [GoogleMapsPlayablelocationsV3SampleCriterion.from_dict(_item) for _item in obj["criteria"]] if obj.get("criteria") is not None else None
        })
        return _obj



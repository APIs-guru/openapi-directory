# coding: utf-8

"""
    Playable Locations API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_maps_playablelocations_v3_sample_playable_location_list import GoogleMapsPlayablelocationsV3SamplePlayableLocationList
from typing import Optional, Set
from typing_extensions import Self

class GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse(BaseModel):
    """
     Response for the SamplePlayableLocations method.
    """ # noqa: E501
    locations_per_game_object_type: Optional[Dict[str, GoogleMapsPlayablelocationsV3SamplePlayableLocationList]] = Field(default=None, description="Each PlayableLocation object corresponds to a game_object_type specified in the request.", alias="locationsPerGameObjectType")
    ttl: Optional[StrictStr] = Field(default=None, description="Required. Specifies the \"time-to-live\" for the set of playable locations. You can use this value to determine how long to cache the set of playable locations. After this length of time, your back-end game server should issue a new SamplePlayableLocations request to get a fresh set of playable locations (because for example, they might have been removed, a park might have closed for the day, a business might have closed permanently).")
    __properties: ClassVar[List[str]] = ["locationsPerGameObjectType", "ttl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in locations_per_game_object_type (dict)
        _field_dict = {}
        if self.locations_per_game_object_type:
            for _key_locations_per_game_object_type in self.locations_per_game_object_type:
                if self.locations_per_game_object_type[_key_locations_per_game_object_type]:
                    _field_dict[_key_locations_per_game_object_type] = self.locations_per_game_object_type[_key_locations_per_game_object_type].to_dict()
            _dict['locationsPerGameObjectType'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "locationsPerGameObjectType": dict(
                (_k, GoogleMapsPlayablelocationsV3SamplePlayableLocationList.from_dict(_v))
                for _k, _v in obj["locationsPerGameObjectType"].items()
            )
            if obj.get("locationsPerGameObjectType") is not None
            else None,
            "ttl": obj.get("ttl")
        })
        return _obj



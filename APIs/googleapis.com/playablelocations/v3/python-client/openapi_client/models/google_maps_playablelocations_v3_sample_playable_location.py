# coding: utf-8

"""
    Playable Locations API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_type_lat_lng import GoogleTypeLatLng
from typing import Optional, Set
from typing_extensions import Self

class GoogleMapsPlayablelocationsV3SamplePlayableLocation(BaseModel):
    """
    A geographical point suitable for placing game objects in location-based games.
    """ # noqa: E501
    center_point: Optional[GoogleTypeLatLng] = Field(default=None, alias="centerPoint")
    name: Optional[StrictStr] = Field(default=None, description="Required. The name of this playable location.")
    place_id: Optional[StrictStr] = Field(default=None, description="A [place ID] (https://developers.google.com/places/place-id)", alias="placeId")
    plus_code: Optional[StrictStr] = Field(default=None, description="A [plus code] (http://openlocationcode.com)", alias="plusCode")
    snapped_point: Optional[GoogleTypeLatLng] = Field(default=None, alias="snappedPoint")
    types: Optional[List[StrictStr]] = Field(default=None, description="A collection of [Playable Location Types](/maps/documentation/gaming/tt/types) for this playable location. The first type in the collection is the primary type. Type information might not be available for all playable locations.")
    __properties: ClassVar[List[str]] = ["centerPoint", "name", "placeId", "plusCode", "snappedPoint", "types"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleMapsPlayablelocationsV3SamplePlayableLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of center_point
        if self.center_point:
            _dict['centerPoint'] = self.center_point.to_dict()
        # override the default output from pydantic by calling `to_dict()` of snapped_point
        if self.snapped_point:
            _dict['snappedPoint'] = self.snapped_point.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleMapsPlayablelocationsV3SamplePlayableLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "centerPoint": GoogleTypeLatLng.from_dict(obj["centerPoint"]) if obj.get("centerPoint") is not None else None,
            "name": obj.get("name"),
            "placeId": obj.get("placeId"),
            "plusCode": obj.get("plusCode"),
            "snappedPoint": GoogleTypeLatLng.from_dict(obj["snappedPoint"]) if obj.get("snappedPoint") is not None else None,
            "types": obj.get("types")
        })
        return _obj



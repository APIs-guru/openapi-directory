# coding: utf-8

"""
    Playable Locations API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_maps_playablelocations_v3_player_report import GoogleMapsPlayablelocationsV3PlayerReport
from openapi_client.models.google_maps_unity_client_info import GoogleMapsUnityClientInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleMapsPlayablelocationsV3LogPlayerReportsRequest(BaseModel):
    """
    A request for logging your player's bad location reports.
    """ # noqa: E501
    client_info: Optional[GoogleMapsUnityClientInfo] = Field(default=None, alias="clientInfo")
    player_reports: Optional[List[GoogleMapsPlayablelocationsV3PlayerReport]] = Field(default=None, description="Required. Player reports. The maximum number of player reports that you can log at once is 50.", alias="playerReports")
    request_id: Optional[StrictStr] = Field(default=None, description="Required. A string that uniquely identifies the log player reports request. This allows you to detect duplicate requests. We recommend that you use UUIDs for this value. The value must not exceed 50 characters. You should reuse the `request_id` only when retrying a request in the case of a failure. In that case, the request must be identical to the one that failed.", alias="requestId")
    __properties: ClassVar[List[str]] = ["clientInfo", "playerReports", "requestId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleMapsPlayablelocationsV3LogPlayerReportsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_info
        if self.client_info:
            _dict['clientInfo'] = self.client_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in player_reports (list)
        _items = []
        if self.player_reports:
            for _item_player_reports in self.player_reports:
                if _item_player_reports:
                    _items.append(_item_player_reports.to_dict())
            _dict['playerReports'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleMapsPlayablelocationsV3LogPlayerReportsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientInfo": GoogleMapsUnityClientInfo.from_dict(obj["clientInfo"]) if obj.get("clientInfo") is not None else None,
            "playerReports": [GoogleMapsPlayablelocationsV3PlayerReport.from_dict(_item) for _item in obj["playerReports"]] if obj.get("playerReports") is not None else None,
            "requestId": obj.get("requestId")
        })
        return _obj



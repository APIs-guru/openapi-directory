# coding: utf-8

"""
    Playable Locations API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleMapsPlayablelocationsV3PlayerReport(BaseModel):
    """
    A report submitted by a player about a playable location that is considered inappropriate for use in the game.
    """ # noqa: E501
    language_code: Optional[StrictStr] = Field(default=None, description="Language code (in BCP-47 format) indicating the language of the freeform description provided in `reason_details`. Examples are \"en\", \"en-US\" or \"ja-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.", alias="languageCode")
    location_name: Optional[StrictStr] = Field(default=None, description="Required. The name of the playable location.", alias="locationName")
    reason_details: Optional[StrictStr] = Field(default=None, description="Required. A free-form description detailing why the playable location is considered bad.", alias="reasonDetails")
    reasons: Optional[List[StrictStr]] = Field(default=None, description="Required. One or more reasons why this playable location is considered bad.")
    __properties: ClassVar[List[str]] = ["languageCode", "locationName", "reasonDetails", "reasons"]

    @field_validator('reasons')
    def reasons_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['BAD_LOCATION_REASON_UNSPECIFIED', 'OTHER', 'NOT_PEDESTRIAN_ACCESSIBLE', 'NOT_OPEN_TO_PUBLIC', 'PERMANENTLY_CLOSED', 'TEMPORARILY_INACCESSIBLE']):
                raise ValueError("each list item must be one of ('BAD_LOCATION_REASON_UNSPECIFIED', 'OTHER', 'NOT_PEDESTRIAN_ACCESSIBLE', 'NOT_OPEN_TO_PUBLIC', 'PERMANENTLY_CLOSED', 'TEMPORARILY_INACCESSIBLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleMapsPlayablelocationsV3PlayerReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleMapsPlayablelocationsV3PlayerReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "languageCode": obj.get("languageCode"),
            "locationName": obj.get("locationName"),
            "reasonDetails": obj.get("reasonDetails"),
            "reasons": obj.get("reasons")
        })
        return _obj



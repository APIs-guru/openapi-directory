# coding: utf-8

"""
    Custom Search API

    Searches over a website or collection of websites

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.search_queries import SearchQueries

class TestSearchQueries(unittest.TestCase):
    """SearchQueries unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchQueries:
        """Test SearchQueries
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchQueries`
        """
        model = SearchQueries()
        if include_optional:
            return SearchQueries(
                next_page = [
                    openapi_client.models.search_queries_next_page_inner.Search_queries_nextPage_inner(
                        count = 56, 
                        cr = '', 
                        cx = '', 
                        date_restrict = '', 
                        disable_cn_tw_translation = '', 
                        exact_terms = '', 
                        exclude_terms = '', 
                        file_type = '', 
                        filter = '', 
                        gl = '', 
                        google_host = '', 
                        high_range = '', 
                        hl = '', 
                        hq = '', 
                        img_color_type = '', 
                        img_dominant_color = '', 
                        img_size = '', 
                        img_type = '', 
                        input_encoding = '', 
                        language = '', 
                        link_site = '', 
                        low_range = '', 
                        or_terms = '', 
                        output_encoding = '', 
                        related_site = '', 
                        rights = '', 
                        safe = '', 
                        search_terms = '', 
                        search_type = '', 
                        site_search = '', 
                        site_search_filter = '', 
                        sort = '', 
                        start_index = 56, 
                        start_page = 56, 
                        title = '', 
                        total_results = '', )
                    ],
                previous_page = [
                    openapi_client.models.search_queries_next_page_inner.Search_queries_nextPage_inner(
                        count = 56, 
                        cr = '', 
                        cx = '', 
                        date_restrict = '', 
                        disable_cn_tw_translation = '', 
                        exact_terms = '', 
                        exclude_terms = '', 
                        file_type = '', 
                        filter = '', 
                        gl = '', 
                        google_host = '', 
                        high_range = '', 
                        hl = '', 
                        hq = '', 
                        img_color_type = '', 
                        img_dominant_color = '', 
                        img_size = '', 
                        img_type = '', 
                        input_encoding = '', 
                        language = '', 
                        link_site = '', 
                        low_range = '', 
                        or_terms = '', 
                        output_encoding = '', 
                        related_site = '', 
                        rights = '', 
                        safe = '', 
                        search_terms = '', 
                        search_type = '', 
                        site_search = '', 
                        site_search_filter = '', 
                        sort = '', 
                        start_index = 56, 
                        start_page = 56, 
                        title = '', 
                        total_results = '', )
                    ],
                request = [
                    openapi_client.models.search_queries_next_page_inner.Search_queries_nextPage_inner(
                        count = 56, 
                        cr = '', 
                        cx = '', 
                        date_restrict = '', 
                        disable_cn_tw_translation = '', 
                        exact_terms = '', 
                        exclude_terms = '', 
                        file_type = '', 
                        filter = '', 
                        gl = '', 
                        google_host = '', 
                        high_range = '', 
                        hl = '', 
                        hq = '', 
                        img_color_type = '', 
                        img_dominant_color = '', 
                        img_size = '', 
                        img_type = '', 
                        input_encoding = '', 
                        language = '', 
                        link_site = '', 
                        low_range = '', 
                        or_terms = '', 
                        output_encoding = '', 
                        related_site = '', 
                        rights = '', 
                        safe = '', 
                        search_terms = '', 
                        search_type = '', 
                        site_search = '', 
                        site_search_filter = '', 
                        sort = '', 
                        start_index = 56, 
                        start_page = 56, 
                        title = '', 
                        total_results = '', )
                    ]
            )
        else:
            return SearchQueries(
        )
        """

    def testSearchQueries(self):
        """Test SearchQueries"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Custom Search API

    Searches over a website or collection of websites

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.search import Search

class TestSearch(unittest.TestCase):
    """Search unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Search:
        """Test Search
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Search`
        """
        model = Search()
        if include_optional:
            return Search(
                context = {
                    'key' : null
                    },
                items = [
                    openapi_client.models.result.Result(
                        cache_id = '', 
                        display_link = '', 
                        file_format = '', 
                        formatted_url = '', 
                        html_formatted_url = '', 
                        html_snippet = '', 
                        html_title = '', 
                        image = openapi_client.models.result_image.Result_image(
                            byte_size = 56, 
                            context_link = '', 
                            height = 56, 
                            thumbnail_height = 56, 
                            thumbnail_link = '', 
                            thumbnail_width = 56, 
                            width = 56, ), 
                        kind = '', 
                        labels = [
                            openapi_client.models.result_labels_inner.Result_labels_inner(
                                display_name = '', 
                                label_with_op = '', 
                                name = '', )
                            ], 
                        link = '', 
                        mime = '', 
                        pagemap = {
                            'key' : null
                            }, 
                        snippet = '', 
                        title = '', )
                    ],
                kind = '',
                promotions = [
                    openapi_client.models.promotion.Promotion(
                        body_lines = [
                            openapi_client.models.promotion_body_lines_inner.Promotion_bodyLines_inner(
                                html_title = '', 
                                link = '', 
                                title = '', 
                                url = '', )
                            ], 
                        display_link = '', 
                        html_title = '', 
                        image = openapi_client.models.promotion_image.Promotion_image(
                            height = 56, 
                            source = '', 
                            width = 56, ), 
                        link = '', 
                        title = '', )
                    ],
                queries = openapi_client.models.search_queries.Search_queries(
                    next_page = [
                        openapi_client.models.search_queries_next_page_inner.Search_queries_nextPage_inner(
                            count = 56, 
                            cr = '', 
                            cx = '', 
                            date_restrict = '', 
                            disable_cn_tw_translation = '', 
                            exact_terms = '', 
                            exclude_terms = '', 
                            file_type = '', 
                            filter = '', 
                            gl = '', 
                            google_host = '', 
                            high_range = '', 
                            hl = '', 
                            hq = '', 
                            img_color_type = '', 
                            img_dominant_color = '', 
                            img_size = '', 
                            img_type = '', 
                            input_encoding = '', 
                            language = '', 
                            link_site = '', 
                            low_range = '', 
                            or_terms = '', 
                            output_encoding = '', 
                            related_site = '', 
                            rights = '', 
                            safe = '', 
                            search_terms = '', 
                            search_type = '', 
                            site_search = '', 
                            site_search_filter = '', 
                            sort = '', 
                            start_index = 56, 
                            start_page = 56, 
                            title = '', 
                            total_results = '', )
                        ], 
                    previous_page = [
                        openapi_client.models.search_queries_next_page_inner.Search_queries_nextPage_inner(
                            count = 56, 
                            cr = '', 
                            cx = '', 
                            date_restrict = '', 
                            disable_cn_tw_translation = '', 
                            exact_terms = '', 
                            exclude_terms = '', 
                            file_type = '', 
                            filter = '', 
                            gl = '', 
                            google_host = '', 
                            high_range = '', 
                            hl = '', 
                            hq = '', 
                            img_color_type = '', 
                            img_dominant_color = '', 
                            img_size = '', 
                            img_type = '', 
                            input_encoding = '', 
                            language = '', 
                            link_site = '', 
                            low_range = '', 
                            or_terms = '', 
                            output_encoding = '', 
                            related_site = '', 
                            rights = '', 
                            safe = '', 
                            search_terms = '', 
                            search_type = '', 
                            site_search = '', 
                            site_search_filter = '', 
                            sort = '', 
                            start_index = 56, 
                            start_page = 56, 
                            title = '', 
                            total_results = '', )
                        ], 
                    request = [
                        
                        ], ),
                search_information = openapi_client.models.search_search_information.Search_searchInformation(
                    formatted_search_time = '', 
                    formatted_total_results = '', 
                    search_time = 1.337, 
                    total_results = '', ),
                spelling = openapi_client.models.search_spelling.Search_spelling(
                    corrected_query = '', 
                    html_corrected_query = '', ),
                url = openapi_client.models.search_url.Search_url(
                    template = '', 
                    type = '', )
            )
        else:
            return Search(
        )
        """

    def testSearch(self):
        """Test Search"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

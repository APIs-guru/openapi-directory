# coding: utf-8

"""
    Custom Search API

    Searches over a website or collection of websites

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.result import Result

class TestResult(unittest.TestCase):
    """Result unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Result:
        """Test Result
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Result`
        """
        model = Result()
        if include_optional:
            return Result(
                cache_id = '',
                display_link = '',
                file_format = '',
                formatted_url = '',
                html_formatted_url = '',
                html_snippet = '',
                html_title = '',
                image = openapi_client.models.result_image.Result_image(
                    byte_size = 56, 
                    context_link = '', 
                    height = 56, 
                    thumbnail_height = 56, 
                    thumbnail_link = '', 
                    thumbnail_width = 56, 
                    width = 56, ),
                kind = '',
                labels = [
                    openapi_client.models.result_labels_inner.Result_labels_inner(
                        display_name = '', 
                        label_with_op = '', 
                        name = '', )
                    ],
                link = '',
                mime = '',
                pagemap = {
                    'key' : null
                    },
                snippet = '',
                title = ''
            )
        else:
            return Result(
        )
        """

    def testResult(self):
        """Test Result"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Custom Search API

    Searches over a website or collection of websites

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.promotion import Promotion
from openapi_client.models.result import Result
from openapi_client.models.search_queries import SearchQueries
from openapi_client.models.search_search_information import SearchSearchInformation
from openapi_client.models.search_spelling import SearchSpelling
from openapi_client.models.search_url import SearchUrl
from typing import Optional, Set
from typing_extensions import Self

class Search(BaseModel):
    """
    Response to a custom search request.
    """ # noqa: E501
    context: Optional[Dict[str, Any]] = Field(default=None, description="Metadata and refinements associated with the given search engine, including: * The name of the search engine that was used for the query. * A set of [facet objects](https://developers.google.com/custom-search/docs/refinements#create) (refinements) you can use for refining a search.")
    items: Optional[List[Result]] = Field(default=None, description="The current set of custom search results.")
    kind: Optional[StrictStr] = Field(default=None, description="Unique identifier for the type of current object. For this API, it is customsearch#search.")
    promotions: Optional[List[Promotion]] = Field(default=None, description="The set of [promotions](https://developers.google.com/custom-search/docs/promotions). Present only if the custom search engine's configuration files define any promotions for the given query.")
    queries: Optional[SearchQueries] = None
    search_information: Optional[SearchSearchInformation] = Field(default=None, alias="searchInformation")
    spelling: Optional[SearchSpelling] = None
    url: Optional[SearchUrl] = None
    __properties: ClassVar[List[str]] = ["context", "items", "kind", "promotions", "queries", "searchInformation", "spelling", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Search from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in promotions (list)
        _items = []
        if self.promotions:
            for _item_promotions in self.promotions:
                if _item_promotions:
                    _items.append(_item_promotions.to_dict())
            _dict['promotions'] = _items
        # override the default output from pydantic by calling `to_dict()` of queries
        if self.queries:
            _dict['queries'] = self.queries.to_dict()
        # override the default output from pydantic by calling `to_dict()` of search_information
        if self.search_information:
            _dict['searchInformation'] = self.search_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spelling
        if self.spelling:
            _dict['spelling'] = self.spelling.to_dict()
        # override the default output from pydantic by calling `to_dict()` of url
        if self.url:
            _dict['url'] = self.url.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Search from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "context": obj.get("context"),
            "items": [Result.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "kind": obj.get("kind"),
            "promotions": [Promotion.from_dict(_item) for _item in obj["promotions"]] if obj.get("promotions") is not None else None,
            "queries": SearchQueries.from_dict(obj["queries"]) if obj.get("queries") is not None else None,
            "searchInformation": SearchSearchInformation.from_dict(obj["searchInformation"]) if obj.get("searchInformation") is not None else None,
            "spelling": SearchSpelling.from_dict(obj["spelling"]) if obj.get("spelling") is not None else None,
            "url": SearchUrl.from_dict(obj["url"]) if obj.get("url") is not None else None
        })
        return _obj



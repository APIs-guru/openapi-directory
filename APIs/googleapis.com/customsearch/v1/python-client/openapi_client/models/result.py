# coding: utf-8

"""
    Custom Search API

    Searches over a website or collection of websites

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.result_image import ResultImage
from openapi_client.models.result_labels_inner import ResultLabelsInner
from typing import Optional, Set
from typing_extensions import Self

class Result(BaseModel):
    """
    A custom search result.
    """ # noqa: E501
    cache_id: Optional[StrictStr] = Field(default=None, description="Indicates the ID of Google's cached version of the search result.", alias="cacheId")
    display_link: Optional[StrictStr] = Field(default=None, description="An abridged version of this search resultâ€™s URL, e.g. www.example.com.", alias="displayLink")
    file_format: Optional[StrictStr] = Field(default=None, description="The file format of the search result.", alias="fileFormat")
    formatted_url: Optional[StrictStr] = Field(default=None, description="The URL displayed after the snippet for each search result.", alias="formattedUrl")
    html_formatted_url: Optional[StrictStr] = Field(default=None, description="The HTML-formatted URL displayed after the snippet for each search result.", alias="htmlFormattedUrl")
    html_snippet: Optional[StrictStr] = Field(default=None, description="The snippet of the search result, in HTML.", alias="htmlSnippet")
    html_title: Optional[StrictStr] = Field(default=None, description="The title of the search result, in HTML.", alias="htmlTitle")
    image: Optional[ResultImage] = None
    kind: Optional[StrictStr] = Field(default=None, description="A unique identifier for the type of current object. For this API, it is `customsearch#result.`")
    labels: Optional[List[ResultLabelsInner]] = Field(default=None, description="Encapsulates all information about refinement labels.")
    link: Optional[StrictStr] = Field(default=None, description="The full URL to which the search result is pointing, e.g. http://www.example.com/foo/bar.")
    mime: Optional[StrictStr] = Field(default=None, description="The MIME type of the search result.")
    pagemap: Optional[Dict[str, Any]] = Field(default=None, description="Contains [PageMap](https://developers.google.com/custom-search/docs/structured_data#pagemaps) information for this search result.")
    snippet: Optional[StrictStr] = Field(default=None, description="The snippet of the search result, in plain text.")
    title: Optional[StrictStr] = Field(default=None, description="The title of the search result, in plain text.")
    __properties: ClassVar[List[str]] = ["cacheId", "displayLink", "fileFormat", "formattedUrl", "htmlFormattedUrl", "htmlSnippet", "htmlTitle", "image", "kind", "labels", "link", "mime", "pagemap", "snippet", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Result from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict['labels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Result from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cacheId": obj.get("cacheId"),
            "displayLink": obj.get("displayLink"),
            "fileFormat": obj.get("fileFormat"),
            "formattedUrl": obj.get("formattedUrl"),
            "htmlFormattedUrl": obj.get("htmlFormattedUrl"),
            "htmlSnippet": obj.get("htmlSnippet"),
            "htmlTitle": obj.get("htmlTitle"),
            "image": ResultImage.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "kind": obj.get("kind"),
            "labels": [ResultLabelsInner.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "link": obj.get("link"),
            "mime": obj.get("mime"),
            "pagemap": obj.get("pagemap"),
            "snippet": obj.get("snippet"),
            "title": obj.get("title")
        })
        return _obj



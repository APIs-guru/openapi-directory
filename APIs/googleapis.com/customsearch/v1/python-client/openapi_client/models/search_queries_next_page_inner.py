# coding: utf-8

"""
    Custom Search API

    Searches over a website or collection of websites

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SearchQueriesNextPageInner(BaseModel):
    """
    Custom search request metadata.
    """ # noqa: E501
    count: Optional[StrictInt] = Field(default=None, description="Number of search results returned in this set.")
    cr: Optional[StrictStr] = Field(default=None, description="Restricts search results to documents originating in a particular country. You may use [Boolean operators](https://developers.google.com/custom-search/docs/json_api_reference#BooleanOrSearch) in the `cr` parameter's value. Google WebSearch determines the country of a document by analyzing the following: * The top-level domain (TLD) of the document's URL. * The geographic location of the web server's IP address. See [Country (cr) Parameter Values](https://developers.google.com/custom-search/docs/json_api_reference#countryCollections) for a list of valid values for this parameter.")
    cx: Optional[StrictStr] = Field(default=None, description="The identifier of an engine created using the Programmable Search Engine [Control Panel](https://programmablesearchengine.google.com/). This is a custom property not defined in the OpenSearch spec. This parameter is **required**.")
    date_restrict: Optional[StrictStr] = Field(default=None, description="Restricts results to URLs based on date. Supported values include: * `d[number]`: requests results from the specified number of past days. * `w[number]`: requests results from the specified number of past weeks. * `m[number]`: requests results from the specified number of past months. * `y[number]`: requests results from the specified number of past years.", alias="dateRestrict")
    disable_cn_tw_translation: Optional[StrictStr] = Field(default=None, description="Enables or disables the [Simplified and Traditional Chinese Search](https://developers.google.com/custom-search/docs/json_api_reference#chineseSearch) feature. Supported values are: * `0`: enabled (default) * `1`: disabled", alias="disableCnTwTranslation")
    exact_terms: Optional[StrictStr] = Field(default=None, description="Identifies a phrase that all documents in the search results must contain.", alias="exactTerms")
    exclude_terms: Optional[StrictStr] = Field(default=None, description="Identifies a word or phrase that should not appear in any documents in the search results.", alias="excludeTerms")
    file_type: Optional[StrictStr] = Field(default=None, description="Restricts results to files of a specified extension. Filetypes supported by Google include: * Adobe Portable Document Format (`pdf`) * Adobe PostScript (`ps`) * Lotus 1-2-3 (`wk1`, `wk2`, `wk3`, `wk4`, `wk5`, `wki`, `wks`, `wku`) * Lotus WordPro (`lwp`) * Macwrite (`mw`) * Microsoft Excel (`xls`) * Microsoft PowerPoint (`ppt`) * Microsoft Word (`doc`) * Microsoft Works (`wks`, `wps`, `wdb`) * Microsoft Write (`wri`) * Rich Text Format (`rtf`) * Shockwave Flash (`swf`) * Text (`ans`, `txt`). Additional filetypes may be added in the future. An up-to-date list can always be found in Google's [file type FAQ](https://support.google.com/webmasters/answer/35287).", alias="fileType")
    filter: Optional[StrictStr] = Field(default=None, description="Activates or deactivates the automatic filtering of Google search results. See [Automatic Filtering](https://developers.google.com/custom-search/docs/json_api_reference#automaticFiltering) for more information about Google's search results filters. Valid values for this parameter are: * `0`: Disabled * `1`: Enabled (default) **Note**: By default, Google applies filtering to all search results to improve the quality of those results.")
    gl: Optional[StrictStr] = Field(default=None, description="Boosts search results whose country of origin matches the parameter value. See [Country Codes](https://developers.google.com/custom-search/docs/json_api_reference#countryCodes) for a list of valid values. Specifying a `gl` parameter value in WebSearch requests should improve the relevance of results. This is particularly true for international customers and, even more specifically, for customers in English-speaking countries other than the United States.")
    google_host: Optional[StrictStr] = Field(default=None, description="Specifies the Google domain (for example, google.com, google.de, or google.fr) to which the search should be limited.", alias="googleHost")
    high_range: Optional[StrictStr] = Field(default=None, description="Specifies the ending value for a search range. Use `cse:lowRange` and `cse:highrange` to append an inclusive search range of `lowRange...highRange` to the query.", alias="highRange")
    hl: Optional[StrictStr] = Field(default=None, description="Specifies the interface language (host language) of your user interface. Explicitly setting this parameter improves the performance and the quality of your search results. See the [Interface Languages](https://developers.google.com/custom-search/docs/json_api_reference#wsInterfaceLanguages) section of [Internationalizing Queries and Results Presentation](https://developers.google.com/custom-search/docs/json_api_reference#wsInternationalizing) for more information, and [Supported Interface Languages](https://developers.google.com/custom-search/docs/json_api_reference#interfaceLanguages) for a list of supported languages.")
    hq: Optional[StrictStr] = Field(default=None, description="Appends the specified query terms to the query, as if they were combined with a logical `AND` operator.")
    img_color_type: Optional[StrictStr] = Field(default=None, description="Restricts results to images of a specified color type. Supported values are: * `mono` (black and white) * `gray` (grayscale) * `color` (color)", alias="imgColorType")
    img_dominant_color: Optional[StrictStr] = Field(default=None, description="Restricts results to images with a specific dominant color. Supported values are: * `red` * `orange` * `yellow` * `green` * `teal` * `blue` * `purple` * `pink` * `white` * `gray` * `black` * `brown`", alias="imgDominantColor")
    img_size: Optional[StrictStr] = Field(default=None, description="Restricts results to images of a specified size. Supported values are: * `icon` (small) * `small | medium | large | xlarge` (medium) * `xxlarge` (large) * `huge` (extra-large)", alias="imgSize")
    img_type: Optional[StrictStr] = Field(default=None, description="Restricts results to images of a specified type. Supported values are: * `clipart` (Clip art) * `face` (Face) * `lineart` (Line drawing) * `photo` (Photo) * `animated` (Animated) * `stock` (Stock)", alias="imgType")
    input_encoding: Optional[StrictStr] = Field(default=None, description="The character encoding supported for search requests.", alias="inputEncoding")
    language: Optional[StrictStr] = Field(default=None, description="The language of the search results.")
    link_site: Optional[StrictStr] = Field(default=None, description="Specifies that all results should contain a link to a specific URL.", alias="linkSite")
    low_range: Optional[StrictStr] = Field(default=None, description="Specifies the starting value for a search range. Use `cse:lowRange` and `cse:highrange` to append an inclusive search range of `lowRange...highRange` to the query.", alias="lowRange")
    or_terms: Optional[StrictStr] = Field(default=None, description="Provides additional search terms to check for in a document, where each document in the search results must contain at least one of the additional search terms. You can also use the [Boolean OR](https://developers.google.com/custom-search/docs/json_api_reference#BooleanOrSearch) query term for this type of query.", alias="orTerms")
    output_encoding: Optional[StrictStr] = Field(default=None, description="The character encoding supported for search results.", alias="outputEncoding")
    related_site: Optional[StrictStr] = Field(default=None, description="Specifies that all search results should be pages that are related to the specified URL. The parameter value should be a URL.", alias="relatedSite")
    rights: Optional[StrictStr] = Field(default=None, description="Filters based on licensing. Supported values include: * `cc_publicdomain` * `cc_attribute` * `cc_sharealike` * `cc_noncommercial` * `cc_nonderived`")
    safe: Optional[StrictStr] = Field(default=None, description="Specifies the [SafeSearch level](https://developers.google.com/custom-search/docs/json_api_reference#safeSearchLevels) used for filtering out adult results. This is a custom property not defined in the OpenSearch spec. Valid parameter values are: * `\"off\"`: Disable SafeSearch * `\"active\"`: Enable SafeSearch")
    search_terms: Optional[StrictStr] = Field(default=None, description="The search terms entered by the user.", alias="searchTerms")
    search_type: Optional[StrictStr] = Field(default=None, description="Allowed values are `web` or `image`. If unspecified, results are limited to webpages.", alias="searchType")
    site_search: Optional[StrictStr] = Field(default=None, description="Restricts results to URLs from a specified site.", alias="siteSearch")
    site_search_filter: Optional[StrictStr] = Field(default=None, description="Specifies whether to include or exclude results from the site named in the `sitesearch` parameter. Supported values are: * `i`: include content from site * `e`: exclude content from site", alias="siteSearchFilter")
    sort: Optional[StrictStr] = Field(default=None, description="Specifies that results should be sorted according to the specified expression. For example, sort by date.")
    start_index: Optional[StrictInt] = Field(default=None, description="The index of the current set of search results into the total set of results, where the index of the first result is 1.", alias="startIndex")
    start_page: Optional[StrictInt] = Field(default=None, description="The page number of this set of results, where the page length is set by the `count` property.", alias="startPage")
    title: Optional[StrictStr] = Field(default=None, description="A description of the query.")
    total_results: Optional[StrictStr] = Field(default=None, description="Estimated number of total search results. May not be accurate.", alias="totalResults")
    __properties: ClassVar[List[str]] = ["count", "cr", "cx", "dateRestrict", "disableCnTwTranslation", "exactTerms", "excludeTerms", "fileType", "filter", "gl", "googleHost", "highRange", "hl", "hq", "imgColorType", "imgDominantColor", "imgSize", "imgType", "inputEncoding", "language", "linkSite", "lowRange", "orTerms", "outputEncoding", "relatedSite", "rights", "safe", "searchTerms", "searchType", "siteSearch", "siteSearchFilter", "sort", "startIndex", "startPage", "title", "totalResults"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchQueriesNextPageInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchQueriesNextPageInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "count": obj.get("count"),
            "cr": obj.get("cr"),
            "cx": obj.get("cx"),
            "dateRestrict": obj.get("dateRestrict"),
            "disableCnTwTranslation": obj.get("disableCnTwTranslation"),
            "exactTerms": obj.get("exactTerms"),
            "excludeTerms": obj.get("excludeTerms"),
            "fileType": obj.get("fileType"),
            "filter": obj.get("filter"),
            "gl": obj.get("gl"),
            "googleHost": obj.get("googleHost"),
            "highRange": obj.get("highRange"),
            "hl": obj.get("hl"),
            "hq": obj.get("hq"),
            "imgColorType": obj.get("imgColorType"),
            "imgDominantColor": obj.get("imgDominantColor"),
            "imgSize": obj.get("imgSize"),
            "imgType": obj.get("imgType"),
            "inputEncoding": obj.get("inputEncoding"),
            "language": obj.get("language"),
            "linkSite": obj.get("linkSite"),
            "lowRange": obj.get("lowRange"),
            "orTerms": obj.get("orTerms"),
            "outputEncoding": obj.get("outputEncoding"),
            "relatedSite": obj.get("relatedSite"),
            "rights": obj.get("rights"),
            "safe": obj.get("safe"),
            "searchTerms": obj.get("searchTerms"),
            "searchType": obj.get("searchType"),
            "siteSearch": obj.get("siteSearch"),
            "siteSearchFilter": obj.get("siteSearchFilter"),
            "sort": obj.get("sort"),
            "startIndex": obj.get("startIndex"),
            "startPage": obj.get("startPage"),
            "title": obj.get("title"),
            "totalResults": obj.get("totalResults")
        })
        return _obj



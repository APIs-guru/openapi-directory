# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_dataplex_v1_list_environments_response import GoogleCloudDataplexV1ListEnvironmentsResponse

class TestGoogleCloudDataplexV1ListEnvironmentsResponse(unittest.TestCase):
    """GoogleCloudDataplexV1ListEnvironmentsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDataplexV1ListEnvironmentsResponse:
        """Test GoogleCloudDataplexV1ListEnvironmentsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDataplexV1ListEnvironmentsResponse`
        """
        model = GoogleCloudDataplexV1ListEnvironmentsResponse()
        if include_optional:
            return GoogleCloudDataplexV1ListEnvironmentsResponse(
                environments = [
                    openapi_client.models.google_cloud_dataplex_v1_environment.GoogleCloudDataplexV1Environment(
                        create_time = '', 
                        description = '', 
                        display_name = '', 
                        endpoints = openapi_client.models.google_cloud_dataplex_v1_environment_endpoints.GoogleCloudDataplexV1EnvironmentEndpoints(
                            notebooks = '', 
                            sql = '', ), 
                        infrastructure_spec = openapi_client.models.google_cloud_dataplex_v1_environment_infrastructure_spec.GoogleCloudDataplexV1EnvironmentInfrastructureSpec(
                            compute = openapi_client.models.google_cloud_dataplex_v1_environment_infrastructure_spec_compute_resources.GoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources(
                                disk_size_gb = 56, 
                                max_node_count = 56, 
                                node_count = 56, ), 
                            os_image = openapi_client.models.google_cloud_dataplex_v1_environment_infrastructure_spec_os_image_runtime.GoogleCloudDataplexV1EnvironmentInfrastructureSpecOsImageRuntime(
                                image_version = '', 
                                java_libraries = [
                                    ''
                                    ], 
                                properties = {
                                    'key' : ''
                                    }, 
                                python_packages = [
                                    ''
                                    ], ), ), 
                        labels = {
                            'key' : ''
                            }, 
                        name = '', 
                        session_spec = openapi_client.models.google_cloud_dataplex_v1_environment_session_spec.GoogleCloudDataplexV1EnvironmentSessionSpec(
                            enable_fast_startup = True, 
                            max_idle_duration = '', ), 
                        session_status = openapi_client.models.google_cloud_dataplex_v1_environment_session_status.GoogleCloudDataplexV1EnvironmentSessionStatus(
                            active = True, ), 
                        state = 'STATE_UNSPECIFIED', 
                        uid = '', 
                        update_time = '', )
                    ],
                next_page_token = ''
            )
        else:
            return GoogleCloudDataplexV1ListEnvironmentsResponse(
        )
        """

    def testGoogleCloudDataplexV1ListEnvironmentsResponse(self):
        """Test GoogleCloudDataplexV1ListEnvironmentsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

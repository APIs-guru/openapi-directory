# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_dataplex_v1_task import GoogleCloudDataplexV1Task

class TestGoogleCloudDataplexV1Task(unittest.TestCase):
    """GoogleCloudDataplexV1Task unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDataplexV1Task:
        """Test GoogleCloudDataplexV1Task
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDataplexV1Task`
        """
        model = GoogleCloudDataplexV1Task()
        if include_optional:
            return GoogleCloudDataplexV1Task(
                create_time = '',
                description = '',
                display_name = '',
                execution_spec = openapi_client.models.google_cloud_dataplex_v1_task_execution_spec.GoogleCloudDataplexV1TaskExecutionSpec(
                    args = {
                        'key' : ''
                        }, 
                    kms_key = '', 
                    max_job_execution_lifetime = '', 
                    project = '', 
                    service_account = '', ),
                execution_status = openapi_client.models.google_cloud_dataplex_v1_task_execution_status.GoogleCloudDataplexV1TaskExecutionStatus(
                    latest_job = openapi_client.models.google_cloud_dataplex_v1_job.GoogleCloudDataplexV1Job(
                        end_time = '', 
                        execution_spec = openapi_client.models.google_cloud_dataplex_v1_task_execution_spec.GoogleCloudDataplexV1TaskExecutionSpec(
                            args = {
                                'key' : ''
                                }, 
                            kms_key = '', 
                            max_job_execution_lifetime = '', 
                            project = '', 
                            service_account = '', ), 
                        labels = {
                            'key' : ''
                            }, 
                        message = '', 
                        name = '', 
                        retry_count = 56, 
                        service = 'SERVICE_UNSPECIFIED', 
                        service_job = '', 
                        start_time = '', 
                        state = 'STATE_UNSPECIFIED', 
                        trigger = 'TRIGGER_UNSPECIFIED', 
                        uid = '', ), 
                    update_time = '', ),
                labels = {
                    'key' : ''
                    },
                name = '',
                notebook = openapi_client.models.google_cloud_dataplex_v1_task_notebook_task_config.GoogleCloudDataplexV1TaskNotebookTaskConfig(
                    archive_uris = [
                        ''
                        ], 
                    file_uris = [
                        ''
                        ], 
                    infrastructure_spec = openapi_client.models.google_cloud_dataplex_v1_task_infrastructure_spec.GoogleCloudDataplexV1TaskInfrastructureSpec(
                        batch = openapi_client.models.google_cloud_dataplex_v1_task_infrastructure_spec_batch_compute_resources.GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources(
                            executors_count = 56, 
                            max_executors_count = 56, ), 
                        container_image = openapi_client.models.google_cloud_dataplex_v1_task_infrastructure_spec_container_image_runtime.GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime(
                            image = '', 
                            java_jars = [
                                ''
                                ], 
                            properties = {
                                'key' : ''
                                }, 
                            python_packages = [
                                ''
                                ], ), 
                        vpc_network = openapi_client.models.google_cloud_dataplex_v1_task_infrastructure_spec_vpc_network.GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork(
                            network = '', 
                            network_tags = [
                                ''
                                ], 
                            sub_network = '', ), ), ),
                spark = openapi_client.models.google_cloud_dataplex_v1_task_spark_task_config.GoogleCloudDataplexV1TaskSparkTaskConfig(
                    archive_uris = [
                        ''
                        ], 
                    file_uris = [
                        ''
                        ], 
                    infrastructure_spec = openapi_client.models.google_cloud_dataplex_v1_task_infrastructure_spec.GoogleCloudDataplexV1TaskInfrastructureSpec(
                        batch = openapi_client.models.google_cloud_dataplex_v1_task_infrastructure_spec_batch_compute_resources.GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources(
                            executors_count = 56, 
                            max_executors_count = 56, ), 
                        container_image = openapi_client.models.google_cloud_dataplex_v1_task_infrastructure_spec_container_image_runtime.GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime(
                            image = '', 
                            java_jars = [
                                ''
                                ], 
                            properties = {
                                'key' : ''
                                }, 
                            python_packages = [
                                ''
                                ], ), 
                        vpc_network = openapi_client.models.google_cloud_dataplex_v1_task_infrastructure_spec_vpc_network.GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork(
                            network = '', 
                            network_tags = [
                                ''
                                ], 
                            sub_network = '', ), ), 
                    main_class = '', 
                    main_jar_file_uri = '', 
                    python_script_file = '', 
                    sql_script = '', 
                    sql_script_file = '', ),
                state = 'STATE_UNSPECIFIED',
                trigger_spec = openapi_client.models.google_cloud_dataplex_v1_task_trigger_spec.GoogleCloudDataplexV1TaskTriggerSpec(
                    disabled = True, 
                    max_retries = 56, 
                    schedule = '', 
                    start_time = '', 
                    type = 'TYPE_UNSPECIFIED', ),
                uid = '',
                update_time = ''
            )
        else:
            return GoogleCloudDataplexV1Task(
        )
        """

    def testGoogleCloudDataplexV1Task(self):
        """Test GoogleCloudDataplexV1Task"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_dataplex_v1_data_quality_rule import GoogleCloudDataplexV1DataQualityRule

class TestGoogleCloudDataplexV1DataQualityRule(unittest.TestCase):
    """GoogleCloudDataplexV1DataQualityRule unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDataplexV1DataQualityRule:
        """Test GoogleCloudDataplexV1DataQualityRule
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDataplexV1DataQualityRule`
        """
        model = GoogleCloudDataplexV1DataQualityRule()
        if include_optional:
            return GoogleCloudDataplexV1DataQualityRule(
                column = '',
                description = '',
                dimension = '',
                ignore_null = True,
                name = '',
                non_null_expectation = openapi_client.models.google_cloud_dataplex_v1_data_quality_rule_non_null_expectation.GoogleCloudDataplexV1DataQualityRuleNonNullExpectation(),
                range_expectation = openapi_client.models.google_cloud_dataplex_v1_data_quality_rule_range_expectation.GoogleCloudDataplexV1DataQualityRuleRangeExpectation(
                    max_value = '', 
                    min_value = '', 
                    strict_max_enabled = True, 
                    strict_min_enabled = True, ),
                regex_expectation = openapi_client.models.google_cloud_dataplex_v1_data_quality_rule_regex_expectation.GoogleCloudDataplexV1DataQualityRuleRegexExpectation(
                    regex = '', ),
                row_condition_expectation = openapi_client.models.google_cloud_dataplex_v1_data_quality_rule_row_condition_expectation.GoogleCloudDataplexV1DataQualityRuleRowConditionExpectation(
                    sql_expression = '', ),
                set_expectation = openapi_client.models.google_cloud_dataplex_v1_data_quality_rule_set_expectation.GoogleCloudDataplexV1DataQualityRuleSetExpectation(
                    values = [
                        ''
                        ], ),
                statistic_range_expectation = openapi_client.models.google_cloud_dataplex_v1_data_quality_rule_statistic_range_expectation.GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation(
                    max_value = '', 
                    min_value = '', 
                    statistic = 'STATISTIC_UNDEFINED', 
                    strict_max_enabled = True, 
                    strict_min_enabled = True, ),
                table_condition_expectation = openapi_client.models.google_cloud_dataplex_v1_data_quality_rule_table_condition_expectation.GoogleCloudDataplexV1DataQualityRuleTableConditionExpectation(
                    sql_expression = '', ),
                threshold = 1.337,
                uniqueness_expectation = openapi_client.models.google_cloud_dataplex_v1_data_quality_rule_uniqueness_expectation.GoogleCloudDataplexV1DataQualityRuleUniquenessExpectation()
            )
        else:
            return GoogleCloudDataplexV1DataQualityRule(
        )
        """

    def testGoogleCloudDataplexV1DataQualityRule(self):
        """Test GoogleCloudDataplexV1DataQualityRule"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_dataplex_v1_entity import GoogleCloudDataplexV1Entity

class TestGoogleCloudDataplexV1Entity(unittest.TestCase):
    """GoogleCloudDataplexV1Entity unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDataplexV1Entity:
        """Test GoogleCloudDataplexV1Entity
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDataplexV1Entity`
        """
        model = GoogleCloudDataplexV1Entity()
        if include_optional:
            return GoogleCloudDataplexV1Entity(
                access = openapi_client.models.google_cloud_dataplex_v1_storage_access.GoogleCloudDataplexV1StorageAccess(
                    read = 'ACCESS_MODE_UNSPECIFIED', ),
                asset = '',
                catalog_entry = '',
                compatibility = openapi_client.models.google_cloud_dataplex_v1_entity_compatibility_status.GoogleCloudDataplexV1EntityCompatibilityStatus(
                    bigquery = openapi_client.models.google_cloud_dataplex_v1_entity_compatibility_status_compatibility.GoogleCloudDataplexV1EntityCompatibilityStatusCompatibility(
                        compatible = True, 
                        reason = '', ), 
                    hive_metastore = openapi_client.models.google_cloud_dataplex_v1_entity_compatibility_status_compatibility.GoogleCloudDataplexV1EntityCompatibilityStatusCompatibility(
                        compatible = True, 
                        reason = '', ), ),
                create_time = '',
                data_path = '',
                data_path_pattern = '',
                description = '',
                display_name = '',
                etag = '',
                format = openapi_client.models.google_cloud_dataplex_v1_storage_format.GoogleCloudDataplexV1StorageFormat(
                    compression_format = 'COMPRESSION_FORMAT_UNSPECIFIED', 
                    csv = openapi_client.models.google_cloud_dataplex_v1_storage_format_csv_options.GoogleCloudDataplexV1StorageFormatCsvOptions(
                        delimiter = '', 
                        encoding = '', 
                        header_rows = 56, 
                        quote = '', ), 
                    format = 'FORMAT_UNSPECIFIED', 
                    iceberg = openapi_client.models.google_cloud_dataplex_v1_storage_format_iceberg_options.GoogleCloudDataplexV1StorageFormatIcebergOptions(
                        metadata_location = '', ), 
                    json = openapi_client.models.google_cloud_dataplex_v1_storage_format_json_options.GoogleCloudDataplexV1StorageFormatJsonOptions(
                        encoding = '', ), 
                    mime_type = '', ),
                id = '',
                name = '',
                var_schema = openapi_client.models.google_cloud_dataplex_v1_schema.GoogleCloudDataplexV1Schema(
                    fields = [
                        openapi_client.models.google_cloud_dataplex_v1_schema_schema_field.GoogleCloudDataplexV1SchemaSchemaField(
                            description = '', 
                            mode = 'MODE_UNSPECIFIED', 
                            name = '', 
                            type = 'TYPE_UNSPECIFIED', )
                        ], 
                    partition_fields = [
                        openapi_client.models.google_cloud_dataplex_v1_schema_partition_field.GoogleCloudDataplexV1SchemaPartitionField(
                            name = '', 
                            type = 'TYPE_UNSPECIFIED', )
                        ], 
                    partition_style = 'PARTITION_STYLE_UNSPECIFIED', 
                    user_managed = True, ),
                system = 'STORAGE_SYSTEM_UNSPECIFIED',
                type = 'TYPE_UNSPECIFIED',
                uid = '',
                update_time = ''
            )
        else:
            return GoogleCloudDataplexV1Entity(
        )
        """

    def testGoogleCloudDataplexV1Entity(self):
        """Test GoogleCloudDataplexV1Entity"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

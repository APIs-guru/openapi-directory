# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_dataplex_v1_schema import GoogleCloudDataplexV1Schema

class TestGoogleCloudDataplexV1Schema(unittest.TestCase):
    """GoogleCloudDataplexV1Schema unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDataplexV1Schema:
        """Test GoogleCloudDataplexV1Schema
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDataplexV1Schema`
        """
        model = GoogleCloudDataplexV1Schema()
        if include_optional:
            return GoogleCloudDataplexV1Schema(
                fields = [
                    openapi_client.models.google_cloud_dataplex_v1_schema_schema_field.GoogleCloudDataplexV1SchemaSchemaField(
                        description = '', 
                        mode = 'MODE_UNSPECIFIED', 
                        name = '', 
                        type = 'TYPE_UNSPECIFIED', )
                    ],
                partition_fields = [
                    openapi_client.models.google_cloud_dataplex_v1_schema_partition_field.GoogleCloudDataplexV1SchemaPartitionField(
                        name = '', 
                        type = 'TYPE_UNSPECIFIED', )
                    ],
                partition_style = 'PARTITION_STYLE_UNSPECIFIED',
                user_managed = True
            )
        else:
            return GoogleCloudDataplexV1Schema(
        )
        """

    def testGoogleCloudDataplexV1Schema(self):
        """Test GoogleCloudDataplexV1Schema"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

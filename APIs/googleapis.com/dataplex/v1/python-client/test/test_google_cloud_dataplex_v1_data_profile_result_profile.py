# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_dataplex_v1_data_profile_result_profile import GoogleCloudDataplexV1DataProfileResultProfile

class TestGoogleCloudDataplexV1DataProfileResultProfile(unittest.TestCase):
    """GoogleCloudDataplexV1DataProfileResultProfile unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDataplexV1DataProfileResultProfile:
        """Test GoogleCloudDataplexV1DataProfileResultProfile
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDataplexV1DataProfileResultProfile`
        """
        model = GoogleCloudDataplexV1DataProfileResultProfile()
        if include_optional:
            return GoogleCloudDataplexV1DataProfileResultProfile(
                fields = [
                    openapi_client.models.google_cloud_dataplex_v1_data_profile_result_profile_field.GoogleCloudDataplexV1DataProfileResultProfileField(
                        mode = '', 
                        name = '', 
                        profile = openapi_client.models.google_cloud_dataplex_v1_data_profile_result_profile_field_profile_info.GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfo(
                            distinct_ratio = 1.337, 
                            double_profile = openapi_client.models.google_cloud_dataplex_v1_data_profile_result_profile_field_profile_info_double_field_info.GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo(
                                average = 1.337, 
                                max = 1.337, 
                                min = 1.337, 
                                quartiles = [
                                    1.337
                                    ], 
                                standard_deviation = 1.337, ), 
                            integer_profile = openapi_client.models.google_cloud_dataplex_v1_data_profile_result_profile_field_profile_info_integer_field_info.GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoIntegerFieldInfo(
                                average = 1.337, 
                                max = '', 
                                min = '', 
                                standard_deviation = 1.337, ), 
                            null_ratio = 1.337, 
                            string_profile = openapi_client.models.google_cloud_dataplex_v1_data_profile_result_profile_field_profile_info_string_field_info.GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoStringFieldInfo(
                                average_length = 1.337, 
                                max_length = '', 
                                min_length = '', ), 
                            top_n_values = [
                                openapi_client.models.google_cloud_dataplex_v1_data_profile_result_profile_field_profile_info_top_n_value.GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoTopNValue(
                                    count = '', 
                                    ratio = 1.337, 
                                    value = '', )
                                ], ), 
                        type = '', )
                    ]
            )
        else:
            return GoogleCloudDataplexV1DataProfileResultProfile(
        )
        """

    def testGoogleCloudDataplexV1DataProfileResultProfile(self):
        """Test GoogleCloudDataplexV1DataProfileResultProfile"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

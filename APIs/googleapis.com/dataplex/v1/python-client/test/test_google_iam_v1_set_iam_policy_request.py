# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_iam_v1_set_iam_policy_request import GoogleIamV1SetIamPolicyRequest

class TestGoogleIamV1SetIamPolicyRequest(unittest.TestCase):
    """GoogleIamV1SetIamPolicyRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleIamV1SetIamPolicyRequest:
        """Test GoogleIamV1SetIamPolicyRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleIamV1SetIamPolicyRequest`
        """
        model = GoogleIamV1SetIamPolicyRequest()
        if include_optional:
            return GoogleIamV1SetIamPolicyRequest(
                policy = openapi_client.models.google_iam_v1_policy.GoogleIamV1Policy(
                    audit_configs = [
                        openapi_client.models.google_iam_v1_audit_config.GoogleIamV1AuditConfig(
                            audit_log_configs = [
                                openapi_client.models.google_iam_v1_audit_log_config.GoogleIamV1AuditLogConfig(
                                    exempted_members = [
                                        ''
                                        ], 
                                    log_type = 'LOG_TYPE_UNSPECIFIED', )
                                ], 
                            service = '', )
                        ], 
                    bindings = [
                        openapi_client.models.google_iam_v1_binding.GoogleIamV1Binding(
                            condition = openapi_client.models.google_type_expr.GoogleTypeExpr(
                                description = '', 
                                expression = '', 
                                location = '', 
                                title = '', ), 
                            members = [
                                ''
                                ], 
                            role = '', )
                        ], 
                    etag = 'YQ==', 
                    version = 56, ),
                update_mask = ''
            )
        else:
            return GoogleIamV1SetIamPolicyRequest(
        )
        """

    def testGoogleIamV1SetIamPolicyRequest(self):
        """Test GoogleIamV1SetIamPolicyRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

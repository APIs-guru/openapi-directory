# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_dataplex_v1_lake import GoogleCloudDataplexV1Lake

class TestGoogleCloudDataplexV1Lake(unittest.TestCase):
    """GoogleCloudDataplexV1Lake unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDataplexV1Lake:
        """Test GoogleCloudDataplexV1Lake
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDataplexV1Lake`
        """
        model = GoogleCloudDataplexV1Lake()
        if include_optional:
            return GoogleCloudDataplexV1Lake(
                asset_status = openapi_client.models.google_cloud_dataplex_v1_asset_status.GoogleCloudDataplexV1AssetStatus(
                    active_assets = 56, 
                    security_policy_applying_assets = 56, 
                    update_time = '', ),
                create_time = '',
                description = '',
                display_name = '',
                labels = {
                    'key' : ''
                    },
                metastore = openapi_client.models.google_cloud_dataplex_v1_lake_metastore.GoogleCloudDataplexV1LakeMetastore(
                    service = '', ),
                metastore_status = openapi_client.models.google_cloud_dataplex_v1_lake_metastore_status.GoogleCloudDataplexV1LakeMetastoreStatus(
                    endpoint = '', 
                    message = '', 
                    state = 'STATE_UNSPECIFIED', 
                    update_time = '', ),
                name = '',
                service_account = '',
                state = 'STATE_UNSPECIFIED',
                uid = '',
                update_time = ''
            )
        else:
            return GoogleCloudDataplexV1Lake(
        )
        """

    def testGoogleCloudDataplexV1Lake(self):
        """Test GoogleCloudDataplexV1Lake"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

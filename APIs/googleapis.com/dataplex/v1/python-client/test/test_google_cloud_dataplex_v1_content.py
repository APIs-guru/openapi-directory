# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_dataplex_v1_content import GoogleCloudDataplexV1Content

class TestGoogleCloudDataplexV1Content(unittest.TestCase):
    """GoogleCloudDataplexV1Content unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDataplexV1Content:
        """Test GoogleCloudDataplexV1Content
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDataplexV1Content`
        """
        model = GoogleCloudDataplexV1Content()
        if include_optional:
            return GoogleCloudDataplexV1Content(
                create_time = '',
                data_text = '',
                description = '',
                labels = {
                    'key' : ''
                    },
                name = '',
                notebook = openapi_client.models.google_cloud_dataplex_v1_content_notebook.GoogleCloudDataplexV1ContentNotebook(
                    kernel_type = 'KERNEL_TYPE_UNSPECIFIED', ),
                path = '',
                sql_script = openapi_client.models.google_cloud_dataplex_v1_content_sql_script.GoogleCloudDataplexV1ContentSqlScript(
                    engine = 'QUERY_ENGINE_UNSPECIFIED', ),
                uid = '',
                update_time = ''
            )
        else:
            return GoogleCloudDataplexV1Content(
        )
        """

    def testGoogleCloudDataplexV1Content(self):
        """Test GoogleCloudDataplexV1Content"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

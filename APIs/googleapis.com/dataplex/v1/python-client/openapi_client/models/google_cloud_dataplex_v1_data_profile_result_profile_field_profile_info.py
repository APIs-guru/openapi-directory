# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_dataplex_v1_data_profile_result_profile_field_profile_info_double_field_info import GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo
from openapi_client.models.google_cloud_dataplex_v1_data_profile_result_profile_field_profile_info_integer_field_info import GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoIntegerFieldInfo
from openapi_client.models.google_cloud_dataplex_v1_data_profile_result_profile_field_profile_info_string_field_info import GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoStringFieldInfo
from openapi_client.models.google_cloud_dataplex_v1_data_profile_result_profile_field_profile_info_top_n_value import GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoTopNValue
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfo(BaseModel):
    """
    The profile information for each field type.
    """ # noqa: E501
    distinct_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ratio of rows with distinct values against total scanned rows. Not available for complex non-groupable field type RECORD and fields with REPEATABLE mode.", alias="distinctRatio")
    double_profile: Optional[GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo] = Field(default=None, alias="doubleProfile")
    integer_profile: Optional[GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoIntegerFieldInfo] = Field(default=None, alias="integerProfile")
    null_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ratio of rows with null value against total scanned rows.", alias="nullRatio")
    string_profile: Optional[GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoStringFieldInfo] = Field(default=None, alias="stringProfile")
    top_n_values: Optional[List[GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoTopNValue]] = Field(default=None, description="The list of top N non-null values, frequency and ratio with which they occur in the scanned data. N is 10 or equal to the number of distinct values in the field, whichever is smaller. Not available for complex non-groupable field type RECORD and fields with REPEATABLE mode.", alias="topNValues")
    __properties: ClassVar[List[str]] = ["distinctRatio", "doubleProfile", "integerProfile", "nullRatio", "stringProfile", "topNValues"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of double_profile
        if self.double_profile:
            _dict['doubleProfile'] = self.double_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integer_profile
        if self.integer_profile:
            _dict['integerProfile'] = self.integer_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of string_profile
        if self.string_profile:
            _dict['stringProfile'] = self.string_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in top_n_values (list)
        _items = []
        if self.top_n_values:
            for _item_top_n_values in self.top_n_values:
                if _item_top_n_values:
                    _items.append(_item_top_n_values.to_dict())
            _dict['topNValues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "distinctRatio": obj.get("distinctRatio"),
            "doubleProfile": GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.from_dict(obj["doubleProfile"]) if obj.get("doubleProfile") is not None else None,
            "integerProfile": GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoIntegerFieldInfo.from_dict(obj["integerProfile"]) if obj.get("integerProfile") is not None else None,
            "nullRatio": obj.get("nullRatio"),
            "stringProfile": GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoStringFieldInfo.from_dict(obj["stringProfile"]) if obj.get("stringProfile") is not None else None,
            "topNValues": [GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoTopNValue.from_dict(_item) for _item in obj["topNValues"]] if obj.get("topNValues") is not None else None
        })
        return _obj



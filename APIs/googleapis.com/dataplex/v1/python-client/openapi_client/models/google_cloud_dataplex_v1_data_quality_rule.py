# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_dataplex_v1_data_quality_rule_range_expectation import GoogleCloudDataplexV1DataQualityRuleRangeExpectation
from openapi_client.models.google_cloud_dataplex_v1_data_quality_rule_regex_expectation import GoogleCloudDataplexV1DataQualityRuleRegexExpectation
from openapi_client.models.google_cloud_dataplex_v1_data_quality_rule_row_condition_expectation import GoogleCloudDataplexV1DataQualityRuleRowConditionExpectation
from openapi_client.models.google_cloud_dataplex_v1_data_quality_rule_set_expectation import GoogleCloudDataplexV1DataQualityRuleSetExpectation
from openapi_client.models.google_cloud_dataplex_v1_data_quality_rule_statistic_range_expectation import GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation
from openapi_client.models.google_cloud_dataplex_v1_data_quality_rule_table_condition_expectation import GoogleCloudDataplexV1DataQualityRuleTableConditionExpectation
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1DataQualityRule(BaseModel):
    """
    A rule captures data quality intent about a data source.
    """ # noqa: E501
    column: Optional[StrictStr] = Field(default=None, description="Optional. The unnested column which this rule is evaluated against.")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Description of the rule. The maximum length is 1,024 characters.")
    dimension: Optional[StrictStr] = Field(default=None, description="Required. The dimension a rule belongs to. Results are also aggregated at the dimension level. Supported dimensions are \"COMPLETENESS\", \"ACCURACY\", \"CONSISTENCY\", \"VALIDITY\", \"UNIQUENESS\", \"INTEGRITY\"")
    ignore_null: Optional[StrictBool] = Field(default=None, description="Optional. Rows with null values will automatically fail a rule, unless ignore_null is true. In that case, such null rows are trivially considered passing.This field is only valid for the following type of rules: RangeExpectation RegexExpectation SetExpectation UniquenessExpectation", alias="ignoreNull")
    name: Optional[StrictStr] = Field(default=None, description="Optional. A mutable name for the rule. The name must contain only letters (a-z, A-Z), numbers (0-9), or hyphens (-). The maximum length is 63 characters. Must start with a letter. Must end with a number or a letter.")
    non_null_expectation: Optional[Dict[str, Any]] = Field(default=None, description="Evaluates whether each column value is null.", alias="nonNullExpectation")
    range_expectation: Optional[GoogleCloudDataplexV1DataQualityRuleRangeExpectation] = Field(default=None, alias="rangeExpectation")
    regex_expectation: Optional[GoogleCloudDataplexV1DataQualityRuleRegexExpectation] = Field(default=None, alias="regexExpectation")
    row_condition_expectation: Optional[GoogleCloudDataplexV1DataQualityRuleRowConditionExpectation] = Field(default=None, alias="rowConditionExpectation")
    set_expectation: Optional[GoogleCloudDataplexV1DataQualityRuleSetExpectation] = Field(default=None, alias="setExpectation")
    statistic_range_expectation: Optional[GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation] = Field(default=None, alias="statisticRangeExpectation")
    table_condition_expectation: Optional[GoogleCloudDataplexV1DataQualityRuleTableConditionExpectation] = Field(default=None, alias="tableConditionExpectation")
    threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of 0.0, 1.0.0 indicates default value (i.e. 1.0).This field is only valid for row-level type rules.")
    uniqueness_expectation: Optional[Dict[str, Any]] = Field(default=None, description="Evaluates whether the column has duplicates.", alias="uniquenessExpectation")
    __properties: ClassVar[List[str]] = ["column", "description", "dimension", "ignoreNull", "name", "nonNullExpectation", "rangeExpectation", "regexExpectation", "rowConditionExpectation", "setExpectation", "statisticRangeExpectation", "tableConditionExpectation", "threshold", "uniquenessExpectation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataQualityRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of range_expectation
        if self.range_expectation:
            _dict['rangeExpectation'] = self.range_expectation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of regex_expectation
        if self.regex_expectation:
            _dict['regexExpectation'] = self.regex_expectation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of row_condition_expectation
        if self.row_condition_expectation:
            _dict['rowConditionExpectation'] = self.row_condition_expectation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of set_expectation
        if self.set_expectation:
            _dict['setExpectation'] = self.set_expectation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of statistic_range_expectation
        if self.statistic_range_expectation:
            _dict['statisticRangeExpectation'] = self.statistic_range_expectation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of table_condition_expectation
        if self.table_condition_expectation:
            _dict['tableConditionExpectation'] = self.table_condition_expectation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataQualityRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "column": obj.get("column"),
            "description": obj.get("description"),
            "dimension": obj.get("dimension"),
            "ignoreNull": obj.get("ignoreNull"),
            "name": obj.get("name"),
            "nonNullExpectation": obj.get("nonNullExpectation"),
            "rangeExpectation": GoogleCloudDataplexV1DataQualityRuleRangeExpectation.from_dict(obj["rangeExpectation"]) if obj.get("rangeExpectation") is not None else None,
            "regexExpectation": GoogleCloudDataplexV1DataQualityRuleRegexExpectation.from_dict(obj["regexExpectation"]) if obj.get("regexExpectation") is not None else None,
            "rowConditionExpectation": GoogleCloudDataplexV1DataQualityRuleRowConditionExpectation.from_dict(obj["rowConditionExpectation"]) if obj.get("rowConditionExpectation") is not None else None,
            "setExpectation": GoogleCloudDataplexV1DataQualityRuleSetExpectation.from_dict(obj["setExpectation"]) if obj.get("setExpectation") is not None else None,
            "statisticRangeExpectation": GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation.from_dict(obj["statisticRangeExpectation"]) if obj.get("statisticRangeExpectation") is not None else None,
            "tableConditionExpectation": GoogleCloudDataplexV1DataQualityRuleTableConditionExpectation.from_dict(obj["tableConditionExpectation"]) if obj.get("tableConditionExpectation") is not None else None,
            "threshold": obj.get("threshold"),
            "uniquenessExpectation": obj.get("uniquenessExpectation")
        })
        return _obj



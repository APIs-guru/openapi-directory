# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_dataplex_v1_data_quality_rule import GoogleCloudDataplexV1DataQualityRule
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1DataQualityRuleResult(BaseModel):
    """
    DataQualityRuleResult provides a more detailed, per-rule view of the results.
    """ # noqa: E501
    evaluated_count: Optional[StrictStr] = Field(default=None, description="The number of rows a rule was evaluated against.This field is only valid for row-level type rules.Evaluated count can be configured to either include all rows (default) - with null rows automatically failing rule evaluation, or exclude null rows from the evaluated_count, by setting ignore_nulls = true.", alias="evaluatedCount")
    failing_rows_query: Optional[StrictStr] = Field(default=None, description="The query to find rows that did not pass this rule.This field is only valid for row-level type rules.", alias="failingRowsQuery")
    null_count: Optional[StrictStr] = Field(default=None, description="The number of rows with null values in the specified column.", alias="nullCount")
    pass_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The ratio of passed_count / evaluated_count.This field is only valid for row-level type rules.", alias="passRatio")
    passed: Optional[StrictBool] = Field(default=None, description="Whether the rule passed or failed.")
    passed_count: Optional[StrictStr] = Field(default=None, description="The number of rows which passed a rule evaluation.This field is only valid for row-level type rules.", alias="passedCount")
    rule: Optional[GoogleCloudDataplexV1DataQualityRule] = None
    __properties: ClassVar[List[str]] = ["evaluatedCount", "failingRowsQuery", "nullCount", "passRatio", "passed", "passedCount", "rule"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataQualityRuleResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rule
        if self.rule:
            _dict['rule'] = self.rule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataQualityRuleResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "evaluatedCount": obj.get("evaluatedCount"),
            "failingRowsQuery": obj.get("failingRowsQuery"),
            "nullCount": obj.get("nullCount"),
            "passRatio": obj.get("passRatio"),
            "passed": obj.get("passed"),
            "passedCount": obj.get("passedCount"),
            "rule": GoogleCloudDataplexV1DataQualityRule.from_dict(obj["rule"]) if obj.get("rule") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1DataScanEventDataQualityResult(BaseModel):
    """
    Data quality result for data scan job.
    """ # noqa: E501
    column_score: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="The score of each column scanned in the data scan job. The key of the map is the name of the column. The value is the data quality score for the column.The score ranges between 0, 100 (up to two decimal points).", alias="columnScore")
    dimension_passed: Optional[Dict[str, StrictBool]] = Field(default=None, description="The result of each dimension for data quality result. The key of the map is the name of the dimension. The value is the bool value depicting whether the dimension result was pass or not.", alias="dimensionPassed")
    dimension_score: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="The score of each dimension for data quality result. The key of the map is the name of the dimension. The value is the data quality score for the dimension.The score ranges between 0, 100 (up to two decimal points).", alias="dimensionScore")
    passed: Optional[StrictBool] = Field(default=None, description="Whether the data quality result was pass or not.")
    row_count: Optional[StrictStr] = Field(default=None, description="The count of rows processed in the data scan job.", alias="rowCount")
    score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The table-level data quality score for the data scan job.The data quality score ranges between 0, 100 (up to two decimal points).")
    __properties: ClassVar[List[str]] = ["columnScore", "dimensionPassed", "dimensionScore", "passed", "rowCount", "score"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataScanEventDataQualityResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataScanEventDataQualityResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "columnScore": obj.get("columnScore"),
            "dimensionPassed": obj.get("dimensionPassed"),
            "dimensionScore": obj.get("dimensionScore"),
            "passed": obj.get("passed"),
            "rowCount": obj.get("rowCount"),
            "score": obj.get("score")
        })
        return _obj



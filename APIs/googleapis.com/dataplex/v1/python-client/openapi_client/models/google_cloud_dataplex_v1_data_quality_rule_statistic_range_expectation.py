# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation(BaseModel):
    """
    Evaluates whether the column aggregate statistic lies between a specified range.
    """ # noqa: E501
    max_value: Optional[StrictStr] = Field(default=None, description="Optional. The maximum column statistic value allowed for a row to pass this validation.At least one of min_value and max_value need to be provided.", alias="maxValue")
    min_value: Optional[StrictStr] = Field(default=None, description="Optional. The minimum column statistic value allowed for a row to pass this validation.At least one of min_value and max_value need to be provided.", alias="minValue")
    statistic: Optional[StrictStr] = Field(default=None, description="Optional. The aggregate metric to evaluate.")
    strict_max_enabled: Optional[StrictBool] = Field(default=None, description="Optional. Whether column statistic needs to be strictly lesser than ('<') the maximum, or if equality is allowed.Only relevant if a max_value has been defined. Default = false.", alias="strictMaxEnabled")
    strict_min_enabled: Optional[StrictBool] = Field(default=None, description="Optional. Whether column statistic needs to be strictly greater than ('>') the minimum, or if equality is allowed.Only relevant if a min_value has been defined. Default = false.", alias="strictMinEnabled")
    __properties: ClassVar[List[str]] = ["maxValue", "minValue", "statistic", "strictMaxEnabled", "strictMinEnabled"]

    @field_validator('statistic')
    def statistic_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATISTIC_UNDEFINED', 'MEAN', 'MIN', 'MAX']):
            raise ValueError("must be one of enum values ('STATISTIC_UNDEFINED', 'MEAN', 'MIN', 'MAX')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maxValue": obj.get("maxValue"),
            "minValue": obj.get("minValue"),
            "statistic": obj.get("statistic"),
            "strictMaxEnabled": obj.get("strictMaxEnabled"),
            "strictMinEnabled": obj.get("strictMinEnabled")
        })
        return _obj



# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1DataQualityScanRuleResult(BaseModel):
    """
    Information about the result of a data quality rule for data quality scan. The monitored resource is 'DataScan'.
    """ # noqa: E501
    column: Optional[StrictStr] = Field(default=None, description="The column which this rule is evaluated against.")
    data_source: Optional[StrictStr] = Field(default=None, description="The data source of the data scan (e.g. BigQuery table name).", alias="dataSource")
    evaluated_row_count: Optional[StrictStr] = Field(default=None, description="The number of rows evaluated against the data quality rule. This field is only valid for rules of PER_ROW evaluation type.", alias="evaluatedRowCount")
    evalution_type: Optional[StrictStr] = Field(default=None, description="The evaluation type of the data quality rule.", alias="evalutionType")
    job_id: Optional[StrictStr] = Field(default=None, description="Identifier of the specific data scan job this log entry is for.", alias="jobId")
    null_row_count: Optional[StrictStr] = Field(default=None, description="The number of rows with null values in the specified column.", alias="nullRowCount")
    passed_row_count: Optional[StrictStr] = Field(default=None, description="The number of rows which passed a rule evaluation. This field is only valid for rules of PER_ROW evaluation type.", alias="passedRowCount")
    result: Optional[StrictStr] = Field(default=None, description="The result of the data quality rule.")
    rule_dimension: Optional[StrictStr] = Field(default=None, description="The dimension of the data quality rule.", alias="ruleDimension")
    rule_name: Optional[StrictStr] = Field(default=None, description="The name of the data quality rule.", alias="ruleName")
    rule_type: Optional[StrictStr] = Field(default=None, description="The type of the data quality rule.", alias="ruleType")
    threshold_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The passing threshold (0.0, 100.0) of the data quality rule.", alias="thresholdPercent")
    __properties: ClassVar[List[str]] = ["column", "dataSource", "evaluatedRowCount", "evalutionType", "jobId", "nullRowCount", "passedRowCount", "result", "ruleDimension", "ruleName", "ruleType", "thresholdPercent"]

    @field_validator('evalution_type')
    def evalution_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EVALUATION_TYPE_UNSPECIFIED', 'PER_ROW', 'AGGREGATE']):
            raise ValueError("must be one of enum values ('EVALUATION_TYPE_UNSPECIFIED', 'PER_ROW', 'AGGREGATE')")
        return value

    @field_validator('result')
    def result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESULT_UNSPECIFIED', 'PASSED', 'FAILED']):
            raise ValueError("must be one of enum values ('RESULT_UNSPECIFIED', 'PASSED', 'FAILED')")
        return value

    @field_validator('rule_type')
    def rule_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RULE_TYPE_UNSPECIFIED', 'NON_NULL_EXPECTATION', 'RANGE_EXPECTATION', 'REGEX_EXPECTATION', 'ROW_CONDITION_EXPECTATION', 'SET_EXPECTATION', 'STATISTIC_RANGE_EXPECTATION', 'TABLE_CONDITION_EXPECTATION', 'UNIQUENESS_EXPECTATION']):
            raise ValueError("must be one of enum values ('RULE_TYPE_UNSPECIFIED', 'NON_NULL_EXPECTATION', 'RANGE_EXPECTATION', 'REGEX_EXPECTATION', 'ROW_CONDITION_EXPECTATION', 'SET_EXPECTATION', 'STATISTIC_RANGE_EXPECTATION', 'TABLE_CONDITION_EXPECTATION', 'UNIQUENESS_EXPECTATION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataQualityScanRuleResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataQualityScanRuleResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "column": obj.get("column"),
            "dataSource": obj.get("dataSource"),
            "evaluatedRowCount": obj.get("evaluatedRowCount"),
            "evalutionType": obj.get("evalutionType"),
            "jobId": obj.get("jobId"),
            "nullRowCount": obj.get("nullRowCount"),
            "passedRowCount": obj.get("passedRowCount"),
            "result": obj.get("result"),
            "ruleDimension": obj.get("ruleDimension"),
            "ruleName": obj.get("ruleName"),
            "ruleType": obj.get("ruleType"),
            "thresholdPercent": obj.get("thresholdPercent")
        })
        return _obj



# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dataplex_v1_task_execution_spec import GoogleCloudDataplexV1TaskExecutionSpec
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1Job(BaseModel):
    """
    A job represents an instance of a task.
    """ # noqa: E501
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the job ended.", alias="endTime")
    execution_spec: Optional[GoogleCloudDataplexV1TaskExecutionSpec] = Field(default=None, alias="executionSpec")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Output only. User-defined labels for the task.")
    message: Optional[StrictStr] = Field(default=None, description="Output only. Additional information about the current state.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The relative resource name of the job, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/tasks/{task_id}/jobs/{job_id}.")
    retry_count: Optional[StrictInt] = Field(default=None, description="Output only. The number of times the job has been retried (excluding the initial attempt).", alias="retryCount")
    service: Optional[StrictStr] = Field(default=None, description="Output only. The underlying service running a job.")
    service_job: Optional[StrictStr] = Field(default=None, description="Output only. The full resource name for the job run under a particular service.", alias="serviceJob")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the job was started.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Execution state for the job.")
    trigger: Optional[StrictStr] = Field(default=None, description="Output only. Job execution trigger.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. System generated globally unique ID for the job.")
    __properties: ClassVar[List[str]] = ["endTime", "executionSpec", "labels", "message", "name", "retryCount", "service", "serviceJob", "startTime", "state", "trigger", "uid"]

    @field_validator('service')
    def service_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SERVICE_UNSPECIFIED', 'DATAPROC']):
            raise ValueError("must be one of enum values ('SERVICE_UNSPECIFIED', 'DATAPROC')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'RUNNING', 'CANCELLING', 'CANCELLED', 'SUCCEEDED', 'FAILED', 'ABORTED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'RUNNING', 'CANCELLING', 'CANCELLED', 'SUCCEEDED', 'FAILED', 'ABORTED')")
        return value

    @field_validator('trigger')
    def trigger_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRIGGER_UNSPECIFIED', 'TASK_CONFIG', 'RUN_REQUEST']):
            raise ValueError("must be one of enum values ('TRIGGER_UNSPECIFIED', 'TASK_CONFIG', 'RUN_REQUEST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "end_time",
            "labels",
            "message",
            "name",
            "retry_count",
            "service",
            "service_job",
            "start_time",
            "state",
            "trigger",
            "uid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of execution_spec
        if self.execution_spec:
            _dict['executionSpec'] = self.execution_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTime": obj.get("endTime"),
            "executionSpec": GoogleCloudDataplexV1TaskExecutionSpec.from_dict(obj["executionSpec"]) if obj.get("executionSpec") is not None else None,
            "labels": obj.get("labels"),
            "message": obj.get("message"),
            "name": obj.get("name"),
            "retryCount": obj.get("retryCount"),
            "service": obj.get("service"),
            "serviceJob": obj.get("serviceJob"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "trigger": obj.get("trigger"),
            "uid": obj.get("uid")
        })
        return _obj



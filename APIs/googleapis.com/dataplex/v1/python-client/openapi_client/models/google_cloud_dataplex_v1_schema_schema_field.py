# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1SchemaSchemaField(BaseModel):
    """
    Represents a column field within a table schema.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Optional. User friendly field description. Must be less than or equal to 1024 characters.")
    fields: Optional[List[GoogleCloudDataplexV1SchemaSchemaField]] = Field(default=None, description="Optional. Any nested field for complex types.")
    mode: Optional[StrictStr] = Field(default=None, description="Required. Additional field semantics.")
    name: Optional[StrictStr] = Field(default=None, description="Required. The name of the field. Must contain only letters, numbers and underscores, with a maximum length of 767 characters, and must begin with a letter or underscore.")
    type: Optional[StrictStr] = Field(default=None, description="Required. The type of field.")
    __properties: ClassVar[List[str]] = ["description", "fields", "mode", "name", "type"]

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MODE_UNSPECIFIED', 'REQUIRED', 'NULLABLE', 'REPEATED']):
            raise ValueError("must be one of enum values ('MODE_UNSPECIFIED', 'REQUIRED', 'NULLABLE', 'REPEATED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'BOOLEAN', 'BYTE', 'INT16', 'INT32', 'INT64', 'FLOAT', 'DOUBLE', 'DECIMAL', 'STRING', 'BINARY', 'TIMESTAMP', 'DATE', 'TIME', 'RECORD', 'NULL']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'BOOLEAN', 'BYTE', 'INT16', 'INT32', 'INT64', 'FLOAT', 'DOUBLE', 'DECIMAL', 'STRING', 'BINARY', 'TIMESTAMP', 'DATE', 'TIME', 'RECORD', 'NULL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1SchemaSchemaField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item_fields in self.fields:
                if _item_fields:
                    _items.append(_item_fields.to_dict())
            _dict['fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1SchemaSchemaField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "fields": [GoogleCloudDataplexV1SchemaSchemaField.from_dict(_item) for _item in obj["fields"]] if obj.get("fields") is not None else None,
            "mode": obj.get("mode"),
            "name": obj.get("name"),
            "type": obj.get("type")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
GoogleCloudDataplexV1SchemaSchemaField.model_rebuild(raise_errors=False)


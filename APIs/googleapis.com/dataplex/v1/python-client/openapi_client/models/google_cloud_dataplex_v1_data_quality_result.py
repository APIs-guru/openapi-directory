# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_dataplex_v1_data_quality_column_result import GoogleCloudDataplexV1DataQualityColumnResult
from openapi_client.models.google_cloud_dataplex_v1_data_quality_dimension_result import GoogleCloudDataplexV1DataQualityDimensionResult
from openapi_client.models.google_cloud_dataplex_v1_data_quality_result_post_scan_actions_result import GoogleCloudDataplexV1DataQualityResultPostScanActionsResult
from openapi_client.models.google_cloud_dataplex_v1_data_quality_rule_result import GoogleCloudDataplexV1DataQualityRuleResult
from openapi_client.models.google_cloud_dataplex_v1_scanned_data import GoogleCloudDataplexV1ScannedData
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1DataQualityResult(BaseModel):
    """
    The output of a DataQualityScan.
    """ # noqa: E501
    columns: Optional[List[GoogleCloudDataplexV1DataQualityColumnResult]] = Field(default=None, description="Output only. A list of results at the column level.A column will have a corresponding DataQualityColumnResult if and only if there is at least one rule with the 'column' field set to it.")
    dimensions: Optional[List[GoogleCloudDataplexV1DataQualityDimensionResult]] = Field(default=None, description="A list of results at the dimension level.A dimension will have a corresponding DataQualityDimensionResult if and only if there is at least one rule with the 'dimension' field set to it.")
    passed: Optional[StrictBool] = Field(default=None, description="Overall data quality result -- true if all rules passed.")
    post_scan_actions_result: Optional[GoogleCloudDataplexV1DataQualityResultPostScanActionsResult] = Field(default=None, alias="postScanActionsResult")
    row_count: Optional[StrictStr] = Field(default=None, description="The count of rows processed.", alias="rowCount")
    rules: Optional[List[GoogleCloudDataplexV1DataQualityRuleResult]] = Field(default=None, description="A list of all the rules in a job, and their results.")
    scanned_data: Optional[GoogleCloudDataplexV1ScannedData] = Field(default=None, alias="scannedData")
    score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. The overall data quality score.The score ranges between 0, 100 (up to two decimal points).")
    __properties: ClassVar[List[str]] = ["columns", "dimensions", "passed", "postScanActionsResult", "rowCount", "rules", "scannedData", "score"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataQualityResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "columns",
            "score",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in columns (list)
        _items = []
        if self.columns:
            for _item_columns in self.columns:
                if _item_columns:
                    _items.append(_item_columns.to_dict())
            _dict['columns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dimensions (list)
        _items = []
        if self.dimensions:
            for _item_dimensions in self.dimensions:
                if _item_dimensions:
                    _items.append(_item_dimensions.to_dict())
            _dict['dimensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of post_scan_actions_result
        if self.post_scan_actions_result:
            _dict['postScanActionsResult'] = self.post_scan_actions_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item_rules in self.rules:
                if _item_rules:
                    _items.append(_item_rules.to_dict())
            _dict['rules'] = _items
        # override the default output from pydantic by calling `to_dict()` of scanned_data
        if self.scanned_data:
            _dict['scannedData'] = self.scanned_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataQualityResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "columns": [GoogleCloudDataplexV1DataQualityColumnResult.from_dict(_item) for _item in obj["columns"]] if obj.get("columns") is not None else None,
            "dimensions": [GoogleCloudDataplexV1DataQualityDimensionResult.from_dict(_item) for _item in obj["dimensions"]] if obj.get("dimensions") is not None else None,
            "passed": obj.get("passed"),
            "postScanActionsResult": GoogleCloudDataplexV1DataQualityResultPostScanActionsResult.from_dict(obj["postScanActionsResult"]) if obj.get("postScanActionsResult") is not None else None,
            "rowCount": obj.get("rowCount"),
            "rules": [GoogleCloudDataplexV1DataQualityRuleResult.from_dict(_item) for _item in obj["rules"]] if obj.get("rules") is not None else None,
            "scannedData": GoogleCloudDataplexV1ScannedData.from_dict(obj["scannedData"]) if obj.get("scannedData") is not None else None,
            "score": obj.get("score")
        })
        return _obj



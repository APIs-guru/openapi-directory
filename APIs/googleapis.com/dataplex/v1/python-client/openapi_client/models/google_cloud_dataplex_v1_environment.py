# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dataplex_v1_environment_endpoints import GoogleCloudDataplexV1EnvironmentEndpoints
from openapi_client.models.google_cloud_dataplex_v1_environment_infrastructure_spec import GoogleCloudDataplexV1EnvironmentInfrastructureSpec
from openapi_client.models.google_cloud_dataplex_v1_environment_session_spec import GoogleCloudDataplexV1EnvironmentSessionSpec
from openapi_client.models.google_cloud_dataplex_v1_environment_session_status import GoogleCloudDataplexV1EnvironmentSessionStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1Environment(BaseModel):
    """
    Environment represents a user-visible compute infrastructure for analytics within a lake.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Environment creation time.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Description of the environment.")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. User friendly display name.", alias="displayName")
    endpoints: Optional[GoogleCloudDataplexV1EnvironmentEndpoints] = None
    infrastructure_spec: Optional[GoogleCloudDataplexV1EnvironmentInfrastructureSpec] = Field(default=None, alias="infrastructureSpec")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. User defined labels for the environment.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The relative resource name of the environment, of the form: projects/{project_id}/locations/{location_id}/lakes/{lake_id}/environment/{environment_id}")
    session_spec: Optional[GoogleCloudDataplexV1EnvironmentSessionSpec] = Field(default=None, alias="sessionSpec")
    session_status: Optional[GoogleCloudDataplexV1EnvironmentSessionStatus] = Field(default=None, alias="sessionStatus")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Current state of the environment.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. System generated globally unique ID for the environment. This ID will be different if the environment is deleted and re-created with the same name.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the environment was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "displayName", "endpoints", "infrastructureSpec", "labels", "name", "sessionSpec", "sessionStatus", "state", "uid", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'CREATING', 'DELETING', 'ACTION_REQUIRED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'CREATING', 'DELETING', 'ACTION_REQUIRED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1Environment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "state",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of endpoints
        if self.endpoints:
            _dict['endpoints'] = self.endpoints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of infrastructure_spec
        if self.infrastructure_spec:
            _dict['infrastructureSpec'] = self.infrastructure_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of session_spec
        if self.session_spec:
            _dict['sessionSpec'] = self.session_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of session_status
        if self.session_status:
            _dict['sessionStatus'] = self.session_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1Environment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "endpoints": GoogleCloudDataplexV1EnvironmentEndpoints.from_dict(obj["endpoints"]) if obj.get("endpoints") is not None else None,
            "infrastructureSpec": GoogleCloudDataplexV1EnvironmentInfrastructureSpec.from_dict(obj["infrastructureSpec"]) if obj.get("infrastructureSpec") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "sessionSpec": GoogleCloudDataplexV1EnvironmentSessionSpec.from_dict(obj["sessionSpec"]) if obj.get("sessionSpec") is not None else None,
            "sessionStatus": GoogleCloudDataplexV1EnvironmentSessionStatus.from_dict(obj["sessionStatus"]) if obj.get("sessionStatus") is not None else None,
            "state": obj.get("state"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



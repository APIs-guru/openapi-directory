# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dataplex_v1_entity_compatibility_status import GoogleCloudDataplexV1EntityCompatibilityStatus
from openapi_client.models.google_cloud_dataplex_v1_schema import GoogleCloudDataplexV1Schema
from openapi_client.models.google_cloud_dataplex_v1_storage_access import GoogleCloudDataplexV1StorageAccess
from openapi_client.models.google_cloud_dataplex_v1_storage_format import GoogleCloudDataplexV1StorageFormat
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1Entity(BaseModel):
    """
    Represents tables and fileset metadata contained within a zone.
    """ # noqa: E501
    access: Optional[GoogleCloudDataplexV1StorageAccess] = None
    asset: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The ID of the asset associated with the storage location containing the entity data. The entity must be with in the same zone with the asset.")
    catalog_entry: Optional[StrictStr] = Field(default=None, description="Output only. The name of the associated Data Catalog entry.", alias="catalogEntry")
    compatibility: Optional[GoogleCloudDataplexV1EntityCompatibilityStatus] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the entity was created.", alias="createTime")
    data_path: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The storage path of the entity data. For Cloud Storage data, this is the fully-qualified path to the entity, such as gs://bucket/path/to/data. For BigQuery data, this is the name of the table resource, such as projects/project_id/datasets/dataset_id/tables/table_id.", alias="dataPath")
    data_path_pattern: Optional[StrictStr] = Field(default=None, description="Optional. The set of items within the data path constituting the data in the entity, represented as a glob path. Example: gs://bucket/path/to/data/**/*.csv.", alias="dataPathPattern")
    description: Optional[StrictStr] = Field(default=None, description="Optional. User friendly longer description text. Must be shorter than or equal to 1024 characters.")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. Display name must be shorter than or equal to 256 characters.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="Optional. The etag associated with the entity, which can be retrieved with a GetEntity request. Required for update and delete requests.")
    format: Optional[GoogleCloudDataplexV1StorageFormat] = None
    id: Optional[StrictStr] = Field(default=None, description="Required. A user-provided entity ID. It is mutable, and will be used as the published table name. Specifying a new ID in an update entity request will override the existing value. The ID must contain only letters (a-z, A-Z), numbers (0-9), and underscores, and consist of 256 or fewer characters.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the entity, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}/entities/{id}.")
    var_schema: Optional[GoogleCloudDataplexV1Schema] = Field(default=None, alias="schema")
    system: Optional[StrictStr] = Field(default=None, description="Required. Immutable. Identifies the storage system of the entity data.")
    type: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The type of entity.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. System generated unique ID for the Entity. This ID will be different if the Entity is deleted and re-created with the same name.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the entity was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["access", "asset", "catalogEntry", "compatibility", "createTime", "dataPath", "dataPathPattern", "description", "displayName", "etag", "format", "id", "name", "schema", "system", "type", "uid", "updateTime"]

    @field_validator('system')
    def system_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STORAGE_SYSTEM_UNSPECIFIED', 'CLOUD_STORAGE', 'BIGQUERY']):
            raise ValueError("must be one of enum values ('STORAGE_SYSTEM_UNSPECIFIED', 'CLOUD_STORAGE', 'BIGQUERY')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'TABLE', 'FILESET']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'TABLE', 'FILESET')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1Entity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "catalog_entry",
            "create_time",
            "name",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access
        if self.access:
            _dict['access'] = self.access.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compatibility
        if self.compatibility:
            _dict['compatibility'] = self.compatibility.to_dict()
        # override the default output from pydantic by calling `to_dict()` of format
        if self.format:
            _dict['format'] = self.format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1Entity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access": GoogleCloudDataplexV1StorageAccess.from_dict(obj["access"]) if obj.get("access") is not None else None,
            "asset": obj.get("asset"),
            "catalogEntry": obj.get("catalogEntry"),
            "compatibility": GoogleCloudDataplexV1EntityCompatibilityStatus.from_dict(obj["compatibility"]) if obj.get("compatibility") is not None else None,
            "createTime": obj.get("createTime"),
            "dataPath": obj.get("dataPath"),
            "dataPathPattern": obj.get("dataPathPattern"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "format": GoogleCloudDataplexV1StorageFormat.from_dict(obj["format"]) if obj.get("format") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "schema": GoogleCloudDataplexV1Schema.from_dict(obj["schema"]) if obj.get("schema") is not None else None,
            "system": obj.get("system"),
            "type": obj.get("type"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



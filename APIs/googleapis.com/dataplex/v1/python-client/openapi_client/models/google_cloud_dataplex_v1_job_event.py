# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1JobEvent(BaseModel):
    """
    The payload associated with Job logs that contains events describing jobs that have run within a Lake.
    """ # noqa: E501
    end_time: Optional[StrictStr] = Field(default=None, description="The time when the job ended running.", alias="endTime")
    execution_trigger: Optional[StrictStr] = Field(default=None, description="Job execution trigger.", alias="executionTrigger")
    job_id: Optional[StrictStr] = Field(default=None, description="The unique id identifying the job.", alias="jobId")
    message: Optional[StrictStr] = Field(default=None, description="The log message.")
    retries: Optional[StrictInt] = Field(default=None, description="The number of retries.")
    service: Optional[StrictStr] = Field(default=None, description="The service used to execute the job.")
    service_job: Optional[StrictStr] = Field(default=None, description="The reference to the job within the service.", alias="serviceJob")
    start_time: Optional[StrictStr] = Field(default=None, description="The time when the job started running.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="The job state on completion.")
    type: Optional[StrictStr] = Field(default=None, description="The type of the job.")
    __properties: ClassVar[List[str]] = ["endTime", "executionTrigger", "jobId", "message", "retries", "service", "serviceJob", "startTime", "state", "type"]

    @field_validator('execution_trigger')
    def execution_trigger_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXECUTION_TRIGGER_UNSPECIFIED', 'TASK_CONFIG', 'RUN_REQUEST']):
            raise ValueError("must be one of enum values ('EXECUTION_TRIGGER_UNSPECIFIED', 'TASK_CONFIG', 'RUN_REQUEST')")
        return value

    @field_validator('service')
    def service_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SERVICE_UNSPECIFIED', 'DATAPROC']):
            raise ValueError("must be one of enum values ('SERVICE_UNSPECIFIED', 'DATAPROC')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'SUCCEEDED', 'FAILED', 'CANCELLED', 'ABORTED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'SUCCEEDED', 'FAILED', 'CANCELLED', 'ABORTED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'SPARK', 'NOTEBOOK']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'SPARK', 'NOTEBOOK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1JobEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1JobEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTime": obj.get("endTime"),
            "executionTrigger": obj.get("executionTrigger"),
            "jobId": obj.get("jobId"),
            "message": obj.get("message"),
            "retries": obj.get("retries"),
            "service": obj.get("service"),
            "serviceJob": obj.get("serviceJob"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "type": obj.get("type")
        })
        return _obj



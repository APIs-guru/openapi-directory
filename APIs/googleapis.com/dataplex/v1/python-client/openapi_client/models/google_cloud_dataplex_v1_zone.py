# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dataplex_v1_asset_status import GoogleCloudDataplexV1AssetStatus
from openapi_client.models.google_cloud_dataplex_v1_zone_discovery_spec import GoogleCloudDataplexV1ZoneDiscoverySpec
from openapi_client.models.google_cloud_dataplex_v1_zone_resource_spec import GoogleCloudDataplexV1ZoneResourceSpec
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1Zone(BaseModel):
    """
    A zone represents a logical group of related assets within a lake. A zone can be used to map to organizational structure or represent stages of data readiness from raw to curated. It provides managing behavior that is shared or inherited by all contained assets.
    """ # noqa: E501
    asset_status: Optional[GoogleCloudDataplexV1AssetStatus] = Field(default=None, alias="assetStatus")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the zone was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Description of the zone.")
    discovery_spec: Optional[GoogleCloudDataplexV1ZoneDiscoverySpec] = Field(default=None, alias="discoverySpec")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. User friendly display name.", alias="displayName")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. User defined labels for the zone.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The relative resource name of the zone, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}.")
    resource_spec: Optional[GoogleCloudDataplexV1ZoneResourceSpec] = Field(default=None, alias="resourceSpec")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Current state of the zone.")
    type: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The type of the zone.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. System generated globally unique ID for the zone. This ID will be different if the zone is deleted and re-created with the same name.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the zone was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["assetStatus", "createTime", "description", "discoverySpec", "displayName", "labels", "name", "resourceSpec", "state", "type", "uid", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'CREATING', 'DELETING', 'ACTION_REQUIRED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'CREATING', 'DELETING', 'ACTION_REQUIRED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'RAW', 'CURATED']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'RAW', 'CURATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1Zone from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "state",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of asset_status
        if self.asset_status:
            _dict['assetStatus'] = self.asset_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discovery_spec
        if self.discovery_spec:
            _dict['discoverySpec'] = self.discovery_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_spec
        if self.resource_spec:
            _dict['resourceSpec'] = self.resource_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1Zone from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetStatus": GoogleCloudDataplexV1AssetStatus.from_dict(obj["assetStatus"]) if obj.get("assetStatus") is not None else None,
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "discoverySpec": GoogleCloudDataplexV1ZoneDiscoverySpec.from_dict(obj["discoverySpec"]) if obj.get("discoverySpec") is not None else None,
            "displayName": obj.get("displayName"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "resourceSpec": GoogleCloudDataplexV1ZoneResourceSpec.from_dict(obj["resourceSpec"]) if obj.get("resourceSpec") is not None else None,
            "state": obj.get("state"),
            "type": obj.get("type"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



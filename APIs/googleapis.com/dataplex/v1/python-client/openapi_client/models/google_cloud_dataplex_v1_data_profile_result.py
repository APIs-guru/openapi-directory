# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dataplex_v1_data_profile_result_post_scan_actions_result import GoogleCloudDataplexV1DataProfileResultPostScanActionsResult
from openapi_client.models.google_cloud_dataplex_v1_data_profile_result_profile import GoogleCloudDataplexV1DataProfileResultProfile
from openapi_client.models.google_cloud_dataplex_v1_scanned_data import GoogleCloudDataplexV1ScannedData
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1DataProfileResult(BaseModel):
    """
    DataProfileResult defines the output of DataProfileScan. Each field of the table will have field type specific profile result.
    """ # noqa: E501
    post_scan_actions_result: Optional[GoogleCloudDataplexV1DataProfileResultPostScanActionsResult] = Field(default=None, alias="postScanActionsResult")
    profile: Optional[GoogleCloudDataplexV1DataProfileResultProfile] = None
    row_count: Optional[StrictStr] = Field(default=None, description="The count of rows scanned.", alias="rowCount")
    scanned_data: Optional[GoogleCloudDataplexV1ScannedData] = Field(default=None, alias="scannedData")
    __properties: ClassVar[List[str]] = ["postScanActionsResult", "profile", "rowCount", "scannedData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataProfileResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of post_scan_actions_result
        if self.post_scan_actions_result:
            _dict['postScanActionsResult'] = self.post_scan_actions_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scanned_data
        if self.scanned_data:
            _dict['scannedData'] = self.scanned_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataProfileResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "postScanActionsResult": GoogleCloudDataplexV1DataProfileResultPostScanActionsResult.from_dict(obj["postScanActionsResult"]) if obj.get("postScanActionsResult") is not None else None,
            "profile": GoogleCloudDataplexV1DataProfileResultProfile.from_dict(obj["profile"]) if obj.get("profile") is not None else None,
            "rowCount": obj.get("rowCount"),
            "scannedData": GoogleCloudDataplexV1ScannedData.from_dict(obj["scannedData"]) if obj.get("scannedData") is not None else None
        })
        return _obj



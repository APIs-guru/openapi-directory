# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dataplex_v1_environment_infrastructure_spec_compute_resources import GoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources
from openapi_client.models.google_cloud_dataplex_v1_environment_infrastructure_spec_os_image_runtime import GoogleCloudDataplexV1EnvironmentInfrastructureSpecOsImageRuntime
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1EnvironmentInfrastructureSpec(BaseModel):
    """
    Configuration for the underlying infrastructure used to run workloads.
    """ # noqa: E501
    compute: Optional[GoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources] = None
    os_image: Optional[GoogleCloudDataplexV1EnvironmentInfrastructureSpecOsImageRuntime] = Field(default=None, alias="osImage")
    __properties: ClassVar[List[str]] = ["compute", "osImage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1EnvironmentInfrastructureSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of compute
        if self.compute:
            _dict['compute'] = self.compute.to_dict()
        # override the default output from pydantic by calling `to_dict()` of os_image
        if self.os_image:
            _dict['osImage'] = self.os_image.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1EnvironmentInfrastructureSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "compute": GoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources.from_dict(obj["compute"]) if obj.get("compute") is not None else None,
            "osImage": GoogleCloudDataplexV1EnvironmentInfrastructureSpecOsImageRuntime.from_dict(obj["osImage"]) if obj.get("osImage") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dataplex_v1_data_profile_result import GoogleCloudDataplexV1DataProfileResult
from openapi_client.models.google_cloud_dataplex_v1_data_profile_spec import GoogleCloudDataplexV1DataProfileSpec
from openapi_client.models.google_cloud_dataplex_v1_data_quality_result import GoogleCloudDataplexV1DataQualityResult
from openapi_client.models.google_cloud_dataplex_v1_data_quality_spec import GoogleCloudDataplexV1DataQualitySpec
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1DataScanJob(BaseModel):
    """
    A DataScanJob represents an instance of DataScan execution.
    """ # noqa: E501
    data_profile_result: Optional[GoogleCloudDataplexV1DataProfileResult] = Field(default=None, alias="dataProfileResult")
    data_profile_spec: Optional[GoogleCloudDataplexV1DataProfileSpec] = Field(default=None, alias="dataProfileSpec")
    data_quality_result: Optional[GoogleCloudDataplexV1DataQualityResult] = Field(default=None, alias="dataQualityResult")
    data_quality_spec: Optional[GoogleCloudDataplexV1DataQualitySpec] = Field(default=None, alias="dataQualitySpec")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the DataScanJob ended.", alias="endTime")
    message: Optional[StrictStr] = Field(default=None, description="Output only. Additional information about the current state.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The relative resource name of the DataScanJob, of the form: projects/{project}/locations/{location_id}/dataScans/{datascan_id}/jobs/{job_id}, where project refers to a project_id or project_number and location_id refers to a GCP region.")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the DataScanJob was started.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Execution state for the DataScanJob.")
    type: Optional[StrictStr] = Field(default=None, description="Output only. The type of the parent DataScan.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. System generated globally unique ID for the DataScanJob.")
    __properties: ClassVar[List[str]] = ["dataProfileResult", "dataProfileSpec", "dataQualityResult", "dataQualitySpec", "endTime", "message", "name", "startTime", "state", "type", "uid"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'RUNNING', 'CANCELING', 'CANCELLED', 'SUCCEEDED', 'FAILED', 'PENDING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'RUNNING', 'CANCELING', 'CANCELLED', 'SUCCEEDED', 'FAILED', 'PENDING')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_SCAN_TYPE_UNSPECIFIED', 'DATA_QUALITY', 'DATA_PROFILE']):
            raise ValueError("must be one of enum values ('DATA_SCAN_TYPE_UNSPECIFIED', 'DATA_QUALITY', 'DATA_PROFILE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataScanJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "end_time",
            "message",
            "name",
            "start_time",
            "state",
            "type",
            "uid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_profile_result
        if self.data_profile_result:
            _dict['dataProfileResult'] = self.data_profile_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_profile_spec
        if self.data_profile_spec:
            _dict['dataProfileSpec'] = self.data_profile_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_quality_result
        if self.data_quality_result:
            _dict['dataQualityResult'] = self.data_quality_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_quality_spec
        if self.data_quality_spec:
            _dict['dataQualitySpec'] = self.data_quality_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataScanJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataProfileResult": GoogleCloudDataplexV1DataProfileResult.from_dict(obj["dataProfileResult"]) if obj.get("dataProfileResult") is not None else None,
            "dataProfileSpec": GoogleCloudDataplexV1DataProfileSpec.from_dict(obj["dataProfileSpec"]) if obj.get("dataProfileSpec") is not None else None,
            "dataQualityResult": GoogleCloudDataplexV1DataQualityResult.from_dict(obj["dataQualityResult"]) if obj.get("dataQualityResult") is not None else None,
            "dataQualitySpec": GoogleCloudDataplexV1DataQualitySpec.from_dict(obj["dataQualitySpec"]) if obj.get("dataQualitySpec") is not None else None,
            "endTime": obj.get("endTime"),
            "message": obj.get("message"),
            "name": obj.get("name"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "type": obj.get("type"),
            "uid": obj.get("uid")
        })
        return _obj



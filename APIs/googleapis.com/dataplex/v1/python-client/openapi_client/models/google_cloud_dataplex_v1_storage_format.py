# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dataplex_v1_storage_format_csv_options import GoogleCloudDataplexV1StorageFormatCsvOptions
from openapi_client.models.google_cloud_dataplex_v1_storage_format_iceberg_options import GoogleCloudDataplexV1StorageFormatIcebergOptions
from openapi_client.models.google_cloud_dataplex_v1_storage_format_json_options import GoogleCloudDataplexV1StorageFormatJsonOptions
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1StorageFormat(BaseModel):
    """
    Describes the format of the data within its storage location.
    """ # noqa: E501
    compression_format: Optional[StrictStr] = Field(default=None, description="Optional. The compression type associated with the stored data. If unspecified, the data is uncompressed.", alias="compressionFormat")
    csv: Optional[GoogleCloudDataplexV1StorageFormatCsvOptions] = None
    format: Optional[StrictStr] = Field(default=None, description="Output only. The data format associated with the stored data, which represents content type values. The value is inferred from mime type.")
    iceberg: Optional[GoogleCloudDataplexV1StorageFormatIcebergOptions] = None
    var_json: Optional[GoogleCloudDataplexV1StorageFormatJsonOptions] = Field(default=None, alias="json")
    mime_type: Optional[StrictStr] = Field(default=None, description="Required. The mime type descriptor for the data. Must match the pattern {type}/{subtype}. Supported values: application/x-parquet application/x-avro application/x-orc application/x-tfrecord application/x-parquet+iceberg application/x-avro+iceberg application/x-orc+iceberg application/json application/{subtypes} text/csv text/ image/{image subtype} video/{video subtype} audio/{audio subtype}", alias="mimeType")
    __properties: ClassVar[List[str]] = ["compressionFormat", "csv", "format", "iceberg", "json", "mimeType"]

    @field_validator('compression_format')
    def compression_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPRESSION_FORMAT_UNSPECIFIED', 'GZIP', 'BZIP2']):
            raise ValueError("must be one of enum values ('COMPRESSION_FORMAT_UNSPECIFIED', 'GZIP', 'BZIP2')")
        return value

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FORMAT_UNSPECIFIED', 'PARQUET', 'AVRO', 'ORC', 'CSV', 'JSON', 'IMAGE', 'AUDIO', 'VIDEO', 'TEXT', 'TFRECORD', 'OTHER', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('FORMAT_UNSPECIFIED', 'PARQUET', 'AVRO', 'ORC', 'CSV', 'JSON', 'IMAGE', 'AUDIO', 'VIDEO', 'TEXT', 'TFRECORD', 'OTHER', 'UNKNOWN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1StorageFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "format",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of csv
        if self.csv:
            _dict['csv'] = self.csv.to_dict()
        # override the default output from pydantic by calling `to_dict()` of iceberg
        if self.iceberg:
            _dict['iceberg'] = self.iceberg.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_json
        if self.var_json:
            _dict['json'] = self.var_json.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1StorageFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "compressionFormat": obj.get("compressionFormat"),
            "csv": GoogleCloudDataplexV1StorageFormatCsvOptions.from_dict(obj["csv"]) if obj.get("csv") is not None else None,
            "format": obj.get("format"),
            "iceberg": GoogleCloudDataplexV1StorageFormatIcebergOptions.from_dict(obj["iceberg"]) if obj.get("iceberg") is not None else None,
            "json": GoogleCloudDataplexV1StorageFormatJsonOptions.from_dict(obj["json"]) if obj.get("json") is not None else None,
            "mimeType": obj.get("mimeType")
        })
        return _obj



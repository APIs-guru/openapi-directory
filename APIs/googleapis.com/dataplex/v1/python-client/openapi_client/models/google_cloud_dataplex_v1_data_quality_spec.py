# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_dataplex_v1_data_quality_rule import GoogleCloudDataplexV1DataQualityRule
from openapi_client.models.google_cloud_dataplex_v1_data_quality_spec_post_scan_actions import GoogleCloudDataplexV1DataQualitySpecPostScanActions
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1DataQualitySpec(BaseModel):
    """
    DataQualityScan related setting.
    """ # noqa: E501
    post_scan_actions: Optional[GoogleCloudDataplexV1DataQualitySpecPostScanActions] = Field(default=None, alias="postScanActions")
    row_filter: Optional[StrictStr] = Field(default=None, description="Optional. A filter applied to all rows in a single DataScan job. The filter needs to be a valid SQL expression for a WHERE clause in BigQuery standard SQL syntax. Example: col1 >= 0 AND col2 < 10", alias="rowFilter")
    rules: Optional[List[GoogleCloudDataplexV1DataQualityRule]] = Field(default=None, description="Required. The list of rules to evaluate against a data source. At least one rule is required.")
    sampling_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. The percentage of the records to be selected from the dataset for DataScan. Value can range between 0.0 and 100.0 with up to 3 significant decimal digits. Sampling is not applied if sampling_percent is not specified, 0 or 100.", alias="samplingPercent")
    __properties: ClassVar[List[str]] = ["postScanActions", "rowFilter", "rules", "samplingPercent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataQualitySpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of post_scan_actions
        if self.post_scan_actions:
            _dict['postScanActions'] = self.post_scan_actions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item_rules in self.rules:
                if _item_rules:
                    _items.append(_item_rules.to_dict())
            _dict['rules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataQualitySpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "postScanActions": GoogleCloudDataplexV1DataQualitySpecPostScanActions.from_dict(obj["postScanActions"]) if obj.get("postScanActions") is not None else None,
            "rowFilter": obj.get("rowFilter"),
            "rules": [GoogleCloudDataplexV1DataQualityRule.from_dict(_item) for _item in obj["rules"]] if obj.get("rules") is not None else None,
            "samplingPercent": obj.get("samplingPercent")
        })
        return _obj



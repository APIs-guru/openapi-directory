# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dataplex_v1_asset_status import GoogleCloudDataplexV1AssetStatus
from openapi_client.models.google_cloud_dataplex_v1_lake_metastore import GoogleCloudDataplexV1LakeMetastore
from openapi_client.models.google_cloud_dataplex_v1_lake_metastore_status import GoogleCloudDataplexV1LakeMetastoreStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1Lake(BaseModel):
    """
    A lake is a centralized repository for managing enterprise data across the organization distributed across many cloud projects, and stored in a variety of storage services such as Google Cloud Storage and BigQuery. The resources attached to a lake are referred to as managed resources. Data within these managed resources can be structured or unstructured. A lake provides data admins with tools to organize, secure and manage their data at scale, and provides data scientists and data engineers an integrated experience to easily search, discover, analyze and transform data and associated metadata.
    """ # noqa: E501
    asset_status: Optional[GoogleCloudDataplexV1AssetStatus] = Field(default=None, alias="assetStatus")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the lake was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Description of the lake.")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. User friendly display name.", alias="displayName")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. User-defined labels for the lake.")
    metastore: Optional[GoogleCloudDataplexV1LakeMetastore] = None
    metastore_status: Optional[GoogleCloudDataplexV1LakeMetastoreStatus] = Field(default=None, alias="metastoreStatus")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The relative resource name of the lake, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}.")
    service_account: Optional[StrictStr] = Field(default=None, description="Output only. Service account associated with this lake. This service account must be authorized to access or operate on resources managed by the lake.", alias="serviceAccount")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Current state of the lake.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. System generated globally unique ID for the lake. This ID will be different if the lake is deleted and re-created with the same name.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the lake was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["assetStatus", "createTime", "description", "displayName", "labels", "metastore", "metastoreStatus", "name", "serviceAccount", "state", "uid", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'CREATING', 'DELETING', 'ACTION_REQUIRED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'CREATING', 'DELETING', 'ACTION_REQUIRED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1Lake from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "service_account",
            "state",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of asset_status
        if self.asset_status:
            _dict['assetStatus'] = self.asset_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metastore
        if self.metastore:
            _dict['metastore'] = self.metastore.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metastore_status
        if self.metastore_status:
            _dict['metastoreStatus'] = self.metastore_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1Lake from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetStatus": GoogleCloudDataplexV1AssetStatus.from_dict(obj["assetStatus"]) if obj.get("assetStatus") is not None else None,
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "labels": obj.get("labels"),
            "metastore": GoogleCloudDataplexV1LakeMetastore.from_dict(obj["metastore"]) if obj.get("metastore") is not None else None,
            "metastoreStatus": GoogleCloudDataplexV1LakeMetastoreStatus.from_dict(obj["metastoreStatus"]) if obj.get("metastoreStatus") is not None else None,
            "name": obj.get("name"),
            "serviceAccount": obj.get("serviceAccount"),
            "state": obj.get("state"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



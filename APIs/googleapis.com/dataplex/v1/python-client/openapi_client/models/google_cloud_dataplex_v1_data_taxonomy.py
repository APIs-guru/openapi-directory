# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1DataTaxonomy(BaseModel):
    """
    DataTaxonomy represents a set of hierarchical DataAttributes resources, grouped with a common theme Eg: 'SensitiveDataTaxonomy' can have attributes to manage PII data. It is defined at project level.
    """ # noqa: E501
    attribute_count: Optional[StrictInt] = Field(default=None, description="Output only. The number of attributes in the DataTaxonomy.", alias="attributeCount")
    class_count: Optional[StrictInt] = Field(default=None, description="Output only. The number of classes in the DataTaxonomy.", alias="classCount")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the DataTaxonomy was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Description of the DataTaxonomy.")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. User friendly display name.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. User-defined labels for the DataTaxonomy.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The relative resource name of the DataTaxonomy, of the form: projects/{project_number}/locations/{location_id}/dataTaxonomies/{data_taxonomy_id}.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. System generated globally unique ID for the dataTaxonomy. This ID will be different if the DataTaxonomy is deleted and re-created with the same name.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the DataTaxonomy was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["attributeCount", "classCount", "createTime", "description", "displayName", "etag", "labels", "name", "uid", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataTaxonomy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "attribute_count",
            "class_count",
            "create_time",
            "name",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DataTaxonomy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributeCount": obj.get("attributeCount"),
            "classCount": obj.get("classCount"),
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



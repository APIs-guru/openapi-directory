# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dataplex_v1_session_event_query_detail import GoogleCloudDataplexV1SessionEventQueryDetail
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1SessionEvent(BaseModel):
    """
    These messages contain information about sessions within an environment. The monitored resource is 'Environment'.
    """ # noqa: E501
    event_succeeded: Optional[StrictBool] = Field(default=None, description="The status of the event.", alias="eventSucceeded")
    fast_startup_enabled: Optional[StrictBool] = Field(default=None, description="If the session is associated with an environment with fast startup enabled, and was created before being assigned to a user.", alias="fastStartupEnabled")
    message: Optional[StrictStr] = Field(default=None, description="The log message.")
    query: Optional[GoogleCloudDataplexV1SessionEventQueryDetail] = None
    session_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the session.", alias="sessionId")
    type: Optional[StrictStr] = Field(default=None, description="The type of the event.")
    unassigned_duration: Optional[StrictStr] = Field(default=None, description="The idle duration of a warm pooled session before it is assigned to user.", alias="unassignedDuration")
    user_id: Optional[StrictStr] = Field(default=None, description="The information about the user that created the session. It will be the email address of the user.", alias="userId")
    __properties: ClassVar[List[str]] = ["eventSucceeded", "fastStartupEnabled", "message", "query", "sessionId", "type", "unassignedDuration", "userId"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EVENT_TYPE_UNSPECIFIED', 'START', 'STOP', 'QUERY', 'CREATE']):
            raise ValueError("must be one of enum values ('EVENT_TYPE_UNSPECIFIED', 'START', 'STOP', 'QUERY', 'CREATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1SessionEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1SessionEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventSucceeded": obj.get("eventSucceeded"),
            "fastStartupEnabled": obj.get("fastStartupEnabled"),
            "message": obj.get("message"),
            "query": GoogleCloudDataplexV1SessionEventQueryDetail.from_dict(obj["query"]) if obj.get("query") is not None else None,
            "sessionId": obj.get("sessionId"),
            "type": obj.get("type"),
            "unassignedDuration": obj.get("unassignedDuration"),
            "userId": obj.get("userId")
        })
        return _obj



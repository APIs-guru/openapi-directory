# coding: utf-8

"""
    Cloud Dataplex API

    Dataplex API is used to manage the lifecycle of data lakes.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dataplex_v1_discovery_event_action_details import GoogleCloudDataplexV1DiscoveryEventActionDetails
from openapi_client.models.google_cloud_dataplex_v1_discovery_event_config_details import GoogleCloudDataplexV1DiscoveryEventConfigDetails
from openapi_client.models.google_cloud_dataplex_v1_discovery_event_entity_details import GoogleCloudDataplexV1DiscoveryEventEntityDetails
from openapi_client.models.google_cloud_dataplex_v1_discovery_event_partition_details import GoogleCloudDataplexV1DiscoveryEventPartitionDetails
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDataplexV1DiscoveryEvent(BaseModel):
    """
    The payload associated with Discovery data processing.
    """ # noqa: E501
    action: Optional[GoogleCloudDataplexV1DiscoveryEventActionDetails] = None
    asset_id: Optional[StrictStr] = Field(default=None, description="The id of the associated asset.", alias="assetId")
    config: Optional[GoogleCloudDataplexV1DiscoveryEventConfigDetails] = None
    data_location: Optional[StrictStr] = Field(default=None, description="The data location associated with the event.", alias="dataLocation")
    entity: Optional[GoogleCloudDataplexV1DiscoveryEventEntityDetails] = None
    lake_id: Optional[StrictStr] = Field(default=None, description="The id of the associated lake.", alias="lakeId")
    message: Optional[StrictStr] = Field(default=None, description="The log message.")
    partition: Optional[GoogleCloudDataplexV1DiscoveryEventPartitionDetails] = None
    type: Optional[StrictStr] = Field(default=None, description="The type of the event being logged.")
    zone_id: Optional[StrictStr] = Field(default=None, description="The id of the associated zone.", alias="zoneId")
    __properties: ClassVar[List[str]] = ["action", "assetId", "config", "dataLocation", "entity", "lakeId", "message", "partition", "type", "zoneId"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EVENT_TYPE_UNSPECIFIED', 'CONFIG', 'ENTITY_CREATED', 'ENTITY_UPDATED', 'ENTITY_DELETED', 'PARTITION_CREATED', 'PARTITION_UPDATED', 'PARTITION_DELETED']):
            raise ValueError("must be one of enum values ('EVENT_TYPE_UNSPECIFIED', 'CONFIG', 'ENTITY_CREATED', 'ENTITY_UPDATED', 'ENTITY_DELETED', 'PARTITION_CREATED', 'PARTITION_UPDATED', 'PARTITION_DELETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DiscoveryEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of action
        if self.action:
            _dict['action'] = self.action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict['entity'] = self.entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of partition
        if self.partition:
            _dict['partition'] = self.partition.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDataplexV1DiscoveryEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": GoogleCloudDataplexV1DiscoveryEventActionDetails.from_dict(obj["action"]) if obj.get("action") is not None else None,
            "assetId": obj.get("assetId"),
            "config": GoogleCloudDataplexV1DiscoveryEventConfigDetails.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "dataLocation": obj.get("dataLocation"),
            "entity": GoogleCloudDataplexV1DiscoveryEventEntityDetails.from_dict(obj["entity"]) if obj.get("entity") is not None else None,
            "lakeId": obj.get("lakeId"),
            "message": obj.get("message"),
            "partition": GoogleCloudDataplexV1DiscoveryEventPartitionDetails.from_dict(obj["partition"]) if obj.get("partition") is not None else None,
            "type": obj.get("type"),
            "zoneId": obj.get("zoneId")
        })
        return _obj



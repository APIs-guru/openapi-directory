# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_webhook_generic_web_service import GoogleCloudDialogflowCxV3beta1WebhookGenericWebService
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_webhook_service_directory_config import GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3beta1Webhook(BaseModel):
    """
    Webhooks host the developer's business logic. During a session, webhooks allow the developer to use the data extracted by Dialogflow's natural language processing to generate dynamic responses, validate collected data, or trigger actions on the backend.
    """ # noqa: E501
    disabled: Optional[StrictBool] = Field(default=None, description="Indicates whether the webhook is disabled.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The human-readable name of the webhook, unique within the agent.", alias="displayName")
    generic_web_service: Optional[GoogleCloudDialogflowCxV3beta1WebhookGenericWebService] = Field(default=None, alias="genericWebService")
    name: Optional[StrictStr] = Field(default=None, description="The unique identifier of the webhook. Required for the Webhooks.UpdateWebhook method. Webhooks.CreateWebhook populates the name automatically. Format: `projects//locations//agents//webhooks/`.")
    service_directory: Optional[GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfig] = Field(default=None, alias="serviceDirectory")
    timeout: Optional[StrictStr] = Field(default=None, description="Webhook execution timeout. Execution is considered failed if Dialogflow doesn't receive a response from webhook at the end of the timeout period. Defaults to 5 seconds, maximum allowed timeout is 30 seconds.")
    __properties: ClassVar[List[str]] = ["disabled", "displayName", "genericWebService", "name", "serviceDirectory", "timeout"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1Webhook from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of generic_web_service
        if self.generic_web_service:
            _dict['genericWebService'] = self.generic_web_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_directory
        if self.service_directory:
            _dict['serviceDirectory'] = self.service_directory.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1Webhook from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disabled": obj.get("disabled"),
            "displayName": obj.get("displayName"),
            "genericWebService": GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.from_dict(obj["genericWebService"]) if obj.get("genericWebService") is not None else None,
            "name": obj.get("name"),
            "serviceDirectory": GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfig.from_dict(obj["serviceDirectory"]) if obj.get("serviceDirectory") is not None else None,
            "timeout": obj.get("timeout")
        })
        return _obj



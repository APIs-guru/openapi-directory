# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3_experiment_definition import GoogleCloudDialogflowCxV3ExperimentDefinition
from openapi_client.models.google_cloud_dialogflow_cx_v3_experiment_result import GoogleCloudDialogflowCxV3ExperimentResult
from openapi_client.models.google_cloud_dialogflow_cx_v3_rollout_config import GoogleCloudDialogflowCxV3RolloutConfig
from openapi_client.models.google_cloud_dialogflow_cx_v3_rollout_state import GoogleCloudDialogflowCxV3RolloutState
from openapi_client.models.google_cloud_dialogflow_cx_v3_variants_history import GoogleCloudDialogflowCxV3VariantsHistory
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3Experiment(BaseModel):
    """
    Represents an experiment in an environment.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Creation time of this experiment.", alias="createTime")
    definition: Optional[GoogleCloudDialogflowCxV3ExperimentDefinition] = None
    description: Optional[StrictStr] = Field(default=None, description="The human-readable description of the experiment.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The human-readable name of the experiment (unique in an environment). Limit of 64 characters.", alias="displayName")
    end_time: Optional[StrictStr] = Field(default=None, description="End time of this experiment.", alias="endTime")
    experiment_length: Optional[StrictStr] = Field(default=None, description="Maximum number of days to run the experiment/rollout. If auto-rollout is not enabled, default value and maximum will be 30 days. If auto-rollout is enabled, default value and maximum will be 6 days.", alias="experimentLength")
    last_update_time: Optional[StrictStr] = Field(default=None, description="Last update time of this experiment.", alias="lastUpdateTime")
    name: Optional[StrictStr] = Field(default=None, description="The name of the experiment. Format: projects//locations//agents//environments//experiments/..")
    result: Optional[GoogleCloudDialogflowCxV3ExperimentResult] = None
    rollout_config: Optional[GoogleCloudDialogflowCxV3RolloutConfig] = Field(default=None, alias="rolloutConfig")
    rollout_failure_reason: Optional[StrictStr] = Field(default=None, description="The reason why rollout has failed. Should only be set when state is ROLLOUT_FAILED.", alias="rolloutFailureReason")
    rollout_state: Optional[GoogleCloudDialogflowCxV3RolloutState] = Field(default=None, alias="rolloutState")
    start_time: Optional[StrictStr] = Field(default=None, description="Start time of this experiment.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="The current state of the experiment. Transition triggered by Experiments.StartExperiment: DRAFT->RUNNING. Transition triggered by Experiments.CancelExperiment: DRAFT->DONE or RUNNING->DONE.")
    variants_history: Optional[List[GoogleCloudDialogflowCxV3VariantsHistory]] = Field(default=None, description="The history of updates to the experiment variants.", alias="variantsHistory")
    __properties: ClassVar[List[str]] = ["createTime", "definition", "description", "displayName", "endTime", "experimentLength", "lastUpdateTime", "name", "result", "rolloutConfig", "rolloutFailureReason", "rolloutState", "startTime", "state", "variantsHistory"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'DRAFT', 'RUNNING', 'DONE', 'ROLLOUT_FAILED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'DRAFT', 'RUNNING', 'DONE', 'ROLLOUT_FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3Experiment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of definition
        if self.definition:
            _dict['definition'] = self.definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rollout_config
        if self.rollout_config:
            _dict['rolloutConfig'] = self.rollout_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rollout_state
        if self.rollout_state:
            _dict['rolloutState'] = self.rollout_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in variants_history (list)
        _items = []
        if self.variants_history:
            for _item_variants_history in self.variants_history:
                if _item_variants_history:
                    _items.append(_item_variants_history.to_dict())
            _dict['variantsHistory'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3Experiment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "definition": GoogleCloudDialogflowCxV3ExperimentDefinition.from_dict(obj["definition"]) if obj.get("definition") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "endTime": obj.get("endTime"),
            "experimentLength": obj.get("experimentLength"),
            "lastUpdateTime": obj.get("lastUpdateTime"),
            "name": obj.get("name"),
            "result": GoogleCloudDialogflowCxV3ExperimentResult.from_dict(obj["result"]) if obj.get("result") is not None else None,
            "rolloutConfig": GoogleCloudDialogflowCxV3RolloutConfig.from_dict(obj["rolloutConfig"]) if obj.get("rolloutConfig") is not None else None,
            "rolloutFailureReason": obj.get("rolloutFailureReason"),
            "rolloutState": GoogleCloudDialogflowCxV3RolloutState.from_dict(obj["rolloutState"]) if obj.get("rolloutState") is not None else None,
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "variantsHistory": [GoogleCloudDialogflowCxV3VariantsHistory.from_dict(_item) for _item in obj["variantsHistory"]] if obj.get("variantsHistory") is not None else None
        })
        return _obj



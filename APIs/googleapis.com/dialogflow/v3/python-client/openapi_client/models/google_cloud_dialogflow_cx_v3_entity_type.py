# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3_entity_type_entity import GoogleCloudDialogflowCxV3EntityTypeEntity
from openapi_client.models.google_cloud_dialogflow_cx_v3_entity_type_excluded_phrase import GoogleCloudDialogflowCxV3EntityTypeExcludedPhrase
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3EntityType(BaseModel):
    """
    Entities are extracted from user input and represent parameters that are meaningful to your application. For example, a date range, a proper name such as a geographic location or landmark, and so on. Entities represent actionable data for your application. When you define an entity, you can also include synonyms that all map to that entity. For example, \"soft drink\", \"soda\", \"pop\", and so on. There are three types of entities: * **System** - entities that are defined by the Dialogflow API for common data types such as date, time, currency, and so on. A system entity is represented by the `EntityType` type. * **Custom** - entities that are defined by you that represent actionable data that is meaningful to your application. For example, you could define a `pizza.sauce` entity for red or white pizza sauce, a `pizza.cheese` entity for the different types of cheese on a pizza, a `pizza.topping` entity for different toppings, and so on. A custom entity is represented by the `EntityType` type. * **User** - entities that are built for an individual user such as favorites, preferences, playlists, and so on. A user entity is represented by the SessionEntityType type. For more information about entity types, see the [Dialogflow documentation](https://cloud.google.com/dialogflow/docs/entities-overview).
    """ # noqa: E501
    auto_expansion_mode: Optional[StrictStr] = Field(default=None, description="Indicates whether the entity type can be automatically expanded.", alias="autoExpansionMode")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The human-readable name of the entity type, unique within the agent.", alias="displayName")
    enable_fuzzy_extraction: Optional[StrictBool] = Field(default=None, description="Enables fuzzy entity extraction during classification.", alias="enableFuzzyExtraction")
    entities: Optional[List[GoogleCloudDialogflowCxV3EntityTypeEntity]] = Field(default=None, description="The collection of entity entries associated with the entity type.")
    excluded_phrases: Optional[List[GoogleCloudDialogflowCxV3EntityTypeExcludedPhrase]] = Field(default=None, description="Collection of exceptional words and phrases that shouldn't be matched. For example, if you have a size entity type with entry `giant`(an adjective), you might consider adding `giants`(a noun) as an exclusion. If the kind of entity type is `KIND_MAP`, then the phrases specified by entities and excluded phrases should be mutually exclusive.", alias="excludedPhrases")
    kind: Optional[StrictStr] = Field(default=None, description="Required. Indicates the kind of entity type.")
    name: Optional[StrictStr] = Field(default=None, description="The unique identifier of the entity type. Required for EntityTypes.UpdateEntityType. Format: `projects//locations//agents//entityTypes/`.")
    redact: Optional[StrictBool] = Field(default=None, description="Indicates whether parameters of the entity type should be redacted in log. If redaction is enabled, page parameters and intent parameters referring to the entity type will be replaced by parameter name when logging.")
    __properties: ClassVar[List[str]] = ["autoExpansionMode", "displayName", "enableFuzzyExtraction", "entities", "excludedPhrases", "kind", "name", "redact"]

    @field_validator('auto_expansion_mode')
    def auto_expansion_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUTO_EXPANSION_MODE_UNSPECIFIED', 'AUTO_EXPANSION_MODE_DEFAULT']):
            raise ValueError("must be one of enum values ('AUTO_EXPANSION_MODE_UNSPECIFIED', 'AUTO_EXPANSION_MODE_DEFAULT')")
        return value

    @field_validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KIND_UNSPECIFIED', 'KIND_MAP', 'KIND_LIST', 'KIND_REGEXP']):
            raise ValueError("must be one of enum values ('KIND_UNSPECIFIED', 'KIND_MAP', 'KIND_LIST', 'KIND_REGEXP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3EntityType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in entities (list)
        _items = []
        if self.entities:
            for _item_entities in self.entities:
                if _item_entities:
                    _items.append(_item_entities.to_dict())
            _dict['entities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in excluded_phrases (list)
        _items = []
        if self.excluded_phrases:
            for _item_excluded_phrases in self.excluded_phrases:
                if _item_excluded_phrases:
                    _items.append(_item_excluded_phrases.to_dict())
            _dict['excludedPhrases'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3EntityType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoExpansionMode": obj.get("autoExpansionMode"),
            "displayName": obj.get("displayName"),
            "enableFuzzyExtraction": obj.get("enableFuzzyExtraction"),
            "entities": [GoogleCloudDialogflowCxV3EntityTypeEntity.from_dict(_item) for _item in obj["entities"]] if obj.get("entities") is not None else None,
            "excludedPhrases": [GoogleCloudDialogflowCxV3EntityTypeExcludedPhrase.from_dict(_item) for _item in obj["excludedPhrases"]] if obj.get("excludedPhrases") is not None else None,
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "redact": obj.get("redact")
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3_advanced_settings import GoogleCloudDialogflowCxV3AdvancedSettings
from openapi_client.models.google_cloud_dialogflow_cx_v3_agent_answer_feedback_settings import GoogleCloudDialogflowCxV3AgentAnswerFeedbackSettings
from openapi_client.models.google_cloud_dialogflow_cx_v3_agent_gen_app_builder_settings import GoogleCloudDialogflowCxV3AgentGenAppBuilderSettings
from openapi_client.models.google_cloud_dialogflow_cx_v3_agent_git_integration_settings import GoogleCloudDialogflowCxV3AgentGitIntegrationSettings
from openapi_client.models.google_cloud_dialogflow_cx_v3_speech_to_text_settings import GoogleCloudDialogflowCxV3SpeechToTextSettings
from openapi_client.models.google_cloud_dialogflow_cx_v3_text_to_speech_settings import GoogleCloudDialogflowCxV3TextToSpeechSettings
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3Agent(BaseModel):
    """
    Agents are best described as Natural Language Understanding (NLU) modules that transform user requests into actionable data. You can include agents in your app, product, or service to determine user intent and respond to the user in a natural way. After you create an agent, you can add Intents, Entity Types, Flows, Fulfillments, Webhooks, TransitionRouteGroups and so on to manage the conversation flows.
    """ # noqa: E501
    advanced_settings: Optional[GoogleCloudDialogflowCxV3AdvancedSettings] = Field(default=None, alias="advancedSettings")
    answer_feedback_settings: Optional[GoogleCloudDialogflowCxV3AgentAnswerFeedbackSettings] = Field(default=None, alias="answerFeedbackSettings")
    avatar_uri: Optional[StrictStr] = Field(default=None, description="The URI of the agent's avatar. Avatars are used throughout the Dialogflow console and in the self-hosted [Web Demo](https://cloud.google.com/dialogflow/docs/integrations/web-demo) integration.", alias="avatarUri")
    default_language_code: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The default language of the agent as a language tag. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes. This field cannot be set by the Agents.UpdateAgent method.", alias="defaultLanguageCode")
    description: Optional[StrictStr] = Field(default=None, description="The description of the agent. The maximum length is 500 characters. If exceeded, the request is rejected.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The human-readable name of the agent, unique within the location.", alias="displayName")
    enable_spell_correction: Optional[StrictBool] = Field(default=None, description="Indicates if automatic spell correction is enabled in detect intent requests.", alias="enableSpellCorrection")
    enable_stackdriver_logging: Optional[StrictBool] = Field(default=None, description="Indicates if stackdriver logging is enabled for the agent. Please use agent.advanced_settings instead.", alias="enableStackdriverLogging")
    gen_app_builder_settings: Optional[GoogleCloudDialogflowCxV3AgentGenAppBuilderSettings] = Field(default=None, alias="genAppBuilderSettings")
    git_integration_settings: Optional[GoogleCloudDialogflowCxV3AgentGitIntegrationSettings] = Field(default=None, alias="gitIntegrationSettings")
    locked: Optional[StrictBool] = Field(default=None, description="Indicates whether the agent is locked for changes. If the agent is locked, modifications to the agent will be rejected except for RestoreAgent.")
    name: Optional[StrictStr] = Field(default=None, description="The unique identifier of the agent. Required for the Agents.UpdateAgent method. Agents.CreateAgent populates the name automatically. Format: `projects//locations//agents/`.")
    security_settings: Optional[StrictStr] = Field(default=None, description="Name of the SecuritySettings reference for the agent. Format: `projects//locations//securitySettings/`.", alias="securitySettings")
    speech_to_text_settings: Optional[GoogleCloudDialogflowCxV3SpeechToTextSettings] = Field(default=None, alias="speechToTextSettings")
    start_flow: Optional[StrictStr] = Field(default=None, description="Immutable. Name of the start flow in this agent. A start flow will be automatically created when the agent is created, and can only be deleted by deleting the agent. Format: `projects//locations//agents//flows/`.", alias="startFlow")
    supported_language_codes: Optional[List[StrictStr]] = Field(default=None, description="The list of all languages supported by the agent (except for the `default_language_code`).", alias="supportedLanguageCodes")
    text_to_speech_settings: Optional[GoogleCloudDialogflowCxV3TextToSpeechSettings] = Field(default=None, alias="textToSpeechSettings")
    time_zone: Optional[StrictStr] = Field(default=None, description="Required. The time zone of the agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris.", alias="timeZone")
    __properties: ClassVar[List[str]] = ["advancedSettings", "answerFeedbackSettings", "avatarUri", "defaultLanguageCode", "description", "displayName", "enableSpellCorrection", "enableStackdriverLogging", "genAppBuilderSettings", "gitIntegrationSettings", "locked", "name", "securitySettings", "speechToTextSettings", "startFlow", "supportedLanguageCodes", "textToSpeechSettings", "timeZone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3Agent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advanced_settings
        if self.advanced_settings:
            _dict['advancedSettings'] = self.advanced_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of answer_feedback_settings
        if self.answer_feedback_settings:
            _dict['answerFeedbackSettings'] = self.answer_feedback_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gen_app_builder_settings
        if self.gen_app_builder_settings:
            _dict['genAppBuilderSettings'] = self.gen_app_builder_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of git_integration_settings
        if self.git_integration_settings:
            _dict['gitIntegrationSettings'] = self.git_integration_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of speech_to_text_settings
        if self.speech_to_text_settings:
            _dict['speechToTextSettings'] = self.speech_to_text_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_to_speech_settings
        if self.text_to_speech_settings:
            _dict['textToSpeechSettings'] = self.text_to_speech_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3Agent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advancedSettings": GoogleCloudDialogflowCxV3AdvancedSettings.from_dict(obj["advancedSettings"]) if obj.get("advancedSettings") is not None else None,
            "answerFeedbackSettings": GoogleCloudDialogflowCxV3AgentAnswerFeedbackSettings.from_dict(obj["answerFeedbackSettings"]) if obj.get("answerFeedbackSettings") is not None else None,
            "avatarUri": obj.get("avatarUri"),
            "defaultLanguageCode": obj.get("defaultLanguageCode"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "enableSpellCorrection": obj.get("enableSpellCorrection"),
            "enableStackdriverLogging": obj.get("enableStackdriverLogging"),
            "genAppBuilderSettings": GoogleCloudDialogflowCxV3AgentGenAppBuilderSettings.from_dict(obj["genAppBuilderSettings"]) if obj.get("genAppBuilderSettings") is not None else None,
            "gitIntegrationSettings": GoogleCloudDialogflowCxV3AgentGitIntegrationSettings.from_dict(obj["gitIntegrationSettings"]) if obj.get("gitIntegrationSettings") is not None else None,
            "locked": obj.get("locked"),
            "name": obj.get("name"),
            "securitySettings": obj.get("securitySettings"),
            "speechToTextSettings": GoogleCloudDialogflowCxV3SpeechToTextSettings.from_dict(obj["speechToTextSettings"]) if obj.get("speechToTextSettings") is not None else None,
            "startFlow": obj.get("startFlow"),
            "supportedLanguageCodes": obj.get("supportedLanguageCodes"),
            "textToSpeechSettings": GoogleCloudDialogflowCxV3TextToSpeechSettings.from_dict(obj["textToSpeechSettings"]) if obj.get("textToSpeechSettings") is not None else None,
            "timeZone": obj.get("timeZone")
        })
        return _obj



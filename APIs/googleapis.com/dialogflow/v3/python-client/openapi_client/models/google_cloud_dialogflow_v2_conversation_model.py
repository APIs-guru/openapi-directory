# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2_article_suggestion_model_metadata import GoogleCloudDialogflowV2ArticleSuggestionModelMetadata
from openapi_client.models.google_cloud_dialogflow_v2_input_dataset import GoogleCloudDialogflowV2InputDataset
from openapi_client.models.google_cloud_dialogflow_v2_smart_reply_model_metadata import GoogleCloudDialogflowV2SmartReplyModelMetadata
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2ConversationModel(BaseModel):
    """
    Represents a conversation model.
    """ # noqa: E501
    article_suggestion_model_metadata: Optional[GoogleCloudDialogflowV2ArticleSuggestionModelMetadata] = Field(default=None, alias="articleSuggestionModelMetadata")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation time of this model.", alias="createTime")
    datasets: Optional[List[GoogleCloudDialogflowV2InputDataset]] = Field(default=None, description="Required. Datasets used to create model.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the model. At most 64 bytes long.", alias="displayName")
    language_code: Optional[StrictStr] = Field(default=None, description="Language code for the conversation model. If not specified, the language is en-US. Language at ConversationModel should be set for all non en-us languages. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: \"en-US\".", alias="languageCode")
    name: Optional[StrictStr] = Field(default=None, description="ConversationModel resource name. Format: `projects//conversationModels/`")
    smart_reply_model_metadata: Optional[GoogleCloudDialogflowV2SmartReplyModelMetadata] = Field(default=None, alias="smartReplyModelMetadata")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the model. A model can only serve prediction requests after it gets deployed.")
    __properties: ClassVar[List[str]] = ["articleSuggestionModelMetadata", "createTime", "datasets", "displayName", "languageCode", "name", "smartReplyModelMetadata", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'UNDEPLOYED', 'DEPLOYING', 'DEPLOYED', 'UNDEPLOYING', 'DELETING', 'FAILED', 'PENDING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'UNDEPLOYED', 'DEPLOYING', 'DEPLOYED', 'UNDEPLOYING', 'DELETING', 'FAILED', 'PENDING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2ConversationModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of article_suggestion_model_metadata
        if self.article_suggestion_model_metadata:
            _dict['articleSuggestionModelMetadata'] = self.article_suggestion_model_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in datasets (list)
        _items = []
        if self.datasets:
            for _item_datasets in self.datasets:
                if _item_datasets:
                    _items.append(_item_datasets.to_dict())
            _dict['datasets'] = _items
        # override the default output from pydantic by calling `to_dict()` of smart_reply_model_metadata
        if self.smart_reply_model_metadata:
            _dict['smartReplyModelMetadata'] = self.smart_reply_model_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2ConversationModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "articleSuggestionModelMetadata": GoogleCloudDialogflowV2ArticleSuggestionModelMetadata.from_dict(obj["articleSuggestionModelMetadata"]) if obj.get("articleSuggestionModelMetadata") is not None else None,
            "createTime": obj.get("createTime"),
            "datasets": [GoogleCloudDialogflowV2InputDataset.from_dict(_item) for _item in obj["datasets"]] if obj.get("datasets") is not None else None,
            "displayName": obj.get("displayName"),
            "languageCode": obj.get("languageCode"),
            "name": obj.get("name"),
            "smartReplyModelMetadata": GoogleCloudDialogflowV2SmartReplyModelMetadata.from_dict(obj["smartReplyModelMetadata"]) if obj.get("smartReplyModelMetadata") is not None else None,
            "state": obj.get("state")
        })
        return _obj



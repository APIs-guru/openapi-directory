# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2beta1_original_detect_intent_request import GoogleCloudDialogflowV2beta1OriginalDetectIntentRequest
from openapi_client.models.google_cloud_dialogflow_v2beta1_query_result import GoogleCloudDialogflowV2beta1QueryResult
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1WebhookRequest(BaseModel):
    """
    The request message for a webhook call.
    """ # noqa: E501
    alternative_query_results: Optional[List[GoogleCloudDialogflowV2beta1QueryResult]] = Field(default=None, description="Alternative query results from KnowledgeService.", alias="alternativeQueryResults")
    original_detect_intent_request: Optional[GoogleCloudDialogflowV2beta1OriginalDetectIntentRequest] = Field(default=None, alias="originalDetectIntentRequest")
    query_result: Optional[GoogleCloudDialogflowV2beta1QueryResult] = Field(default=None, alias="queryResult")
    response_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the response. Contains the same value as `[Streaming]DetectIntentResponse.response_id`.", alias="responseId")
    session: Optional[StrictStr] = Field(default=None, description="The unique identifier of detectIntent request session. Can be used to identify end-user inside webhook implementation. Supported formats: - `projects//agent/sessions/, - `projects//locations//agent/sessions/`, - `projects//agent/environments//users//sessions/`, - `projects//locations//agent/environments//users//sessions/`,")
    __properties: ClassVar[List[str]] = ["alternativeQueryResults", "originalDetectIntentRequest", "queryResult", "responseId", "session"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1WebhookRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in alternative_query_results (list)
        _items = []
        if self.alternative_query_results:
            for _item_alternative_query_results in self.alternative_query_results:
                if _item_alternative_query_results:
                    _items.append(_item_alternative_query_results.to_dict())
            _dict['alternativeQueryResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of original_detect_intent_request
        if self.original_detect_intent_request:
            _dict['originalDetectIntentRequest'] = self.original_detect_intent_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query_result
        if self.query_result:
            _dict['queryResult'] = self.query_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1WebhookRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alternativeQueryResults": [GoogleCloudDialogflowV2beta1QueryResult.from_dict(_item) for _item in obj["alternativeQueryResults"]] if obj.get("alternativeQueryResults") is not None else None,
            "originalDetectIntentRequest": GoogleCloudDialogflowV2beta1OriginalDetectIntentRequest.from_dict(obj["originalDetectIntentRequest"]) if obj.get("originalDetectIntentRequest") is not None else None,
            "queryResult": GoogleCloudDialogflowV2beta1QueryResult.from_dict(obj["queryResult"]) if obj.get("queryResult") is not None else None,
            "responseId": obj.get("responseId"),
            "session": obj.get("session")
        })
        return _obj



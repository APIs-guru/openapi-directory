# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_advanced_settings import GoogleCloudDialogflowCxV3beta1AdvancedSettings
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_fulfillment_conditional_cases import GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCases
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_fulfillment_set_parameter_action import GoogleCloudDialogflowCxV3beta1FulfillmentSetParameterAction
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_response_message import GoogleCloudDialogflowCxV3beta1ResponseMessage
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3beta1Fulfillment(BaseModel):
    """
    A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both.
    """ # noqa: E501
    advanced_settings: Optional[GoogleCloudDialogflowCxV3beta1AdvancedSettings] = Field(default=None, alias="advancedSettings")
    conditional_cases: Optional[List[GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCases]] = Field(default=None, description="Conditional cases for this fulfillment.", alias="conditionalCases")
    enable_generative_fallback: Optional[StrictBool] = Field(default=None, description="If the flag is true, the agent will utilize LLM to generate a text response. If LLM generation fails, the defined responses in the fulfillment will be respected. This flag is only useful for fulfillments associated with no-match event handlers.", alias="enableGenerativeFallback")
    messages: Optional[List[GoogleCloudDialogflowCxV3beta1ResponseMessage]] = Field(default=None, description="The list of rich message responses to present to the user.")
    return_partial_responses: Optional[StrictBool] = Field(default=None, description="Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.", alias="returnPartialResponses")
    set_parameter_actions: Optional[List[GoogleCloudDialogflowCxV3beta1FulfillmentSetParameterAction]] = Field(default=None, description="Set parameter values before executing the webhook.", alias="setParameterActions")
    tag: Optional[StrictStr] = Field(default=None, description="The value of this field will be populated in the WebhookRequest `fulfillmentInfo.tag` field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes. This field is required if `webhook` is specified.")
    webhook: Optional[StrictStr] = Field(default=None, description="The webhook to call. Format: `projects//locations//agents//webhooks/`.")
    __properties: ClassVar[List[str]] = ["advancedSettings", "conditionalCases", "enableGenerativeFallback", "messages", "returnPartialResponses", "setParameterActions", "tag", "webhook"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1Fulfillment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advanced_settings
        if self.advanced_settings:
            _dict['advancedSettings'] = self.advanced_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in conditional_cases (list)
        _items = []
        if self.conditional_cases:
            for _item_conditional_cases in self.conditional_cases:
                if _item_conditional_cases:
                    _items.append(_item_conditional_cases.to_dict())
            _dict['conditionalCases'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in set_parameter_actions (list)
        _items = []
        if self.set_parameter_actions:
            for _item_set_parameter_actions in self.set_parameter_actions:
                if _item_set_parameter_actions:
                    _items.append(_item_set_parameter_actions.to_dict())
            _dict['setParameterActions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1Fulfillment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advancedSettings": GoogleCloudDialogflowCxV3beta1AdvancedSettings.from_dict(obj["advancedSettings"]) if obj.get("advancedSettings") is not None else None,
            "conditionalCases": [GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCases.from_dict(_item) for _item in obj["conditionalCases"]] if obj.get("conditionalCases") is not None else None,
            "enableGenerativeFallback": obj.get("enableGenerativeFallback"),
            "messages": [GoogleCloudDialogflowCxV3beta1ResponseMessage.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "returnPartialResponses": obj.get("returnPartialResponses"),
            "setParameterActions": [GoogleCloudDialogflowCxV3beta1FulfillmentSetParameterAction.from_dict(_item) for _item in obj["setParameterActions"]] if obj.get("setParameterActions") is not None else None,
            "tag": obj.get("tag"),
            "webhook": obj.get("webhook")
        })
        return _obj



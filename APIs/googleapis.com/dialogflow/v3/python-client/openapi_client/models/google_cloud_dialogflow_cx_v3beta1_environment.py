# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_environment_test_cases_config import GoogleCloudDialogflowCxV3beta1EnvironmentTestCasesConfig
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_environment_version_config import GoogleCloudDialogflowCxV3beta1EnvironmentVersionConfig
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_environment_webhook_config import GoogleCloudDialogflowCxV3beta1EnvironmentWebhookConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3beta1Environment(BaseModel):
    """
    Represents an environment for an agent. You can create multiple versions of your agent and publish them to separate environments. When you edit an agent, you are editing the draft agent. At any point, you can save the draft agent as an agent version, which is an immutable snapshot of your agent. When you save the draft agent, it is published to the default environment. When you create agent versions, you can publish them to custom environments. You can create a variety of custom environments for testing, development, production, etc.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The human-readable description of the environment. The maximum length is 500 characters. If exceeded, the request is rejected.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The human-readable name of the environment (unique in an agent). Limit of 64 characters.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="The name of the environment. Format: `projects//locations//agents//environments/`.")
    test_cases_config: Optional[GoogleCloudDialogflowCxV3beta1EnvironmentTestCasesConfig] = Field(default=None, alias="testCasesConfig")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Update time of this environment.", alias="updateTime")
    version_configs: Optional[List[GoogleCloudDialogflowCxV3beta1EnvironmentVersionConfig]] = Field(default=None, description="A list of configurations for flow versions. You should include version configs for all flows that are reachable from `Start Flow` in the agent. Otherwise, an error will be returned.", alias="versionConfigs")
    webhook_config: Optional[GoogleCloudDialogflowCxV3beta1EnvironmentWebhookConfig] = Field(default=None, alias="webhookConfig")
    __properties: ClassVar[List[str]] = ["description", "displayName", "name", "testCasesConfig", "updateTime", "versionConfigs", "webhookConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1Environment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of test_cases_config
        if self.test_cases_config:
            _dict['testCasesConfig'] = self.test_cases_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in version_configs (list)
        _items = []
        if self.version_configs:
            for _item_version_configs in self.version_configs:
                if _item_version_configs:
                    _items.append(_item_version_configs.to_dict())
            _dict['versionConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of webhook_config
        if self.webhook_config:
            _dict['webhookConfig'] = self.webhook_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1Environment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "testCasesConfig": GoogleCloudDialogflowCxV3beta1EnvironmentTestCasesConfig.from_dict(obj["testCasesConfig"]) if obj.get("testCasesConfig") is not None else None,
            "updateTime": obj.get("updateTime"),
            "versionConfigs": [GoogleCloudDialogflowCxV3beta1EnvironmentVersionConfig.from_dict(_item) for _item in obj["versionConfigs"]] if obj.get("versionConfigs") is not None else None,
            "webhookConfig": GoogleCloudDialogflowCxV3beta1EnvironmentWebhookConfig.from_dict(obj["webhookConfig"]) if obj.get("webhookConfig") is not None else None
        })
        return _obj



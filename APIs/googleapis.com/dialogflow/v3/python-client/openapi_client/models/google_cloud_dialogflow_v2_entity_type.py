# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2_entity_type_entity import GoogleCloudDialogflowV2EntityTypeEntity
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2EntityType(BaseModel):
    """
    Each intent parameter has a type, called the entity type, which dictates exactly how data from an end-user expression is extracted. Dialogflow provides predefined system entities that can match many common types of data. For example, there are system entities for matching dates, times, colors, email addresses, and so on. You can also create your own custom entities for matching custom data. For example, you could define a vegetable entity that can match the types of vegetables available for purchase with a grocery store agent. For more information, see the [Entity guide](https://cloud.google.com/dialogflow/docs/entities-overview).
    """ # noqa: E501
    auto_expansion_mode: Optional[StrictStr] = Field(default=None, description="Optional. Indicates whether the entity type can be automatically expanded.", alias="autoExpansionMode")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The name of the entity type.", alias="displayName")
    enable_fuzzy_extraction: Optional[StrictBool] = Field(default=None, description="Optional. Enables fuzzy entity extraction during classification.", alias="enableFuzzyExtraction")
    entities: Optional[List[GoogleCloudDialogflowV2EntityTypeEntity]] = Field(default=None, description="Optional. The collection of entity entries associated with the entity type.")
    kind: Optional[StrictStr] = Field(default=None, description="Required. Indicates the kind of entity type.")
    name: Optional[StrictStr] = Field(default=None, description="The unique identifier of the entity type. Required for EntityTypes.UpdateEntityType and EntityTypes.BatchUpdateEntityTypes methods. Format: `projects//agent/entityTypes/`.")
    __properties: ClassVar[List[str]] = ["autoExpansionMode", "displayName", "enableFuzzyExtraction", "entities", "kind", "name"]

    @field_validator('auto_expansion_mode')
    def auto_expansion_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUTO_EXPANSION_MODE_UNSPECIFIED', 'AUTO_EXPANSION_MODE_DEFAULT']):
            raise ValueError("must be one of enum values ('AUTO_EXPANSION_MODE_UNSPECIFIED', 'AUTO_EXPANSION_MODE_DEFAULT')")
        return value

    @field_validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KIND_UNSPECIFIED', 'KIND_MAP', 'KIND_LIST', 'KIND_REGEXP']):
            raise ValueError("must be one of enum values ('KIND_UNSPECIFIED', 'KIND_MAP', 'KIND_LIST', 'KIND_REGEXP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2EntityType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in entities (list)
        _items = []
        if self.entities:
            for _item_entities in self.entities:
                if _item_entities:
                    _items.append(_item_entities.to_dict())
            _dict['entities'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2EntityType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoExpansionMode": obj.get("autoExpansionMode"),
            "displayName": obj.get("displayName"),
            "enableFuzzyExtraction": obj.get("enableFuzzyExtraction"),
            "entities": [GoogleCloudDialogflowV2EntityTypeEntity.from_dict(_item) for _item in obj["entities"]] if obj.get("entities") is not None else None,
            "kind": obj.get("kind"),
            "name": obj.get("name")
        })
        return _obj



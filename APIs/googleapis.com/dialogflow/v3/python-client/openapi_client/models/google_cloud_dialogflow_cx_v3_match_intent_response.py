# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3_match import GoogleCloudDialogflowCxV3Match
from openapi_client.models.google_cloud_dialogflow_cx_v3_page import GoogleCloudDialogflowCxV3Page
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3MatchIntentResponse(BaseModel):
    """
    Response of MatchIntent.
    """ # noqa: E501
    current_page: Optional[GoogleCloudDialogflowCxV3Page] = Field(default=None, alias="currentPage")
    matches: Optional[List[GoogleCloudDialogflowCxV3Match]] = Field(default=None, description="Match results, if more than one, ordered descendingly by the confidence we have that the particular intent matches the query.")
    text: Optional[StrictStr] = Field(default=None, description="If natural language text was provided as input, this field will contain a copy of the text.")
    transcript: Optional[StrictStr] = Field(default=None, description="If natural language speech audio was provided as input, this field will contain the transcript for the audio.")
    trigger_event: Optional[StrictStr] = Field(default=None, description="If an event was provided as input, this field will contain a copy of the event name.", alias="triggerEvent")
    trigger_intent: Optional[StrictStr] = Field(default=None, description="If an intent was provided as input, this field will contain a copy of the intent identifier. Format: `projects//locations//agents//intents/`.", alias="triggerIntent")
    __properties: ClassVar[List[str]] = ["currentPage", "matches", "text", "transcript", "triggerEvent", "triggerIntent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3MatchIntentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_page
        if self.current_page:
            _dict['currentPage'] = self.current_page.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in matches (list)
        _items = []
        if self.matches:
            for _item_matches in self.matches:
                if _item_matches:
                    _items.append(_item_matches.to_dict())
            _dict['matches'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3MatchIntentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentPage": GoogleCloudDialogflowCxV3Page.from_dict(obj["currentPage"]) if obj.get("currentPage") is not None else None,
            "matches": [GoogleCloudDialogflowCxV3Match.from_dict(_item) for _item in obj["matches"]] if obj.get("matches") is not None else None,
            "text": obj.get("text"),
            "transcript": obj.get("transcript"),
            "triggerEvent": obj.get("triggerEvent"),
            "triggerIntent": obj.get("triggerIntent")
        })
        return _obj



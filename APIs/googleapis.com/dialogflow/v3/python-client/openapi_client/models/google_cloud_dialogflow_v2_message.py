# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2_message_annotation import GoogleCloudDialogflowV2MessageAnnotation
from openapi_client.models.google_cloud_dialogflow_v2_sentiment_analysis_result import GoogleCloudDialogflowV2SentimentAnalysisResult
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2Message(BaseModel):
    """
    Represents a message posted into a conversation.
    """ # noqa: E501
    content: Optional[StrictStr] = Field(default=None, description="Required. The message content.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the message was created in Contact Center AI.", alias="createTime")
    language_code: Optional[StrictStr] = Field(default=None, description="Optional. The message language. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: \"en-US\".", alias="languageCode")
    message_annotation: Optional[GoogleCloudDialogflowV2MessageAnnotation] = Field(default=None, alias="messageAnnotation")
    name: Optional[StrictStr] = Field(default=None, description="Optional. The unique identifier of the message. Format: `projects//locations//conversations//messages/`.")
    participant: Optional[StrictStr] = Field(default=None, description="Output only. The participant that sends this message.")
    participant_role: Optional[StrictStr] = Field(default=None, description="Output only. The role of the participant.", alias="participantRole")
    send_time: Optional[StrictStr] = Field(default=None, description="Optional. The time when the message was sent.", alias="sendTime")
    sentiment_analysis: Optional[GoogleCloudDialogflowV2SentimentAnalysisResult] = Field(default=None, alias="sentimentAnalysis")
    __properties: ClassVar[List[str]] = ["content", "createTime", "languageCode", "messageAnnotation", "name", "participant", "participantRole", "sendTime", "sentimentAnalysis"]

    @field_validator('participant_role')
    def participant_role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ROLE_UNSPECIFIED', 'HUMAN_AGENT', 'AUTOMATED_AGENT', 'END_USER']):
            raise ValueError("must be one of enum values ('ROLE_UNSPECIFIED', 'HUMAN_AGENT', 'AUTOMATED_AGENT', 'END_USER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2Message from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "participant",
            "participant_role",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of message_annotation
        if self.message_annotation:
            _dict['messageAnnotation'] = self.message_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sentiment_analysis
        if self.sentiment_analysis:
            _dict['sentimentAnalysis'] = self.sentiment_analysis.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2Message from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": obj.get("content"),
            "createTime": obj.get("createTime"),
            "languageCode": obj.get("languageCode"),
            "messageAnnotation": GoogleCloudDialogflowV2MessageAnnotation.from_dict(obj["messageAnnotation"]) if obj.get("messageAnnotation") is not None else None,
            "name": obj.get("name"),
            "participant": obj.get("participant"),
            "participantRole": obj.get("participantRole"),
            "sendTime": obj.get("sendTime"),
            "sentimentAnalysis": GoogleCloudDialogflowV2SentimentAnalysisResult.from_dict(obj["sentimentAnalysis"]) if obj.get("sentimentAnalysis") is not None else None
        })
        return _obj



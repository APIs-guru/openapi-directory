# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_dialogflow_cx_v3_output_audio_config import GoogleCloudDialogflowCxV3OutputAudioConfig
from openapi_client.models.google_cloud_dialogflow_cx_v3_query_result import GoogleCloudDialogflowCxV3QueryResult
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3FulfillIntentResponse(BaseModel):
    """
    Response of FulfillIntent
    """ # noqa: E501
    output_audio: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The audio data bytes encoded as specified in the request. Note: The output audio is generated based on the values of default platform text responses found in the `query_result.response_messages` field. If multiple default text responses exist, they will be concatenated when generating audio. If no default platform text responses exist, the generated audio content will be empty. In some scenarios, multiple output audio fields may be present in the response structure. In these cases, only the top-most-level audio output has content.", alias="outputAudio")
    output_audio_config: Optional[GoogleCloudDialogflowCxV3OutputAudioConfig] = Field(default=None, alias="outputAudioConfig")
    query_result: Optional[GoogleCloudDialogflowCxV3QueryResult] = Field(default=None, alias="queryResult")
    response_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique identifier of the response. It can be used to locate a response in the training example set or for reporting issues.", alias="responseId")
    __properties: ClassVar[List[str]] = ["outputAudio", "outputAudioConfig", "queryResult", "responseId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3FulfillIntentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of output_audio_config
        if self.output_audio_config:
            _dict['outputAudioConfig'] = self.output_audio_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query_result
        if self.query_result:
            _dict['queryResult'] = self.query_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3FulfillIntentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "outputAudio": obj.get("outputAudio"),
            "outputAudioConfig": GoogleCloudDialogflowCxV3OutputAudioConfig.from_dict(obj["outputAudioConfig"]) if obj.get("outputAudioConfig") is not None else None,
            "queryResult": GoogleCloudDialogflowCxV3QueryResult.from_dict(obj["queryResult"]) if obj.get("queryResult") is not None else None,
            "responseId": obj.get("responseId")
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1IntentParameter(BaseModel):
    """
    Represents intent parameters.
    """ # noqa: E501
    default_value: Optional[StrictStr] = Field(default=None, description="Optional. The default value to use when the `value` yields an empty result. Default values can be extracted from contexts by using the following syntax: `#context_name.parameter_name`.", alias="defaultValue")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The name of the parameter.", alias="displayName")
    entity_type_display_name: Optional[StrictStr] = Field(default=None, description="Optional. The name of the entity type, prefixed with `@`, that describes values of the parameter. If the parameter is required, this must be provided.", alias="entityTypeDisplayName")
    is_list: Optional[StrictBool] = Field(default=None, description="Optional. Indicates whether the parameter represents a list of values.", alias="isList")
    mandatory: Optional[StrictBool] = Field(default=None, description="Optional. Indicates whether the parameter is required. That is, whether the intent cannot be completed without collecting the parameter value.")
    name: Optional[StrictStr] = Field(default=None, description="The unique identifier of this parameter.")
    prompts: Optional[List[StrictStr]] = Field(default=None, description="Optional. The collection of prompts that the agent can present to the user in order to collect a value for the parameter.")
    value: Optional[StrictStr] = Field(default=None, description="Optional. The definition of the parameter value. It can be: - a constant string, - a parameter value defined as `$parameter_name`, - an original parameter value defined as `$parameter_name.original`, - a parameter value from some context defined as `#context_name.parameter_name`.")
    __properties: ClassVar[List[str]] = ["defaultValue", "displayName", "entityTypeDisplayName", "isList", "mandatory", "name", "prompts", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1IntentParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1IntentParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultValue": obj.get("defaultValue"),
            "displayName": obj.get("displayName"),
            "entityTypeDisplayName": obj.get("entityTypeDisplayName"),
            "isList": obj.get("isList"),
            "mandatory": obj.get("mandatory"),
            "name": obj.get("name"),
            "prompts": obj.get("prompts"),
            "value": obj.get("value")
        })
        return _obj



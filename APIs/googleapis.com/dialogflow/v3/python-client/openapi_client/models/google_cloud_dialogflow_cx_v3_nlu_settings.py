# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3NluSettings(BaseModel):
    """
    Settings related to NLU.
    """ # noqa: E501
    classification_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold. If the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.", alias="classificationThreshold")
    model_training_mode: Optional[StrictStr] = Field(default=None, description="Indicates NLU model training mode.", alias="modelTrainingMode")
    model_type: Optional[StrictStr] = Field(default=None, description="Indicates the type of NLU model.", alias="modelType")
    __properties: ClassVar[List[str]] = ["classificationThreshold", "modelTrainingMode", "modelType"]

    @field_validator('model_training_mode')
    def model_training_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MODEL_TRAINING_MODE_UNSPECIFIED', 'MODEL_TRAINING_MODE_AUTOMATIC', 'MODEL_TRAINING_MODE_MANUAL']):
            raise ValueError("must be one of enum values ('MODEL_TRAINING_MODE_UNSPECIFIED', 'MODEL_TRAINING_MODE_AUTOMATIC', 'MODEL_TRAINING_MODE_MANUAL')")
        return value

    @field_validator('model_type')
    def model_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MODEL_TYPE_UNSPECIFIED', 'MODEL_TYPE_STANDARD', 'MODEL_TYPE_ADVANCED']):
            raise ValueError("must be one of enum values ('MODEL_TYPE_UNSPECIFIED', 'MODEL_TYPE_STANDARD', 'MODEL_TYPE_ADVANCED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3NluSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3NluSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "classificationThreshold": obj.get("classificationThreshold"),
            "modelTrainingMode": obj.get("modelTrainingMode"),
            "modelType": obj.get("modelType")
        })
        return _obj



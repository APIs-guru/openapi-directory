# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3_generative_settings_fallback_settings import GoogleCloudDialogflowCxV3GenerativeSettingsFallbackSettings
from openapi_client.models.google_cloud_dialogflow_cx_v3_generative_settings_knowledge_connector_settings import GoogleCloudDialogflowCxV3GenerativeSettingsKnowledgeConnectorSettings
from openapi_client.models.google_cloud_dialogflow_cx_v3_safety_settings import GoogleCloudDialogflowCxV3SafetySettings
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3GenerativeSettings(BaseModel):
    """
    Settings for Generative AI.
    """ # noqa: E501
    fallback_settings: Optional[GoogleCloudDialogflowCxV3GenerativeSettingsFallbackSettings] = Field(default=None, alias="fallbackSettings")
    generative_safety_settings: Optional[GoogleCloudDialogflowCxV3SafetySettings] = Field(default=None, alias="generativeSafetySettings")
    knowledge_connector_settings: Optional[GoogleCloudDialogflowCxV3GenerativeSettingsKnowledgeConnectorSettings] = Field(default=None, alias="knowledgeConnectorSettings")
    language_code: Optional[StrictStr] = Field(default=None, description="Language for this settings.", alias="languageCode")
    name: Optional[StrictStr] = Field(default=None, description="Format: `projects//locations//agents//generativeSettings`.")
    __properties: ClassVar[List[str]] = ["fallbackSettings", "generativeSafetySettings", "knowledgeConnectorSettings", "languageCode", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3GenerativeSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fallback_settings
        if self.fallback_settings:
            _dict['fallbackSettings'] = self.fallback_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of generative_safety_settings
        if self.generative_safety_settings:
            _dict['generativeSafetySettings'] = self.generative_safety_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of knowledge_connector_settings
        if self.knowledge_connector_settings:
            _dict['knowledgeConnectorSettings'] = self.knowledge_connector_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3GenerativeSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fallbackSettings": GoogleCloudDialogflowCxV3GenerativeSettingsFallbackSettings.from_dict(obj["fallbackSettings"]) if obj.get("fallbackSettings") is not None else None,
            "generativeSafetySettings": GoogleCloudDialogflowCxV3SafetySettings.from_dict(obj["generativeSafetySettings"]) if obj.get("generativeSafetySettings") is not None else None,
            "knowledgeConnectorSettings": GoogleCloudDialogflowCxV3GenerativeSettingsKnowledgeConnectorSettings.from_dict(obj["knowledgeConnectorSettings"]) if obj.get("knowledgeConnectorSettings") is not None else None,
            "languageCode": obj.get("languageCode"),
            "name": obj.get("name")
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_event_handler import GoogleCloudDialogflowCxV3beta1EventHandler
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_fulfillment import GoogleCloudDialogflowCxV3beta1Fulfillment
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3beta1FormParameterFillBehavior(BaseModel):
    """
    Configuration for how the filling of a parameter should be handled.
    """ # noqa: E501
    initial_prompt_fulfillment: Optional[GoogleCloudDialogflowCxV3beta1Fulfillment] = Field(default=None, alias="initialPromptFulfillment")
    reprompt_event_handlers: Optional[List[GoogleCloudDialogflowCxV3beta1EventHandler]] = Field(default=None, description="The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are: * `sys.no-match-`, where N can be from 1 to 6 * `sys.no-match-default` * `sys.no-input-`, where N can be from 1 to 6 * `sys.no-input-default` * `sys.invalid-parameter` `initial_prompt_fulfillment` provides the first prompt for the parameter. If the user's response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the `sys.no-match-1`/`sys.no-input-1` handler (if defined) will be called to provide a prompt. The `sys.no-match-2`/`sys.no-input-2` handler (if defined) will respond to the next no-match/no-input event, and so on. A `sys.no-match-default` or `sys.no-input-default` handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed. A `sys.invalid-parameter` handler can be defined to handle the case where the parameter values have been `invalidated` by webhook. For example, if the user's response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the `sys.invalid-parameter` handler (if defined) will be called to provide a prompt. If the event handler for the corresponding event can't be found on the parameter, `initial_prompt_fulfillment` will be re-prompted.", alias="repromptEventHandlers")
    __properties: ClassVar[List[str]] = ["initialPromptFulfillment", "repromptEventHandlers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1FormParameterFillBehavior from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of initial_prompt_fulfillment
        if self.initial_prompt_fulfillment:
            _dict['initialPromptFulfillment'] = self.initial_prompt_fulfillment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in reprompt_event_handlers (list)
        _items = []
        if self.reprompt_event_handlers:
            for _item_reprompt_event_handlers in self.reprompt_event_handlers:
                if _item_reprompt_event_handlers:
                    _items.append(_item_reprompt_event_handlers.to_dict())
            _dict['repromptEventHandlers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1FormParameterFillBehavior from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "initialPromptFulfillment": GoogleCloudDialogflowCxV3beta1Fulfillment.from_dict(obj["initialPromptFulfillment"]) if obj.get("initialPromptFulfillment") is not None else None,
            "repromptEventHandlers": [GoogleCloudDialogflowCxV3beta1EventHandler.from_dict(_item) for _item in obj["repromptEventHandlers"]] if obj.get("repromptEventHandlers") is not None else None
        })
        return _obj



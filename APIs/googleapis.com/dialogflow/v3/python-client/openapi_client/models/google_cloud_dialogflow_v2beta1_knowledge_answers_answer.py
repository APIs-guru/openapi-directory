# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1KnowledgeAnswersAnswer(BaseModel):
    """
    An answer from Knowledge Connector.
    """ # noqa: E501
    answer: Optional[StrictStr] = Field(default=None, description="The piece of text from the `source` knowledge base document that answers this conversational query.")
    faq_question: Optional[StrictStr] = Field(default=None, description="The corresponding FAQ question if the answer was extracted from a FAQ Document, empty otherwise.", alias="faqQuestion")
    match_confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The system's confidence score that this Knowledge answer is a good match for this conversational query. The range is from 0.0 (completely uncertain) to 1.0 (completely certain). Note: The confidence score is likely to vary somewhat (possibly even for identical requests), as the underlying model is under constant improvement. It may be deprecated in the future. We recommend using `match_confidence_level` which should be generally more stable.", alias="matchConfidence")
    match_confidence_level: Optional[StrictStr] = Field(default=None, description="The system's confidence level that this knowledge answer is a good match for this conversational query. NOTE: The confidence level for a given `` pair may change without notice, as it depends on models that are constantly being improved. However, it will change less frequently than the confidence score below, and should be preferred for referencing the quality of an answer.", alias="matchConfidenceLevel")
    source: Optional[StrictStr] = Field(default=None, description="Indicates which Knowledge Document this answer was extracted from. Format: `projects//knowledgeBases//documents/`.")
    __properties: ClassVar[List[str]] = ["answer", "faqQuestion", "matchConfidence", "matchConfidenceLevel", "source"]

    @field_validator('match_confidence_level')
    def match_confidence_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MATCH_CONFIDENCE_LEVEL_UNSPECIFIED', 'LOW', 'MEDIUM', 'HIGH']):
            raise ValueError("must be one of enum values ('MATCH_CONFIDENCE_LEVEL_UNSPECIFIED', 'LOW', 'MEDIUM', 'HIGH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1KnowledgeAnswersAnswer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1KnowledgeAnswersAnswer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "answer": obj.get("answer"),
            "faqQuestion": obj.get("faqQuestion"),
            "matchConfidence": obj.get("matchConfidence"),
            "matchConfidenceLevel": obj.get("matchConfidenceLevel"),
            "source": obj.get("source")
        })
        return _obj



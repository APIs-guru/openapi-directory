# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_dialogflow_cx_v3_webhook_request_intent_info_intent_parameter_value import GoogleCloudDialogflowCxV3WebhookRequestIntentInfoIntentParameterValue
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3WebhookRequestIntentInfo(BaseModel):
    """
    Represents intent information communicated to the webhook.
    """ # noqa: E501
    confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The confidence of the matched intent. Values range from 0.0 (completely uncertain) to 1.0 (completely certain).")
    display_name: Optional[StrictStr] = Field(default=None, description="Always present. The display name of the last matched intent.", alias="displayName")
    last_matched_intent: Optional[StrictStr] = Field(default=None, description="Always present. The unique identifier of the last matched intent. Format: `projects//locations//agents//intents/`.", alias="lastMatchedIntent")
    parameters: Optional[Dict[str, GoogleCloudDialogflowCxV3WebhookRequestIntentInfoIntentParameterValue]] = Field(default=None, description="Parameters identified as a result of intent matching. This is a map of the name of the identified parameter to the value of the parameter identified from the user's utterance. All parameters defined in the matched intent that are identified will be surfaced here.")
    __properties: ClassVar[List[str]] = ["confidence", "displayName", "lastMatchedIntent", "parameters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3WebhookRequestIntentInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in parameters (dict)
        _field_dict = {}
        if self.parameters:
            for _key_parameters in self.parameters:
                if self.parameters[_key_parameters]:
                    _field_dict[_key_parameters] = self.parameters[_key_parameters].to_dict()
            _dict['parameters'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3WebhookRequestIntentInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confidence": obj.get("confidence"),
            "displayName": obj.get("displayName"),
            "lastMatchedIntent": obj.get("lastMatchedIntent"),
            "parameters": dict(
                (_k, GoogleCloudDialogflowCxV3WebhookRequestIntentInfoIntentParameterValue.from_dict(_v))
                for _k, _v in obj["parameters"].items()
            )
            if obj.get("parameters") is not None
            else None
        })
        return _obj



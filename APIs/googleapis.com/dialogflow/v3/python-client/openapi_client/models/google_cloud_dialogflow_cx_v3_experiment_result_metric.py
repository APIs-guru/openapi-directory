# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_dialogflow_cx_v3_experiment_result_confidence_interval import GoogleCloudDialogflowCxV3ExperimentResultConfidenceInterval
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3ExperimentResultMetric(BaseModel):
    """
    Metric and corresponding confidence intervals.
    """ # noqa: E501
    confidence_interval: Optional[GoogleCloudDialogflowCxV3ExperimentResultConfidenceInterval] = Field(default=None, alias="confidenceInterval")
    count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Count value of a metric.")
    count_type: Optional[StrictStr] = Field(default=None, description="Count-based metric type. Only one of type or count_type is specified in each Metric.", alias="countType")
    ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ratio value of a metric.")
    type: Optional[StrictStr] = Field(default=None, description="Ratio-based metric type. Only one of type or count_type is specified in each Metric.")
    __properties: ClassVar[List[str]] = ["confidenceInterval", "count", "countType", "ratio", "type"]

    @field_validator('count_type')
    def count_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COUNT_TYPE_UNSPECIFIED', 'TOTAL_NO_MATCH_COUNT', 'TOTAL_TURN_COUNT', 'AVERAGE_TURN_COUNT']):
            raise ValueError("must be one of enum values ('COUNT_TYPE_UNSPECIFIED', 'TOTAL_NO_MATCH_COUNT', 'TOTAL_TURN_COUNT', 'AVERAGE_TURN_COUNT')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['METRIC_UNSPECIFIED', 'CONTAINED_SESSION_NO_CALLBACK_RATE', 'LIVE_AGENT_HANDOFF_RATE', 'CALLBACK_SESSION_RATE', 'ABANDONED_SESSION_RATE', 'SESSION_END_RATE']):
            raise ValueError("must be one of enum values ('METRIC_UNSPECIFIED', 'CONTAINED_SESSION_NO_CALLBACK_RATE', 'LIVE_AGENT_HANDOFF_RATE', 'CALLBACK_SESSION_RATE', 'ABANDONED_SESSION_RATE', 'SESSION_END_RATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3ExperimentResultMetric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of confidence_interval
        if self.confidence_interval:
            _dict['confidenceInterval'] = self.confidence_interval.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3ExperimentResultMetric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confidenceInterval": GoogleCloudDialogflowCxV3ExperimentResultConfidenceInterval.from_dict(obj["confidenceInterval"]) if obj.get("confidenceInterval") is not None else None,
            "count": obj.get("count"),
            "countType": obj.get("countType"),
            "ratio": obj.get("ratio"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3_export_agent_request_git_destination import GoogleCloudDialogflowCxV3ExportAgentRequestGitDestination
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3ExportAgentRequest(BaseModel):
    """
    The request message for Agents.ExportAgent.
    """ # noqa: E501
    agent_uri: Optional[StrictStr] = Field(default=None, description="Optional. The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to export the agent to. The format of this URI must be `gs:///`. If left unspecified, the serialized agent is returned inline. Dialogflow performs a write operation for the Cloud Storage object on the caller's behalf, so your request authentication must have write permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).", alias="agentUri")
    data_format: Optional[StrictStr] = Field(default=None, description="Optional. The data format of the exported agent. If not specified, `BLOB` is assumed.", alias="dataFormat")
    environment: Optional[StrictStr] = Field(default=None, description="Optional. Environment name. If not set, draft environment is assumed. Format: `projects//locations//agents//environments/`.")
    git_destination: Optional[GoogleCloudDialogflowCxV3ExportAgentRequestGitDestination] = Field(default=None, alias="gitDestination")
    include_bigquery_export_settings: Optional[StrictBool] = Field(default=None, description="Optional. Whether to include BigQuery Export setting.", alias="includeBigqueryExportSettings")
    __properties: ClassVar[List[str]] = ["agentUri", "dataFormat", "environment", "gitDestination", "includeBigqueryExportSettings"]

    @field_validator('data_format')
    def data_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_FORMAT_UNSPECIFIED', 'BLOB', 'JSON_PACKAGE']):
            raise ValueError("must be one of enum values ('DATA_FORMAT_UNSPECIFIED', 'BLOB', 'JSON_PACKAGE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3ExportAgentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of git_destination
        if self.git_destination:
            _dict['gitDestination'] = self.git_destination.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3ExportAgentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentUri": obj.get("agentUri"),
            "dataFormat": obj.get("dataFormat"),
            "environment": obj.get("environment"),
            "gitDestination": GoogleCloudDialogflowCxV3ExportAgentRequestGitDestination.from_dict(obj["gitDestination"]) if obj.get("gitDestination") is not None else None,
            "includeBigqueryExportSettings": obj.get("includeBigqueryExportSettings")
        })
        return _obj



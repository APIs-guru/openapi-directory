# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3_synthesize_speech_config import GoogleCloudDialogflowCxV3SynthesizeSpeechConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3TextToSpeechSettings(BaseModel):
    """
    Settings related to speech synthesizing.
    """ # noqa: E501
    synthesize_speech_configs: Optional[Dict[str, GoogleCloudDialogflowCxV3SynthesizeSpeechConfig]] = Field(default=None, description="Configuration of how speech should be synthesized, mapping from language (https://cloud.google.com/dialogflow/cx/docs/reference/language) to SynthesizeSpeechConfig. These settings affect: - The [phone gateway](https://cloud.google.com/dialogflow/cx/docs/concept/integration/phone-gateway) synthesize configuration set via Agent.text_to_speech_settings. - How speech is synthesized when invoking session APIs. Agent.text_to_speech_settings only applies if OutputAudioConfig.synthesize_speech_config is not specified.", alias="synthesizeSpeechConfigs")
    __properties: ClassVar[List[str]] = ["synthesizeSpeechConfigs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3TextToSpeechSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in synthesize_speech_configs (dict)
        _field_dict = {}
        if self.synthesize_speech_configs:
            for _key_synthesize_speech_configs in self.synthesize_speech_configs:
                if self.synthesize_speech_configs[_key_synthesize_speech_configs]:
                    _field_dict[_key_synthesize_speech_configs] = self.synthesize_speech_configs[_key_synthesize_speech_configs].to_dict()
            _dict['synthesizeSpeechConfigs'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3TextToSpeechSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "synthesizeSpeechConfigs": dict(
                (_k, GoogleCloudDialogflowCxV3SynthesizeSpeechConfig.from_dict(_v))
                for _k, _v in obj["synthesizeSpeechConfigs"].items()
            )
            if obj.get("synthesizeSpeechConfigs") is not None
            else None
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3_synthesize_speech_config import GoogleCloudDialogflowCxV3SynthesizeSpeechConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3OutputAudioConfig(BaseModel):
    """
    Instructs the speech synthesizer how to generate the output audio content.
    """ # noqa: E501
    audio_encoding: Optional[StrictStr] = Field(default=None, description="Required. Audio encoding of the synthesized audio content.", alias="audioEncoding")
    sample_rate_hertz: Optional[StrictInt] = Field(default=None, description="Optional. The synthesis sample rate (in hertz) for this audio. If not provided, then the synthesizer will use the default sample rate based on the audio encoding. If this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality).", alias="sampleRateHertz")
    synthesize_speech_config: Optional[GoogleCloudDialogflowCxV3SynthesizeSpeechConfig] = Field(default=None, alias="synthesizeSpeechConfig")
    __properties: ClassVar[List[str]] = ["audioEncoding", "sampleRateHertz", "synthesizeSpeechConfig"]

    @field_validator('audio_encoding')
    def audio_encoding_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OUTPUT_AUDIO_ENCODING_UNSPECIFIED', 'OUTPUT_AUDIO_ENCODING_LINEAR_16', 'OUTPUT_AUDIO_ENCODING_MP3', 'OUTPUT_AUDIO_ENCODING_MP3_64_KBPS', 'OUTPUT_AUDIO_ENCODING_OGG_OPUS', 'OUTPUT_AUDIO_ENCODING_MULAW']):
            raise ValueError("must be one of enum values ('OUTPUT_AUDIO_ENCODING_UNSPECIFIED', 'OUTPUT_AUDIO_ENCODING_LINEAR_16', 'OUTPUT_AUDIO_ENCODING_MP3', 'OUTPUT_AUDIO_ENCODING_MP3_64_KBPS', 'OUTPUT_AUDIO_ENCODING_OGG_OPUS', 'OUTPUT_AUDIO_ENCODING_MULAW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3OutputAudioConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of synthesize_speech_config
        if self.synthesize_speech_config:
            _dict['synthesizeSpeechConfig'] = self.synthesize_speech_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3OutputAudioConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audioEncoding": obj.get("audioEncoding"),
            "sampleRateHertz": obj.get("sampleRateHertz"),
            "synthesizeSpeechConfig": GoogleCloudDialogflowCxV3SynthesizeSpeechConfig.from_dict(obj["synthesizeSpeechConfig"]) if obj.get("synthesizeSpeechConfig") is not None else None
        })
        return _obj



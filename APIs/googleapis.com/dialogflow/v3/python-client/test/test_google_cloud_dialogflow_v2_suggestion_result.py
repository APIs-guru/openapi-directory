# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_dialogflow_v2_suggestion_result import GoogleCloudDialogflowV2SuggestionResult

class TestGoogleCloudDialogflowV2SuggestionResult(unittest.TestCase):
    """GoogleCloudDialogflowV2SuggestionResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDialogflowV2SuggestionResult:
        """Test GoogleCloudDialogflowV2SuggestionResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDialogflowV2SuggestionResult`
        """
        model = GoogleCloudDialogflowV2SuggestionResult()
        if include_optional:
            return GoogleCloudDialogflowV2SuggestionResult(
                error = openapi_client.models.google_rpc_status.GoogleRpcStatus(
                    code = 56, 
                    details = [
                        {
                            'key' : null
                            }
                        ], 
                    message = '', ),
                suggest_articles_response = openapi_client.models.google_cloud_dialogflow_v2_suggest_articles_response.GoogleCloudDialogflowV2SuggestArticlesResponse(
                    article_answers = [
                        openapi_client.models.google_cloud_dialogflow_v2_article_answer.GoogleCloudDialogflowV2ArticleAnswer(
                            answer_record = '', 
                            confidence = 1.337, 
                            metadata = {
                                'key' : ''
                                }, 
                            snippets = [
                                ''
                                ], 
                            title = '', 
                            uri = '', )
                        ], 
                    context_size = 56, 
                    latest_message = '', ),
                suggest_faq_answers_response = openapi_client.models.google_cloud_dialogflow_v2_suggest_faq_answers_response.GoogleCloudDialogflowV2SuggestFaqAnswersResponse(
                    context_size = 56, 
                    faq_answers = [
                        openapi_client.models.google_cloud_dialogflow_v2_faq_answer.GoogleCloudDialogflowV2FaqAnswer(
                            answer = '', 
                            answer_record = '', 
                            confidence = 1.337, 
                            metadata = {
                                'key' : ''
                                }, 
                            question = '', 
                            source = '', )
                        ], 
                    latest_message = '', ),
                suggest_smart_replies_response = openapi_client.models.google_cloud_dialogflow_v2_suggest_smart_replies_response.GoogleCloudDialogflowV2SuggestSmartRepliesResponse(
                    context_size = 56, 
                    latest_message = '', 
                    smart_reply_answers = [
                        openapi_client.models.google_cloud_dialogflow_v2_smart_reply_answer.GoogleCloudDialogflowV2SmartReplyAnswer(
                            answer_record = '', 
                            confidence = 1.337, 
                            reply = '', )
                        ], )
            )
        else:
            return GoogleCloudDialogflowV2SuggestionResult(
        )
        """

    def testGoogleCloudDialogflowV2SuggestionResult(self):
        """Test GoogleCloudDialogflowV2SuggestionResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

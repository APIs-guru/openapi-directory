# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_dialogflow_v2_message import GoogleCloudDialogflowV2Message

class TestGoogleCloudDialogflowV2Message(unittest.TestCase):
    """GoogleCloudDialogflowV2Message unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDialogflowV2Message:
        """Test GoogleCloudDialogflowV2Message
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDialogflowV2Message`
        """
        model = GoogleCloudDialogflowV2Message()
        if include_optional:
            return GoogleCloudDialogflowV2Message(
                content = '',
                create_time = '',
                language_code = '',
                message_annotation = openapi_client.models.google_cloud_dialogflow_v2_message_annotation.GoogleCloudDialogflowV2MessageAnnotation(
                    contain_entities = True, 
                    parts = [
                        openapi_client.models.google_cloud_dialogflow_v2_annotated_message_part.GoogleCloudDialogflowV2AnnotatedMessagePart(
                            entity_type = '', 
                            formatted_value = null, 
                            text = '', )
                        ], ),
                name = '',
                participant = '',
                participant_role = 'ROLE_UNSPECIFIED',
                send_time = '',
                sentiment_analysis = openapi_client.models.google_cloud_dialogflow_v2_sentiment_analysis_result.GoogleCloudDialogflowV2SentimentAnalysisResult(
                    query_text_sentiment = openapi_client.models.google_cloud_dialogflow_v2_sentiment.GoogleCloudDialogflowV2Sentiment(
                        magnitude = 1.337, 
                        score = 1.337, ), )
            )
        else:
            return GoogleCloudDialogflowV2Message(
        )
        """

    def testGoogleCloudDialogflowV2Message(self):
        """Test GoogleCloudDialogflowV2Message"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

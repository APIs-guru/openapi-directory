# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_dialogflow_cx_v3_detect_intent_request import GoogleCloudDialogflowCxV3DetectIntentRequest

class TestGoogleCloudDialogflowCxV3DetectIntentRequest(unittest.TestCase):
    """GoogleCloudDialogflowCxV3DetectIntentRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDialogflowCxV3DetectIntentRequest:
        """Test GoogleCloudDialogflowCxV3DetectIntentRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDialogflowCxV3DetectIntentRequest`
        """
        model = GoogleCloudDialogflowCxV3DetectIntentRequest()
        if include_optional:
            return GoogleCloudDialogflowCxV3DetectIntentRequest(
                output_audio_config = openapi_client.models.google_cloud_dialogflow_cx_v3_output_audio_config.GoogleCloudDialogflowCxV3OutputAudioConfig(
                    audio_encoding = 'OUTPUT_AUDIO_ENCODING_UNSPECIFIED', 
                    sample_rate_hertz = 56, 
                    synthesize_speech_config = openapi_client.models.google_cloud_dialogflow_cx_v3_synthesize_speech_config.GoogleCloudDialogflowCxV3SynthesizeSpeechConfig(
                        effects_profile_id = [
                            ''
                            ], 
                        pitch = 1.337, 
                        speaking_rate = 1.337, 
                        voice = openapi_client.models.google_cloud_dialogflow_cx_v3_voice_selection_params.GoogleCloudDialogflowCxV3VoiceSelectionParams(
                            name = '', 
                            ssml_gender = 'SSML_VOICE_GENDER_UNSPECIFIED', ), 
                        volume_gain_db = 1.337, ), ),
                query_input = openapi_client.models.google_cloud_dialogflow_cx_v3_query_input.GoogleCloudDialogflowCxV3QueryInput(
                    audio = openapi_client.models.google_cloud_dialogflow_cx_v3_audio_input.GoogleCloudDialogflowCxV3AudioInput(
                        config = openapi_client.models.google_cloud_dialogflow_cx_v3_input_audio_config.GoogleCloudDialogflowCxV3InputAudioConfig(
                            audio_encoding = 'AUDIO_ENCODING_UNSPECIFIED', 
                            barge_in_config = openapi_client.models.google_cloud_dialogflow_cx_v3_barge_in_config.GoogleCloudDialogflowCxV3BargeInConfig(
                                no_barge_in_duration = '', 
                                total_duration = '', ), 
                            enable_word_info = True, 
                            model = '', 
                            model_variant = 'SPEECH_MODEL_VARIANT_UNSPECIFIED', 
                            opt_out_conformer_model_migration = True, 
                            phrase_hints = [
                                ''
                                ], 
                            sample_rate_hertz = 56, 
                            single_utterance = True, ), ), 
                    dtmf = openapi_client.models.google_cloud_dialogflow_cx_v3_dtmf_input.GoogleCloudDialogflowCxV3DtmfInput(
                        digits = '', 
                        finish_digit = '', ), 
                    event = openapi_client.models.google_cloud_dialogflow_cx_v3_event_input.GoogleCloudDialogflowCxV3EventInput(), 
                    intent = openapi_client.models.google_cloud_dialogflow_cx_v3_intent_input.GoogleCloudDialogflowCxV3IntentInput(), 
                    language_code = '', 
                    text = openapi_client.models.google_cloud_dialogflow_cx_v3_text_input.GoogleCloudDialogflowCxV3TextInput(), ),
                var_query_params = openapi_client.models.google_cloud_dialogflow_cx_v3_query_parameters.GoogleCloudDialogflowCxV3QueryParameters(
                    analyze_query_text_sentiment = True, 
                    channel = '', 
                    current_page = '', 
                    disable_webhook = True, 
                    end_user_metadata = {
                        'key' : null
                        }, 
                    flow_versions = [
                        ''
                        ], 
                    geo_location = openapi_client.models.google_type_lat_lng.GoogleTypeLatLng(
                        latitude = 1.337, 
                        longitude = 1.337, ), 
                    parameters = {
                        'key' : null
                        }, 
                    payload = {
                        'key' : null
                        }, 
                    search_config = openapi_client.models.google_cloud_dialogflow_cx_v3_search_config.GoogleCloudDialogflowCxV3SearchConfig(
                        boost_specs = [
                            openapi_client.models.google_cloud_dialogflow_cx_v3_boost_specs.GoogleCloudDialogflowCxV3BoostSpecs(
                                data_stores = [
                                    ''
                                    ], 
                                spec = [
                                    openapi_client.models.google_cloud_dialogflow_cx_v3_boost_spec.GoogleCloudDialogflowCxV3BoostSpec(
                                        condition_boost_specs = [
                                            openapi_client.models.google_cloud_dialogflow_cx_v3_boost_spec_condition_boost_spec.GoogleCloudDialogflowCxV3BoostSpecConditionBoostSpec(
                                                boost = 1.337, 
                                                condition = '', )
                                            ], )
                                    ], )
                            ], 
                        filter_specs = [
                            openapi_client.models.google_cloud_dialogflow_cx_v3_filter_specs.GoogleCloudDialogflowCxV3FilterSpecs(
                                filter = '', )
                            ], ), 
                    session_entity_types = [
                        openapi_client.models.google_cloud_dialogflow_cx_v3_session_entity_type.GoogleCloudDialogflowCxV3SessionEntityType(
                            entities = [
                                openapi_client.models.google_cloud_dialogflow_cx_v3_entity_type_entity.GoogleCloudDialogflowCxV3EntityTypeEntity(
                                    synonyms = [
                                        ''
                                        ], 
                                    value = '', )
                                ], 
                            entity_override_mode = 'ENTITY_OVERRIDE_MODE_UNSPECIFIED', 
                            name = '', )
                        ], 
                    session_ttl = '', 
                    time_zone = '', 
                    webhook_headers = {
                        'key' : ''
                        }, )
            )
        else:
            return GoogleCloudDialogflowCxV3DetectIntentRequest(
        )
        """

    def testGoogleCloudDialogflowCxV3DetectIntentRequest(self):
        """Test GoogleCloudDialogflowCxV3DetectIntentRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2_human_agent_assistant_config_message_analysis_config import GoogleCloudDialogflowV2HumanAgentAssistantConfigMessageAnalysisConfig
from openapi_client.models.google_cloud_dialogflow_v2_human_agent_assistant_config_suggestion_config import GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionConfig
from openapi_client.models.google_cloud_dialogflow_v2_notification_config import GoogleCloudDialogflowV2NotificationConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2HumanAgentAssistantConfig(BaseModel):
    """
    Defines the Human Agent Assist to connect to a conversation.
    """ # noqa: E501
    end_user_suggestion_config: Optional[GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionConfig] = Field(default=None, alias="endUserSuggestionConfig")
    human_agent_suggestion_config: Optional[GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionConfig] = Field(default=None, alias="humanAgentSuggestionConfig")
    message_analysis_config: Optional[GoogleCloudDialogflowV2HumanAgentAssistantConfigMessageAnalysisConfig] = Field(default=None, alias="messageAnalysisConfig")
    notification_config: Optional[GoogleCloudDialogflowV2NotificationConfig] = Field(default=None, alias="notificationConfig")
    __properties: ClassVar[List[str]] = ["endUserSuggestionConfig", "humanAgentSuggestionConfig", "messageAnalysisConfig", "notificationConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2HumanAgentAssistantConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of end_user_suggestion_config
        if self.end_user_suggestion_config:
            _dict['endUserSuggestionConfig'] = self.end_user_suggestion_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of human_agent_suggestion_config
        if self.human_agent_suggestion_config:
            _dict['humanAgentSuggestionConfig'] = self.human_agent_suggestion_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of message_analysis_config
        if self.message_analysis_config:
            _dict['messageAnalysisConfig'] = self.message_analysis_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notification_config
        if self.notification_config:
            _dict['notificationConfig'] = self.notification_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2HumanAgentAssistantConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endUserSuggestionConfig": GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionConfig.from_dict(obj["endUserSuggestionConfig"]) if obj.get("endUserSuggestionConfig") is not None else None,
            "humanAgentSuggestionConfig": GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionConfig.from_dict(obj["humanAgentSuggestionConfig"]) if obj.get("humanAgentSuggestionConfig") is not None else None,
            "messageAnalysisConfig": GoogleCloudDialogflowV2HumanAgentAssistantConfigMessageAnalysisConfig.from_dict(obj["messageAnalysisConfig"]) if obj.get("messageAnalysisConfig") is not None else None,
            "notificationConfig": GoogleCloudDialogflowV2NotificationConfig.from_dict(obj["notificationConfig"]) if obj.get("notificationConfig") is not None else None
        })
        return _obj



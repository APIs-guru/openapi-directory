# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2_human_agent_assistant_config_conversation_model_config import GoogleCloudDialogflowV2HumanAgentAssistantConfigConversationModelConfig
from openapi_client.models.google_cloud_dialogflow_v2_human_agent_assistant_config_conversation_process_config import GoogleCloudDialogflowV2HumanAgentAssistantConfigConversationProcessConfig
from openapi_client.models.google_cloud_dialogflow_v2_human_agent_assistant_config_suggestion_query_config import GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfig
from openapi_client.models.google_cloud_dialogflow_v2_human_agent_assistant_config_suggestion_trigger_settings import GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionTriggerSettings
from openapi_client.models.google_cloud_dialogflow_v2_suggestion_feature import GoogleCloudDialogflowV2SuggestionFeature
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionFeatureConfig(BaseModel):
    """
    Config for suggestion features.
    """ # noqa: E501
    conversation_model_config: Optional[GoogleCloudDialogflowV2HumanAgentAssistantConfigConversationModelConfig] = Field(default=None, alias="conversationModelConfig")
    conversation_process_config: Optional[GoogleCloudDialogflowV2HumanAgentAssistantConfigConversationProcessConfig] = Field(default=None, alias="conversationProcessConfig")
    disable_agent_query_logging: Optional[StrictBool] = Field(default=None, description="Optional. Disable the logging of search queries sent by human agents. It can prevent those queries from being stored at answer records. Supported features: KNOWLEDGE_SEARCH.", alias="disableAgentQueryLogging")
    enable_conversation_augmented_query: Optional[StrictBool] = Field(default=None, description="Optional. Enable including conversation context during query answer generation. Supported features: KNOWLEDGE_SEARCH.", alias="enableConversationAugmentedQuery")
    enable_event_based_suggestion: Optional[StrictBool] = Field(default=None, description="Automatically iterates all participants and tries to compile suggestions. Supported features: ARTICLE_SUGGESTION, FAQ, DIALOGFLOW_ASSIST, KNOWLEDGE_ASSIST.", alias="enableEventBasedSuggestion")
    query_config: Optional[GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfig] = Field(default=None, alias="queryConfig")
    suggestion_feature: Optional[GoogleCloudDialogflowV2SuggestionFeature] = Field(default=None, alias="suggestionFeature")
    suggestion_trigger_settings: Optional[GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionTriggerSettings] = Field(default=None, alias="suggestionTriggerSettings")
    __properties: ClassVar[List[str]] = ["conversationModelConfig", "conversationProcessConfig", "disableAgentQueryLogging", "enableConversationAugmentedQuery", "enableEventBasedSuggestion", "queryConfig", "suggestionFeature", "suggestionTriggerSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionFeatureConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conversation_model_config
        if self.conversation_model_config:
            _dict['conversationModelConfig'] = self.conversation_model_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conversation_process_config
        if self.conversation_process_config:
            _dict['conversationProcessConfig'] = self.conversation_process_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query_config
        if self.query_config:
            _dict['queryConfig'] = self.query_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suggestion_feature
        if self.suggestion_feature:
            _dict['suggestionFeature'] = self.suggestion_feature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suggestion_trigger_settings
        if self.suggestion_trigger_settings:
            _dict['suggestionTriggerSettings'] = self.suggestion_trigger_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionFeatureConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conversationModelConfig": GoogleCloudDialogflowV2HumanAgentAssistantConfigConversationModelConfig.from_dict(obj["conversationModelConfig"]) if obj.get("conversationModelConfig") is not None else None,
            "conversationProcessConfig": GoogleCloudDialogflowV2HumanAgentAssistantConfigConversationProcessConfig.from_dict(obj["conversationProcessConfig"]) if obj.get("conversationProcessConfig") is not None else None,
            "disableAgentQueryLogging": obj.get("disableAgentQueryLogging"),
            "enableConversationAugmentedQuery": obj.get("enableConversationAugmentedQuery"),
            "enableEventBasedSuggestion": obj.get("enableEventBasedSuggestion"),
            "queryConfig": GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfig.from_dict(obj["queryConfig"]) if obj.get("queryConfig") is not None else None,
            "suggestionFeature": GoogleCloudDialogflowV2SuggestionFeature.from_dict(obj["suggestionFeature"]) if obj.get("suggestionFeature") is not None else None,
            "suggestionTriggerSettings": GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionTriggerSettings.from_dict(obj["suggestionTriggerSettings"]) if obj.get("suggestionTriggerSettings") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_conversation_turn import GoogleCloudDialogflowCxV3beta1ConversationTurn
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_test_case_result import GoogleCloudDialogflowCxV3beta1TestCaseResult
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_test_config import GoogleCloudDialogflowCxV3beta1TestConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3beta1TestCase(BaseModel):
    """
    Represents a test case.
    """ # noqa: E501
    creation_time: Optional[StrictStr] = Field(default=None, description="Output only. When the test was created.", alias="creationTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The human-readable name of the test case, unique within the agent. Limit of 200 characters.", alias="displayName")
    last_test_result: Optional[GoogleCloudDialogflowCxV3beta1TestCaseResult] = Field(default=None, alias="lastTestResult")
    name: Optional[StrictStr] = Field(default=None, description="The unique identifier of the test case. TestCases.CreateTestCase will populate the name automatically. Otherwise use format: `projects//locations//agents/ /testCases/`.")
    notes: Optional[StrictStr] = Field(default=None, description="Additional freeform notes about the test case. Limit of 400 characters.")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tags are short descriptions that users may apply to test cases for organizational and filtering purposes. Each tag should start with \"#\" and has a limit of 30 characters.")
    test_case_conversation_turns: Optional[List[GoogleCloudDialogflowCxV3beta1ConversationTurn]] = Field(default=None, description="The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.", alias="testCaseConversationTurns")
    test_config: Optional[GoogleCloudDialogflowCxV3beta1TestConfig] = Field(default=None, alias="testConfig")
    __properties: ClassVar[List[str]] = ["creationTime", "displayName", "lastTestResult", "name", "notes", "tags", "testCaseConversationTurns", "testConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1TestCase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_test_result
        if self.last_test_result:
            _dict['lastTestResult'] = self.last_test_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in test_case_conversation_turns (list)
        _items = []
        if self.test_case_conversation_turns:
            for _item_test_case_conversation_turns in self.test_case_conversation_turns:
                if _item_test_case_conversation_turns:
                    _items.append(_item_test_case_conversation_turns.to_dict())
            _dict['testCaseConversationTurns'] = _items
        # override the default output from pydantic by calling `to_dict()` of test_config
        if self.test_config:
            _dict['testConfig'] = self.test_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1TestCase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "displayName": obj.get("displayName"),
            "lastTestResult": GoogleCloudDialogflowCxV3beta1TestCaseResult.from_dict(obj["lastTestResult"]) if obj.get("lastTestResult") is not None else None,
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "tags": obj.get("tags"),
            "testCaseConversationTurns": [GoogleCloudDialogflowCxV3beta1ConversationTurn.from_dict(_item) for _item in obj["testCaseConversationTurns"]] if obj.get("testCaseConversationTurns") is not None else None,
            "testConfig": GoogleCloudDialogflowCxV3beta1TestConfig.from_dict(obj["testConfig"]) if obj.get("testConfig") is not None else None
        })
        return _obj



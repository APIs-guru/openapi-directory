# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2_smart_reply_answer import GoogleCloudDialogflowV2SmartReplyAnswer
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2SuggestSmartRepliesResponse(BaseModel):
    """
    The response message for Participants.SuggestSmartReplies.
    """ # noqa: E501
    context_size: Optional[StrictInt] = Field(default=None, description="Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestSmartRepliesRequest.context_size field in the request if there aren't that many messages in the conversation.", alias="contextSize")
    latest_message: Optional[StrictStr] = Field(default=None, description="The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`.", alias="latestMessage")
    smart_reply_answers: Optional[List[GoogleCloudDialogflowV2SmartReplyAnswer]] = Field(default=None, description="Output only. Multiple reply options provided by smart reply service. The order is based on the rank of the model prediction. The maximum number of the returned replies is set in SmartReplyConfig.", alias="smartReplyAnswers")
    __properties: ClassVar[List[str]] = ["contextSize", "latestMessage", "smartReplyAnswers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2SuggestSmartRepliesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "smart_reply_answers",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in smart_reply_answers (list)
        _items = []
        if self.smart_reply_answers:
            for _item_smart_reply_answers in self.smart_reply_answers:
                if _item_smart_reply_answers:
                    _items.append(_item_smart_reply_answers.to_dict())
            _dict['smartReplyAnswers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2SuggestSmartRepliesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contextSize": obj.get("contextSize"),
            "latestMessage": obj.get("latestMessage"),
            "smartReplyAnswers": [GoogleCloudDialogflowV2SmartReplyAnswer.from_dict(_item) for _item in obj["smartReplyAnswers"]] if obj.get("smartReplyAnswers") is not None else None
        })
        return _obj



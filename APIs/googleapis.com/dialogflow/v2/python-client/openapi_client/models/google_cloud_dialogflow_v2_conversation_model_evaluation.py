# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2_evaluation_config import GoogleCloudDialogflowV2EvaluationConfig
from openapi_client.models.google_cloud_dialogflow_v2_smart_reply_metrics import GoogleCloudDialogflowV2SmartReplyMetrics
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2ConversationModelEvaluation(BaseModel):
    """
    Represents evaluation result of a conversation model.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation time of this model.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. The display name of the model evaluation. At most 64 bytes long.", alias="displayName")
    evaluation_config: Optional[GoogleCloudDialogflowV2EvaluationConfig] = Field(default=None, alias="evaluationConfig")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the evaluation. Format: `projects//conversationModels//evaluations/`")
    raw_human_eval_template_csv: Optional[StrictStr] = Field(default=None, description="Output only. Human eval template in csv format. It tooks real-world conversations provided through input dataset, generates example suggestions for customer to verify quality of the model. For Smart Reply, the generated csv file contains columns of Context, (Suggestions,Q1,Q2)*3, Actual reply. Context contains at most 10 latest messages in the conversation prior to the current suggestion. Q1: \"Would you send it as the next message of agent?\" Evaluated based on whether the suggest is appropriate to be sent by agent in current context. Q2: \"Does the suggestion move the conversation closer to resolution?\" Evaluated based on whether the suggestion provide solutions, or answers customer's question or collect information from customer to resolve the customer's issue. Actual reply column contains the actual agent reply sent in the context.", alias="rawHumanEvalTemplateCsv")
    smart_reply_metrics: Optional[GoogleCloudDialogflowV2SmartReplyMetrics] = Field(default=None, alias="smartReplyMetrics")
    __properties: ClassVar[List[str]] = ["createTime", "displayName", "evaluationConfig", "name", "rawHumanEvalTemplateCsv", "smartReplyMetrics"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2ConversationModelEvaluation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "raw_human_eval_template_csv",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of evaluation_config
        if self.evaluation_config:
            _dict['evaluationConfig'] = self.evaluation_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of smart_reply_metrics
        if self.smart_reply_metrics:
            _dict['smartReplyMetrics'] = self.smart_reply_metrics.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2ConversationModelEvaluation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "evaluationConfig": GoogleCloudDialogflowV2EvaluationConfig.from_dict(obj["evaluationConfig"]) if obj.get("evaluationConfig") is not None else None,
            "name": obj.get("name"),
            "rawHumanEvalTemplateCsv": obj.get("rawHumanEvalTemplateCsv"),
            "smartReplyMetrics": GoogleCloudDialogflowV2SmartReplyMetrics.from_dict(obj["smartReplyMetrics"]) if obj.get("smartReplyMetrics") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_dialogflow_v2_document_reload_status import GoogleCloudDialogflowV2DocumentReloadStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2Document(BaseModel):
    """
    A knowledge document to be used by a KnowledgeBase. For more information, see the [knowledge base guide](https://cloud.google.com/dialogflow/docs/how/knowledge-bases). Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.
    """ # noqa: E501
    content_uri: Optional[StrictStr] = Field(default=None, description="The URI where the file content is located. For documents stored in Google Cloud Storage, these URIs must have the form `gs:///`. NOTE: External URLs must correspond to public webpages, i.e., they must be indexed by Google Search. In particular, URLs for showing documents in Google Cloud Storage (i.e. the URL in your browser) are not supported. Instead use the `gs://` format URI described above.", alias="contentUri")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the document. The name must be 1024 bytes or less; otherwise, the creation request fails.", alias="displayName")
    enable_auto_reload: Optional[StrictBool] = Field(default=None, description="Optional. If true, we try to automatically reload the document every day (at a time picked by the system). If false or unspecified, we don't try to automatically reload the document. Currently you can only enable automatic reload for documents sourced from a public url, see `source` field for the source types. Reload status can be tracked in `latest_reload_status`. If a reload fails, we will keep the document unchanged. If a reload fails with internal errors, the system will try to reload the document on the next day. If a reload fails with non-retriable errors (e.g. PERMISSION_DENIED), the system will not try to reload the document anymore. You need to manually reload the document successfully by calling `ReloadDocument` and clear the errors.", alias="enableAutoReload")
    knowledge_types: Optional[List[StrictStr]] = Field(default=None, description="Required. The knowledge type of document content.", alias="knowledgeTypes")
    latest_reload_status: Optional[GoogleCloudDialogflowV2DocumentReloadStatus] = Field(default=None, alias="latestReloadStatus")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Metadata for the document. The metadata supports arbitrary key-value pairs. Suggested use cases include storing a document's title, an external URL distinct from the document's content_uri, etc. The max size of a `key` or a `value` of the metadata is 1024 bytes.")
    mime_type: Optional[StrictStr] = Field(default=None, description="Required. The MIME type of this document.", alias="mimeType")
    name: Optional[StrictStr] = Field(default=None, description="Optional. The document resource name. The name must be empty when creating a document. Format: `projects//locations//knowledgeBases//documents/`.")
    raw_content: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The raw content of the document. This field is only permitted for EXTRACTIVE_QA and FAQ knowledge types.", alias="rawContent")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the document.")
    __properties: ClassVar[List[str]] = ["contentUri", "displayName", "enableAutoReload", "knowledgeTypes", "latestReloadStatus", "metadata", "mimeType", "name", "rawContent", "state"]

    @field_validator('knowledge_types')
    def knowledge_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['KNOWLEDGE_TYPE_UNSPECIFIED', 'FAQ', 'EXTRACTIVE_QA', 'ARTICLE_SUGGESTION', 'AGENT_FACING_SMART_REPLY']):
                raise ValueError("each list item must be one of ('KNOWLEDGE_TYPE_UNSPECIFIED', 'FAQ', 'EXTRACTIVE_QA', 'ARTICLE_SUGGESTION', 'AGENT_FACING_SMART_REPLY')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'UPDATING', 'RELOADING', 'DELETING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'UPDATING', 'RELOADING', 'DELETING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2Document from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of latest_reload_status
        if self.latest_reload_status:
            _dict['latestReloadStatus'] = self.latest_reload_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2Document from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentUri": obj.get("contentUri"),
            "displayName": obj.get("displayName"),
            "enableAutoReload": obj.get("enableAutoReload"),
            "knowledgeTypes": obj.get("knowledgeTypes"),
            "latestReloadStatus": GoogleCloudDialogflowV2DocumentReloadStatus.from_dict(obj["latestReloadStatus"]) if obj.get("latestReloadStatus") is not None else None,
            "metadata": obj.get("metadata"),
            "mimeType": obj.get("mimeType"),
            "name": obj.get("name"),
            "rawContent": obj.get("rawContent"),
            "state": obj.get("state")
        })
        return _obj



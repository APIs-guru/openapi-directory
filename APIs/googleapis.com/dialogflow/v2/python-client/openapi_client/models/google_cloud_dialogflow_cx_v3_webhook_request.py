# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3_page_info import GoogleCloudDialogflowCxV3PageInfo
from openapi_client.models.google_cloud_dialogflow_cx_v3_response_message import GoogleCloudDialogflowCxV3ResponseMessage
from openapi_client.models.google_cloud_dialogflow_cx_v3_session_info import GoogleCloudDialogflowCxV3SessionInfo
from openapi_client.models.google_cloud_dialogflow_cx_v3_webhook_request_fulfillment_info import GoogleCloudDialogflowCxV3WebhookRequestFulfillmentInfo
from openapi_client.models.google_cloud_dialogflow_cx_v3_webhook_request_intent_info import GoogleCloudDialogflowCxV3WebhookRequestIntentInfo
from openapi_client.models.google_cloud_dialogflow_cx_v3_webhook_request_sentiment_analysis_result import GoogleCloudDialogflowCxV3WebhookRequestSentimentAnalysisResult
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3WebhookRequest(BaseModel):
    """
    The request message for a webhook call. The request is sent as a JSON object and the field names will be presented in camel cases. You may see undocumented fields in an actual request. These fields are used internally by Dialogflow and should be ignored.
    """ # noqa: E501
    detect_intent_response_id: Optional[StrictStr] = Field(default=None, description="Always present. The unique identifier of the DetectIntentResponse that will be returned to the API caller.", alias="detectIntentResponseId")
    dtmf_digits: Optional[StrictStr] = Field(default=None, description="If DTMF was provided as input, this field will contain the DTMF digits.", alias="dtmfDigits")
    fulfillment_info: Optional[GoogleCloudDialogflowCxV3WebhookRequestFulfillmentInfo] = Field(default=None, alias="fulfillmentInfo")
    intent_info: Optional[GoogleCloudDialogflowCxV3WebhookRequestIntentInfo] = Field(default=None, alias="intentInfo")
    language_code: Optional[StrictStr] = Field(default=None, description="The language code specified in the original request.", alias="languageCode")
    messages: Optional[List[GoogleCloudDialogflowCxV3ResponseMessage]] = Field(default=None, description="The list of rich message responses to present to the user. Webhook can choose to append or replace this list in WebhookResponse.fulfillment_response;")
    page_info: Optional[GoogleCloudDialogflowCxV3PageInfo] = Field(default=None, alias="pageInfo")
    payload: Optional[Dict[str, Any]] = Field(default=None, description="Custom data set in QueryParameters.payload.")
    sentiment_analysis_result: Optional[GoogleCloudDialogflowCxV3WebhookRequestSentimentAnalysisResult] = Field(default=None, alias="sentimentAnalysisResult")
    session_info: Optional[GoogleCloudDialogflowCxV3SessionInfo] = Field(default=None, alias="sessionInfo")
    text: Optional[StrictStr] = Field(default=None, description="If natural language text was provided as input, this field will contain a copy of the text.")
    transcript: Optional[StrictStr] = Field(default=None, description="If natural language speech audio was provided as input, this field will contain the transcript for the audio.")
    trigger_event: Optional[StrictStr] = Field(default=None, description="If an event was provided as input, this field will contain the name of the event.", alias="triggerEvent")
    trigger_intent: Optional[StrictStr] = Field(default=None, description="If an intent was provided as input, this field will contain a copy of the intent identifier. Format: `projects//locations//agents//intents/`.", alias="triggerIntent")
    __properties: ClassVar[List[str]] = ["detectIntentResponseId", "dtmfDigits", "fulfillmentInfo", "intentInfo", "languageCode", "messages", "pageInfo", "payload", "sentimentAnalysisResult", "sessionInfo", "text", "transcript", "triggerEvent", "triggerIntent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3WebhookRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fulfillment_info
        if self.fulfillment_info:
            _dict['fulfillmentInfo'] = self.fulfillment_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of intent_info
        if self.intent_info:
            _dict['intentInfo'] = self.intent_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of page_info
        if self.page_info:
            _dict['pageInfo'] = self.page_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sentiment_analysis_result
        if self.sentiment_analysis_result:
            _dict['sentimentAnalysisResult'] = self.sentiment_analysis_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of session_info
        if self.session_info:
            _dict['sessionInfo'] = self.session_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3WebhookRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detectIntentResponseId": obj.get("detectIntentResponseId"),
            "dtmfDigits": obj.get("dtmfDigits"),
            "fulfillmentInfo": GoogleCloudDialogflowCxV3WebhookRequestFulfillmentInfo.from_dict(obj["fulfillmentInfo"]) if obj.get("fulfillmentInfo") is not None else None,
            "intentInfo": GoogleCloudDialogflowCxV3WebhookRequestIntentInfo.from_dict(obj["intentInfo"]) if obj.get("intentInfo") is not None else None,
            "languageCode": obj.get("languageCode"),
            "messages": [GoogleCloudDialogflowCxV3ResponseMessage.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "pageInfo": GoogleCloudDialogflowCxV3PageInfo.from_dict(obj["pageInfo"]) if obj.get("pageInfo") is not None else None,
            "payload": obj.get("payload"),
            "sentimentAnalysisResult": GoogleCloudDialogflowCxV3WebhookRequestSentimentAnalysisResult.from_dict(obj["sentimentAnalysisResult"]) if obj.get("sentimentAnalysisResult") is not None else None,
            "sessionInfo": GoogleCloudDialogflowCxV3SessionInfo.from_dict(obj["sessionInfo"]) if obj.get("sessionInfo") is not None else None,
            "text": obj.get("text"),
            "transcript": obj.get("transcript"),
            "triggerEvent": obj.get("triggerEvent"),
            "triggerIntent": obj.get("triggerIntent")
        })
        return _obj



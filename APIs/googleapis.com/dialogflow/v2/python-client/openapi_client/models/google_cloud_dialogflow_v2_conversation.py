# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2_conversation_phone_number import GoogleCloudDialogflowV2ConversationPhoneNumber
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2Conversation(BaseModel):
    """
    Represents a conversation. A conversation is an interaction between an agent, including live agents and Dialogflow agents, and a support customer. Conversations can include phone calls and text-based chat sessions.
    """ # noqa: E501
    conversation_profile: Optional[StrictStr] = Field(default=None, description="Required. The Conversation Profile to be used to configure this Conversation. This field cannot be updated. Format: `projects//locations//conversationProfiles/`.", alias="conversationProfile")
    conversation_stage: Optional[StrictStr] = Field(default=None, description="The stage of a conversation. It indicates whether the virtual agent or a human agent is handling the conversation. If the conversation is created with the conversation profile that has Dialogflow config set, defaults to ConversationStage.VIRTUAL_AGENT_STAGE; Otherwise, defaults to ConversationStage.HUMAN_ASSIST_STAGE. If the conversation is created with the conversation profile that has Dialogflow config set but explicitly sets conversation_stage to ConversationStage.HUMAN_ASSIST_STAGE, it skips ConversationStage.VIRTUAL_AGENT_STAGE stage and directly goes to ConversationStage.HUMAN_ASSIST_STAGE.", alias="conversationStage")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the conversation was finished.", alias="endTime")
    lifecycle_state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the Conversation.", alias="lifecycleState")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The unique identifier of this conversation. Format: `projects//locations//conversations/`.")
    phone_number: Optional[GoogleCloudDialogflowV2ConversationPhoneNumber] = Field(default=None, alias="phoneNumber")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the conversation was started.", alias="startTime")
    __properties: ClassVar[List[str]] = ["conversationProfile", "conversationStage", "endTime", "lifecycleState", "name", "phoneNumber", "startTime"]

    @field_validator('conversation_stage')
    def conversation_stage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONVERSATION_STAGE_UNSPECIFIED', 'VIRTUAL_AGENT_STAGE', 'HUMAN_ASSIST_STAGE']):
            raise ValueError("must be one of enum values ('CONVERSATION_STAGE_UNSPECIFIED', 'VIRTUAL_AGENT_STAGE', 'HUMAN_ASSIST_STAGE')")
        return value

    @field_validator('lifecycle_state')
    def lifecycle_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LIFECYCLE_STATE_UNSPECIFIED', 'IN_PROGRESS', 'COMPLETED']):
            raise ValueError("must be one of enum values ('LIFECYCLE_STATE_UNSPECIFIED', 'IN_PROGRESS', 'COMPLETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2Conversation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "end_time",
            "lifecycle_state",
            "name",
            "start_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of phone_number
        if self.phone_number:
            _dict['phoneNumber'] = self.phone_number.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2Conversation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conversationProfile": obj.get("conversationProfile"),
            "conversationStage": obj.get("conversationStage"),
            "endTime": obj.get("endTime"),
            "lifecycleState": obj.get("lifecycleState"),
            "name": obj.get("name"),
            "phoneNumber": GoogleCloudDialogflowV2ConversationPhoneNumber.from_dict(obj["phoneNumber"]) if obj.get("phoneNumber") is not None else None,
            "startTime": obj.get("startTime")
        })
        return _obj



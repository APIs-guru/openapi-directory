# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2_detect_intent_response import GoogleCloudDialogflowV2DetectIntentResponse
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2AutomatedAgentReply(BaseModel):
    """
    Represents a response from an automated agent.
    """ # noqa: E501
    allow_cancellation: Optional[StrictBool] = Field(default=None, description="Indicates whether the partial automated agent reply is interruptible when a later reply message arrives. e.g. if the agent specified some music as partial response, it can be cancelled.", alias="allowCancellation")
    automated_agent_reply_type: Optional[StrictStr] = Field(default=None, description="AutomatedAgentReply type.", alias="automatedAgentReplyType")
    cx_current_page: Optional[StrictStr] = Field(default=None, description="The unique identifier of the current Dialogflow CX conversation page. Format: `projects//locations//agents//flows//pages/`.", alias="cxCurrentPage")
    detect_intent_response: Optional[GoogleCloudDialogflowV2DetectIntentResponse] = Field(default=None, alias="detectIntentResponse")
    __properties: ClassVar[List[str]] = ["allowCancellation", "automatedAgentReplyType", "cxCurrentPage", "detectIntentResponse"]

    @field_validator('automated_agent_reply_type')
    def automated_agent_reply_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUTOMATED_AGENT_REPLY_TYPE_UNSPECIFIED', 'PARTIAL', 'FINAL']):
            raise ValueError("must be one of enum values ('AUTOMATED_AGENT_REPLY_TYPE_UNSPECIFIED', 'PARTIAL', 'FINAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2AutomatedAgentReply from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of detect_intent_response
        if self.detect_intent_response:
            _dict['detectIntentResponse'] = self.detect_intent_response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2AutomatedAgentReply from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowCancellation": obj.get("allowCancellation"),
            "automatedAgentReplyType": obj.get("automatedAgentReplyType"),
            "cxCurrentPage": obj.get("cxCurrentPage"),
            "detectIntentResponse": GoogleCloudDialogflowV2DetectIntentResponse.from_dict(obj["detectIntentResponse"]) if obj.get("detectIntentResponse") is not None else None
        })
        return _obj



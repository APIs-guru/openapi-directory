# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2_agent_assistant_feedback import GoogleCloudDialogflowV2AgentAssistantFeedback
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2AnswerFeedback(BaseModel):
    """
    Represents feedback the customer has about the quality & correctness of a certain answer in a conversation.
    """ # noqa: E501
    agent_assistant_detail_feedback: Optional[GoogleCloudDialogflowV2AgentAssistantFeedback] = Field(default=None, alias="agentAssistantDetailFeedback")
    click_time: Optional[StrictStr] = Field(default=None, description="Time when the answer/item was clicked.", alias="clickTime")
    clicked: Optional[StrictBool] = Field(default=None, description="Indicates whether the answer/item was clicked by the human agent or not. Default to false. For knowledge search and knowledge assist, the answer record is considered to be clicked if the answer was copied or any URI was clicked.")
    correctness_level: Optional[StrictStr] = Field(default=None, description="The correctness level of the specific answer.", alias="correctnessLevel")
    display_time: Optional[StrictStr] = Field(default=None, description="Time when the answer/item was displayed.", alias="displayTime")
    displayed: Optional[StrictBool] = Field(default=None, description="Indicates whether the answer/item was displayed to the human agent in the agent desktop UI. Default to false.")
    __properties: ClassVar[List[str]] = ["agentAssistantDetailFeedback", "clickTime", "clicked", "correctnessLevel", "displayTime", "displayed"]

    @field_validator('correctness_level')
    def correctness_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CORRECTNESS_LEVEL_UNSPECIFIED', 'NOT_CORRECT', 'PARTIALLY_CORRECT', 'FULLY_CORRECT']):
            raise ValueError("must be one of enum values ('CORRECTNESS_LEVEL_UNSPECIFIED', 'NOT_CORRECT', 'PARTIALLY_CORRECT', 'FULLY_CORRECT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2AnswerFeedback from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agent_assistant_detail_feedback
        if self.agent_assistant_detail_feedback:
            _dict['agentAssistantDetailFeedback'] = self.agent_assistant_detail_feedback.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2AnswerFeedback from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentAssistantDetailFeedback": GoogleCloudDialogflowV2AgentAssistantFeedback.from_dict(obj["agentAssistantDetailFeedback"]) if obj.get("agentAssistantDetailFeedback") is not None else None,
            "clickTime": obj.get("clickTime"),
            "clicked": obj.get("clicked"),
            "correctnessLevel": obj.get("correctnessLevel"),
            "displayTime": obj.get("displayTime"),
            "displayed": obj.get("displayed")
        })
        return _obj



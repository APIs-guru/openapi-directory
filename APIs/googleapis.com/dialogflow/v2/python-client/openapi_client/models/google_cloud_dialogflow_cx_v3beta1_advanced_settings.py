# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_advanced_settings_dtmf_settings import GoogleCloudDialogflowCxV3beta1AdvancedSettingsDtmfSettings
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_advanced_settings_logging_settings import GoogleCloudDialogflowCxV3beta1AdvancedSettingsLoggingSettings
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_gcs_destination import GoogleCloudDialogflowCxV3beta1GcsDestination
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3beta1AdvancedSettings(BaseModel):
    """
    Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playback_interruption_settings at fulfillment level only overrides the playback_interruption_settings at the agent level, leaving other settings at the agent level unchanged. DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
    """ # noqa: E501
    audio_export_gcs_destination: Optional[GoogleCloudDialogflowCxV3beta1GcsDestination] = Field(default=None, alias="audioExportGcsDestination")
    dtmf_settings: Optional[GoogleCloudDialogflowCxV3beta1AdvancedSettingsDtmfSettings] = Field(default=None, alias="dtmfSettings")
    logging_settings: Optional[GoogleCloudDialogflowCxV3beta1AdvancedSettingsLoggingSettings] = Field(default=None, alias="loggingSettings")
    __properties: ClassVar[List[str]] = ["audioExportGcsDestination", "dtmfSettings", "loggingSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1AdvancedSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audio_export_gcs_destination
        if self.audio_export_gcs_destination:
            _dict['audioExportGcsDestination'] = self.audio_export_gcs_destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dtmf_settings
        if self.dtmf_settings:
            _dict['dtmfSettings'] = self.dtmf_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logging_settings
        if self.logging_settings:
            _dict['loggingSettings'] = self.logging_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1AdvancedSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audioExportGcsDestination": GoogleCloudDialogflowCxV3beta1GcsDestination.from_dict(obj["audioExportGcsDestination"]) if obj.get("audioExportGcsDestination") is not None else None,
            "dtmfSettings": GoogleCloudDialogflowCxV3beta1AdvancedSettingsDtmfSettings.from_dict(obj["dtmfSettings"]) if obj.get("dtmfSettings") is not None else None,
            "loggingSettings": GoogleCloudDialogflowCxV3beta1AdvancedSettingsLoggingSettings.from_dict(obj["loggingSettings"]) if obj.get("loggingSettings") is not None else None
        })
        return _obj



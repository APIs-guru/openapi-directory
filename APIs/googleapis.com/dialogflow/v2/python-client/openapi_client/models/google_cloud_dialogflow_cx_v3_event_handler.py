# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3_fulfillment import GoogleCloudDialogflowCxV3Fulfillment
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3EventHandler(BaseModel):
    """
    An event handler specifies an event that can be handled during a session. When the specified event happens, the following actions are taken in order: * If there is a `trigger_fulfillment` associated with the event, it will be called. * If there is a `target_page` associated with the event, the session will transition into the specified page. * If there is a `target_flow` associated with the event, the session will transition into the specified flow.
    """ # noqa: E501
    event: Optional[StrictStr] = Field(default=None, description="Required. The name of the event to handle.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The unique identifier of this event handler.")
    target_flow: Optional[StrictStr] = Field(default=None, description="The target flow to transition to. Format: `projects//locations//agents//flows/`.", alias="targetFlow")
    target_page: Optional[StrictStr] = Field(default=None, description="The target page to transition to. Format: `projects//locations//agents//flows//pages/`.", alias="targetPage")
    trigger_fulfillment: Optional[GoogleCloudDialogflowCxV3Fulfillment] = Field(default=None, alias="triggerFulfillment")
    __properties: ClassVar[List[str]] = ["event", "name", "targetFlow", "targetPage", "triggerFulfillment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3EventHandler from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of trigger_fulfillment
        if self.trigger_fulfillment:
            _dict['triggerFulfillment'] = self.trigger_fulfillment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3EventHandler from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "event": obj.get("event"),
            "name": obj.get("name"),
            "targetFlow": obj.get("targetFlow"),
            "targetPage": obj.get("targetPage"),
            "triggerFulfillment": GoogleCloudDialogflowCxV3Fulfillment.from_dict(obj["triggerFulfillment"]) if obj.get("triggerFulfillment") is not None else None
        })
        return _obj



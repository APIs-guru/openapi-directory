# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_dialogflow_v2_human_agent_assistant_config_suggestion_query_config_context_filter_settings import GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigContextFilterSettings
from openapi_client.models.google_cloud_dialogflow_v2_human_agent_assistant_config_suggestion_query_config_dialogflow_query_source import GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySource
from openapi_client.models.google_cloud_dialogflow_v2_human_agent_assistant_config_suggestion_query_config_document_query_source import GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDocumentQuerySource
from openapi_client.models.google_cloud_dialogflow_v2_human_agent_assistant_config_suggestion_query_config_knowledge_base_query_source import GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigKnowledgeBaseQuerySource
from openapi_client.models.google_cloud_dialogflow_v2_human_agent_assistant_config_suggestion_query_config_sections import GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigSections
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfig(BaseModel):
    """
    Config for suggestion query.
    """ # noqa: E501
    confidence_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Confidence threshold of query result. Agent Assist gives each suggestion a score in the range [0.0, 1.0], based on the relevance between the suggestion and the current conversation context. A score of 0.0 has no relevance, while a score of 1.0 has high relevance. Only suggestions with a score greater than or equal to the value of this field are included in the results. For a baseline model (the default), the recommended value is in the range [0.05, 0.1]. For a custom model, there is no recommended value. Tune this value by starting from a very low value and slowly increasing until you have desired results. If this field is not set, it defaults to 0.0, which means that all suggestions are returned. Supported features: ARTICLE_SUGGESTION, FAQ, SMART_REPLY, SMART_COMPOSE, KNOWLEDGE_SEARCH, KNOWLEDGE_ASSIST, ENTITY_EXTRACTION.", alias="confidenceThreshold")
    context_filter_settings: Optional[GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigContextFilterSettings] = Field(default=None, alias="contextFilterSettings")
    dialogflow_query_source: Optional[GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySource] = Field(default=None, alias="dialogflowQuerySource")
    document_query_source: Optional[GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDocumentQuerySource] = Field(default=None, alias="documentQuerySource")
    knowledge_base_query_source: Optional[GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigKnowledgeBaseQuerySource] = Field(default=None, alias="knowledgeBaseQuerySource")
    max_results: Optional[StrictInt] = Field(default=None, description="Maximum number of results to return. Currently, if unset, defaults to 10. And the max number is 20.", alias="maxResults")
    sections: Optional[GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigSections] = None
    __properties: ClassVar[List[str]] = ["confidenceThreshold", "contextFilterSettings", "dialogflowQuerySource", "documentQuerySource", "knowledgeBaseQuerySource", "maxResults", "sections"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context_filter_settings
        if self.context_filter_settings:
            _dict['contextFilterSettings'] = self.context_filter_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dialogflow_query_source
        if self.dialogflow_query_source:
            _dict['dialogflowQuerySource'] = self.dialogflow_query_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_query_source
        if self.document_query_source:
            _dict['documentQuerySource'] = self.document_query_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of knowledge_base_query_source
        if self.knowledge_base_query_source:
            _dict['knowledgeBaseQuerySource'] = self.knowledge_base_query_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sections
        if self.sections:
            _dict['sections'] = self.sections.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confidenceThreshold": obj.get("confidenceThreshold"),
            "contextFilterSettings": GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigContextFilterSettings.from_dict(obj["contextFilterSettings"]) if obj.get("contextFilterSettings") is not None else None,
            "dialogflowQuerySource": GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySource.from_dict(obj["dialogflowQuerySource"]) if obj.get("dialogflowQuerySource") is not None else None,
            "documentQuerySource": GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDocumentQuerySource.from_dict(obj["documentQuerySource"]) if obj.get("documentQuerySource") is not None else None,
            "knowledgeBaseQuerySource": GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigKnowledgeBaseQuerySource.from_dict(obj["knowledgeBaseQuerySource"]) if obj.get("knowledgeBaseQuerySource") is not None else None,
            "maxResults": obj.get("maxResults"),
            "sections": GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigSections.from_dict(obj["sections"]) if obj.get("sections") is not None else None
        })
        return _obj



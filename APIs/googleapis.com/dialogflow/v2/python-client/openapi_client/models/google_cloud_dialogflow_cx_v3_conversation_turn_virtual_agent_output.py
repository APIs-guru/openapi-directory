# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3_intent import GoogleCloudDialogflowCxV3Intent
from openapi_client.models.google_cloud_dialogflow_cx_v3_page import GoogleCloudDialogflowCxV3Page
from openapi_client.models.google_cloud_dialogflow_cx_v3_response_message_text import GoogleCloudDialogflowCxV3ResponseMessageText
from openapi_client.models.google_cloud_dialogflow_cx_v3_test_run_difference import GoogleCloudDialogflowCxV3TestRunDifference
from openapi_client.models.google_rpc_status import GoogleRpcStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput(BaseModel):
    """
    The output from the virtual agent.
    """ # noqa: E501
    current_page: Optional[GoogleCloudDialogflowCxV3Page] = Field(default=None, alias="currentPage")
    diagnostic_info: Optional[Dict[str, Any]] = Field(default=None, description="Required. Input only. The diagnostic info output for the turn. Required to calculate the testing coverage.", alias="diagnosticInfo")
    differences: Optional[List[GoogleCloudDialogflowCxV3TestRunDifference]] = Field(default=None, description="Output only. If this is part of a result conversation turn, the list of differences between the original run and the replay for this output, if any.")
    session_parameters: Optional[Dict[str, Any]] = Field(default=None, description="The session parameters available to the bot at this point.", alias="sessionParameters")
    status: Optional[GoogleRpcStatus] = None
    text_responses: Optional[List[GoogleCloudDialogflowCxV3ResponseMessageText]] = Field(default=None, description="The text responses from the agent for the turn.", alias="textResponses")
    triggered_intent: Optional[GoogleCloudDialogflowCxV3Intent] = Field(default=None, alias="triggeredIntent")
    __properties: ClassVar[List[str]] = ["currentPage", "diagnosticInfo", "differences", "sessionParameters", "status", "textResponses", "triggeredIntent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "differences",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_page
        if self.current_page:
            _dict['currentPage'] = self.current_page.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in differences (list)
        _items = []
        if self.differences:
            for _item_differences in self.differences:
                if _item_differences:
                    _items.append(_item_differences.to_dict())
            _dict['differences'] = _items
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in text_responses (list)
        _items = []
        if self.text_responses:
            for _item_text_responses in self.text_responses:
                if _item_text_responses:
                    _items.append(_item_text_responses.to_dict())
            _dict['textResponses'] = _items
        # override the default output from pydantic by calling `to_dict()` of triggered_intent
        if self.triggered_intent:
            _dict['triggeredIntent'] = self.triggered_intent.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentPage": GoogleCloudDialogflowCxV3Page.from_dict(obj["currentPage"]) if obj.get("currentPage") is not None else None,
            "diagnosticInfo": obj.get("diagnosticInfo"),
            "differences": [GoogleCloudDialogflowCxV3TestRunDifference.from_dict(_item) for _item in obj["differences"]] if obj.get("differences") is not None else None,
            "sessionParameters": obj.get("sessionParameters"),
            "status": GoogleRpcStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "textResponses": [GoogleCloudDialogflowCxV3ResponseMessageText.from_dict(_item) for _item in obj["textResponses"]] if obj.get("textResponses") is not None else None,
            "triggeredIntent": GoogleCloudDialogflowCxV3Intent.from_dict(obj["triggeredIntent"]) if obj.get("triggeredIntent") is not None else None
        })
        return _obj



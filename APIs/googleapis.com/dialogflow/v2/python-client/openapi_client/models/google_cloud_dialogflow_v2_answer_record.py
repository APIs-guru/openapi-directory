# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2_agent_assistant_record import GoogleCloudDialogflowV2AgentAssistantRecord
from openapi_client.models.google_cloud_dialogflow_v2_answer_feedback import GoogleCloudDialogflowV2AnswerFeedback
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2AnswerRecord(BaseModel):
    """
    Answer records are records to manage answer history and feedbacks for Dialogflow. Currently, answer record includes: - human agent assistant article suggestion - human agent assistant faq article It doesn't include: - `DetectIntent` intent matching - `DetectIntent` knowledge Answer records are not related to the conversation history in the Dialogflow Console. A Record is generated even when the end-user disables conversation history in the console. Records are created when there's a human agent assistant suggestion generated. A typical workflow for customers provide feedback to an answer is: 1. For human agent assistant, customers get suggestion via ListSuggestions API. Together with the answers, AnswerRecord.name are returned to the customers. 2. The customer uses the AnswerRecord.name to call the UpdateAnswerRecord method to send feedback about a specific answer that they believe is wrong.
    """ # noqa: E501
    agent_assistant_record: Optional[GoogleCloudDialogflowV2AgentAssistantRecord] = Field(default=None, alias="agentAssistantRecord")
    answer_feedback: Optional[GoogleCloudDialogflowV2AnswerFeedback] = Field(default=None, alias="answerFeedback")
    name: Optional[StrictStr] = Field(default=None, description="The unique identifier of this answer record. Format: `projects//locations//answerRecords/`.")
    __properties: ClassVar[List[str]] = ["agentAssistantRecord", "answerFeedback", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2AnswerRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agent_assistant_record
        if self.agent_assistant_record:
            _dict['agentAssistantRecord'] = self.agent_assistant_record.to_dict()
        # override the default output from pydantic by calling `to_dict()` of answer_feedback
        if self.answer_feedback:
            _dict['answerFeedback'] = self.answer_feedback.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2AnswerRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentAssistantRecord": GoogleCloudDialogflowV2AgentAssistantRecord.from_dict(obj["agentAssistantRecord"]) if obj.get("agentAssistantRecord") is not None else None,
            "answerFeedback": GoogleCloudDialogflowV2AnswerFeedback.from_dict(obj["answerFeedback"]) if obj.get("answerFeedback") is not None else None,
            "name": obj.get("name")
        })
        return _obj



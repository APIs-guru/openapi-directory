# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2_text_input import GoogleCloudDialogflowV2TextInput
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2SearchKnowledgeRequest(BaseModel):
    """
    The request message for Conversations.SearchKnowledge.
    """ # noqa: E501
    conversation: Optional[StrictStr] = Field(default=None, description="The conversation (between human agent and end user) where the search request is triggered. Format: `projects//locations//conversations/`.")
    conversation_profile: Optional[StrictStr] = Field(default=None, description="Required. The conversation profile used to configure the search. Format: `projects//locations//conversationProfiles/`.", alias="conversationProfile")
    latest_message: Optional[StrictStr] = Field(default=None, description="The name of the latest conversation message when the request is triggered. Format: `projects//locations//conversations//messages/`.", alias="latestMessage")
    parent: Optional[StrictStr] = Field(default=None, description="The parent resource contains the conversation profile Format: 'projects/' or `projects//locations/`.")
    query: Optional[GoogleCloudDialogflowV2TextInput] = None
    session_id: Optional[StrictStr] = Field(default=None, description="The ID of the search session. The session_id can be combined with Dialogflow V3 Agent ID retrieved from conversation profile or on its own to identify a search session. The search history of the same session will impact the search result. It's up to the API caller to choose an appropriate `Session ID`. It can be a random number or some type of session identifiers (preferably hashed). The length must not exceed 36 characters.", alias="sessionId")
    __properties: ClassVar[List[str]] = ["conversation", "conversationProfile", "latestMessage", "parent", "query", "sessionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2SearchKnowledgeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2SearchKnowledgeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conversation": obj.get("conversation"),
            "conversationProfile": obj.get("conversationProfile"),
            "latestMessage": obj.get("latestMessage"),
            "parent": obj.get("parent"),
            "query": GoogleCloudDialogflowV2TextInput.from_dict(obj["query"]) if obj.get("query") is not None else None,
            "sessionId": obj.get("sessionId")
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2_conversation_info import GoogleCloudDialogflowV2ConversationInfo
from openapi_client.models.google_cloud_dialogflow_v2_input_config import GoogleCloudDialogflowV2InputConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2ConversationDataset(BaseModel):
    """
    Represents a conversation dataset that a user imports raw data into. The data inside ConversationDataset can not be changed after ImportConversationData finishes (and calling ImportConversationData on a dataset that already has data is not allowed).
    """ # noqa: E501
    conversation_count: Optional[StrictStr] = Field(default=None, description="Output only. The number of conversations this conversation dataset contains.", alias="conversationCount")
    conversation_info: Optional[GoogleCloudDialogflowV2ConversationInfo] = Field(default=None, alias="conversationInfo")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation time of this dataset.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. The description of the dataset. Maximum of 10000 bytes.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the dataset. Maximum of 64 bytes.", alias="displayName")
    input_config: Optional[GoogleCloudDialogflowV2InputConfig] = Field(default=None, alias="inputConfig")
    name: Optional[StrictStr] = Field(default=None, description="Output only. ConversationDataset resource name. Format: `projects//locations//conversationDatasets/`")
    __properties: ClassVar[List[str]] = ["conversationCount", "conversationInfo", "createTime", "description", "displayName", "inputConfig", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2ConversationDataset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "conversation_count",
            "create_time",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conversation_info
        if self.conversation_info:
            _dict['conversationInfo'] = self.conversation_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input_config
        if self.input_config:
            _dict['inputConfig'] = self.input_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2ConversationDataset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conversationCount": obj.get("conversationCount"),
            "conversationInfo": GoogleCloudDialogflowV2ConversationInfo.from_dict(obj["conversationInfo"]) if obj.get("conversationInfo") is not None else None,
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "inputConfig": GoogleCloudDialogflowV2InputConfig.from_dict(obj["inputConfig"]) if obj.get("inputConfig") is not None else None,
            "name": obj.get("name")
        })
        return _obj



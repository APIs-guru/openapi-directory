# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2_agent_assistant_feedback_knowledge_search_feedback import GoogleCloudDialogflowV2AgentAssistantFeedbackKnowledgeSearchFeedback
from openapi_client.models.google_cloud_dialogflow_v2_agent_assistant_feedback_summarization_feedback import GoogleCloudDialogflowV2AgentAssistantFeedbackSummarizationFeedback
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2AgentAssistantFeedback(BaseModel):
    """
    Detail feedback of Agent Assist result.
    """ # noqa: E501
    answer_relevance: Optional[StrictStr] = Field(default=None, description="Optional. Whether or not the suggested answer is relevant. For example: * Query: \"Can I change my mailing address?\" * Suggested document says: \"Items must be returned/exchanged within 60 days of the purchase date.\" * answer_relevance: AnswerRelevance.IRRELEVANT", alias="answerRelevance")
    document_correctness: Optional[StrictStr] = Field(default=None, description="Optional. Whether or not the information in the document is correct. For example: * Query: \"Can I return the package in 2 days once received?\" * Suggested document says: \"Items must be returned/exchanged within 60 days of the purchase date.\" * Ground truth: \"No return or exchange is allowed.\" * [document_correctness]: INCORRECT", alias="documentCorrectness")
    document_efficiency: Optional[StrictStr] = Field(default=None, description="Optional. Whether or not the suggested document is efficient. For example, if the document is poorly written, hard to understand, hard to use or too long to find useful information, document_efficiency is DocumentEfficiency.INEFFICIENT.", alias="documentEfficiency")
    knowledge_search_feedback: Optional[GoogleCloudDialogflowV2AgentAssistantFeedbackKnowledgeSearchFeedback] = Field(default=None, alias="knowledgeSearchFeedback")
    summarization_feedback: Optional[GoogleCloudDialogflowV2AgentAssistantFeedbackSummarizationFeedback] = Field(default=None, alias="summarizationFeedback")
    __properties: ClassVar[List[str]] = ["answerRelevance", "documentCorrectness", "documentEfficiency", "knowledgeSearchFeedback", "summarizationFeedback"]

    @field_validator('answer_relevance')
    def answer_relevance_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ANSWER_RELEVANCE_UNSPECIFIED', 'IRRELEVANT', 'RELEVANT']):
            raise ValueError("must be one of enum values ('ANSWER_RELEVANCE_UNSPECIFIED', 'IRRELEVANT', 'RELEVANT')")
        return value

    @field_validator('document_correctness')
    def document_correctness_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DOCUMENT_CORRECTNESS_UNSPECIFIED', 'INCORRECT', 'CORRECT']):
            raise ValueError("must be one of enum values ('DOCUMENT_CORRECTNESS_UNSPECIFIED', 'INCORRECT', 'CORRECT')")
        return value

    @field_validator('document_efficiency')
    def document_efficiency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DOCUMENT_EFFICIENCY_UNSPECIFIED', 'INEFFICIENT', 'EFFICIENT']):
            raise ValueError("must be one of enum values ('DOCUMENT_EFFICIENCY_UNSPECIFIED', 'INEFFICIENT', 'EFFICIENT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2AgentAssistantFeedback from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of knowledge_search_feedback
        if self.knowledge_search_feedback:
            _dict['knowledgeSearchFeedback'] = self.knowledge_search_feedback.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summarization_feedback
        if self.summarization_feedback:
            _dict['summarizationFeedback'] = self.summarization_feedback.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2AgentAssistantFeedback from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "answerRelevance": obj.get("answerRelevance"),
            "documentCorrectness": obj.get("documentCorrectness"),
            "documentEfficiency": obj.get("documentEfficiency"),
            "knowledgeSearchFeedback": GoogleCloudDialogflowV2AgentAssistantFeedbackKnowledgeSearchFeedback.from_dict(obj["knowledgeSearchFeedback"]) if obj.get("knowledgeSearchFeedback") is not None else None,
            "summarizationFeedback": GoogleCloudDialogflowV2AgentAssistantFeedbackSummarizationFeedback.from_dict(obj["summarizationFeedback"]) if obj.get("summarizationFeedback") is not None else None
        })
        return _obj



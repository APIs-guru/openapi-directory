# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2_automated_agent_config import GoogleCloudDialogflowV2AutomatedAgentConfig
from openapi_client.models.google_cloud_dialogflow_v2_human_agent_assistant_config import GoogleCloudDialogflowV2HumanAgentAssistantConfig
from openapi_client.models.google_cloud_dialogflow_v2_human_agent_handoff_config import GoogleCloudDialogflowV2HumanAgentHandoffConfig
from openapi_client.models.google_cloud_dialogflow_v2_logging_config import GoogleCloudDialogflowV2LoggingConfig
from openapi_client.models.google_cloud_dialogflow_v2_notification_config import GoogleCloudDialogflowV2NotificationConfig
from openapi_client.models.google_cloud_dialogflow_v2_speech_to_text_config import GoogleCloudDialogflowV2SpeechToTextConfig
from openapi_client.models.google_cloud_dialogflow_v2_synthesize_speech_config import GoogleCloudDialogflowV2SynthesizeSpeechConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2ConversationProfile(BaseModel):
    """
    Defines the services to connect to incoming Dialogflow conversations.
    """ # noqa: E501
    automated_agent_config: Optional[GoogleCloudDialogflowV2AutomatedAgentConfig] = Field(default=None, alias="automatedAgentConfig")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Create time of the conversation profile.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. Human readable name for this profile. Max length 1024 bytes.", alias="displayName")
    human_agent_assistant_config: Optional[GoogleCloudDialogflowV2HumanAgentAssistantConfig] = Field(default=None, alias="humanAgentAssistantConfig")
    human_agent_handoff_config: Optional[GoogleCloudDialogflowV2HumanAgentHandoffConfig] = Field(default=None, alias="humanAgentHandoffConfig")
    language_code: Optional[StrictStr] = Field(default=None, description="Language code for the conversation profile. If not specified, the language is en-US. Language at ConversationProfile should be set for all non en-US languages. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: \"en-US\".", alias="languageCode")
    logging_config: Optional[GoogleCloudDialogflowV2LoggingConfig] = Field(default=None, alias="loggingConfig")
    name: Optional[StrictStr] = Field(default=None, description="The unique identifier of this conversation profile. Format: `projects//locations//conversationProfiles/`.")
    new_message_event_notification_config: Optional[GoogleCloudDialogflowV2NotificationConfig] = Field(default=None, alias="newMessageEventNotificationConfig")
    notification_config: Optional[GoogleCloudDialogflowV2NotificationConfig] = Field(default=None, alias="notificationConfig")
    security_settings: Optional[StrictStr] = Field(default=None, description="Name of the CX SecuritySettings reference for the agent. Format: `projects//locations//securitySettings/`.", alias="securitySettings")
    stt_config: Optional[GoogleCloudDialogflowV2SpeechToTextConfig] = Field(default=None, alias="sttConfig")
    time_zone: Optional[StrictStr] = Field(default=None, description="The time zone of this conversational profile from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris. Defaults to America/New_York.", alias="timeZone")
    tts_config: Optional[GoogleCloudDialogflowV2SynthesizeSpeechConfig] = Field(default=None, alias="ttsConfig")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Update time of the conversation profile.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["automatedAgentConfig", "createTime", "displayName", "humanAgentAssistantConfig", "humanAgentHandoffConfig", "languageCode", "loggingConfig", "name", "newMessageEventNotificationConfig", "notificationConfig", "securitySettings", "sttConfig", "timeZone", "ttsConfig", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2ConversationProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of automated_agent_config
        if self.automated_agent_config:
            _dict['automatedAgentConfig'] = self.automated_agent_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of human_agent_assistant_config
        if self.human_agent_assistant_config:
            _dict['humanAgentAssistantConfig'] = self.human_agent_assistant_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of human_agent_handoff_config
        if self.human_agent_handoff_config:
            _dict['humanAgentHandoffConfig'] = self.human_agent_handoff_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logging_config
        if self.logging_config:
            _dict['loggingConfig'] = self.logging_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of new_message_event_notification_config
        if self.new_message_event_notification_config:
            _dict['newMessageEventNotificationConfig'] = self.new_message_event_notification_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notification_config
        if self.notification_config:
            _dict['notificationConfig'] = self.notification_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stt_config
        if self.stt_config:
            _dict['sttConfig'] = self.stt_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tts_config
        if self.tts_config:
            _dict['ttsConfig'] = self.tts_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2ConversationProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automatedAgentConfig": GoogleCloudDialogflowV2AutomatedAgentConfig.from_dict(obj["automatedAgentConfig"]) if obj.get("automatedAgentConfig") is not None else None,
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "humanAgentAssistantConfig": GoogleCloudDialogflowV2HumanAgentAssistantConfig.from_dict(obj["humanAgentAssistantConfig"]) if obj.get("humanAgentAssistantConfig") is not None else None,
            "humanAgentHandoffConfig": GoogleCloudDialogflowV2HumanAgentHandoffConfig.from_dict(obj["humanAgentHandoffConfig"]) if obj.get("humanAgentHandoffConfig") is not None else None,
            "languageCode": obj.get("languageCode"),
            "loggingConfig": GoogleCloudDialogflowV2LoggingConfig.from_dict(obj["loggingConfig"]) if obj.get("loggingConfig") is not None else None,
            "name": obj.get("name"),
            "newMessageEventNotificationConfig": GoogleCloudDialogflowV2NotificationConfig.from_dict(obj["newMessageEventNotificationConfig"]) if obj.get("newMessageEventNotificationConfig") is not None else None,
            "notificationConfig": GoogleCloudDialogflowV2NotificationConfig.from_dict(obj["notificationConfig"]) if obj.get("notificationConfig") is not None else None,
            "securitySettings": obj.get("securitySettings"),
            "sttConfig": GoogleCloudDialogflowV2SpeechToTextConfig.from_dict(obj["sttConfig"]) if obj.get("sttConfig") is not None else None,
            "timeZone": obj.get("timeZone"),
            "ttsConfig": GoogleCloudDialogflowV2SynthesizeSpeechConfig.from_dict(obj["ttsConfig"]) if obj.get("ttsConfig") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



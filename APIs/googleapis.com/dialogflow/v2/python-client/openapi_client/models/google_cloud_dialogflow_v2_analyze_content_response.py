# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2_automated_agent_reply import GoogleCloudDialogflowV2AutomatedAgentReply
from openapi_client.models.google_cloud_dialogflow_v2_dtmf_parameters import GoogleCloudDialogflowV2DtmfParameters
from openapi_client.models.google_cloud_dialogflow_v2_message import GoogleCloudDialogflowV2Message
from openapi_client.models.google_cloud_dialogflow_v2_output_audio import GoogleCloudDialogflowV2OutputAudio
from openapi_client.models.google_cloud_dialogflow_v2_suggestion_result import GoogleCloudDialogflowV2SuggestionResult
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2AnalyzeContentResponse(BaseModel):
    """
    The response message for Participants.AnalyzeContent.
    """ # noqa: E501
    automated_agent_reply: Optional[GoogleCloudDialogflowV2AutomatedAgentReply] = Field(default=None, alias="automatedAgentReply")
    dtmf_parameters: Optional[GoogleCloudDialogflowV2DtmfParameters] = Field(default=None, alias="dtmfParameters")
    end_user_suggestion_results: Optional[List[GoogleCloudDialogflowV2SuggestionResult]] = Field(default=None, description="The suggestions for end user. The order is the same as HumanAgentAssistantConfig.SuggestionConfig.feature_configs of HumanAgentAssistantConfig.end_user_suggestion_config. Same as human_agent_suggestion_results, any failure of Agent Assist features will not lead to the overall failure of an AnalyzeContent API call. Instead, the features will fail silently with the error field set in the corresponding SuggestionResult.", alias="endUserSuggestionResults")
    human_agent_suggestion_results: Optional[List[GoogleCloudDialogflowV2SuggestionResult]] = Field(default=None, description="The suggestions for most recent human agent. The order is the same as HumanAgentAssistantConfig.SuggestionConfig.feature_configs of HumanAgentAssistantConfig.human_agent_suggestion_config. Note that any failure of Agent Assist features will not lead to the overall failure of an AnalyzeContent API call. Instead, the features will fail silently with the error field set in the corresponding SuggestionResult.", alias="humanAgentSuggestionResults")
    message: Optional[GoogleCloudDialogflowV2Message] = None
    reply_audio: Optional[GoogleCloudDialogflowV2OutputAudio] = Field(default=None, alias="replyAudio")
    reply_text: Optional[StrictStr] = Field(default=None, description="The output text content. This field is set if the automated agent responded with text to show to the user.", alias="replyText")
    __properties: ClassVar[List[str]] = ["automatedAgentReply", "dtmfParameters", "endUserSuggestionResults", "humanAgentSuggestionResults", "message", "replyAudio", "replyText"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2AnalyzeContentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of automated_agent_reply
        if self.automated_agent_reply:
            _dict['automatedAgentReply'] = self.automated_agent_reply.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dtmf_parameters
        if self.dtmf_parameters:
            _dict['dtmfParameters'] = self.dtmf_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in end_user_suggestion_results (list)
        _items = []
        if self.end_user_suggestion_results:
            for _item_end_user_suggestion_results in self.end_user_suggestion_results:
                if _item_end_user_suggestion_results:
                    _items.append(_item_end_user_suggestion_results.to_dict())
            _dict['endUserSuggestionResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in human_agent_suggestion_results (list)
        _items = []
        if self.human_agent_suggestion_results:
            for _item_human_agent_suggestion_results in self.human_agent_suggestion_results:
                if _item_human_agent_suggestion_results:
                    _items.append(_item_human_agent_suggestion_results.to_dict())
            _dict['humanAgentSuggestionResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reply_audio
        if self.reply_audio:
            _dict['replyAudio'] = self.reply_audio.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2AnalyzeContentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automatedAgentReply": GoogleCloudDialogflowV2AutomatedAgentReply.from_dict(obj["automatedAgentReply"]) if obj.get("automatedAgentReply") is not None else None,
            "dtmfParameters": GoogleCloudDialogflowV2DtmfParameters.from_dict(obj["dtmfParameters"]) if obj.get("dtmfParameters") is not None else None,
            "endUserSuggestionResults": [GoogleCloudDialogflowV2SuggestionResult.from_dict(_item) for _item in obj["endUserSuggestionResults"]] if obj.get("endUserSuggestionResults") is not None else None,
            "humanAgentSuggestionResults": [GoogleCloudDialogflowV2SuggestionResult.from_dict(_item) for _item in obj["humanAgentSuggestionResults"]] if obj.get("humanAgentSuggestionResults") is not None else None,
            "message": GoogleCloudDialogflowV2Message.from_dict(obj["message"]) if obj.get("message") is not None else None,
            "replyAudio": GoogleCloudDialogflowV2OutputAudio.from_dict(obj["replyAudio"]) if obj.get("replyAudio") is not None else None,
            "replyText": obj.get("replyText")
        })
        return _obj



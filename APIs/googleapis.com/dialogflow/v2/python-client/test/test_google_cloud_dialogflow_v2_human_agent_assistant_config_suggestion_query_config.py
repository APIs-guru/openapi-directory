# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_dialogflow_v2_human_agent_assistant_config_suggestion_query_config import GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfig

class TestGoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfig(unittest.TestCase):
    """GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfig:
        """Test GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfig`
        """
        model = GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfig()
        if include_optional:
            return GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfig(
                confidence_threshold = 1.337,
                context_filter_settings = openapi_client.models.google_cloud_dialogflow_v2_human_agent_assistant_config_suggestion_query_config_context_filter_settings.GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigContextFilterSettings(
                    drop_handoff_messages = True, 
                    drop_ivr_messages = True, 
                    drop_virtual_agent_messages = True, ),
                dialogflow_query_source = openapi_client.models.google_cloud_dialogflow_v2_human_agent_assistant_config_suggestion_query_config_dialogflow_query_source.GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySource(
                    agent = '', 
                    human_agent_side_config = openapi_client.models.google_cloud_dialogflow_v2_human_agent_assistant_config_suggestion_query_config_dialogflow_query_source_human_agent_side_config.GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySourceHumanAgentSideConfig(
                        agent = '', ), ),
                document_query_source = openapi_client.models.google_cloud_dialogflow_v2_human_agent_assistant_config_suggestion_query_config_document_query_source.GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDocumentQuerySource(
                    documents = [
                        ''
                        ], ),
                knowledge_base_query_source = openapi_client.models.google_cloud_dialogflow_v2_human_agent_assistant_config_suggestion_query_config_knowledge_base_query_source.GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigKnowledgeBaseQuerySource(
                    knowledge_bases = [
                        ''
                        ], ),
                max_results = 56,
                sections = openapi_client.models.google_cloud_dialogflow_v2_human_agent_assistant_config_suggestion_query_config_sections.GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigSections(
                    section_types = [
                        'SECTION_TYPE_UNSPECIFIED'
                        ], )
            )
        else:
            return GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfig(
        )
        """

    def testGoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfig(self):
        """Test GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

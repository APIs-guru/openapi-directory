# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_event_handler import GoogleCloudDialogflowCxV3beta1EventHandler
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_transition_coverage_transition_node import GoogleCloudDialogflowCxV3beta1TransitionCoverageTransitionNode
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_transition_route import GoogleCloudDialogflowCxV3beta1TransitionRoute
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3beta1TransitionCoverageTransition(BaseModel):
    """
    A transition in a page.
    """ # noqa: E501
    covered: Optional[StrictBool] = Field(default=None, description="Whether the transition is covered by at least one of the agent's test cases.")
    event_handler: Optional[GoogleCloudDialogflowCxV3beta1EventHandler] = Field(default=None, alias="eventHandler")
    index: Optional[StrictInt] = Field(default=None, description="The index of a transition in the transition list. Starting from 0.")
    source: Optional[GoogleCloudDialogflowCxV3beta1TransitionCoverageTransitionNode] = None
    target: Optional[GoogleCloudDialogflowCxV3beta1TransitionCoverageTransitionNode] = None
    transition_route: Optional[GoogleCloudDialogflowCxV3beta1TransitionRoute] = Field(default=None, alias="transitionRoute")
    __properties: ClassVar[List[str]] = ["covered", "eventHandler", "index", "source", "target", "transitionRoute"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1TransitionCoverageTransition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of event_handler
        if self.event_handler:
            _dict['eventHandler'] = self.event_handler.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transition_route
        if self.transition_route:
            _dict['transitionRoute'] = self.transition_route.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1TransitionCoverageTransition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "covered": obj.get("covered"),
            "eventHandler": GoogleCloudDialogflowCxV3beta1EventHandler.from_dict(obj["eventHandler"]) if obj.get("eventHandler") is not None else None,
            "index": obj.get("index"),
            "source": GoogleCloudDialogflowCxV3beta1TransitionCoverageTransitionNode.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "target": GoogleCloudDialogflowCxV3beta1TransitionCoverageTransitionNode.from_dict(obj["target"]) if obj.get("target") is not None else None,
            "transitionRoute": GoogleCloudDialogflowCxV3beta1TransitionRoute.from_dict(obj["transitionRoute"]) if obj.get("transitionRoute") is not None else None
        })
        return _obj



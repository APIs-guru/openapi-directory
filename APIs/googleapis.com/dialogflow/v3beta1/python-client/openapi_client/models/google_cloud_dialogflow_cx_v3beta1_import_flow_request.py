# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_flow_import_strategy import GoogleCloudDialogflowCxV3beta1FlowImportStrategy
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3beta1ImportFlowRequest(BaseModel):
    """
    The request message for Flows.ImportFlow.
    """ # noqa: E501
    flow_content: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Uncompressed raw byte content for flow.", alias="flowContent")
    flow_import_strategy: Optional[GoogleCloudDialogflowCxV3beta1FlowImportStrategy] = Field(default=None, alias="flowImportStrategy")
    flow_uri: Optional[StrictStr] = Field(default=None, description="The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to import flow from. The format of this URI must be `gs:///`. Dialogflow performs a read operation for the Cloud Storage object on the caller's behalf, so your request authentication must have read permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).", alias="flowUri")
    import_option: Optional[StrictStr] = Field(default=None, description="Flow import mode. If not specified, `KEEP` is assumed.", alias="importOption")
    __properties: ClassVar[List[str]] = ["flowContent", "flowImportStrategy", "flowUri", "importOption"]

    @field_validator('import_option')
    def import_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IMPORT_OPTION_UNSPECIFIED', 'KEEP', 'FALLBACK']):
            raise ValueError("must be one of enum values ('IMPORT_OPTION_UNSPECIFIED', 'KEEP', 'FALLBACK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1ImportFlowRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of flow_import_strategy
        if self.flow_import_strategy:
            _dict['flowImportStrategy'] = self.flow_import_strategy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1ImportFlowRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "flowContent": obj.get("flowContent"),
            "flowImportStrategy": GoogleCloudDialogflowCxV3beta1FlowImportStrategy.from_dict(obj["flowImportStrategy"]) if obj.get("flowImportStrategy") is not None else None,
            "flowUri": obj.get("flowUri"),
            "importOption": obj.get("importOption")
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3beta1SecuritySettingsAudioExportSettings(BaseModel):
    """
    Settings for exporting audio.
    """ # noqa: E501
    audio_export_pattern: Optional[StrictStr] = Field(default=None, description="Filename pattern for exported audio.", alias="audioExportPattern")
    audio_format: Optional[StrictStr] = Field(default=None, description="File format for exported audio file. Currently only in telephony recordings.", alias="audioFormat")
    enable_audio_redaction: Optional[StrictBool] = Field(default=None, description="Enable audio redaction if it is true.", alias="enableAudioRedaction")
    gcs_bucket: Optional[StrictStr] = Field(default=None, description="Cloud Storage bucket to export audio record to. Setting this field would grant the Storage Object Creator role to the Dialogflow Service Agent. API caller that tries to modify this field should have the permission of storage.buckets.setIamPolicy.", alias="gcsBucket")
    __properties: ClassVar[List[str]] = ["audioExportPattern", "audioFormat", "enableAudioRedaction", "gcsBucket"]

    @field_validator('audio_format')
    def audio_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUDIO_FORMAT_UNSPECIFIED', 'MULAW', 'MP3', 'OGG']):
            raise ValueError("must be one of enum values ('AUDIO_FORMAT_UNSPECIFIED', 'MULAW', 'MP3', 'OGG')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1SecuritySettingsAudioExportSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1SecuritySettingsAudioExportSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audioExportPattern": obj.get("audioExportPattern"),
            "audioFormat": obj.get("audioFormat"),
            "enableAudioRedaction": obj.get("enableAudioRedaction"),
            "gcsBucket": obj.get("gcsBucket")
        })
        return _obj



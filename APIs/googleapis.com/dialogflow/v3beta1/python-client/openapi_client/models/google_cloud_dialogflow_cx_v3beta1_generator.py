# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_generator_placeholder import GoogleCloudDialogflowCxV3beta1GeneratorPlaceholder
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_phrase import GoogleCloudDialogflowCxV3beta1Phrase
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3beta1Generator(BaseModel):
    """
    Generators contain prompt to be sent to the LLM model to generate text. The prompt can contain parameters which will be resolved before calling the model. It can optionally contain banned phrases to ensure the model responses are safe.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The human-readable name of the generator, unique within the agent. The prompt contains pre-defined parameters such as $conversation, $last-user-utterance, etc. populated by Dialogflow. It can also contain custom placeholders which will be resolved during fulfillment.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="The unique identifier of the generator. Must be set for the Generators.UpdateGenerator method. Generators.CreateGenerate populates the name automatically. Format: `projects//locations//agents//generators/`.")
    placeholders: Optional[List[GoogleCloudDialogflowCxV3beta1GeneratorPlaceholder]] = Field(default=None, description="Optional. List of custom placeholders in the prompt text.")
    prompt_text: Optional[GoogleCloudDialogflowCxV3beta1Phrase] = Field(default=None, alias="promptText")
    __properties: ClassVar[List[str]] = ["displayName", "name", "placeholders", "promptText"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1Generator from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in placeholders (list)
        _items = []
        if self.placeholders:
            for _item_placeholders in self.placeholders:
                if _item_placeholders:
                    _items.append(_item_placeholders.to_dict())
            _dict['placeholders'] = _items
        # override the default output from pydantic by calling `to_dict()` of prompt_text
        if self.prompt_text:
            _dict['promptText'] = self.prompt_text.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1Generator from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "placeholders": [GoogleCloudDialogflowCxV3beta1GeneratorPlaceholder.from_dict(_item) for _item in obj["placeholders"]] if obj.get("placeholders") is not None else None,
            "promptText": GoogleCloudDialogflowCxV3beta1Phrase.from_dict(obj["promptText"]) if obj.get("promptText") is not None else None
        })
        return _obj



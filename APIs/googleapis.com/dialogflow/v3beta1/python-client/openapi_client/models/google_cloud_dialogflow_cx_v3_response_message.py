# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3_response_message_conversation_success import GoogleCloudDialogflowCxV3ResponseMessageConversationSuccess
from openapi_client.models.google_cloud_dialogflow_cx_v3_response_message_live_agent_handoff import GoogleCloudDialogflowCxV3ResponseMessageLiveAgentHandoff
from openapi_client.models.google_cloud_dialogflow_cx_v3_response_message_mixed_audio import GoogleCloudDialogflowCxV3ResponseMessageMixedAudio
from openapi_client.models.google_cloud_dialogflow_cx_v3_response_message_output_audio_text import GoogleCloudDialogflowCxV3ResponseMessageOutputAudioText
from openapi_client.models.google_cloud_dialogflow_cx_v3_response_message_play_audio import GoogleCloudDialogflowCxV3ResponseMessagePlayAudio
from openapi_client.models.google_cloud_dialogflow_cx_v3_response_message_telephony_transfer_call import GoogleCloudDialogflowCxV3ResponseMessageTelephonyTransferCall
from openapi_client.models.google_cloud_dialogflow_cx_v3_response_message_text import GoogleCloudDialogflowCxV3ResponseMessageText
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3ResponseMessage(BaseModel):
    """
    Represents a response message that can be returned by a conversational agent. Response messages are also used for output audio synthesis. The approach is as follows: * If at least one OutputAudioText response is present, then all OutputAudioText responses are linearly concatenated, and the result is used for output audio synthesis. * If the OutputAudioText responses are a mixture of text and SSML, then the concatenated result is treated as SSML; otherwise, the result is treated as either text or SSML as appropriate. The agent designer should ideally use either text or SSML consistently throughout the bot design. * Otherwise, all Text responses are linearly concatenated, and the result is used for output audio synthesis. This approach allows for more sophisticated user experience scenarios, where the text displayed to the user may differ from what is heard.
    """ # noqa: E501
    channel: Optional[StrictStr] = Field(default=None, description="The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.")
    conversation_success: Optional[GoogleCloudDialogflowCxV3ResponseMessageConversationSuccess] = Field(default=None, alias="conversationSuccess")
    end_interaction: Optional[Dict[str, Any]] = Field(default=None, description="Indicates that interaction with the Dialogflow agent has ended. This message is generated by Dialogflow only and not supposed to be defined by the user.", alias="endInteraction")
    knowledge_info_card: Optional[Dict[str, Any]] = Field(default=None, description="Represents info card response. If the response contains generative knowledge prediction, Dialogflow will return a payload with Infobot Messenger compatible info card. Otherwise, the info card response is skipped.", alias="knowledgeInfoCard")
    live_agent_handoff: Optional[GoogleCloudDialogflowCxV3ResponseMessageLiveAgentHandoff] = Field(default=None, alias="liveAgentHandoff")
    mixed_audio: Optional[GoogleCloudDialogflowCxV3ResponseMessageMixedAudio] = Field(default=None, alias="mixedAudio")
    output_audio_text: Optional[GoogleCloudDialogflowCxV3ResponseMessageOutputAudioText] = Field(default=None, alias="outputAudioText")
    payload: Optional[Dict[str, Any]] = Field(default=None, description="Returns a response containing a custom, platform-specific payload.")
    play_audio: Optional[GoogleCloudDialogflowCxV3ResponseMessagePlayAudio] = Field(default=None, alias="playAudio")
    response_type: Optional[StrictStr] = Field(default=None, description="Response type.", alias="responseType")
    telephony_transfer_call: Optional[GoogleCloudDialogflowCxV3ResponseMessageTelephonyTransferCall] = Field(default=None, alias="telephonyTransferCall")
    text: Optional[GoogleCloudDialogflowCxV3ResponseMessageText] = None
    __properties: ClassVar[List[str]] = ["channel", "conversationSuccess", "endInteraction", "knowledgeInfoCard", "liveAgentHandoff", "mixedAudio", "outputAudioText", "payload", "playAudio", "responseType", "telephonyTransferCall", "text"]

    @field_validator('response_type')
    def response_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESPONSE_TYPE_UNSPECIFIED', 'ENTRY_PROMPT', 'PARAMETER_PROMPT', 'HANDLER_PROMPT']):
            raise ValueError("must be one of enum values ('RESPONSE_TYPE_UNSPECIFIED', 'ENTRY_PROMPT', 'PARAMETER_PROMPT', 'HANDLER_PROMPT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3ResponseMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conversation_success
        if self.conversation_success:
            _dict['conversationSuccess'] = self.conversation_success.to_dict()
        # override the default output from pydantic by calling `to_dict()` of live_agent_handoff
        if self.live_agent_handoff:
            _dict['liveAgentHandoff'] = self.live_agent_handoff.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mixed_audio
        if self.mixed_audio:
            _dict['mixedAudio'] = self.mixed_audio.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output_audio_text
        if self.output_audio_text:
            _dict['outputAudioText'] = self.output_audio_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of play_audio
        if self.play_audio:
            _dict['playAudio'] = self.play_audio.to_dict()
        # override the default output from pydantic by calling `to_dict()` of telephony_transfer_call
        if self.telephony_transfer_call:
            _dict['telephonyTransferCall'] = self.telephony_transfer_call.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text
        if self.text:
            _dict['text'] = self.text.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3ResponseMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channel": obj.get("channel"),
            "conversationSuccess": GoogleCloudDialogflowCxV3ResponseMessageConversationSuccess.from_dict(obj["conversationSuccess"]) if obj.get("conversationSuccess") is not None else None,
            "endInteraction": obj.get("endInteraction"),
            "knowledgeInfoCard": obj.get("knowledgeInfoCard"),
            "liveAgentHandoff": GoogleCloudDialogflowCxV3ResponseMessageLiveAgentHandoff.from_dict(obj["liveAgentHandoff"]) if obj.get("liveAgentHandoff") is not None else None,
            "mixedAudio": GoogleCloudDialogflowCxV3ResponseMessageMixedAudio.from_dict(obj["mixedAudio"]) if obj.get("mixedAudio") is not None else None,
            "outputAudioText": GoogleCloudDialogflowCxV3ResponseMessageOutputAudioText.from_dict(obj["outputAudioText"]) if obj.get("outputAudioText") is not None else None,
            "payload": obj.get("payload"),
            "playAudio": GoogleCloudDialogflowCxV3ResponseMessagePlayAudio.from_dict(obj["playAudio"]) if obj.get("playAudio") is not None else None,
            "responseType": obj.get("responseType"),
            "telephonyTransferCall": GoogleCloudDialogflowCxV3ResponseMessageTelephonyTransferCall.from_dict(obj["telephonyTransferCall"]) if obj.get("telephonyTransferCall") is not None else None,
            "text": GoogleCloudDialogflowCxV3ResponseMessageText.from_dict(obj["text"]) if obj.get("text") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2beta1_intent_message_rbm_card_content import GoogleCloudDialogflowV2beta1IntentMessageRbmCardContent
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCard(BaseModel):
    """
    Standalone Rich Business Messaging (RBM) rich card. Rich cards allow you to respond to users with more vivid content, e.g. with media and suggestions. You can group multiple rich cards into one using RbmCarouselCard but carousel cards will give you less control over the card layout.
    """ # noqa: E501
    card_content: Optional[GoogleCloudDialogflowV2beta1IntentMessageRbmCardContent] = Field(default=None, alias="cardContent")
    card_orientation: Optional[StrictStr] = Field(default=None, description="Required. Orientation of the card.", alias="cardOrientation")
    thumbnail_image_alignment: Optional[StrictStr] = Field(default=None, description="Required if orientation is horizontal. Image preview alignment for standalone cards with horizontal layout.", alias="thumbnailImageAlignment")
    __properties: ClassVar[List[str]] = ["cardContent", "cardOrientation", "thumbnailImageAlignment"]

    @field_validator('card_orientation')
    def card_orientation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CARD_ORIENTATION_UNSPECIFIED', 'HORIZONTAL', 'VERTICAL']):
            raise ValueError("must be one of enum values ('CARD_ORIENTATION_UNSPECIFIED', 'HORIZONTAL', 'VERTICAL')")
        return value

    @field_validator('thumbnail_image_alignment')
    def thumbnail_image_alignment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['THUMBNAIL_IMAGE_ALIGNMENT_UNSPECIFIED', 'LEFT', 'RIGHT']):
            raise ValueError("must be one of enum values ('THUMBNAIL_IMAGE_ALIGNMENT_UNSPECIFIED', 'LEFT', 'RIGHT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of card_content
        if self.card_content:
            _dict['cardContent'] = self.card_content.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCard from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cardContent": GoogleCloudDialogflowV2beta1IntentMessageRbmCardContent.from_dict(obj["cardContent"]) if obj.get("cardContent") is not None else None,
            "cardOrientation": obj.get("cardOrientation"),
            "thumbnailImageAlignment": obj.get("thumbnailImageAlignment")
        })
        return _obj



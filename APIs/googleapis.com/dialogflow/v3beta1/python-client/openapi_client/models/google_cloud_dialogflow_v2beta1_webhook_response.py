# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2beta1_context import GoogleCloudDialogflowV2beta1Context
from openapi_client.models.google_cloud_dialogflow_v2beta1_event_input import GoogleCloudDialogflowV2beta1EventInput
from openapi_client.models.google_cloud_dialogflow_v2beta1_intent_message import GoogleCloudDialogflowV2beta1IntentMessage
from openapi_client.models.google_cloud_dialogflow_v2beta1_session_entity_type import GoogleCloudDialogflowV2beta1SessionEntityType
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1WebhookResponse(BaseModel):
    """
    The response message for a webhook call. This response is validated by the Dialogflow server. If validation fails, an error will be returned in the QueryResult.diagnostic_info field. Setting JSON fields to an empty value with the wrong type is a common error. To avoid this error: - Use `\"\"` for empty strings - Use `{}` or `null` for empty objects - Use `[]` or `null` for empty arrays For more information, see the [Protocol Buffers Language Guide](https://developers.google.com/protocol-buffers/docs/proto3#json).
    """ # noqa: E501
    end_interaction: Optional[StrictBool] = Field(default=None, description="Optional. Indicates that this intent ends an interaction. Some integrations (e.g., Actions on Google or Dialogflow phone gateway) use this information to close interaction with an end user. Default is false.", alias="endInteraction")
    followup_event_input: Optional[GoogleCloudDialogflowV2beta1EventInput] = Field(default=None, alias="followupEventInput")
    fulfillment_messages: Optional[List[GoogleCloudDialogflowV2beta1IntentMessage]] = Field(default=None, description="Optional. The rich response messages intended for the end-user. When provided, Dialogflow uses this field to populate QueryResult.fulfillment_messages sent to the integration or API caller.", alias="fulfillmentMessages")
    fulfillment_text: Optional[StrictStr] = Field(default=None, description="Optional. The text response message intended for the end-user. It is recommended to use `fulfillment_messages.text.text[0]` instead. When provided, Dialogflow uses this field to populate QueryResult.fulfillment_text sent to the integration or API caller.", alias="fulfillmentText")
    live_agent_handoff: Optional[StrictBool] = Field(default=None, description="Indicates that a live agent should be brought in to handle the interaction with the user. In most cases, when you set this flag to true, you would also want to set end_interaction to true as well. Default is false.", alias="liveAgentHandoff")
    output_contexts: Optional[List[GoogleCloudDialogflowV2beta1Context]] = Field(default=None, description="Optional. The collection of output contexts that will overwrite currently active contexts for the session and reset their lifespans. When provided, Dialogflow uses this field to populate QueryResult.output_contexts sent to the integration or API caller.", alias="outputContexts")
    payload: Optional[Dict[str, Any]] = Field(default=None, description="Optional. This field can be used to pass custom data from your webhook to the integration or API caller. Arbitrary JSON objects are supported. When provided, Dialogflow uses this field to populate QueryResult.webhook_payload sent to the integration or API caller. This field is also used by the [Google Assistant integration](https://cloud.google.com/dialogflow/docs/integrations/aog) for rich response messages. See the format definition at [Google Assistant Dialogflow webhook format](https://developers.google.com/assistant/actions/build/json/dialogflow-webhook-json)")
    session_entity_types: Optional[List[GoogleCloudDialogflowV2beta1SessionEntityType]] = Field(default=None, description="Optional. Additional session entity types to replace or extend developer entity types with. The entity synonyms apply to all languages and persist for the session. Setting this data from a webhook overwrites the session entity types that have been set using `detectIntent`, `streamingDetectIntent` or SessionEntityType management methods.", alias="sessionEntityTypes")
    source: Optional[StrictStr] = Field(default=None, description="Optional. A custom field used to identify the webhook source. Arbitrary strings are supported. When provided, Dialogflow uses this field to populate QueryResult.webhook_source sent to the integration or API caller.")
    __properties: ClassVar[List[str]] = ["endInteraction", "followupEventInput", "fulfillmentMessages", "fulfillmentText", "liveAgentHandoff", "outputContexts", "payload", "sessionEntityTypes", "source"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1WebhookResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of followup_event_input
        if self.followup_event_input:
            _dict['followupEventInput'] = self.followup_event_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fulfillment_messages (list)
        _items = []
        if self.fulfillment_messages:
            for _item_fulfillment_messages in self.fulfillment_messages:
                if _item_fulfillment_messages:
                    _items.append(_item_fulfillment_messages.to_dict())
            _dict['fulfillmentMessages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in output_contexts (list)
        _items = []
        if self.output_contexts:
            for _item_output_contexts in self.output_contexts:
                if _item_output_contexts:
                    _items.append(_item_output_contexts.to_dict())
            _dict['outputContexts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in session_entity_types (list)
        _items = []
        if self.session_entity_types:
            for _item_session_entity_types in self.session_entity_types:
                if _item_session_entity_types:
                    _items.append(_item_session_entity_types.to_dict())
            _dict['sessionEntityTypes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1WebhookResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endInteraction": obj.get("endInteraction"),
            "followupEventInput": GoogleCloudDialogflowV2beta1EventInput.from_dict(obj["followupEventInput"]) if obj.get("followupEventInput") is not None else None,
            "fulfillmentMessages": [GoogleCloudDialogflowV2beta1IntentMessage.from_dict(_item) for _item in obj["fulfillmentMessages"]] if obj.get("fulfillmentMessages") is not None else None,
            "fulfillmentText": obj.get("fulfillmentText"),
            "liveAgentHandoff": obj.get("liveAgentHandoff"),
            "outputContexts": [GoogleCloudDialogflowV2beta1Context.from_dict(_item) for _item in obj["outputContexts"]] if obj.get("outputContexts") is not None else None,
            "payload": obj.get("payload"),
            "sessionEntityTypes": [GoogleCloudDialogflowV2beta1SessionEntityType.from_dict(_item) for _item in obj["sessionEntityTypes"]] if obj.get("sessionEntityTypes") is not None else None,
            "source": obj.get("source")
        })
        return _obj



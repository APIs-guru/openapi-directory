# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_advanced_settings import GoogleCloudDialogflowCxV3beta1AdvancedSettings
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_event_handler import GoogleCloudDialogflowCxV3beta1EventHandler
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_knowledge_connector_settings import GoogleCloudDialogflowCxV3beta1KnowledgeConnectorSettings
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_nlu_settings import GoogleCloudDialogflowCxV3beta1NluSettings
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_transition_route import GoogleCloudDialogflowCxV3beta1TransitionRoute
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3beta1Flow(BaseModel):
    """
    Flows represents the conversation flows when you build your chatbot agent. A flow consists of many pages connected by the transition routes. Conversations always start with the built-in Start Flow (with an all-0 ID). Transition routes can direct the conversation session from the current flow (parent flow) to another flow (sub flow). When the sub flow is finished, Dialogflow will bring the session back to the parent flow, where the sub flow is started. Usually, when a transition route is followed by a matched intent, the intent will be \"consumed\". This means the intent won't activate more transition routes. However, when the followed transition route moves the conversation session into a different flow, the matched intent can be carried over and to be consumed in the target flow.
    """ # noqa: E501
    advanced_settings: Optional[GoogleCloudDialogflowCxV3beta1AdvancedSettings] = Field(default=None, alias="advancedSettings")
    description: Optional[StrictStr] = Field(default=None, description="The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The human-readable name of the flow.", alias="displayName")
    event_handlers: Optional[List[GoogleCloudDialogflowCxV3beta1EventHandler]] = Field(default=None, description="A flow's event handlers serve two purposes: * They are responsible for handling events (e.g. no match, webhook errors) in the flow. * They are inherited by every page's event handlers, which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow. Unlike transition_routes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.", alias="eventHandlers")
    knowledge_connector_settings: Optional[GoogleCloudDialogflowCxV3beta1KnowledgeConnectorSettings] = Field(default=None, alias="knowledgeConnectorSettings")
    name: Optional[StrictStr] = Field(default=None, description="The unique identifier of the flow. Format: `projects//locations//agents//flows/`.")
    nlu_settings: Optional[GoogleCloudDialogflowCxV3beta1NluSettings] = Field(default=None, alias="nluSettings")
    transition_route_groups: Optional[List[StrictStr]] = Field(default=None, description="A flow's transition route group serve two purposes: * They are responsible for matching the user's first utterances in the flow. * They are inherited by every page's transition route groups. Transition route groups defined in the page have higher priority than those defined in the flow. Format:`projects//locations//agents//flows//transitionRouteGroups/` or `projects//locations//agents//transitionRouteGroups/` for agent-level groups.", alias="transitionRouteGroups")
    transition_routes: Optional[List[GoogleCloudDialogflowCxV3beta1TransitionRoute]] = Field(default=None, description="A flow's transition routes serve two purposes: * They are responsible for matching the user's first utterances in the flow. * They are inherited by every page's transition routes and can support use cases such as the user saying \"help\" or \"can I talk to a human?\", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow. TransitionRoutes are evalauted in the following order: * TransitionRoutes with intent specified. * TransitionRoutes with only condition specified. TransitionRoutes with intent specified are inherited by pages in the flow.", alias="transitionRoutes")
    __properties: ClassVar[List[str]] = ["advancedSettings", "description", "displayName", "eventHandlers", "knowledgeConnectorSettings", "name", "nluSettings", "transitionRouteGroups", "transitionRoutes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1Flow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advanced_settings
        if self.advanced_settings:
            _dict['advancedSettings'] = self.advanced_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in event_handlers (list)
        _items = []
        if self.event_handlers:
            for _item_event_handlers in self.event_handlers:
                if _item_event_handlers:
                    _items.append(_item_event_handlers.to_dict())
            _dict['eventHandlers'] = _items
        # override the default output from pydantic by calling `to_dict()` of knowledge_connector_settings
        if self.knowledge_connector_settings:
            _dict['knowledgeConnectorSettings'] = self.knowledge_connector_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nlu_settings
        if self.nlu_settings:
            _dict['nluSettings'] = self.nlu_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in transition_routes (list)
        _items = []
        if self.transition_routes:
            for _item_transition_routes in self.transition_routes:
                if _item_transition_routes:
                    _items.append(_item_transition_routes.to_dict())
            _dict['transitionRoutes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1Flow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advancedSettings": GoogleCloudDialogflowCxV3beta1AdvancedSettings.from_dict(obj["advancedSettings"]) if obj.get("advancedSettings") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "eventHandlers": [GoogleCloudDialogflowCxV3beta1EventHandler.from_dict(_item) for _item in obj["eventHandlers"]] if obj.get("eventHandlers") is not None else None,
            "knowledgeConnectorSettings": GoogleCloudDialogflowCxV3beta1KnowledgeConnectorSettings.from_dict(obj["knowledgeConnectorSettings"]) if obj.get("knowledgeConnectorSettings") is not None else None,
            "name": obj.get("name"),
            "nluSettings": GoogleCloudDialogflowCxV3beta1NluSettings.from_dict(obj["nluSettings"]) if obj.get("nluSettings") is not None else None,
            "transitionRouteGroups": obj.get("transitionRouteGroups"),
            "transitionRoutes": [GoogleCloudDialogflowCxV3beta1TransitionRoute.from_dict(_item) for _item in obj["transitionRoutes"]] if obj.get("transitionRoutes") is not None else None
        })
        return _obj



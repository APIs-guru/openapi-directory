# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_advanced_settings import GoogleCloudDialogflowCxV3beta1AdvancedSettings
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_dtmf_input import GoogleCloudDialogflowCxV3beta1DtmfInput
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_intent import GoogleCloudDialogflowCxV3beta1Intent
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_match import GoogleCloudDialogflowCxV3beta1Match
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_page import GoogleCloudDialogflowCxV3beta1Page
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_response_message import GoogleCloudDialogflowCxV3beta1ResponseMessage
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_sentiment_analysis_result import GoogleCloudDialogflowCxV3beta1SentimentAnalysisResult
from openapi_client.models.google_rpc_status import GoogleRpcStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3beta1QueryResult(BaseModel):
    """
    Represents the result of a conversational query.
    """ # noqa: E501
    advanced_settings: Optional[GoogleCloudDialogflowCxV3beta1AdvancedSettings] = Field(default=None, alias="advancedSettings")
    allow_answer_feedback: Optional[StrictBool] = Field(default=None, description="Indicates whether the Thumbs up/Thumbs down rating controls are need to be shown for the response in the Dialogflow Messenger widget.", alias="allowAnswerFeedback")
    current_page: Optional[GoogleCloudDialogflowCxV3beta1Page] = Field(default=None, alias="currentPage")
    diagnostic_info: Optional[Dict[str, Any]] = Field(default=None, description="The free-form diagnostic info. For example, this field could contain webhook call latency. The fields of this data can change without notice, so you should not write code that depends on its structure. One of the fields is called \"Alternative Matched Intents\", which may aid with debugging. The following describes these intent results: - The list is empty if no intent was matched to end-user input. - Only intents that are referenced in the currently active flow are included. - The matched intent is included. - Other intents that could have matched end-user input, but did not match because they are referenced by intent routes that are out of [scope](https://cloud.google.com/dialogflow/cx/docs/concept/handler#scope), are included. - Other intents referenced by intent routes in scope that matched end-user input, but had a lower confidence score.", alias="diagnosticInfo")
    dtmf: Optional[GoogleCloudDialogflowCxV3beta1DtmfInput] = None
    intent: Optional[GoogleCloudDialogflowCxV3beta1Intent] = None
    intent_detection_confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The intent detection confidence. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). This value is for informational purpose only and is only used to help match the best intent within the classification threshold. This value may change for the same end-user expression at any time due to a model retraining or change in implementation. This field is deprecated, please use QueryResult.match instead.", alias="intentDetectionConfidence")
    language_code: Optional[StrictStr] = Field(default=None, description="The language that was triggered during intent detection. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes.", alias="languageCode")
    match: Optional[GoogleCloudDialogflowCxV3beta1Match] = None
    parameters: Optional[Dict[str, Any]] = Field(default=None, description="The collected session parameters. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.")
    response_messages: Optional[List[GoogleCloudDialogflowCxV3beta1ResponseMessage]] = Field(default=None, description="The list of rich messages returned to the client. Responses vary from simple text messages to more sophisticated, structured payloads used to drive complex logic.", alias="responseMessages")
    sentiment_analysis_result: Optional[GoogleCloudDialogflowCxV3beta1SentimentAnalysisResult] = Field(default=None, alias="sentimentAnalysisResult")
    text: Optional[StrictStr] = Field(default=None, description="If natural language text was provided as input, this field will contain a copy of the text.")
    transcript: Optional[StrictStr] = Field(default=None, description="If natural language speech audio was provided as input, this field will contain the transcript for the audio.")
    trigger_event: Optional[StrictStr] = Field(default=None, description="If an event was provided as input, this field will contain the name of the event.", alias="triggerEvent")
    trigger_intent: Optional[StrictStr] = Field(default=None, description="If an intent was provided as input, this field will contain a copy of the intent identifier. Format: `projects//locations//agents//intents/`.", alias="triggerIntent")
    webhook_display_names: Optional[List[StrictStr]] = Field(default=None, description="The list of webhook display names in the order of call sequence.", alias="webhookDisplayNames")
    webhook_ids: Optional[List[StrictStr]] = Field(default=None, description="The list of webhook ids in the order of call sequence.", alias="webhookIds")
    webhook_latencies: Optional[List[StrictStr]] = Field(default=None, description="The list of webhook latencies in the order of call sequence.", alias="webhookLatencies")
    webhook_payloads: Optional[List[Dict[str, Any]]] = Field(default=None, description="The list of webhook payload in WebhookResponse.payload, in the order of call sequence. If some webhook call fails or doesn't return any payload, an empty `Struct` would be used instead.", alias="webhookPayloads")
    webhook_statuses: Optional[List[GoogleRpcStatus]] = Field(default=None, description="The list of webhook call status in the order of call sequence.", alias="webhookStatuses")
    webhook_tags: Optional[List[StrictStr]] = Field(default=None, description="The list of webhook tags in the order of call sequence.", alias="webhookTags")
    __properties: ClassVar[List[str]] = ["advancedSettings", "allowAnswerFeedback", "currentPage", "diagnosticInfo", "dtmf", "intent", "intentDetectionConfidence", "languageCode", "match", "parameters", "responseMessages", "sentimentAnalysisResult", "text", "transcript", "triggerEvent", "triggerIntent", "webhookDisplayNames", "webhookIds", "webhookLatencies", "webhookPayloads", "webhookStatuses", "webhookTags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1QueryResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advanced_settings
        if self.advanced_settings:
            _dict['advancedSettings'] = self.advanced_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_page
        if self.current_page:
            _dict['currentPage'] = self.current_page.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dtmf
        if self.dtmf:
            _dict['dtmf'] = self.dtmf.to_dict()
        # override the default output from pydantic by calling `to_dict()` of intent
        if self.intent:
            _dict['intent'] = self.intent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of match
        if self.match:
            _dict['match'] = self.match.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in response_messages (list)
        _items = []
        if self.response_messages:
            for _item_response_messages in self.response_messages:
                if _item_response_messages:
                    _items.append(_item_response_messages.to_dict())
            _dict['responseMessages'] = _items
        # override the default output from pydantic by calling `to_dict()` of sentiment_analysis_result
        if self.sentiment_analysis_result:
            _dict['sentimentAnalysisResult'] = self.sentiment_analysis_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in webhook_statuses (list)
        _items = []
        if self.webhook_statuses:
            for _item_webhook_statuses in self.webhook_statuses:
                if _item_webhook_statuses:
                    _items.append(_item_webhook_statuses.to_dict())
            _dict['webhookStatuses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1QueryResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advancedSettings": GoogleCloudDialogflowCxV3beta1AdvancedSettings.from_dict(obj["advancedSettings"]) if obj.get("advancedSettings") is not None else None,
            "allowAnswerFeedback": obj.get("allowAnswerFeedback"),
            "currentPage": GoogleCloudDialogflowCxV3beta1Page.from_dict(obj["currentPage"]) if obj.get("currentPage") is not None else None,
            "diagnosticInfo": obj.get("diagnosticInfo"),
            "dtmf": GoogleCloudDialogflowCxV3beta1DtmfInput.from_dict(obj["dtmf"]) if obj.get("dtmf") is not None else None,
            "intent": GoogleCloudDialogflowCxV3beta1Intent.from_dict(obj["intent"]) if obj.get("intent") is not None else None,
            "intentDetectionConfidence": obj.get("intentDetectionConfidence"),
            "languageCode": obj.get("languageCode"),
            "match": GoogleCloudDialogflowCxV3beta1Match.from_dict(obj["match"]) if obj.get("match") is not None else None,
            "parameters": obj.get("parameters"),
            "responseMessages": [GoogleCloudDialogflowCxV3beta1ResponseMessage.from_dict(_item) for _item in obj["responseMessages"]] if obj.get("responseMessages") is not None else None,
            "sentimentAnalysisResult": GoogleCloudDialogflowCxV3beta1SentimentAnalysisResult.from_dict(obj["sentimentAnalysisResult"]) if obj.get("sentimentAnalysisResult") is not None else None,
            "text": obj.get("text"),
            "transcript": obj.get("transcript"),
            "triggerEvent": obj.get("triggerEvent"),
            "triggerIntent": obj.get("triggerIntent"),
            "webhookDisplayNames": obj.get("webhookDisplayNames"),
            "webhookIds": obj.get("webhookIds"),
            "webhookLatencies": obj.get("webhookLatencies"),
            "webhookPayloads": obj.get("webhookPayloads"),
            "webhookStatuses": [GoogleRpcStatus.from_dict(_item) for _item in obj["webhookStatuses"]] if obj.get("webhookStatuses") is not None else None,
            "webhookTags": obj.get("webhookTags")
        })
        return _obj



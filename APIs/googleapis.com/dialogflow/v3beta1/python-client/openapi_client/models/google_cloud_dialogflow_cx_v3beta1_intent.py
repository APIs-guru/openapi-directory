# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_intent_parameter import GoogleCloudDialogflowCxV3beta1IntentParameter
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_intent_training_phrase import GoogleCloudDialogflowCxV3beta1IntentTrainingPhrase
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3beta1Intent(BaseModel):
    """
    An intent represents a user's intent to interact with a conversational agent. You can provide information for the Dialogflow API to use to match user input to an intent by adding training phrases (i.e., examples of user input) to your intent.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Human readable description for better understanding an intent like its scope, content, result etc. Maximum character limit: 140 characters.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The human-readable name of the intent, unique within the agent.", alias="displayName")
    is_fallback: Optional[StrictBool] = Field(default=None, description="Indicates whether this is a fallback intent. Currently only default fallback intent is allowed in the agent, which is added upon agent creation. Adding training phrases to fallback intent is useful in the case of requests that are mistakenly matched, since training phrases assigned to fallback intents act as negative examples that triggers no-match event.", alias="isFallback")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The key/value metadata to label an intent. Labels can contain lowercase letters, digits and the symbols '-' and '_'. International characters are allowed, including letters from unicase alphabets. Keys must start with a letter. Keys and values can be no longer than 63 characters and no more than 128 bytes. Prefix \"sys-\" is reserved for Dialogflow defined labels. Currently allowed Dialogflow defined labels include: * sys-head * sys-contextual The above labels do not require value. \"sys-head\" means the intent is a head intent. \"sys-contextual\" means the intent is a contextual intent.")
    name: Optional[StrictStr] = Field(default=None, description="The unique identifier of the intent. Required for the Intents.UpdateIntent method. Intents.CreateIntent populates the name automatically. Format: `projects//locations//agents//intents/`.")
    parameters: Optional[List[GoogleCloudDialogflowCxV3beta1IntentParameter]] = Field(default=None, description="The collection of parameters associated with the intent.")
    priority: Optional[StrictInt] = Field(default=None, description="The priority of this intent. Higher numbers represent higher priorities. - If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the `Normal` priority in the console. - If the supplied value is negative, the intent is ignored in runtime detect intent requests.")
    training_phrases: Optional[List[GoogleCloudDialogflowCxV3beta1IntentTrainingPhrase]] = Field(default=None, description="The collection of training phrases the agent is trained on to identify the intent.", alias="trainingPhrases")
    __properties: ClassVar[List[str]] = ["description", "displayName", "isFallback", "labels", "name", "parameters", "priority", "trainingPhrases"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1Intent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in training_phrases (list)
        _items = []
        if self.training_phrases:
            for _item_training_phrases in self.training_phrases:
                if _item_training_phrases:
                    _items.append(_item_training_phrases.to_dict())
            _dict['trainingPhrases'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1Intent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "isFallback": obj.get("isFallback"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "parameters": [GoogleCloudDialogflowCxV3beta1IntentParameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "priority": obj.get("priority"),
            "trainingPhrases": [GoogleCloudDialogflowCxV3beta1IntentTrainingPhrase.from_dict(_item) for _item in obj["trainingPhrases"]] if obj.get("trainingPhrases") is not None else None
        })
        return _obj



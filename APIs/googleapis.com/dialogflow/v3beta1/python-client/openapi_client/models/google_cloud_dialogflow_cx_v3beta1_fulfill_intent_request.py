# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_match import GoogleCloudDialogflowCxV3beta1Match
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_match_intent_request import GoogleCloudDialogflowCxV3beta1MatchIntentRequest
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_output_audio_config import GoogleCloudDialogflowCxV3beta1OutputAudioConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3beta1FulfillIntentRequest(BaseModel):
    """
    Request of FulfillIntent
    """ # noqa: E501
    match: Optional[GoogleCloudDialogflowCxV3beta1Match] = None
    match_intent_request: Optional[GoogleCloudDialogflowCxV3beta1MatchIntentRequest] = Field(default=None, alias="matchIntentRequest")
    output_audio_config: Optional[GoogleCloudDialogflowCxV3beta1OutputAudioConfig] = Field(default=None, alias="outputAudioConfig")
    __properties: ClassVar[List[str]] = ["match", "matchIntentRequest", "outputAudioConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1FulfillIntentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of match
        if self.match:
            _dict['match'] = self.match.to_dict()
        # override the default output from pydantic by calling `to_dict()` of match_intent_request
        if self.match_intent_request:
            _dict['matchIntentRequest'] = self.match_intent_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output_audio_config
        if self.output_audio_config:
            _dict['outputAudioConfig'] = self.output_audio_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1FulfillIntentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "match": GoogleCloudDialogflowCxV3beta1Match.from_dict(obj["match"]) if obj.get("match") is not None else None,
            "matchIntentRequest": GoogleCloudDialogflowCxV3beta1MatchIntentRequest.from_dict(obj["matchIntentRequest"]) if obj.get("matchIntentRequest") is not None else None,
            "outputAudioConfig": GoogleCloudDialogflowCxV3beta1OutputAudioConfig.from_dict(obj["outputAudioConfig"]) if obj.get("outputAudioConfig") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_intent import GoogleCloudDialogflowCxV3beta1Intent
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3beta1Match(BaseModel):
    """
    Represents one match result of MatchIntent.
    """ # noqa: E501
    confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The confidence of this match. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). This value is for informational purpose only and is only used to help match the best intent within the classification threshold. This value may change for the same end-user expression at any time due to a model retraining or change in implementation.")
    event: Optional[StrictStr] = Field(default=None, description="The event that matched the query. Filled for `EVENT`, `NO_MATCH` and `NO_INPUT` match types.")
    intent: Optional[GoogleCloudDialogflowCxV3beta1Intent] = None
    match_type: Optional[StrictStr] = Field(default=None, description="Type of this Match.", alias="matchType")
    parameters: Optional[Dict[str, Any]] = Field(default=None, description="The collection of parameters extracted from the query. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.")
    resolved_input: Optional[StrictStr] = Field(default=None, description="Final text input which was matched during MatchIntent. This value can be different from original input sent in request because of spelling correction or other processing.", alias="resolvedInput")
    __properties: ClassVar[List[str]] = ["confidence", "event", "intent", "matchType", "parameters", "resolvedInput"]

    @field_validator('match_type')
    def match_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MATCH_TYPE_UNSPECIFIED', 'INTENT', 'DIRECT_INTENT', 'PARAMETER_FILLING', 'NO_MATCH', 'NO_INPUT', 'EVENT']):
            raise ValueError("must be one of enum values ('MATCH_TYPE_UNSPECIFIED', 'INTENT', 'DIRECT_INTENT', 'PARAMETER_FILLING', 'NO_MATCH', 'NO_INPUT', 'EVENT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1Match from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of intent
        if self.intent:
            _dict['intent'] = self.intent.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1Match from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confidence": obj.get("confidence"),
            "event": obj.get("event"),
            "intent": GoogleCloudDialogflowCxV3beta1Intent.from_dict(obj["intent"]) if obj.get("intent") is not None else None,
            "matchType": obj.get("matchType"),
            "parameters": obj.get("parameters"),
            "resolvedInput": obj.get("resolvedInput")
        })
        return _obj



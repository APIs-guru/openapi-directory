# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3beta1WebhookGenericWebService(BaseModel):
    """
    Represents configuration for a generic web service.
    """ # noqa: E501
    allowed_ca_certs: Optional[List[Union[StrictBytes, StrictStr]]] = Field(default=None, description="Optional. Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification. This overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use Google's default trust store to verify certificates. N.B. Make sure the HTTPS server certificates are signed with \"subject alt name\". For instance a certificate can be self-signed using the following command, ``` openssl x509 -req -days 200 -in example.com.csr \\ -signkey example.com.key \\ -out example.com.crt \\ -extfile <(printf \"\\nsubjectAltName='DNS:www.example.com'\") ```", alias="allowedCaCerts")
    http_method: Optional[StrictStr] = Field(default=None, description="Optional. HTTP method for the flexible webhook calls. Standard webhook always uses POST.", alias="httpMethod")
    parameter_mapping: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Maps the values extracted from specific fields of the flexible webhook response into session parameters. - Key: session parameter name - Value: field path in the webhook response", alias="parameterMapping")
    password: Optional[StrictStr] = Field(default=None, description="The password for HTTP Basic authentication.")
    request_body: Optional[StrictStr] = Field(default=None, description="Optional. Defines a custom JSON object as request body to send to flexible webhook.", alias="requestBody")
    request_headers: Optional[Dict[str, StrictStr]] = Field(default=None, description="The HTTP request headers to send together with webhook requests.", alias="requestHeaders")
    uri: Optional[StrictStr] = Field(default=None, description="Required. The webhook URI for receiving POST requests. It must use https protocol.")
    username: Optional[StrictStr] = Field(default=None, description="The user name for HTTP Basic authentication.")
    webhook_type: Optional[StrictStr] = Field(default=None, description="Optional. Type of the webhook.", alias="webhookType")
    __properties: ClassVar[List[str]] = ["allowedCaCerts", "httpMethod", "parameterMapping", "password", "requestBody", "requestHeaders", "uri", "username", "webhookType"]

    @field_validator('http_method')
    def http_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HTTP_METHOD_UNSPECIFIED', 'POST', 'GET', 'HEAD', 'PUT', 'DELETE', 'PATCH', 'OPTIONS']):
            raise ValueError("must be one of enum values ('HTTP_METHOD_UNSPECIFIED', 'POST', 'GET', 'HEAD', 'PUT', 'DELETE', 'PATCH', 'OPTIONS')")
        return value

    @field_validator('webhook_type')
    def webhook_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WEBHOOK_TYPE_UNSPECIFIED', 'STANDARD', 'FLEXIBLE']):
            raise ValueError("must be one of enum values ('WEBHOOK_TYPE_UNSPECIFIED', 'STANDARD', 'FLEXIBLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1WebhookGenericWebService from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1WebhookGenericWebService from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedCaCerts": obj.get("allowedCaCerts"),
            "httpMethod": obj.get("httpMethod"),
            "parameterMapping": obj.get("parameterMapping"),
            "password": obj.get("password"),
            "requestBody": obj.get("requestBody"),
            "requestHeaders": obj.get("requestHeaders"),
            "uri": obj.get("uri"),
            "username": obj.get("username"),
            "webhookType": obj.get("webhookType")
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_dialogflow_cx_v3_webhook_response import GoogleCloudDialogflowCxV3WebhookResponse

class TestGoogleCloudDialogflowCxV3WebhookResponse(unittest.TestCase):
    """GoogleCloudDialogflowCxV3WebhookResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDialogflowCxV3WebhookResponse:
        """Test GoogleCloudDialogflowCxV3WebhookResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDialogflowCxV3WebhookResponse`
        """
        model = GoogleCloudDialogflowCxV3WebhookResponse()
        if include_optional:
            return GoogleCloudDialogflowCxV3WebhookResponse(
                fulfillment_response = openapi_client.models.google_cloud_dialogflow_cx_v3_webhook_response_fulfillment_response.GoogleCloudDialogflowCxV3WebhookResponseFulfillmentResponse(
                    merge_behavior = 'MERGE_BEHAVIOR_UNSPECIFIED', 
                    messages = [
                        openapi_client.models.google_cloud_dialogflow_cx_v3_response_message.GoogleCloudDialogflowCxV3ResponseMessage(
                            channel = '', 
                            conversation_success = openapi_client.models.google_cloud_dialogflow_cx_v3_response_message_conversation_success.GoogleCloudDialogflowCxV3ResponseMessageConversationSuccess(
                                metadata = {
                                    'key' : null
                                    }, ), 
                            end_interaction = openapi_client.models.google_cloud_dialogflow_cx_v3_response_message_end_interaction.GoogleCloudDialogflowCxV3ResponseMessageEndInteraction(), 
                            knowledge_info_card = openapi_client.models.google_cloud_dialogflow_cx_v3_response_message_knowledge_info_card.GoogleCloudDialogflowCxV3ResponseMessageKnowledgeInfoCard(), 
                            live_agent_handoff = openapi_client.models.google_cloud_dialogflow_cx_v3_response_message_live_agent_handoff.GoogleCloudDialogflowCxV3ResponseMessageLiveAgentHandoff(), 
                            mixed_audio = openapi_client.models.google_cloud_dialogflow_cx_v3_response_message_mixed_audio.GoogleCloudDialogflowCxV3ResponseMessageMixedAudio(
                                segments = [
                                    openapi_client.models.google_cloud_dialogflow_cx_v3_response_message_mixed_audio_segment.GoogleCloudDialogflowCxV3ResponseMessageMixedAudioSegment(
                                        allow_playback_interruption = True, 
                                        audio = 'YQ==', 
                                        uri = '', )
                                    ], ), 
                            output_audio_text = openapi_client.models.google_cloud_dialogflow_cx_v3_response_message_output_audio_text.GoogleCloudDialogflowCxV3ResponseMessageOutputAudioText(
                                allow_playback_interruption = True, 
                                ssml = '', 
                                text = '', ), 
                            payload = {
                                'key' : null
                                }, 
                            play_audio = openapi_client.models.google_cloud_dialogflow_cx_v3_response_message_play_audio.GoogleCloudDialogflowCxV3ResponseMessagePlayAudio(
                                allow_playback_interruption = True, 
                                audio_uri = '', ), 
                            response_type = 'RESPONSE_TYPE_UNSPECIFIED', 
                            telephony_transfer_call = openapi_client.models.google_cloud_dialogflow_cx_v3_response_message_telephony_transfer_call.GoogleCloudDialogflowCxV3ResponseMessageTelephonyTransferCall(
                                phone_number = '', ), 
                            text = openapi_client.models.google_cloud_dialogflow_cx_v3_response_message_text.GoogleCloudDialogflowCxV3ResponseMessageText(
                                allow_playback_interruption = True, ), )
                        ], ),
                page_info = openapi_client.models.google_cloud_dialogflow_cx_v3_page_info.GoogleCloudDialogflowCxV3PageInfo(
                    current_page = '', 
                    display_name = '', 
                    form_info = openapi_client.models.google_cloud_dialogflow_cx_v3_page_info_form_info.GoogleCloudDialogflowCxV3PageInfoFormInfo(
                        parameter_info = [
                            openapi_client.models.google_cloud_dialogflow_cx_v3_page_info_form_info_parameter_info.GoogleCloudDialogflowCxV3PageInfoFormInfoParameterInfo(
                                display_name = '', 
                                just_collected = True, 
                                required = True, 
                                state = 'PARAMETER_STATE_UNSPECIFIED', 
                                value = null, )
                            ], ), ),
                payload = {
                    'key' : null
                    },
                session_info = openapi_client.models.google_cloud_dialogflow_cx_v3_session_info.GoogleCloudDialogflowCxV3SessionInfo(
                    parameters = {
                        'key' : null
                        }, 
                    session = '', ),
                target_flow = '',
                target_page = ''
            )
        else:
            return GoogleCloudDialogflowCxV3WebhookResponse(
        )
        """

    def testGoogleCloudDialogflowCxV3WebhookResponse(self):
        """Test GoogleCloudDialogflowCxV3WebhookResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_list_experiments_response import GoogleCloudDialogflowCxV3beta1ListExperimentsResponse

class TestGoogleCloudDialogflowCxV3beta1ListExperimentsResponse(unittest.TestCase):
    """GoogleCloudDialogflowCxV3beta1ListExperimentsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDialogflowCxV3beta1ListExperimentsResponse:
        """Test GoogleCloudDialogflowCxV3beta1ListExperimentsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDialogflowCxV3beta1ListExperimentsResponse`
        """
        model = GoogleCloudDialogflowCxV3beta1ListExperimentsResponse()
        if include_optional:
            return GoogleCloudDialogflowCxV3beta1ListExperimentsResponse(
                experiments = [
                    openapi_client.models.google_cloud_dialogflow_cx_v3beta1_experiment.GoogleCloudDialogflowCxV3beta1Experiment(
                        create_time = '', 
                        definition = openapi_client.models.google_cloud_dialogflow_cx_v3beta1_experiment_definition.GoogleCloudDialogflowCxV3beta1ExperimentDefinition(
                            condition = '', 
                            version_variants = openapi_client.models.google_cloud_dialogflow_cx_v3beta1_version_variants.GoogleCloudDialogflowCxV3beta1VersionVariants(
                                variants = [
                                    openapi_client.models.google_cloud_dialogflow_cx_v3beta1_version_variants_variant.GoogleCloudDialogflowCxV3beta1VersionVariantsVariant(
                                        is_control_group = True, 
                                        traffic_allocation = 1.337, 
                                        version = '', )
                                    ], ), ), 
                        description = '', 
                        display_name = '', 
                        end_time = '', 
                        experiment_length = '', 
                        last_update_time = '', 
                        name = '', 
                        result = openapi_client.models.google_cloud_dialogflow_cx_v3beta1_experiment_result.GoogleCloudDialogflowCxV3beta1ExperimentResult(
                            last_update_time = '', 
                            version_metrics = [
                                openapi_client.models.google_cloud_dialogflow_cx_v3beta1_experiment_result_version_metrics.GoogleCloudDialogflowCxV3beta1ExperimentResultVersionMetrics(
                                    metrics = [
                                        openapi_client.models.google_cloud_dialogflow_cx_v3beta1_experiment_result_metric.GoogleCloudDialogflowCxV3beta1ExperimentResultMetric(
                                            confidence_interval = openapi_client.models.google_cloud_dialogflow_cx_v3beta1_experiment_result_confidence_interval.GoogleCloudDialogflowCxV3beta1ExperimentResultConfidenceInterval(
                                                confidence_level = 1.337, 
                                                lower_bound = 1.337, 
                                                ratio = 1.337, 
                                                upper_bound = 1.337, ), 
                                            count = 1.337, 
                                            count_type = 'COUNT_TYPE_UNSPECIFIED', 
                                            ratio = 1.337, 
                                            type = 'METRIC_UNSPECIFIED', )
                                        ], 
                                    session_count = 56, 
                                    version = '', )
                                ], ), 
                        rollout_config = openapi_client.models.google_cloud_dialogflow_cx_v3beta1_rollout_config.GoogleCloudDialogflowCxV3beta1RolloutConfig(
                            failure_condition = '', 
                            rollout_condition = '', 
                            rollout_steps = [
                                openapi_client.models.google_cloud_dialogflow_cx_v3beta1_rollout_config_rollout_step.GoogleCloudDialogflowCxV3beta1RolloutConfigRolloutStep(
                                    display_name = '', 
                                    min_duration = '', 
                                    traffic_percent = 56, )
                                ], ), 
                        rollout_failure_reason = '', 
                        rollout_state = openapi_client.models.google_cloud_dialogflow_cx_v3beta1_rollout_state.GoogleCloudDialogflowCxV3beta1RolloutState(
                            start_time = '', 
                            step = '', 
                            step_index = 56, ), 
                        start_time = '', 
                        state = 'STATE_UNSPECIFIED', 
                        variants_history = [
                            openapi_client.models.google_cloud_dialogflow_cx_v3beta1_variants_history.GoogleCloudDialogflowCxV3beta1VariantsHistory(
                                update_time = '', )
                            ], )
                    ],
                next_page_token = ''
            )
        else:
            return GoogleCloudDialogflowCxV3beta1ListExperimentsResponse(
        )
        """

    def testGoogleCloudDialogflowCxV3beta1ListExperimentsResponse(self):
        """Test GoogleCloudDialogflowCxV3beta1ListExperimentsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_list_agents_response import GoogleCloudDialogflowCxV3beta1ListAgentsResponse

class TestGoogleCloudDialogflowCxV3beta1ListAgentsResponse(unittest.TestCase):
    """GoogleCloudDialogflowCxV3beta1ListAgentsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDialogflowCxV3beta1ListAgentsResponse:
        """Test GoogleCloudDialogflowCxV3beta1ListAgentsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDialogflowCxV3beta1ListAgentsResponse`
        """
        model = GoogleCloudDialogflowCxV3beta1ListAgentsResponse()
        if include_optional:
            return GoogleCloudDialogflowCxV3beta1ListAgentsResponse(
                agents = [
                    openapi_client.models.google_cloud_dialogflow_cx_v3beta1_agent.GoogleCloudDialogflowCxV3beta1Agent(
                        advanced_settings = openapi_client.models.google_cloud_dialogflow_cx_v3beta1_advanced_settings.GoogleCloudDialogflowCxV3beta1AdvancedSettings(
                            audio_export_gcs_destination = openapi_client.models.google_cloud_dialogflow_cx_v3beta1_gcs_destination.GoogleCloudDialogflowCxV3beta1GcsDestination(
                                uri = '', ), 
                            dtmf_settings = openapi_client.models.google_cloud_dialogflow_cx_v3beta1_advanced_settings_dtmf_settings.GoogleCloudDialogflowCxV3beta1AdvancedSettingsDtmfSettings(
                                enabled = True, 
                                finish_digit = '', 
                                max_digits = 56, ), 
                            logging_settings = openapi_client.models.google_cloud_dialogflow_cx_v3beta1_advanced_settings_logging_settings.GoogleCloudDialogflowCxV3beta1AdvancedSettingsLoggingSettings(
                                enable_interaction_logging = True, 
                                enable_stackdriver_logging = True, ), ), 
                        answer_feedback_settings = openapi_client.models.google_cloud_dialogflow_cx_v3beta1_agent_answer_feedback_settings.GoogleCloudDialogflowCxV3beta1AgentAnswerFeedbackSettings(
                            enable_answer_feedback = True, ), 
                        avatar_uri = '', 
                        default_language_code = '', 
                        description = '', 
                        display_name = '', 
                        enable_spell_correction = True, 
                        enable_stackdriver_logging = True, 
                        gen_app_builder_settings = openapi_client.models.google_cloud_dialogflow_cx_v3beta1_agent_gen_app_builder_settings.GoogleCloudDialogflowCxV3beta1AgentGenAppBuilderSettings(
                            engine = '', ), 
                        git_integration_settings = openapi_client.models.google_cloud_dialogflow_cx_v3beta1_agent_git_integration_settings.GoogleCloudDialogflowCxV3beta1AgentGitIntegrationSettings(
                            github_settings = openapi_client.models.google_cloud_dialogflow_cx_v3beta1_agent_git_integration_settings_github_settings.GoogleCloudDialogflowCxV3beta1AgentGitIntegrationSettingsGithubSettings(
                                access_token = '', 
                                branches = [
                                    ''
                                    ], 
                                display_name = '', 
                                repository_uri = '', 
                                tracking_branch = '', ), ), 
                        locked = True, 
                        name = '', 
                        security_settings = '', 
                        speech_to_text_settings = openapi_client.models.google_cloud_dialogflow_cx_v3beta1_speech_to_text_settings.GoogleCloudDialogflowCxV3beta1SpeechToTextSettings(
                            enable_speech_adaptation = True, ), 
                        start_flow = '', 
                        supported_language_codes = [
                            ''
                            ], 
                        text_to_speech_settings = openapi_client.models.google_cloud_dialogflow_cx_v3beta1_text_to_speech_settings.GoogleCloudDialogflowCxV3beta1TextToSpeechSettings(
                            synthesize_speech_configs = {
                                'key' : openapi_client.models.google_cloud_dialogflow_cx_v3beta1_synthesize_speech_config.GoogleCloudDialogflowCxV3beta1SynthesizeSpeechConfig(
                                    effects_profile_id = [
                                        ''
                                        ], 
                                    pitch = 1.337, 
                                    speaking_rate = 1.337, 
                                    voice = openapi_client.models.google_cloud_dialogflow_cx_v3beta1_voice_selection_params.GoogleCloudDialogflowCxV3beta1VoiceSelectionParams(
                                        name = '', 
                                        ssml_gender = 'SSML_VOICE_GENDER_UNSPECIFIED', ), 
                                    volume_gain_db = 1.337, )
                                }, ), 
                        time_zone = '', )
                    ],
                next_page_token = ''
            )
        else:
            return GoogleCloudDialogflowCxV3beta1ListAgentsResponse(
        )
        """

    def testGoogleCloudDialogflowCxV3beta1ListAgentsResponse(self):
        """Test GoogleCloudDialogflowCxV3beta1ListAgentsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_dialogflow_v2beta1_set_suggestion_feature_config_request import GoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigRequest

class TestGoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigRequest(unittest.TestCase):
    """GoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigRequest:
        """Test GoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigRequest`
        """
        model = GoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigRequest()
        if include_optional:
            return GoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigRequest(
                participant_role = 'ROLE_UNSPECIFIED',
                suggestion_feature_config = openapi_client.models.google_cloud_dialogflow_v2beta1_human_agent_assistant_config_suggestion_feature_config.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionFeatureConfig(
                    conversation_model_config = openapi_client.models.google_cloud_dialogflow_v2beta1_human_agent_assistant_config_conversation_model_config.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigConversationModelConfig(
                        baseline_model_version = '', 
                        model = '', ), 
                    conversation_process_config = openapi_client.models.google_cloud_dialogflow_v2beta1_human_agent_assistant_config_conversation_process_config.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigConversationProcessConfig(
                        recent_sentences_count = 56, ), 
                    disable_agent_query_logging = True, 
                    enable_conversation_augmented_query = True, 
                    enable_event_based_suggestion = True, 
                    query_config = openapi_client.models.google_cloud_dialogflow_v2beta1_human_agent_assistant_config_suggestion_query_config.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionQueryConfig(
                        confidence_threshold = 1.337, 
                        context_filter_settings = openapi_client.models.google_cloud_dialogflow_v2beta1_human_agent_assistant_config_suggestion_query_config_context_filter_settings.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionQueryConfigContextFilterSettings(
                            drop_handoff_messages = True, 
                            drop_ivr_messages = True, 
                            drop_virtual_agent_messages = True, ), 
                        dialogflow_query_source = openapi_client.models.google_cloud_dialogflow_v2beta1_human_agent_assistant_config_suggestion_query_config_dialogflow_query_source.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySource(
                            agent = '', 
                            human_agent_side_config = openapi_client.models.google_cloud_dialogflow_v2beta1_human_agent_assistant_config_suggestion_query_config_dialogflow_query_source_human_agent_side_config.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySourceHumanAgentSideConfig(
                                agent = '', ), ), 
                        document_query_source = openapi_client.models.google_cloud_dialogflow_v2beta1_human_agent_assistant_config_suggestion_query_config_document_query_source.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionQueryConfigDocumentQuerySource(
                            documents = [
                                ''
                                ], ), 
                        knowledge_base_query_source = openapi_client.models.google_cloud_dialogflow_v2beta1_human_agent_assistant_config_suggestion_query_config_knowledge_base_query_source.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionQueryConfigKnowledgeBaseQuerySource(
                            knowledge_bases = [
                                ''
                                ], ), 
                        max_results = 56, 
                        sections = openapi_client.models.google_cloud_dialogflow_v2beta1_human_agent_assistant_config_suggestion_query_config_sections.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionQueryConfigSections(
                            section_types = [
                                'SECTION_TYPE_UNSPECIFIED'
                                ], ), ), 
                    suggestion_feature = openapi_client.models.google_cloud_dialogflow_v2beta1_suggestion_feature.GoogleCloudDialogflowV2beta1SuggestionFeature(
                        type = 'TYPE_UNSPECIFIED', ), 
                    suggestion_trigger_settings = openapi_client.models.google_cloud_dialogflow_v2beta1_human_agent_assistant_config_suggestion_trigger_settings.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionTriggerSettings(
                        no_small_talk = True, 
                        only_end_user = True, ), )
            )
        else:
            return GoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigRequest(
        )
        """

    def testGoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigRequest(self):
        """Test GoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_dialogflow_v2beta1_search_knowledge_answer import GoogleCloudDialogflowV2beta1SearchKnowledgeAnswer

class TestGoogleCloudDialogflowV2beta1SearchKnowledgeAnswer(unittest.TestCase):
    """GoogleCloudDialogflowV2beta1SearchKnowledgeAnswer unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDialogflowV2beta1SearchKnowledgeAnswer:
        """Test GoogleCloudDialogflowV2beta1SearchKnowledgeAnswer
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDialogflowV2beta1SearchKnowledgeAnswer`
        """
        model = GoogleCloudDialogflowV2beta1SearchKnowledgeAnswer()
        if include_optional:
            return GoogleCloudDialogflowV2beta1SearchKnowledgeAnswer(
                answer = '',
                answer_record = '',
                answer_sources = [
                    openapi_client.models.google_cloud_dialogflow_v2beta1_search_knowledge_answer_answer_source.GoogleCloudDialogflowV2beta1SearchKnowledgeAnswerAnswerSource(
                        snippet = '', 
                        title = '', 
                        uri = '', )
                    ],
                answer_type = 'ANSWER_TYPE_UNSPECIFIED'
            )
        else:
            return GoogleCloudDialogflowV2beta1SearchKnowledgeAnswer(
        )
        """

    def testGoogleCloudDialogflowV2beta1SearchKnowledgeAnswer(self):
        """Test GoogleCloudDialogflowV2beta1SearchKnowledgeAnswer"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

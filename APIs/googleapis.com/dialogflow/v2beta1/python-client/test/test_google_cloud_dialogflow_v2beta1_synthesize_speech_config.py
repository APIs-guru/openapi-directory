# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_dialogflow_v2beta1_synthesize_speech_config import GoogleCloudDialogflowV2beta1SynthesizeSpeechConfig

class TestGoogleCloudDialogflowV2beta1SynthesizeSpeechConfig(unittest.TestCase):
    """GoogleCloudDialogflowV2beta1SynthesizeSpeechConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDialogflowV2beta1SynthesizeSpeechConfig:
        """Test GoogleCloudDialogflowV2beta1SynthesizeSpeechConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDialogflowV2beta1SynthesizeSpeechConfig`
        """
        model = GoogleCloudDialogflowV2beta1SynthesizeSpeechConfig()
        if include_optional:
            return GoogleCloudDialogflowV2beta1SynthesizeSpeechConfig(
                effects_profile_id = [
                    ''
                    ],
                pitch = 1.337,
                speaking_rate = 1.337,
                voice = openapi_client.models.google_cloud_dialogflow_v2beta1_voice_selection_params.GoogleCloudDialogflowV2beta1VoiceSelectionParams(
                    name = '', 
                    ssml_gender = 'SSML_VOICE_GENDER_UNSPECIFIED', ),
                volume_gain_db = 1.337
            )
        else:
            return GoogleCloudDialogflowV2beta1SynthesizeSpeechConfig(
        )
        """

    def testGoogleCloudDialogflowV2beta1SynthesizeSpeechConfig(self):
        """Test GoogleCloudDialogflowV2beta1SynthesizeSpeechConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_dialogflow_v2beta1_detect_intent_response import GoogleCloudDialogflowV2beta1DetectIntentResponse
from openapi_client.models.google_cloud_dialogflow_v2beta1_response_message import GoogleCloudDialogflowV2beta1ResponseMessage
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1AutomatedAgentReply(BaseModel):
    """
    Represents a response from an automated agent.
    """ # noqa: E501
    allow_cancellation: Optional[StrictBool] = Field(default=None, description="Indicates whether the partial automated agent reply is interruptible when a later reply message arrives. e.g. if the agent specified some music as partial response, it can be cancelled.", alias="allowCancellation")
    automated_agent_reply_type: Optional[StrictStr] = Field(default=None, description="AutomatedAgentReply type.", alias="automatedAgentReplyType")
    cx_current_page: Optional[StrictStr] = Field(default=None, description="The unique identifier of the current Dialogflow CX conversation page. Format: `projects//locations//agents//flows//pages/`.", alias="cxCurrentPage")
    cx_session_parameters: Optional[Dict[str, Any]] = Field(default=None, description="The collection of current Dialogflow CX agent session parameters at the time of this response. Deprecated: Use `parameters` instead.", alias="cxSessionParameters")
    detect_intent_response: Optional[GoogleCloudDialogflowV2beta1DetectIntentResponse] = Field(default=None, alias="detectIntentResponse")
    event: Optional[StrictStr] = Field(default=None, description="Event name if an event is triggered for the query.")
    intent: Optional[StrictStr] = Field(default=None, description="Name of the intent if an intent is matched for the query. For a V2 query, the value format is `projects//locations/ /agent/intents/`. For a V3 query, the value format is `projects//locations/ /agents//intents/`.")
    match_confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The confidence of the match. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). This value is for informational purpose only and is only used to help match the best intent within the classification threshold. This value may change for the same end-user expression at any time due to a model retraining or change in implementation.", alias="matchConfidence")
    parameters: Optional[Dict[str, Any]] = Field(default=None, description="The collection of current parameters at the time of this response.")
    response_messages: Optional[List[GoogleCloudDialogflowV2beta1ResponseMessage]] = Field(default=None, description="Response messages from the automated agent.", alias="responseMessages")
    __properties: ClassVar[List[str]] = ["allowCancellation", "automatedAgentReplyType", "cxCurrentPage", "cxSessionParameters", "detectIntentResponse", "event", "intent", "matchConfidence", "parameters", "responseMessages"]

    @field_validator('automated_agent_reply_type')
    def automated_agent_reply_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUTOMATED_AGENT_REPLY_TYPE_UNSPECIFIED', 'PARTIAL', 'FINAL']):
            raise ValueError("must be one of enum values ('AUTOMATED_AGENT_REPLY_TYPE_UNSPECIFIED', 'PARTIAL', 'FINAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1AutomatedAgentReply from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of detect_intent_response
        if self.detect_intent_response:
            _dict['detectIntentResponse'] = self.detect_intent_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in response_messages (list)
        _items = []
        if self.response_messages:
            for _item_response_messages in self.response_messages:
                if _item_response_messages:
                    _items.append(_item_response_messages.to_dict())
            _dict['responseMessages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1AutomatedAgentReply from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowCancellation": obj.get("allowCancellation"),
            "automatedAgentReplyType": obj.get("automatedAgentReplyType"),
            "cxCurrentPage": obj.get("cxCurrentPage"),
            "cxSessionParameters": obj.get("cxSessionParameters"),
            "detectIntentResponse": GoogleCloudDialogflowV2beta1DetectIntentResponse.from_dict(obj["detectIntentResponse"]) if obj.get("detectIntentResponse") is not None else None,
            "event": obj.get("event"),
            "intent": obj.get("intent"),
            "matchConfidence": obj.get("matchConfidence"),
            "parameters": obj.get("parameters"),
            "responseMessages": [GoogleCloudDialogflowV2beta1ResponseMessage.from_dict(_item) for _item in obj["responseMessages"]] if obj.get("responseMessages") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2beta1_fulfillment_feature import GoogleCloudDialogflowV2beta1FulfillmentFeature
from openapi_client.models.google_cloud_dialogflow_v2beta1_fulfillment_generic_web_service import GoogleCloudDialogflowV2beta1FulfillmentGenericWebService
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1Fulfillment(BaseModel):
    """
    By default, your agent responds to a matched intent with a static response. As an alternative, you can provide a more dynamic response by using fulfillment. When you enable fulfillment for an intent, Dialogflow responds to that intent by calling a service that you define. For example, if an end-user wants to schedule a haircut on Friday, your service can check your database and respond to the end-user with availability information for Friday. For more information, see the [fulfillment guide](https://cloud.google.com/dialogflow/docs/fulfillment-overview).
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="The human-readable name of the fulfillment, unique within the agent. This field is not used for Fulfillment in an Environment.", alias="displayName")
    enabled: Optional[StrictBool] = Field(default=None, description="Whether fulfillment is enabled.")
    features: Optional[List[GoogleCloudDialogflowV2beta1FulfillmentFeature]] = Field(default=None, description="The field defines whether the fulfillment is enabled for certain features.")
    generic_web_service: Optional[GoogleCloudDialogflowV2beta1FulfillmentGenericWebService] = Field(default=None, alias="genericWebService")
    name: Optional[StrictStr] = Field(default=None, description="Required. The unique identifier of the fulfillment. Supported formats: - `projects//agent/fulfillment` - `projects//locations//agent/fulfillment` This field is not used for Fulfillment in an Environment.")
    __properties: ClassVar[List[str]] = ["displayName", "enabled", "features", "genericWebService", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1Fulfillment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in features (list)
        _items = []
        if self.features:
            for _item_features in self.features:
                if _item_features:
                    _items.append(_item_features.to_dict())
            _dict['features'] = _items
        # override the default output from pydantic by calling `to_dict()` of generic_web_service
        if self.generic_web_service:
            _dict['genericWebService'] = self.generic_web_service.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1Fulfillment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "enabled": obj.get("enabled"),
            "features": [GoogleCloudDialogflowV2beta1FulfillmentFeature.from_dict(_item) for _item in obj["features"]] if obj.get("features") is not None else None,
            "genericWebService": GoogleCloudDialogflowV2beta1FulfillmentGenericWebService.from_dict(obj["genericWebService"]) if obj.get("genericWebService") is not None else None,
            "name": obj.get("name")
        })
        return _obj



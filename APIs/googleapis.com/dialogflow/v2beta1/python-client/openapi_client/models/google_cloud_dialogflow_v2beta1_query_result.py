# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_dialogflow_v2beta1_context import GoogleCloudDialogflowV2beta1Context
from openapi_client.models.google_cloud_dialogflow_v2beta1_intent import GoogleCloudDialogflowV2beta1Intent
from openapi_client.models.google_cloud_dialogflow_v2beta1_intent_message import GoogleCloudDialogflowV2beta1IntentMessage
from openapi_client.models.google_cloud_dialogflow_v2beta1_knowledge_answers import GoogleCloudDialogflowV2beta1KnowledgeAnswers
from openapi_client.models.google_cloud_dialogflow_v2beta1_sentiment_analysis_result import GoogleCloudDialogflowV2beta1SentimentAnalysisResult
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1QueryResult(BaseModel):
    """
    Represents the result of conversational query or event processing.
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="The action name from the matched intent.")
    all_required_params_present: Optional[StrictBool] = Field(default=None, description="This field is set to: - `false` if the matched intent has required parameters and not all of the required parameter values have been collected. - `true` if all required parameter values have been collected, or if the matched intent doesn't contain any required parameters.", alias="allRequiredParamsPresent")
    cancels_slot_filling: Optional[StrictBool] = Field(default=None, description="Indicates whether the conversational query triggers a cancellation for slot filling. For more information, see the [cancel slot filling documentation](https://cloud.google.com/dialogflow/es/docs/intents-actions-parameters#cancel).", alias="cancelsSlotFilling")
    diagnostic_info: Optional[Dict[str, Any]] = Field(default=None, description="Free-form diagnostic information for the associated detect intent request. The fields of this data can change without notice, so you should not write code that depends on its structure. The data may contain: - webhook call latency - webhook errors", alias="diagnosticInfo")
    fulfillment_messages: Optional[List[GoogleCloudDialogflowV2beta1IntentMessage]] = Field(default=None, description="The collection of rich messages to present to the user.", alias="fulfillmentMessages")
    fulfillment_text: Optional[StrictStr] = Field(default=None, description="The text to be pronounced to the user or shown on the screen. Note: This is a legacy field, `fulfillment_messages` should be preferred.", alias="fulfillmentText")
    intent: Optional[GoogleCloudDialogflowV2beta1Intent] = None
    intent_detection_confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The intent detection confidence. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). This value is for informational purpose only and is only used to help match the best intent within the classification threshold. This value may change for the same end-user expression at any time due to a model retraining or change in implementation. If there are `multiple knowledge_answers` messages, this value is set to the greatest `knowledgeAnswers.match_confidence` value in the list.", alias="intentDetectionConfidence")
    knowledge_answers: Optional[GoogleCloudDialogflowV2beta1KnowledgeAnswers] = Field(default=None, alias="knowledgeAnswers")
    language_code: Optional[StrictStr] = Field(default=None, description="The language that was triggered during intent detection. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes.", alias="languageCode")
    output_contexts: Optional[List[GoogleCloudDialogflowV2beta1Context]] = Field(default=None, description="The collection of output contexts. If applicable, `output_contexts.parameters` contains entries with name `.original` containing the original parameter values before the query.", alias="outputContexts")
    parameters: Optional[Dict[str, Any]] = Field(default=None, description="The collection of extracted parameters. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.")
    query_text: Optional[StrictStr] = Field(default=None, description="The original conversational query text: - If natural language text was provided as input, `query_text` contains a copy of the input. - If natural language speech audio was provided as input, `query_text` contains the speech recognition result. If speech recognizer produced multiple alternatives, a particular one is picked. - If automatic spell correction is enabled, `query_text` will contain the corrected user input.", alias="queryText")
    sentiment_analysis_result: Optional[GoogleCloudDialogflowV2beta1SentimentAnalysisResult] = Field(default=None, alias="sentimentAnalysisResult")
    speech_recognition_confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Speech recognition confidence between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. The default of 0.0 is a sentinel value indicating that confidence was not set. This field is not guaranteed to be accurate or set. In particular this field isn't set for StreamingDetectIntent since the streaming endpoint has separate confidence estimates per portion of the audio in StreamingRecognitionResult.", alias="speechRecognitionConfidence")
    webhook_payload: Optional[Dict[str, Any]] = Field(default=None, description="If the query was fulfilled by a webhook call, this field is set to the value of the `payload` field returned in the webhook response.", alias="webhookPayload")
    webhook_source: Optional[StrictStr] = Field(default=None, description="If the query was fulfilled by a webhook call, this field is set to the value of the `source` field returned in the webhook response.", alias="webhookSource")
    __properties: ClassVar[List[str]] = ["action", "allRequiredParamsPresent", "cancelsSlotFilling", "diagnosticInfo", "fulfillmentMessages", "fulfillmentText", "intent", "intentDetectionConfidence", "knowledgeAnswers", "languageCode", "outputContexts", "parameters", "queryText", "sentimentAnalysisResult", "speechRecognitionConfidence", "webhookPayload", "webhookSource"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1QueryResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fulfillment_messages (list)
        _items = []
        if self.fulfillment_messages:
            for _item_fulfillment_messages in self.fulfillment_messages:
                if _item_fulfillment_messages:
                    _items.append(_item_fulfillment_messages.to_dict())
            _dict['fulfillmentMessages'] = _items
        # override the default output from pydantic by calling `to_dict()` of intent
        if self.intent:
            _dict['intent'] = self.intent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of knowledge_answers
        if self.knowledge_answers:
            _dict['knowledgeAnswers'] = self.knowledge_answers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in output_contexts (list)
        _items = []
        if self.output_contexts:
            for _item_output_contexts in self.output_contexts:
                if _item_output_contexts:
                    _items.append(_item_output_contexts.to_dict())
            _dict['outputContexts'] = _items
        # override the default output from pydantic by calling `to_dict()` of sentiment_analysis_result
        if self.sentiment_analysis_result:
            _dict['sentimentAnalysisResult'] = self.sentiment_analysis_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1QueryResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "allRequiredParamsPresent": obj.get("allRequiredParamsPresent"),
            "cancelsSlotFilling": obj.get("cancelsSlotFilling"),
            "diagnosticInfo": obj.get("diagnosticInfo"),
            "fulfillmentMessages": [GoogleCloudDialogflowV2beta1IntentMessage.from_dict(_item) for _item in obj["fulfillmentMessages"]] if obj.get("fulfillmentMessages") is not None else None,
            "fulfillmentText": obj.get("fulfillmentText"),
            "intent": GoogleCloudDialogflowV2beta1Intent.from_dict(obj["intent"]) if obj.get("intent") is not None else None,
            "intentDetectionConfidence": obj.get("intentDetectionConfidence"),
            "knowledgeAnswers": GoogleCloudDialogflowV2beta1KnowledgeAnswers.from_dict(obj["knowledgeAnswers"]) if obj.get("knowledgeAnswers") is not None else None,
            "languageCode": obj.get("languageCode"),
            "outputContexts": [GoogleCloudDialogflowV2beta1Context.from_dict(_item) for _item in obj["outputContexts"]] if obj.get("outputContexts") is not None else None,
            "parameters": obj.get("parameters"),
            "queryText": obj.get("queryText"),
            "sentimentAnalysisResult": GoogleCloudDialogflowV2beta1SentimentAnalysisResult.from_dict(obj["sentimentAnalysisResult"]) if obj.get("sentimentAnalysisResult") is not None else None,
            "speechRecognitionConfidence": obj.get("speechRecognitionConfidence"),
            "webhookPayload": obj.get("webhookPayload"),
            "webhookSource": obj.get("webhookSource")
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3_page_info import GoogleCloudDialogflowCxV3PageInfo
from openapi_client.models.google_cloud_dialogflow_cx_v3_session_info import GoogleCloudDialogflowCxV3SessionInfo
from openapi_client.models.google_cloud_dialogflow_cx_v3_webhook_response_fulfillment_response import GoogleCloudDialogflowCxV3WebhookResponseFulfillmentResponse
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3WebhookResponse(BaseModel):
    """
    The response message for a webhook call.
    """ # noqa: E501
    fulfillment_response: Optional[GoogleCloudDialogflowCxV3WebhookResponseFulfillmentResponse] = Field(default=None, alias="fulfillmentResponse")
    page_info: Optional[GoogleCloudDialogflowCxV3PageInfo] = Field(default=None, alias="pageInfo")
    payload: Optional[Dict[str, Any]] = Field(default=None, description="Value to append directly to QueryResult.webhook_payloads.")
    session_info: Optional[GoogleCloudDialogflowCxV3SessionInfo] = Field(default=None, alias="sessionInfo")
    target_flow: Optional[StrictStr] = Field(default=None, description="The target flow to transition to. Format: `projects//locations//agents//flows/`.", alias="targetFlow")
    target_page: Optional[StrictStr] = Field(default=None, description="The target page to transition to. Format: `projects//locations//agents//flows//pages/`.", alias="targetPage")
    __properties: ClassVar[List[str]] = ["fulfillmentResponse", "pageInfo", "payload", "sessionInfo", "targetFlow", "targetPage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3WebhookResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fulfillment_response
        if self.fulfillment_response:
            _dict['fulfillmentResponse'] = self.fulfillment_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of page_info
        if self.page_info:
            _dict['pageInfo'] = self.page_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of session_info
        if self.session_info:
            _dict['sessionInfo'] = self.session_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3WebhookResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fulfillmentResponse": GoogleCloudDialogflowCxV3WebhookResponseFulfillmentResponse.from_dict(obj["fulfillmentResponse"]) if obj.get("fulfillmentResponse") is not None else None,
            "pageInfo": GoogleCloudDialogflowCxV3PageInfo.from_dict(obj["pageInfo"]) if obj.get("pageInfo") is not None else None,
            "payload": obj.get("payload"),
            "sessionInfo": GoogleCloudDialogflowCxV3SessionInfo.from_dict(obj["sessionInfo"]) if obj.get("sessionInfo") is not None else None,
            "targetFlow": obj.get("targetFlow"),
            "targetPage": obj.get("targetPage")
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2_context import GoogleCloudDialogflowV2Context
from openapi_client.models.google_cloud_dialogflow_v2_intent_followup_intent_info import GoogleCloudDialogflowV2IntentFollowupIntentInfo
from openapi_client.models.google_cloud_dialogflow_v2_intent_message import GoogleCloudDialogflowV2IntentMessage
from openapi_client.models.google_cloud_dialogflow_v2_intent_parameter import GoogleCloudDialogflowV2IntentParameter
from openapi_client.models.google_cloud_dialogflow_v2_intent_training_phrase import GoogleCloudDialogflowV2IntentTrainingPhrase
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2Intent(BaseModel):
    """
    An intent categorizes an end-user's intention for one conversation turn. For each agent, you define many intents, where your combined intents can handle a complete conversation. When an end-user writes or says something, referred to as an end-user expression or end-user input, Dialogflow matches the end-user input to the best intent in your agent. Matching an intent is also known as intent classification. For more information, see the [intent guide](https://cloud.google.com/dialogflow/docs/intents-overview).
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="Optional. The name of the action associated with the intent. Note: The action name must not contain whitespaces.")
    default_response_platforms: Optional[List[StrictStr]] = Field(default=None, description="Optional. The list of platforms for which the first responses will be copied from the messages in PLATFORM_UNSPECIFIED (i.e. default platform).", alias="defaultResponsePlatforms")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The name of this intent.", alias="displayName")
    end_interaction: Optional[StrictBool] = Field(default=None, description="Optional. Indicates that this intent ends an interaction. Some integrations (e.g., Actions on Google or Dialogflow phone gateway) use this information to close interaction with an end user. Default is false.", alias="endInteraction")
    events: Optional[List[StrictStr]] = Field(default=None, description="Optional. The collection of event names that trigger the intent. If the collection of input contexts is not empty, all of the contexts must be present in the active user session for an event to trigger this intent. Event names are limited to 150 characters.")
    followup_intent_info: Optional[List[GoogleCloudDialogflowV2IntentFollowupIntentInfo]] = Field(default=None, description="Output only. Read-only. Information about all followup intents that have this intent as a direct or indirect parent. We populate this field only in the output.", alias="followupIntentInfo")
    input_context_names: Optional[List[StrictStr]] = Field(default=None, description="Optional. The list of context names required for this intent to be triggered. Format: `projects//agent/sessions/-/contexts/`.", alias="inputContextNames")
    is_fallback: Optional[StrictBool] = Field(default=None, description="Optional. Indicates whether this is a fallback intent.", alias="isFallback")
    live_agent_handoff: Optional[StrictBool] = Field(default=None, description="Optional. Indicates that a live agent should be brought in to handle the interaction with the user. In most cases, when you set this flag to true, you would also want to set end_interaction to true as well. Default is false.", alias="liveAgentHandoff")
    messages: Optional[List[GoogleCloudDialogflowV2IntentMessage]] = Field(default=None, description="Optional. The collection of rich messages corresponding to the `Response` field in the Dialogflow console.")
    ml_disabled: Optional[StrictBool] = Field(default=None, description="Optional. Indicates whether Machine Learning is disabled for the intent. Note: If `ml_disabled` setting is set to true, then this intent is not taken into account during inference in `ML ONLY` match mode. Also, auto-markup in the UI is turned off.", alias="mlDisabled")
    name: Optional[StrictStr] = Field(default=None, description="Optional. The unique identifier of this intent. Required for Intents.UpdateIntent and Intents.BatchUpdateIntents methods. Format: `projects//agent/intents/`.")
    output_contexts: Optional[List[GoogleCloudDialogflowV2Context]] = Field(default=None, description="Optional. The collection of contexts that are activated when the intent is matched. Context messages in this collection should not set the parameters field. Setting the `lifespan_count` to 0 will reset the context when the intent is matched. Format: `projects//agent/sessions/-/contexts/`.", alias="outputContexts")
    parameters: Optional[List[GoogleCloudDialogflowV2IntentParameter]] = Field(default=None, description="Optional. The collection of parameters associated with the intent.")
    parent_followup_intent_name: Optional[StrictStr] = Field(default=None, description="Read-only after creation. The unique identifier of the parent intent in the chain of followup intents. You can set this field when creating an intent, for example with CreateIntent or BatchUpdateIntents, in order to make this intent a followup intent. It identifies the parent followup intent. Format: `projects//agent/intents/`.", alias="parentFollowupIntentName")
    priority: Optional[StrictInt] = Field(default=None, description="Optional. The priority of this intent. Higher numbers represent higher priorities. - If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the `Normal` priority in the console. - If the supplied value is negative, the intent is ignored in runtime detect intent requests.")
    reset_contexts: Optional[StrictBool] = Field(default=None, description="Optional. Indicates whether to delete all contexts in the current session when this intent is matched.", alias="resetContexts")
    root_followup_intent_name: Optional[StrictStr] = Field(default=None, description="Output only. Read-only. The unique identifier of the root intent in the chain of followup intents. It identifies the correct followup intents chain for this intent. We populate this field only in the output. Format: `projects//agent/intents/`.", alias="rootFollowupIntentName")
    training_phrases: Optional[List[GoogleCloudDialogflowV2IntentTrainingPhrase]] = Field(default=None, description="Optional. The collection of examples that the agent is trained on.", alias="trainingPhrases")
    webhook_state: Optional[StrictStr] = Field(default=None, description="Optional. Indicates whether webhooks are enabled for the intent.", alias="webhookState")
    __properties: ClassVar[List[str]] = ["action", "defaultResponsePlatforms", "displayName", "endInteraction", "events", "followupIntentInfo", "inputContextNames", "isFallback", "liveAgentHandoff", "messages", "mlDisabled", "name", "outputContexts", "parameters", "parentFollowupIntentName", "priority", "resetContexts", "rootFollowupIntentName", "trainingPhrases", "webhookState"]

    @field_validator('default_response_platforms')
    def default_response_platforms_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['PLATFORM_UNSPECIFIED', 'FACEBOOK', 'SLACK', 'TELEGRAM', 'KIK', 'SKYPE', 'LINE', 'VIBER', 'ACTIONS_ON_GOOGLE', 'GOOGLE_HANGOUTS']):
                raise ValueError("each list item must be one of ('PLATFORM_UNSPECIFIED', 'FACEBOOK', 'SLACK', 'TELEGRAM', 'KIK', 'SKYPE', 'LINE', 'VIBER', 'ACTIONS_ON_GOOGLE', 'GOOGLE_HANGOUTS')")
        return value

    @field_validator('webhook_state')
    def webhook_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WEBHOOK_STATE_UNSPECIFIED', 'WEBHOOK_STATE_ENABLED', 'WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING']):
            raise ValueError("must be one of enum values ('WEBHOOK_STATE_UNSPECIFIED', 'WEBHOOK_STATE_ENABLED', 'WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2Intent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "followup_intent_info",
            "root_followup_intent_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in followup_intent_info (list)
        _items = []
        if self.followup_intent_info:
            for _item_followup_intent_info in self.followup_intent_info:
                if _item_followup_intent_info:
                    _items.append(_item_followup_intent_info.to_dict())
            _dict['followupIntentInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in output_contexts (list)
        _items = []
        if self.output_contexts:
            for _item_output_contexts in self.output_contexts:
                if _item_output_contexts:
                    _items.append(_item_output_contexts.to_dict())
            _dict['outputContexts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in training_phrases (list)
        _items = []
        if self.training_phrases:
            for _item_training_phrases in self.training_phrases:
                if _item_training_phrases:
                    _items.append(_item_training_phrases.to_dict())
            _dict['trainingPhrases'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2Intent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "defaultResponsePlatforms": obj.get("defaultResponsePlatforms"),
            "displayName": obj.get("displayName"),
            "endInteraction": obj.get("endInteraction"),
            "events": obj.get("events"),
            "followupIntentInfo": [GoogleCloudDialogflowV2IntentFollowupIntentInfo.from_dict(_item) for _item in obj["followupIntentInfo"]] if obj.get("followupIntentInfo") is not None else None,
            "inputContextNames": obj.get("inputContextNames"),
            "isFallback": obj.get("isFallback"),
            "liveAgentHandoff": obj.get("liveAgentHandoff"),
            "messages": [GoogleCloudDialogflowV2IntentMessage.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "mlDisabled": obj.get("mlDisabled"),
            "name": obj.get("name"),
            "outputContexts": [GoogleCloudDialogflowV2Context.from_dict(_item) for _item in obj["outputContexts"]] if obj.get("outputContexts") is not None else None,
            "parameters": [GoogleCloudDialogflowV2IntentParameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "parentFollowupIntentName": obj.get("parentFollowupIntentName"),
            "priority": obj.get("priority"),
            "resetContexts": obj.get("resetContexts"),
            "rootFollowupIntentName": obj.get("rootFollowupIntentName"),
            "trainingPhrases": [GoogleCloudDialogflowV2IntentTrainingPhrase.from_dict(_item) for _item in obj["trainingPhrases"]] if obj.get("trainingPhrases") is not None else None,
            "webhookState": obj.get("webhookState")
        })
        return _obj



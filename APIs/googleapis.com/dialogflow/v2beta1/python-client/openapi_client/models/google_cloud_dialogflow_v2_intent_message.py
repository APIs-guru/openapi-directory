# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2_intent_message_basic_card import GoogleCloudDialogflowV2IntentMessageBasicCard
from openapi_client.models.google_cloud_dialogflow_v2_intent_message_browse_carousel_card import GoogleCloudDialogflowV2IntentMessageBrowseCarouselCard
from openapi_client.models.google_cloud_dialogflow_v2_intent_message_card import GoogleCloudDialogflowV2IntentMessageCard
from openapi_client.models.google_cloud_dialogflow_v2_intent_message_carousel_select import GoogleCloudDialogflowV2IntentMessageCarouselSelect
from openapi_client.models.google_cloud_dialogflow_v2_intent_message_image import GoogleCloudDialogflowV2IntentMessageImage
from openapi_client.models.google_cloud_dialogflow_v2_intent_message_link_out_suggestion import GoogleCloudDialogflowV2IntentMessageLinkOutSuggestion
from openapi_client.models.google_cloud_dialogflow_v2_intent_message_list_select import GoogleCloudDialogflowV2IntentMessageListSelect
from openapi_client.models.google_cloud_dialogflow_v2_intent_message_media_content import GoogleCloudDialogflowV2IntentMessageMediaContent
from openapi_client.models.google_cloud_dialogflow_v2_intent_message_quick_replies import GoogleCloudDialogflowV2IntentMessageQuickReplies
from openapi_client.models.google_cloud_dialogflow_v2_intent_message_simple_responses import GoogleCloudDialogflowV2IntentMessageSimpleResponses
from openapi_client.models.google_cloud_dialogflow_v2_intent_message_suggestions import GoogleCloudDialogflowV2IntentMessageSuggestions
from openapi_client.models.google_cloud_dialogflow_v2_intent_message_table_card import GoogleCloudDialogflowV2IntentMessageTableCard
from openapi_client.models.google_cloud_dialogflow_v2_intent_message_text import GoogleCloudDialogflowV2IntentMessageText
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2IntentMessage(BaseModel):
    """
    A rich response message. Corresponds to the intent `Response` field in the Dialogflow console. For more information, see [Rich response messages](https://cloud.google.com/dialogflow/docs/intents-rich-messages).
    """ # noqa: E501
    basic_card: Optional[GoogleCloudDialogflowV2IntentMessageBasicCard] = Field(default=None, alias="basicCard")
    browse_carousel_card: Optional[GoogleCloudDialogflowV2IntentMessageBrowseCarouselCard] = Field(default=None, alias="browseCarouselCard")
    card: Optional[GoogleCloudDialogflowV2IntentMessageCard] = None
    carousel_select: Optional[GoogleCloudDialogflowV2IntentMessageCarouselSelect] = Field(default=None, alias="carouselSelect")
    image: Optional[GoogleCloudDialogflowV2IntentMessageImage] = None
    link_out_suggestion: Optional[GoogleCloudDialogflowV2IntentMessageLinkOutSuggestion] = Field(default=None, alias="linkOutSuggestion")
    list_select: Optional[GoogleCloudDialogflowV2IntentMessageListSelect] = Field(default=None, alias="listSelect")
    media_content: Optional[GoogleCloudDialogflowV2IntentMessageMediaContent] = Field(default=None, alias="mediaContent")
    payload: Optional[Dict[str, Any]] = Field(default=None, description="A custom platform-specific response.")
    platform: Optional[StrictStr] = Field(default=None, description="Optional. The platform that this message is intended for.")
    quick_replies: Optional[GoogleCloudDialogflowV2IntentMessageQuickReplies] = Field(default=None, alias="quickReplies")
    simple_responses: Optional[GoogleCloudDialogflowV2IntentMessageSimpleResponses] = Field(default=None, alias="simpleResponses")
    suggestions: Optional[GoogleCloudDialogflowV2IntentMessageSuggestions] = None
    table_card: Optional[GoogleCloudDialogflowV2IntentMessageTableCard] = Field(default=None, alias="tableCard")
    text: Optional[GoogleCloudDialogflowV2IntentMessageText] = None
    __properties: ClassVar[List[str]] = ["basicCard", "browseCarouselCard", "card", "carouselSelect", "image", "linkOutSuggestion", "listSelect", "mediaContent", "payload", "platform", "quickReplies", "simpleResponses", "suggestions", "tableCard", "text"]

    @field_validator('platform')
    def platform_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLATFORM_UNSPECIFIED', 'FACEBOOK', 'SLACK', 'TELEGRAM', 'KIK', 'SKYPE', 'LINE', 'VIBER', 'ACTIONS_ON_GOOGLE', 'GOOGLE_HANGOUTS']):
            raise ValueError("must be one of enum values ('PLATFORM_UNSPECIFIED', 'FACEBOOK', 'SLACK', 'TELEGRAM', 'KIK', 'SKYPE', 'LINE', 'VIBER', 'ACTIONS_ON_GOOGLE', 'GOOGLE_HANGOUTS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2IntentMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of basic_card
        if self.basic_card:
            _dict['basicCard'] = self.basic_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of browse_carousel_card
        if self.browse_carousel_card:
            _dict['browseCarouselCard'] = self.browse_carousel_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of carousel_select
        if self.carousel_select:
            _dict['carouselSelect'] = self.carousel_select.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of link_out_suggestion
        if self.link_out_suggestion:
            _dict['linkOutSuggestion'] = self.link_out_suggestion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of list_select
        if self.list_select:
            _dict['listSelect'] = self.list_select.to_dict()
        # override the default output from pydantic by calling `to_dict()` of media_content
        if self.media_content:
            _dict['mediaContent'] = self.media_content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quick_replies
        if self.quick_replies:
            _dict['quickReplies'] = self.quick_replies.to_dict()
        # override the default output from pydantic by calling `to_dict()` of simple_responses
        if self.simple_responses:
            _dict['simpleResponses'] = self.simple_responses.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suggestions
        if self.suggestions:
            _dict['suggestions'] = self.suggestions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of table_card
        if self.table_card:
            _dict['tableCard'] = self.table_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text
        if self.text:
            _dict['text'] = self.text.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2IntentMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "basicCard": GoogleCloudDialogflowV2IntentMessageBasicCard.from_dict(obj["basicCard"]) if obj.get("basicCard") is not None else None,
            "browseCarouselCard": GoogleCloudDialogflowV2IntentMessageBrowseCarouselCard.from_dict(obj["browseCarouselCard"]) if obj.get("browseCarouselCard") is not None else None,
            "card": GoogleCloudDialogflowV2IntentMessageCard.from_dict(obj["card"]) if obj.get("card") is not None else None,
            "carouselSelect": GoogleCloudDialogflowV2IntentMessageCarouselSelect.from_dict(obj["carouselSelect"]) if obj.get("carouselSelect") is not None else None,
            "image": GoogleCloudDialogflowV2IntentMessageImage.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "linkOutSuggestion": GoogleCloudDialogflowV2IntentMessageLinkOutSuggestion.from_dict(obj["linkOutSuggestion"]) if obj.get("linkOutSuggestion") is not None else None,
            "listSelect": GoogleCloudDialogflowV2IntentMessageListSelect.from_dict(obj["listSelect"]) if obj.get("listSelect") is not None else None,
            "mediaContent": GoogleCloudDialogflowV2IntentMessageMediaContent.from_dict(obj["mediaContent"]) if obj.get("mediaContent") is not None else None,
            "payload": obj.get("payload"),
            "platform": obj.get("platform"),
            "quickReplies": GoogleCloudDialogflowV2IntentMessageQuickReplies.from_dict(obj["quickReplies"]) if obj.get("quickReplies") is not None else None,
            "simpleResponses": GoogleCloudDialogflowV2IntentMessageSimpleResponses.from_dict(obj["simpleResponses"]) if obj.get("simpleResponses") is not None else None,
            "suggestions": GoogleCloudDialogflowV2IntentMessageSuggestions.from_dict(obj["suggestions"]) if obj.get("suggestions") is not None else None,
            "tableCard": GoogleCloudDialogflowV2IntentMessageTableCard.from_dict(obj["tableCard"]) if obj.get("tableCard") is not None else None,
            "text": GoogleCloudDialogflowV2IntentMessageText.from_dict(obj["text"]) if obj.get("text") is not None else None
        })
        return _obj



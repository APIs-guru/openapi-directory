# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2beta1_intent_suggestion import GoogleCloudDialogflowV2beta1IntentSuggestion
from openapi_client.models.google_cloud_dialogflow_v2beta1_query_result import GoogleCloudDialogflowV2beta1QueryResult
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1DialogflowAssistAnswer(BaseModel):
    """
    Represents a Dialogflow assist answer.
    """ # noqa: E501
    answer_record: Optional[StrictStr] = Field(default=None, description="The name of answer record, in the format of \"projects//locations//answerRecords/\"", alias="answerRecord")
    intent_suggestion: Optional[GoogleCloudDialogflowV2beta1IntentSuggestion] = Field(default=None, alias="intentSuggestion")
    query_result: Optional[GoogleCloudDialogflowV2beta1QueryResult] = Field(default=None, alias="queryResult")
    __properties: ClassVar[List[str]] = ["answerRecord", "intentSuggestion", "queryResult"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1DialogflowAssistAnswer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of intent_suggestion
        if self.intent_suggestion:
            _dict['intentSuggestion'] = self.intent_suggestion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query_result
        if self.query_result:
            _dict['queryResult'] = self.query_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1DialogflowAssistAnswer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "answerRecord": obj.get("answerRecord"),
            "intentSuggestion": GoogleCloudDialogflowV2beta1IntentSuggestion.from_dict(obj["intentSuggestion"]) if obj.get("intentSuggestion") is not None else None,
            "queryResult": GoogleCloudDialogflowV2beta1QueryResult.from_dict(obj["queryResult"]) if obj.get("queryResult") is not None else None
        })
        return _obj



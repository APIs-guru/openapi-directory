# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2beta1_article_answer import GoogleCloudDialogflowV2beta1ArticleAnswer
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1SuggestArticlesResponse(BaseModel):
    """
    The response message for Participants.SuggestArticles.
    """ # noqa: E501
    article_answers: Optional[List[GoogleCloudDialogflowV2beta1ArticleAnswer]] = Field(default=None, description="Output only. Articles ordered by score in descending order.", alias="articleAnswers")
    context_size: Optional[StrictInt] = Field(default=None, description="Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestArticlesResponse.context_size field in the request if there aren't that many messages in the conversation.", alias="contextSize")
    latest_message: Optional[StrictStr] = Field(default=None, description="The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`.", alias="latestMessage")
    __properties: ClassVar[List[str]] = ["articleAnswers", "contextSize", "latestMessage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1SuggestArticlesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in article_answers (list)
        _items = []
        if self.article_answers:
            for _item_article_answers in self.article_answers:
                if _item_article_answers:
                    _items.append(_item_article_answers.to_dict())
            _dict['articleAnswers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1SuggestArticlesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "articleAnswers": [GoogleCloudDialogflowV2beta1ArticleAnswer.from_dict(_item) for _item in obj["articleAnswers"]] if obj.get("articleAnswers") is not None else None,
            "contextSize": obj.get("contextSize"),
            "latestMessage": obj.get("latestMessage")
        })
        return _obj



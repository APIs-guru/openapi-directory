# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1Agent(BaseModel):
    """
    A Dialogflow agent is a virtual agent that handles conversations with your end-users. It is a natural language understanding module that understands the nuances of human language. Dialogflow translates end-user text or audio during a conversation to structured data that your apps and services can understand. You design and build a Dialogflow agent to handle the types of conversations required for your system. For more information about agents, see the [Agent guide](https://cloud.google.com/dialogflow/docs/agents-overview). 
    """ # noqa: E501
    api_version: Optional[StrictStr] = Field(default=None, description="Optional. API version displayed in Dialogflow console. If not specified, V2 API is assumed. Clients are free to query different service endpoints for different API versions. However, bots connectors and webhook calls will follow the specified API version.", alias="apiVersion")
    avatar_uri: Optional[StrictStr] = Field(default=None, description="Optional. The URI of the agent's avatar. Avatars are used throughout the Dialogflow console and in the self-hosted [Web Demo](https://cloud.google.com/dialogflow/docs/integrations/web-demo) integration.", alias="avatarUri")
    classification_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold. If the returned score value is less than the threshold value, then a fallback intent will be triggered or, if there are no fallback intents defined, no intent will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.", alias="classificationThreshold")
    default_language_code: Optional[StrictStr] = Field(default=None, description="Required. The default language of the agent as a language tag. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. This field cannot be set by the `Update` method.", alias="defaultLanguageCode")
    description: Optional[StrictStr] = Field(default=None, description="Optional. The description of this agent. The maximum length is 500 characters. If exceeded, the request is rejected.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The name of this agent.", alias="displayName")
    enable_logging: Optional[StrictBool] = Field(default=None, description="Optional. Determines whether this agent should log conversation queries.", alias="enableLogging")
    match_mode: Optional[StrictStr] = Field(default=None, description="Optional. Determines how intents are detected from user queries.", alias="matchMode")
    parent: Optional[StrictStr] = Field(default=None, description="Required. The project of this agent. Format: `projects/` or `projects//locations/`")
    supported_language_codes: Optional[List[StrictStr]] = Field(default=None, description="Optional. The list of all languages supported by this agent (except for the `default_language_code`).", alias="supportedLanguageCodes")
    tier: Optional[StrictStr] = Field(default=None, description="Optional. The agent tier. If not specified, TIER_STANDARD is assumed.")
    time_zone: Optional[StrictStr] = Field(default=None, description="Required. The time zone of this agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris.", alias="timeZone")
    __properties: ClassVar[List[str]] = ["apiVersion", "avatarUri", "classificationThreshold", "defaultLanguageCode", "description", "displayName", "enableLogging", "matchMode", "parent", "supportedLanguageCodes", "tier", "timeZone"]

    @field_validator('api_version')
    def api_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['API_VERSION_UNSPECIFIED', 'API_VERSION_V1', 'API_VERSION_V2', 'API_VERSION_V2_BETA_1']):
            raise ValueError("must be one of enum values ('API_VERSION_UNSPECIFIED', 'API_VERSION_V1', 'API_VERSION_V2', 'API_VERSION_V2_BETA_1')")
        return value

    @field_validator('match_mode')
    def match_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MATCH_MODE_UNSPECIFIED', 'MATCH_MODE_HYBRID', 'MATCH_MODE_ML_ONLY']):
            raise ValueError("must be one of enum values ('MATCH_MODE_UNSPECIFIED', 'MATCH_MODE_HYBRID', 'MATCH_MODE_ML_ONLY')")
        return value

    @field_validator('tier')
    def tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TIER_UNSPECIFIED', 'TIER_STANDARD', 'TIER_ENTERPRISE', 'TIER_ENTERPRISE_PLUS']):
            raise ValueError("must be one of enum values ('TIER_UNSPECIFIED', 'TIER_STANDARD', 'TIER_ENTERPRISE', 'TIER_ENTERPRISE_PLUS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1Agent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1Agent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiVersion": obj.get("apiVersion"),
            "avatarUri": obj.get("avatarUri"),
            "classificationThreshold": obj.get("classificationThreshold"),
            "defaultLanguageCode": obj.get("defaultLanguageCode"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "enableLogging": obj.get("enableLogging"),
            "matchMode": obj.get("matchMode"),
            "parent": obj.get("parent"),
            "supportedLanguageCodes": obj.get("supportedLanguageCodes"),
            "tier": obj.get("tier"),
            "timeZone": obj.get("timeZone")
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2beta1_assist_query_parameters import GoogleCloudDialogflowV2beta1AssistQueryParameters
from openapi_client.models.google_cloud_dialogflow_v2beta1_audio_input import GoogleCloudDialogflowV2beta1AudioInput
from openapi_client.models.google_cloud_dialogflow_v2beta1_event_input import GoogleCloudDialogflowV2beta1EventInput
from openapi_client.models.google_cloud_dialogflow_v2beta1_intent_input import GoogleCloudDialogflowV2beta1IntentInput
from openapi_client.models.google_cloud_dialogflow_v2beta1_output_audio_config import GoogleCloudDialogflowV2beta1OutputAudioConfig
from openapi_client.models.google_cloud_dialogflow_v2beta1_query_parameters import GoogleCloudDialogflowV2beta1QueryParameters
from openapi_client.models.google_cloud_dialogflow_v2beta1_suggestion_input import GoogleCloudDialogflowV2beta1SuggestionInput
from openapi_client.models.google_cloud_dialogflow_v2beta1_text_input import GoogleCloudDialogflowV2beta1TextInput
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1AnalyzeContentRequest(BaseModel):
    """
    The request message for Participants.AnalyzeContent.
    """ # noqa: E501
    assist_query_params: Optional[GoogleCloudDialogflowV2beta1AssistQueryParameters] = Field(default=None, alias="assistQueryParams")
    audio_input: Optional[GoogleCloudDialogflowV2beta1AudioInput] = Field(default=None, alias="audioInput")
    cx_current_page: Optional[StrictStr] = Field(default=None, description="The unique identifier of the CX page to override the `current_page` in the session. Format: `projects//locations//agents//flows//pages/`. If `cx_current_page` is specified, the previous state of the session will be ignored by Dialogflow CX, including the previous page and the previous session parameters. In most cases, `cx_current_page` and `cx_parameters` should be configured together to direct a session to a specific state. Note: this field should only be used if you are connecting to a Dialogflow CX agent.", alias="cxCurrentPage")
    cx_parameters: Optional[Dict[str, Any]] = Field(default=None, description="Additional parameters to be put into Dialogflow CX session parameters. To remove a parameter from the session, clients should explicitly set the parameter value to null. Note: this field should only be used if you are connecting to a Dialogflow CX agent.", alias="cxParameters")
    event_input: Optional[GoogleCloudDialogflowV2beta1EventInput] = Field(default=None, alias="eventInput")
    intent_input: Optional[GoogleCloudDialogflowV2beta1IntentInput] = Field(default=None, alias="intentInput")
    message_send_time: Optional[StrictStr] = Field(default=None, description="Optional. The send time of the message from end user or human agent's perspective. It is used for identifying the same message under one participant. Given two messages under the same participant: * If send time are different regardless of whether the content of the messages are exactly the same, the conversation will regard them as two distinct messages sent by the participant. * If send time is the same regardless of whether the content of the messages are exactly the same, the conversation will regard them as same message, and ignore the message received later. If the value is not provided, a new request will always be regarded as a new message without any de-duplication.", alias="messageSendTime")
    var_query_params: Optional[GoogleCloudDialogflowV2beta1QueryParameters] = Field(default=None, alias="queryParams")
    reply_audio_config: Optional[GoogleCloudDialogflowV2beta1OutputAudioConfig] = Field(default=None, alias="replyAudioConfig")
    request_id: Optional[StrictStr] = Field(default=None, description="A unique identifier for this request. Restricted to 36 ASCII characters. A random UUID is recommended. This request is only idempotent if a `request_id` is provided.", alias="requestId")
    suggestion_input: Optional[GoogleCloudDialogflowV2beta1SuggestionInput] = Field(default=None, alias="suggestionInput")
    text_input: Optional[GoogleCloudDialogflowV2beta1TextInput] = Field(default=None, alias="textInput")
    __properties: ClassVar[List[str]] = ["assistQueryParams", "audioInput", "cxCurrentPage", "cxParameters", "eventInput", "intentInput", "messageSendTime", "queryParams", "replyAudioConfig", "requestId", "suggestionInput", "textInput"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1AnalyzeContentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of assist_query_params
        if self.assist_query_params:
            _dict['assistQueryParams'] = self.assist_query_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of audio_input
        if self.audio_input:
            _dict['audioInput'] = self.audio_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_input
        if self.event_input:
            _dict['eventInput'] = self.event_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of intent_input
        if self.intent_input:
            _dict['intentInput'] = self.intent_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_query_params
        if self.var_query_params:
            _dict['queryParams'] = self.var_query_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reply_audio_config
        if self.reply_audio_config:
            _dict['replyAudioConfig'] = self.reply_audio_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suggestion_input
        if self.suggestion_input:
            _dict['suggestionInput'] = self.suggestion_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_input
        if self.text_input:
            _dict['textInput'] = self.text_input.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1AnalyzeContentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assistQueryParams": GoogleCloudDialogflowV2beta1AssistQueryParameters.from_dict(obj["assistQueryParams"]) if obj.get("assistQueryParams") is not None else None,
            "audioInput": GoogleCloudDialogflowV2beta1AudioInput.from_dict(obj["audioInput"]) if obj.get("audioInput") is not None else None,
            "cxCurrentPage": obj.get("cxCurrentPage"),
            "cxParameters": obj.get("cxParameters"),
            "eventInput": GoogleCloudDialogflowV2beta1EventInput.from_dict(obj["eventInput"]) if obj.get("eventInput") is not None else None,
            "intentInput": GoogleCloudDialogflowV2beta1IntentInput.from_dict(obj["intentInput"]) if obj.get("intentInput") is not None else None,
            "messageSendTime": obj.get("messageSendTime"),
            "queryParams": GoogleCloudDialogflowV2beta1QueryParameters.from_dict(obj["queryParams"]) if obj.get("queryParams") is not None else None,
            "replyAudioConfig": GoogleCloudDialogflowV2beta1OutputAudioConfig.from_dict(obj["replyAudioConfig"]) if obj.get("replyAudioConfig") is not None else None,
            "requestId": obj.get("requestId"),
            "suggestionInput": GoogleCloudDialogflowV2beta1SuggestionInput.from_dict(obj["suggestionInput"]) if obj.get("suggestionInput") is not None else None,
            "textInput": GoogleCloudDialogflowV2beta1TextInput.from_dict(obj["textInput"]) if obj.get("textInput") is not None else None
        })
        return _obj



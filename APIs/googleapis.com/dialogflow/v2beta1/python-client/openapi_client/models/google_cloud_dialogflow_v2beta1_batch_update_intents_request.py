# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2beta1_intent_batch import GoogleCloudDialogflowV2beta1IntentBatch
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1BatchUpdateIntentsRequest(BaseModel):
    """
    The request message for Intents.BatchUpdateIntents.
    """ # noqa: E501
    intent_batch_inline: Optional[GoogleCloudDialogflowV2beta1IntentBatch] = Field(default=None, alias="intentBatchInline")
    intent_batch_uri: Optional[StrictStr] = Field(default=None, description="The URI to a Google Cloud Storage file containing intents to update or create. The file format can either be a serialized proto (of IntentBatch type) or JSON object. Note: The URI must start with \"gs://\".", alias="intentBatchUri")
    intent_view: Optional[StrictStr] = Field(default=None, description="Optional. The resource view to apply to the returned intent.", alias="intentView")
    language_code: Optional[StrictStr] = Field(default=None, description="Optional. The language used to access language-specific data. If not specified, the agent's default language is used. For more information, see [Multilingual intent and entity data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).", alias="languageCode")
    update_mask: Optional[StrictStr] = Field(default=None, description="Optional. The mask to control which fields get updated.", alias="updateMask")
    __properties: ClassVar[List[str]] = ["intentBatchInline", "intentBatchUri", "intentView", "languageCode", "updateMask"]

    @field_validator('intent_view')
    def intent_view_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INTENT_VIEW_UNSPECIFIED', 'INTENT_VIEW_FULL']):
            raise ValueError("must be one of enum values ('INTENT_VIEW_UNSPECIFIED', 'INTENT_VIEW_FULL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1BatchUpdateIntentsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of intent_batch_inline
        if self.intent_batch_inline:
            _dict['intentBatchInline'] = self.intent_batch_inline.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1BatchUpdateIntentsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "intentBatchInline": GoogleCloudDialogflowV2beta1IntentBatch.from_dict(obj["intentBatchInline"]) if obj.get("intentBatchInline") is not None else None,
            "intentBatchUri": obj.get("intentBatchUri"),
            "intentView": obj.get("intentView"),
            "languageCode": obj.get("languageCode"),
            "updateMask": obj.get("updateMask")
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2beta1_suggest_articles_response import GoogleCloudDialogflowV2beta1SuggestArticlesResponse
from openapi_client.models.google_cloud_dialogflow_v2beta1_suggest_dialogflow_assists_response import GoogleCloudDialogflowV2beta1SuggestDialogflowAssistsResponse
from openapi_client.models.google_cloud_dialogflow_v2beta1_suggest_faq_answers_response import GoogleCloudDialogflowV2beta1SuggestFaqAnswersResponse
from openapi_client.models.google_cloud_dialogflow_v2beta1_suggest_smart_replies_response import GoogleCloudDialogflowV2beta1SuggestSmartRepliesResponse
from openapi_client.models.google_rpc_status import GoogleRpcStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1SuggestionResult(BaseModel):
    """
    One response of different type of suggestion response which is used in the response of Participants.AnalyzeContent and Participants.AnalyzeContent, as well as HumanAgentAssistantEvent.
    """ # noqa: E501
    error: Optional[GoogleRpcStatus] = None
    suggest_articles_response: Optional[GoogleCloudDialogflowV2beta1SuggestArticlesResponse] = Field(default=None, alias="suggestArticlesResponse")
    suggest_dialogflow_assists_response: Optional[GoogleCloudDialogflowV2beta1SuggestDialogflowAssistsResponse] = Field(default=None, alias="suggestDialogflowAssistsResponse")
    suggest_entity_extraction_response: Optional[GoogleCloudDialogflowV2beta1SuggestDialogflowAssistsResponse] = Field(default=None, alias="suggestEntityExtractionResponse")
    suggest_faq_answers_response: Optional[GoogleCloudDialogflowV2beta1SuggestFaqAnswersResponse] = Field(default=None, alias="suggestFaqAnswersResponse")
    suggest_smart_replies_response: Optional[GoogleCloudDialogflowV2beta1SuggestSmartRepliesResponse] = Field(default=None, alias="suggestSmartRepliesResponse")
    __properties: ClassVar[List[str]] = ["error", "suggestArticlesResponse", "suggestDialogflowAssistsResponse", "suggestEntityExtractionResponse", "suggestFaqAnswersResponse", "suggestSmartRepliesResponse"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1SuggestionResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suggest_articles_response
        if self.suggest_articles_response:
            _dict['suggestArticlesResponse'] = self.suggest_articles_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suggest_dialogflow_assists_response
        if self.suggest_dialogflow_assists_response:
            _dict['suggestDialogflowAssistsResponse'] = self.suggest_dialogflow_assists_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suggest_entity_extraction_response
        if self.suggest_entity_extraction_response:
            _dict['suggestEntityExtractionResponse'] = self.suggest_entity_extraction_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suggest_faq_answers_response
        if self.suggest_faq_answers_response:
            _dict['suggestFaqAnswersResponse'] = self.suggest_faq_answers_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suggest_smart_replies_response
        if self.suggest_smart_replies_response:
            _dict['suggestSmartRepliesResponse'] = self.suggest_smart_replies_response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1SuggestionResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "error": GoogleRpcStatus.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "suggestArticlesResponse": GoogleCloudDialogflowV2beta1SuggestArticlesResponse.from_dict(obj["suggestArticlesResponse"]) if obj.get("suggestArticlesResponse") is not None else None,
            "suggestDialogflowAssistsResponse": GoogleCloudDialogflowV2beta1SuggestDialogflowAssistsResponse.from_dict(obj["suggestDialogflowAssistsResponse"]) if obj.get("suggestDialogflowAssistsResponse") is not None else None,
            "suggestEntityExtractionResponse": GoogleCloudDialogflowV2beta1SuggestDialogflowAssistsResponse.from_dict(obj["suggestEntityExtractionResponse"]) if obj.get("suggestEntityExtractionResponse") is not None else None,
            "suggestFaqAnswersResponse": GoogleCloudDialogflowV2beta1SuggestFaqAnswersResponse.from_dict(obj["suggestFaqAnswersResponse"]) if obj.get("suggestFaqAnswersResponse") is not None else None,
            "suggestSmartRepliesResponse": GoogleCloudDialogflowV2beta1SuggestSmartRepliesResponse.from_dict(obj["suggestSmartRepliesResponse"]) if obj.get("suggestSmartRepliesResponse") is not None else None
        })
        return _obj



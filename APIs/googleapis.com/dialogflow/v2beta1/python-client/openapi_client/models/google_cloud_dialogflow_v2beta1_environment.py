# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2beta1_fulfillment import GoogleCloudDialogflowV2beta1Fulfillment
from openapi_client.models.google_cloud_dialogflow_v2beta1_text_to_speech_settings import GoogleCloudDialogflowV2beta1TextToSpeechSettings
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1Environment(BaseModel):
    """
    You can create multiple versions of your agent and publish them to separate environments. When you edit an agent, you are editing the draft agent. At any point, you can save the draft agent as an agent version, which is an immutable snapshot of your agent. When you save the draft agent, it is published to the default environment. When you create agent versions, you can publish them to custom environments. You can create a variety of custom environments for: - testing - development - production - etc. For more information, see the [versions and environments guide](https://cloud.google.com/dialogflow/docs/agents-versions).
    """ # noqa: E501
    agent_version: Optional[StrictStr] = Field(default=None, description="Optional. The agent version loaded into this environment. Supported formats: - `projects//agent/versions/` - `projects//locations//agent/versions/`", alias="agentVersion")
    description: Optional[StrictStr] = Field(default=None, description="Optional. The developer-provided description for this environment. The maximum length is 500 characters. If exceeded, the request is rejected.")
    fulfillment: Optional[GoogleCloudDialogflowV2beta1Fulfillment] = None
    name: Optional[StrictStr] = Field(default=None, description="Output only. The unique identifier of this agent environment. Supported formats: - `projects//agent/environments/` - `projects//locations//agent/environments/`")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of this environment. This field is read-only, i.e., it cannot be set by create and update methods.")
    text_to_speech_settings: Optional[GoogleCloudDialogflowV2beta1TextToSpeechSettings] = Field(default=None, alias="textToSpeechSettings")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last update time of this environment. This field is read-only, i.e., it cannot be set by create and update methods.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["agentVersion", "description", "fulfillment", "name", "state", "textToSpeechSettings", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'STOPPED', 'LOADING', 'RUNNING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'STOPPED', 'LOADING', 'RUNNING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1Environment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fulfillment
        if self.fulfillment:
            _dict['fulfillment'] = self.fulfillment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_to_speech_settings
        if self.text_to_speech_settings:
            _dict['textToSpeechSettings'] = self.text_to_speech_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1Environment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentVersion": obj.get("agentVersion"),
            "description": obj.get("description"),
            "fulfillment": GoogleCloudDialogflowV2beta1Fulfillment.from_dict(obj["fulfillment"]) if obj.get("fulfillment") is not None else None,
            "name": obj.get("name"),
            "state": obj.get("state"),
            "textToSpeechSettings": GoogleCloudDialogflowV2beta1TextToSpeechSettings.from_dict(obj["textToSpeechSettings"]) if obj.get("textToSpeechSettings") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2beta1_intent_message_rbm_suggested_action_rbm_suggested_action_dial import GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionDial
from openapi_client.models.google_cloud_dialogflow_v2beta1_intent_message_rbm_suggested_action_rbm_suggested_action_open_uri import GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionOpenUri
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedAction(BaseModel):
    """
    Rich Business Messaging (RBM) suggested client-side action that the user can choose from the card.
    """ # noqa: E501
    dial: Optional[GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionDial] = None
    open_url: Optional[GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionOpenUri] = Field(default=None, alias="openUrl")
    postback_data: Optional[StrictStr] = Field(default=None, description="Opaque payload that the Dialogflow receives in a user event when the user taps the suggested action. This data will be also forwarded to webhook to allow performing custom business logic.", alias="postbackData")
    share_location: Optional[Dict[str, Any]] = Field(default=None, description="Opens the device's location chooser so the user can pick a location to send back to the agent.", alias="shareLocation")
    text: Optional[StrictStr] = Field(default=None, description="Text to display alongside the action.")
    __properties: ClassVar[List[str]] = ["dial", "openUrl", "postbackData", "shareLocation", "text"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dial
        if self.dial:
            _dict['dial'] = self.dial.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_url
        if self.open_url:
            _dict['openUrl'] = self.open_url.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dial": GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionDial.from_dict(obj["dial"]) if obj.get("dial") is not None else None,
            "openUrl": GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionOpenUri.from_dict(obj["openUrl"]) if obj.get("openUrl") is not None else None,
            "postbackData": obj.get("postbackData"),
            "shareLocation": obj.get("shareLocation"),
            "text": obj.get("text")
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2beta1_gcs_sources import GoogleCloudDialogflowV2beta1GcsSources
from openapi_client.models.google_cloud_dialogflow_v2beta1_import_document_template import GoogleCloudDialogflowV2beta1ImportDocumentTemplate
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1ImportDocumentsRequest(BaseModel):
    """
    Request message for Documents.ImportDocuments.
    """ # noqa: E501
    document_template: Optional[GoogleCloudDialogflowV2beta1ImportDocumentTemplate] = Field(default=None, alias="documentTemplate")
    gcs_source: Optional[GoogleCloudDialogflowV2beta1GcsSources] = Field(default=None, alias="gcsSource")
    import_gcs_custom_metadata: Optional[StrictBool] = Field(default=None, description="Whether to import custom metadata from Google Cloud Storage. Only valid when the document source is Google Cloud Storage URI.", alias="importGcsCustomMetadata")
    __properties: ClassVar[List[str]] = ["documentTemplate", "gcsSource", "importGcsCustomMetadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1ImportDocumentsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of document_template
        if self.document_template:
            _dict['documentTemplate'] = self.document_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcs_source
        if self.gcs_source:
            _dict['gcsSource'] = self.gcs_source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1ImportDocumentsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "documentTemplate": GoogleCloudDialogflowV2beta1ImportDocumentTemplate.from_dict(obj["documentTemplate"]) if obj.get("documentTemplate") is not None else None,
            "gcsSource": GoogleCloudDialogflowV2beta1GcsSources.from_dict(obj["gcsSource"]) if obj.get("gcsSource") is not None else None,
            "importGcsCustomMetadata": obj.get("importGcsCustomMetadata")
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_advanced_settings import GoogleCloudDialogflowCxV3beta1AdvancedSettings
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_form_parameter_fill_behavior import GoogleCloudDialogflowCxV3beta1FormParameterFillBehavior
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3beta1FormParameter(BaseModel):
    """
    Represents a form parameter.
    """ # noqa: E501
    advanced_settings: Optional[GoogleCloudDialogflowCxV3beta1AdvancedSettings] = Field(default=None, alias="advancedSettings")
    default_value: Optional[Any] = Field(default=None, description="The default value of an optional parameter. If the parameter is required, the default value will be ignored.", alias="defaultValue")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The human-readable name of the parameter, unique within the form.", alias="displayName")
    entity_type: Optional[StrictStr] = Field(default=None, description="Required. The entity type of the parameter. Format: `projects/-/locations/-/agents/-/entityTypes/` for system entity types (for example, `projects/-/locations/-/agents/-/entityTypes/sys.date`), or `projects//locations//agents//entityTypes/` for developer entity types.", alias="entityType")
    fill_behavior: Optional[GoogleCloudDialogflowCxV3beta1FormParameterFillBehavior] = Field(default=None, alias="fillBehavior")
    is_list: Optional[StrictBool] = Field(default=None, description="Indicates whether the parameter represents a list of values.", alias="isList")
    redact: Optional[StrictBool] = Field(default=None, description="Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.")
    required: Optional[StrictBool] = Field(default=None, description="Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them. Required parameters must be filled before form filling concludes.")
    __properties: ClassVar[List[str]] = ["advancedSettings", "defaultValue", "displayName", "entityType", "fillBehavior", "isList", "redact", "required"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1FormParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advanced_settings
        if self.advanced_settings:
            _dict['advancedSettings'] = self.advanced_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fill_behavior
        if self.fill_behavior:
            _dict['fillBehavior'] = self.fill_behavior.to_dict()
        # set to None if default_value (nullable) is None
        # and model_fields_set contains the field
        if self.default_value is None and "default_value" in self.model_fields_set:
            _dict['defaultValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1FormParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advancedSettings": GoogleCloudDialogflowCxV3beta1AdvancedSettings.from_dict(obj["advancedSettings"]) if obj.get("advancedSettings") is not None else None,
            "defaultValue": obj.get("defaultValue"),
            "displayName": obj.get("displayName"),
            "entityType": obj.get("entityType"),
            "fillBehavior": GoogleCloudDialogflowCxV3beta1FormParameterFillBehavior.from_dict(obj["fillBehavior"]) if obj.get("fillBehavior") is not None else None,
            "isList": obj.get("isList"),
            "redact": obj.get("redact"),
            "required": obj.get("required")
        })
        return _obj



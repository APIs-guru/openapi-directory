# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3beta1TurnSignals(BaseModel):
    """
    Collection of all signals that were extracted for a single turn of the conversation.
    """ # noqa: E501
    agent_escalated: Optional[StrictBool] = Field(default=None, description="Whether agent responded with LiveAgentHandoff fulfillment.", alias="agentEscalated")
    dtmf_used: Optional[StrictBool] = Field(default=None, description="Whether user was using DTMF input.", alias="dtmfUsed")
    failure_reasons: Optional[List[StrictStr]] = Field(default=None, description="Failure reasons of the turn.", alias="failureReasons")
    no_match: Optional[StrictBool] = Field(default=None, description="Whether NLU predicted NO_MATCH.", alias="noMatch")
    no_user_input: Optional[StrictBool] = Field(default=None, description="Whether user provided no input.", alias="noUserInput")
    reached_end_page: Optional[StrictBool] = Field(default=None, description="Whether turn resulted in End Session page.", alias="reachedEndPage")
    sentiment_magnitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sentiment magnitude of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled.", alias="sentimentMagnitude")
    sentiment_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sentiment score of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled.", alias="sentimentScore")
    user_escalated: Optional[StrictBool] = Field(default=None, description="Whether user was specifically asking for a live agent.", alias="userEscalated")
    webhook_statuses: Optional[List[StrictStr]] = Field(default=None, description="Human-readable statuses of the webhooks triggered during this turn.", alias="webhookStatuses")
    __properties: ClassVar[List[str]] = ["agentEscalated", "dtmfUsed", "failureReasons", "noMatch", "noUserInput", "reachedEndPage", "sentimentMagnitude", "sentimentScore", "userEscalated", "webhookStatuses"]

    @field_validator('failure_reasons')
    def failure_reasons_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['FAILURE_REASON_UNSPECIFIED', 'FAILED_INTENT', 'FAILED_WEBHOOK']):
                raise ValueError("each list item must be one of ('FAILURE_REASON_UNSPECIFIED', 'FAILED_INTENT', 'FAILED_WEBHOOK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1TurnSignals from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1TurnSignals from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentEscalated": obj.get("agentEscalated"),
            "dtmfUsed": obj.get("dtmfUsed"),
            "failureReasons": obj.get("failureReasons"),
            "noMatch": obj.get("noMatch"),
            "noUserInput": obj.get("noUserInput"),
            "reachedEndPage": obj.get("reachedEndPage"),
            "sentimentMagnitude": obj.get("sentimentMagnitude"),
            "sentimentScore": obj.get("sentimentScore"),
            "userEscalated": obj.get("userEscalated"),
            "webhookStatuses": obj.get("webhookStatuses")
        })
        return _obj



# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2beta1_suggestion_article import GoogleCloudDialogflowV2beta1SuggestionArticle
from openapi_client.models.google_cloud_dialogflow_v2beta1_suggestion_faq_answer import GoogleCloudDialogflowV2beta1SuggestionFaqAnswer
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1Suggestion(BaseModel):
    """
    Represents a suggestion for a human agent.
    """ # noqa: E501
    articles: Optional[List[GoogleCloudDialogflowV2beta1SuggestionArticle]] = Field(default=None, description="Output only. Articles ordered by score in descending order.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the suggestion was created.", alias="createTime")
    faq_answers: Optional[List[GoogleCloudDialogflowV2beta1SuggestionFaqAnswer]] = Field(default=None, description="Output only. Answers extracted from FAQ documents.", alias="faqAnswers")
    latest_message: Optional[StrictStr] = Field(default=None, description="Output only. Latest message used as context to compile this suggestion. Format: `projects//locations//conversations//messages/`.", alias="latestMessage")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of this suggestion. Format: `projects//locations//conversations//participants/*/suggestions/`.")
    __properties: ClassVar[List[str]] = ["articles", "createTime", "faqAnswers", "latestMessage", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1Suggestion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in articles (list)
        _items = []
        if self.articles:
            for _item_articles in self.articles:
                if _item_articles:
                    _items.append(_item_articles.to_dict())
            _dict['articles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in faq_answers (list)
        _items = []
        if self.faq_answers:
            for _item_faq_answers in self.faq_answers:
                if _item_faq_answers:
                    _items.append(_item_faq_answers.to_dict())
            _dict['faqAnswers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1Suggestion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "articles": [GoogleCloudDialogflowV2beta1SuggestionArticle.from_dict(_item) for _item in obj["articles"]] if obj.get("articles") is not None else None,
            "createTime": obj.get("createTime"),
            "faqAnswers": [GoogleCloudDialogflowV2beta1SuggestionFaqAnswer.from_dict(_item) for _item in obj["faqAnswers"]] if obj.get("faqAnswers") is not None else None,
            "latestMessage": obj.get("latestMessage"),
            "name": obj.get("name")
        })
        return _obj



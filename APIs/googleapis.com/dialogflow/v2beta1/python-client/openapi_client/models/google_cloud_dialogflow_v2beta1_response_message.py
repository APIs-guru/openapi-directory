# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2beta1_response_message_live_agent_handoff import GoogleCloudDialogflowV2beta1ResponseMessageLiveAgentHandoff
from openapi_client.models.google_cloud_dialogflow_v2beta1_response_message_mixed_audio import GoogleCloudDialogflowV2beta1ResponseMessageMixedAudio
from openapi_client.models.google_cloud_dialogflow_v2beta1_response_message_telephony_transfer_call import GoogleCloudDialogflowV2beta1ResponseMessageTelephonyTransferCall
from openapi_client.models.google_cloud_dialogflow_v2beta1_response_message_text import GoogleCloudDialogflowV2beta1ResponseMessageText
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1ResponseMessage(BaseModel):
    """
    Response messages from an automated agent.
    """ # noqa: E501
    end_interaction: Optional[Dict[str, Any]] = Field(default=None, description="Indicates that interaction with the Dialogflow agent has ended.", alias="endInteraction")
    live_agent_handoff: Optional[GoogleCloudDialogflowV2beta1ResponseMessageLiveAgentHandoff] = Field(default=None, alias="liveAgentHandoff")
    mixed_audio: Optional[GoogleCloudDialogflowV2beta1ResponseMessageMixedAudio] = Field(default=None, alias="mixedAudio")
    payload: Optional[Dict[str, Any]] = Field(default=None, description="Returns a response containing a custom, platform-specific payload.")
    telephony_transfer_call: Optional[GoogleCloudDialogflowV2beta1ResponseMessageTelephonyTransferCall] = Field(default=None, alias="telephonyTransferCall")
    text: Optional[GoogleCloudDialogflowV2beta1ResponseMessageText] = None
    __properties: ClassVar[List[str]] = ["endInteraction", "liveAgentHandoff", "mixedAudio", "payload", "telephonyTransferCall", "text"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1ResponseMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of live_agent_handoff
        if self.live_agent_handoff:
            _dict['liveAgentHandoff'] = self.live_agent_handoff.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mixed_audio
        if self.mixed_audio:
            _dict['mixedAudio'] = self.mixed_audio.to_dict()
        # override the default output from pydantic by calling `to_dict()` of telephony_transfer_call
        if self.telephony_transfer_call:
            _dict['telephonyTransferCall'] = self.telephony_transfer_call.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text
        if self.text:
            _dict['text'] = self.text.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1ResponseMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endInteraction": obj.get("endInteraction"),
            "liveAgentHandoff": GoogleCloudDialogflowV2beta1ResponseMessageLiveAgentHandoff.from_dict(obj["liveAgentHandoff"]) if obj.get("liveAgentHandoff") is not None else None,
            "mixedAudio": GoogleCloudDialogflowV2beta1ResponseMessageMixedAudio.from_dict(obj["mixedAudio"]) if obj.get("mixedAudio") is not None else None,
            "payload": obj.get("payload"),
            "telephonyTransferCall": GoogleCloudDialogflowV2beta1ResponseMessageTelephonyTransferCall.from_dict(obj["telephonyTransferCall"]) if obj.get("telephonyTransferCall") is not None else None,
            "text": GoogleCloudDialogflowV2beta1ResponseMessageText.from_dict(obj["text"]) if obj.get("text") is not None else None
        })
        return _obj



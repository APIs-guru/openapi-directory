# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2_intent_message_image import GoogleCloudDialogflowV2IntentMessageImage
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2IntentMessageMediaContentResponseMediaObject(BaseModel):
    """
    Response media object for media content card.
    """ # noqa: E501
    content_url: Optional[StrictStr] = Field(default=None, description="Required. Url where the media is stored.", alias="contentUrl")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Description of media card.")
    icon: Optional[GoogleCloudDialogflowV2IntentMessageImage] = None
    large_image: Optional[GoogleCloudDialogflowV2IntentMessageImage] = Field(default=None, alias="largeImage")
    name: Optional[StrictStr] = Field(default=None, description="Required. Name of media card.")
    __properties: ClassVar[List[str]] = ["contentUrl", "description", "icon", "largeImage", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2IntentMessageMediaContentResponseMediaObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of icon
        if self.icon:
            _dict['icon'] = self.icon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of large_image
        if self.large_image:
            _dict['largeImage'] = self.large_image.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2IntentMessageMediaContentResponseMediaObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentUrl": obj.get("contentUrl"),
            "description": obj.get("description"),
            "icon": GoogleCloudDialogflowV2IntentMessageImage.from_dict(obj["icon"]) if obj.get("icon") is not None else None,
            "largeImage": GoogleCloudDialogflowV2IntentMessageImage.from_dict(obj["largeImage"]) if obj.get("largeImage") is not None else None,
            "name": obj.get("name")
        })
        return _obj



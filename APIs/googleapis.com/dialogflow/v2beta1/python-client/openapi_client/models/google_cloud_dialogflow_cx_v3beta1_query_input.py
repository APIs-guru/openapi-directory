# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_audio_input import GoogleCloudDialogflowCxV3beta1AudioInput
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_dtmf_input import GoogleCloudDialogflowCxV3beta1DtmfInput
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_event_input import GoogleCloudDialogflowCxV3beta1EventInput
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_intent_input import GoogleCloudDialogflowCxV3beta1IntentInput
from openapi_client.models.google_cloud_dialogflow_cx_v3beta1_text_input import GoogleCloudDialogflowCxV3beta1TextInput
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowCxV3beta1QueryInput(BaseModel):
    """
    Represents the query input. It can contain one of: 1. A conversational query in the form of text. 2. An intent query that specifies which intent to trigger. 3. Natural language speech audio to be processed. 4. An event to be triggered. 5. DTMF digits to invoke an intent and fill in parameter value. 6. The results of a tool executed by the client.
    """ # noqa: E501
    audio: Optional[GoogleCloudDialogflowCxV3beta1AudioInput] = None
    dtmf: Optional[GoogleCloudDialogflowCxV3beta1DtmfInput] = None
    event: Optional[GoogleCloudDialogflowCxV3beta1EventInput] = None
    intent: Optional[GoogleCloudDialogflowCxV3beta1IntentInput] = None
    language_code: Optional[StrictStr] = Field(default=None, description="Required. The language of the input. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language.", alias="languageCode")
    text: Optional[GoogleCloudDialogflowCxV3beta1TextInput] = None
    __properties: ClassVar[List[str]] = ["audio", "dtmf", "event", "intent", "languageCode", "text"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1QueryInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audio
        if self.audio:
            _dict['audio'] = self.audio.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dtmf
        if self.dtmf:
            _dict['dtmf'] = self.dtmf.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event
        if self.event:
            _dict['event'] = self.event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of intent
        if self.intent:
            _dict['intent'] = self.intent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text
        if self.text:
            _dict['text'] = self.text.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowCxV3beta1QueryInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audio": GoogleCloudDialogflowCxV3beta1AudioInput.from_dict(obj["audio"]) if obj.get("audio") is not None else None,
            "dtmf": GoogleCloudDialogflowCxV3beta1DtmfInput.from_dict(obj["dtmf"]) if obj.get("dtmf") is not None else None,
            "event": GoogleCloudDialogflowCxV3beta1EventInput.from_dict(obj["event"]) if obj.get("event") is not None else None,
            "intent": GoogleCloudDialogflowCxV3beta1IntentInput.from_dict(obj["intent"]) if obj.get("intent") is not None else None,
            "languageCode": obj.get("languageCode"),
            "text": GoogleCloudDialogflowCxV3beta1TextInput.from_dict(obj["text"]) if obj.get("text") is not None else None
        })
        return _obj



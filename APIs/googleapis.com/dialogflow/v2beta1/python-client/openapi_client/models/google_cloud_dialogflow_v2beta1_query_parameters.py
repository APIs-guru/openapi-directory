# coding: utf-8

"""
    Dialogflow API

    Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).

    The version of the OpenAPI document: v2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_dialogflow_v2beta1_context import GoogleCloudDialogflowV2beta1Context
from openapi_client.models.google_cloud_dialogflow_v2beta1_sentiment_analysis_request_config import GoogleCloudDialogflowV2beta1SentimentAnalysisRequestConfig
from openapi_client.models.google_cloud_dialogflow_v2beta1_session_entity_type import GoogleCloudDialogflowV2beta1SessionEntityType
from openapi_client.models.google_cloud_dialogflow_v2beta1_sub_agent import GoogleCloudDialogflowV2beta1SubAgent
from openapi_client.models.google_type_lat_lng import GoogleTypeLatLng
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDialogflowV2beta1QueryParameters(BaseModel):
    """
    Represents the parameters of the conversational query.
    """ # noqa: E501
    contexts: Optional[List[GoogleCloudDialogflowV2beta1Context]] = Field(default=None, description="The collection of contexts to be activated before this query is executed.")
    geo_location: Optional[GoogleTypeLatLng] = Field(default=None, alias="geoLocation")
    knowledge_base_names: Optional[List[StrictStr]] = Field(default=None, description="KnowledgeBases to get alternative results from. If not set, the KnowledgeBases enabled in the agent (through UI) will be used. Format: `projects//knowledgeBases/`.", alias="knowledgeBaseNames")
    payload: Optional[Dict[str, Any]] = Field(default=None, description="This field can be used to pass custom data to your webhook. Arbitrary JSON objects are supported. If supplied, the value is used to populate the `WebhookRequest.original_detect_intent_request.payload` field sent to your webhook.")
    platform: Optional[StrictStr] = Field(default=None, description="The platform of the virtual agent response messages. If not empty, only emits messages from this platform in the response. Valid values are the enum names of platform.")
    reset_contexts: Optional[StrictBool] = Field(default=None, description="Specifies whether to delete all contexts in the current session before the new ones are activated.", alias="resetContexts")
    sentiment_analysis_request_config: Optional[GoogleCloudDialogflowV2beta1SentimentAnalysisRequestConfig] = Field(default=None, alias="sentimentAnalysisRequestConfig")
    session_entity_types: Optional[List[GoogleCloudDialogflowV2beta1SessionEntityType]] = Field(default=None, description="Additional session entity types to replace or extend developer entity types with. The entity synonyms apply to all languages and persist for the session of this query.", alias="sessionEntityTypes")
    sub_agents: Optional[List[GoogleCloudDialogflowV2beta1SubAgent]] = Field(default=None, description="For mega agent query, directly specify which sub agents to query. If any specified sub agent is not linked to the mega agent, an error will be returned. If empty, Dialogflow will decide which sub agents to query. If specified for a non-mega-agent query, will be silently ignored.", alias="subAgents")
    time_zone: Optional[StrictStr] = Field(default=None, description="The time zone of this conversational query from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris. If not provided, the time zone specified in agent settings is used.", alias="timeZone")
    webhook_headers: Optional[Dict[str, StrictStr]] = Field(default=None, description="This field can be used to pass HTTP headers for a webhook call. These headers will be sent to webhook along with the headers that have been configured through Dialogflow web console. The headers defined within this field will overwrite the headers configured through Dialogflow console if there is a conflict. Header names are case-insensitive. Google's specified headers are not allowed. Including: \"Host\", \"Content-Length\", \"Connection\", \"From\", \"User-Agent\", \"Accept-Encoding\", \"If-Modified-Since\", \"If-None-Match\", \"X-Forwarded-For\", etc.", alias="webhookHeaders")
    __properties: ClassVar[List[str]] = ["contexts", "geoLocation", "knowledgeBaseNames", "payload", "platform", "resetContexts", "sentimentAnalysisRequestConfig", "sessionEntityTypes", "subAgents", "timeZone", "webhookHeaders"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1QueryParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contexts (list)
        _items = []
        if self.contexts:
            for _item_contexts in self.contexts:
                if _item_contexts:
                    _items.append(_item_contexts.to_dict())
            _dict['contexts'] = _items
        # override the default output from pydantic by calling `to_dict()` of geo_location
        if self.geo_location:
            _dict['geoLocation'] = self.geo_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sentiment_analysis_request_config
        if self.sentiment_analysis_request_config:
            _dict['sentimentAnalysisRequestConfig'] = self.sentiment_analysis_request_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in session_entity_types (list)
        _items = []
        if self.session_entity_types:
            for _item_session_entity_types in self.session_entity_types:
                if _item_session_entity_types:
                    _items.append(_item_session_entity_types.to_dict())
            _dict['sessionEntityTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sub_agents (list)
        _items = []
        if self.sub_agents:
            for _item_sub_agents in self.sub_agents:
                if _item_sub_agents:
                    _items.append(_item_sub_agents.to_dict())
            _dict['subAgents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDialogflowV2beta1QueryParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contexts": [GoogleCloudDialogflowV2beta1Context.from_dict(_item) for _item in obj["contexts"]] if obj.get("contexts") is not None else None,
            "geoLocation": GoogleTypeLatLng.from_dict(obj["geoLocation"]) if obj.get("geoLocation") is not None else None,
            "knowledgeBaseNames": obj.get("knowledgeBaseNames"),
            "payload": obj.get("payload"),
            "platform": obj.get("platform"),
            "resetContexts": obj.get("resetContexts"),
            "sentimentAnalysisRequestConfig": GoogleCloudDialogflowV2beta1SentimentAnalysisRequestConfig.from_dict(obj["sentimentAnalysisRequestConfig"]) if obj.get("sentimentAnalysisRequestConfig") is not None else None,
            "sessionEntityTypes": [GoogleCloudDialogflowV2beta1SessionEntityType.from_dict(_item) for _item in obj["sessionEntityTypes"]] if obj.get("sessionEntityTypes") is not None else None,
            "subAgents": [GoogleCloudDialogflowV2beta1SubAgent.from_dict(_item) for _item in obj["subAgents"]] if obj.get("subAgents") is not None else None,
            "timeZone": obj.get("timeZone"),
            "webhookHeaders": obj.get("webhookHeaders")
        })
        return _obj



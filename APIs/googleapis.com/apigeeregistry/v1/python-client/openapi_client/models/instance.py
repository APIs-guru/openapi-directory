# coding: utf-8

"""
    Apigee Registry API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.build import Build
from openapi_client.models.config import Config
from typing import Optional, Set
from typing_extensions import Self

class Instance(BaseModel):
    """
    An Instance represents the instance resources of the Registry. Currently, only one instance is allowed for each project.
    """ # noqa: E501
    build: Optional[Build] = None
    config: Optional[Config] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation timestamp.", alias="createTime")
    name: Optional[StrictStr] = Field(default=None, description="Format: `projects/*/locations/*/instance`. Currently only `locations/global` is supported.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the Instance.")
    state_message: Optional[StrictStr] = Field(default=None, description="Output only. Extra information of Instance.State if the state is `FAILED`.", alias="stateMessage")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Last update timestamp.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["build", "config", "createTime", "name", "state", "stateMessage", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'INACTIVE', 'CREATING', 'ACTIVE', 'UPDATING', 'DELETING', 'FAILED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'INACTIVE', 'CREATING', 'ACTIVE', 'UPDATING', 'DELETING', 'FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Instance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "state",
            "state_message",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of build
        if self.build:
            _dict['build'] = self.build.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Instance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "build": Build.from_dict(obj["build"]) if obj.get("build") is not None else None,
            "config": Config.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "createTime": obj.get("createTime"),
            "name": obj.get("name"),
            "state": obj.get("state"),
            "stateMessage": obj.get("stateMessage"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



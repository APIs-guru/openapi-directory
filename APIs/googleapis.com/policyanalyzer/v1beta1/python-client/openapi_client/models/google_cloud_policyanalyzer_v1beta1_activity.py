# coding: utf-8

"""
    Policy Analyzer API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_policyanalyzer_v1beta1_observation_period import GoogleCloudPolicyanalyzerV1beta1ObservationPeriod
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPolicyanalyzerV1beta1Activity(BaseModel):
    """
    GoogleCloudPolicyanalyzerV1beta1Activity
    """ # noqa: E501
    activity: Optional[Dict[str, Any]] = Field(default=None, description="A struct of custom fields to explain the activity.")
    activity_type: Optional[StrictStr] = Field(default=None, description="The type of the activity.", alias="activityType")
    full_resource_name: Optional[StrictStr] = Field(default=None, description="The full resource name that identifies the resource. For examples of full resource names for Google Cloud services, see https://cloud.google.com/iam/help/troubleshooter/full-resource-names.", alias="fullResourceName")
    observation_period: Optional[GoogleCloudPolicyanalyzerV1beta1ObservationPeriod] = Field(default=None, alias="observationPeriod")
    __properties: ClassVar[List[str]] = ["activity", "activityType", "fullResourceName", "observationPeriod"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicyanalyzerV1beta1Activity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of observation_period
        if self.observation_period:
            _dict['observationPeriod'] = self.observation_period.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicyanalyzerV1beta1Activity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activity": obj.get("activity"),
            "activityType": obj.get("activityType"),
            "fullResourceName": obj.get("fullResourceName"),
            "observationPeriod": GoogleCloudPolicyanalyzerV1beta1ObservationPeriod.from_dict(obj["observationPeriod"]) if obj.get("observationPeriod") is not None else None
        })
        return _obj



# coding: utf-8

"""
    YouTube Analytics API

    Retrieves your YouTube Analytics data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.errors import Errors
from openapi_client.models.result_table_column_header import ResultTableColumnHeader
from typing import Optional, Set
from typing_extensions import Self

class QueryResponse(BaseModel):
    """
    Response message for TargetedQueriesService.Query.
    """ # noqa: E501
    column_headers: Optional[List[ResultTableColumnHeader]] = Field(default=None, description="This value specifies information about the data returned in the `rows` fields. Each item in the `columnHeaders` list identifies a field returned in the `rows` value, which contains a list of comma-delimited data. The `columnHeaders` list will begin with the dimensions specified in the API request, which will be followed by the metrics specified in the API request. The order of both dimensions and metrics will match the ordering in the API request. For example, if the API request contains the parameters `dimensions=ageGroup,gender&metrics=viewerPercentage`, the API response will return columns in this order: `ageGroup`, `gender`, `viewerPercentage`.", alias="columnHeaders")
    errors: Optional[Errors] = None
    kind: Optional[StrictStr] = Field(default=None, description="This value specifies the type of data included in the API response. For the query method, the kind property value will be `youtubeAnalytics#resultTable`.")
    rows: Optional[List[List[Any]]] = Field(default=None, description="The list contains all rows of the result table. Each item in the list is an array that contains comma-delimited data corresponding to a single row of data. The order of the comma-delimited data fields will match the order of the columns listed in the `columnHeaders` field. If no data is available for the given query, the `rows` element will be omitted from the response. The response for a query with the `day` dimension will not contain rows for the most recent days.")
    __properties: ClassVar[List[str]] = ["columnHeaders", "errors", "kind", "rows"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in column_headers (list)
        _items = []
        if self.column_headers:
            for _item_column_headers in self.column_headers:
                if _item_column_headers:
                    _items.append(_item_column_headers.to_dict())
            _dict['columnHeaders'] = _items
        # override the default output from pydantic by calling `to_dict()` of errors
        if self.errors:
            _dict['errors'] = self.errors.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "columnHeaders": [ResultTableColumnHeader.from_dict(_item) for _item in obj["columnHeaders"]] if obj.get("columnHeaders") is not None else None,
            "errors": Errors.from_dict(obj["errors"]) if obj.get("errors") is not None else None,
            "kind": obj.get("kind"),
            "rows": obj.get("rows")
        })
        return _obj



# coding: utf-8

"""
    Real-time Bidding API

    Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.creative import Creative

class TestCreative(unittest.TestCase):
    """Creative unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Creative:
        """Test Creative
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Creative`
        """
        model = Creative()
        if include_optional:
            return Creative(
                account_id = '',
                ad_choices_destination_url = '',
                advertiser_name = '',
                agency_id = '',
                api_update_time = '',
                creative_format = 'CREATIVE_FORMAT_UNSPECIFIED',
                creative_id = '',
                creative_serving_decision = openapi_client.models.creative_serving_decision.CreativeServingDecision(
                    ad_technology_providers = openapi_client.models.ad_technology_providers.AdTechnologyProviders(
                        detected_gvl_ids = [
                            ''
                            ], 
                        detected_provider_ids = [
                            ''
                            ], 
                        unidentified_provider_domains = [
                            ''
                            ], ), 
                    china_policy_compliance = openapi_client.models.policy_compliance.PolicyCompliance(
                        status = 'STATUS_UNSPECIFIED', 
                        topics = [
                            openapi_client.models.policy_topic_entry.PolicyTopicEntry(
                                evidences = [
                                    openapi_client.models.policy_topic_evidence.PolicyTopicEvidence(
                                        destination_not_crawlable = openapi_client.models.destination_not_crawlable_evidence.DestinationNotCrawlableEvidence(
                                            crawl_time = '', 
                                            crawled_url = '', 
                                            reason = 'REASON_UNSPECIFIED', ), 
                                        destination_not_working = openapi_client.models.destination_not_working_evidence.DestinationNotWorkingEvidence(
                                            dns_error = 'DNS_ERROR_UNSPECIFIED', 
                                            expanded_url = '', 
                                            http_error = 56, 
                                            invalid_page = 'INVALID_PAGE_UNSPECIFIED', 
                                            last_check_time = '', 
                                            platform = 'PLATFORM_UNSPECIFIED', 
                                            redirection_error = 'REDIRECTION_ERROR_UNSPECIFIED', 
                                            url_rejected = 'URL_REJECTED_UNSPECIFIED', ), 
                                        destination_url = openapi_client.models.destination_url_evidence.DestinationUrlEvidence(), 
                                        domain_call = openapi_client.models.domain_call_evidence.DomainCallEvidence(
                                            top_http_call_domains = [
                                                openapi_client.models.domain_calls.DomainCalls(
                                                    domain = '', 
                                                    http_call_count = 56, )
                                                ], 
                                            total_http_call_count = 56, ), 
                                        download_size = openapi_client.models.download_size_evidence.DownloadSizeEvidence(
                                            top_url_download_size_breakdowns = [
                                                openapi_client.models.url_download_size.UrlDownloadSize(
                                                    download_size_kb = 56, 
                                                    normalized_url = '', )
                                                ], 
                                            total_download_size_kb = 56, ), 
                                        http_call = openapi_client.models.http_call_evidence.HttpCallEvidence(
                                            urls = [
                                                ''
                                                ], ), 
                                        http_cookie = openapi_client.models.http_cookie_evidence.HttpCookieEvidence(
                                            cookie_names = [
                                                ''
                                                ], 
                                            max_cookie_count = 56, ), )
                                    ], 
                                help_center_url = '', 
                                missing_certificate = True, 
                                policy_topic = '', )
                            ], ), 
                    deals_policy_compliance = openapi_client.models.policy_compliance.PolicyCompliance(
                        status = 'STATUS_UNSPECIFIED', ), 
                    detected_advertisers = [
                        openapi_client.models.advertiser_and_brand.AdvertiserAndBrand(
                            advertiser_id = '', 
                            advertiser_name = '', 
                            brand_id = '', 
                            brand_name = '', )
                        ], 
                    detected_attributes = [
                        'ATTRIBUTE_UNSPECIFIED'
                        ], 
                    detected_click_through_urls = [
                        ''
                        ], 
                    detected_domains = [
                        ''
                        ], 
                    detected_languages = [
                        ''
                        ], 
                    detected_product_categories = [
                        56
                        ], 
                    detected_sensitive_categories = [
                        56
                        ], 
                    detected_vendor_ids = [
                        56
                        ], 
                    last_status_update = '', 
                    network_policy_compliance = , 
                    platform_policy_compliance = , 
                    russia_policy_compliance = , ),
                deal_ids = [
                    ''
                    ],
                declared_attributes = [
                    'ATTRIBUTE_UNSPECIFIED'
                    ],
                declared_click_through_urls = [
                    ''
                    ],
                declared_restricted_categories = [
                    'RESTRICTED_CATEGORY_UNSPECIFIED'
                    ],
                declared_vendor_ids = [
                    56
                    ],
                html = openapi_client.models.html_content.HtmlContent(
                    height = 56, 
                    snippet = '', 
                    width = 56, ),
                impression_tracking_urls = [
                    ''
                    ],
                name = '',
                native = openapi_client.models.native_content.NativeContent(
                    advertiser_name = '', 
                    app_icon = openapi_client.models.image.Image(
                        height = 56, 
                        url = '', 
                        width = 56, ), 
                    body = '', 
                    call_to_action = '', 
                    click_link_url = '', 
                    click_tracking_url = '', 
                    headline = '', 
                    image = openapi_client.models.image.Image(
                        height = 56, 
                        url = '', 
                        width = 56, ), 
                    logo = , 
                    price_display_text = '', 
                    star_rating = 1.337, 
                    video_url = '', 
                    video_vast_xml = '', ),
                render_url = '',
                restricted_categories = [
                    'RESTRICTED_CATEGORY_UNSPECIFIED'
                    ],
                version = 56,
                video = openapi_client.models.video_content.VideoContent(
                    video_metadata = openapi_client.models.video_metadata.VideoMetadata(
                        duration = '', 
                        is_valid_vast = True, 
                        is_vpaid = True, 
                        media_files = [
                            openapi_client.models.media_file.MediaFile(
                                bitrate = '', 
                                mime_type = 'VIDEO_MIME_TYPE_UNSPECIFIED', )
                            ], 
                        skip_offset = '', 
                        vast_version = 'VAST_VERSION_UNSPECIFIED', ), 
                    video_url = '', 
                    video_vast_xml = '', )
            )
        else:
            return Creative(
        )
        """

    def testCreative(self):
        """Test Creative"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

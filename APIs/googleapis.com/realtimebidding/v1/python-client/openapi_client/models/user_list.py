# coding: utf-8

"""
    Real-time Bidding API

    Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.url_restriction import UrlRestriction
from typing import Optional, Set
from typing_extensions import Self

class UserList(BaseModel):
    """
    Represents an Authorized Buyers user list. Authorized Buyers can create/update/list user lists. Once a user list is created in the system, Authorized Buyers can add users to the user list using the bulk uploader API. Alternatively, users can be added by hosting a tag on the advertiser's page.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The description for the user list.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. Display name of the user list. This must be unique across all user lists for a given account.", alias="displayName")
    membership_duration_days: Optional[StrictStr] = Field(default=None, description="Required. The number of days a user's cookie stays on the user list. The field must be between 0 and 540 inclusive.", alias="membershipDurationDays")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the user list that must follow the pattern `buyers/{buyer}/userLists/{user_list}`, where `{buyer}` represents the account ID of the buyer who owns the user list. For a bidder accessing user lists on behalf of a child seat buyer, `{buyer}` represents the account ID of the child seat buyer. `{user_list}` is an int64 identifier assigned by Google to uniquely identify a user list.")
    status: Optional[StrictStr] = Field(default=None, description="Output only. The status of the user list. A new user list starts out as open.")
    url_restriction: Optional[UrlRestriction] = Field(default=None, alias="urlRestriction")
    __properties: ClassVar[List[str]] = ["description", "displayName", "membershipDurationDays", "name", "status", "urlRestriction"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATUS_UNSPECIFIED', 'OPEN', 'CLOSED']):
            raise ValueError("must be one of enum values ('STATUS_UNSPECIFIED', 'OPEN', 'CLOSED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of url_restriction
        if self.url_restriction:
            _dict['urlRestriction'] = self.url_restriction.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "membershipDurationDays": obj.get("membershipDurationDays"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "urlRestriction": UrlRestriction.from_dict(obj["urlRestriction"]) if obj.get("urlRestriction") is not None else None
        })
        return _obj



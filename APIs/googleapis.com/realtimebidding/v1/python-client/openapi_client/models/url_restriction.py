# coding: utf-8

"""
    Real-time Bidding API

    Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.model_date import ModelDate
from typing import Optional, Set
from typing_extensions import Self

class UrlRestriction(BaseModel):
    """
    Deprecated. This will be removed in October 2023. For more information, see the release notes: https://developers.google.com/authorized-buyers/apis/relnotes#real-time-bidding-api Represents the URL restriction (for the URL captured by the pixel callback) for a user list.
    """ # noqa: E501
    end_date: Optional[ModelDate] = Field(default=None, alias="endDate")
    restriction_type: Optional[StrictStr] = Field(default=None, description="The restriction type for the specified URL.", alias="restrictionType")
    start_date: Optional[ModelDate] = Field(default=None, alias="startDate")
    url: Optional[StrictStr] = Field(default=None, description="Required. The URL to use for applying the restriction on the user list.")
    __properties: ClassVar[List[str]] = ["endDate", "restrictionType", "startDate", "url"]

    @field_validator('restriction_type')
    def restriction_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESTRICTION_TYPE_UNSPECIFIED', 'CONTAINS', 'EQUALS', 'STARTS_WITH', 'ENDS_WITH', 'DOES_NOT_EQUAL', 'DOES_NOT_CONTAIN', 'DOES_NOT_START_WITH', 'DOES_NOT_END_WITH']):
            raise ValueError("must be one of enum values ('RESTRICTION_TYPE_UNSPECIFIED', 'CONTAINS', 'EQUALS', 'STARTS_WITH', 'ENDS_WITH', 'DOES_NOT_EQUAL', 'DOES_NOT_CONTAIN', 'DOES_NOT_START_WITH', 'DOES_NOT_END_WITH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UrlRestriction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of end_date
        if self.end_date:
            _dict['endDate'] = self.end_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_date
        if self.start_date:
            _dict['startDate'] = self.start_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UrlRestriction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endDate": ModelDate.from_dict(obj["endDate"]) if obj.get("endDate") is not None else None,
            "restrictionType": obj.get("restrictionType"),
            "startDate": ModelDate.from_dict(obj["startDate"]) if obj.get("startDate") is not None else None,
            "url": obj.get("url")
        })
        return _obj



# coding: utf-8

"""
    Real-time Bidding API

    Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.destination_not_crawlable_evidence import DestinationNotCrawlableEvidence
from openapi_client.models.destination_not_working_evidence import DestinationNotWorkingEvidence
from openapi_client.models.destination_url_evidence import DestinationUrlEvidence
from openapi_client.models.domain_call_evidence import DomainCallEvidence
from openapi_client.models.download_size_evidence import DownloadSizeEvidence
from openapi_client.models.http_call_evidence import HttpCallEvidence
from openapi_client.models.http_cookie_evidence import HttpCookieEvidence
from typing import Optional, Set
from typing_extensions import Self

class PolicyTopicEvidence(BaseModel):
    """
    Evidence associated with a policy topic entry.
    """ # noqa: E501
    destination_not_crawlable: Optional[DestinationNotCrawlableEvidence] = Field(default=None, alias="destinationNotCrawlable")
    destination_not_working: Optional[DestinationNotWorkingEvidence] = Field(default=None, alias="destinationNotWorking")
    destination_url: Optional[DestinationUrlEvidence] = Field(default=None, alias="destinationUrl")
    domain_call: Optional[DomainCallEvidence] = Field(default=None, alias="domainCall")
    download_size: Optional[DownloadSizeEvidence] = Field(default=None, alias="downloadSize")
    http_call: Optional[HttpCallEvidence] = Field(default=None, alias="httpCall")
    http_cookie: Optional[HttpCookieEvidence] = Field(default=None, alias="httpCookie")
    __properties: ClassVar[List[str]] = ["destinationNotCrawlable", "destinationNotWorking", "destinationUrl", "domainCall", "downloadSize", "httpCall", "httpCookie"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyTopicEvidence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destination_not_crawlable
        if self.destination_not_crawlable:
            _dict['destinationNotCrawlable'] = self.destination_not_crawlable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_not_working
        if self.destination_not_working:
            _dict['destinationNotWorking'] = self.destination_not_working.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_url
        if self.destination_url:
            _dict['destinationUrl'] = self.destination_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of domain_call
        if self.domain_call:
            _dict['domainCall'] = self.domain_call.to_dict()
        # override the default output from pydantic by calling `to_dict()` of download_size
        if self.download_size:
            _dict['downloadSize'] = self.download_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of http_call
        if self.http_call:
            _dict['httpCall'] = self.http_call.to_dict()
        # override the default output from pydantic by calling `to_dict()` of http_cookie
        if self.http_cookie:
            _dict['httpCookie'] = self.http_cookie.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyTopicEvidence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destinationNotCrawlable": DestinationNotCrawlableEvidence.from_dict(obj["destinationNotCrawlable"]) if obj.get("destinationNotCrawlable") is not None else None,
            "destinationNotWorking": DestinationNotWorkingEvidence.from_dict(obj["destinationNotWorking"]) if obj.get("destinationNotWorking") is not None else None,
            "destinationUrl": DestinationUrlEvidence.from_dict(obj["destinationUrl"]) if obj.get("destinationUrl") is not None else None,
            "domainCall": DomainCallEvidence.from_dict(obj["domainCall"]) if obj.get("domainCall") is not None else None,
            "downloadSize": DownloadSizeEvidence.from_dict(obj["downloadSize"]) if obj.get("downloadSize") is not None else None,
            "httpCall": HttpCallEvidence.from_dict(obj["httpCall"]) if obj.get("httpCall") is not None else None,
            "httpCookie": HttpCookieEvidence.from_dict(obj["httpCookie"]) if obj.get("httpCookie") is not None else None
        })
        return _obj



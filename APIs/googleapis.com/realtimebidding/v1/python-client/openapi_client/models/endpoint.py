# coding: utf-8

"""
    Real-time Bidding API

    Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Endpoint(BaseModel):
    """
    Bidder endpoint that receives bid requests.
    """ # noqa: E501
    bid_protocol: Optional[StrictStr] = Field(default=None, description="The protocol that the bidder endpoint is using.", alias="bidProtocol")
    maximum_qps: Optional[StrictStr] = Field(default=None, description="The maximum number of queries per second allowed to be sent to this server.", alias="maximumQps")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the endpoint resource that must follow the pattern `bidders/{bidderAccountId}/endpoints/{endpointId}`, where {bidderAccountId} is the account ID of the bidder who operates this endpoint, and {endpointId} is a unique ID assigned by the server.")
    trading_location: Optional[StrictStr] = Field(default=None, description="The trading location that bid requests should be sent from. See https://developers.google.com/authorized-buyers/rtb/peer-guide#trading-locations for further information.", alias="tradingLocation")
    url: Optional[StrictStr] = Field(default=None, description="Output only. The URL that bid requests should be sent to.")
    __properties: ClassVar[List[str]] = ["bidProtocol", "maximumQps", "name", "tradingLocation", "url"]

    @field_validator('bid_protocol')
    def bid_protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BID_PROTOCOL_UNSPECIFIED', 'GOOGLE_RTB', 'OPENRTB_JSON', 'OPENRTB_PROTOBUF']):
            raise ValueError("must be one of enum values ('BID_PROTOCOL_UNSPECIFIED', 'GOOGLE_RTB', 'OPENRTB_JSON', 'OPENRTB_PROTOBUF')")
        return value

    @field_validator('trading_location')
    def trading_location_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRADING_LOCATION_UNSPECIFIED', 'US_WEST', 'US_EAST', 'EUROPE', 'ASIA']):
            raise ValueError("must be one of enum values ('TRADING_LOCATION_UNSPECIFIED', 'US_WEST', 'US_EAST', 'EUROPE', 'ASIA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Endpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Endpoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bidProtocol": obj.get("bidProtocol"),
            "maximumQps": obj.get("maximumQps"),
            "name": obj.get("name"),
            "tradingLocation": obj.get("tradingLocation"),
            "url": obj.get("url")
        })
        return _obj



# coding: utf-8

"""
    Real-time Bidding API

    Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_targeting import AppTargeting
from openapi_client.models.creative_dimensions import CreativeDimensions
from openapi_client.models.numeric_targeting_dimension import NumericTargetingDimension
from openapi_client.models.string_targeting_dimension import StringTargetingDimension
from typing import Optional, Set
from typing_extensions import Self

class PretargetingConfig(BaseModel):
    """
    Pretargeting configuration: a set of targeting dimensions applied at the pretargeting stage of the RTB funnel. These control which inventory a bidder will receive bid requests for.
    """ # noqa: E501
    allowed_user_targeting_modes: Optional[List[StrictStr]] = Field(default=None, description="Targeting modes included by this configuration. A bid request must allow all the specified targeting modes. An unset value allows all bid requests to be sent, regardless of which targeting modes they allow.", alias="allowedUserTargetingModes")
    app_targeting: Optional[AppTargeting] = Field(default=None, alias="appTargeting")
    billing_id: Optional[StrictStr] = Field(default=None, description="Output only. The identifier that corresponds to this pretargeting configuration that helps buyers track and attribute their spend across their own arbitrary divisions. If a bid request matches more than one configuration, the buyer chooses which billing_id to attribute each of their bids.", alias="billingId")
    display_name: Optional[StrictStr] = Field(default=None, description="The diplay name associated with this configuration. This name must be unique among all the pretargeting configurations a bidder has.", alias="displayName")
    excluded_content_label_ids: Optional[List[StrictStr]] = Field(default=None, description="The sensitive content category label IDs excluded in this configuration. Bid requests for inventory with any of the specified content label IDs will not be sent. Refer to this file https://storage.googleapis.com/adx-rtb-dictionaries/content-labels.txt for category IDs.", alias="excludedContentLabelIds")
    geo_targeting: Optional[NumericTargetingDimension] = Field(default=None, alias="geoTargeting")
    included_creative_dimensions: Optional[List[CreativeDimensions]] = Field(default=None, description="Creative dimensions included by this configuration. Only bid requests eligible for at least one of the specified creative dimensions will be sent. An unset value allows all bid requests to be sent, regardless of creative dimension.", alias="includedCreativeDimensions")
    included_environments: Optional[List[StrictStr]] = Field(default=None, description="Environments that are being included. Bid requests will not be sent for a given environment if it is not included. Further restrictions can be applied to included environments to target only a subset of its inventory. An unset value includes all environments.", alias="includedEnvironments")
    included_formats: Optional[List[StrictStr]] = Field(default=None, description="Creative formats included by this configuration. Only bid requests eligible for at least one of the specified creative formats will be sent. An unset value will allow all bid requests to be sent, regardless of format.", alias="includedFormats")
    included_languages: Optional[List[StrictStr]] = Field(default=None, description="The languages included in this configuration, represented by their language code. See https://developers.google.com/adwords/api/docs/appendix/languagecodes.", alias="includedLanguages")
    included_mobile_operating_system_ids: Optional[List[StrictStr]] = Field(default=None, description="The mobile operating systems included in this configuration as defined in https://storage.googleapis.com/adx-rtb-dictionaries/mobile-os.csv", alias="includedMobileOperatingSystemIds")
    included_platforms: Optional[List[StrictStr]] = Field(default=None, description="The platforms included by this configration. Bid requests for devices with the specified platform types will be sent. An unset value allows all bid requests to be sent, regardless of platform.", alias="includedPlatforms")
    included_user_id_types: Optional[List[StrictStr]] = Field(default=None, description="User identifier types included in this configuration. At least one of the user identifier types specified in this list must be available for the bid request to be sent.", alias="includedUserIdTypes")
    interstitial_targeting: Optional[StrictStr] = Field(default=None, description="The interstitial targeting specified for this configuration. The unset value will allow bid requests to be sent regardless of whether they are for interstitials or not.", alias="interstitialTargeting")
    invalid_geo_ids: Optional[List[StrictStr]] = Field(default=None, description="Output only. Existing included or excluded geos that are invalid. Previously targeted geos may become invalid due to privacy restrictions.", alias="invalidGeoIds")
    maximum_qps: Optional[StrictStr] = Field(default=None, description="The maximum QPS threshold for this configuration. The bidder should receive no more than this number of bid requests matching this configuration per second across all their bidding endpoints among all trading locations. Further information available at https://developers.google.com/authorized-buyers/rtb/peer-guide", alias="maximumQps")
    minimum_viewability_decile: Optional[StrictInt] = Field(default=None, description="The targeted minimum viewability decile, ranging in values [0, 10]. A value of 5 means that the configuration will only match adslots for which we predict at least 50% viewability. Values > 10 will be rounded down to 10. An unset value or a value of 0 indicates that bid requests will be sent regardless of viewability.", alias="minimumViewabilityDecile")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the pretargeting configuration that must follow the pattern `bidders/{bidder_account_id}/pretargetingConfigs/{config_id}`")
    publisher_targeting: Optional[StringTargetingDimension] = Field(default=None, alias="publisherTargeting")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of this pretargeting configuration.")
    user_list_targeting: Optional[NumericTargetingDimension] = Field(default=None, alias="userListTargeting")
    vertical_targeting: Optional[NumericTargetingDimension] = Field(default=None, alias="verticalTargeting")
    web_targeting: Optional[StringTargetingDimension] = Field(default=None, alias="webTargeting")
    __properties: ClassVar[List[str]] = ["allowedUserTargetingModes", "appTargeting", "billingId", "displayName", "excludedContentLabelIds", "geoTargeting", "includedCreativeDimensions", "includedEnvironments", "includedFormats", "includedLanguages", "includedMobileOperatingSystemIds", "includedPlatforms", "includedUserIdTypes", "interstitialTargeting", "invalidGeoIds", "maximumQps", "minimumViewabilityDecile", "name", "publisherTargeting", "state", "userListTargeting", "verticalTargeting", "webTargeting"]

    @field_validator('allowed_user_targeting_modes')
    def allowed_user_targeting_modes_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['USER_TARGETING_MODE_UNSPECIFIED', 'REMARKETING_ADS', 'INTEREST_BASED_TARGETING']):
                raise ValueError("each list item must be one of ('USER_TARGETING_MODE_UNSPECIFIED', 'REMARKETING_ADS', 'INTEREST_BASED_TARGETING')")
        return value

    @field_validator('included_environments')
    def included_environments_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ENVIRONMENT_UNSPECIFIED', 'APP', 'WEB']):
                raise ValueError("each list item must be one of ('ENVIRONMENT_UNSPECIFIED', 'APP', 'WEB')")
        return value

    @field_validator('included_formats')
    def included_formats_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['CREATIVE_FORMAT_UNSPECIFIED', 'HTML', 'VAST', 'NATIVE']):
                raise ValueError("each list item must be one of ('CREATIVE_FORMAT_UNSPECIFIED', 'HTML', 'VAST', 'NATIVE')")
        return value

    @field_validator('included_platforms')
    def included_platforms_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['PLATFORM_UNSPECIFIED', 'PERSONAL_COMPUTER', 'PHONE', 'TABLET', 'CONNECTED_TV']):
                raise ValueError("each list item must be one of ('PLATFORM_UNSPECIFIED', 'PERSONAL_COMPUTER', 'PHONE', 'TABLET', 'CONNECTED_TV')")
        return value

    @field_validator('included_user_id_types')
    def included_user_id_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['USER_ID_TYPE_UNSPECIFIED', 'HOSTED_MATCH_DATA', 'GOOGLE_COOKIE', 'DEVICE_ID']):
                raise ValueError("each list item must be one of ('USER_ID_TYPE_UNSPECIFIED', 'HOSTED_MATCH_DATA', 'GOOGLE_COOKIE', 'DEVICE_ID')")
        return value

    @field_validator('interstitial_targeting')
    def interstitial_targeting_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INTERSTITIAL_TARGETING_UNSPECIFIED', 'ONLY_INTERSTITIAL_REQUESTS', 'ONLY_NON_INTERSTITIAL_REQUESTS']):
            raise ValueError("must be one of enum values ('INTERSTITIAL_TARGETING_UNSPECIFIED', 'ONLY_INTERSTITIAL_REQUESTS', 'ONLY_NON_INTERSTITIAL_REQUESTS')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'SUSPENDED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'SUSPENDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PretargetingConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "billing_id",
            "invalid_geo_ids",
            "name",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_targeting
        if self.app_targeting:
            _dict['appTargeting'] = self.app_targeting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geo_targeting
        if self.geo_targeting:
            _dict['geoTargeting'] = self.geo_targeting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in included_creative_dimensions (list)
        _items = []
        if self.included_creative_dimensions:
            for _item_included_creative_dimensions in self.included_creative_dimensions:
                if _item_included_creative_dimensions:
                    _items.append(_item_included_creative_dimensions.to_dict())
            _dict['includedCreativeDimensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of publisher_targeting
        if self.publisher_targeting:
            _dict['publisherTargeting'] = self.publisher_targeting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_list_targeting
        if self.user_list_targeting:
            _dict['userListTargeting'] = self.user_list_targeting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vertical_targeting
        if self.vertical_targeting:
            _dict['verticalTargeting'] = self.vertical_targeting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web_targeting
        if self.web_targeting:
            _dict['webTargeting'] = self.web_targeting.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PretargetingConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedUserTargetingModes": obj.get("allowedUserTargetingModes"),
            "appTargeting": AppTargeting.from_dict(obj["appTargeting"]) if obj.get("appTargeting") is not None else None,
            "billingId": obj.get("billingId"),
            "displayName": obj.get("displayName"),
            "excludedContentLabelIds": obj.get("excludedContentLabelIds"),
            "geoTargeting": NumericTargetingDimension.from_dict(obj["geoTargeting"]) if obj.get("geoTargeting") is not None else None,
            "includedCreativeDimensions": [CreativeDimensions.from_dict(_item) for _item in obj["includedCreativeDimensions"]] if obj.get("includedCreativeDimensions") is not None else None,
            "includedEnvironments": obj.get("includedEnvironments"),
            "includedFormats": obj.get("includedFormats"),
            "includedLanguages": obj.get("includedLanguages"),
            "includedMobileOperatingSystemIds": obj.get("includedMobileOperatingSystemIds"),
            "includedPlatforms": obj.get("includedPlatforms"),
            "includedUserIdTypes": obj.get("includedUserIdTypes"),
            "interstitialTargeting": obj.get("interstitialTargeting"),
            "invalidGeoIds": obj.get("invalidGeoIds"),
            "maximumQps": obj.get("maximumQps"),
            "minimumViewabilityDecile": obj.get("minimumViewabilityDecile"),
            "name": obj.get("name"),
            "publisherTargeting": StringTargetingDimension.from_dict(obj["publisherTargeting"]) if obj.get("publisherTargeting") is not None else None,
            "state": obj.get("state"),
            "userListTargeting": NumericTargetingDimension.from_dict(obj["userListTargeting"]) if obj.get("userListTargeting") is not None else None,
            "verticalTargeting": NumericTargetingDimension.from_dict(obj["verticalTargeting"]) if obj.get("verticalTargeting") is not None else None,
            "webTargeting": StringTargetingDimension.from_dict(obj["webTargeting"]) if obj.get("webTargeting") is not None else None
        })
        return _obj



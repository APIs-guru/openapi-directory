# coding: utf-8

"""
    Real-time Bidding API

    Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.media_file import MediaFile
from typing import Optional, Set
from typing_extensions import Self

class VideoMetadata(BaseModel):
    """
    Video metadata for a creative.
    """ # noqa: E501
    duration: Optional[StrictStr] = Field(default=None, description="The duration of the ad. Can be used to filter the response of the creatives.list method.")
    is_valid_vast: Optional[StrictBool] = Field(default=None, description="Is this a valid VAST ad? Can be used to filter the response of the creatives.list method.", alias="isValidVast")
    is_vpaid: Optional[StrictBool] = Field(default=None, description="Is this a VPAID ad? Can be used to filter the response of the creatives.list method.", alias="isVpaid")
    media_files: Optional[List[MediaFile]] = Field(default=None, description="The list of all media files declared in the VAST. If there are multiple VASTs in a wrapper chain, this includes the media files from the deepest one in the chain.", alias="mediaFiles")
    skip_offset: Optional[StrictStr] = Field(default=None, description="The minimum duration that the user has to watch before being able to skip this ad. If the field is not set, the ad is not skippable. If the field is set, the ad is skippable. Can be used to filter the response of the creatives.list method.", alias="skipOffset")
    vast_version: Optional[StrictStr] = Field(default=None, description="The maximum VAST version across all wrapped VAST documents. Can be used to filter the response of the creatives.list method.", alias="vastVersion")
    __properties: ClassVar[List[str]] = ["duration", "isValidVast", "isVpaid", "mediaFiles", "skipOffset", "vastVersion"]

    @field_validator('vast_version')
    def vast_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VAST_VERSION_UNSPECIFIED', 'VAST_VERSION_1_0', 'VAST_VERSION_2_0', 'VAST_VERSION_3_0', 'VAST_VERSION_4_0']):
            raise ValueError("must be one of enum values ('VAST_VERSION_UNSPECIFIED', 'VAST_VERSION_1_0', 'VAST_VERSION_2_0', 'VAST_VERSION_3_0', 'VAST_VERSION_4_0')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VideoMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in media_files (list)
        _items = []
        if self.media_files:
            for _item_media_files in self.media_files:
                if _item_media_files:
                    _items.append(_item_media_files.to_dict())
            _dict['mediaFiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VideoMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "duration": obj.get("duration"),
            "isValidVast": obj.get("isValidVast"),
            "isVpaid": obj.get("isVpaid"),
            "mediaFiles": [MediaFile.from_dict(_item) for _item in obj["mediaFiles"]] if obj.get("mediaFiles") is not None else None,
            "skipOffset": obj.get("skipOffset"),
            "vastVersion": obj.get("vastVersion")
        })
        return _obj



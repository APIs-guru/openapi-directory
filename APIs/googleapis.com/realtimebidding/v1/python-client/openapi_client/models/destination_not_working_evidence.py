# coding: utf-8

"""
    Real-time Bidding API

    Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DestinationNotWorkingEvidence(BaseModel):
    """
    Evidence of the creative's destination URL not functioning properly or having been incorrectly set up.
    """ # noqa: E501
    dns_error: Optional[StrictStr] = Field(default=None, description="DNS lookup errors.", alias="dnsError")
    expanded_url: Optional[StrictStr] = Field(default=None, description="The full non-working URL.", alias="expandedUrl")
    http_error: Optional[StrictInt] = Field(default=None, description="HTTP error code (for example, 404 or 5xx)", alias="httpError")
    invalid_page: Optional[StrictStr] = Field(default=None, description="Page was crawled successfully, but was detected as either a page with no content or an error page.", alias="invalidPage")
    last_check_time: Optional[StrictStr] = Field(default=None, description="Approximate time when the ad destination was last checked.", alias="lastCheckTime")
    platform: Optional[StrictStr] = Field(default=None, description="Platform of the non-working URL.")
    redirection_error: Optional[StrictStr] = Field(default=None, description="HTTP redirect chain error.", alias="redirectionError")
    url_rejected: Optional[StrictStr] = Field(default=None, description="Rejected because of malformed URLs or invalid requests.", alias="urlRejected")
    __properties: ClassVar[List[str]] = ["dnsError", "expandedUrl", "httpError", "invalidPage", "lastCheckTime", "platform", "redirectionError", "urlRejected"]

    @field_validator('dns_error')
    def dns_error_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DNS_ERROR_UNSPECIFIED', 'ERROR_DNS', 'GOOGLE_CRAWLER_DNS_ISSUE']):
            raise ValueError("must be one of enum values ('DNS_ERROR_UNSPECIFIED', 'ERROR_DNS', 'GOOGLE_CRAWLER_DNS_ISSUE')")
        return value

    @field_validator('invalid_page')
    def invalid_page_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INVALID_PAGE_UNSPECIFIED', 'EMPTY_OR_ERROR_PAGE']):
            raise ValueError("must be one of enum values ('INVALID_PAGE_UNSPECIFIED', 'EMPTY_OR_ERROR_PAGE')")
        return value

    @field_validator('platform')
    def platform_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLATFORM_UNSPECIFIED', 'PERSONAL_COMPUTER', 'ANDROID', 'IOS']):
            raise ValueError("must be one of enum values ('PLATFORM_UNSPECIFIED', 'PERSONAL_COMPUTER', 'ANDROID', 'IOS')")
        return value

    @field_validator('redirection_error')
    def redirection_error_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REDIRECTION_ERROR_UNSPECIFIED', 'TOO_MANY_REDIRECTS', 'INVALID_REDIRECT', 'EMPTY_REDIRECT', 'REDIRECT_ERROR_UNKNOWN']):
            raise ValueError("must be one of enum values ('REDIRECTION_ERROR_UNSPECIFIED', 'TOO_MANY_REDIRECTS', 'INVALID_REDIRECT', 'EMPTY_REDIRECT', 'REDIRECT_ERROR_UNKNOWN')")
        return value

    @field_validator('url_rejected')
    def url_rejected_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['URL_REJECTED_UNSPECIFIED', 'BAD_REQUEST', 'MALFORMED_URL', 'URL_REJECTED_UNKNOWN']):
            raise ValueError("must be one of enum values ('URL_REJECTED_UNSPECIFIED', 'BAD_REQUEST', 'MALFORMED_URL', 'URL_REJECTED_UNKNOWN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DestinationNotWorkingEvidence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DestinationNotWorkingEvidence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dnsError": obj.get("dnsError"),
            "expandedUrl": obj.get("expandedUrl"),
            "httpError": obj.get("httpError"),
            "invalidPage": obj.get("invalidPage"),
            "lastCheckTime": obj.get("lastCheckTime"),
            "platform": obj.get("platform"),
            "redirectionError": obj.get("redirectionError"),
            "urlRejected": obj.get("urlRejected")
        })
        return _obj



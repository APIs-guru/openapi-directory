# coding: utf-8

"""
    Real-time Bidding API

    Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.policy_topic_evidence import PolicyTopicEvidence
from typing import Optional, Set
from typing_extensions import Self

class PolicyTopicEntry(BaseModel):
    """
    Each policy topic entry will represent a violation of a policy topic for a creative, with the policy topic information and optional evidence for the policy violation.
    """ # noqa: E501
    evidences: Optional[List[PolicyTopicEvidence]] = Field(default=None, description="Pieces of evidence associated with this policy topic entry.")
    help_center_url: Optional[StrictStr] = Field(default=None, description="URL of the help center article describing this policy topic.", alias="helpCenterUrl")
    missing_certificate: Optional[StrictBool] = Field(default=None, description="Whether or not the policy topic is missing a certificate. Some policy topics require a certificate to unblock serving in some regions. For more information about creative certification, refer to: https://support.google.com/authorizedbuyers/answer/7450776", alias="missingCertificate")
    policy_topic: Optional[StrictStr] = Field(default=None, description="Policy topic this entry refers to. For example, \"ALCOHOL\", \"TRADEMARKS_IN_AD_TEXT\", or \"DESTINATION_NOT_WORKING\". The set of possible policy topics is not fixed for a particular API version and may change at any time. Can be used to filter the response of the creatives.list method", alias="policyTopic")
    __properties: ClassVar[List[str]] = ["evidences", "helpCenterUrl", "missingCertificate", "policyTopic"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyTopicEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in evidences (list)
        _items = []
        if self.evidences:
            for _item_evidences in self.evidences:
                if _item_evidences:
                    _items.append(_item_evidences.to_dict())
            _dict['evidences'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyTopicEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "evidences": [PolicyTopicEvidence.from_dict(_item) for _item in obj["evidences"]] if obj.get("evidences") is not None else None,
            "helpCenterUrl": obj.get("helpCenterUrl"),
            "missingCertificate": obj.get("missingCertificate"),
            "policyTopic": obj.get("policyTopic")
        })
        return _obj



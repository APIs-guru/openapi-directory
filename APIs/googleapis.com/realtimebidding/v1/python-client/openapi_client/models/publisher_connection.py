# coding: utf-8

"""
    Real-time Bidding API

    Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PublisherConnection(BaseModel):
    """
    An Open Bidding exchange's connection to a publisher. This is initiated by the publisher for the bidder to review. If approved by the bidder, this means that the bidder agrees to receive bid requests from the publisher.
    """ # noqa: E501
    bidding_state: Optional[StrictStr] = Field(default=None, description="Whether the publisher has been approved by the bidder.", alias="biddingState")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the publisher initiated a connection with the bidder (irrespective of if or when the bidder approves it). This is subsequently updated if the publisher revokes and re-initiates the connection.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. Publisher display name.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the publisher connection. This follows the pattern `bidders/{bidder}/publisherConnections/{publisher}`, where `{bidder}` represents the account ID of the bidder, and `{publisher}` is the ads.txt/app-ads.txt publisher ID.")
    publisher_platform: Optional[StrictStr] = Field(default=None, description="Output only. Whether the publisher is an Ad Manager or AdMob publisher.", alias="publisherPlatform")
    __properties: ClassVar[List[str]] = ["biddingState", "createTime", "displayName", "name", "publisherPlatform"]

    @field_validator('bidding_state')
    def bidding_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PENDING', 'REJECTED', 'APPROVED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PENDING', 'REJECTED', 'APPROVED')")
        return value

    @field_validator('publisher_platform')
    def publisher_platform_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PUBLISHER_PLATFORM_UNSPECIFIED', 'GOOGLE_AD_MANAGER', 'ADMOB']):
            raise ValueError("must be one of enum values ('PUBLISHER_PLATFORM_UNSPECIFIED', 'GOOGLE_AD_MANAGER', 'ADMOB')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublisherConnection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "display_name",
            "name",
            "publisher_platform",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublisherConnection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "biddingState": obj.get("biddingState"),
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "publisherPlatform": obj.get("publisherPlatform")
        })
        return _obj



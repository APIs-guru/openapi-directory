# coding: utf-8

"""
    Real-time Bidding API

    Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.creative_serving_decision import CreativeServingDecision
from openapi_client.models.html_content import HtmlContent
from openapi_client.models.native_content import NativeContent
from openapi_client.models.video_content import VideoContent
from typing import Optional, Set
from typing_extensions import Self

class Creative(BaseModel):
    """
    A creative and its classification data.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Output only. ID of the buyer account that this creative is owned by. Can be used to filter the response of the creatives.list method with equality and inequality check.", alias="accountId")
    ad_choices_destination_url: Optional[StrictStr] = Field(default=None, description="The link to AdChoices destination page. This is only supported for native ads.", alias="adChoicesDestinationUrl")
    advertiser_name: Optional[StrictStr] = Field(default=None, description="The name of the company being advertised in the creative. Can be used to filter the response of the creatives.list method.", alias="advertiserName")
    agency_id: Optional[StrictStr] = Field(default=None, description="The agency ID for this creative.", alias="agencyId")
    api_update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last update timestamp of the creative through the API.", alias="apiUpdateTime")
    creative_format: Optional[StrictStr] = Field(default=None, description="Output only. The format of this creative. Can be used to filter the response of the creatives.list method.", alias="creativeFormat")
    creative_id: Optional[StrictStr] = Field(default=None, description="Buyer-specific creative ID that references this creative in bid responses. This field is Ignored in update operations. Can be used to filter the response of the creatives.list method. The maximum length of the creative ID is 128 bytes.", alias="creativeId")
    creative_serving_decision: Optional[CreativeServingDecision] = Field(default=None, alias="creativeServingDecision")
    deal_ids: Optional[List[StrictStr]] = Field(default=None, description="Output only. IDs of all of the deals with which this creative has been used in bidding. Can be used to filter the response of the creatives.list method.", alias="dealIds")
    declared_attributes: Optional[List[StrictStr]] = Field(default=None, description="All declared attributes for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method. If the `excluded_attribute` field of a [bid request](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto\") contains one of the attributes that were declared or detected for a given creative, and a bid is submitted with that creative, the bid will be filtered before the auction.", alias="declaredAttributes")
    declared_click_through_urls: Optional[List[StrictStr]] = Field(default=None, description="The set of declared destination URLs for the creative. Can be used to filter the response of the creatives.list method.", alias="declaredClickThroughUrls")
    declared_restricted_categories: Optional[List[StrictStr]] = Field(default=None, description="All declared restricted categories for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method.", alias="declaredRestrictedCategories")
    declared_vendor_ids: Optional[List[StrictInt]] = Field(default=None, description="IDs for the declared ad technology vendors that may be used by this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for possible values. Can be used to filter the response of the creatives.list method.", alias="declaredVendorIds")
    html: Optional[HtmlContent] = None
    impression_tracking_urls: Optional[List[StrictStr]] = Field(default=None, description="The set of URLs to be called to record an impression.", alias="impressionTrackingUrls")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the creative. Follows the pattern `buyers/{buyer}/creatives/{creative}`, where `{buyer}` represents the account ID of the buyer who owns the creative, and `{creative}` is the buyer-specific creative ID that references this creative in the bid response.")
    native: Optional[NativeContent] = None
    render_url: Optional[StrictStr] = Field(default=None, description="Experimental field that can be used during the [FLEDGE Origin Trial](/authorized-buyers/rtb/fledge-origin-trial). The URL to fetch an interest group ad used in [TURTLEDOVE on-device auction](https://github.com/WICG/turtledove/blob/main/FLEDGE.md#1-browsers-record-interest-groups\"). This should be unique among all creatives for a given `accountId`. This URL should be the same as the URL returned by [generateBid()](https://github.com/WICG/turtledove/blob/main/FLEDGE.md#32-on-device-bidding).", alias="renderUrl")
    restricted_categories: Optional[List[StrictStr]] = Field(default=None, description="All restricted categories for the ads that may be shown from this creative.", alias="restrictedCategories")
    version: Optional[StrictInt] = Field(default=None, description="Output only. The version of the creative. Version for a new creative is 1 and it increments during subsequent creative updates.")
    video: Optional[VideoContent] = None
    __properties: ClassVar[List[str]] = ["accountId", "adChoicesDestinationUrl", "advertiserName", "agencyId", "apiUpdateTime", "creativeFormat", "creativeId", "creativeServingDecision", "dealIds", "declaredAttributes", "declaredClickThroughUrls", "declaredRestrictedCategories", "declaredVendorIds", "html", "impressionTrackingUrls", "name", "native", "renderUrl", "restrictedCategories", "version", "video"]

    @field_validator('creative_format')
    def creative_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREATIVE_FORMAT_UNSPECIFIED', 'HTML', 'VIDEO', 'NATIVE']):
            raise ValueError("must be one of enum values ('CREATIVE_FORMAT_UNSPECIFIED', 'HTML', 'VIDEO', 'NATIVE')")
        return value

    @field_validator('declared_attributes')
    def declared_attributes_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ATTRIBUTE_UNSPECIFIED', 'IMAGE_RICH_MEDIA', 'ADOBE_FLASH_FLV', 'IS_TAGGED', 'IS_COOKIE_TARGETED', 'IS_USER_INTEREST_TARGETED', 'EXPANDING_DIRECTION_NONE', 'EXPANDING_DIRECTION_UP', 'EXPANDING_DIRECTION_DOWN', 'EXPANDING_DIRECTION_LEFT', 'EXPANDING_DIRECTION_RIGHT', 'EXPANDING_DIRECTION_UP_LEFT', 'EXPANDING_DIRECTION_UP_RIGHT', 'EXPANDING_DIRECTION_DOWN_LEFT', 'EXPANDING_DIRECTION_DOWN_RIGHT', 'CREATIVE_TYPE_HTML', 'CREATIVE_TYPE_VAST_VIDEO', 'EXPANDING_DIRECTION_UP_OR_DOWN', 'EXPANDING_DIRECTION_LEFT_OR_RIGHT', 'EXPANDING_DIRECTION_ANY_DIAGONAL', 'EXPANDING_ACTION_ROLLOVER_TO_EXPAND', 'INSTREAM_VAST_VIDEO_TYPE_VPAID_FLASH', 'RICH_MEDIA_CAPABILITY_TYPE_MRAID', 'RICH_MEDIA_CAPABILITY_TYPE_FLASH', 'RICH_MEDIA_CAPABILITY_TYPE_HTML5', 'SKIPPABLE_INSTREAM_VIDEO', 'RICH_MEDIA_CAPABILITY_TYPE_SSL', 'RICH_MEDIA_CAPABILITY_TYPE_NON_SSL', 'RICH_MEDIA_CAPABILITY_TYPE_INTERSTITIAL', 'NON_SKIPPABLE_INSTREAM_VIDEO', 'NATIVE_ELIGIBILITY_ELIGIBLE', 'NON_VPAID', 'NATIVE_ELIGIBILITY_NOT_ELIGIBLE', 'ANY_INTERSTITIAL', 'NON_INTERSTITIAL', 'IN_BANNER_VIDEO', 'RENDERING_SIZELESS_ADX', 'OMSDK_1_0', 'RENDERING_PLAYABLE']):
                raise ValueError("each list item must be one of ('ATTRIBUTE_UNSPECIFIED', 'IMAGE_RICH_MEDIA', 'ADOBE_FLASH_FLV', 'IS_TAGGED', 'IS_COOKIE_TARGETED', 'IS_USER_INTEREST_TARGETED', 'EXPANDING_DIRECTION_NONE', 'EXPANDING_DIRECTION_UP', 'EXPANDING_DIRECTION_DOWN', 'EXPANDING_DIRECTION_LEFT', 'EXPANDING_DIRECTION_RIGHT', 'EXPANDING_DIRECTION_UP_LEFT', 'EXPANDING_DIRECTION_UP_RIGHT', 'EXPANDING_DIRECTION_DOWN_LEFT', 'EXPANDING_DIRECTION_DOWN_RIGHT', 'CREATIVE_TYPE_HTML', 'CREATIVE_TYPE_VAST_VIDEO', 'EXPANDING_DIRECTION_UP_OR_DOWN', 'EXPANDING_DIRECTION_LEFT_OR_RIGHT', 'EXPANDING_DIRECTION_ANY_DIAGONAL', 'EXPANDING_ACTION_ROLLOVER_TO_EXPAND', 'INSTREAM_VAST_VIDEO_TYPE_VPAID_FLASH', 'RICH_MEDIA_CAPABILITY_TYPE_MRAID', 'RICH_MEDIA_CAPABILITY_TYPE_FLASH', 'RICH_MEDIA_CAPABILITY_TYPE_HTML5', 'SKIPPABLE_INSTREAM_VIDEO', 'RICH_MEDIA_CAPABILITY_TYPE_SSL', 'RICH_MEDIA_CAPABILITY_TYPE_NON_SSL', 'RICH_MEDIA_CAPABILITY_TYPE_INTERSTITIAL', 'NON_SKIPPABLE_INSTREAM_VIDEO', 'NATIVE_ELIGIBILITY_ELIGIBLE', 'NON_VPAID', 'NATIVE_ELIGIBILITY_NOT_ELIGIBLE', 'ANY_INTERSTITIAL', 'NON_INTERSTITIAL', 'IN_BANNER_VIDEO', 'RENDERING_SIZELESS_ADX', 'OMSDK_1_0', 'RENDERING_PLAYABLE')")
        return value

    @field_validator('declared_restricted_categories')
    def declared_restricted_categories_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['RESTRICTED_CATEGORY_UNSPECIFIED', 'ALCOHOL']):
                raise ValueError("each list item must be one of ('RESTRICTED_CATEGORY_UNSPECIFIED', 'ALCOHOL')")
        return value

    @field_validator('restricted_categories')
    def restricted_categories_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['RESTRICTED_CATEGORY_UNSPECIFIED', 'ALCOHOL']):
                raise ValueError("each list item must be one of ('RESTRICTED_CATEGORY_UNSPECIFIED', 'ALCOHOL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Creative from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "account_id",
            "api_update_time",
            "creative_format",
            "deal_ids",
            "name",
            "version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creative_serving_decision
        if self.creative_serving_decision:
            _dict['creativeServingDecision'] = self.creative_serving_decision.to_dict()
        # override the default output from pydantic by calling `to_dict()` of html
        if self.html:
            _dict['html'] = self.html.to_dict()
        # override the default output from pydantic by calling `to_dict()` of native
        if self.native:
            _dict['native'] = self.native.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video
        if self.video:
            _dict['video'] = self.video.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Creative from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "adChoicesDestinationUrl": obj.get("adChoicesDestinationUrl"),
            "advertiserName": obj.get("advertiserName"),
            "agencyId": obj.get("agencyId"),
            "apiUpdateTime": obj.get("apiUpdateTime"),
            "creativeFormat": obj.get("creativeFormat"),
            "creativeId": obj.get("creativeId"),
            "creativeServingDecision": CreativeServingDecision.from_dict(obj["creativeServingDecision"]) if obj.get("creativeServingDecision") is not None else None,
            "dealIds": obj.get("dealIds"),
            "declaredAttributes": obj.get("declaredAttributes"),
            "declaredClickThroughUrls": obj.get("declaredClickThroughUrls"),
            "declaredRestrictedCategories": obj.get("declaredRestrictedCategories"),
            "declaredVendorIds": obj.get("declaredVendorIds"),
            "html": HtmlContent.from_dict(obj["html"]) if obj.get("html") is not None else None,
            "impressionTrackingUrls": obj.get("impressionTrackingUrls"),
            "name": obj.get("name"),
            "native": NativeContent.from_dict(obj["native"]) if obj.get("native") is not None else None,
            "renderUrl": obj.get("renderUrl"),
            "restrictedCategories": obj.get("restrictedCategories"),
            "version": obj.get("version"),
            "video": VideoContent.from_dict(obj["video"]) if obj.get("video") is not None else None
        })
        return _obj



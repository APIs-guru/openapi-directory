# coding: utf-8

"""
    Web Fonts Developer API

    The Google Web Fonts Developer API lets you retrieve information about web fonts served by Google.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.axis import Axis
from typing import Optional, Set
from typing_extensions import Self

class Webfont(BaseModel):
    """
    Metadata describing a family of fonts.
    """ # noqa: E501
    axes: Optional[List[Axis]] = Field(default=None, description="Axis for variable fonts.")
    category: Optional[StrictStr] = Field(default=None, description="The category of the font.")
    family: Optional[StrictStr] = Field(default=None, description="The name of the font.")
    files: Optional[Dict[str, StrictStr]] = Field(default=None, description="The font files (with all supported scripts) for each one of the available variants, as a key : value map.")
    kind: Optional[StrictStr] = Field(default=None, description="This kind represents a webfont object in the webfonts service.")
    last_modified: Optional[StrictStr] = Field(default=None, description="The date (format \"yyyy-MM-dd\") the font was modified for the last time.", alias="lastModified")
    menu: Optional[StrictStr] = Field(default=None, description="Font URL for menu subset, a subset of the font that is enough to display the font name")
    subsets: Optional[List[StrictStr]] = Field(default=None, description="The scripts supported by the font.")
    variants: Optional[List[StrictStr]] = Field(default=None, description="The available variants for the font.")
    version: Optional[StrictStr] = Field(default=None, description="The font version.")
    __properties: ClassVar[List[str]] = ["axes", "category", "family", "files", "kind", "lastModified", "menu", "subsets", "variants", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Webfont from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in axes (list)
        _items = []
        if self.axes:
            for _item_axes in self.axes:
                if _item_axes:
                    _items.append(_item_axes.to_dict())
            _dict['axes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Webfont from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "axes": [Axis.from_dict(_item) for _item in obj["axes"]] if obj.get("axes") is not None else None,
            "category": obj.get("category"),
            "family": obj.get("family"),
            "files": obj.get("files"),
            "kind": obj.get("kind"),
            "lastModified": obj.get("lastModified"),
            "menu": obj.get("menu"),
            "subsets": obj.get("subsets"),
            "variants": obj.get("variants"),
            "version": obj.get("version")
        })
        return _obj



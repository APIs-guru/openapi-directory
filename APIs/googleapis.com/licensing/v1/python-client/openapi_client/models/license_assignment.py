# coding: utf-8

"""
    Enterprise License Manager API

    The Google Enterprise License Manager API lets you manage Google Workspace and related licenses for all users of a customer that you manage.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LicenseAssignment(BaseModel):
    """
    Representation of a license assignment.
    """ # noqa: E501
    etags: Optional[StrictStr] = Field(default=None, description="ETag of the resource.")
    kind: Optional[StrictStr] = Field(default='licensing#licenseAssignment', description="Identifies the resource as a LicenseAssignment, which is `licensing#licenseAssignment`.")
    product_id: Optional[StrictStr] = Field(default=None, description="A product's unique identifier. For more information about products in this version of the API, see Product and SKU IDs.", alias="productId")
    product_name: Optional[StrictStr] = Field(default=None, description="Display Name of the product.", alias="productName")
    self_link: Optional[StrictStr] = Field(default=None, description="Link to this page.", alias="selfLink")
    sku_id: Optional[StrictStr] = Field(default=None, description="A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.", alias="skuId")
    sku_name: Optional[StrictStr] = Field(default=None, description="Display Name of the sku of the product.", alias="skuName")
    user_id: Optional[StrictStr] = Field(default=None, description="The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a `userId` is subject to change, do not use a `userId` value as a key for persistent data. This key could break if the current user's email address changes. If the `userId` is suspended, the license status changes.", alias="userId")
    __properties: ClassVar[List[str]] = ["etags", "kind", "productId", "productName", "selfLink", "skuId", "skuName", "userId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LicenseAssignment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LicenseAssignment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "etags": obj.get("etags"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'licensing#licenseAssignment',
            "productId": obj.get("productId"),
            "productName": obj.get("productName"),
            "selfLink": obj.get("selfLink"),
            "skuId": obj.get("skuId"),
            "skuName": obj.get("skuName"),
            "userId": obj.get("userId")
        })
        return _obj



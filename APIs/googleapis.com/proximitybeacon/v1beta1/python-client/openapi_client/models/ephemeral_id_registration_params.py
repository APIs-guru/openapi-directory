# coding: utf-8

"""
    Proximity Beacon API

    Registers, manages, indexes, and searches beacons.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class EphemeralIdRegistrationParams(BaseModel):
    """
    Information a client needs to provision and register beacons that broadcast Eddystone-EID format beacon IDs, using Elliptic curve Diffie-Hellman key exchange. See [the Eddystone specification](https://github.com/google/eddystone/tree/master/eddystone-eid) at GitHub.
    """ # noqa: E501
    max_rotation_period_exponent: Optional[StrictInt] = Field(default=None, description="Indicates the maximum rotation period supported by the service. See EddystoneEidRegistration.rotation_period_exponent", alias="maxRotationPeriodExponent")
    min_rotation_period_exponent: Optional[StrictInt] = Field(default=None, description="Indicates the minimum rotation period supported by the service. See EddystoneEidRegistration.rotation_period_exponent", alias="minRotationPeriodExponent")
    service_ecdh_public_key: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The beacon service's public key for use by a beacon to derive its Identity Key using Elliptic Curve Diffie-Hellman key exchange.", alias="serviceEcdhPublicKey")
    __properties: ClassVar[List[str]] = ["maxRotationPeriodExponent", "minRotationPeriodExponent", "serviceEcdhPublicKey"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EphemeralIdRegistrationParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EphemeralIdRegistrationParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maxRotationPeriodExponent": obj.get("maxRotationPeriodExponent"),
            "minRotationPeriodExponent": obj.get("minRotationPeriodExponent"),
            "serviceEcdhPublicKey": obj.get("serviceEcdhPublicKey")
        })
        return _obj



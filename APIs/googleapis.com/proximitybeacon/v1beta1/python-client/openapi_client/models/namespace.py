# coding: utf-8

"""
    Proximity Beacon API

    Registers, manages, indexes, and searches beacons.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Namespace(BaseModel):
    """
    An attachment namespace defines read and write access for all the attachments created under it. Each namespace is globally unique, and owned by one project which is the only project that can create attachments under it.
    """ # noqa: E501
    namespace_name: Optional[StrictStr] = Field(default=None, description="Resource name of this namespace. Namespaces names have the format: namespaces/namespace.", alias="namespaceName")
    serving_visibility: Optional[StrictStr] = Field(default=None, description="Specifies what clients may receive attachments under this namespace via `beaconinfo.getforobserved`.", alias="servingVisibility")
    __properties: ClassVar[List[str]] = ["namespaceName", "servingVisibility"]

    @field_validator('serving_visibility')
    def serving_visibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VISIBILITY_UNSPECIFIED', 'UNLISTED', 'PUBLIC']):
            raise ValueError("must be one of enum values ('VISIBILITY_UNSPECIFIED', 'UNLISTED', 'PUBLIC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Namespace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Namespace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "namespaceName": obj.get("namespaceName"),
            "servingVisibility": obj.get("servingVisibility")
        })
        return _obj



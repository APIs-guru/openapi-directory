# coding: utf-8

"""
    Proximity Beacon API

    Registers, manages, indexes, and searches beacons.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.advertised_id import AdvertisedId
from openapi_client.models.ephemeral_id_registration import EphemeralIdRegistration
from openapi_client.models.indoor_level import IndoorLevel
from openapi_client.models.lat_lng import LatLng
from typing import Optional, Set
from typing_extensions import Self

class Beacon(BaseModel):
    """
    Details of a beacon device.
    """ # noqa: E501
    advertised_id: Optional[AdvertisedId] = Field(default=None, alias="advertisedId")
    beacon_name: Optional[StrictStr] = Field(default=None, description="Resource name of this beacon. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon. This field must be left empty when registering. After reading a beacon, clients can use the name for future operations.", alias="beaconName")
    description: Optional[StrictStr] = Field(default=None, description="Free text used to identify and describe the beacon. Maximum length 140 characters. Optional.")
    ephemeral_id_registration: Optional[EphemeralIdRegistration] = Field(default=None, alias="ephemeralIdRegistration")
    expected_stability: Optional[StrictStr] = Field(default=None, description="Expected location stability. This is set when the beacon is registered or updated, not automatically detected in any way. Optional.", alias="expectedStability")
    indoor_level: Optional[IndoorLevel] = Field(default=None, alias="indoorLevel")
    lat_lng: Optional[LatLng] = Field(default=None, alias="latLng")
    place_id: Optional[StrictStr] = Field(default=None, description="The [Google Places API](/places/place-id) Place ID of the place where the beacon is deployed. This is given when the beacon is registered or updated, not automatically detected in any way. Optional.", alias="placeId")
    properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="Properties of the beacon device, for example battery type or firmware version. Optional.")
    provisioning_key: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Some beacons may require a user to provide an authorization key before changing any of its configuration (e.g. broadcast frames, transmit power). This field provides a place to store and control access to that key. This field is populated in responses to `GET /v1beta1/beacons/3!beaconId` from users with write access to the given beacon. That is to say: If the user is authorized to write the beacon's confidential data in the service, the service considers them authorized to configure the beacon. Note that this key grants nothing on the service, only on the beacon itself.", alias="provisioningKey")
    status: Optional[StrictStr] = Field(default=None, description="Current status of the beacon. Required.")
    __properties: ClassVar[List[str]] = ["advertisedId", "beaconName", "description", "ephemeralIdRegistration", "expectedStability", "indoorLevel", "latLng", "placeId", "properties", "provisioningKey", "status"]

    @field_validator('expected_stability')
    def expected_stability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STABILITY_UNSPECIFIED', 'STABLE', 'PORTABLE', 'MOBILE', 'ROVING']):
            raise ValueError("must be one of enum values ('STABILITY_UNSPECIFIED', 'STABLE', 'PORTABLE', 'MOBILE', 'ROVING')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATUS_UNSPECIFIED', 'ACTIVE', 'DECOMMISSIONED', 'INACTIVE']):
            raise ValueError("must be one of enum values ('STATUS_UNSPECIFIED', 'ACTIVE', 'DECOMMISSIONED', 'INACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Beacon from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advertised_id
        if self.advertised_id:
            _dict['advertisedId'] = self.advertised_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ephemeral_id_registration
        if self.ephemeral_id_registration:
            _dict['ephemeralIdRegistration'] = self.ephemeral_id_registration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of indoor_level
        if self.indoor_level:
            _dict['indoorLevel'] = self.indoor_level.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lat_lng
        if self.lat_lng:
            _dict['latLng'] = self.lat_lng.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Beacon from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advertisedId": AdvertisedId.from_dict(obj["advertisedId"]) if obj.get("advertisedId") is not None else None,
            "beaconName": obj.get("beaconName"),
            "description": obj.get("description"),
            "ephemeralIdRegistration": EphemeralIdRegistration.from_dict(obj["ephemeralIdRegistration"]) if obj.get("ephemeralIdRegistration") is not None else None,
            "expectedStability": obj.get("expectedStability"),
            "indoorLevel": IndoorLevel.from_dict(obj["indoorLevel"]) if obj.get("indoorLevel") is not None else None,
            "latLng": LatLng.from_dict(obj["latLng"]) if obj.get("latLng") is not None else None,
            "placeId": obj.get("placeId"),
            "properties": obj.get("properties"),
            "provisioningKey": obj.get("provisioningKey"),
            "status": obj.get("status")
        })
        return _obj



# coding: utf-8

"""
    Proximity Beacon API

    Registers, manages, indexes, and searches beacons.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.beacon import Beacon

class TestBeacon(unittest.TestCase):
    """Beacon unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Beacon:
        """Test Beacon
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Beacon`
        """
        model = Beacon()
        if include_optional:
            return Beacon(
                advertised_id = openapi_client.models.advertised_id.AdvertisedId(
                    id = 'YQ==', 
                    type = 'TYPE_UNSPECIFIED', ),
                beacon_name = '',
                description = '',
                ephemeral_id_registration = openapi_client.models.ephemeral_id_registration.EphemeralIdRegistration(
                    beacon_ecdh_public_key = 'YQ==', 
                    beacon_identity_key = 'YQ==', 
                    initial_clock_value = '', 
                    initial_eid = 'YQ==', 
                    rotation_period_exponent = 56, 
                    service_ecdh_public_key = 'YQ==', ),
                expected_stability = 'STABILITY_UNSPECIFIED',
                indoor_level = openapi_client.models.indoor_level.IndoorLevel(
                    name = '', ),
                lat_lng = openapi_client.models.lat_lng.LatLng(
                    latitude = 1.337, 
                    longitude = 1.337, ),
                place_id = '',
                properties = {
                    'key' : ''
                    },
                provisioning_key = 'YQ==',
                status = 'STATUS_UNSPECIFIED'
            )
        else:
            return Beacon(
        )
        """

    def testBeacon(self):
        """Test Beacon"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

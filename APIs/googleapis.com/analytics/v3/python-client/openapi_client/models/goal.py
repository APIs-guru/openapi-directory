# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.goal_event_details import GoalEventDetails
from openapi_client.models.goal_parent_link import GoalParentLink
from openapi_client.models.goal_url_destination_details import GoalUrlDestinationDetails
from openapi_client.models.goal_visit_num_pages_details import GoalVisitNumPagesDetails
from openapi_client.models.goal_visit_time_on_site_details import GoalVisitTimeOnSiteDetails
from typing import Optional, Set
from typing_extensions import Self

class Goal(BaseModel):
    """
    JSON template for Analytics goal resource.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID to which this goal belongs.", alias="accountId")
    active: Optional[StrictBool] = Field(default=None, description="Determines whether this goal is active.")
    created: Optional[datetime] = Field(default=None, description="Time this goal was created.")
    event_details: Optional[GoalEventDetails] = Field(default=None, alias="eventDetails")
    id: Optional[StrictStr] = Field(default=None, description="Goal ID.")
    internal_web_property_id: Optional[StrictStr] = Field(default=None, description="Internal ID for the web property to which this goal belongs.", alias="internalWebPropertyId")
    kind: Optional[StrictStr] = Field(default='analytics#goal', description="Resource type for an Analytics goal.")
    name: Optional[StrictStr] = Field(default=None, description="Goal name.")
    parent_link: Optional[GoalParentLink] = Field(default=None, alias="parentLink")
    profile_id: Optional[StrictStr] = Field(default=None, description="View (Profile) ID to which this goal belongs.", alias="profileId")
    self_link: Optional[StrictStr] = Field(default=None, description="Link for this goal.", alias="selfLink")
    type: Optional[StrictStr] = Field(default=None, description="Goal type. Possible values are URL_DESTINATION, VISIT_TIME_ON_SITE, VISIT_NUM_PAGES, AND EVENT.")
    updated: Optional[datetime] = Field(default=None, description="Time this goal was last modified.")
    url_destination_details: Optional[GoalUrlDestinationDetails] = Field(default=None, alias="urlDestinationDetails")
    value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Goal value.")
    visit_num_pages_details: Optional[GoalVisitNumPagesDetails] = Field(default=None, alias="visitNumPagesDetails")
    visit_time_on_site_details: Optional[GoalVisitTimeOnSiteDetails] = Field(default=None, alias="visitTimeOnSiteDetails")
    web_property_id: Optional[StrictStr] = Field(default=None, description="Web property ID to which this goal belongs. The web property ID is of the form UA-XXXXX-YY.", alias="webPropertyId")
    __properties: ClassVar[List[str]] = ["accountId", "active", "created", "eventDetails", "id", "internalWebPropertyId", "kind", "name", "parentLink", "profileId", "selfLink", "type", "updated", "urlDestinationDetails", "value", "visitNumPagesDetails", "visitTimeOnSiteDetails", "webPropertyId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Goal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of event_details
        if self.event_details:
            _dict['eventDetails'] = self.event_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_link
        if self.parent_link:
            _dict['parentLink'] = self.parent_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of url_destination_details
        if self.url_destination_details:
            _dict['urlDestinationDetails'] = self.url_destination_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of visit_num_pages_details
        if self.visit_num_pages_details:
            _dict['visitNumPagesDetails'] = self.visit_num_pages_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of visit_time_on_site_details
        if self.visit_time_on_site_details:
            _dict['visitTimeOnSiteDetails'] = self.visit_time_on_site_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Goal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "active": obj.get("active"),
            "created": obj.get("created"),
            "eventDetails": GoalEventDetails.from_dict(obj["eventDetails"]) if obj.get("eventDetails") is not None else None,
            "id": obj.get("id"),
            "internalWebPropertyId": obj.get("internalWebPropertyId"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'analytics#goal',
            "name": obj.get("name"),
            "parentLink": GoalParentLink.from_dict(obj["parentLink"]) if obj.get("parentLink") is not None else None,
            "profileId": obj.get("profileId"),
            "selfLink": obj.get("selfLink"),
            "type": obj.get("type"),
            "updated": obj.get("updated"),
            "urlDestinationDetails": GoalUrlDestinationDetails.from_dict(obj["urlDestinationDetails"]) if obj.get("urlDestinationDetails") is not None else None,
            "value": obj.get("value"),
            "visitNumPagesDetails": GoalVisitNumPagesDetails.from_dict(obj["visitNumPagesDetails"]) if obj.get("visitNumPagesDetails") is not None else None,
            "visitTimeOnSiteDetails": GoalVisitTimeOnSiteDetails.from_dict(obj["visitTimeOnSiteDetails"]) if obj.get("visitTimeOnSiteDetails") is not None else None,
            "webPropertyId": obj.get("webPropertyId")
        })
        return _obj



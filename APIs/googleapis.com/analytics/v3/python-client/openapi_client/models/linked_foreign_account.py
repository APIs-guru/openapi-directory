# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LinkedForeignAccount(BaseModel):
    """
    JSON template for an Analytics Remarketing Audience Foreign Link.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID to which this linked foreign account belongs.", alias="accountId")
    eligible_for_search: Optional[StrictBool] = Field(default=None, description="Boolean indicating whether this is eligible for search.", alias="eligibleForSearch")
    id: Optional[StrictStr] = Field(default=None, description="Entity ad account link ID.")
    internal_web_property_id: Optional[StrictStr] = Field(default=None, description="Internal ID for the web property to which this linked foreign account belongs.", alias="internalWebPropertyId")
    kind: Optional[StrictStr] = Field(default='analytics#linkedForeignAccount', description="Resource type for linked foreign account.")
    linked_account_id: Optional[StrictStr] = Field(default=None, description="The foreign account ID. For example the an Google Ads `linkedAccountId` has the following format XXX-XXX-XXXX.", alias="linkedAccountId")
    remarketing_audience_id: Optional[StrictStr] = Field(default=None, description="Remarketing audience ID to which this linked foreign account belongs.", alias="remarketingAudienceId")
    status: Optional[StrictStr] = Field(default=None, description="The status of this foreign account link.")
    type: Optional[StrictStr] = Field(default=None, description="The type of the foreign account. For example, `ADWORDS_LINKS`, `DBM_LINKS`, `MCC_LINKS` or `OPTIMIZE`.")
    web_property_id: Optional[StrictStr] = Field(default=None, description="Web property ID of the form UA-XXXXX-YY to which this linked foreign account belongs.", alias="webPropertyId")
    __properties: ClassVar[List[str]] = ["accountId", "eligibleForSearch", "id", "internalWebPropertyId", "kind", "linkedAccountId", "remarketingAudienceId", "status", "type", "webPropertyId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LinkedForeignAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "eligible_for_search",
            "internal_web_property_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LinkedForeignAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "eligibleForSearch": obj.get("eligibleForSearch"),
            "id": obj.get("id"),
            "internalWebPropertyId": obj.get("internalWebPropertyId"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'analytics#linkedForeignAccount',
            "linkedAccountId": obj.get("linkedAccountId"),
            "remarketingAudienceId": obj.get("remarketingAudienceId"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "webPropertyId": obj.get("webPropertyId")
        })
        return _obj



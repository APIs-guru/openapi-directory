# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.webproperty_child_link import WebpropertyChildLink
from openapi_client.models.webproperty_parent_link import WebpropertyParentLink
from openapi_client.models.webproperty_permissions import WebpropertyPermissions
from typing import Optional, Set
from typing_extensions import Self

class Webproperty(BaseModel):
    """
    JSON template for an Analytics web property.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID to which this web property belongs.", alias="accountId")
    child_link: Optional[WebpropertyChildLink] = Field(default=None, alias="childLink")
    created: Optional[datetime] = Field(default=None, description="Time this web property was created.")
    data_retention_reset_on_new_activity: Optional[StrictBool] = Field(default=None, description="Set to true to reset the retention period of the user identifier with each new event from that user (thus setting the expiration date to current time plus retention period). Set to false to delete data associated with the user identifier automatically after the rentention period. This property cannot be set on insert.", alias="dataRetentionResetOnNewActivity")
    data_retention_ttl: Optional[StrictStr] = Field(default=None, description="The length of time for which user and event data is retained. This property cannot be set on insert.", alias="dataRetentionTtl")
    default_profile_id: Optional[StrictStr] = Field(default=None, description="Default view (profile) ID.", alias="defaultProfileId")
    id: Optional[StrictStr] = Field(default=None, description="Web property ID of the form UA-XXXXX-YY.")
    industry_vertical: Optional[StrictStr] = Field(default=None, description="The industry vertical/category selected for this web property.", alias="industryVertical")
    internal_web_property_id: Optional[StrictStr] = Field(default=None, description="Internal ID for this web property.", alias="internalWebPropertyId")
    kind: Optional[StrictStr] = Field(default='analytics#webproperty', description="Resource type for Analytics WebProperty.")
    level: Optional[StrictStr] = Field(default=None, description="Level for this web property. Possible values are STANDARD or PREMIUM.")
    name: Optional[StrictStr] = Field(default=None, description="Name of this web property.")
    parent_link: Optional[WebpropertyParentLink] = Field(default=None, alias="parentLink")
    permissions: Optional[WebpropertyPermissions] = None
    profile_count: Optional[StrictInt] = Field(default=None, description="View (Profile) count for this web property.", alias="profileCount")
    self_link: Optional[StrictStr] = Field(default=None, description="Link for this web property.", alias="selfLink")
    starred: Optional[StrictBool] = Field(default=None, description="Indicates whether this web property is starred or not.")
    updated: Optional[datetime] = Field(default=None, description="Time this web property was last modified.")
    website_url: Optional[StrictStr] = Field(default=None, description="Website url for this web property.", alias="websiteUrl")
    __properties: ClassVar[List[str]] = ["accountId", "childLink", "created", "dataRetentionResetOnNewActivity", "dataRetentionTtl", "defaultProfileId", "id", "industryVertical", "internalWebPropertyId", "kind", "level", "name", "parentLink", "permissions", "profileCount", "selfLink", "starred", "updated", "websiteUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Webproperty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "internal_web_property_id",
            "kind",
            "level",
            "profile_count",
            "self_link",
            "updated",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of child_link
        if self.child_link:
            _dict['childLink'] = self.child_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_link
        if self.parent_link:
            _dict['parentLink'] = self.parent_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of permissions
        if self.permissions:
            _dict['permissions'] = self.permissions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Webproperty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "childLink": WebpropertyChildLink.from_dict(obj["childLink"]) if obj.get("childLink") is not None else None,
            "created": obj.get("created"),
            "dataRetentionResetOnNewActivity": obj.get("dataRetentionResetOnNewActivity"),
            "dataRetentionTtl": obj.get("dataRetentionTtl"),
            "defaultProfileId": obj.get("defaultProfileId"),
            "id": obj.get("id"),
            "industryVertical": obj.get("industryVertical"),
            "internalWebPropertyId": obj.get("internalWebPropertyId"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'analytics#webproperty',
            "level": obj.get("level"),
            "name": obj.get("name"),
            "parentLink": WebpropertyParentLink.from_dict(obj["parentLink"]) if obj.get("parentLink") is not None else None,
            "permissions": WebpropertyPermissions.from_dict(obj["permissions"]) if obj.get("permissions") is not None else None,
            "profileCount": obj.get("profileCount"),
            "selfLink": obj.get("selfLink"),
            "starred": obj.get("starred"),
            "updated": obj.get("updated"),
            "websiteUrl": obj.get("websiteUrl")
        })
        return _obj



# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FilterAdvancedDetails(BaseModel):
    """
    Details for the filter of the type ADVANCED.
    """ # noqa: E501
    case_sensitive: Optional[StrictBool] = Field(default=None, description="Indicates if the filter expressions are case sensitive.", alias="caseSensitive")
    extract_a: Optional[StrictStr] = Field(default=None, description="Expression to extract from field A.", alias="extractA")
    extract_b: Optional[StrictStr] = Field(default=None, description="Expression to extract from field B.", alias="extractB")
    field_a: Optional[StrictStr] = Field(default=None, description="Field A.", alias="fieldA")
    field_a_index: Optional[StrictInt] = Field(default=None, description="The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION.", alias="fieldAIndex")
    field_a_required: Optional[StrictBool] = Field(default=None, description="Indicates if field A is required to match.", alias="fieldARequired")
    field_b: Optional[StrictStr] = Field(default=None, description="Field B.", alias="fieldB")
    field_b_index: Optional[StrictInt] = Field(default=None, description="The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION.", alias="fieldBIndex")
    field_b_required: Optional[StrictBool] = Field(default=None, description="Indicates if field B is required to match.", alias="fieldBRequired")
    output_constructor: Optional[StrictStr] = Field(default=None, description="Expression used to construct the output value.", alias="outputConstructor")
    output_to_field: Optional[StrictStr] = Field(default=None, description="Output field.", alias="outputToField")
    output_to_field_index: Optional[StrictInt] = Field(default=None, description="The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION.", alias="outputToFieldIndex")
    override_output_field: Optional[StrictBool] = Field(default=None, description="Indicates if the existing value of the output field, if any, should be overridden by the output expression.", alias="overrideOutputField")
    __properties: ClassVar[List[str]] = ["caseSensitive", "extractA", "extractB", "fieldA", "fieldAIndex", "fieldARequired", "fieldB", "fieldBIndex", "fieldBRequired", "outputConstructor", "outputToField", "outputToFieldIndex", "overrideOutputField"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilterAdvancedDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilterAdvancedDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "caseSensitive": obj.get("caseSensitive"),
            "extractA": obj.get("extractA"),
            "extractB": obj.get("extractB"),
            "fieldA": obj.get("fieldA"),
            "fieldAIndex": obj.get("fieldAIndex"),
            "fieldARequired": obj.get("fieldARequired"),
            "fieldB": obj.get("fieldB"),
            "fieldBIndex": obj.get("fieldBIndex"),
            "fieldBRequired": obj.get("fieldBRequired"),
            "outputConstructor": obj.get("outputConstructor"),
            "outputToField": obj.get("outputToField"),
            "outputToFieldIndex": obj.get("outputToFieldIndex"),
            "overrideOutputField": obj.get("overrideOutputField")
        })
        return _obj



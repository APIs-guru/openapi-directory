# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ga_data_profile_info import GaDataProfileInfo
from openapi_client.models.ga_data_query import GaDataQuery
from openapi_client.models.mcf_data_column_headers_inner import McfDataColumnHeadersInner
from openapi_client.models.mcf_data_rows_inner_inner import McfDataRowsInnerInner
from typing import Optional, Set
from typing_extensions import Self

class McfData(BaseModel):
    """
    Multi-Channel Funnels data for a given view (profile).
    """ # noqa: E501
    column_headers: Optional[List[McfDataColumnHeadersInner]] = Field(default=None, description="Column headers that list dimension names followed by the metric names. The order of dimensions and metrics is same as specified in the request.", alias="columnHeaders")
    contains_sampled_data: Optional[StrictBool] = Field(default=None, description="Determines if the Analytics data contains sampled data.", alias="containsSampledData")
    id: Optional[StrictStr] = Field(default=None, description="Unique ID for this data response.")
    items_per_page: Optional[StrictInt] = Field(default=None, description="The maximum number of rows the response can contain, regardless of the actual number of rows returned. Its value ranges from 1 to 10,000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.", alias="itemsPerPage")
    kind: Optional[StrictStr] = Field(default='analytics#mcfData', description="Resource type.")
    next_link: Optional[StrictStr] = Field(default=None, description="Link to next page for this Analytics data query.", alias="nextLink")
    previous_link: Optional[StrictStr] = Field(default=None, description="Link to previous page for this Analytics data query.", alias="previousLink")
    profile_info: Optional[GaDataProfileInfo] = Field(default=None, alias="profileInfo")
    query: Optional[GaDataQuery] = None
    rows: Optional[List[List[McfDataRowsInnerInner]]] = Field(default=None, description="Analytics data rows, where each row contains a list of dimension values followed by the metric values. The order of dimensions and metrics is same as specified in the request.")
    sample_size: Optional[StrictStr] = Field(default=None, description="The number of samples used to calculate the result.", alias="sampleSize")
    sample_space: Optional[StrictStr] = Field(default=None, description="Total size of the sample space from which the samples were selected.", alias="sampleSpace")
    self_link: Optional[StrictStr] = Field(default=None, description="Link to this page.", alias="selfLink")
    total_results: Optional[StrictInt] = Field(default=None, description="The total number of rows for the query, regardless of the number of rows in the response.", alias="totalResults")
    totals_for_all_results: Optional[Dict[str, StrictStr]] = Field(default=None, description="Total values for the requested metrics over all the results, not just the results returned in this response. The order of the metric totals is same as the metric order specified in the request.", alias="totalsForAllResults")
    __properties: ClassVar[List[str]] = ["columnHeaders", "containsSampledData", "id", "itemsPerPage", "kind", "nextLink", "previousLink", "profileInfo", "query", "rows", "sampleSize", "sampleSpace", "selfLink", "totalResults", "totalsForAllResults"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of McfData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in column_headers (list)
        _items = []
        if self.column_headers:
            for _item_column_headers in self.column_headers:
                if _item_column_headers:
                    _items.append(_item_column_headers.to_dict())
            _dict['columnHeaders'] = _items
        # override the default output from pydantic by calling `to_dict()` of profile_info
        if self.profile_info:
            _dict['profileInfo'] = self.profile_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rows (list of list)
        _items = []
        if self.rows:
            for _item_rows in self.rows:
                if _item_rows:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item_rows if _inner_item is not None]
                    )
            _dict['rows'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of McfData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "columnHeaders": [McfDataColumnHeadersInner.from_dict(_item) for _item in obj["columnHeaders"]] if obj.get("columnHeaders") is not None else None,
            "containsSampledData": obj.get("containsSampledData"),
            "id": obj.get("id"),
            "itemsPerPage": obj.get("itemsPerPage"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'analytics#mcfData',
            "nextLink": obj.get("nextLink"),
            "previousLink": obj.get("previousLink"),
            "profileInfo": GaDataProfileInfo.from_dict(obj["profileInfo"]) if obj.get("profileInfo") is not None else None,
            "query": GaDataQuery.from_dict(obj["query"]) if obj.get("query") is not None else None,
            "rows": [
                    [McfDataRowsInnerInner.from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj["rows"]
                ] if obj.get("rows") is not None else None,
            "sampleSize": obj.get("sampleSize"),
            "sampleSpace": obj.get("sampleSpace"),
            "selfLink": obj.get("selfLink"),
            "totalResults": obj.get("totalResults"),
            "totalsForAllResults": obj.get("totalsForAllResults")
        })
        return _obj



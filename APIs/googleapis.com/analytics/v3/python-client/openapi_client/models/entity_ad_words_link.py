# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ad_words_account import AdWordsAccount
from openapi_client.models.entity_ad_words_link_entity import EntityAdWordsLinkEntity
from typing import Optional, Set
from typing_extensions import Self

class EntityAdWordsLink(BaseModel):
    """
    JSON template for Analytics Entity Google Ads Link.
    """ # noqa: E501
    ad_words_accounts: Optional[List[AdWordsAccount]] = Field(default=None, description="A list of Google Ads client accounts. These cannot be MCC accounts. This field is required when creating a Google Ads link. It cannot be empty.", alias="adWordsAccounts")
    entity: Optional[EntityAdWordsLinkEntity] = None
    id: Optional[StrictStr] = Field(default=None, description="Entity Google Ads link ID")
    kind: Optional[StrictStr] = Field(default='analytics#entityAdWordsLink', description="Resource type for entity Google Ads link.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the link. This field is required when creating a Google Ads link.")
    profile_ids: Optional[List[StrictStr]] = Field(default=None, description="IDs of linked Views (Profiles) represented as strings.", alias="profileIds")
    self_link: Optional[StrictStr] = Field(default=None, description="URL link for this Google Analytics - Google Ads link.", alias="selfLink")
    __properties: ClassVar[List[str]] = ["adWordsAccounts", "entity", "id", "kind", "name", "profileIds", "selfLink"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EntityAdWordsLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ad_words_accounts (list)
        _items = []
        if self.ad_words_accounts:
            for _item_ad_words_accounts in self.ad_words_accounts:
                if _item_ad_words_accounts:
                    _items.append(_item_ad_words_accounts.to_dict())
            _dict['adWordsAccounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict['entity'] = self.entity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EntityAdWordsLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adWordsAccounts": [AdWordsAccount.from_dict(_item) for _item in obj["adWordsAccounts"]] if obj.get("adWordsAccounts") is not None else None,
            "entity": EntityAdWordsLinkEntity.from_dict(obj["entity"]) if obj.get("entity") is not None else None,
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'analytics#entityAdWordsLink',
            "name": obj.get("name"),
            "profileIds": obj.get("profileIds"),
            "selfLink": obj.get("selfLink")
        })
        return _obj



# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.web_property_summary import WebPropertySummary
from typing import Optional, Set
from typing_extensions import Self

class AccountSummary(BaseModel):
    """
    JSON template for an Analytics AccountSummary. An AccountSummary is a lightweight tree comprised of properties/profiles.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Account ID.")
    kind: Optional[StrictStr] = Field(default='analytics#accountSummary', description="Resource type for Analytics AccountSummary.")
    name: Optional[StrictStr] = Field(default=None, description="Account name.")
    starred: Optional[StrictBool] = Field(default=None, description="Indicates whether this account is starred or not.")
    web_properties: Optional[List[WebPropertySummary]] = Field(default=None, description="List of web properties under this account.", alias="webProperties")
    __properties: ClassVar[List[str]] = ["id", "kind", "name", "starred", "webProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in web_properties (list)
        _items = []
        if self.web_properties:
            for _item_web_properties in self.web_properties:
                if _item_web_properties:
                    _items.append(_item_web_properties.to_dict())
            _dict['webProperties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'analytics#accountSummary',
            "name": obj.get("name"),
            "starred": obj.get("starred"),
            "webProperties": [WebPropertySummary.from_dict(_item) for _item in obj["webProperties"]] if obj.get("webProperties") is not None else None
        })
        return _obj



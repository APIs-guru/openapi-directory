# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.profile_child_link import ProfileChildLink
from openapi_client.models.profile_parent_link import ProfileParentLink
from openapi_client.models.profile_permissions import ProfilePermissions
from typing import Optional, Set
from typing_extensions import Self

class Profile(BaseModel):
    """
    JSON template for an Analytics view (profile).
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID to which this view (profile) belongs.", alias="accountId")
    bot_filtering_enabled: Optional[StrictBool] = Field(default=None, description="Indicates whether bot filtering is enabled for this view (profile).", alias="botFilteringEnabled")
    child_link: Optional[ProfileChildLink] = Field(default=None, alias="childLink")
    created: Optional[datetime] = Field(default=None, description="Time this view (profile) was created.")
    currency: Optional[StrictStr] = Field(default=None, description="The currency type associated with this view (profile), defaults to USD. The supported values are: USD, JPY, EUR, GBP, AUD, KRW, BRL, CNY, DKK, RUB, SEK, NOK, PLN, TRY, TWD, HKD, THB, IDR, ARS, MXN, VND, PHP, INR, CHF, CAD, CZK, NZD, HUF, BGN, LTL, ZAR, UAH, AED, BOB, CLP, COP, EGP, HRK, ILS, MAD, MYR, PEN, PKR, RON, RSD, SAR, SGD, VEF, LVL")
    default_page: Optional[StrictStr] = Field(default=None, description="Default page for this view (profile).", alias="defaultPage")
    e_commerce_tracking: Optional[StrictBool] = Field(default=None, description="Indicates whether ecommerce tracking is enabled for this view (profile).", alias="eCommerceTracking")
    enhanced_e_commerce_tracking: Optional[StrictBool] = Field(default=None, description="Indicates whether enhanced ecommerce tracking is enabled for this view (profile). This property can only be enabled if ecommerce tracking is enabled.", alias="enhancedECommerceTracking")
    exclude_query_parameters: Optional[StrictStr] = Field(default=None, description="The query parameters that are excluded from this view (profile).", alias="excludeQueryParameters")
    id: Optional[StrictStr] = Field(default=None, description="View (Profile) ID.")
    internal_web_property_id: Optional[StrictStr] = Field(default=None, description="Internal ID for the web property to which this view (profile) belongs.", alias="internalWebPropertyId")
    kind: Optional[StrictStr] = Field(default='analytics#profile', description="Resource type for Analytics view (profile).")
    name: Optional[StrictStr] = Field(default=None, description="Name of this view (profile).")
    parent_link: Optional[ProfileParentLink] = Field(default=None, alias="parentLink")
    permissions: Optional[ProfilePermissions] = None
    self_link: Optional[StrictStr] = Field(default=None, description="Link for this view (profile).", alias="selfLink")
    site_search_category_parameters: Optional[StrictStr] = Field(default=None, description="Site search category parameters for this view (profile).", alias="siteSearchCategoryParameters")
    site_search_query_parameters: Optional[StrictStr] = Field(default=None, description="The site search query parameters for this view (profile).", alias="siteSearchQueryParameters")
    starred: Optional[StrictBool] = Field(default=None, description="Indicates whether this view (profile) is starred or not.")
    strip_site_search_category_parameters: Optional[StrictBool] = Field(default=None, description="Whether or not Analytics will strip search category parameters from the URLs in your reports.", alias="stripSiteSearchCategoryParameters")
    strip_site_search_query_parameters: Optional[StrictBool] = Field(default=None, description="Whether or not Analytics will strip search query parameters from the URLs in your reports.", alias="stripSiteSearchQueryParameters")
    timezone: Optional[StrictStr] = Field(default=None, description="Time zone for which this view (profile) has been configured. Time zones are identified by strings from the TZ database.")
    type: Optional[StrictStr] = Field(default=None, description="View (Profile) type. Supported types: WEB or APP.")
    updated: Optional[datetime] = Field(default=None, description="Time this view (profile) was last modified.")
    web_property_id: Optional[StrictStr] = Field(default=None, description="Web property ID of the form UA-XXXXX-YY to which this view (profile) belongs.", alias="webPropertyId")
    website_url: Optional[StrictStr] = Field(default=None, description="Website URL for this view (profile).", alias="websiteUrl")
    __properties: ClassVar[List[str]] = ["accountId", "botFilteringEnabled", "childLink", "created", "currency", "defaultPage", "eCommerceTracking", "enhancedECommerceTracking", "excludeQueryParameters", "id", "internalWebPropertyId", "kind", "name", "parentLink", "permissions", "selfLink", "siteSearchCategoryParameters", "siteSearchQueryParameters", "starred", "stripSiteSearchCategoryParameters", "stripSiteSearchQueryParameters", "timezone", "type", "updated", "webPropertyId", "websiteUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Profile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "internal_web_property_id",
            "kind",
            "self_link",
            "updated",
            "web_property_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of child_link
        if self.child_link:
            _dict['childLink'] = self.child_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_link
        if self.parent_link:
            _dict['parentLink'] = self.parent_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of permissions
        if self.permissions:
            _dict['permissions'] = self.permissions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Profile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "botFilteringEnabled": obj.get("botFilteringEnabled"),
            "childLink": ProfileChildLink.from_dict(obj["childLink"]) if obj.get("childLink") is not None else None,
            "created": obj.get("created"),
            "currency": obj.get("currency"),
            "defaultPage": obj.get("defaultPage"),
            "eCommerceTracking": obj.get("eCommerceTracking"),
            "enhancedECommerceTracking": obj.get("enhancedECommerceTracking"),
            "excludeQueryParameters": obj.get("excludeQueryParameters"),
            "id": obj.get("id"),
            "internalWebPropertyId": obj.get("internalWebPropertyId"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'analytics#profile',
            "name": obj.get("name"),
            "parentLink": ProfileParentLink.from_dict(obj["parentLink"]) if obj.get("parentLink") is not None else None,
            "permissions": ProfilePermissions.from_dict(obj["permissions"]) if obj.get("permissions") is not None else None,
            "selfLink": obj.get("selfLink"),
            "siteSearchCategoryParameters": obj.get("siteSearchCategoryParameters"),
            "siteSearchQueryParameters": obj.get("siteSearchQueryParameters"),
            "starred": obj.get("starred"),
            "stripSiteSearchCategoryParameters": obj.get("stripSiteSearchCategoryParameters"),
            "stripSiteSearchQueryParameters": obj.get("stripSiteSearchQueryParameters"),
            "timezone": obj.get("timezone"),
            "type": obj.get("type"),
            "updated": obj.get("updated"),
            "webPropertyId": obj.get("webPropertyId"),
            "websiteUrl": obj.get("websiteUrl")
        })
        return _obj



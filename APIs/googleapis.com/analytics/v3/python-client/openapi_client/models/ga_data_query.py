# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GaDataQuery(BaseModel):
    """
    Analytics data request query parameters.
    """ # noqa: E501
    dimensions: Optional[StrictStr] = Field(default=None, description="List of analytics dimensions.")
    end_date: Optional[StrictStr] = Field(default=None, description="End date.", alias="end-date")
    filters: Optional[StrictStr] = Field(default=None, description="Comma-separated list of dimension or metric filters.")
    ids: Optional[StrictStr] = Field(default=None, description="Unique table ID.")
    max_results: Optional[StrictInt] = Field(default=None, description="Maximum results per page.", alias="max-results")
    metrics: Optional[List[StrictStr]] = Field(default=None, description="List of analytics metrics.")
    sampling_level: Optional[StrictStr] = Field(default=None, description="Desired sampling level", alias="samplingLevel")
    segment: Optional[StrictStr] = Field(default=None, description="Analytics advanced segment.")
    sort: Optional[List[StrictStr]] = Field(default=None, description="List of dimensions or metrics based on which Analytics data is sorted.")
    start_date: Optional[StrictStr] = Field(default=None, description="Start date.", alias="start-date")
    start_index: Optional[StrictInt] = Field(default=None, description="Start index.", alias="start-index")
    __properties: ClassVar[List[str]] = ["dimensions", "end-date", "filters", "ids", "max-results", "metrics", "samplingLevel", "segment", "sort", "start-date", "start-index"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GaDataQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GaDataQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dimensions": obj.get("dimensions"),
            "end-date": obj.get("end-date"),
            "filters": obj.get("filters"),
            "ids": obj.get("ids"),
            "max-results": obj.get("max-results"),
            "metrics": obj.get("metrics"),
            "samplingLevel": obj.get("samplingLevel"),
            "segment": obj.get("segment"),
            "sort": obj.get("sort"),
            "start-date": obj.get("start-date"),
            "start-index": obj.get("start-index")
        })
        return _obj



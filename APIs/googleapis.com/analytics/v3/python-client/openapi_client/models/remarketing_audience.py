# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.linked_foreign_account import LinkedForeignAccount
from openapi_client.models.remarketing_audience_audience_definition import RemarketingAudienceAudienceDefinition
from openapi_client.models.remarketing_audience_state_based_audience_definition import RemarketingAudienceStateBasedAudienceDefinition
from typing import Optional, Set
from typing_extensions import Self

class RemarketingAudience(BaseModel):
    """
    JSON template for an Analytics remarketing audience.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID to which this remarketing audience belongs.", alias="accountId")
    audience_definition: Optional[RemarketingAudienceAudienceDefinition] = Field(default=None, alias="audienceDefinition")
    audience_type: Optional[StrictStr] = Field(default=None, description="The type of audience, either SIMPLE or STATE_BASED.", alias="audienceType")
    created: Optional[datetime] = Field(default=None, description="Time this remarketing audience was created.")
    description: Optional[StrictStr] = Field(default=None, description="The description of this remarketing audience.")
    id: Optional[StrictStr] = Field(default=None, description="Remarketing Audience ID.")
    internal_web_property_id: Optional[StrictStr] = Field(default=None, description="Internal ID for the web property to which this remarketing audience belongs.", alias="internalWebPropertyId")
    kind: Optional[StrictStr] = Field(default='analytics#remarketingAudience', description="Collection type.")
    linked_ad_accounts: Optional[List[LinkedForeignAccount]] = Field(default=None, description="The linked ad accounts associated with this remarketing audience. A remarketing audience can have only one linkedAdAccount currently.", alias="linkedAdAccounts")
    linked_views: Optional[List[StrictStr]] = Field(default=None, description="The views (profiles) that this remarketing audience is linked to.", alias="linkedViews")
    name: Optional[StrictStr] = Field(default=None, description="The name of this remarketing audience.")
    state_based_audience_definition: Optional[RemarketingAudienceStateBasedAudienceDefinition] = Field(default=None, alias="stateBasedAudienceDefinition")
    updated: Optional[datetime] = Field(default=None, description="Time this remarketing audience was last modified.")
    web_property_id: Optional[StrictStr] = Field(default=None, description="Web property ID of the form UA-XXXXX-YY to which this remarketing audience belongs.", alias="webPropertyId")
    __properties: ClassVar[List[str]] = ["accountId", "audienceDefinition", "audienceType", "created", "description", "id", "internalWebPropertyId", "kind", "linkedAdAccounts", "linkedViews", "name", "stateBasedAudienceDefinition", "updated", "webPropertyId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RemarketingAudience from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "description",
            "internal_web_property_id",
            "updated",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audience_definition
        if self.audience_definition:
            _dict['audienceDefinition'] = self.audience_definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in linked_ad_accounts (list)
        _items = []
        if self.linked_ad_accounts:
            for _item_linked_ad_accounts in self.linked_ad_accounts:
                if _item_linked_ad_accounts:
                    _items.append(_item_linked_ad_accounts.to_dict())
            _dict['linkedAdAccounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of state_based_audience_definition
        if self.state_based_audience_definition:
            _dict['stateBasedAudienceDefinition'] = self.state_based_audience_definition.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RemarketingAudience from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "audienceDefinition": RemarketingAudienceAudienceDefinition.from_dict(obj["audienceDefinition"]) if obj.get("audienceDefinition") is not None else None,
            "audienceType": obj.get("audienceType"),
            "created": obj.get("created"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "internalWebPropertyId": obj.get("internalWebPropertyId"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'analytics#remarketingAudience',
            "linkedAdAccounts": [LinkedForeignAccount.from_dict(_item) for _item in obj["linkedAdAccounts"]] if obj.get("linkedAdAccounts") is not None else None,
            "linkedViews": obj.get("linkedViews"),
            "name": obj.get("name"),
            "stateBasedAudienceDefinition": RemarketingAudienceStateBasedAudienceDefinition.from_dict(obj["stateBasedAudienceDefinition"]) if obj.get("stateBasedAudienceDefinition") is not None else None,
            "updated": obj.get("updated"),
            "webPropertyId": obj.get("webPropertyId")
        })
        return _obj



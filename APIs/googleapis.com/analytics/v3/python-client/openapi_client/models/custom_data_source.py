# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.custom_data_source_child_link import CustomDataSourceChildLink
from openapi_client.models.custom_data_source_parent_link import CustomDataSourceParentLink
from typing import Optional, Set
from typing_extensions import Self

class CustomDataSource(BaseModel):
    """
    JSON template for an Analytics custom data source.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID to which this custom data source belongs.", alias="accountId")
    child_link: Optional[CustomDataSourceChildLink] = Field(default=None, alias="childLink")
    created: Optional[datetime] = Field(default=None, description="Time this custom data source was created.")
    description: Optional[StrictStr] = Field(default=None, description="Description of custom data source.")
    id: Optional[StrictStr] = Field(default=None, description="Custom data source ID.")
    import_behavior: Optional[StrictStr] = Field(default=None, alias="importBehavior")
    kind: Optional[StrictStr] = Field(default='analytics#customDataSource', description="Resource type for Analytics custom data source.")
    name: Optional[StrictStr] = Field(default=None, description="Name of this custom data source.")
    parent_link: Optional[CustomDataSourceParentLink] = Field(default=None, alias="parentLink")
    profiles_linked: Optional[List[StrictStr]] = Field(default=None, description="IDs of views (profiles) linked to the custom data source.", alias="profilesLinked")
    var_schema: Optional[List[StrictStr]] = Field(default=None, description="Collection of schema headers of the custom data source.", alias="schema")
    self_link: Optional[StrictStr] = Field(default=None, description="Link for this Analytics custom data source.", alias="selfLink")
    type: Optional[StrictStr] = Field(default=None, description="Type of the custom data source.")
    updated: Optional[datetime] = Field(default=None, description="Time this custom data source was last modified.")
    upload_type: Optional[StrictStr] = Field(default=None, description="Upload type of the custom data source.", alias="uploadType")
    web_property_id: Optional[StrictStr] = Field(default=None, description="Web property ID of the form UA-XXXXX-YY to which this custom data source belongs.", alias="webPropertyId")
    __properties: ClassVar[List[str]] = ["accountId", "childLink", "created", "description", "id", "importBehavior", "kind", "name", "parentLink", "profilesLinked", "schema", "selfLink", "type", "updated", "uploadType", "webPropertyId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomDataSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of child_link
        if self.child_link:
            _dict['childLink'] = self.child_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_link
        if self.parent_link:
            _dict['parentLink'] = self.parent_link.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomDataSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "childLink": CustomDataSourceChildLink.from_dict(obj["childLink"]) if obj.get("childLink") is not None else None,
            "created": obj.get("created"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "importBehavior": obj.get("importBehavior"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'analytics#customDataSource',
            "name": obj.get("name"),
            "parentLink": CustomDataSourceParentLink.from_dict(obj["parentLink"]) if obj.get("parentLink") is not None else None,
            "profilesLinked": obj.get("profilesLinked"),
            "schema": obj.get("schema"),
            "selfLink": obj.get("selfLink"),
            "type": obj.get("type"),
            "updated": obj.get("updated"),
            "uploadType": obj.get("uploadType"),
            "webPropertyId": obj.get("webPropertyId")
        })
        return _obj



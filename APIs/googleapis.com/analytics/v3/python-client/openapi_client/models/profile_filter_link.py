# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.filter_ref import FilterRef
from openapi_client.models.profile_ref import ProfileRef
from typing import Optional, Set
from typing_extensions import Self

class ProfileFilterLink(BaseModel):
    """
    JSON template for an Analytics profile filter link.
    """ # noqa: E501
    filter_ref: Optional[FilterRef] = Field(default=None, alias="filterRef")
    id: Optional[StrictStr] = Field(default=None, description="Profile filter link ID.")
    kind: Optional[StrictStr] = Field(default='analytics#profileFilterLink', description="Resource type for Analytics filter.")
    profile_ref: Optional[ProfileRef] = Field(default=None, alias="profileRef")
    rank: Optional[StrictInt] = Field(default=None, description="The rank of this profile filter link relative to the other filters linked to the same profile. For readonly (i.e., list and get) operations, the rank always starts at 1. For write (i.e., create, update, or delete) operations, you may specify a value between 0 and 255 inclusively, [0, 255]. In order to insert a link at the end of the list, either don't specify a rank or set a rank to a number greater than the largest rank in the list. In order to insert a link to the beginning of the list specify a rank that is less than or equal to 1. The new link will move all existing filters with the same or lower rank down the list. After the link is inserted/updated/deleted all profile filter links will be renumbered starting at 1.")
    self_link: Optional[StrictStr] = Field(default=None, description="Link for this profile filter link.", alias="selfLink")
    __properties: ClassVar[List[str]] = ["filterRef", "id", "kind", "profileRef", "rank", "selfLink"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProfileFilterLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "kind",
            "self_link",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filter_ref
        if self.filter_ref:
            _dict['filterRef'] = self.filter_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profile_ref
        if self.profile_ref:
            _dict['profileRef'] = self.profile_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProfileFilterLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filterRef": FilterRef.from_dict(obj["filterRef"]) if obj.get("filterRef") is not None else None,
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'analytics#profileFilterLink',
            "profileRef": ProfileRef.from_dict(obj["profileRef"]) if obj.get("profileRef") is not None else None,
            "rank": obj.get("rank"),
            "selfLink": obj.get("selfLink")
        })
        return _obj



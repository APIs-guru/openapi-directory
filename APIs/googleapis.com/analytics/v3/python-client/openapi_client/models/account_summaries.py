# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_summary import AccountSummary
from typing import Optional, Set
from typing_extensions import Self

class AccountSummaries(BaseModel):
    """
    An AccountSummary collection lists a summary of accounts, properties and views (profiles) to which the user has access. Each resource in the collection corresponds to a single AccountSummary.
    """ # noqa: E501
    items: Optional[List[AccountSummary]] = Field(default=None, description="A list of AccountSummaries.")
    items_per_page: Optional[StrictInt] = Field(default=None, description="The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.", alias="itemsPerPage")
    kind: Optional[StrictStr] = Field(default='analytics#accountSummaries', description="Collection type.")
    next_link: Optional[StrictStr] = Field(default=None, description="Link to next page for this AccountSummary collection.", alias="nextLink")
    previous_link: Optional[StrictStr] = Field(default=None, description="Link to previous page for this AccountSummary collection.", alias="previousLink")
    start_index: Optional[StrictInt] = Field(default=None, description="The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.", alias="startIndex")
    total_results: Optional[StrictInt] = Field(default=None, description="The total number of results for the query, regardless of the number of results in the response.", alias="totalResults")
    username: Optional[StrictStr] = Field(default=None, description="Email ID of the authenticated user")
    __properties: ClassVar[List[str]] = ["items", "itemsPerPage", "kind", "nextLink", "previousLink", "startIndex", "totalResults", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountSummaries from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountSummaries from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "items": [AccountSummary.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "itemsPerPage": obj.get("itemsPerPage"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'analytics#accountSummaries',
            "nextLink": obj.get("nextLink"),
            "previousLink": obj.get("previousLink"),
            "startIndex": obj.get("startIndex"),
            "totalResults": obj.get("totalResults"),
            "username": obj.get("username")
        })
        return _obj



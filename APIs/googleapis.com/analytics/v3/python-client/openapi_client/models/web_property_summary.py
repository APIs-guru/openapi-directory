# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.profile_summary import ProfileSummary
from typing import Optional, Set
from typing_extensions import Self

class WebPropertySummary(BaseModel):
    """
    JSON template for an Analytics WebPropertySummary. WebPropertySummary returns basic information (i.e., summary) for a web property.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Web property ID of the form UA-XXXXX-YY.")
    internal_web_property_id: Optional[StrictStr] = Field(default=None, description="Internal ID for this web property.", alias="internalWebPropertyId")
    kind: Optional[StrictStr] = Field(default='analytics#webPropertySummary', description="Resource type for Analytics WebPropertySummary.")
    level: Optional[StrictStr] = Field(default=None, description="Level for this web property. Possible values are STANDARD or PREMIUM.")
    name: Optional[StrictStr] = Field(default=None, description="Web property name.")
    profiles: Optional[List[ProfileSummary]] = Field(default=None, description="List of profiles under this web property.")
    starred: Optional[StrictBool] = Field(default=None, description="Indicates whether this web property is starred or not.")
    website_url: Optional[StrictStr] = Field(default=None, description="Website url for this web property.", alias="websiteUrl")
    __properties: ClassVar[List[str]] = ["id", "internalWebPropertyId", "kind", "level", "name", "profiles", "starred", "websiteUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebPropertySummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in profiles (list)
        _items = []
        if self.profiles:
            for _item_profiles in self.profiles:
                if _item_profiles:
                    _items.append(_item_profiles.to_dict())
            _dict['profiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebPropertySummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "internalWebPropertyId": obj.get("internalWebPropertyId"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'analytics#webPropertySummary',
            "level": obj.get("level"),
            "name": obj.get("name"),
            "profiles": [ProfileSummary.from_dict(_item) for _item in obj["profiles"]] if obj.get("profiles") is not None else None,
            "starred": obj.get("starred"),
            "websiteUrl": obj.get("websiteUrl")
        })
        return _obj



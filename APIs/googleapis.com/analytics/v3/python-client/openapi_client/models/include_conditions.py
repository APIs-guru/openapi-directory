# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IncludeConditions(BaseModel):
    """
    JSON template for an Analytics Remarketing Include Conditions.
    """ # noqa: E501
    days_to_look_back: Optional[StrictInt] = Field(default=None, description="The look-back window lets you specify a time frame for evaluating the behavior that qualifies users for your audience. For example, if your filters include users from Central Asia, and Transactions Greater than 2, and you set the look-back window to 14 days, then any user from Central Asia whose cumulative transactions exceed 2 during the last 14 days is added to the audience.", alias="daysToLookBack")
    is_smart_list: Optional[StrictBool] = Field(default=None, description="Boolean indicating whether this segment is a smart list. https://support.google.com/analytics/answer/4628577", alias="isSmartList")
    kind: Optional[StrictStr] = Field(default='analytics#includeConditions', description="Resource type for include conditions.")
    membership_duration_days: Optional[StrictInt] = Field(default=None, description="Number of days (in the range 1 to 540) a user remains in the audience.", alias="membershipDurationDays")
    segment: Optional[StrictStr] = Field(default=None, description="The segment condition that will cause a user to be added to an audience.")
    __properties: ClassVar[List[str]] = ["daysToLookBack", "isSmartList", "kind", "membershipDurationDays", "segment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IncludeConditions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IncludeConditions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "daysToLookBack": obj.get("daysToLookBack"),
            "isSmartList": obj.get("isSmartList"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'analytics#includeConditions',
            "membershipDurationDays": obj.get("membershipDurationDays"),
            "segment": obj.get("segment")
        })
        return _obj



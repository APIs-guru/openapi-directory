# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.filter_advanced_details import FilterAdvancedDetails
from openapi_client.models.filter_expression import FilterExpression
from openapi_client.models.filter_lowercase_details import FilterLowercaseDetails
from openapi_client.models.filter_parent_link import FilterParentLink
from openapi_client.models.filter_search_and_replace_details import FilterSearchAndReplaceDetails
from openapi_client.models.filter_uppercase_details import FilterUppercaseDetails
from typing import Optional, Set
from typing_extensions import Self

class Filter(BaseModel):
    """
    JSON template for an Analytics account filter.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID to which this filter belongs.", alias="accountId")
    advanced_details: Optional[FilterAdvancedDetails] = Field(default=None, alias="advancedDetails")
    created: Optional[datetime] = Field(default=None, description="Time this filter was created.")
    exclude_details: Optional[FilterExpression] = Field(default=None, alias="excludeDetails")
    id: Optional[StrictStr] = Field(default=None, description="Filter ID.")
    include_details: Optional[FilterExpression] = Field(default=None, alias="includeDetails")
    kind: Optional[StrictStr] = Field(default='analytics#filter', description="Resource type for Analytics filter.")
    lowercase_details: Optional[FilterLowercaseDetails] = Field(default=None, alias="lowercaseDetails")
    name: Optional[StrictStr] = Field(default=None, description="Name of this filter.")
    parent_link: Optional[FilterParentLink] = Field(default=None, alias="parentLink")
    search_and_replace_details: Optional[FilterSearchAndReplaceDetails] = Field(default=None, alias="searchAndReplaceDetails")
    self_link: Optional[StrictStr] = Field(default=None, description="Link for this filter.", alias="selfLink")
    type: Optional[StrictStr] = Field(default=None, description="Type of this filter. Possible values are INCLUDE, EXCLUDE, LOWERCASE, UPPERCASE, SEARCH_AND_REPLACE and ADVANCED.")
    updated: Optional[datetime] = Field(default=None, description="Time this filter was last modified.")
    uppercase_details: Optional[FilterUppercaseDetails] = Field(default=None, alias="uppercaseDetails")
    __properties: ClassVar[List[str]] = ["accountId", "advancedDetails", "created", "excludeDetails", "id", "includeDetails", "kind", "lowercaseDetails", "name", "parentLink", "searchAndReplaceDetails", "selfLink", "type", "updated", "uppercaseDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Filter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "kind",
            "self_link",
            "updated",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advanced_details
        if self.advanced_details:
            _dict['advancedDetails'] = self.advanced_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exclude_details
        if self.exclude_details:
            _dict['excludeDetails'] = self.exclude_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of include_details
        if self.include_details:
            _dict['includeDetails'] = self.include_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lowercase_details
        if self.lowercase_details:
            _dict['lowercaseDetails'] = self.lowercase_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_link
        if self.parent_link:
            _dict['parentLink'] = self.parent_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of search_and_replace_details
        if self.search_and_replace_details:
            _dict['searchAndReplaceDetails'] = self.search_and_replace_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of uppercase_details
        if self.uppercase_details:
            _dict['uppercaseDetails'] = self.uppercase_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Filter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "advancedDetails": FilterAdvancedDetails.from_dict(obj["advancedDetails"]) if obj.get("advancedDetails") is not None else None,
            "created": obj.get("created"),
            "excludeDetails": FilterExpression.from_dict(obj["excludeDetails"]) if obj.get("excludeDetails") is not None else None,
            "id": obj.get("id"),
            "includeDetails": FilterExpression.from_dict(obj["includeDetails"]) if obj.get("includeDetails") is not None else None,
            "kind": obj.get("kind") if obj.get("kind") is not None else 'analytics#filter',
            "lowercaseDetails": FilterLowercaseDetails.from_dict(obj["lowercaseDetails"]) if obj.get("lowercaseDetails") is not None else None,
            "name": obj.get("name"),
            "parentLink": FilterParentLink.from_dict(obj["parentLink"]) if obj.get("parentLink") is not None else None,
            "searchAndReplaceDetails": FilterSearchAndReplaceDetails.from_dict(obj["searchAndReplaceDetails"]) if obj.get("searchAndReplaceDetails") is not None else None,
            "selfLink": obj.get("selfLink"),
            "type": obj.get("type"),
            "updated": obj.get("updated"),
            "uppercaseDetails": FilterUppercaseDetails.from_dict(obj["uppercaseDetails"]) if obj.get("uppercaseDetails") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.unsampled_report_cloud_storage_download_details import UnsampledReportCloudStorageDownloadDetails
from openapi_client.models.unsampled_report_drive_download_details import UnsampledReportDriveDownloadDetails
from typing import Optional, Set
from typing_extensions import Self

class UnsampledReport(BaseModel):
    """
    JSON template for Analytics unsampled report resource.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID to which this unsampled report belongs.", alias="accountId")
    cloud_storage_download_details: Optional[UnsampledReportCloudStorageDownloadDetails] = Field(default=None, alias="cloudStorageDownloadDetails")
    created: Optional[datetime] = Field(default=None, description="Time this unsampled report was created.")
    dimensions: Optional[StrictStr] = Field(default=None, description="The dimensions for the unsampled report.")
    download_type: Optional[StrictStr] = Field(default=None, description="The type of download you need to use for the report data file. Possible values include `GOOGLE_DRIVE` and `GOOGLE_CLOUD_STORAGE`. If the value is `GOOGLE_DRIVE`, see the `driveDownloadDetails` field. If the value is `GOOGLE_CLOUD_STORAGE`, see the `cloudStorageDownloadDetails` field.", alias="downloadType")
    drive_download_details: Optional[UnsampledReportDriveDownloadDetails] = Field(default=None, alias="driveDownloadDetails")
    end_date: Optional[StrictStr] = Field(default=None, description="The end date for the unsampled report.", alias="end-date")
    filters: Optional[StrictStr] = Field(default=None, description="The filters for the unsampled report.")
    id: Optional[StrictStr] = Field(default=None, description="Unsampled report ID.")
    kind: Optional[StrictStr] = Field(default='analytics#unsampledReport', description="Resource type for an Analytics unsampled report.")
    metrics: Optional[StrictStr] = Field(default=None, description="The metrics for the unsampled report.")
    profile_id: Optional[StrictStr] = Field(default=None, description="View (Profile) ID to which this unsampled report belongs.", alias="profileId")
    segment: Optional[StrictStr] = Field(default=None, description="The segment for the unsampled report.")
    self_link: Optional[StrictStr] = Field(default=None, description="Link for this unsampled report.", alias="selfLink")
    start_date: Optional[StrictStr] = Field(default=None, description="The start date for the unsampled report.", alias="start-date")
    status: Optional[StrictStr] = Field(default=None, description="Status of this unsampled report. Possible values are PENDING, COMPLETED, or FAILED.")
    title: Optional[StrictStr] = Field(default=None, description="Title of the unsampled report.")
    updated: Optional[datetime] = Field(default=None, description="Time this unsampled report was last modified.")
    web_property_id: Optional[StrictStr] = Field(default=None, description="Web property ID to which this unsampled report belongs. The web property ID is of the form UA-XXXXX-YY.", alias="webPropertyId")
    __properties: ClassVar[List[str]] = ["accountId", "cloudStorageDownloadDetails", "created", "dimensions", "downloadType", "driveDownloadDetails", "end-date", "filters", "id", "kind", "metrics", "profileId", "segment", "selfLink", "start-date", "status", "title", "updated", "webPropertyId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnsampledReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "download_type",
            "kind",
            "self_link",
            "status",
            "updated",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cloud_storage_download_details
        if self.cloud_storage_download_details:
            _dict['cloudStorageDownloadDetails'] = self.cloud_storage_download_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of drive_download_details
        if self.drive_download_details:
            _dict['driveDownloadDetails'] = self.drive_download_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnsampledReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "cloudStorageDownloadDetails": UnsampledReportCloudStorageDownloadDetails.from_dict(obj["cloudStorageDownloadDetails"]) if obj.get("cloudStorageDownloadDetails") is not None else None,
            "created": obj.get("created"),
            "dimensions": obj.get("dimensions"),
            "downloadType": obj.get("downloadType"),
            "driveDownloadDetails": UnsampledReportDriveDownloadDetails.from_dict(obj["driveDownloadDetails"]) if obj.get("driveDownloadDetails") is not None else None,
            "end-date": obj.get("end-date"),
            "filters": obj.get("filters"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'analytics#unsampledReport',
            "metrics": obj.get("metrics"),
            "profileId": obj.get("profileId"),
            "segment": obj.get("segment"),
            "selfLink": obj.get("selfLink"),
            "start-date": obj.get("start-date"),
            "status": obj.get("status"),
            "title": obj.get("title"),
            "updated": obj.get("updated"),
            "webPropertyId": obj.get("webPropertyId")
        })
        return _obj



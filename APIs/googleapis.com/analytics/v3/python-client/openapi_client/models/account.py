# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_child_link import AccountChildLink
from openapi_client.models.account_permissions import AccountPermissions
from typing import Optional, Set
from typing_extensions import Self

class Account(BaseModel):
    """
    JSON template for Analytics account entry.
    """ # noqa: E501
    child_link: Optional[AccountChildLink] = Field(default=None, alias="childLink")
    created: Optional[datetime] = Field(default=None, description="Time the account was created.")
    id: Optional[StrictStr] = Field(default=None, description="Account ID.")
    kind: Optional[StrictStr] = Field(default='analytics#account', description="Resource type for Analytics account.")
    name: Optional[StrictStr] = Field(default=None, description="Account name.")
    permissions: Optional[AccountPermissions] = None
    self_link: Optional[StrictStr] = Field(default=None, description="Link for this account.", alias="selfLink")
    starred: Optional[StrictBool] = Field(default=None, description="Indicates whether this account is starred or not.")
    updated: Optional[datetime] = Field(default=None, description="Time the account was last modified.")
    __properties: ClassVar[List[str]] = ["childLink", "created", "id", "kind", "name", "permissions", "selfLink", "starred", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Account from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of child_link
        if self.child_link:
            _dict['childLink'] = self.child_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of permissions
        if self.permissions:
            _dict['permissions'] = self.permissions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Account from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "childLink": AccountChildLink.from_dict(obj["childLink"]) if obj.get("childLink") is not None else None,
            "created": obj.get("created"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'analytics#account',
            "name": obj.get("name"),
            "permissions": AccountPermissions.from_dict(obj["permissions"]) if obj.get("permissions") is not None else None,
            "selfLink": obj.get("selfLink"),
            "starred": obj.get("starred"),
            "updated": obj.get("updated")
        })
        return _obj



# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AccountTreeRequest(BaseModel):
    """
    JSON template for an Analytics account tree requests. The account tree request is used in the provisioning api to create an account, property, and view (profile). It contains the basic information required to make these fields.
    """ # noqa: E501
    account_name: Optional[StrictStr] = Field(default=None, alias="accountName")
    kind: Optional[StrictStr] = Field(default='analytics#accountTreeRequest', description="Resource type for account ticket.")
    profile_name: Optional[StrictStr] = Field(default=None, alias="profileName")
    timezone: Optional[StrictStr] = None
    webproperty_name: Optional[StrictStr] = Field(default=None, alias="webpropertyName")
    website_url: Optional[StrictStr] = Field(default=None, alias="websiteUrl")
    __properties: ClassVar[List[str]] = ["accountName", "kind", "profileName", "timezone", "webpropertyName", "websiteUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountTreeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountTreeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountName": obj.get("accountName"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'analytics#accountTreeRequest',
            "profileName": obj.get("profileName"),
            "timezone": obj.get("timezone"),
            "webpropertyName": obj.get("webpropertyName"),
            "websiteUrl": obj.get("websiteUrl")
        })
        return _obj



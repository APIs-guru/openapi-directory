# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.remarketing_audiences import RemarketingAudiences

class TestRemarketingAudiences(unittest.TestCase):
    """RemarketingAudiences unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RemarketingAudiences:
        """Test RemarketingAudiences
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RemarketingAudiences`
        """
        model = RemarketingAudiences()
        if include_optional:
            return RemarketingAudiences(
                items = [
                    openapi_client.models.remarketing_audience.RemarketingAudience(
                        account_id = '', 
                        audience_definition = openapi_client.models.remarketing_audience_audience_definition.RemarketingAudience_audienceDefinition(
                            include_conditions = openapi_client.models.include_conditions.IncludeConditions(
                                days_to_look_back = 56, 
                                is_smart_list = True, 
                                kind = 'analytics#includeConditions', 
                                membership_duration_days = 56, 
                                segment = '', ), ), 
                        audience_type = '', 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        description = '', 
                        id = '', 
                        internal_web_property_id = '', 
                        kind = 'analytics#remarketingAudience', 
                        linked_ad_accounts = [
                            openapi_client.models.linked_foreign_account.LinkedForeignAccount(
                                account_id = '', 
                                eligible_for_search = True, 
                                id = '', 
                                internal_web_property_id = '', 
                                kind = 'analytics#linkedForeignAccount', 
                                linked_account_id = '', 
                                remarketing_audience_id = '', 
                                status = '', 
                                type = '', 
                                web_property_id = '', )
                            ], 
                        linked_views = [
                            ''
                            ], 
                        name = '', 
                        state_based_audience_definition = openapi_client.models.remarketing_audience_state_based_audience_definition.RemarketingAudience_stateBasedAudienceDefinition(
                            exclude_conditions = openapi_client.models.remarketing_audience_state_based_audience_definition_exclude_conditions.RemarketingAudience_stateBasedAudienceDefinition_excludeConditions(
                                exclusion_duration = '', 
                                segment = '', ), ), 
                        updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        web_property_id = '', )
                    ],
                items_per_page = 56,
                kind = 'analytics#remarketingAudiences',
                next_link = '',
                previous_link = '',
                start_index = 56,
                total_results = 56,
                username = ''
            )
        else:
            return RemarketingAudiences(
        )
        """

    def testRemarketingAudiences(self):
        """Test RemarketingAudiences"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.goal import Goal

class TestGoal(unittest.TestCase):
    """Goal unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Goal:
        """Test Goal
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Goal`
        """
        model = Goal()
        if include_optional:
            return Goal(
                account_id = '',
                active = True,
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                event_details = openapi_client.models.goal_event_details.Goal_eventDetails(
                    event_conditions = [
                        openapi_client.models.goal_event_details_event_conditions_inner.Goal_eventDetails_eventConditions_inner(
                            comparison_type = '', 
                            comparison_value = '', 
                            expression = '', 
                            match_type = '', 
                            type = '', )
                        ], 
                    use_event_value = True, ),
                id = '',
                internal_web_property_id = '',
                kind = 'analytics#goal',
                name = '',
                parent_link = openapi_client.models.goal_parent_link.Goal_parentLink(
                    href = '', 
                    type = 'analytics#profile', ),
                profile_id = '',
                self_link = '',
                type = '',
                updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                url_destination_details = openapi_client.models.goal_url_destination_details.Goal_urlDestinationDetails(
                    case_sensitive = True, 
                    first_step_required = True, 
                    match_type = '', 
                    steps = [
                        openapi_client.models.goal_url_destination_details_steps_inner.Goal_urlDestinationDetails_steps_inner(
                            name = '', 
                            number = 56, 
                            url = '', )
                        ], 
                    url = '', ),
                value = 1.337,
                visit_num_pages_details = openapi_client.models.goal_visit_num_pages_details.Goal_visitNumPagesDetails(
                    comparison_type = '', 
                    comparison_value = '', ),
                visit_time_on_site_details = openapi_client.models.goal_visit_time_on_site_details.Goal_visitTimeOnSiteDetails(
                    comparison_type = '', 
                    comparison_value = '', ),
                web_property_id = ''
            )
        else:
            return Goal(
        )
        """

    def testGoal(self):
        """Test Goal"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

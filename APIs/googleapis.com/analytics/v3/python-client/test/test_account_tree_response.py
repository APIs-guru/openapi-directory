# coding: utf-8

"""
    Google Analytics API

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.account_tree_response import AccountTreeResponse

class TestAccountTreeResponse(unittest.TestCase):
    """AccountTreeResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AccountTreeResponse:
        """Test AccountTreeResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AccountTreeResponse`
        """
        model = AccountTreeResponse()
        if include_optional:
            return AccountTreeResponse(
                account = openapi_client.models.account.Account(
                    child_link = openapi_client.models.account_child_link.Account_childLink(
                        href = '', 
                        type = 'analytics#webproperties', ), 
                    created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    id = '', 
                    kind = 'analytics#account', 
                    name = '', 
                    permissions = openapi_client.models.account_permissions.Account_permissions(
                        effective = [
                            ''
                            ], ), 
                    self_link = '', 
                    starred = True, 
                    updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                kind = 'analytics#accountTreeResponse',
                profile = openapi_client.models.profile.Profile(
                    account_id = '', 
                    bot_filtering_enabled = True, 
                    child_link = openapi_client.models.profile_child_link.Profile_childLink(
                        href = '', 
                        type = 'analytics#goals', ), 
                    created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    currency = '', 
                    default_page = '', 
                    e_commerce_tracking = True, 
                    enhanced_e_commerce_tracking = True, 
                    exclude_query_parameters = '', 
                    id = '', 
                    internal_web_property_id = '', 
                    kind = 'analytics#profile', 
                    name = '', 
                    parent_link = openapi_client.models.profile_parent_link.Profile_parentLink(
                        href = '', 
                        type = 'analytics#webproperty', ), 
                    permissions = openapi_client.models.profile_permissions.Profile_permissions(
                        effective = [
                            ''
                            ], ), 
                    self_link = '', 
                    site_search_category_parameters = '', 
                    site_search_query_parameters = '', 
                    starred = True, 
                    strip_site_search_category_parameters = True, 
                    strip_site_search_query_parameters = True, 
                    timezone = '', 
                    type = '', 
                    updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    web_property_id = '', 
                    website_url = '', ),
                webproperty = openapi_client.models.webproperty.Webproperty(
                    account_id = '', 
                    child_link = openapi_client.models.webproperty_child_link.Webproperty_childLink(
                        href = '', 
                        type = 'analytics#profiles', ), 
                    created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    data_retention_reset_on_new_activity = True, 
                    data_retention_ttl = '', 
                    default_profile_id = '', 
                    id = '', 
                    industry_vertical = '', 
                    internal_web_property_id = '', 
                    kind = 'analytics#webproperty', 
                    level = '', 
                    name = '', 
                    parent_link = openapi_client.models.webproperty_parent_link.Webproperty_parentLink(
                        href = '', 
                        type = 'analytics#account', ), 
                    permissions = openapi_client.models.webproperty_permissions.Webproperty_permissions(
                        effective = [
                            ''
                            ], ), 
                    profile_count = 56, 
                    self_link = '', 
                    starred = True, 
                    updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    website_url = '', )
            )
        else:
            return AccountTreeResponse(
        )
        """

    def testAccountTreeResponse(self):
        """Test AccountTreeResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Google Analytics

    Views and manages your Google Analytics data.

    The version of the OpenAPI document: v2.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DataApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def analytics_data_get(
        self,
        ids: Annotated[StrictStr, Field(description="Unique table ID for retrieving report data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.")],
        start_date: Annotated[StrictStr, Field(description="Start date for fetching report data. All requests should specify a start date formatted as YYYY-MM-DD.")],
        end_date: Annotated[StrictStr, Field(description="End date for fetching report data. All requests should specify an end date formatted as YYYY-MM-DD.")],
        metrics: Annotated[StrictStr, Field(description="A comma-separated list of Analytics metrics. E.g., 'ga:sessions,ga:pageviews'. At least one metric must be specified to retrieve a valid Analytics report.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        dimensions: Annotated[Optional[StrictStr], Field(description="A comma-separated list of Analytics dimensions. E.g., 'ga:browser,ga:city'.")] = None,
        filters: Annotated[Optional[StrictStr], Field(description="A comma-separated list of dimension or metric filters to be applied to the report data.")] = None,
        max_results: Annotated[Optional[StrictInt], Field(description="The maximum number of entries to include in this feed.")] = None,
        segment: Annotated[Optional[StrictStr], Field(description="An Analytics advanced segment to be applied to the report data.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="A comma-separated list of dimensions or metrics that determine the sort order for the report data.")] = None,
        start_index: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """analytics_data_get

        Returns Analytics report data for a view (profile).

        :param ids: Unique table ID for retrieving report data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID. (required)
        :type ids: str
        :param start_date: Start date for fetching report data. All requests should specify a start date formatted as YYYY-MM-DD. (required)
        :type start_date: str
        :param end_date: End date for fetching report data. All requests should specify an end date formatted as YYYY-MM-DD. (required)
        :type end_date: str
        :param metrics: A comma-separated list of Analytics metrics. E.g., 'ga:sessions,ga:pageviews'. At least one metric must be specified to retrieve a valid Analytics report. (required)
        :type metrics: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param dimensions: A comma-separated list of Analytics dimensions. E.g., 'ga:browser,ga:city'.
        :type dimensions: str
        :param filters: A comma-separated list of dimension or metric filters to be applied to the report data.
        :type filters: str
        :param max_results: The maximum number of entries to include in this feed.
        :type max_results: int
        :param segment: An Analytics advanced segment to be applied to the report data.
        :type segment: str
        :param sort: A comma-separated list of dimensions or metrics that determine the sort order for the report data.
        :type sort: str
        :param start_index: An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.
        :type start_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_data_get_serialize(
            ids=ids,
            start_date=start_date,
            end_date=end_date,
            metrics=metrics,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            user_ip=user_ip,
            dimensions=dimensions,
            filters=filters,
            max_results=max_results,
            segment=segment,
            sort=sort,
            start_index=start_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_data_get_with_http_info(
        self,
        ids: Annotated[StrictStr, Field(description="Unique table ID for retrieving report data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.")],
        start_date: Annotated[StrictStr, Field(description="Start date for fetching report data. All requests should specify a start date formatted as YYYY-MM-DD.")],
        end_date: Annotated[StrictStr, Field(description="End date for fetching report data. All requests should specify an end date formatted as YYYY-MM-DD.")],
        metrics: Annotated[StrictStr, Field(description="A comma-separated list of Analytics metrics. E.g., 'ga:sessions,ga:pageviews'. At least one metric must be specified to retrieve a valid Analytics report.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        dimensions: Annotated[Optional[StrictStr], Field(description="A comma-separated list of Analytics dimensions. E.g., 'ga:browser,ga:city'.")] = None,
        filters: Annotated[Optional[StrictStr], Field(description="A comma-separated list of dimension or metric filters to be applied to the report data.")] = None,
        max_results: Annotated[Optional[StrictInt], Field(description="The maximum number of entries to include in this feed.")] = None,
        segment: Annotated[Optional[StrictStr], Field(description="An Analytics advanced segment to be applied to the report data.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="A comma-separated list of dimensions or metrics that determine the sort order for the report data.")] = None,
        start_index: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """analytics_data_get

        Returns Analytics report data for a view (profile).

        :param ids: Unique table ID for retrieving report data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID. (required)
        :type ids: str
        :param start_date: Start date for fetching report data. All requests should specify a start date formatted as YYYY-MM-DD. (required)
        :type start_date: str
        :param end_date: End date for fetching report data. All requests should specify an end date formatted as YYYY-MM-DD. (required)
        :type end_date: str
        :param metrics: A comma-separated list of Analytics metrics. E.g., 'ga:sessions,ga:pageviews'. At least one metric must be specified to retrieve a valid Analytics report. (required)
        :type metrics: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param dimensions: A comma-separated list of Analytics dimensions. E.g., 'ga:browser,ga:city'.
        :type dimensions: str
        :param filters: A comma-separated list of dimension or metric filters to be applied to the report data.
        :type filters: str
        :param max_results: The maximum number of entries to include in this feed.
        :type max_results: int
        :param segment: An Analytics advanced segment to be applied to the report data.
        :type segment: str
        :param sort: A comma-separated list of dimensions or metrics that determine the sort order for the report data.
        :type sort: str
        :param start_index: An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.
        :type start_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_data_get_serialize(
            ids=ids,
            start_date=start_date,
            end_date=end_date,
            metrics=metrics,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            user_ip=user_ip,
            dimensions=dimensions,
            filters=filters,
            max_results=max_results,
            segment=segment,
            sort=sort,
            start_index=start_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_data_get_without_preload_content(
        self,
        ids: Annotated[StrictStr, Field(description="Unique table ID for retrieving report data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.")],
        start_date: Annotated[StrictStr, Field(description="Start date for fetching report data. All requests should specify a start date formatted as YYYY-MM-DD.")],
        end_date: Annotated[StrictStr, Field(description="End date for fetching report data. All requests should specify an end date formatted as YYYY-MM-DD.")],
        metrics: Annotated[StrictStr, Field(description="A comma-separated list of Analytics metrics. E.g., 'ga:sessions,ga:pageviews'. At least one metric must be specified to retrieve a valid Analytics report.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        dimensions: Annotated[Optional[StrictStr], Field(description="A comma-separated list of Analytics dimensions. E.g., 'ga:browser,ga:city'.")] = None,
        filters: Annotated[Optional[StrictStr], Field(description="A comma-separated list of dimension or metric filters to be applied to the report data.")] = None,
        max_results: Annotated[Optional[StrictInt], Field(description="The maximum number of entries to include in this feed.")] = None,
        segment: Annotated[Optional[StrictStr], Field(description="An Analytics advanced segment to be applied to the report data.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="A comma-separated list of dimensions or metrics that determine the sort order for the report data.")] = None,
        start_index: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_data_get

        Returns Analytics report data for a view (profile).

        :param ids: Unique table ID for retrieving report data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID. (required)
        :type ids: str
        :param start_date: Start date for fetching report data. All requests should specify a start date formatted as YYYY-MM-DD. (required)
        :type start_date: str
        :param end_date: End date for fetching report data. All requests should specify an end date formatted as YYYY-MM-DD. (required)
        :type end_date: str
        :param metrics: A comma-separated list of Analytics metrics. E.g., 'ga:sessions,ga:pageviews'. At least one metric must be specified to retrieve a valid Analytics report. (required)
        :type metrics: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param dimensions: A comma-separated list of Analytics dimensions. E.g., 'ga:browser,ga:city'.
        :type dimensions: str
        :param filters: A comma-separated list of dimension or metric filters to be applied to the report data.
        :type filters: str
        :param max_results: The maximum number of entries to include in this feed.
        :type max_results: int
        :param segment: An Analytics advanced segment to be applied to the report data.
        :type segment: str
        :param sort: A comma-separated list of dimensions or metrics that determine the sort order for the report data.
        :type sort: str
        :param start_index: An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.
        :type start_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_data_get_serialize(
            ids=ids,
            start_date=start_date,
            end_date=end_date,
            metrics=metrics,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            user_ip=user_ip,
            dimensions=dimensions,
            filters=filters,
            max_results=max_results,
            segment=segment,
            sort=sort,
            start_index=start_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_data_get_serialize(
        self,
        ids,
        start_date,
        end_date,
        metrics,
        alt,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        user_ip,
        dimensions,
        filters,
        max_results,
        segment,
        sort,
        start_index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if user_ip is not None:
            
            _query_params.append(('userIp', user_ip))
            
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        if start_date is not None:
            
            _query_params.append(('start-date', start_date))
            
        if end_date is not None:
            
            _query_params.append(('end-date', end_date))
            
        if metrics is not None:
            
            _query_params.append(('metrics', metrics))
            
        if dimensions is not None:
            
            _query_params.append(('dimensions', dimensions))
            
        if filters is not None:
            
            _query_params.append(('filters', filters))
            
        if max_results is not None:
            
            _query_params.append(('max-results', max_results))
            
        if segment is not None:
            
            _query_params.append(('segment', segment))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if start_index is not None:
            
            _query_params.append(('start-index', start_index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Cloud Key Management Service (KMS) API

    Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_crypto_keys_response import ListCryptoKeysResponse

class TestListCryptoKeysResponse(unittest.TestCase):
    """ListCryptoKeysResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListCryptoKeysResponse:
        """Test ListCryptoKeysResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListCryptoKeysResponse`
        """
        model = ListCryptoKeysResponse()
        if include_optional:
            return ListCryptoKeysResponse(
                crypto_keys = [
                    openapi_client.models.crypto_key.CryptoKey(
                        create_time = '', 
                        crypto_key_backend = '', 
                        destroy_scheduled_duration = '', 
                        import_only = True, 
                        labels = {
                            'key' : ''
                            }, 
                        name = '', 
                        next_rotation_time = '', 
                        primary = openapi_client.models.crypto_key_version.CryptoKeyVersion(
                            algorithm = 'CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED', 
                            attestation = openapi_client.models.key_operation_attestation.KeyOperationAttestation(
                                cert_chains = openapi_client.models.certificate_chains.CertificateChains(
                                    cavium_certs = [
                                        ''
                                        ], 
                                    google_card_certs = [
                                        ''
                                        ], 
                                    google_partition_certs = [
                                        ''
                                        ], ), 
                                content = 'YQ==', 
                                format = 'ATTESTATION_FORMAT_UNSPECIFIED', ), 
                            create_time = '', 
                            destroy_event_time = '', 
                            destroy_time = '', 
                            external_destruction_failure_reason = '', 
                            external_protection_level_options = openapi_client.models.external_protection_level_options.ExternalProtectionLevelOptions(
                                ekm_connection_key_path = '', 
                                external_key_uri = '', ), 
                            generate_time = '', 
                            generation_failure_reason = '', 
                            import_failure_reason = '', 
                            import_job = '', 
                            import_time = '', 
                            name = '', 
                            protection_level = 'PROTECTION_LEVEL_UNSPECIFIED', 
                            reimport_eligible = True, 
                            state = 'CRYPTO_KEY_VERSION_STATE_UNSPECIFIED', ), 
                        purpose = 'CRYPTO_KEY_PURPOSE_UNSPECIFIED', 
                        rotation_period = '', 
                        version_template = openapi_client.models.crypto_key_version_template.CryptoKeyVersionTemplate(
                            algorithm = 'CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED', 
                            protection_level = 'PROTECTION_LEVEL_UNSPECIFIED', ), )
                    ],
                next_page_token = '',
                total_size = 56
            )
        else:
            return ListCryptoKeysResponse(
        )
        """

    def testListCryptoKeysResponse(self):
        """Test ListCryptoKeysResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Key Management Service (KMS) API

    Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.certificate import Certificate
from typing import Optional, Set
from typing_extensions import Self

class ServiceResolver(BaseModel):
    """
    A ServiceResolver represents an EKM replica that can be reached within an EkmConnection.
    """ # noqa: E501
    endpoint_filter: Optional[StrictStr] = Field(default=None, description="Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.", alias="endpointFilter")
    hostname: Optional[StrictStr] = Field(default=None, description="Required. The hostname of the EKM replica used at TLS and HTTP layers.")
    server_certificates: Optional[List[Certificate]] = Field(default=None, description="Required. A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.", alias="serverCertificates")
    service_directory_service: Optional[StrictStr] = Field(default=None, description="Required. The resource name of the Service Directory service pointing to an EKM replica, in the format `projects/*/locations/*/namespaces/*/services/*`.", alias="serviceDirectoryService")
    __properties: ClassVar[List[str]] = ["endpointFilter", "hostname", "serverCertificates", "serviceDirectoryService"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceResolver from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in server_certificates (list)
        _items = []
        if self.server_certificates:
            for _item_server_certificates in self.server_certificates:
                if _item_server_certificates:
                    _items.append(_item_server_certificates.to_dict())
            _dict['serverCertificates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceResolver from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endpointFilter": obj.get("endpointFilter"),
            "hostname": obj.get("hostname"),
            "serverCertificates": [Certificate.from_dict(_item) for _item in obj["serverCertificates"]] if obj.get("serverCertificates") is not None else None,
            "serviceDirectoryService": obj.get("serviceDirectoryService")
        })
        return _obj



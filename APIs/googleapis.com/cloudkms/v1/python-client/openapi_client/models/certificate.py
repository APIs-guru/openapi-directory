# coding: utf-8

"""
    Cloud Key Management Service (KMS) API

    Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Certificate(BaseModel):
    """
    A Certificate represents an X.509 certificate used to authenticate HTTPS connections to EKM replicas.
    """ # noqa: E501
    issuer: Optional[StrictStr] = Field(default=None, description="Output only. The issuer distinguished name in RFC 2253 format. Only present if parsed is true.")
    not_after_time: Optional[StrictStr] = Field(default=None, description="Output only. The certificate is not valid after this time. Only present if parsed is true.", alias="notAfterTime")
    not_before_time: Optional[StrictStr] = Field(default=None, description="Output only. The certificate is not valid before this time. Only present if parsed is true.", alias="notBeforeTime")
    parsed: Optional[StrictBool] = Field(default=None, description="Output only. True if the certificate was parsed successfully.")
    raw_der: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Required. The raw certificate bytes in DER format.", alias="rawDer")
    serial_number: Optional[StrictStr] = Field(default=None, description="Output only. The certificate serial number as a hex string. Only present if parsed is true.", alias="serialNumber")
    sha256_fingerprint: Optional[StrictStr] = Field(default=None, description="Output only. The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.", alias="sha256Fingerprint")
    subject: Optional[StrictStr] = Field(default=None, description="Output only. The subject distinguished name in RFC 2253 format. Only present if parsed is true.")
    subject_alternative_dns_names: Optional[List[StrictStr]] = Field(default=None, description="Output only. The subject Alternative DNS names. Only present if parsed is true.", alias="subjectAlternativeDnsNames")
    __properties: ClassVar[List[str]] = ["issuer", "notAfterTime", "notBeforeTime", "parsed", "rawDer", "serialNumber", "sha256Fingerprint", "subject", "subjectAlternativeDnsNames"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Certificate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "issuer",
            "not_after_time",
            "not_before_time",
            "parsed",
            "serial_number",
            "sha256_fingerprint",
            "subject",
            "subject_alternative_dns_names",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Certificate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "issuer": obj.get("issuer"),
            "notAfterTime": obj.get("notAfterTime"),
            "notBeforeTime": obj.get("notBeforeTime"),
            "parsed": obj.get("parsed"),
            "rawDer": obj.get("rawDer"),
            "serialNumber": obj.get("serialNumber"),
            "sha256Fingerprint": obj.get("sha256Fingerprint"),
            "subject": obj.get("subject"),
            "subjectAlternativeDnsNames": obj.get("subjectAlternativeDnsNames")
        })
        return _obj



# coding: utf-8

"""
    Cloud Key Management Service (KMS) API

    Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RawDecryptRequest(BaseModel):
    """
    Request message for KeyManagementService.RawDecrypt.
    """ # noqa: E501
    additional_authenticated_data: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Optional. Optional data that must match the data originally supplied in RawEncryptRequest.additional_authenticated_data.", alias="additionalAuthenticatedData")
    additional_authenticated_data_crc32c: Optional[StrictStr] = Field(default=None, description="Optional. An optional CRC32C checksum of the RawDecryptRequest.additional_authenticated_data. If specified, KeyManagementService will verify the integrity of the received additional_authenticated_data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(additional_authenticated_data) is equal to additional_authenticated_data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.", alias="additionalAuthenticatedDataCrc32c")
    ciphertext: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Required. The encrypted data originally returned in RawEncryptResponse.ciphertext.")
    ciphertext_crc32c: Optional[StrictStr] = Field(default=None, description="Optional. An optional CRC32C checksum of the RawDecryptRequest.ciphertext. If specified, KeyManagementService will verify the integrity of the received ciphertext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(ciphertext) is equal to ciphertext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.", alias="ciphertextCrc32c")
    initialization_vector: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Required. The initialization vector (IV) used during encryption, which must match the data originally provided in RawEncryptResponse.initialization_vector.", alias="initializationVector")
    initialization_vector_crc32c: Optional[StrictStr] = Field(default=None, description="Optional. An optional CRC32C checksum of the RawDecryptRequest.initialization_vector. If specified, KeyManagementService will verify the integrity of the received initialization_vector using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(initialization_vector) is equal to initialization_vector_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.", alias="initializationVectorCrc32c")
    tag_length: Optional[StrictInt] = Field(default=None, description="The length of the authentication tag that is appended to the end of the ciphertext. If unspecified (0), the default value for the key's algorithm will be used (for AES-GCM, the default value is 16).", alias="tagLength")
    __properties: ClassVar[List[str]] = ["additionalAuthenticatedData", "additionalAuthenticatedDataCrc32c", "ciphertext", "ciphertextCrc32c", "initializationVector", "initializationVectorCrc32c", "tagLength"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RawDecryptRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RawDecryptRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalAuthenticatedData": obj.get("additionalAuthenticatedData"),
            "additionalAuthenticatedDataCrc32c": obj.get("additionalAuthenticatedDataCrc32c"),
            "ciphertext": obj.get("ciphertext"),
            "ciphertextCrc32c": obj.get("ciphertextCrc32c"),
            "initializationVector": obj.get("initializationVector"),
            "initializationVectorCrc32c": obj.get("initializationVectorCrc32c"),
            "tagLength": obj.get("tagLength")
        })
        return _obj



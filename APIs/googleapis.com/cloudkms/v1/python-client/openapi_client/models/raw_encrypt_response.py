# coding: utf-8

"""
    Cloud Key Management Service (KMS) API

    Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RawEncryptResponse(BaseModel):
    """
    Response message for KeyManagementService.RawEncrypt.
    """ # noqa: E501
    ciphertext: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The encrypted data. In the case of AES-GCM, the authentication tag is the tag_length bytes at the end of this field.")
    ciphertext_crc32c: Optional[StrictStr] = Field(default=None, description="Integrity verification field. A CRC32C checksum of the returned RawEncryptResponse.ciphertext. An integrity check of ciphertext can be performed by computing the CRC32C checksum of ciphertext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.", alias="ciphertextCrc32c")
    initialization_vector: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The initialization vector (IV) generated by the service during encryption. This value must be stored and provided in RawDecryptRequest.initialization_vector at decryption time.", alias="initializationVector")
    initialization_vector_crc32c: Optional[StrictStr] = Field(default=None, description="Integrity verification field. A CRC32C checksum of the returned RawEncryptResponse.initialization_vector. An integrity check of initialization_vector can be performed by computing the CRC32C checksum of initialization_vector and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.", alias="initializationVectorCrc32c")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the CryptoKeyVersion used in encryption. Check this field to verify that the intended resource was used for encryption.")
    protection_level: Optional[StrictStr] = Field(default=None, description="The ProtectionLevel of the CryptoKeyVersion used in encryption.", alias="protectionLevel")
    tag_length: Optional[StrictInt] = Field(default=None, description="The length of the authentication tag that is appended to the end of the ciphertext.", alias="tagLength")
    verified_additional_authenticated_data_crc32c: Optional[StrictBool] = Field(default=None, description="Integrity verification field. A flag indicating whether RawEncryptRequest.additional_authenticated_data_crc32c was received by KeyManagementService and used for the integrity verification of additional_authenticated_data. A false value of this field indicates either that // RawEncryptRequest.additional_authenticated_data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawEncryptRequest.additional_authenticated_data_crc32c but this field is still false, discard the response and perform a limited number of retries.", alias="verifiedAdditionalAuthenticatedDataCrc32c")
    verified_initialization_vector_crc32c: Optional[StrictBool] = Field(default=None, description="Integrity verification field. A flag indicating whether RawEncryptRequest.initialization_vector_crc32c was received by KeyManagementService and used for the integrity verification of initialization_vector. A false value of this field indicates either that RawEncryptRequest.initialization_vector_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawEncryptRequest.initialization_vector_crc32c but this field is still false, discard the response and perform a limited number of retries.", alias="verifiedInitializationVectorCrc32c")
    verified_plaintext_crc32c: Optional[StrictBool] = Field(default=None, description="Integrity verification field. A flag indicating whether RawEncryptRequest.plaintext_crc32c was received by KeyManagementService and used for the integrity verification of the plaintext. A false value of this field indicates either that RawEncryptRequest.plaintext_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawEncryptRequest.plaintext_crc32c but this field is still false, discard the response and perform a limited number of retries.", alias="verifiedPlaintextCrc32c")
    __properties: ClassVar[List[str]] = ["ciphertext", "ciphertextCrc32c", "initializationVector", "initializationVectorCrc32c", "name", "protectionLevel", "tagLength", "verifiedAdditionalAuthenticatedDataCrc32c", "verifiedInitializationVectorCrc32c", "verifiedPlaintextCrc32c"]

    @field_validator('protection_level')
    def protection_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROTECTION_LEVEL_UNSPECIFIED', 'SOFTWARE', 'HSM', 'EXTERNAL', 'EXTERNAL_VPC']):
            raise ValueError("must be one of enum values ('PROTECTION_LEVEL_UNSPECIFIED', 'SOFTWARE', 'HSM', 'EXTERNAL', 'EXTERNAL_VPC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RawEncryptResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RawEncryptResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ciphertext": obj.get("ciphertext"),
            "ciphertextCrc32c": obj.get("ciphertextCrc32c"),
            "initializationVector": obj.get("initializationVector"),
            "initializationVectorCrc32c": obj.get("initializationVectorCrc32c"),
            "name": obj.get("name"),
            "protectionLevel": obj.get("protectionLevel"),
            "tagLength": obj.get("tagLength"),
            "verifiedAdditionalAuthenticatedDataCrc32c": obj.get("verifiedAdditionalAuthenticatedDataCrc32c"),
            "verifiedInitializationVectorCrc32c": obj.get("verifiedInitializationVectorCrc32c"),
            "verifiedPlaintextCrc32c": obj.get("verifiedPlaintextCrc32c")
        })
        return _obj



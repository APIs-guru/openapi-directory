# coding: utf-8

"""
    Cloud Key Management Service (KMS) API

    Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ImportCryptoKeyVersionRequest(BaseModel):
    """
    Request message for KeyManagementService.ImportCryptoKeyVersion.
    """ # noqa: E501
    algorithm: Optional[StrictStr] = Field(default=None, description="Required. The algorithm of the key being imported. This does not need to match the version_template of the CryptoKey this version imports into.")
    crypto_key_version: Optional[StrictStr] = Field(default=None, description="Optional. The optional name of an existing CryptoKeyVersion to target for an import operation. If this field is not present, a new CryptoKeyVersion containing the supplied key material is created. If this field is present, the supplied key material is imported into the existing CryptoKeyVersion. To import into an existing CryptoKeyVersion, the CryptoKeyVersion must be a child of ImportCryptoKeyVersionRequest.parent, have been previously created via ImportCryptoKeyVersion, and be in DESTROYED or IMPORT_FAILED state. The key material and algorithm must match the previous CryptoKeyVersion exactly if the CryptoKeyVersion has ever contained key material.", alias="cryptoKeyVersion")
    import_job: Optional[StrictStr] = Field(default=None, description="Required. The name of the ImportJob that was used to wrap this key material.", alias="importJob")
    rsa_aes_wrapped_key: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Optional. This field has the same meaning as wrapped_key. Prefer to use that field in new work. Either that field or this field (but not both) must be specified.", alias="rsaAesWrappedKey")
    wrapped_key: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Optional. The wrapped key material to import. Before wrapping, key material must be formatted. If importing symmetric key material, the expected key material format is plain bytes. If importing asymmetric key material, the expected key material format is PKCS#8-encoded DER (the PrivateKeyInfo structure from RFC 5208). When wrapping with import methods (RSA_OAEP_3072_SHA1_AES_256 or RSA_OAEP_4096_SHA1_AES_256 or RSA_OAEP_3072_SHA256_AES_256 or RSA_OAEP_4096_SHA256_AES_256), this field must contain the concatenation of: 1. An ephemeral AES-256 wrapping key wrapped with the public_key using RSAES-OAEP with SHA-1/SHA-256, MGF1 with SHA-1/SHA-256, and an empty label. 2. The formatted key to be imported, wrapped with the ephemeral AES-256 key using AES-KWP (RFC 5649). This format is the same as the format produced by PKCS#11 mechanism CKM_RSA_AES_KEY_WRAP. When wrapping with import methods (RSA_OAEP_3072_SHA256 or RSA_OAEP_4096_SHA256), this field must contain the formatted key to be imported, wrapped with the public_key using RSAES-OAEP with SHA-256, MGF1 with SHA-256, and an empty label.", alias="wrappedKey")
    __properties: ClassVar[List[str]] = ["algorithm", "cryptoKeyVersion", "importJob", "rsaAesWrappedKey", "wrappedKey"]

    @field_validator('algorithm')
    def algorithm_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED', 'GOOGLE_SYMMETRIC_ENCRYPTION', 'AES_128_GCM', 'AES_256_GCM', 'AES_128_CBC', 'AES_256_CBC', 'AES_128_CTR', 'AES_256_CTR', 'RSA_SIGN_PSS_2048_SHA256', 'RSA_SIGN_PSS_3072_SHA256', 'RSA_SIGN_PSS_4096_SHA256', 'RSA_SIGN_PSS_4096_SHA512', 'RSA_SIGN_PKCS1_2048_SHA256', 'RSA_SIGN_PKCS1_3072_SHA256', 'RSA_SIGN_PKCS1_4096_SHA256', 'RSA_SIGN_PKCS1_4096_SHA512', 'RSA_SIGN_RAW_PKCS1_2048', 'RSA_SIGN_RAW_PKCS1_3072', 'RSA_SIGN_RAW_PKCS1_4096', 'RSA_DECRYPT_OAEP_2048_SHA256', 'RSA_DECRYPT_OAEP_3072_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA512', 'RSA_DECRYPT_OAEP_2048_SHA1', 'RSA_DECRYPT_OAEP_3072_SHA1', 'RSA_DECRYPT_OAEP_4096_SHA1', 'EC_SIGN_P256_SHA256', 'EC_SIGN_P384_SHA384', 'EC_SIGN_SECP256K1_SHA256', 'HMAC_SHA256', 'HMAC_SHA1', 'HMAC_SHA384', 'HMAC_SHA512', 'HMAC_SHA224', 'EXTERNAL_SYMMETRIC_ENCRYPTION']):
            raise ValueError("must be one of enum values ('CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED', 'GOOGLE_SYMMETRIC_ENCRYPTION', 'AES_128_GCM', 'AES_256_GCM', 'AES_128_CBC', 'AES_256_CBC', 'AES_128_CTR', 'AES_256_CTR', 'RSA_SIGN_PSS_2048_SHA256', 'RSA_SIGN_PSS_3072_SHA256', 'RSA_SIGN_PSS_4096_SHA256', 'RSA_SIGN_PSS_4096_SHA512', 'RSA_SIGN_PKCS1_2048_SHA256', 'RSA_SIGN_PKCS1_3072_SHA256', 'RSA_SIGN_PKCS1_4096_SHA256', 'RSA_SIGN_PKCS1_4096_SHA512', 'RSA_SIGN_RAW_PKCS1_2048', 'RSA_SIGN_RAW_PKCS1_3072', 'RSA_SIGN_RAW_PKCS1_4096', 'RSA_DECRYPT_OAEP_2048_SHA256', 'RSA_DECRYPT_OAEP_3072_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA512', 'RSA_DECRYPT_OAEP_2048_SHA1', 'RSA_DECRYPT_OAEP_3072_SHA1', 'RSA_DECRYPT_OAEP_4096_SHA1', 'EC_SIGN_P256_SHA256', 'EC_SIGN_P384_SHA384', 'EC_SIGN_SECP256K1_SHA256', 'HMAC_SHA256', 'HMAC_SHA1', 'HMAC_SHA384', 'HMAC_SHA512', 'HMAC_SHA224', 'EXTERNAL_SYMMETRIC_ENCRYPTION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImportCryptoKeyVersionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImportCryptoKeyVersionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algorithm": obj.get("algorithm"),
            "cryptoKeyVersion": obj.get("cryptoKeyVersion"),
            "importJob": obj.get("importJob"),
            "rsaAesWrappedKey": obj.get("rsaAesWrappedKey"),
            "wrappedKey": obj.get("wrappedKey")
        })
        return _obj



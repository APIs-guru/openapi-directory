# coding: utf-8

"""
    Cloud Key Management Service (KMS) API

    Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PublicKey(BaseModel):
    """
    The public keys for a given CryptoKeyVersion. Obtained via GetPublicKey.
    """ # noqa: E501
    algorithm: Optional[StrictStr] = Field(default=None, description="The Algorithm associated with this key.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the CryptoKeyVersion public key. Provided here for verification. NOTE: This field is in Beta.")
    pem: Optional[StrictStr] = Field(default=None, description="A public key encoded in PEM format, populated only when GetPublicKey returns one key. For more information, see the [RFC 7468](https://tools.ietf.org/html/rfc7468) sections for [General Considerations](https://tools.ietf.org/html/rfc7468#section-2) and [Textual Encoding of Subject Public Key Info] (https://tools.ietf.org/html/rfc7468#section-13).")
    pem_crc32c: Optional[StrictStr] = Field(default=None, description="Integrity verification field: A CRC32C checksum of the returned PublicKey.pem. It is only populated when GetPublicKey returns one key. An integrity check of PublicKey.pem can be performed by computing the CRC32C checksum of PublicKey.pem and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type. NOTE: This field is in Beta.", alias="pemCrc32c")
    protection_level: Optional[StrictStr] = Field(default=None, description="The ProtectionLevel of the CryptoKeyVersion public key.", alias="protectionLevel")
    __properties: ClassVar[List[str]] = ["algorithm", "name", "pem", "pemCrc32c", "protectionLevel"]

    @field_validator('algorithm')
    def algorithm_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED', 'GOOGLE_SYMMETRIC_ENCRYPTION', 'AES_128_GCM', 'AES_256_GCM', 'AES_128_CBC', 'AES_256_CBC', 'AES_128_CTR', 'AES_256_CTR', 'RSA_SIGN_PSS_2048_SHA256', 'RSA_SIGN_PSS_3072_SHA256', 'RSA_SIGN_PSS_4096_SHA256', 'RSA_SIGN_PSS_4096_SHA512', 'RSA_SIGN_PKCS1_2048_SHA256', 'RSA_SIGN_PKCS1_3072_SHA256', 'RSA_SIGN_PKCS1_4096_SHA256', 'RSA_SIGN_PKCS1_4096_SHA512', 'RSA_SIGN_RAW_PKCS1_2048', 'RSA_SIGN_RAW_PKCS1_3072', 'RSA_SIGN_RAW_PKCS1_4096', 'RSA_DECRYPT_OAEP_2048_SHA256', 'RSA_DECRYPT_OAEP_3072_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA512', 'RSA_DECRYPT_OAEP_2048_SHA1', 'RSA_DECRYPT_OAEP_3072_SHA1', 'RSA_DECRYPT_OAEP_4096_SHA1', 'EC_SIGN_P256_SHA256', 'EC_SIGN_P384_SHA384', 'EC_SIGN_SECP256K1_SHA256', 'HMAC_SHA256', 'HMAC_SHA1', 'HMAC_SHA384', 'HMAC_SHA512', 'HMAC_SHA224', 'EXTERNAL_SYMMETRIC_ENCRYPTION']):
            raise ValueError("must be one of enum values ('CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED', 'GOOGLE_SYMMETRIC_ENCRYPTION', 'AES_128_GCM', 'AES_256_GCM', 'AES_128_CBC', 'AES_256_CBC', 'AES_128_CTR', 'AES_256_CTR', 'RSA_SIGN_PSS_2048_SHA256', 'RSA_SIGN_PSS_3072_SHA256', 'RSA_SIGN_PSS_4096_SHA256', 'RSA_SIGN_PSS_4096_SHA512', 'RSA_SIGN_PKCS1_2048_SHA256', 'RSA_SIGN_PKCS1_3072_SHA256', 'RSA_SIGN_PKCS1_4096_SHA256', 'RSA_SIGN_PKCS1_4096_SHA512', 'RSA_SIGN_RAW_PKCS1_2048', 'RSA_SIGN_RAW_PKCS1_3072', 'RSA_SIGN_RAW_PKCS1_4096', 'RSA_DECRYPT_OAEP_2048_SHA256', 'RSA_DECRYPT_OAEP_3072_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA512', 'RSA_DECRYPT_OAEP_2048_SHA1', 'RSA_DECRYPT_OAEP_3072_SHA1', 'RSA_DECRYPT_OAEP_4096_SHA1', 'EC_SIGN_P256_SHA256', 'EC_SIGN_P384_SHA384', 'EC_SIGN_SECP256K1_SHA256', 'HMAC_SHA256', 'HMAC_SHA1', 'HMAC_SHA384', 'HMAC_SHA512', 'HMAC_SHA224', 'EXTERNAL_SYMMETRIC_ENCRYPTION')")
        return value

    @field_validator('protection_level')
    def protection_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROTECTION_LEVEL_UNSPECIFIED', 'SOFTWARE', 'HSM', 'EXTERNAL', 'EXTERNAL_VPC']):
            raise ValueError("must be one of enum values ('PROTECTION_LEVEL_UNSPECIFIED', 'SOFTWARE', 'HSM', 'EXTERNAL', 'EXTERNAL_VPC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algorithm": obj.get("algorithm"),
            "name": obj.get("name"),
            "pem": obj.get("pem"),
            "pemCrc32c": obj.get("pemCrc32c"),
            "protectionLevel": obj.get("protectionLevel")
        })
        return _obj



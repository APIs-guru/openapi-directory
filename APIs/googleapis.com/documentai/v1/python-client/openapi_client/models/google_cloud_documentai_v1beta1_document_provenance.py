# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_v1beta1_document_provenance_parent import GoogleCloudDocumentaiV1beta1DocumentProvenanceParent
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1beta1DocumentProvenance(BaseModel):
    """
    Structure to identify provenance relationships between annotations in different revisions.
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="The Id of this operation. Needs to be unique within the scope of the revision.")
    parents: Optional[List[GoogleCloudDocumentaiV1beta1DocumentProvenanceParent]] = Field(default=None, description="References to the original elements that are replaced.")
    revision: Optional[StrictInt] = Field(default=None, description="The index of the revision that produced this element.")
    type: Optional[StrictStr] = Field(default=None, description="The type of provenance operation.")
    __properties: ClassVar[List[str]] = ["id", "parents", "revision", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OPERATION_TYPE_UNSPECIFIED', 'ADD', 'REMOVE', 'UPDATE', 'REPLACE', 'EVAL_REQUESTED', 'EVAL_APPROVED', 'EVAL_SKIPPED']):
            raise ValueError("must be one of enum values ('OPERATION_TYPE_UNSPECIFIED', 'ADD', 'REMOVE', 'UPDATE', 'REPLACE', 'EVAL_REQUESTED', 'EVAL_APPROVED', 'EVAL_SKIPPED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta1DocumentProvenance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parents (list)
        _items = []
        if self.parents:
            for _item_parents in self.parents:
                if _item_parents:
                    _items.append(_item_parents.to_dict())
            _dict['parents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta1DocumentProvenance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "parents": [GoogleCloudDocumentaiV1beta1DocumentProvenanceParent.from_dict(_item) for _item in obj["parents"]] if obj.get("parents") is not None else None,
            "revision": obj.get("revision"),
            "type": obj.get("type")
        })
        return _obj



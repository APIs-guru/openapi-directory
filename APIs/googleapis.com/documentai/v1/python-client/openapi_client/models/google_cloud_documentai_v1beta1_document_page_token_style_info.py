# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_type_color import GoogleTypeColor
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo(BaseModel):
    """
    Font and other text style attributes.
    """ # noqa: E501
    background_color: Optional[GoogleTypeColor] = Field(default=None, alias="backgroundColor")
    bold: Optional[StrictBool] = Field(default=None, description="Whether the text is bold (equivalent to font_weight is at least `700`).")
    font_size: Optional[StrictInt] = Field(default=None, description="Font size in points (`1` point is `¹⁄₇₂` inches).", alias="fontSize")
    font_type: Optional[StrictStr] = Field(default=None, description="Name or style of the font.", alias="fontType")
    font_weight: Optional[StrictInt] = Field(default=None, description="TrueType weight on a scale `100` (thin) to `1000` (ultra-heavy). Normal is `400`, bold is `700`.", alias="fontWeight")
    handwritten: Optional[StrictBool] = Field(default=None, description="Whether the text is handwritten.")
    italic: Optional[StrictBool] = Field(default=None, description="Whether the text is italic.")
    letter_spacing: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Letter spacing in points.", alias="letterSpacing")
    pixel_font_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Font size in pixels, equal to _unrounded font_size_ * _resolution_ ÷ `72.0`.", alias="pixelFontSize")
    smallcaps: Optional[StrictBool] = Field(default=None, description="Whether the text is in small caps.")
    strikeout: Optional[StrictBool] = Field(default=None, description="Whether the text is strikethrough.")
    subscript: Optional[StrictBool] = Field(default=None, description="Whether the text is a subscript.")
    superscript: Optional[StrictBool] = Field(default=None, description="Whether the text is a superscript.")
    text_color: Optional[GoogleTypeColor] = Field(default=None, alias="textColor")
    underlined: Optional[StrictBool] = Field(default=None, description="Whether the text is underlined.")
    __properties: ClassVar[List[str]] = ["backgroundColor", "bold", "fontSize", "fontType", "fontWeight", "handwritten", "italic", "letterSpacing", "pixelFontSize", "smallcaps", "strikeout", "subscript", "superscript", "textColor", "underlined"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of background_color
        if self.background_color:
            _dict['backgroundColor'] = self.background_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_color
        if self.text_color:
            _dict['textColor'] = self.text_color.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backgroundColor": GoogleTypeColor.from_dict(obj["backgroundColor"]) if obj.get("backgroundColor") is not None else None,
            "bold": obj.get("bold"),
            "fontSize": obj.get("fontSize"),
            "fontType": obj.get("fontType"),
            "fontWeight": obj.get("fontWeight"),
            "handwritten": obj.get("handwritten"),
            "italic": obj.get("italic"),
            "letterSpacing": obj.get("letterSpacing"),
            "pixelFontSize": obj.get("pixelFontSize"),
            "smallcaps": obj.get("smallcaps"),
            "strikeout": obj.get("strikeout"),
            "subscript": obj.get("subscript"),
            "superscript": obj.get("superscript"),
            "textColor": GoogleTypeColor.from_dict(obj["textColor"]) if obj.get("textColor") is not None else None,
            "underlined": obj.get("underlined")
        })
        return _obj



# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_documentai_v1beta1_bounding_poly import GoogleCloudDocumentaiV1beta1BoundingPoly
from openapi_client.models.google_cloud_documentai_v1beta1_document_text_anchor import GoogleCloudDocumentaiV1beta1DocumentTextAnchor
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1beta1DocumentPageLayout(BaseModel):
    """
    Visual element describing a layout unit on a page.
    """ # noqa: E501
    bounding_poly: Optional[GoogleCloudDocumentaiV1beta1BoundingPoly] = Field(default=None, alias="boundingPoly")
    confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.")
    orientation: Optional[StrictStr] = Field(default=None, description="Detected orientation for the Layout.")
    text_anchor: Optional[GoogleCloudDocumentaiV1beta1DocumentTextAnchor] = Field(default=None, alias="textAnchor")
    __properties: ClassVar[List[str]] = ["boundingPoly", "confidence", "orientation", "textAnchor"]

    @field_validator('orientation')
    def orientation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ORIENTATION_UNSPECIFIED', 'PAGE_UP', 'PAGE_RIGHT', 'PAGE_DOWN', 'PAGE_LEFT']):
            raise ValueError("must be one of enum values ('ORIENTATION_UNSPECIFIED', 'PAGE_UP', 'PAGE_RIGHT', 'PAGE_DOWN', 'PAGE_LEFT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta1DocumentPageLayout from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bounding_poly
        if self.bounding_poly:
            _dict['boundingPoly'] = self.bounding_poly.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_anchor
        if self.text_anchor:
            _dict['textAnchor'] = self.text_anchor.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta1DocumentPageLayout from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boundingPoly": GoogleCloudDocumentaiV1beta1BoundingPoly.from_dict(obj["boundingPoly"]) if obj.get("boundingPoly") is not None else None,
            "confidence": obj.get("confidence"),
            "orientation": obj.get("orientation"),
            "textAnchor": GoogleCloudDocumentaiV1beta1DocumentTextAnchor.from_dict(obj["textAnchor"]) if obj.get("textAnchor") is not None else None
        })
        return _obj



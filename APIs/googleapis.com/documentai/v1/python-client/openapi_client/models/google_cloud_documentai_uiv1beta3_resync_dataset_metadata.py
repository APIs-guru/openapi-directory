# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_uiv1beta3_common_operation_metadata import GoogleCloudDocumentaiUiv1beta3CommonOperationMetadata
from openapi_client.models.google_cloud_documentai_uiv1beta3_resync_dataset_metadata_dataset_resync_status import GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataDatasetResyncStatus
from openapi_client.models.google_cloud_documentai_uiv1beta3_resync_dataset_metadata_individual_document_resync_status import GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadata(BaseModel):
    """
    The metadata proto of `ResyncDataset` method.
    """ # noqa: E501
    common_metadata: Optional[GoogleCloudDocumentaiUiv1beta3CommonOperationMetadata] = Field(default=None, alias="commonMetadata")
    dataset_resync_statuses: Optional[List[GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataDatasetResyncStatus]] = Field(default=None, description="The list of dataset resync statuses. Not checked when ResyncDatasetRequest.dataset_documents is specified.", alias="datasetResyncStatuses")
    individual_document_resync_statuses: Optional[List[GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus]] = Field(default=None, description="The list of document resync statuses. The same document could have multiple `individual_document_resync_statuses` if it has multiple inconsistencies.", alias="individualDocumentResyncStatuses")
    __properties: ClassVar[List[str]] = ["commonMetadata", "datasetResyncStatuses", "individualDocumentResyncStatuses"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of common_metadata
        if self.common_metadata:
            _dict['commonMetadata'] = self.common_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dataset_resync_statuses (list)
        _items = []
        if self.dataset_resync_statuses:
            for _item_dataset_resync_statuses in self.dataset_resync_statuses:
                if _item_dataset_resync_statuses:
                    _items.append(_item_dataset_resync_statuses.to_dict())
            _dict['datasetResyncStatuses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in individual_document_resync_statuses (list)
        _items = []
        if self.individual_document_resync_statuses:
            for _item_individual_document_resync_statuses in self.individual_document_resync_statuses:
                if _item_individual_document_resync_statuses:
                    _items.append(_item_individual_document_resync_statuses.to_dict())
            _dict['individualDocumentResyncStatuses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commonMetadata": GoogleCloudDocumentaiUiv1beta3CommonOperationMetadata.from_dict(obj["commonMetadata"]) if obj.get("commonMetadata") is not None else None,
            "datasetResyncStatuses": [GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataDatasetResyncStatus.from_dict(_item) for _item in obj["datasetResyncStatuses"]] if obj.get("datasetResyncStatuses") is not None else None,
            "individualDocumentResyncStatuses": [GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus.from_dict(_item) for _item in obj["individualDocumentResyncStatuses"]] if obj.get("individualDocumentResyncStatuses") is not None else None
        })
        return _obj



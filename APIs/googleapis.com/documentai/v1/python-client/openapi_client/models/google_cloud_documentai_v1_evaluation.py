# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_v1_evaluation_counters import GoogleCloudDocumentaiV1EvaluationCounters
from openapi_client.models.google_cloud_documentai_v1_evaluation_multi_confidence_metrics import GoogleCloudDocumentaiV1EvaluationMultiConfidenceMetrics
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1Evaluation(BaseModel):
    """
    An evaluation of a ProcessorVersion's performance.
    """ # noqa: E501
    all_entities_metrics: Optional[GoogleCloudDocumentaiV1EvaluationMultiConfidenceMetrics] = Field(default=None, alias="allEntitiesMetrics")
    create_time: Optional[StrictStr] = Field(default=None, description="The time that the evaluation was created.", alias="createTime")
    document_counters: Optional[GoogleCloudDocumentaiV1EvaluationCounters] = Field(default=None, alias="documentCounters")
    entity_metrics: Optional[Dict[str, GoogleCloudDocumentaiV1EvaluationMultiConfidenceMetrics]] = Field(default=None, description="Metrics across confidence levels, for different entities.", alias="entityMetrics")
    kms_key_name: Optional[StrictStr] = Field(default=None, description="The KMS key name used for encryption.", alias="kmsKeyName")
    kms_key_version_name: Optional[StrictStr] = Field(default=None, description="The KMS key version with which data is encrypted.", alias="kmsKeyVersionName")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the evaluation. Format: `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processor_version}/evaluations/{evaluation}`")
    __properties: ClassVar[List[str]] = ["allEntitiesMetrics", "createTime", "documentCounters", "entityMetrics", "kmsKeyName", "kmsKeyVersionName", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1Evaluation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of all_entities_metrics
        if self.all_entities_metrics:
            _dict['allEntitiesMetrics'] = self.all_entities_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_counters
        if self.document_counters:
            _dict['documentCounters'] = self.document_counters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in entity_metrics (dict)
        _field_dict = {}
        if self.entity_metrics:
            for _key_entity_metrics in self.entity_metrics:
                if self.entity_metrics[_key_entity_metrics]:
                    _field_dict[_key_entity_metrics] = self.entity_metrics[_key_entity_metrics].to_dict()
            _dict['entityMetrics'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1Evaluation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allEntitiesMetrics": GoogleCloudDocumentaiV1EvaluationMultiConfidenceMetrics.from_dict(obj["allEntitiesMetrics"]) if obj.get("allEntitiesMetrics") is not None else None,
            "createTime": obj.get("createTime"),
            "documentCounters": GoogleCloudDocumentaiV1EvaluationCounters.from_dict(obj["documentCounters"]) if obj.get("documentCounters") is not None else None,
            "entityMetrics": dict(
                (_k, GoogleCloudDocumentaiV1EvaluationMultiConfidenceMetrics.from_dict(_v))
                for _k, _v in obj["entityMetrics"].items()
            )
            if obj.get("entityMetrics") is not None
            else None,
            "kmsKeyName": obj.get("kmsKeyName"),
            "kmsKeyVersionName": obj.get("kmsKeyVersionName"),
            "name": obj.get("name")
        })
        return _obj



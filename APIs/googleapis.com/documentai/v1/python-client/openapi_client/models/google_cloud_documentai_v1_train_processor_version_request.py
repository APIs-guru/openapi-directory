# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_v1_document_schema import GoogleCloudDocumentaiV1DocumentSchema
from openapi_client.models.google_cloud_documentai_v1_processor_version import GoogleCloudDocumentaiV1ProcessorVersion
from openapi_client.models.google_cloud_documentai_v1_train_processor_version_request_custom_document_extraction_options import GoogleCloudDocumentaiV1TrainProcessorVersionRequestCustomDocumentExtractionOptions
from openapi_client.models.google_cloud_documentai_v1_train_processor_version_request_input_data import GoogleCloudDocumentaiV1TrainProcessorVersionRequestInputData
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1TrainProcessorVersionRequest(BaseModel):
    """
    Request message for the TrainProcessorVersion method.
    """ # noqa: E501
    base_processor_version: Optional[StrictStr] = Field(default=None, description="Optional. The processor version to use as a base for training. This processor version must be a child of `parent`. Format: `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`.", alias="baseProcessorVersion")
    custom_document_extraction_options: Optional[GoogleCloudDocumentaiV1TrainProcessorVersionRequestCustomDocumentExtractionOptions] = Field(default=None, alias="customDocumentExtractionOptions")
    document_schema: Optional[GoogleCloudDocumentaiV1DocumentSchema] = Field(default=None, alias="documentSchema")
    input_data: Optional[GoogleCloudDocumentaiV1TrainProcessorVersionRequestInputData] = Field(default=None, alias="inputData")
    processor_version: Optional[GoogleCloudDocumentaiV1ProcessorVersion] = Field(default=None, alias="processorVersion")
    __properties: ClassVar[List[str]] = ["baseProcessorVersion", "customDocumentExtractionOptions", "documentSchema", "inputData", "processorVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1TrainProcessorVersionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_document_extraction_options
        if self.custom_document_extraction_options:
            _dict['customDocumentExtractionOptions'] = self.custom_document_extraction_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_schema
        if self.document_schema:
            _dict['documentSchema'] = self.document_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input_data
        if self.input_data:
            _dict['inputData'] = self.input_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of processor_version
        if self.processor_version:
            _dict['processorVersion'] = self.processor_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1TrainProcessorVersionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseProcessorVersion": obj.get("baseProcessorVersion"),
            "customDocumentExtractionOptions": GoogleCloudDocumentaiV1TrainProcessorVersionRequestCustomDocumentExtractionOptions.from_dict(obj["customDocumentExtractionOptions"]) if obj.get("customDocumentExtractionOptions") is not None else None,
            "documentSchema": GoogleCloudDocumentaiV1DocumentSchema.from_dict(obj["documentSchema"]) if obj.get("documentSchema") is not None else None,
            "inputData": GoogleCloudDocumentaiV1TrainProcessorVersionRequestInputData.from_dict(obj["inputData"]) if obj.get("inputData") is not None else None,
            "processorVersion": GoogleCloudDocumentaiV1ProcessorVersion.from_dict(obj["processorVersion"]) if obj.get("processorVersion") is not None else None
        })
        return _obj



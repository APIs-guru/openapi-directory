# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_v1beta1_document_page_detected_language import GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage
from openapi_client.models.google_cloud_documentai_v1beta1_document_page_layout import GoogleCloudDocumentaiV1beta1DocumentPageLayout
from openapi_client.models.google_cloud_documentai_v1beta1_document_page_token_detected_break import GoogleCloudDocumentaiV1beta1DocumentPageTokenDetectedBreak
from openapi_client.models.google_cloud_documentai_v1beta1_document_page_token_style_info import GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo
from openapi_client.models.google_cloud_documentai_v1beta1_document_provenance import GoogleCloudDocumentaiV1beta1DocumentProvenance
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1beta1DocumentPageToken(BaseModel):
    """
    A detected token.
    """ # noqa: E501
    detected_break: Optional[GoogleCloudDocumentaiV1beta1DocumentPageTokenDetectedBreak] = Field(default=None, alias="detectedBreak")
    detected_languages: Optional[List[GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage]] = Field(default=None, description="A list of detected languages together with confidence.", alias="detectedLanguages")
    layout: Optional[GoogleCloudDocumentaiV1beta1DocumentPageLayout] = None
    provenance: Optional[GoogleCloudDocumentaiV1beta1DocumentProvenance] = None
    style_info: Optional[GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo] = Field(default=None, alias="styleInfo")
    __properties: ClassVar[List[str]] = ["detectedBreak", "detectedLanguages", "layout", "provenance", "styleInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta1DocumentPageToken from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of detected_break
        if self.detected_break:
            _dict['detectedBreak'] = self.detected_break.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in detected_languages (list)
        _items = []
        if self.detected_languages:
            for _item_detected_languages in self.detected_languages:
                if _item_detected_languages:
                    _items.append(_item_detected_languages.to_dict())
            _dict['detectedLanguages'] = _items
        # override the default output from pydantic by calling `to_dict()` of layout
        if self.layout:
            _dict['layout'] = self.layout.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provenance
        if self.provenance:
            _dict['provenance'] = self.provenance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of style_info
        if self.style_info:
            _dict['styleInfo'] = self.style_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta1DocumentPageToken from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detectedBreak": GoogleCloudDocumentaiV1beta1DocumentPageTokenDetectedBreak.from_dict(obj["detectedBreak"]) if obj.get("detectedBreak") is not None else None,
            "detectedLanguages": [GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage.from_dict(_item) for _item in obj["detectedLanguages"]] if obj.get("detectedLanguages") is not None else None,
            "layout": GoogleCloudDocumentaiV1beta1DocumentPageLayout.from_dict(obj["layout"]) if obj.get("layout") is not None else None,
            "provenance": GoogleCloudDocumentaiV1beta1DocumentProvenance.from_dict(obj["provenance"]) if obj.get("provenance") is not None else None,
            "styleInfo": GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.from_dict(obj["styleInfo"]) if obj.get("styleInfo") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_v1beta2_document_page_detected_language import GoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage
from openapi_client.models.google_cloud_documentai_v1beta2_document_page_layout import GoogleCloudDocumentaiV1beta2DocumentPageLayout
from openapi_client.models.google_cloud_documentai_v1beta2_document_provenance import GoogleCloudDocumentaiV1beta2DocumentProvenance
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1beta2DocumentPageFormField(BaseModel):
    """
    A form field detected on the page.
    """ # noqa: E501
    corrected_key_text: Optional[StrictStr] = Field(default=None, description="Created for Labeling UI to export key text. If corrections were made to the text identified by the `field_name.text_anchor`, this field will contain the correction.", alias="correctedKeyText")
    corrected_value_text: Optional[StrictStr] = Field(default=None, description="Created for Labeling UI to export value text. If corrections were made to the text identified by the `field_value.text_anchor`, this field will contain the correction.", alias="correctedValueText")
    field_name: Optional[GoogleCloudDocumentaiV1beta2DocumentPageLayout] = Field(default=None, alias="fieldName")
    field_value: Optional[GoogleCloudDocumentaiV1beta2DocumentPageLayout] = Field(default=None, alias="fieldValue")
    name_detected_languages: Optional[List[GoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage]] = Field(default=None, description="A list of detected languages for name together with confidence.", alias="nameDetectedLanguages")
    provenance: Optional[GoogleCloudDocumentaiV1beta2DocumentProvenance] = None
    value_detected_languages: Optional[List[GoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage]] = Field(default=None, description="A list of detected languages for value together with confidence.", alias="valueDetectedLanguages")
    value_type: Optional[StrictStr] = Field(default=None, description="If the value is non-textual, this field represents the type. Current valid values are: - blank (this indicates the `field_value` is normal text) - `unfilled_checkbox` - `filled_checkbox`", alias="valueType")
    __properties: ClassVar[List[str]] = ["correctedKeyText", "correctedValueText", "fieldName", "fieldValue", "nameDetectedLanguages", "provenance", "valueDetectedLanguages", "valueType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta2DocumentPageFormField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of field_name
        if self.field_name:
            _dict['fieldName'] = self.field_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of field_value
        if self.field_value:
            _dict['fieldValue'] = self.field_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in name_detected_languages (list)
        _items = []
        if self.name_detected_languages:
            for _item_name_detected_languages in self.name_detected_languages:
                if _item_name_detected_languages:
                    _items.append(_item_name_detected_languages.to_dict())
            _dict['nameDetectedLanguages'] = _items
        # override the default output from pydantic by calling `to_dict()` of provenance
        if self.provenance:
            _dict['provenance'] = self.provenance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in value_detected_languages (list)
        _items = []
        if self.value_detected_languages:
            for _item_value_detected_languages in self.value_detected_languages:
                if _item_value_detected_languages:
                    _items.append(_item_value_detected_languages.to_dict())
            _dict['valueDetectedLanguages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta2DocumentPageFormField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "correctedKeyText": obj.get("correctedKeyText"),
            "correctedValueText": obj.get("correctedValueText"),
            "fieldName": GoogleCloudDocumentaiV1beta2DocumentPageLayout.from_dict(obj["fieldName"]) if obj.get("fieldName") is not None else None,
            "fieldValue": GoogleCloudDocumentaiV1beta2DocumentPageLayout.from_dict(obj["fieldValue"]) if obj.get("fieldValue") is not None else None,
            "nameDetectedLanguages": [GoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage.from_dict(_item) for _item in obj["nameDetectedLanguages"]] if obj.get("nameDetectedLanguages") is not None else None,
            "provenance": GoogleCloudDocumentaiV1beta2DocumentProvenance.from_dict(obj["provenance"]) if obj.get("provenance") is not None else None,
            "valueDetectedLanguages": [GoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage.from_dict(_item) for _item in obj["valueDetectedLanguages"]] if obj.get("valueDetectedLanguages") is not None else None,
            "valueType": obj.get("valueType")
        })
        return _obj



# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_v1_ocr_config_hints import GoogleCloudDocumentaiV1OcrConfigHints
from openapi_client.models.google_cloud_documentai_v1_ocr_config_premium_features import GoogleCloudDocumentaiV1OcrConfigPremiumFeatures
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1OcrConfig(BaseModel):
    """
    Config for Document OCR.
    """ # noqa: E501
    advanced_ocr_options: Optional[List[StrictStr]] = Field(default=None, description="A list of advanced OCR options to further fine-tune OCR behavior. Current valid values are: - `legacy_layout`: a heuristics layout detection algorithm, which serves as an alternative to the current ML-based layout detection algorithm. Customers can choose the best suitable layout algorithm based on their situation.", alias="advancedOcrOptions")
    compute_style_info: Optional[StrictBool] = Field(default=None, description="Turn on font identification model and return font style information. Deprecated, use PremiumFeatures.compute_style_info instead.", alias="computeStyleInfo")
    disable_character_boxes_detection: Optional[StrictBool] = Field(default=None, description="Turn off character box detector in OCR engine. Character box detection is enabled by default in OCR 2.0 (and later) processors.", alias="disableCharacterBoxesDetection")
    enable_image_quality_scores: Optional[StrictBool] = Field(default=None, description="Enables intelligent document quality scores after OCR. Can help with diagnosing why OCR responses are of poor quality for a given input. Adds additional latency comparable to regular OCR to the process call.", alias="enableImageQualityScores")
    enable_native_pdf_parsing: Optional[StrictBool] = Field(default=None, description="Enables special handling for PDFs with existing text information. Results in better text extraction quality in such PDF inputs.", alias="enableNativePdfParsing")
    enable_symbol: Optional[StrictBool] = Field(default=None, description="Includes symbol level OCR information if set to true.", alias="enableSymbol")
    hints: Optional[GoogleCloudDocumentaiV1OcrConfigHints] = None
    premium_features: Optional[GoogleCloudDocumentaiV1OcrConfigPremiumFeatures] = Field(default=None, alias="premiumFeatures")
    __properties: ClassVar[List[str]] = ["advancedOcrOptions", "computeStyleInfo", "disableCharacterBoxesDetection", "enableImageQualityScores", "enableNativePdfParsing", "enableSymbol", "hints", "premiumFeatures"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1OcrConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hints
        if self.hints:
            _dict['hints'] = self.hints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of premium_features
        if self.premium_features:
            _dict['premiumFeatures'] = self.premium_features.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1OcrConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advancedOcrOptions": obj.get("advancedOcrOptions"),
            "computeStyleInfo": obj.get("computeStyleInfo"),
            "disableCharacterBoxesDetection": obj.get("disableCharacterBoxesDetection"),
            "enableImageQualityScores": obj.get("enableImageQualityScores"),
            "enableNativePdfParsing": obj.get("enableNativePdfParsing"),
            "enableSymbol": obj.get("enableSymbol"),
            "hints": GoogleCloudDocumentaiV1OcrConfigHints.from_dict(obj["hints"]) if obj.get("hints") is not None else None,
            "premiumFeatures": GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.from_dict(obj["premiumFeatures"]) if obj.get("premiumFeatures") is not None else None
        })
        return _obj



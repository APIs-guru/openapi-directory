# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_v1_processor_type_location_info import GoogleCloudDocumentaiV1ProcessorTypeLocationInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1ProcessorType(BaseModel):
    """
    A processor type is responsible for performing a certain document understanding task on a certain type of document.
    """ # noqa: E501
    allow_creation: Optional[StrictBool] = Field(default=None, description="Whether the processor type allows creation. If true, users can create a processor of this processor type. Otherwise, users need to request access.", alias="allowCreation")
    available_locations: Optional[List[GoogleCloudDocumentaiV1ProcessorTypeLocationInfo]] = Field(default=None, description="The locations in which this processor is available.", alias="availableLocations")
    category: Optional[StrictStr] = Field(default=None, description="The processor category, used by UI to group processor types.")
    launch_stage: Optional[StrictStr] = Field(default=None, description="Launch stage of the processor type", alias="launchStage")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the processor type. Format: `projects/{project}/processorTypes/{processor_type}`")
    sample_document_uris: Optional[List[StrictStr]] = Field(default=None, description="A set of Cloud Storage URIs of sample documents for this processor.", alias="sampleDocumentUris")
    type: Optional[StrictStr] = Field(default=None, description="The processor type, such as: `OCR_PROCESSOR`, `INVOICE_PROCESSOR`.")
    __properties: ClassVar[List[str]] = ["allowCreation", "availableLocations", "category", "launchStage", "name", "sampleDocumentUris", "type"]

    @field_validator('launch_stage')
    def launch_stage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LAUNCH_STAGE_UNSPECIFIED', 'UNIMPLEMENTED', 'PRELAUNCH', 'EARLY_ACCESS', 'ALPHA', 'BETA', 'GA', 'DEPRECATED']):
            raise ValueError("must be one of enum values ('LAUNCH_STAGE_UNSPECIFIED', 'UNIMPLEMENTED', 'PRELAUNCH', 'EARLY_ACCESS', 'ALPHA', 'BETA', 'GA', 'DEPRECATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1ProcessorType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in available_locations (list)
        _items = []
        if self.available_locations:
            for _item_available_locations in self.available_locations:
                if _item_available_locations:
                    _items.append(_item_available_locations.to_dict())
            _dict['availableLocations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1ProcessorType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowCreation": obj.get("allowCreation"),
            "availableLocations": [GoogleCloudDocumentaiV1ProcessorTypeLocationInfo.from_dict(_item) for _item in obj["availableLocations"]] if obj.get("availableLocations") is not None else None,
            "category": obj.get("category"),
            "launchStage": obj.get("launchStage"),
            "name": obj.get("name"),
            "sampleDocumentUris": obj.get("sampleDocumentUris"),
            "type": obj.get("type")
        })
        return _obj



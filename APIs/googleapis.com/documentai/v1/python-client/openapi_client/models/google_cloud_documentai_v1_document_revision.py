# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_v1_document_revision_human_review import GoogleCloudDocumentaiV1DocumentRevisionHumanReview
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1DocumentRevision(BaseModel):
    """
    Contains past or forward revisions of this document.
    """ # noqa: E501
    agent: Optional[StrictStr] = Field(default=None, description="If the change was made by a person specify the name or id of that person.")
    create_time: Optional[StrictStr] = Field(default=None, description="The time that the revision was created, internally generated by doc proto storage at the time of create.", alias="createTime")
    human_review: Optional[GoogleCloudDocumentaiV1DocumentRevisionHumanReview] = Field(default=None, alias="humanReview")
    id: Optional[StrictStr] = Field(default=None, description="Id of the revision, internally generated by doc proto storage. Unique within the context of the document.")
    parent: Optional[List[StrictInt]] = Field(default=None, description="The revisions that this revision is based on. This can include one or more parent (when documents are merged.) This field represents the index into the `revisions` field.")
    parent_ids: Optional[List[StrictStr]] = Field(default=None, description="The revisions that this revision is based on. Must include all the ids that have anything to do with this revision - eg. there are `provenance.parent.revision` fields that index into this field.", alias="parentIds")
    processor: Optional[StrictStr] = Field(default=None, description="If the annotation was made by processor identify the processor by its resource name.")
    __properties: ClassVar[List[str]] = ["agent", "createTime", "humanReview", "id", "parent", "parentIds", "processor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1DocumentRevision from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of human_review
        if self.human_review:
            _dict['humanReview'] = self.human_review.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1DocumentRevision from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agent": obj.get("agent"),
            "createTime": obj.get("createTime"),
            "humanReview": GoogleCloudDocumentaiV1DocumentRevisionHumanReview.from_dict(obj["humanReview"]) if obj.get("humanReview") is not None else None,
            "id": obj.get("id"),
            "parent": obj.get("parent"),
            "parentIds": obj.get("parentIds"),
            "processor": obj.get("processor")
        })
        return _obj



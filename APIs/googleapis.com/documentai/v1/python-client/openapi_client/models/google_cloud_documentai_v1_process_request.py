# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_v1_document import GoogleCloudDocumentaiV1Document
from openapi_client.models.google_cloud_documentai_v1_gcs_document import GoogleCloudDocumentaiV1GcsDocument
from openapi_client.models.google_cloud_documentai_v1_process_options import GoogleCloudDocumentaiV1ProcessOptions
from openapi_client.models.google_cloud_documentai_v1_raw_document import GoogleCloudDocumentaiV1RawDocument
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1ProcessRequest(BaseModel):
    """
    Request message for the ProcessDocument method.
    """ # noqa: E501
    field_mask: Optional[StrictStr] = Field(default=None, description="Specifies which fields to include in the ProcessResponse.document output. Only supports top-level document and pages field, so it must be in the form of `{document_field_name}` or `pages.{page_field_name}`.", alias="fieldMask")
    gcs_document: Optional[GoogleCloudDocumentaiV1GcsDocument] = Field(default=None, alias="gcsDocument")
    inline_document: Optional[GoogleCloudDocumentaiV1Document] = Field(default=None, alias="inlineDocument")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The labels with user-defined metadata for the request. Label keys and values can be no longer than 63 characters (Unicode codepoints) and can only contain lowercase letters, numeric characters, underscores, and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter.")
    process_options: Optional[GoogleCloudDocumentaiV1ProcessOptions] = Field(default=None, alias="processOptions")
    raw_document: Optional[GoogleCloudDocumentaiV1RawDocument] = Field(default=None, alias="rawDocument")
    skip_human_review: Optional[StrictBool] = Field(default=None, description="Whether human review should be skipped for this request. Default to `false`.", alias="skipHumanReview")
    __properties: ClassVar[List[str]] = ["fieldMask", "gcsDocument", "inlineDocument", "labels", "processOptions", "rawDocument", "skipHumanReview"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1ProcessRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gcs_document
        if self.gcs_document:
            _dict['gcsDocument'] = self.gcs_document.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inline_document
        if self.inline_document:
            _dict['inlineDocument'] = self.inline_document.to_dict()
        # override the default output from pydantic by calling `to_dict()` of process_options
        if self.process_options:
            _dict['processOptions'] = self.process_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of raw_document
        if self.raw_document:
            _dict['rawDocument'] = self.raw_document.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1ProcessRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fieldMask": obj.get("fieldMask"),
            "gcsDocument": GoogleCloudDocumentaiV1GcsDocument.from_dict(obj["gcsDocument"]) if obj.get("gcsDocument") is not None else None,
            "inlineDocument": GoogleCloudDocumentaiV1Document.from_dict(obj["inlineDocument"]) if obj.get("inlineDocument") is not None else None,
            "labels": obj.get("labels"),
            "processOptions": GoogleCloudDocumentaiV1ProcessOptions.from_dict(obj["processOptions"]) if obj.get("processOptions") is not None else None,
            "rawDocument": GoogleCloudDocumentaiV1RawDocument.from_dict(obj["rawDocument"]) if obj.get("rawDocument") is not None else None,
            "skipHumanReview": obj.get("skipHumanReview")
        })
        return _obj



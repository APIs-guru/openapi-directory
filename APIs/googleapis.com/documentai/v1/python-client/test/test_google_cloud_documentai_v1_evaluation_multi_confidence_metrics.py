# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_documentai_v1_evaluation_multi_confidence_metrics import GoogleCloudDocumentaiV1EvaluationMultiConfidenceMetrics

class TestGoogleCloudDocumentaiV1EvaluationMultiConfidenceMetrics(unittest.TestCase):
    """GoogleCloudDocumentaiV1EvaluationMultiConfidenceMetrics unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDocumentaiV1EvaluationMultiConfidenceMetrics:
        """Test GoogleCloudDocumentaiV1EvaluationMultiConfidenceMetrics
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDocumentaiV1EvaluationMultiConfidenceMetrics`
        """
        model = GoogleCloudDocumentaiV1EvaluationMultiConfidenceMetrics()
        if include_optional:
            return GoogleCloudDocumentaiV1EvaluationMultiConfidenceMetrics(
                auprc = 1.337,
                auprc_exact = 1.337,
                confidence_level_metrics = [
                    openapi_client.models.google_cloud_documentai_v1_evaluation_confidence_level_metrics.GoogleCloudDocumentaiV1EvaluationConfidenceLevelMetrics(
                        confidence_level = 1.337, 
                        metrics = openapi_client.models.google_cloud_documentai_v1_evaluation_metrics.GoogleCloudDocumentaiV1EvaluationMetrics(
                            f1_score = 1.337, 
                            false_negatives_count = 56, 
                            false_positives_count = 56, 
                            ground_truth_document_count = 56, 
                            ground_truth_occurrences_count = 56, 
                            precision = 1.337, 
                            predicted_document_count = 56, 
                            predicted_occurrences_count = 56, 
                            recall = 1.337, 
                            total_documents_count = 56, 
                            true_positives_count = 56, ), )
                    ],
                confidence_level_metrics_exact = [
                    openapi_client.models.google_cloud_documentai_v1_evaluation_confidence_level_metrics.GoogleCloudDocumentaiV1EvaluationConfidenceLevelMetrics(
                        confidence_level = 1.337, 
                        metrics = openapi_client.models.google_cloud_documentai_v1_evaluation_metrics.GoogleCloudDocumentaiV1EvaluationMetrics(
                            f1_score = 1.337, 
                            false_negatives_count = 56, 
                            false_positives_count = 56, 
                            ground_truth_document_count = 56, 
                            ground_truth_occurrences_count = 56, 
                            precision = 1.337, 
                            predicted_document_count = 56, 
                            predicted_occurrences_count = 56, 
                            recall = 1.337, 
                            total_documents_count = 56, 
                            true_positives_count = 56, ), )
                    ],
                estimated_calibration_error = 1.337,
                estimated_calibration_error_exact = 1.337,
                metrics_type = 'METRICS_TYPE_UNSPECIFIED'
            )
        else:
            return GoogleCloudDocumentaiV1EvaluationMultiConfidenceMetrics(
        )
        """

    def testGoogleCloudDocumentaiV1EvaluationMultiConfidenceMetrics(self):
        """Test GoogleCloudDocumentaiV1EvaluationMultiConfidenceMetrics"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_v1beta3_dataset_document_warehouse_config import GoogleCloudDocumentaiV1beta3DatasetDocumentWarehouseConfig
from openapi_client.models.google_cloud_documentai_v1beta3_dataset_gcs_managed_config import GoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1beta3Dataset(BaseModel):
    """
    A singleton resource under a Processor which configures a collection of documents.
    """ # noqa: E501
    document_warehouse_config: Optional[GoogleCloudDocumentaiV1beta3DatasetDocumentWarehouseConfig] = Field(default=None, alias="documentWarehouseConfig")
    gcs_managed_config: Optional[GoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig] = Field(default=None, alias="gcsManagedConfig")
    name: Optional[StrictStr] = Field(default=None, description="Dataset resource name. Format: `projects/{project}/locations/{location}/processors/{processor}/dataset`")
    spanner_indexing_config: Optional[Dict[str, Any]] = Field(default=None, description="Configuration specific to spanner-based indexing.", alias="spannerIndexingConfig")
    state: Optional[StrictStr] = Field(default=None, description="Required. State of the dataset. Ignored when updating dataset.")
    unmanaged_dataset_config: Optional[Dict[str, Any]] = Field(default=None, description="Configuration specific to an unmanaged dataset.", alias="unmanagedDatasetConfig")
    __properties: ClassVar[List[str]] = ["documentWarehouseConfig", "gcsManagedConfig", "name", "spannerIndexingConfig", "state", "unmanagedDatasetConfig"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'UNINITIALIZED', 'INITIALIZING', 'INITIALIZED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'UNINITIALIZED', 'INITIALIZING', 'INITIALIZED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3Dataset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of document_warehouse_config
        if self.document_warehouse_config:
            _dict['documentWarehouseConfig'] = self.document_warehouse_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcs_managed_config
        if self.gcs_managed_config:
            _dict['gcsManagedConfig'] = self.gcs_managed_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3Dataset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "documentWarehouseConfig": GoogleCloudDocumentaiV1beta3DatasetDocumentWarehouseConfig.from_dict(obj["documentWarehouseConfig"]) if obj.get("documentWarehouseConfig") is not None else None,
            "gcsManagedConfig": GoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig.from_dict(obj["gcsManagedConfig"]) if obj.get("gcsManagedConfig") is not None else None,
            "name": obj.get("name"),
            "spannerIndexingConfig": obj.get("spannerIndexingConfig"),
            "state": obj.get("state"),
            "unmanagedDatasetConfig": obj.get("unmanagedDatasetConfig")
        })
        return _obj



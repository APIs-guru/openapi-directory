# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_type_date import GoogleTypeDate
from openapi_client.models.google_type_date_time import GoogleTypeDateTime
from openapi_client.models.google_type_money import GoogleTypeMoney
from openapi_client.models.google_type_postal_address import GoogleTypePostalAddress
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1beta1DocumentEntityNormalizedValue(BaseModel):
    """
    Parsed and normalized entity value.
    """ # noqa: E501
    address_value: Optional[GoogleTypePostalAddress] = Field(default=None, alias="addressValue")
    boolean_value: Optional[StrictBool] = Field(default=None, description="Boolean value. Can be used for entities with binary values, or for checkboxes.", alias="booleanValue")
    date_value: Optional[GoogleTypeDate] = Field(default=None, alias="dateValue")
    datetime_value: Optional[GoogleTypeDateTime] = Field(default=None, alias="datetimeValue")
    float_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Float value.", alias="floatValue")
    integer_value: Optional[StrictInt] = Field(default=None, description="Integer value.", alias="integerValue")
    money_value: Optional[GoogleTypeMoney] = Field(default=None, alias="moneyValue")
    text: Optional[StrictStr] = Field(default=None, description="Optional. An optional field to store a normalized string. For some entity types, one of respective `structured_value` fields may also be populated. Also not all the types of `structured_value` will be normalized. For example, some processors may not generate `float` or `integer` normalized text by default. Below are sample formats mapped to structured values. - Money/Currency type (`money_value`) is in the ISO 4217 text format. - Date type (`date_value`) is in the ISO 8601 text format. - Datetime type (`datetime_value`) is in the ISO 8601 text format.")
    __properties: ClassVar[List[str]] = ["addressValue", "booleanValue", "dateValue", "datetimeValue", "floatValue", "integerValue", "moneyValue", "text"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta1DocumentEntityNormalizedValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address_value
        if self.address_value:
            _dict['addressValue'] = self.address_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_value
        if self.date_value:
            _dict['dateValue'] = self.date_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of datetime_value
        if self.datetime_value:
            _dict['datetimeValue'] = self.datetime_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of money_value
        if self.money_value:
            _dict['moneyValue'] = self.money_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta1DocumentEntityNormalizedValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addressValue": GoogleTypePostalAddress.from_dict(obj["addressValue"]) if obj.get("addressValue") is not None else None,
            "booleanValue": obj.get("booleanValue"),
            "dateValue": GoogleTypeDate.from_dict(obj["dateValue"]) if obj.get("dateValue") is not None else None,
            "datetimeValue": GoogleTypeDateTime.from_dict(obj["datetimeValue"]) if obj.get("datetimeValue") is not None else None,
            "floatValue": obj.get("floatValue"),
            "integerValue": obj.get("integerValue"),
            "moneyValue": GoogleTypeMoney.from_dict(obj["moneyValue"]) if obj.get("moneyValue") is not None else None,
            "text": obj.get("text")
        })
        return _obj



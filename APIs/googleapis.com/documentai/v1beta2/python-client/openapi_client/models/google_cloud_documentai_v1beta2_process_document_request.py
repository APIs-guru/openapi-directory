# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_v1beta2_auto_ml_params import GoogleCloudDocumentaiV1beta2AutoMlParams
from openapi_client.models.google_cloud_documentai_v1beta2_entity_extraction_params import GoogleCloudDocumentaiV1beta2EntityExtractionParams
from openapi_client.models.google_cloud_documentai_v1beta2_form_extraction_params import GoogleCloudDocumentaiV1beta2FormExtractionParams
from openapi_client.models.google_cloud_documentai_v1beta2_input_config import GoogleCloudDocumentaiV1beta2InputConfig
from openapi_client.models.google_cloud_documentai_v1beta2_ocr_params import GoogleCloudDocumentaiV1beta2OcrParams
from openapi_client.models.google_cloud_documentai_v1beta2_output_config import GoogleCloudDocumentaiV1beta2OutputConfig
from openapi_client.models.google_cloud_documentai_v1beta2_table_extraction_params import GoogleCloudDocumentaiV1beta2TableExtractionParams
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1beta2ProcessDocumentRequest(BaseModel):
    """
    Request to process one document.
    """ # noqa: E501
    automl_params: Optional[GoogleCloudDocumentaiV1beta2AutoMlParams] = Field(default=None, alias="automlParams")
    document_type: Optional[StrictStr] = Field(default=None, description="Specifies a known document type for deeper structure detection. Valid values are currently \"general\" and \"invoice\". If not provided, \"general\"\\ is used as default. If any other value is given, the request is rejected.", alias="documentType")
    entity_extraction_params: Optional[GoogleCloudDocumentaiV1beta2EntityExtractionParams] = Field(default=None, alias="entityExtractionParams")
    form_extraction_params: Optional[GoogleCloudDocumentaiV1beta2FormExtractionParams] = Field(default=None, alias="formExtractionParams")
    input_config: Optional[GoogleCloudDocumentaiV1beta2InputConfig] = Field(default=None, alias="inputConfig")
    ocr_params: Optional[GoogleCloudDocumentaiV1beta2OcrParams] = Field(default=None, alias="ocrParams")
    output_config: Optional[GoogleCloudDocumentaiV1beta2OutputConfig] = Field(default=None, alias="outputConfig")
    parent: Optional[StrictStr] = Field(default=None, description="Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no location is specified, a region will be chosen automatically. This field is only populated when used in ProcessDocument method.")
    table_extraction_params: Optional[GoogleCloudDocumentaiV1beta2TableExtractionParams] = Field(default=None, alias="tableExtractionParams")
    __properties: ClassVar[List[str]] = ["automlParams", "documentType", "entityExtractionParams", "formExtractionParams", "inputConfig", "ocrParams", "outputConfig", "parent", "tableExtractionParams"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta2ProcessDocumentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of automl_params
        if self.automl_params:
            _dict['automlParams'] = self.automl_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity_extraction_params
        if self.entity_extraction_params:
            _dict['entityExtractionParams'] = self.entity_extraction_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of form_extraction_params
        if self.form_extraction_params:
            _dict['formExtractionParams'] = self.form_extraction_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input_config
        if self.input_config:
            _dict['inputConfig'] = self.input_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ocr_params
        if self.ocr_params:
            _dict['ocrParams'] = self.ocr_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output_config
        if self.output_config:
            _dict['outputConfig'] = self.output_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of table_extraction_params
        if self.table_extraction_params:
            _dict['tableExtractionParams'] = self.table_extraction_params.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta2ProcessDocumentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automlParams": GoogleCloudDocumentaiV1beta2AutoMlParams.from_dict(obj["automlParams"]) if obj.get("automlParams") is not None else None,
            "documentType": obj.get("documentType"),
            "entityExtractionParams": GoogleCloudDocumentaiV1beta2EntityExtractionParams.from_dict(obj["entityExtractionParams"]) if obj.get("entityExtractionParams") is not None else None,
            "formExtractionParams": GoogleCloudDocumentaiV1beta2FormExtractionParams.from_dict(obj["formExtractionParams"]) if obj.get("formExtractionParams") is not None else None,
            "inputConfig": GoogleCloudDocumentaiV1beta2InputConfig.from_dict(obj["inputConfig"]) if obj.get("inputConfig") is not None else None,
            "ocrParams": GoogleCloudDocumentaiV1beta2OcrParams.from_dict(obj["ocrParams"]) if obj.get("ocrParams") is not None else None,
            "outputConfig": GoogleCloudDocumentaiV1beta2OutputConfig.from_dict(obj["outputConfig"]) if obj.get("outputConfig") is not None else None,
            "parent": obj.get("parent"),
            "tableExtractionParams": GoogleCloudDocumentaiV1beta2TableExtractionParams.from_dict(obj["tableExtractionParams"]) if obj.get("tableExtractionParams") is not None else None
        })
        return _obj



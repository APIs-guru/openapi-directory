# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_documentai_v1beta3_dataset_schema import GoogleCloudDocumentaiV1beta3DatasetSchema

class TestGoogleCloudDocumentaiV1beta3DatasetSchema(unittest.TestCase):
    """GoogleCloudDocumentaiV1beta3DatasetSchema unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDocumentaiV1beta3DatasetSchema:
        """Test GoogleCloudDocumentaiV1beta3DatasetSchema
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDocumentaiV1beta3DatasetSchema`
        """
        model = GoogleCloudDocumentaiV1beta3DatasetSchema()
        if include_optional:
            return GoogleCloudDocumentaiV1beta3DatasetSchema(
                document_schema = openapi_client.models.google_cloud_documentai_v1beta3_document_schema.GoogleCloudDocumentaiV1beta3DocumentSchema(
                    description = '', 
                    display_name = '', 
                    entity_types = [
                        openapi_client.models.google_cloud_documentai_v1beta3_document_schema_entity_type.GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType(
                            base_types = [
                                ''
                                ], 
                            display_name = '', 
                            entity_type_metadata = openapi_client.models.google_cloud_documentai_v1beta3_entity_type_metadata.GoogleCloudDocumentaiV1beta3EntityTypeMetadata(
                                inactive = True, ), 
                            enum_values = openapi_client.models.google_cloud_documentai_v1beta3_document_schema_entity_type_enum_values.GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeEnumValues(
                                values = [
                                    ''
                                    ], ), 
                            name = '', 
                            properties = [
                                openapi_client.models.google_cloud_documentai_v1beta3_document_schema_entity_type_property.GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty(
                                    display_name = '', 
                                    name = '', 
                                    occurrence_type = 'OCCURRENCE_TYPE_UNSPECIFIED', 
                                    property_metadata = openapi_client.models.google_cloud_documentai_v1beta3_property_metadata.GoogleCloudDocumentaiV1beta3PropertyMetadata(
                                        field_extraction_metadata = openapi_client.models.google_cloud_documentai_v1beta3_field_extraction_metadata.GoogleCloudDocumentaiV1beta3FieldExtractionMetadata(
                                            summary_options = openapi_client.models.google_cloud_documentai_v1beta3_summary_options.GoogleCloudDocumentaiV1beta3SummaryOptions(
                                                format = 'FORMAT_UNSPECIFIED', 
                                                length = 'LENGTH_UNSPECIFIED', ), ), 
                                        inactive = True, ), 
                                    value_type = '', )
                                ], )
                        ], 
                    metadata = openapi_client.models.google_cloud_documentai_v1beta3_document_schema_metadata.GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata(
                        document_allow_multiple_labels = True, 
                        document_splitter = True, 
                        prefixed_naming_on_properties = True, 
                        skip_naming_validation = True, ), ),
                name = ''
            )
        else:
            return GoogleCloudDocumentaiV1beta3DatasetSchema(
        )
        """

    def testGoogleCloudDocumentaiV1beta3DatasetSchema(self):
        """Test GoogleCloudDocumentaiV1beta3DatasetSchema"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_documentai_v1beta3_batch_process_request import GoogleCloudDocumentaiV1beta3BatchProcessRequest

class TestGoogleCloudDocumentaiV1beta3BatchProcessRequest(unittest.TestCase):
    """GoogleCloudDocumentaiV1beta3BatchProcessRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDocumentaiV1beta3BatchProcessRequest:
        """Test GoogleCloudDocumentaiV1beta3BatchProcessRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDocumentaiV1beta3BatchProcessRequest`
        """
        model = GoogleCloudDocumentaiV1beta3BatchProcessRequest()
        if include_optional:
            return GoogleCloudDocumentaiV1beta3BatchProcessRequest(
                document_output_config = openapi_client.models.google_cloud_documentai_v1beta3_document_output_config.GoogleCloudDocumentaiV1beta3DocumentOutputConfig(
                    gcs_output_config = openapi_client.models.google_cloud_documentai_v1beta3_document_output_config_gcs_output_config.GoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfig(
                        field_mask = '', 
                        gcs_uri = '', 
                        sharding_config = openapi_client.models.google_cloud_documentai_v1beta3_document_output_config_gcs_output_config_sharding_config.GoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig(
                            pages_overlap = 56, 
                            pages_per_shard = 56, ), ), ),
                input_configs = [
                    openapi_client.models.google_cloud_documentai_v1beta3_batch_process_request_batch_input_config.GoogleCloudDocumentaiV1beta3BatchProcessRequestBatchInputConfig(
                        gcs_source = '', 
                        mime_type = '', )
                    ],
                input_documents = openapi_client.models.google_cloud_documentai_v1beta3_batch_documents_input_config.GoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig(
                    gcs_documents = openapi_client.models.google_cloud_documentai_v1beta3_gcs_documents.GoogleCloudDocumentaiV1beta3GcsDocuments(
                        documents = [
                            openapi_client.models.google_cloud_documentai_v1beta3_gcs_document.GoogleCloudDocumentaiV1beta3GcsDocument(
                                gcs_uri = '', 
                                mime_type = '', )
                            ], ), 
                    gcs_prefix = openapi_client.models.google_cloud_documentai_v1beta3_gcs_prefix.GoogleCloudDocumentaiV1beta3GcsPrefix(
                        gcs_uri_prefix = '', ), ),
                labels = {
                    'key' : ''
                    },
                output_config = openapi_client.models.google_cloud_documentai_v1beta3_batch_process_request_batch_output_config.GoogleCloudDocumentaiV1beta3BatchProcessRequestBatchOutputConfig(
                    gcs_destination = '', ),
                process_options = openapi_client.models.google_cloud_documentai_v1beta3_process_options.GoogleCloudDocumentaiV1beta3ProcessOptions(
                    from_end = 56, 
                    from_start = 56, 
                    individual_page_selector = openapi_client.models.google_cloud_documentai_v1beta3_process_options_individual_page_selector.GoogleCloudDocumentaiV1beta3ProcessOptionsIndividualPageSelector(
                        pages = [
                            56
                            ], ), 
                    ocr_config = openapi_client.models.google_cloud_documentai_v1beta3_ocr_config.GoogleCloudDocumentaiV1beta3OcrConfig(
                        advanced_ocr_options = [
                            ''
                            ], 
                        compute_style_info = True, 
                        disable_character_boxes_detection = True, 
                        enable_image_quality_scores = True, 
                        enable_native_pdf_parsing = True, 
                        enable_symbol = True, 
                        hints = openapi_client.models.google_cloud_documentai_v1beta3_ocr_config_hints.GoogleCloudDocumentaiV1beta3OcrConfigHints(
                            language_hints = [
                                ''
                                ], ), 
                        premium_features = openapi_client.models.google_cloud_documentai_v1beta3_ocr_config_premium_features.GoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures(
                            compute_style_info = True, 
                            enable_math_ocr = True, 
                            enable_selection_mark_detection = True, ), ), 
                    schema_override = openapi_client.models.google_cloud_documentai_v1beta3_document_schema.GoogleCloudDocumentaiV1beta3DocumentSchema(
                        description = '', 
                        display_name = '', 
                        entity_types = [
                            openapi_client.models.google_cloud_documentai_v1beta3_document_schema_entity_type.GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType(
                                base_types = [
                                    ''
                                    ], 
                                display_name = '', 
                                entity_type_metadata = openapi_client.models.google_cloud_documentai_v1beta3_entity_type_metadata.GoogleCloudDocumentaiV1beta3EntityTypeMetadata(
                                    inactive = True, ), 
                                enum_values = openapi_client.models.google_cloud_documentai_v1beta3_document_schema_entity_type_enum_values.GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeEnumValues(
                                    values = [
                                        ''
                                        ], ), 
                                name = '', 
                                properties = [
                                    openapi_client.models.google_cloud_documentai_v1beta3_document_schema_entity_type_property.GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty(
                                        display_name = '', 
                                        name = '', 
                                        occurrence_type = 'OCCURRENCE_TYPE_UNSPECIFIED', 
                                        property_metadata = openapi_client.models.google_cloud_documentai_v1beta3_property_metadata.GoogleCloudDocumentaiV1beta3PropertyMetadata(
                                            field_extraction_metadata = openapi_client.models.google_cloud_documentai_v1beta3_field_extraction_metadata.GoogleCloudDocumentaiV1beta3FieldExtractionMetadata(
                                                summary_options = openapi_client.models.google_cloud_documentai_v1beta3_summary_options.GoogleCloudDocumentaiV1beta3SummaryOptions(
                                                    format = 'FORMAT_UNSPECIFIED', 
                                                    length = 'LENGTH_UNSPECIFIED', ), ), 
                                            inactive = True, ), 
                                        value_type = '', )
                                    ], )
                            ], 
                        metadata = openapi_client.models.google_cloud_documentai_v1beta3_document_schema_metadata.GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata(
                            document_allow_multiple_labels = True, 
                            document_splitter = True, 
                            prefixed_naming_on_properties = True, 
                            skip_naming_validation = True, ), ), ),
                skip_human_review = True
            )
        else:
            return GoogleCloudDocumentaiV1beta3BatchProcessRequest(
        )
        """

    def testGoogleCloudDocumentaiV1beta3BatchProcessRequest(self):
        """Test GoogleCloudDocumentaiV1beta3BatchProcessRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

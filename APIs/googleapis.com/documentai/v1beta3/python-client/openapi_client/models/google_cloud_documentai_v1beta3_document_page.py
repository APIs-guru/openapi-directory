# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_v1beta3_document_page_block import GoogleCloudDocumentaiV1beta3DocumentPageBlock
from openapi_client.models.google_cloud_documentai_v1beta3_document_page_detected_barcode import GoogleCloudDocumentaiV1beta3DocumentPageDetectedBarcode
from openapi_client.models.google_cloud_documentai_v1beta3_document_page_detected_language import GoogleCloudDocumentaiV1beta3DocumentPageDetectedLanguage
from openapi_client.models.google_cloud_documentai_v1beta3_document_page_dimension import GoogleCloudDocumentaiV1beta3DocumentPageDimension
from openapi_client.models.google_cloud_documentai_v1beta3_document_page_form_field import GoogleCloudDocumentaiV1beta3DocumentPageFormField
from openapi_client.models.google_cloud_documentai_v1beta3_document_page_image import GoogleCloudDocumentaiV1beta3DocumentPageImage
from openapi_client.models.google_cloud_documentai_v1beta3_document_page_image_quality_scores import GoogleCloudDocumentaiV1beta3DocumentPageImageQualityScores
from openapi_client.models.google_cloud_documentai_v1beta3_document_page_layout import GoogleCloudDocumentaiV1beta3DocumentPageLayout
from openapi_client.models.google_cloud_documentai_v1beta3_document_page_line import GoogleCloudDocumentaiV1beta3DocumentPageLine
from openapi_client.models.google_cloud_documentai_v1beta3_document_page_matrix import GoogleCloudDocumentaiV1beta3DocumentPageMatrix
from openapi_client.models.google_cloud_documentai_v1beta3_document_page_paragraph import GoogleCloudDocumentaiV1beta3DocumentPageParagraph
from openapi_client.models.google_cloud_documentai_v1beta3_document_page_symbol import GoogleCloudDocumentaiV1beta3DocumentPageSymbol
from openapi_client.models.google_cloud_documentai_v1beta3_document_page_table import GoogleCloudDocumentaiV1beta3DocumentPageTable
from openapi_client.models.google_cloud_documentai_v1beta3_document_page_token import GoogleCloudDocumentaiV1beta3DocumentPageToken
from openapi_client.models.google_cloud_documentai_v1beta3_document_page_visual_element import GoogleCloudDocumentaiV1beta3DocumentPageVisualElement
from openapi_client.models.google_cloud_documentai_v1beta3_document_provenance import GoogleCloudDocumentaiV1beta3DocumentProvenance
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1beta3DocumentPage(BaseModel):
    """
    A page in a Document.
    """ # noqa: E501
    blocks: Optional[List[GoogleCloudDocumentaiV1beta3DocumentPageBlock]] = Field(default=None, description="A list of visually detected text blocks on the page. A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.")
    detected_barcodes: Optional[List[GoogleCloudDocumentaiV1beta3DocumentPageDetectedBarcode]] = Field(default=None, description="A list of detected barcodes.", alias="detectedBarcodes")
    detected_languages: Optional[List[GoogleCloudDocumentaiV1beta3DocumentPageDetectedLanguage]] = Field(default=None, description="A list of detected languages together with confidence.", alias="detectedLanguages")
    dimension: Optional[GoogleCloudDocumentaiV1beta3DocumentPageDimension] = None
    form_fields: Optional[List[GoogleCloudDocumentaiV1beta3DocumentPageFormField]] = Field(default=None, description="A list of visually detected form fields on the page.", alias="formFields")
    image: Optional[GoogleCloudDocumentaiV1beta3DocumentPageImage] = None
    image_quality_scores: Optional[GoogleCloudDocumentaiV1beta3DocumentPageImageQualityScores] = Field(default=None, alias="imageQualityScores")
    layout: Optional[GoogleCloudDocumentaiV1beta3DocumentPageLayout] = None
    lines: Optional[List[GoogleCloudDocumentaiV1beta3DocumentPageLine]] = Field(default=None, description="A list of visually detected text lines on the page. A collection of tokens that a human would perceive as a line.")
    page_number: Optional[StrictInt] = Field(default=None, description="1-based index for current Page in a parent Document. Useful when a page is taken out of a Document for individual processing.", alias="pageNumber")
    paragraphs: Optional[List[GoogleCloudDocumentaiV1beta3DocumentPageParagraph]] = Field(default=None, description="A list of visually detected text paragraphs on the page. A collection of lines that a human would perceive as a paragraph.")
    provenance: Optional[GoogleCloudDocumentaiV1beta3DocumentProvenance] = None
    symbols: Optional[List[GoogleCloudDocumentaiV1beta3DocumentPageSymbol]] = Field(default=None, description="A list of visually detected symbols on the page.")
    tables: Optional[List[GoogleCloudDocumentaiV1beta3DocumentPageTable]] = Field(default=None, description="A list of visually detected tables on the page.")
    tokens: Optional[List[GoogleCloudDocumentaiV1beta3DocumentPageToken]] = Field(default=None, description="A list of visually detected tokens on the page.")
    transforms: Optional[List[GoogleCloudDocumentaiV1beta3DocumentPageMatrix]] = Field(default=None, description="Transformation matrices that were applied to the original document image to produce Page.image.")
    visual_elements: Optional[List[GoogleCloudDocumentaiV1beta3DocumentPageVisualElement]] = Field(default=None, description="A list of detected non-text visual elements e.g. checkbox, signature etc. on the page.", alias="visualElements")
    __properties: ClassVar[List[str]] = ["blocks", "detectedBarcodes", "detectedLanguages", "dimension", "formFields", "image", "imageQualityScores", "layout", "lines", "pageNumber", "paragraphs", "provenance", "symbols", "tables", "tokens", "transforms", "visualElements"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3DocumentPage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in blocks (list)
        _items = []
        if self.blocks:
            for _item_blocks in self.blocks:
                if _item_blocks:
                    _items.append(_item_blocks.to_dict())
            _dict['blocks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in detected_barcodes (list)
        _items = []
        if self.detected_barcodes:
            for _item_detected_barcodes in self.detected_barcodes:
                if _item_detected_barcodes:
                    _items.append(_item_detected_barcodes.to_dict())
            _dict['detectedBarcodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in detected_languages (list)
        _items = []
        if self.detected_languages:
            for _item_detected_languages in self.detected_languages:
                if _item_detected_languages:
                    _items.append(_item_detected_languages.to_dict())
            _dict['detectedLanguages'] = _items
        # override the default output from pydantic by calling `to_dict()` of dimension
        if self.dimension:
            _dict['dimension'] = self.dimension.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in form_fields (list)
        _items = []
        if self.form_fields:
            for _item_form_fields in self.form_fields:
                if _item_form_fields:
                    _items.append(_item_form_fields.to_dict())
            _dict['formFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_quality_scores
        if self.image_quality_scores:
            _dict['imageQualityScores'] = self.image_quality_scores.to_dict()
        # override the default output from pydantic by calling `to_dict()` of layout
        if self.layout:
            _dict['layout'] = self.layout.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
        _items = []
        if self.lines:
            for _item_lines in self.lines:
                if _item_lines:
                    _items.append(_item_lines.to_dict())
            _dict['lines'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in paragraphs (list)
        _items = []
        if self.paragraphs:
            for _item_paragraphs in self.paragraphs:
                if _item_paragraphs:
                    _items.append(_item_paragraphs.to_dict())
            _dict['paragraphs'] = _items
        # override the default output from pydantic by calling `to_dict()` of provenance
        if self.provenance:
            _dict['provenance'] = self.provenance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in symbols (list)
        _items = []
        if self.symbols:
            for _item_symbols in self.symbols:
                if _item_symbols:
                    _items.append(_item_symbols.to_dict())
            _dict['symbols'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tables (list)
        _items = []
        if self.tables:
            for _item_tables in self.tables:
                if _item_tables:
                    _items.append(_item_tables.to_dict())
            _dict['tables'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tokens (list)
        _items = []
        if self.tokens:
            for _item_tokens in self.tokens:
                if _item_tokens:
                    _items.append(_item_tokens.to_dict())
            _dict['tokens'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transforms (list)
        _items = []
        if self.transforms:
            for _item_transforms in self.transforms:
                if _item_transforms:
                    _items.append(_item_transforms.to_dict())
            _dict['transforms'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in visual_elements (list)
        _items = []
        if self.visual_elements:
            for _item_visual_elements in self.visual_elements:
                if _item_visual_elements:
                    _items.append(_item_visual_elements.to_dict())
            _dict['visualElements'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3DocumentPage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blocks": [GoogleCloudDocumentaiV1beta3DocumentPageBlock.from_dict(_item) for _item in obj["blocks"]] if obj.get("blocks") is not None else None,
            "detectedBarcodes": [GoogleCloudDocumentaiV1beta3DocumentPageDetectedBarcode.from_dict(_item) for _item in obj["detectedBarcodes"]] if obj.get("detectedBarcodes") is not None else None,
            "detectedLanguages": [GoogleCloudDocumentaiV1beta3DocumentPageDetectedLanguage.from_dict(_item) for _item in obj["detectedLanguages"]] if obj.get("detectedLanguages") is not None else None,
            "dimension": GoogleCloudDocumentaiV1beta3DocumentPageDimension.from_dict(obj["dimension"]) if obj.get("dimension") is not None else None,
            "formFields": [GoogleCloudDocumentaiV1beta3DocumentPageFormField.from_dict(_item) for _item in obj["formFields"]] if obj.get("formFields") is not None else None,
            "image": GoogleCloudDocumentaiV1beta3DocumentPageImage.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "imageQualityScores": GoogleCloudDocumentaiV1beta3DocumentPageImageQualityScores.from_dict(obj["imageQualityScores"]) if obj.get("imageQualityScores") is not None else None,
            "layout": GoogleCloudDocumentaiV1beta3DocumentPageLayout.from_dict(obj["layout"]) if obj.get("layout") is not None else None,
            "lines": [GoogleCloudDocumentaiV1beta3DocumentPageLine.from_dict(_item) for _item in obj["lines"]] if obj.get("lines") is not None else None,
            "pageNumber": obj.get("pageNumber"),
            "paragraphs": [GoogleCloudDocumentaiV1beta3DocumentPageParagraph.from_dict(_item) for _item in obj["paragraphs"]] if obj.get("paragraphs") is not None else None,
            "provenance": GoogleCloudDocumentaiV1beta3DocumentProvenance.from_dict(obj["provenance"]) if obj.get("provenance") is not None else None,
            "symbols": [GoogleCloudDocumentaiV1beta3DocumentPageSymbol.from_dict(_item) for _item in obj["symbols"]] if obj.get("symbols") is not None else None,
            "tables": [GoogleCloudDocumentaiV1beta3DocumentPageTable.from_dict(_item) for _item in obj["tables"]] if obj.get("tables") is not None else None,
            "tokens": [GoogleCloudDocumentaiV1beta3DocumentPageToken.from_dict(_item) for _item in obj["tokens"]] if obj.get("tokens") is not None else None,
            "transforms": [GoogleCloudDocumentaiV1beta3DocumentPageMatrix.from_dict(_item) for _item in obj["transforms"]] if obj.get("transforms") is not None else None,
            "visualElements": [GoogleCloudDocumentaiV1beta3DocumentPageVisualElement.from_dict(_item) for _item in obj["visualElements"]] if obj.get("visualElements") is not None else None
        })
        return _obj



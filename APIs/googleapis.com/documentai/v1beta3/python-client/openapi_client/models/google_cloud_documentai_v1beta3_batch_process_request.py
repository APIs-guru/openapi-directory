# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_v1beta3_batch_documents_input_config import GoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig
from openapi_client.models.google_cloud_documentai_v1beta3_batch_process_request_batch_input_config import GoogleCloudDocumentaiV1beta3BatchProcessRequestBatchInputConfig
from openapi_client.models.google_cloud_documentai_v1beta3_batch_process_request_batch_output_config import GoogleCloudDocumentaiV1beta3BatchProcessRequestBatchOutputConfig
from openapi_client.models.google_cloud_documentai_v1beta3_document_output_config import GoogleCloudDocumentaiV1beta3DocumentOutputConfig
from openapi_client.models.google_cloud_documentai_v1beta3_process_options import GoogleCloudDocumentaiV1beta3ProcessOptions
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1beta3BatchProcessRequest(BaseModel):
    """
    Request message for BatchProcessDocuments.
    """ # noqa: E501
    document_output_config: Optional[GoogleCloudDocumentaiV1beta3DocumentOutputConfig] = Field(default=None, alias="documentOutputConfig")
    input_configs: Optional[List[GoogleCloudDocumentaiV1beta3BatchProcessRequestBatchInputConfig]] = Field(default=None, description="The input config for each single document in the batch process.", alias="inputConfigs")
    input_documents: Optional[GoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig] = Field(default=None, alias="inputDocuments")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The labels with user-defined metadata for the request. Label keys and values can be no longer than 63 characters (Unicode codepoints) and can only contain lowercase letters, numeric characters, underscores, and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter.")
    output_config: Optional[GoogleCloudDocumentaiV1beta3BatchProcessRequestBatchOutputConfig] = Field(default=None, alias="outputConfig")
    process_options: Optional[GoogleCloudDocumentaiV1beta3ProcessOptions] = Field(default=None, alias="processOptions")
    skip_human_review: Optional[StrictBool] = Field(default=None, description="Whether human review should be skipped for this request. Default to `false`.", alias="skipHumanReview")
    __properties: ClassVar[List[str]] = ["documentOutputConfig", "inputConfigs", "inputDocuments", "labels", "outputConfig", "processOptions", "skipHumanReview"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3BatchProcessRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of document_output_config
        if self.document_output_config:
            _dict['documentOutputConfig'] = self.document_output_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in input_configs (list)
        _items = []
        if self.input_configs:
            for _item_input_configs in self.input_configs:
                if _item_input_configs:
                    _items.append(_item_input_configs.to_dict())
            _dict['inputConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of input_documents
        if self.input_documents:
            _dict['inputDocuments'] = self.input_documents.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output_config
        if self.output_config:
            _dict['outputConfig'] = self.output_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of process_options
        if self.process_options:
            _dict['processOptions'] = self.process_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3BatchProcessRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "documentOutputConfig": GoogleCloudDocumentaiV1beta3DocumentOutputConfig.from_dict(obj["documentOutputConfig"]) if obj.get("documentOutputConfig") is not None else None,
            "inputConfigs": [GoogleCloudDocumentaiV1beta3BatchProcessRequestBatchInputConfig.from_dict(_item) for _item in obj["inputConfigs"]] if obj.get("inputConfigs") is not None else None,
            "inputDocuments": GoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig.from_dict(obj["inputDocuments"]) if obj.get("inputDocuments") is not None else None,
            "labels": obj.get("labels"),
            "outputConfig": GoogleCloudDocumentaiV1beta3BatchProcessRequestBatchOutputConfig.from_dict(obj["outputConfig"]) if obj.get("outputConfig") is not None else None,
            "processOptions": GoogleCloudDocumentaiV1beta3ProcessOptions.from_dict(obj["processOptions"]) if obj.get("processOptions") is not None else None,
            "skipHumanReview": obj.get("skipHumanReview")
        })
        return _obj



# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_v1beta3_document_schema_entity_type_enum_values import GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeEnumValues
from openapi_client.models.google_cloud_documentai_v1beta3_document_schema_entity_type_property import GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty
from openapi_client.models.google_cloud_documentai_v1beta3_entity_type_metadata import GoogleCloudDocumentaiV1beta3EntityTypeMetadata
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType(BaseModel):
    """
    EntityType is the wrapper of a label of the corresponding model with detailed attributes and limitations for entity-based processors. Multiple types can also compose a dependency tree to represent nested types.
    """ # noqa: E501
    base_types: Optional[List[StrictStr]] = Field(default=None, description="The entity type that this type is derived from. For now, one and only one should be set.", alias="baseTypes")
    display_name: Optional[StrictStr] = Field(default=None, description="User defined name for the type.", alias="displayName")
    entity_type_metadata: Optional[GoogleCloudDocumentaiV1beta3EntityTypeMetadata] = Field(default=None, alias="entityTypeMetadata")
    enum_values: Optional[GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeEnumValues] = Field(default=None, alias="enumValues")
    name: Optional[StrictStr] = Field(default=None, description="Name of the type. It must be unique within the schema file and cannot be a \"Common Type\". The following naming conventions are used: - Use `snake_casing`. - Name matching is case-sensitive. - Maximum 64 characters. - Must start with a letter. - Allowed characters: ASCII letters `[a-z0-9_-]`. (For backward compatibility internal infrastructure and tooling can handle any ascii character.) - The `/` is sometimes used to denote a property of a type. For example `line_item/amount`. This convention is deprecated, but will still be honored for backward compatibility.")
    properties: Optional[List[GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty]] = Field(default=None, description="Description the nested structure, or composition of an entity.")
    __properties: ClassVar[List[str]] = ["baseTypes", "displayName", "entityTypeMetadata", "enumValues", "name", "properties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of entity_type_metadata
        if self.entity_type_metadata:
            _dict['entityTypeMetadata'] = self.entity_type_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enum_values
        if self.enum_values:
            _dict['enumValues'] = self.enum_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in properties (list)
        _items = []
        if self.properties:
            for _item_properties in self.properties:
                if _item_properties:
                    _items.append(_item_properties.to_dict())
            _dict['properties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseTypes": obj.get("baseTypes"),
            "displayName": obj.get("displayName"),
            "entityTypeMetadata": GoogleCloudDocumentaiV1beta3EntityTypeMetadata.from_dict(obj["entityTypeMetadata"]) if obj.get("entityTypeMetadata") is not None else None,
            "enumValues": GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeEnumValues.from_dict(obj["enumValues"]) if obj.get("enumValues") is not None else None,
            "name": obj.get("name"),
            "properties": [GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty.from_dict(_item) for _item in obj["properties"]] if obj.get("properties") is not None else None
        })
        return _obj



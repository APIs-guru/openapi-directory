# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_documentai_v1beta2_document_entity_normalized_value import GoogleCloudDocumentaiV1beta2DocumentEntityNormalizedValue
from openapi_client.models.google_cloud_documentai_v1beta2_document_page_anchor import GoogleCloudDocumentaiV1beta2DocumentPageAnchor
from openapi_client.models.google_cloud_documentai_v1beta2_document_provenance import GoogleCloudDocumentaiV1beta2DocumentProvenance
from openapi_client.models.google_cloud_documentai_v1beta2_document_text_anchor import GoogleCloudDocumentaiV1beta2DocumentTextAnchor
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1beta2DocumentEntity(BaseModel):
    """
    An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.
    """ # noqa: E501
    confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. Confidence of detected Schema entity. Range `[0, 1]`.")
    id: Optional[StrictStr] = Field(default=None, description="Optional. Canonical id. This will be a unique value in the entity list for this document.")
    mention_id: Optional[StrictStr] = Field(default=None, description="Optional. Deprecated. Use `id` field instead.", alias="mentionId")
    mention_text: Optional[StrictStr] = Field(default=None, description="Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.", alias="mentionText")
    normalized_value: Optional[GoogleCloudDocumentaiV1beta2DocumentEntityNormalizedValue] = Field(default=None, alias="normalizedValue")
    page_anchor: Optional[GoogleCloudDocumentaiV1beta2DocumentPageAnchor] = Field(default=None, alias="pageAnchor")
    properties: Optional[List[GoogleCloudDocumentaiV1beta2DocumentEntity]] = Field(default=None, description="Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.")
    provenance: Optional[GoogleCloudDocumentaiV1beta2DocumentProvenance] = None
    redacted: Optional[StrictBool] = Field(default=None, description="Optional. Whether the entity will be redacted for de-identification purposes.")
    text_anchor: Optional[GoogleCloudDocumentaiV1beta2DocumentTextAnchor] = Field(default=None, alias="textAnchor")
    type: Optional[StrictStr] = Field(default=None, description="Required. Entity type from a schema e.g. `Address`.")
    __properties: ClassVar[List[str]] = ["confidence", "id", "mentionId", "mentionText", "normalizedValue", "pageAnchor", "properties", "provenance", "redacted", "textAnchor", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta2DocumentEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of normalized_value
        if self.normalized_value:
            _dict['normalizedValue'] = self.normalized_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of page_anchor
        if self.page_anchor:
            _dict['pageAnchor'] = self.page_anchor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in properties (list)
        _items = []
        if self.properties:
            for _item_properties in self.properties:
                if _item_properties:
                    _items.append(_item_properties.to_dict())
            _dict['properties'] = _items
        # override the default output from pydantic by calling `to_dict()` of provenance
        if self.provenance:
            _dict['provenance'] = self.provenance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_anchor
        if self.text_anchor:
            _dict['textAnchor'] = self.text_anchor.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta2DocumentEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confidence": obj.get("confidence"),
            "id": obj.get("id"),
            "mentionId": obj.get("mentionId"),
            "mentionText": obj.get("mentionText"),
            "normalizedValue": GoogleCloudDocumentaiV1beta2DocumentEntityNormalizedValue.from_dict(obj["normalizedValue"]) if obj.get("normalizedValue") is not None else None,
            "pageAnchor": GoogleCloudDocumentaiV1beta2DocumentPageAnchor.from_dict(obj["pageAnchor"]) if obj.get("pageAnchor") is not None else None,
            "properties": [GoogleCloudDocumentaiV1beta2DocumentEntity.from_dict(_item) for _item in obj["properties"]] if obj.get("properties") is not None else None,
            "provenance": GoogleCloudDocumentaiV1beta2DocumentProvenance.from_dict(obj["provenance"]) if obj.get("provenance") is not None else None,
            "redacted": obj.get("redacted"),
            "textAnchor": GoogleCloudDocumentaiV1beta2DocumentTextAnchor.from_dict(obj["textAnchor"]) if obj.get("textAnchor") is not None else None,
            "type": obj.get("type")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
GoogleCloudDocumentaiV1beta2DocumentEntity.model_rebuild(raise_errors=False)


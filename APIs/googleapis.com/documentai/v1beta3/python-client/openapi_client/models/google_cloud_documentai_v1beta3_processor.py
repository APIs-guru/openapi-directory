# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_v1beta3_processor_version_alias import GoogleCloudDocumentaiV1beta3ProcessorVersionAlias
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1beta3Processor(BaseModel):
    """
    The first-class citizen for Document AI. Each processor defines how to extract structural information from a document.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="The time the processor was created.", alias="createTime")
    default_processor_version: Optional[StrictStr] = Field(default=None, description="The default processor version.", alias="defaultProcessorVersion")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the processor.", alias="displayName")
    kms_key_name: Optional[StrictStr] = Field(default=None, description="The [KMS key](https://cloud.google.com/security-key-management) used for encryption and decryption in CMEK scenarios.", alias="kmsKeyName")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. The resource name of the processor. Format: `projects/{project}/locations/{location}/processors/{processor}`")
    process_endpoint: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. The http endpoint that can be called to invoke processing.", alias="processEndpoint")
    processor_version_aliases: Optional[List[GoogleCloudDocumentaiV1beta3ProcessorVersionAlias]] = Field(default=None, description="Output only. The processor version aliases.", alias="processorVersionAliases")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the processor.")
    type: Optional[StrictStr] = Field(default=None, description="The processor type, such as: `OCR_PROCESSOR`, `INVOICE_PROCESSOR`. To get a list of processor types, see FetchProcessorTypes.")
    __properties: ClassVar[List[str]] = ["createTime", "defaultProcessorVersion", "displayName", "kmsKeyName", "name", "processEndpoint", "processorVersionAliases", "state", "type"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ENABLED', 'DISABLED', 'ENABLING', 'DISABLING', 'CREATING', 'FAILED', 'DELETING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ENABLED', 'DISABLED', 'ENABLING', 'DISABLING', 'CREATING', 'FAILED', 'DELETING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3Processor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "process_endpoint",
            "processor_version_aliases",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in processor_version_aliases (list)
        _items = []
        if self.processor_version_aliases:
            for _item_processor_version_aliases in self.processor_version_aliases:
                if _item_processor_version_aliases:
                    _items.append(_item_processor_version_aliases.to_dict())
            _dict['processorVersionAliases'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3Processor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "defaultProcessorVersion": obj.get("defaultProcessorVersion"),
            "displayName": obj.get("displayName"),
            "kmsKeyName": obj.get("kmsKeyName"),
            "name": obj.get("name"),
            "processEndpoint": obj.get("processEndpoint"),
            "processorVersionAliases": [GoogleCloudDocumentaiV1beta3ProcessorVersionAlias.from_dict(_item) for _item in obj["processorVersionAliases"]] if obj.get("processorVersionAliases") is not None else None,
            "state": obj.get("state"),
            "type": obj.get("type")
        })
        return _obj



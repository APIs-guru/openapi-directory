# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_documentai_v1beta3_evaluation_confidence_level_metrics import GoogleCloudDocumentaiV1beta3EvaluationConfidenceLevelMetrics
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1beta3EvaluationMultiConfidenceMetrics(BaseModel):
    """
    Metrics across multiple confidence levels.
    """ # noqa: E501
    auprc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The calculated area under the precision recall curve (AUPRC), computed by integrating over all confidence thresholds.")
    auprc_exact: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The AUPRC for metrics with fuzzy matching disabled, i.e., exact matching only.", alias="auprcExact")
    confidence_level_metrics: Optional[List[GoogleCloudDocumentaiV1beta3EvaluationConfidenceLevelMetrics]] = Field(default=None, description="Metrics across confidence levels with fuzzy matching enabled.", alias="confidenceLevelMetrics")
    confidence_level_metrics_exact: Optional[List[GoogleCloudDocumentaiV1beta3EvaluationConfidenceLevelMetrics]] = Field(default=None, description="Metrics across confidence levels with only exact matching.", alias="confidenceLevelMetricsExact")
    estimated_calibration_error: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Estimated Calibration Error (ECE) of the confidence of the predicted entities.", alias="estimatedCalibrationError")
    estimated_calibration_error_exact: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The ECE for the predicted entities with fuzzy matching disabled, i.e., exact matching only.", alias="estimatedCalibrationErrorExact")
    metrics_type: Optional[StrictStr] = Field(default=None, description="The metrics type for the label.", alias="metricsType")
    __properties: ClassVar[List[str]] = ["auprc", "auprcExact", "confidenceLevelMetrics", "confidenceLevelMetricsExact", "estimatedCalibrationError", "estimatedCalibrationErrorExact", "metricsType"]

    @field_validator('metrics_type')
    def metrics_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['METRICS_TYPE_UNSPECIFIED', 'AGGREGATE']):
            raise ValueError("must be one of enum values ('METRICS_TYPE_UNSPECIFIED', 'AGGREGATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3EvaluationMultiConfidenceMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in confidence_level_metrics (list)
        _items = []
        if self.confidence_level_metrics:
            for _item_confidence_level_metrics in self.confidence_level_metrics:
                if _item_confidence_level_metrics:
                    _items.append(_item_confidence_level_metrics.to_dict())
            _dict['confidenceLevelMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in confidence_level_metrics_exact (list)
        _items = []
        if self.confidence_level_metrics_exact:
            for _item_confidence_level_metrics_exact in self.confidence_level_metrics_exact:
                if _item_confidence_level_metrics_exact:
                    _items.append(_item_confidence_level_metrics_exact.to_dict())
            _dict['confidenceLevelMetricsExact'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3EvaluationMultiConfidenceMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auprc": obj.get("auprc"),
            "auprcExact": obj.get("auprcExact"),
            "confidenceLevelMetrics": [GoogleCloudDocumentaiV1beta3EvaluationConfidenceLevelMetrics.from_dict(_item) for _item in obj["confidenceLevelMetrics"]] if obj.get("confidenceLevelMetrics") is not None else None,
            "confidenceLevelMetricsExact": [GoogleCloudDocumentaiV1beta3EvaluationConfidenceLevelMetrics.from_dict(_item) for _item in obj["confidenceLevelMetricsExact"]] if obj.get("confidenceLevelMetricsExact") is not None else None,
            "estimatedCalibrationError": obj.get("estimatedCalibrationError"),
            "estimatedCalibrationErrorExact": obj.get("estimatedCalibrationErrorExact"),
            "metricsType": obj.get("metricsType")
        })
        return _obj



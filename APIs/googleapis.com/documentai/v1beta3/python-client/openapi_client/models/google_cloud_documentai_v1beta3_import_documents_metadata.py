# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_v1beta3_common_operation_metadata import GoogleCloudDocumentaiV1beta3CommonOperationMetadata
from openapi_client.models.google_cloud_documentai_v1beta3_import_documents_metadata_import_config_validation_result import GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult
from openapi_client.models.google_cloud_documentai_v1beta3_import_documents_metadata_individual_import_status import GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataIndividualImportStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata(BaseModel):
    """
    Metadata of the import document operation.
    """ # noqa: E501
    common_metadata: Optional[GoogleCloudDocumentaiV1beta3CommonOperationMetadata] = Field(default=None, alias="commonMetadata")
    import_config_validation_results: Optional[List[GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult]] = Field(default=None, description="Validation statuses of the batch documents import config.", alias="importConfigValidationResults")
    individual_import_statuses: Optional[List[GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataIndividualImportStatus]] = Field(default=None, description="The list of response details of each document.", alias="individualImportStatuses")
    total_document_count: Optional[StrictInt] = Field(default=None, description="Total number of the documents that are qualified for importing.", alias="totalDocumentCount")
    __properties: ClassVar[List[str]] = ["commonMetadata", "importConfigValidationResults", "individualImportStatuses", "totalDocumentCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of common_metadata
        if self.common_metadata:
            _dict['commonMetadata'] = self.common_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in import_config_validation_results (list)
        _items = []
        if self.import_config_validation_results:
            for _item_import_config_validation_results in self.import_config_validation_results:
                if _item_import_config_validation_results:
                    _items.append(_item_import_config_validation_results.to_dict())
            _dict['importConfigValidationResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in individual_import_statuses (list)
        _items = []
        if self.individual_import_statuses:
            for _item_individual_import_statuses in self.individual_import_statuses:
                if _item_individual_import_statuses:
                    _items.append(_item_individual_import_statuses.to_dict())
            _dict['individualImportStatuses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commonMetadata": GoogleCloudDocumentaiV1beta3CommonOperationMetadata.from_dict(obj["commonMetadata"]) if obj.get("commonMetadata") is not None else None,
            "importConfigValidationResults": [GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult.from_dict(_item) for _item in obj["importConfigValidationResults"]] if obj.get("importConfigValidationResults") is not None else None,
            "individualImportStatuses": [GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataIndividualImportStatus.from_dict(_item) for _item in obj["individualImportStatuses"]] if obj.get("individualImportStatuses") is not None else None,
            "totalDocumentCount": obj.get("totalDocumentCount")
        })
        return _obj



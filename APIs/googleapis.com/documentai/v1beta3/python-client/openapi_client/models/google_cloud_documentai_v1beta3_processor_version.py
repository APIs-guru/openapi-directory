# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_v1beta3_document_schema import GoogleCloudDocumentaiV1beta3DocumentSchema
from openapi_client.models.google_cloud_documentai_v1beta3_evaluation_reference import GoogleCloudDocumentaiV1beta3EvaluationReference
from openapi_client.models.google_cloud_documentai_v1beta3_processor_version_deprecation_info import GoogleCloudDocumentaiV1beta3ProcessorVersionDeprecationInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1beta3ProcessorVersion(BaseModel):
    """
    A processor version is an implementation of a processor. Each processor can have multiple versions, pretrained by Google internally or uptrained by the customer. A processor can only have one default version at a time. Its document-processing behavior is defined by that version.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="The time the processor version was created.", alias="createTime")
    deprecation_info: Optional[GoogleCloudDocumentaiV1beta3ProcessorVersionDeprecationInfo] = Field(default=None, alias="deprecationInfo")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the processor version.", alias="displayName")
    document_schema: Optional[GoogleCloudDocumentaiV1beta3DocumentSchema] = Field(default=None, alias="documentSchema")
    google_managed: Optional[StrictBool] = Field(default=None, description="Output only. Denotes that this `ProcessorVersion` is managed by Google.", alias="googleManaged")
    kms_key_name: Optional[StrictStr] = Field(default=None, description="The KMS key name used for encryption.", alias="kmsKeyName")
    kms_key_version_name: Optional[StrictStr] = Field(default=None, description="The KMS key version with which data is encrypted.", alias="kmsKeyVersionName")
    latest_evaluation: Optional[GoogleCloudDocumentaiV1beta3EvaluationReference] = Field(default=None, alias="latestEvaluation")
    model_type: Optional[StrictStr] = Field(default=None, description="Output only. The model type of this processor version.", alias="modelType")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the processor version. Format: `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processor_version}`")
    state: Optional[StrictStr] = Field(default=None, description="The state of the processor version.")
    __properties: ClassVar[List[str]] = ["createTime", "deprecationInfo", "displayName", "documentSchema", "googleManaged", "kmsKeyName", "kmsKeyVersionName", "latestEvaluation", "modelType", "name", "state"]

    @field_validator('model_type')
    def model_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MODEL_TYPE_UNSPECIFIED', 'MODEL_TYPE_GENERATIVE', 'MODEL_TYPE_CUSTOM']):
            raise ValueError("must be one of enum values ('MODEL_TYPE_UNSPECIFIED', 'MODEL_TYPE_GENERATIVE', 'MODEL_TYPE_CUSTOM')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'DEPLOYED', 'DEPLOYING', 'UNDEPLOYED', 'UNDEPLOYING', 'CREATING', 'DELETING', 'FAILED', 'IMPORTING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'DEPLOYED', 'DEPLOYING', 'UNDEPLOYED', 'UNDEPLOYING', 'CREATING', 'DELETING', 'FAILED', 'IMPORTING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3ProcessorVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "google_managed",
            "model_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of deprecation_info
        if self.deprecation_info:
            _dict['deprecationInfo'] = self.deprecation_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_schema
        if self.document_schema:
            _dict['documentSchema'] = self.document_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of latest_evaluation
        if self.latest_evaluation:
            _dict['latestEvaluation'] = self.latest_evaluation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3ProcessorVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "deprecationInfo": GoogleCloudDocumentaiV1beta3ProcessorVersionDeprecationInfo.from_dict(obj["deprecationInfo"]) if obj.get("deprecationInfo") is not None else None,
            "displayName": obj.get("displayName"),
            "documentSchema": GoogleCloudDocumentaiV1beta3DocumentSchema.from_dict(obj["documentSchema"]) if obj.get("documentSchema") is not None else None,
            "googleManaged": obj.get("googleManaged"),
            "kmsKeyName": obj.get("kmsKeyName"),
            "kmsKeyVersionName": obj.get("kmsKeyVersionName"),
            "latestEvaluation": GoogleCloudDocumentaiV1beta3EvaluationReference.from_dict(obj["latestEvaluation"]) if obj.get("latestEvaluation") is not None else None,
            "modelType": obj.get("modelType"),
            "name": obj.get("name"),
            "state": obj.get("state")
        })
        return _obj



# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_v1beta3_document_schema_entity_type import GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType
from openapi_client.models.google_cloud_documentai_v1beta3_document_schema_metadata import GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1beta3DocumentSchema(BaseModel):
    """
    The schema defines the output of the processed document by a processor.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Description of the schema.")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name to show to users.", alias="displayName")
    entity_types: Optional[List[GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType]] = Field(default=None, description="Entity types of the schema.", alias="entityTypes")
    metadata: Optional[GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata] = None
    __properties: ClassVar[List[str]] = ["description", "displayName", "entityTypes", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3DocumentSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in entity_types (list)
        _items = []
        if self.entity_types:
            for _item_entity_types in self.entity_types:
                if _item_entity_types:
                    _items.append(_item_entity_types.to_dict())
            _dict['entityTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3DocumentSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "entityTypes": [GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType.from_dict(_item) for _item in obj["entityTypes"]] if obj.get("entityTypes") is not None else None,
            "metadata": GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None
        })
        return _obj



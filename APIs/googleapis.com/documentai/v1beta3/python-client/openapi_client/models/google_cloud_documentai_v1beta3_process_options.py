# coding: utf-8

"""
    Cloud Document AI API

    Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_documentai_v1beta3_document_schema import GoogleCloudDocumentaiV1beta3DocumentSchema
from openapi_client.models.google_cloud_documentai_v1beta3_ocr_config import GoogleCloudDocumentaiV1beta3OcrConfig
from openapi_client.models.google_cloud_documentai_v1beta3_process_options_individual_page_selector import GoogleCloudDocumentaiV1beta3ProcessOptionsIndividualPageSelector
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDocumentaiV1beta3ProcessOptions(BaseModel):
    """
    Options for Process API
    """ # noqa: E501
    from_end: Optional[StrictInt] = Field(default=None, description="Only process certain pages from the end, same as above.", alias="fromEnd")
    from_start: Optional[StrictInt] = Field(default=None, description="Only process certain pages from the start. Process all if the document has fewer pages.", alias="fromStart")
    individual_page_selector: Optional[GoogleCloudDocumentaiV1beta3ProcessOptionsIndividualPageSelector] = Field(default=None, alias="individualPageSelector")
    ocr_config: Optional[GoogleCloudDocumentaiV1beta3OcrConfig] = Field(default=None, alias="ocrConfig")
    schema_override: Optional[GoogleCloudDocumentaiV1beta3DocumentSchema] = Field(default=None, alias="schemaOverride")
    __properties: ClassVar[List[str]] = ["fromEnd", "fromStart", "individualPageSelector", "ocrConfig", "schemaOverride"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3ProcessOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of individual_page_selector
        if self.individual_page_selector:
            _dict['individualPageSelector'] = self.individual_page_selector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ocr_config
        if self.ocr_config:
            _dict['ocrConfig'] = self.ocr_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schema_override
        if self.schema_override:
            _dict['schemaOverride'] = self.schema_override.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDocumentaiV1beta3ProcessOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fromEnd": obj.get("fromEnd"),
            "fromStart": obj.get("fromStart"),
            "individualPageSelector": GoogleCloudDocumentaiV1beta3ProcessOptionsIndividualPageSelector.from_dict(obj["individualPageSelector"]) if obj.get("individualPageSelector") is not None else None,
            "ocrConfig": GoogleCloudDocumentaiV1beta3OcrConfig.from_dict(obj["ocrConfig"]) if obj.get("ocrConfig") is not None else None,
            "schemaOverride": GoogleCloudDocumentaiV1beta3DocumentSchema.from_dict(obj["schemaOverride"]) if obj.get("schemaOverride") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Digital Asset Links API

    Discovers relationships between online assets such as websites or mobile apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_response import ListResponse

class TestListResponse(unittest.TestCase):
    """ListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListResponse:
        """Test ListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListResponse`
        """
        model = ListResponse()
        if include_optional:
            return ListResponse(
                debug_string = '',
                error_code = [
                    'ERROR_CODE_UNSPECIFIED'
                    ],
                max_age = '',
                statements = [
                    openapi_client.models.statement.Statement(
                        relation = '', 
                        source = openapi_client.models.asset.Asset(
                            android_app = openapi_client.models.android_app_asset.AndroidAppAsset(
                                certificate = openapi_client.models.certificate_info.CertificateInfo(
                                    sha256_fingerprint = '', ), 
                                package_name = '', ), 
                            web = openapi_client.models.web_asset.WebAsset(
                                site = '', ), ), 
                        target = openapi_client.models.asset.Asset(), )
                    ]
            )
        else:
            return ListResponse(
        )
        """

    def testListResponse(self):
        """Test ListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Digital Asset Links API

    Discovers relationships between online assets such as websites or mobile apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.asset import Asset
from openapi_client.models.statement_template import StatementTemplate
from typing import Optional, Set
from typing_extensions import Self

class BulkCheckRequest(BaseModel):
    """
    Message used to check for the existence of multiple digital asset links within a single RPC.
    """ # noqa: E501
    allow_google_internal_data_sources: Optional[StrictBool] = Field(default=None, description="Same configuration as in Check request, all statements checks will use same configurations.", alias="allowGoogleInternalDataSources")
    default_relation: Optional[StrictStr] = Field(default=None, description="If specified, will be used in any given template statement that doesnâ€™t specify a relation.", alias="defaultRelation")
    default_source: Optional[Asset] = Field(default=None, alias="defaultSource")
    default_target: Optional[Asset] = Field(default=None, alias="defaultTarget")
    skip_cache_lookup: Optional[StrictBool] = Field(default=None, description="Same configuration as in Check request, all statements checks will use same configurations.", alias="skipCacheLookup")
    statements: Optional[List[StatementTemplate]] = Field(default=None, description="List of statements to check. For each statement, you can omit a field if the corresponding default_* field below was supplied. Minimum 1 statement; maximum 1,000 statements. Any additional statements will be ignored.")
    __properties: ClassVar[List[str]] = ["allowGoogleInternalDataSources", "defaultRelation", "defaultSource", "defaultTarget", "skipCacheLookup", "statements"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BulkCheckRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_source
        if self.default_source:
            _dict['defaultSource'] = self.default_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_target
        if self.default_target:
            _dict['defaultTarget'] = self.default_target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in statements (list)
        _items = []
        if self.statements:
            for _item_statements in self.statements:
                if _item_statements:
                    _items.append(_item_statements.to_dict())
            _dict['statements'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BulkCheckRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowGoogleInternalDataSources": obj.get("allowGoogleInternalDataSources"),
            "defaultRelation": obj.get("defaultRelation"),
            "defaultSource": Asset.from_dict(obj["defaultSource"]) if obj.get("defaultSource") is not None else None,
            "defaultTarget": Asset.from_dict(obj["defaultTarget"]) if obj.get("defaultTarget") is not None else None,
            "skipCacheLookup": obj.get("skipCacheLookup"),
            "statements": [StatementTemplate.from_dict(_item) for _item in obj["statements"]] if obj.get("statements") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Digital Asset Links API

    Discovers relationships between online assets such as websites or mobile apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.statement import Statement
from typing import Optional, Set
from typing_extensions import Self

class ListResponse(BaseModel):
    """
    Response message for the List call.
    """ # noqa: E501
    debug_string: Optional[StrictStr] = Field(default=None, description="Human-readable message containing information intended to help end users understand, reproduce and debug the result. The message will be in English and we are currently not planning to offer any translations. Please note that no guarantees are made about the contents or format of this string. Any aspect of it may be subject to change without notice. You should not attempt to programmatically parse this data. For programmatic access, use the error_code field below.", alias="debugString")
    error_code: Optional[List[StrictStr]] = Field(default=None, description="Error codes that describe the result of the List operation.", alias="errorCode")
    max_age: Optional[StrictStr] = Field(default=None, description="From serving time, how much longer the response should be considered valid barring further updates. REQUIRED", alias="maxAge")
    statements: Optional[List[Statement]] = Field(default=None, description="A list of all the matching statements that have been found.")
    __properties: ClassVar[List[str]] = ["debugString", "errorCode", "maxAge", "statements"]

    @field_validator('error_code')
    def error_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ERROR_CODE_UNSPECIFIED', 'ERROR_CODE_INVALID_QUERY', 'ERROR_CODE_FETCH_ERROR', 'ERROR_CODE_FAILED_SSL_VALIDATION', 'ERROR_CODE_REDIRECT', 'ERROR_CODE_TOO_LARGE', 'ERROR_CODE_MALFORMED_HTTP_RESPONSE', 'ERROR_CODE_WRONG_CONTENT_TYPE', 'ERROR_CODE_MALFORMED_CONTENT', 'ERROR_CODE_SECURE_ASSET_INCLUDES_INSECURE', 'ERROR_CODE_FETCH_BUDGET_EXHAUSTED']):
                raise ValueError("each list item must be one of ('ERROR_CODE_UNSPECIFIED', 'ERROR_CODE_INVALID_QUERY', 'ERROR_CODE_FETCH_ERROR', 'ERROR_CODE_FAILED_SSL_VALIDATION', 'ERROR_CODE_REDIRECT', 'ERROR_CODE_TOO_LARGE', 'ERROR_CODE_MALFORMED_HTTP_RESPONSE', 'ERROR_CODE_WRONG_CONTENT_TYPE', 'ERROR_CODE_MALFORMED_CONTENT', 'ERROR_CODE_SECURE_ASSET_INCLUDES_INSECURE', 'ERROR_CODE_FETCH_BUDGET_EXHAUSTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in statements (list)
        _items = []
        if self.statements:
            for _item_statements in self.statements:
                if _item_statements:
                    _items.append(_item_statements.to_dict())
            _dict['statements'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "debugString": obj.get("debugString"),
            "errorCode": obj.get("errorCode"),
            "maxAge": obj.get("maxAge"),
            "statements": [Statement.from_dict(_item) for _item in obj["statements"]] if obj.get("statements") is not None else None
        })
        return _obj



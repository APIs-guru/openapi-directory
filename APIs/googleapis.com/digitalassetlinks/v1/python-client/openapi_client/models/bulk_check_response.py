# coding: utf-8

"""
    Digital Asset Links API

    Discovers relationships between online assets such as websites or mobile apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.check_response import CheckResponse
from typing import Optional, Set
from typing_extensions import Self

class BulkCheckResponse(BaseModel):
    """
    Response for BulkCheck call. Results are sent in a list in the same order in which they were sent. Individual check errors are described in the appropriate check_results entry. If the entire call fails, the response will include a bulk_error_code field describing the error.
    """ # noqa: E501
    bulk_error_code: Optional[StrictStr] = Field(default=None, description="Error code for the entire request. Present only if the entire request failed. Individual check errors will not trigger the presence of this field.", alias="bulkErrorCode")
    check_results: Optional[List[CheckResponse]] = Field(default=None, description="List of results for each check request. Results are returned in the same order in which they were sent in the request.", alias="checkResults")
    __properties: ClassVar[List[str]] = ["bulkErrorCode", "checkResults"]

    @field_validator('bulk_error_code')
    def bulk_error_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ERROR_CODE_UNSPECIFIED', 'ERROR_CODE_INVALID_QUERY', 'ERROR_CODE_FETCH_ERROR', 'ERROR_CODE_FAILED_SSL_VALIDATION', 'ERROR_CODE_REDIRECT', 'ERROR_CODE_TOO_LARGE', 'ERROR_CODE_MALFORMED_HTTP_RESPONSE', 'ERROR_CODE_WRONG_CONTENT_TYPE', 'ERROR_CODE_MALFORMED_CONTENT', 'ERROR_CODE_SECURE_ASSET_INCLUDES_INSECURE', 'ERROR_CODE_FETCH_BUDGET_EXHAUSTED']):
            raise ValueError("must be one of enum values ('ERROR_CODE_UNSPECIFIED', 'ERROR_CODE_INVALID_QUERY', 'ERROR_CODE_FETCH_ERROR', 'ERROR_CODE_FAILED_SSL_VALIDATION', 'ERROR_CODE_REDIRECT', 'ERROR_CODE_TOO_LARGE', 'ERROR_CODE_MALFORMED_HTTP_RESPONSE', 'ERROR_CODE_WRONG_CONTENT_TYPE', 'ERROR_CODE_MALFORMED_CONTENT', 'ERROR_CODE_SECURE_ASSET_INCLUDES_INSECURE', 'ERROR_CODE_FETCH_BUDGET_EXHAUSTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BulkCheckResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in check_results (list)
        _items = []
        if self.check_results:
            for _item_check_results in self.check_results:
                if _item_check_results:
                    _items.append(_item_check_results.to_dict())
            _dict['checkResults'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BulkCheckResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bulkErrorCode": obj.get("bulkErrorCode"),
            "checkResults": [CheckResponse.from_dict(_item) for _item in obj["checkResults"]] if obj.get("checkResults") is not None else None
        })
        return _obj



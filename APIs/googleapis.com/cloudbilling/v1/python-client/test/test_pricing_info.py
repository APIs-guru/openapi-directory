# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.pricing_info import PricingInfo

class TestPricingInfo(unittest.TestCase):
    """PricingInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PricingInfo:
        """Test PricingInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PricingInfo`
        """
        model = PricingInfo()
        if include_optional:
            return PricingInfo(
                aggregation_info = openapi_client.models.aggregation_info.AggregationInfo(
                    aggregation_count = 56, 
                    aggregation_interval = 'AGGREGATION_INTERVAL_UNSPECIFIED', 
                    aggregation_level = 'AGGREGATION_LEVEL_UNSPECIFIED', ),
                currency_conversion_rate = 1.337,
                effective_time = '',
                pricing_expression = openapi_client.models.pricing_expression.PricingExpression(
                    base_unit = '', 
                    base_unit_conversion_factor = 1.337, 
                    base_unit_description = '', 
                    display_quantity = 1.337, 
                    tiered_rates = [
                        openapi_client.models.tier_rate.TierRate(
                            start_usage_amount = 1.337, 
                            unit_price = openapi_client.models.money.Money(
                                currency_code = '', 
                                nanos = 56, 
                                units = '', ), )
                        ], 
                    usage_unit = '', 
                    usage_unit_description = '', ),
                summary = ''
            )
        else:
            return PricingInfo(
        )
        """

    def testPricingInfo(self):
        """Test PricingInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

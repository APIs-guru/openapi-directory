# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.tier_rate import TierRate
from typing import Optional, Set
from typing_extensions import Self

class PricingExpression(BaseModel):
    """
    Expresses a mathematical pricing formula. For Example:- `usage_unit: GBy` `tiered_rates:` `[start_usage_amount: 20, unit_price: $10]` `[start_usage_amount: 100, unit_price: $5]` The above expresses a pricing formula where the first 20GB is free, the next 80GB is priced at $10 per GB followed by $5 per GB for additional usage.
    """ # noqa: E501
    base_unit: Optional[StrictStr] = Field(default=None, description="The base unit for the SKU which is the unit used in usage exports. Example: \"By\"", alias="baseUnit")
    base_unit_conversion_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Conversion factor for converting from price per usage_unit to price per base_unit, and start_usage_amount to start_usage_amount in base_unit. unit_price / base_unit_conversion_factor = price per base_unit. start_usage_amount * base_unit_conversion_factor = start_usage_amount in base_unit.", alias="baseUnitConversionFactor")
    base_unit_description: Optional[StrictStr] = Field(default=None, description="The base unit in human readable form. Example: \"byte\".", alias="baseUnitDescription")
    display_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The recommended quantity of units for displaying pricing info. When displaying pricing info it is recommended to display: (unit_price * display_quantity) per display_quantity usage_unit. This field does not affect the pricing formula and is for display purposes only. Example: If the unit_price is \"0.0001 USD\", the usage_unit is \"GB\" and the display_quantity is \"1000\" then the recommended way of displaying the pricing info is \"0.10 USD per 1000 GB\"", alias="displayQuantity")
    tiered_rates: Optional[List[TierRate]] = Field(default=None, description="The list of tiered rates for this pricing. The total cost is computed by applying each of the tiered rates on usage. This repeated list is sorted by ascending order of start_usage_amount.", alias="tieredRates")
    usage_unit: Optional[StrictStr] = Field(default=None, description="The short hand for unit of usage this pricing is specified in. Example: usage_unit of \"GiBy\" means that usage is specified in \"Gibi Byte\".", alias="usageUnit")
    usage_unit_description: Optional[StrictStr] = Field(default=None, description="The unit of usage in human readable form. Example: \"gibi byte\".", alias="usageUnitDescription")
    __properties: ClassVar[List[str]] = ["baseUnit", "baseUnitConversionFactor", "baseUnitDescription", "displayQuantity", "tieredRates", "usageUnit", "usageUnitDescription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PricingExpression from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tiered_rates (list)
        _items = []
        if self.tiered_rates:
            for _item_tiered_rates in self.tiered_rates:
                if _item_tiered_rates:
                    _items.append(_item_tiered_rates.to_dict())
            _dict['tieredRates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PricingExpression from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseUnit": obj.get("baseUnit"),
            "baseUnitConversionFactor": obj.get("baseUnitConversionFactor"),
            "baseUnitDescription": obj.get("baseUnitDescription"),
            "displayQuantity": obj.get("displayQuantity"),
            "tieredRates": [TierRate.from_dict(_item) for _item in obj["tieredRates"]] if obj.get("tieredRates") is not None else None,
            "usageUnit": obj.get("usageUnit"),
            "usageUnitDescription": obj.get("usageUnitDescription")
        })
        return _obj



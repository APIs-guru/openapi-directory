# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.aggregation_info import AggregationInfo
from openapi_client.models.pricing_expression import PricingExpression
from typing import Optional, Set
from typing_extensions import Self

class PricingInfo(BaseModel):
    """
    Represents the pricing information for a SKU at a single point of time.
    """ # noqa: E501
    aggregation_info: Optional[AggregationInfo] = Field(default=None, alias="aggregationInfo")
    currency_conversion_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Conversion rate used for currency conversion, from USD to the currency specified in the request. This includes any surcharge collected for billing in non USD currency. If a currency is not specified in the request this defaults to 1.0. Example: USD * currency_conversion_rate = JPY", alias="currencyConversionRate")
    effective_time: Optional[StrictStr] = Field(default=None, description="The timestamp from which this pricing was effective within the requested time range. This is guaranteed to be greater than or equal to the start_time field in the request and less than the end_time field in the request. If a time range was not specified in the request this field will be equivalent to a time within the last 12 hours, indicating the latest pricing info.", alias="effectiveTime")
    pricing_expression: Optional[PricingExpression] = Field(default=None, alias="pricingExpression")
    summary: Optional[StrictStr] = Field(default=None, description="An optional human readable summary of the pricing information, has a maximum length of 256 characters.")
    __properties: ClassVar[List[str]] = ["aggregationInfo", "currencyConversionRate", "effectiveTime", "pricingExpression", "summary"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PricingInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aggregation_info
        if self.aggregation_info:
            _dict['aggregationInfo'] = self.aggregation_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pricing_expression
        if self.pricing_expression:
            _dict['pricingExpression'] = self.pricing_expression.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PricingInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregationInfo": AggregationInfo.from_dict(obj["aggregationInfo"]) if obj.get("aggregationInfo") is not None else None,
            "currencyConversionRate": obj.get("currencyConversionRate"),
            "effectiveTime": obj.get("effectiveTime"),
            "pricingExpression": PricingExpression.from_dict(obj["pricingExpression"]) if obj.get("pricingExpression") is not None else None,
            "summary": obj.get("summary")
        })
        return _obj



# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_billing_billingaccountskugroupskus_v1beta_geo_taxonomy_regional import GoogleCloudBillingBillingaccountskugroupskusV1betaGeoTaxonomyRegional

class TestGoogleCloudBillingBillingaccountskugroupskusV1betaGeoTaxonomyRegional(unittest.TestCase):
    """GoogleCloudBillingBillingaccountskugroupskusV1betaGeoTaxonomyRegional unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudBillingBillingaccountskugroupskusV1betaGeoTaxonomyRegional:
        """Test GoogleCloudBillingBillingaccountskugroupskusV1betaGeoTaxonomyRegional
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudBillingBillingaccountskugroupskusV1betaGeoTaxonomyRegional`
        """
        model = GoogleCloudBillingBillingaccountskugroupskusV1betaGeoTaxonomyRegional()
        if include_optional:
            return GoogleCloudBillingBillingaccountskugroupskusV1betaGeoTaxonomyRegional(
                region = openapi_client.models.google_cloud_billing_billingaccountskugroupskus_v1beta_geo_taxonomy_region.GoogleCloudBillingBillingaccountskugroupskusV1betaGeoTaxonomyRegion()
            )
        else:
            return GoogleCloudBillingBillingaccountskugroupskusV1betaGeoTaxonomyRegional(
        )
        """

    def testGoogleCloudBillingBillingaccountskugroupskusV1betaGeoTaxonomyRegional(self):
        """Test GoogleCloudBillingBillingaccountskugroupskusV1betaGeoTaxonomyRegional"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

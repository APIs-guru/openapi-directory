# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.estimate_cost_scenario_for_billing_account_response import EstimateCostScenarioForBillingAccountResponse

class TestEstimateCostScenarioForBillingAccountResponse(unittest.TestCase):
    """EstimateCostScenarioForBillingAccountResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EstimateCostScenarioForBillingAccountResponse:
        """Test EstimateCostScenarioForBillingAccountResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EstimateCostScenarioForBillingAccountResponse`
        """
        model = EstimateCostScenarioForBillingAccountResponse()
        if include_optional:
            return EstimateCostScenarioForBillingAccountResponse(
                cost_estimation_result = openapi_client.models.cost_estimation_result.CostEstimationResult(
                    currency_code = '', 
                    segment_cost_estimates = [
                        openapi_client.models.segment_cost_estimate.SegmentCostEstimate(
                            commitment_cost_estimates = [
                                openapi_client.models.commitment_cost_estimate.CommitmentCostEstimate(
                                    commitment_total_cost_estimate = openapi_client.models.cost_estimate.CostEstimate(
                                        credit_estimates = [
                                            openapi_client.models.credit_estimate.CreditEstimate(
                                                credit_amount = openapi_client.models.money.Money(
                                                    currency_code = '', 
                                                    nanos = 56, 
                                                    units = '', ), 
                                                credit_description = '', 
                                                credit_type = '', )
                                            ], 
                                        net_cost_estimate = openapi_client.models.money.Money(
                                            currency_code = '', 
                                            nanos = 56, 
                                            units = '', ), 
                                        pre_credit_cost_estimate = , ), 
                                    name = '', 
                                    sku_cost_estimates = [
                                        openapi_client.models.sku_cost_estimate.SkuCostEstimate(
                                            cost_estimate = openapi_client.models.cost_estimate.CostEstimate(), 
                                            sku = '', 
                                            usage_amount = 1.337, 
                                            usage_unit = '', )
                                        ], )
                                ], 
                            segment_start_time = openapi_client.models.estimation_time_point.EstimationTimePoint(
                                estimation_time_frame_offset = '', ), 
                            segment_total_cost_estimate = , 
                            workload_cost_estimates = [
                                openapi_client.models.workload_cost_estimate.WorkloadCostEstimate(
                                    name = '', 
                                    workload_total_cost_estimate = , )
                                ], )
                        ], 
                    skus = [
                        openapi_client.models.sku.Sku(
                            display_name = '', 
                            prices = [
                                openapi_client.models.price.Price(
                                    effective_time = openapi_client.models.estimation_time_point.EstimationTimePoint(
                                        estimation_time_frame_offset = '', ), 
                                    price_type = '', 
                                    rate = openapi_client.models.rate.Rate(
                                        tiers = [
                                            openapi_client.models.rate_tier.RateTier(
                                                price = , 
                                                start_amount = 1.337, )
                                            ], 
                                        unit = '', 
                                        unit_count = 1.337, ), )
                                ], 
                            sku = '', )
                        ], )
            )
        else:
            return EstimateCostScenarioForBillingAccountResponse(
        )
        """

    def testEstimateCostScenarioForBillingAccountResponse(self):
        """Test EstimateCostScenarioForBillingAccountResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

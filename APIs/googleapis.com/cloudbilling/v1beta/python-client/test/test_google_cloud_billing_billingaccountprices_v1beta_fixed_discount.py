# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_billing_billingaccountprices_v1beta_fixed_discount import GoogleCloudBillingBillingaccountpricesV1betaFixedDiscount

class TestGoogleCloudBillingBillingaccountpricesV1betaFixedDiscount(unittest.TestCase):
    """GoogleCloudBillingBillingaccountpricesV1betaFixedDiscount unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudBillingBillingaccountpricesV1betaFixedDiscount:
        """Test GoogleCloudBillingBillingaccountpricesV1betaFixedDiscount
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudBillingBillingaccountpricesV1betaFixedDiscount`
        """
        model = GoogleCloudBillingBillingaccountpricesV1betaFixedDiscount()
        if include_optional:
            return GoogleCloudBillingBillingaccountpricesV1betaFixedDiscount(
                discount_percent = openapi_client.models.decimal.Decimal(
                    value = '', ),
                discount_scope_type = '',
                fix_time = '',
                sku_group = ''
            )
        else:
            return GoogleCloudBillingBillingaccountpricesV1betaFixedDiscount(
        )
        """

    def testGoogleCloudBillingBillingaccountpricesV1betaFixedDiscount(self):
        """Test GoogleCloudBillingBillingaccountpricesV1betaFixedDiscount"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

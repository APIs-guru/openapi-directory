# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.premium_tier_egress_workload import PremiumTierEgressWorkload

class TestPremiumTierEgressWorkload(unittest.TestCase):
    """PremiumTierEgressWorkload unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PremiumTierEgressWorkload:
        """Test PremiumTierEgressWorkload
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PremiumTierEgressWorkload`
        """
        model = PremiumTierEgressWorkload()
        if include_optional:
            return PremiumTierEgressWorkload(
                destination_continent = 'DESTINATION_CONTINENT_UNSPECIFIED',
                egress_rate = openapi_client.models.usage.Usage(
                    usage_rate_timeline = openapi_client.models.usage_rate_timeline.UsageRateTimeline(
                        unit = '', 
                        usage_rate_timeline_entries = [
                            openapi_client.models.usage_rate_timeline_entry.UsageRateTimelineEntry(
                                effective_time = openapi_client.models.estimation_time_point.EstimationTimePoint(
                                    estimation_time_frame_offset = '', ), 
                                usage_rate = 1.337, )
                            ], ), ),
                source_region = ''
            )
        else:
            return PremiumTierEgressWorkload(
        )
        """

    def testPremiumTierEgressWorkload(self):
        """Test PremiumTierEgressWorkload"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

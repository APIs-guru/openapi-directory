# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_billing_billingaccountprices_v1beta_list_billing_account_prices_response import GoogleCloudBillingBillingaccountpricesV1betaListBillingAccountPricesResponse

class TestGoogleCloudBillingBillingaccountpricesV1betaListBillingAccountPricesResponse(unittest.TestCase):
    """GoogleCloudBillingBillingaccountpricesV1betaListBillingAccountPricesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudBillingBillingaccountpricesV1betaListBillingAccountPricesResponse:
        """Test GoogleCloudBillingBillingaccountpricesV1betaListBillingAccountPricesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudBillingBillingaccountpricesV1betaListBillingAccountPricesResponse`
        """
        model = GoogleCloudBillingBillingaccountpricesV1betaListBillingAccountPricesResponse()
        if include_optional:
            return GoogleCloudBillingBillingaccountpricesV1betaListBillingAccountPricesResponse(
                billing_account_prices = [
                    openapi_client.models.google_cloud_billing_billingaccountprices_v1beta_billing_account_price.GoogleCloudBillingBillingaccountpricesV1betaBillingAccountPrice(
                        currency_code = '', 
                        name = '', 
                        price_reason = openapi_client.models.google_cloud_billing_billingaccountprices_v1beta_price_reason.GoogleCloudBillingBillingaccountpricesV1betaPriceReason(
                            default_price = openapi_client.models.google_cloud_billing_billingaccountprices_v1beta_default_price.GoogleCloudBillingBillingaccountpricesV1betaDefaultPrice(), 
                            fixed_discount = openapi_client.models.google_cloud_billing_billingaccountprices_v1beta_fixed_discount.GoogleCloudBillingBillingaccountpricesV1betaFixedDiscount(
                                discount_percent = openapi_client.models.decimal.Decimal(
                                    value = '', ), 
                                discount_scope_type = '', 
                                fix_time = '', 
                                sku_group = '', ), 
                            fixed_price = openapi_client.models.google_cloud_billing_billingaccountprices_v1beta_fixed_price.GoogleCloudBillingBillingaccountpricesV1betaFixedPrice(), 
                            floating_discount = openapi_client.models.google_cloud_billing_billingaccountprices_v1beta_floating_discount.GoogleCloudBillingBillingaccountpricesV1betaFloatingDiscount(
                                discount_scope_type = '', 
                                sku_group = '', ), 
                            list_price_as_ceiling = openapi_client.models.google_cloud_billing_billingaccountprices_v1beta_list_price_as_ceiling.GoogleCloudBillingBillingaccountpricesV1betaListPriceAsCeiling(), 
                            merged_price = openapi_client.models.google_cloud_billing_billingaccountprices_v1beta_merged_price.GoogleCloudBillingBillingaccountpricesV1betaMergedPrice(), 
                            migrated_price = openapi_client.models.google_cloud_billing_billingaccountprices_v1beta_migrated_price.GoogleCloudBillingBillingaccountpricesV1betaMigratedPrice(
                                source_sku = '', ), 
                            type = '', ), 
                        rate = openapi_client.models.google_cloud_billing_billingaccountprices_v1beta_rate.GoogleCloudBillingBillingaccountpricesV1betaRate(
                            aggregation_info = openapi_client.models.google_cloud_billing_billingaccountprices_v1beta_aggregation_info.GoogleCloudBillingBillingaccountpricesV1betaAggregationInfo(
                                interval = 'INTERVAL_UNSPECIFIED', 
                                level = 'LEVEL_UNSPECIFIED', ), 
                            tiers = [
                                openapi_client.models.google_cloud_billing_billingaccountprices_v1beta_rate_tier.GoogleCloudBillingBillingaccountpricesV1betaRateTier(
                                    contract_price = openapi_client.models.money.Money(
                                        currency_code = '', 
                                        nanos = 56, 
                                        units = '', ), 
                                    effective_discount_percent = openapi_client.models.decimal.Decimal(
                                        value = '', ), 
                                    list_price = openapi_client.models.money.Money(
                                        currency_code = '', 
                                        nanos = 56, 
                                        units = '', ), 
                                    start_amount = , )
                                ], 
                            unit_info = openapi_client.models.google_cloud_billing_billingaccountprices_v1beta_unit_info.GoogleCloudBillingBillingaccountpricesV1betaUnitInfo(
                                unit = '', 
                                unit_description = '', 
                                unit_quantity = , ), ), 
                        value_type = '', )
                    ],
                next_page_token = ''
            )
        else:
            return GoogleCloudBillingBillingaccountpricesV1betaListBillingAccountPricesResponse(
        )
        """

    def testGoogleCloudBillingBillingaccountpricesV1betaListBillingAccountPricesResponse(self):
        """Test GoogleCloudBillingBillingaccountpricesV1betaListBillingAccountPricesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.workload import Workload

class TestWorkload(unittest.TestCase):
    """Workload unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Workload:
        """Test Workload
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Workload`
        """
        model = Workload()
        if include_optional:
            return Workload(
                cloud_cdn_egress_workload = openapi_client.models.cloud_cdn_egress_workload.CloudCdnEgressWorkload(
                    cache_egress_destination = 'CACHE_EGRESS_DESTINATION_UNSPECIFIED', 
                    cache_egress_rate = openapi_client.models.usage.Usage(
                        usage_rate_timeline = openapi_client.models.usage_rate_timeline.UsageRateTimeline(
                            unit = '', 
                            usage_rate_timeline_entries = [
                                openapi_client.models.usage_rate_timeline_entry.UsageRateTimelineEntry(
                                    effective_time = openapi_client.models.estimation_time_point.EstimationTimePoint(
                                        estimation_time_frame_offset = '', ), 
                                    usage_rate = 1.337, )
                                ], ), ), ),
                cloud_cdn_workload = openapi_client.models.cloud_cdn_workload.CloudCdnWorkload(
                    cache_fill_origin_service = 'CACHE_FILL_ORIGIN_SERVICE_UNSPECIFIED', 
                    cache_fill_rate = openapi_client.models.usage.Usage(
                        usage_rate_timeline = openapi_client.models.usage_rate_timeline.UsageRateTimeline(
                            unit = '', 
                            usage_rate_timeline_entries = [
                                openapi_client.models.usage_rate_timeline_entry.UsageRateTimelineEntry(
                                    effective_time = openapi_client.models.estimation_time_point.EstimationTimePoint(
                                        estimation_time_frame_offset = '', ), 
                                    usage_rate = 1.337, )
                                ], ), ), 
                    cache_fill_regions = openapi_client.models.cache_fill_regions.CacheFillRegions(
                        destination_region = 'CACHE_FILL_DESTINATION_REGION_UNSPECIFIED', 
                        source_region = 'CACHE_FILL_SOURCE_REGION_UNSPECIFIED', ), 
                    cache_look_up_rate = openapi_client.models.usage.Usage(), ),
                cloud_interconnect_egress_workload = openapi_client.models.cloud_interconnect_egress_workload.CloudInterconnectEgressWorkload(
                    egress_rate = openapi_client.models.usage.Usage(
                        usage_rate_timeline = openapi_client.models.usage_rate_timeline.UsageRateTimeline(
                            unit = '', 
                            usage_rate_timeline_entries = [
                                openapi_client.models.usage_rate_timeline_entry.UsageRateTimelineEntry(
                                    effective_time = openapi_client.models.estimation_time_point.EstimationTimePoint(
                                        estimation_time_frame_offset = '', ), 
                                    usage_rate = 1.337, )
                                ], ), ), 
                    interconnect_connection_location = 'INTERCONNECT_CONNECTION_LOCATION_UNSPECIFIED', ),
                cloud_interconnect_workload = openapi_client.models.cloud_interconnect_workload.CloudInterconnectWorkload(
                    interconnect_attachments = [
                        openapi_client.models.vlan_attachment.VlanAttachment(
                            bandwidth = 'BANDWIDTH_UNSPECIFIED', 
                            vlan_count = openapi_client.models.usage.Usage(
                                usage_rate_timeline = openapi_client.models.usage_rate_timeline.UsageRateTimeline(
                                    unit = '', 
                                    usage_rate_timeline_entries = [
                                        openapi_client.models.usage_rate_timeline_entry.UsageRateTimelineEntry(
                                            effective_time = openapi_client.models.estimation_time_point.EstimationTimePoint(
                                                estimation_time_frame_offset = '', ), 
                                            usage_rate = 1.337, )
                                        ], ), ), )
                        ], 
                    interconnect_type = 'INTERCONNECT_TYPE_UNSPECIFIED', 
                    link_type = 'LINK_TYPE_UNSPECIFIED', 
                    provisioned_link_count = openapi_client.models.usage.Usage(), ),
                cloud_storage_egress_workload = openapi_client.models.cloud_storage_egress_workload.CloudStorageEgressWorkload(
                    destination_continent = 'DESTINATION_CONTINENT_UNSPECIFIED', 
                    egress_rate = openapi_client.models.usage.Usage(
                        usage_rate_timeline = openapi_client.models.usage_rate_timeline.UsageRateTimeline(
                            unit = '', 
                            usage_rate_timeline_entries = [
                                openapi_client.models.usage_rate_timeline_entry.UsageRateTimelineEntry(
                                    effective_time = openapi_client.models.estimation_time_point.EstimationTimePoint(
                                        estimation_time_frame_offset = '', ), 
                                    usage_rate = 1.337, )
                                ], ), ), 
                    source_continent = 'SOURCE_CONTINENT_UNSPECIFIED', ),
                cloud_storage_workload = openapi_client.models.cloud_storage_workload.CloudStorageWorkload(
                    data_retrieval = openapi_client.models.usage.Usage(
                        usage_rate_timeline = openapi_client.models.usage_rate_timeline.UsageRateTimeline(
                            unit = '', 
                            usage_rate_timeline_entries = [
                                openapi_client.models.usage_rate_timeline_entry.UsageRateTimelineEntry(
                                    effective_time = openapi_client.models.estimation_time_point.EstimationTimePoint(
                                        estimation_time_frame_offset = '', ), 
                                    usage_rate = 1.337, )
                                ], ), ), 
                    data_stored = openapi_client.models.usage.Usage(), 
                    dual_region = openapi_client.models.dual_regional.DualRegional(
                        name = '', ), 
                    multi_region = openapi_client.models.multi_regional.MultiRegional(
                        name = '', ), 
                    operation_a = , 
                    operation_b = , 
                    region = openapi_client.models.regional.Regional(
                        name = '', ), 
                    storage_class = '', ),
                compute_vm_workload = openapi_client.models.compute_vm_workload.ComputeVmWorkload(
                    enable_confidential_compute = True, 
                    guest_accelerator = openapi_client.models.guest_accelerator.GuestAccelerator(
                        accelerator_count = '', 
                        accelerator_type = '', ), 
                    instances_running = openapi_client.models.usage.Usage(
                        usage_rate_timeline = openapi_client.models.usage_rate_timeline.UsageRateTimeline(
                            unit = '', 
                            usage_rate_timeline_entries = [
                                openapi_client.models.usage_rate_timeline_entry.UsageRateTimelineEntry(
                                    effective_time = openapi_client.models.estimation_time_point.EstimationTimePoint(
                                        estimation_time_frame_offset = '', ), 
                                    usage_rate = 1.337, )
                                ], ), ), 
                    licenses = [
                        ''
                        ], 
                    machine_type = openapi_client.models.machine_type.MachineType(
                        custom_machine_type = openapi_client.models.custom_machine_type.CustomMachineType(
                            machine_series = '', 
                            memory_size_gb = 1.337, 
                            virtual_cpu_count = '', ), 
                        predefined_machine_type = openapi_client.models.predefined_machine_type.PredefinedMachineType(), ), 
                    persistent_disks = [
                        openapi_client.models.persistent_disk.PersistentDisk(
                            disk_size = openapi_client.models.usage.Usage(), 
                            disk_type = '', 
                            provisioned_iops = , 
                            scope = 'SCOPE_UNSPECIFIED', )
                        ], 
                    preemptible = True, 
                    region = '', ),
                name = '',
                premium_tier_egress_workload = openapi_client.models.premium_tier_egress_workload.PremiumTierEgressWorkload(
                    destination_continent = 'DESTINATION_CONTINENT_UNSPECIFIED', 
                    egress_rate = openapi_client.models.usage.Usage(
                        usage_rate_timeline = openapi_client.models.usage_rate_timeline.UsageRateTimeline(
                            unit = '', 
                            usage_rate_timeline_entries = [
                                openapi_client.models.usage_rate_timeline_entry.UsageRateTimelineEntry(
                                    effective_time = openapi_client.models.estimation_time_point.EstimationTimePoint(
                                        estimation_time_frame_offset = '', ), 
                                    usage_rate = 1.337, )
                                ], ), ), 
                    source_region = '', ),
                standard_tier_egress_workload = openapi_client.models.standard_tier_egress_workload.StandardTierEgressWorkload(
                    egress_rate = openapi_client.models.usage.Usage(
                        usage_rate_timeline = openapi_client.models.usage_rate_timeline.UsageRateTimeline(
                            unit = '', 
                            usage_rate_timeline_entries = [
                                openapi_client.models.usage_rate_timeline_entry.UsageRateTimelineEntry(
                                    effective_time = openapi_client.models.estimation_time_point.EstimationTimePoint(
                                        estimation_time_frame_offset = '', ), 
                                    usage_rate = 1.337, )
                                ], ), ), 
                    source_region = '', ),
                vm_to_vm_egress_workload = openapi_client.models.vm_to_vm_egress_workload.VmToVmEgressWorkload(
                    inter_region_egress = openapi_client.models.inter_region_egress.InterRegionEgress(
                        destination_region = '', 
                        egress_rate = openapi_client.models.usage.Usage(
                            usage_rate_timeline = openapi_client.models.usage_rate_timeline.UsageRateTimeline(
                                unit = '', 
                                usage_rate_timeline_entries = [
                                    openapi_client.models.usage_rate_timeline_entry.UsageRateTimelineEntry(
                                        effective_time = openapi_client.models.estimation_time_point.EstimationTimePoint(
                                            estimation_time_frame_offset = '', ), 
                                        usage_rate = 1.337, )
                                    ], ), ), 
                        source_region = '', ), 
                    intra_region_egress = openapi_client.models.intra_region_egress.IntraRegionEgress(), )
            )
        else:
            return Workload(
        )
        """

    def testWorkload(self):
        """Test Workload"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.estimate_cost_scenario_for_billing_account_request import EstimateCostScenarioForBillingAccountRequest

class TestEstimateCostScenarioForBillingAccountRequest(unittest.TestCase):
    """EstimateCostScenarioForBillingAccountRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EstimateCostScenarioForBillingAccountRequest:
        """Test EstimateCostScenarioForBillingAccountRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EstimateCostScenarioForBillingAccountRequest`
        """
        model = EstimateCostScenarioForBillingAccountRequest()
        if include_optional:
            return EstimateCostScenarioForBillingAccountRequest(
                cost_scenario = openapi_client.models.cost_scenario.CostScenario(
                    commitments = [
                        openapi_client.models.commitment.Commitment(
                            name = '', 
                            vm_resource_based_cud = openapi_client.models.vm_resource_based_cud.VmResourceBasedCud(
                                guest_accelerator = openapi_client.models.guest_accelerator.GuestAccelerator(
                                    accelerator_count = '', 
                                    accelerator_type = '', ), 
                                machine_series = '', 
                                memory_size_gb = 1.337, 
                                plan = 'COMMITMENT_PLAN_UNSPECIFIED', 
                                region = '', 
                                virtual_cpu_count = '', ), )
                        ], 
                    scenario_config = openapi_client.models.scenario_config.ScenarioConfig(
                        estimate_duration = '', ), 
                    workloads = [
                        openapi_client.models.workload.Workload(
                            cloud_cdn_egress_workload = openapi_client.models.cloud_cdn_egress_workload.CloudCdnEgressWorkload(
                                cache_egress_destination = 'CACHE_EGRESS_DESTINATION_UNSPECIFIED', 
                                cache_egress_rate = openapi_client.models.usage.Usage(
                                    usage_rate_timeline = openapi_client.models.usage_rate_timeline.UsageRateTimeline(
                                        unit = '', 
                                        usage_rate_timeline_entries = [
                                            openapi_client.models.usage_rate_timeline_entry.UsageRateTimelineEntry(
                                                effective_time = openapi_client.models.estimation_time_point.EstimationTimePoint(
                                                    estimation_time_frame_offset = '', ), 
                                                usage_rate = 1.337, )
                                            ], ), ), ), 
                            cloud_cdn_workload = openapi_client.models.cloud_cdn_workload.CloudCdnWorkload(
                                cache_fill_origin_service = 'CACHE_FILL_ORIGIN_SERVICE_UNSPECIFIED', 
                                cache_fill_rate = openapi_client.models.usage.Usage(), 
                                cache_fill_regions = openapi_client.models.cache_fill_regions.CacheFillRegions(
                                    destination_region = 'CACHE_FILL_DESTINATION_REGION_UNSPECIFIED', 
                                    source_region = 'CACHE_FILL_SOURCE_REGION_UNSPECIFIED', ), 
                                cache_look_up_rate = , ), 
                            cloud_interconnect_egress_workload = openapi_client.models.cloud_interconnect_egress_workload.CloudInterconnectEgressWorkload(
                                egress_rate = , 
                                interconnect_connection_location = 'INTERCONNECT_CONNECTION_LOCATION_UNSPECIFIED', ), 
                            cloud_interconnect_workload = openapi_client.models.cloud_interconnect_workload.CloudInterconnectWorkload(
                                interconnect_attachments = [
                                    openapi_client.models.vlan_attachment.VlanAttachment(
                                        bandwidth = 'BANDWIDTH_UNSPECIFIED', 
                                        vlan_count = , )
                                    ], 
                                interconnect_type = 'INTERCONNECT_TYPE_UNSPECIFIED', 
                                link_type = 'LINK_TYPE_UNSPECIFIED', 
                                provisioned_link_count = , ), 
                            cloud_storage_egress_workload = openapi_client.models.cloud_storage_egress_workload.CloudStorageEgressWorkload(
                                destination_continent = 'DESTINATION_CONTINENT_UNSPECIFIED', 
                                source_continent = 'SOURCE_CONTINENT_UNSPECIFIED', ), 
                            cloud_storage_workload = openapi_client.models.cloud_storage_workload.CloudStorageWorkload(
                                data_retrieval = , 
                                data_stored = , 
                                dual_region = openapi_client.models.dual_regional.DualRegional(
                                    name = '', ), 
                                multi_region = openapi_client.models.multi_regional.MultiRegional(
                                    name = '', ), 
                                operation_a = , 
                                operation_b = , 
                                region = openapi_client.models.regional.Regional(
                                    name = '', ), 
                                storage_class = '', ), 
                            compute_vm_workload = openapi_client.models.compute_vm_workload.ComputeVmWorkload(
                                enable_confidential_compute = True, 
                                instances_running = , 
                                licenses = [
                                    ''
                                    ], 
                                machine_type = openapi_client.models.machine_type.MachineType(
                                    custom_machine_type = openapi_client.models.custom_machine_type.CustomMachineType(
                                        machine_series = '', 
                                        memory_size_gb = 1.337, 
                                        virtual_cpu_count = '', ), 
                                    predefined_machine_type = openapi_client.models.predefined_machine_type.PredefinedMachineType(), ), 
                                persistent_disks = [
                                    openapi_client.models.persistent_disk.PersistentDisk(
                                        disk_size = , 
                                        disk_type = '', 
                                        provisioned_iops = , 
                                        scope = 'SCOPE_UNSPECIFIED', )
                                    ], 
                                preemptible = True, ), 
                            name = '', 
                            premium_tier_egress_workload = openapi_client.models.premium_tier_egress_workload.PremiumTierEgressWorkload(
                                destination_continent = 'DESTINATION_CONTINENT_UNSPECIFIED', 
                                source_region = '', ), 
                            standard_tier_egress_workload = openapi_client.models.standard_tier_egress_workload.StandardTierEgressWorkload(
                                source_region = '', ), 
                            vm_to_vm_egress_workload = openapi_client.models.vm_to_vm_egress_workload.VmToVmEgressWorkload(
                                inter_region_egress = openapi_client.models.inter_region_egress.InterRegionEgress(
                                    destination_region = '', 
                                    source_region = '', ), 
                                intra_region_egress = openapi_client.models.intra_region_egress.IntraRegionEgress(), ), )
                        ], )
            )
        else:
            return EstimateCostScenarioForBillingAccountRequest(
        )
        """

    def testEstimateCostScenarioForBillingAccountRequest(self):
        """Test EstimateCostScenarioForBillingAccountRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

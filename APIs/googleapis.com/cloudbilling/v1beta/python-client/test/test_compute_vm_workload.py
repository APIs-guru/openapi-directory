# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.compute_vm_workload import ComputeVmWorkload

class TestComputeVmWorkload(unittest.TestCase):
    """ComputeVmWorkload unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ComputeVmWorkload:
        """Test ComputeVmWorkload
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ComputeVmWorkload`
        """
        model = ComputeVmWorkload()
        if include_optional:
            return ComputeVmWorkload(
                enable_confidential_compute = True,
                guest_accelerator = openapi_client.models.guest_accelerator.GuestAccelerator(
                    accelerator_count = '', 
                    accelerator_type = '', ),
                instances_running = openapi_client.models.usage.Usage(
                    usage_rate_timeline = openapi_client.models.usage_rate_timeline.UsageRateTimeline(
                        unit = '', 
                        usage_rate_timeline_entries = [
                            openapi_client.models.usage_rate_timeline_entry.UsageRateTimelineEntry(
                                effective_time = openapi_client.models.estimation_time_point.EstimationTimePoint(
                                    estimation_time_frame_offset = '', ), 
                                usage_rate = 1.337, )
                            ], ), ),
                licenses = [
                    ''
                    ],
                machine_type = openapi_client.models.machine_type.MachineType(
                    custom_machine_type = openapi_client.models.custom_machine_type.CustomMachineType(
                        machine_series = '', 
                        memory_size_gb = 1.337, 
                        virtual_cpu_count = '', ), 
                    predefined_machine_type = openapi_client.models.predefined_machine_type.PredefinedMachineType(
                        machine_type = '', ), ),
                persistent_disks = [
                    openapi_client.models.persistent_disk.PersistentDisk(
                        disk_size = openapi_client.models.usage.Usage(
                            usage_rate_timeline = openapi_client.models.usage_rate_timeline.UsageRateTimeline(
                                unit = '', 
                                usage_rate_timeline_entries = [
                                    openapi_client.models.usage_rate_timeline_entry.UsageRateTimelineEntry(
                                        effective_time = openapi_client.models.estimation_time_point.EstimationTimePoint(
                                            estimation_time_frame_offset = '', ), 
                                        usage_rate = 1.337, )
                                    ], ), ), 
                        disk_type = '', 
                        provisioned_iops = openapi_client.models.usage.Usage(), 
                        scope = 'SCOPE_UNSPECIFIED', )
                    ],
                preemptible = True,
                region = ''
            )
        else:
            return ComputeVmWorkload(
        )
        """

    def testComputeVmWorkload(self):
        """Test ComputeVmWorkload"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.cost_estimate import CostEstimate
from typing import Optional, Set
from typing_extensions import Self

class SkuCostEstimate(BaseModel):
    """
    Estimated cost for usage on a SKU.
    """ # noqa: E501
    cost_estimate: Optional[CostEstimate] = Field(default=None, alias="costEstimate")
    sku: Optional[StrictStr] = Field(default=None, description="The resource name for the SKU. Example: \"services/DA34-426B-A397/skus/AA95-CD31-42FE\" More information about the SKU can be found in the `skus` field of the `CostEstimationResult`.")
    usage_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of usage on this SKU.", alias="usageAmount")
    usage_unit: Optional[StrictStr] = Field(default=None, description="The unit for the usage on this SKU.", alias="usageUnit")
    __properties: ClassVar[List[str]] = ["costEstimate", "sku", "usageAmount", "usageUnit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SkuCostEstimate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cost_estimate
        if self.cost_estimate:
            _dict['costEstimate'] = self.cost_estimate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SkuCostEstimate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "costEstimate": CostEstimate.from_dict(obj["costEstimate"]) if obj.get("costEstimate") is not None else None,
            "sku": obj.get("sku"),
            "usageAmount": obj.get("usageAmount"),
            "usageUnit": obj.get("usageUnit")
        })
        return _obj



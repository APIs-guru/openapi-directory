# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.commitment import Commitment
from openapi_client.models.scenario_config import ScenarioConfig
from openapi_client.models.workload import Workload
from typing import Optional, Set
from typing_extensions import Self

class CostScenario(BaseModel):
    """
    Encapsulates all the information needed to perform a cost estimate. It includes a specification of the Google Cloud usage whose costs are estimated, and configuration options.
    """ # noqa: E501
    commitments: Optional[List[Commitment]] = Field(default=None, description="New commitments to estimate the costs for. The cost of the commitments will be included in the estimate result and discounts the commitment entitles will be included in the workload cost estimates. A maximum of 100 workloads can be provided.")
    scenario_config: Optional[ScenarioConfig] = Field(default=None, alias="scenarioConfig")
    workloads: Optional[List[Workload]] = Field(default=None, description="The Google Cloud usage whose costs are estimated. A maximum of 100 workloads can be provided.")
    __properties: ClassVar[List[str]] = ["commitments", "scenarioConfig", "workloads"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CostScenario from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in commitments (list)
        _items = []
        if self.commitments:
            for _item_commitments in self.commitments:
                if _item_commitments:
                    _items.append(_item_commitments.to_dict())
            _dict['commitments'] = _items
        # override the default output from pydantic by calling `to_dict()` of scenario_config
        if self.scenario_config:
            _dict['scenarioConfig'] = self.scenario_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in workloads (list)
        _items = []
        if self.workloads:
            for _item_workloads in self.workloads:
                if _item_workloads:
                    _items.append(_item_workloads.to_dict())
            _dict['workloads'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CostScenario from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commitments": [Commitment.from_dict(_item) for _item in obj["commitments"]] if obj.get("commitments") is not None else None,
            "scenarioConfig": ScenarioConfig.from_dict(obj["scenarioConfig"]) if obj.get("scenarioConfig") is not None else None,
            "workloads": [Workload.from_dict(_item) for _item in obj["workloads"]] if obj.get("workloads") is not None else None
        })
        return _obj



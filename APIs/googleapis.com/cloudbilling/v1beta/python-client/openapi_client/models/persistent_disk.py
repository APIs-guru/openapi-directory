# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.usage import Usage
from typing import Optional, Set
from typing_extensions import Self

class PersistentDisk(BaseModel):
    """
    Specification of a persistent disk attached to a VM.
    """ # noqa: E501
    disk_size: Optional[Usage] = Field(default=None, alias="diskSize")
    disk_type: Optional[StrictStr] = Field(default=None, description="The [disk type](https://cloud.google.com/compute/docs/disks#disk-types). For example: \"pd-standard\".", alias="diskType")
    provisioned_iops: Optional[Usage] = Field(default=None, alias="provisionedIops")
    scope: Optional[StrictStr] = Field(default=None, description="The geographic scope of the disk. Defaults to `SCOPE_ZONAL` if not specified.")
    __properties: ClassVar[List[str]] = ["diskSize", "diskType", "provisionedIops", "scope"]

    @field_validator('scope')
    def scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SCOPE_UNSPECIFIED', 'SCOPE_ZONAL', 'SCOPE_REGIONAL']):
            raise ValueError("must be one of enum values ('SCOPE_UNSPECIFIED', 'SCOPE_ZONAL', 'SCOPE_REGIONAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersistentDisk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of disk_size
        if self.disk_size:
            _dict['diskSize'] = self.disk_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provisioned_iops
        if self.provisioned_iops:
            _dict['provisionedIops'] = self.provisioned_iops.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersistentDisk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "diskSize": Usage.from_dict(obj["diskSize"]) if obj.get("diskSize") is not None else None,
            "diskType": obj.get("diskType"),
            "provisionedIops": Usage.from_dict(obj["provisionedIops"]) if obj.get("provisionedIops") is not None else None,
            "scope": obj.get("scope")
        })
        return _obj



# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cache_fill_regions import CacheFillRegions
from openapi_client.models.usage import Usage
from typing import Optional, Set
from typing_extensions import Self

class CloudCdnWorkload(BaseModel):
    """
    Specifies usage for Cloud CDN resources.
    """ # noqa: E501
    cache_fill_origin_service: Optional[StrictStr] = Field(default=None, description="The source service for the cache fill.", alias="cacheFillOriginService")
    cache_fill_rate: Optional[Usage] = Field(default=None, alias="cacheFillRate")
    cache_fill_regions: Optional[CacheFillRegions] = Field(default=None, alias="cacheFillRegions")
    cache_look_up_rate: Optional[Usage] = Field(default=None, alias="cacheLookUpRate")
    __properties: ClassVar[List[str]] = ["cacheFillOriginService", "cacheFillRate", "cacheFillRegions", "cacheLookUpRate"]

    @field_validator('cache_fill_origin_service')
    def cache_fill_origin_service_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CACHE_FILL_ORIGIN_SERVICE_UNSPECIFIED', 'CACHE_FILL_ORIGIN_SERVICE_GOOGLE_CLOUD_STORAGE_BUCKET', 'CACHE_FILL_ORIGIN_SERVICE_BACKEND_SERVICE']):
            raise ValueError("must be one of enum values ('CACHE_FILL_ORIGIN_SERVICE_UNSPECIFIED', 'CACHE_FILL_ORIGIN_SERVICE_GOOGLE_CLOUD_STORAGE_BUCKET', 'CACHE_FILL_ORIGIN_SERVICE_BACKEND_SERVICE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudCdnWorkload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cache_fill_rate
        if self.cache_fill_rate:
            _dict['cacheFillRate'] = self.cache_fill_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cache_fill_regions
        if self.cache_fill_regions:
            _dict['cacheFillRegions'] = self.cache_fill_regions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cache_look_up_rate
        if self.cache_look_up_rate:
            _dict['cacheLookUpRate'] = self.cache_look_up_rate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudCdnWorkload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cacheFillOriginService": obj.get("cacheFillOriginService"),
            "cacheFillRate": Usage.from_dict(obj["cacheFillRate"]) if obj.get("cacheFillRate") is not None else None,
            "cacheFillRegions": CacheFillRegions.from_dict(obj["cacheFillRegions"]) if obj.get("cacheFillRegions") is not None else None,
            "cacheLookUpRate": Usage.from_dict(obj["cacheLookUpRate"]) if obj.get("cacheLookUpRate") is not None else None
        })
        return _obj



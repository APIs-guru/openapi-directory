# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.usage import Usage
from typing import Optional, Set
from typing_extensions import Self

class CloudStorageEgressWorkload(BaseModel):
    """
    Specification of a network type. Network data transfer within Google Cloud applies when you move or copy data from one Cloud Storage bucket to another or when another Google Cloud service accesses data in your Cloud Storage bucket.This includes the network data transfer within Google Cloud and the general network usage.
    """ # noqa: E501
    destination_continent: Optional[StrictStr] = Field(default=None, description="Where the data is sent to.", alias="destinationContinent")
    egress_rate: Optional[Usage] = Field(default=None, alias="egressRate")
    source_continent: Optional[StrictStr] = Field(default=None, description="Where the data comes from.", alias="sourceContinent")
    __properties: ClassVar[List[str]] = ["destinationContinent", "egressRate", "sourceContinent"]

    @field_validator('destination_continent')
    def destination_continent_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DESTINATION_CONTINENT_UNSPECIFIED', 'DESTINATION_CONTINENT_ASIA_PACIFIC', 'DESTINATION_CONTINENT_AUTRALIA', 'DESTINATION_CONTINENT_EUROPE', 'DESTINATION_CONTINENT_NORTH_AMERICA', 'DESTINATION_CONTINENT_SOUTH_AMERICA']):
            raise ValueError("must be one of enum values ('DESTINATION_CONTINENT_UNSPECIFIED', 'DESTINATION_CONTINENT_ASIA_PACIFIC', 'DESTINATION_CONTINENT_AUTRALIA', 'DESTINATION_CONTINENT_EUROPE', 'DESTINATION_CONTINENT_NORTH_AMERICA', 'DESTINATION_CONTINENT_SOUTH_AMERICA')")
        return value

    @field_validator('source_continent')
    def source_continent_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SOURCE_CONTINENT_UNSPECIFIED', 'SOURCE_CONTINENT_ASIA_PACIFIC', 'SOURCE_CONTINENT_AUSTRALIA', 'SOURCE_CONTINENT_EUROPE', 'SOURCE_CONTINENT_NORTH_AMERICA', 'SOURCE_CONTINENT_SOUTH_AMERICA']):
            raise ValueError("must be one of enum values ('SOURCE_CONTINENT_UNSPECIFIED', 'SOURCE_CONTINENT_ASIA_PACIFIC', 'SOURCE_CONTINENT_AUSTRALIA', 'SOURCE_CONTINENT_EUROPE', 'SOURCE_CONTINENT_NORTH_AMERICA', 'SOURCE_CONTINENT_SOUTH_AMERICA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudStorageEgressWorkload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of egress_rate
        if self.egress_rate:
            _dict['egressRate'] = self.egress_rate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudStorageEgressWorkload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destinationContinent": obj.get("destinationContinent"),
            "egressRate": Usage.from_dict(obj["egressRate"]) if obj.get("egressRate") is not None else None,
            "sourceContinent": obj.get("sourceContinent")
        })
        return _obj



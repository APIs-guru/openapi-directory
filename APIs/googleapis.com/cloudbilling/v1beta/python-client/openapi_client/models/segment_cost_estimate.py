# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.commitment_cost_estimate import CommitmentCostEstimate
from openapi_client.models.cost_estimate import CostEstimate
from openapi_client.models.estimation_time_point import EstimationTimePoint
from openapi_client.models.workload_cost_estimate import WorkloadCostEstimate
from typing import Optional, Set
from typing_extensions import Self

class SegmentCostEstimate(BaseModel):
    """
    Workload cost estimates for a single time segment.
    """ # noqa: E501
    commitment_cost_estimates: Optional[List[CommitmentCostEstimate]] = Field(default=None, description="Estimated costs for each commitment.", alias="commitmentCostEstimates")
    segment_start_time: Optional[EstimationTimePoint] = Field(default=None, alias="segmentStartTime")
    segment_total_cost_estimate: Optional[CostEstimate] = Field(default=None, alias="segmentTotalCostEstimate")
    workload_cost_estimates: Optional[List[WorkloadCostEstimate]] = Field(default=None, description="Estimated costs for each workload.", alias="workloadCostEstimates")
    __properties: ClassVar[List[str]] = ["commitmentCostEstimates", "segmentStartTime", "segmentTotalCostEstimate", "workloadCostEstimates"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SegmentCostEstimate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in commitment_cost_estimates (list)
        _items = []
        if self.commitment_cost_estimates:
            for _item_commitment_cost_estimates in self.commitment_cost_estimates:
                if _item_commitment_cost_estimates:
                    _items.append(_item_commitment_cost_estimates.to_dict())
            _dict['commitmentCostEstimates'] = _items
        # override the default output from pydantic by calling `to_dict()` of segment_start_time
        if self.segment_start_time:
            _dict['segmentStartTime'] = self.segment_start_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of segment_total_cost_estimate
        if self.segment_total_cost_estimate:
            _dict['segmentTotalCostEstimate'] = self.segment_total_cost_estimate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in workload_cost_estimates (list)
        _items = []
        if self.workload_cost_estimates:
            for _item_workload_cost_estimates in self.workload_cost_estimates:
                if _item_workload_cost_estimates:
                    _items.append(_item_workload_cost_estimates.to_dict())
            _dict['workloadCostEstimates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SegmentCostEstimate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commitmentCostEstimates": [CommitmentCostEstimate.from_dict(_item) for _item in obj["commitmentCostEstimates"]] if obj.get("commitmentCostEstimates") is not None else None,
            "segmentStartTime": EstimationTimePoint.from_dict(obj["segmentStartTime"]) if obj.get("segmentStartTime") is not None else None,
            "segmentTotalCostEstimate": CostEstimate.from_dict(obj["segmentTotalCostEstimate"]) if obj.get("segmentTotalCostEstimate") is not None else None,
            "workloadCostEstimates": [WorkloadCostEstimate.from_dict(_item) for _item in obj["workloadCostEstimates"]] if obj.get("workloadCostEstimates") is not None else None
        })
        return _obj



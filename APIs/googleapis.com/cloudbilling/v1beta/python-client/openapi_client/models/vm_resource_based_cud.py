# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.guest_accelerator import GuestAccelerator
from typing import Optional, Set
from typing_extensions import Self

class VmResourceBasedCud(BaseModel):
    """
    Specifies a resource-based committed use discount (CUD).
    """ # noqa: E501
    guest_accelerator: Optional[GuestAccelerator] = Field(default=None, alias="guestAccelerator")
    machine_series: Optional[StrictStr] = Field(default=None, description="The machine series for CUD. For example: \"n1\" for general purpose N1 machine type commitments. \"n2\" for general purpose N2 machine type commitments. \"e2\" for general purpose E2 machine type commitments. \"n2d\" for general purpose N2D machine type commitments. \"t2d\" for general purpose T2D machine type commitments. \"c2\"/\"c2d\" for compute-optimized commitments. \"m1\"/\"m2\" for the memory-optimized commitments. \"a2' for the accelerator-optimized commitments.", alias="machineSeries")
    memory_size_gb: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Memory size of the VM in GB (2^30 bytes). Must be an increment of 0.25 (256 MB).", alias="memorySizeGb")
    plan: Optional[StrictStr] = Field(default=None, description="Commitment usage plan.")
    region: Optional[StrictStr] = Field(default=None, description="The region where the VM runs. For example: \"us-central1\"")
    virtual_cpu_count: Optional[StrictStr] = Field(default=None, description="The number of vCPUs. The number of vCPUs must be an integer of 0 or more and can be even or odd.", alias="virtualCpuCount")
    __properties: ClassVar[List[str]] = ["guestAccelerator", "machineSeries", "memorySizeGb", "plan", "region", "virtualCpuCount"]

    @field_validator('plan')
    def plan_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMMITMENT_PLAN_UNSPECIFIED', 'TWELVE_MONTH', 'THIRTY_SIX_MONTH']):
            raise ValueError("must be one of enum values ('COMMITMENT_PLAN_UNSPECIFIED', 'TWELVE_MONTH', 'THIRTY_SIX_MONTH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VmResourceBasedCud from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of guest_accelerator
        if self.guest_accelerator:
            _dict['guestAccelerator'] = self.guest_accelerator.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VmResourceBasedCud from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "guestAccelerator": GuestAccelerator.from_dict(obj["guestAccelerator"]) if obj.get("guestAccelerator") is not None else None,
            "machineSeries": obj.get("machineSeries"),
            "memorySizeGb": obj.get("memorySizeGb"),
            "plan": obj.get("plan"),
            "region": obj.get("region"),
            "virtualCpuCount": obj.get("virtualCpuCount")
        })
        return _obj



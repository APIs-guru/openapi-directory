# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_billing_prices_v1beta_aggregation_info import GoogleCloudBillingPricesV1betaAggregationInfo
from openapi_client.models.google_cloud_billing_prices_v1beta_rate_tier import GoogleCloudBillingPricesV1betaRateTier
from openapi_client.models.google_cloud_billing_prices_v1beta_unit_info import GoogleCloudBillingPricesV1betaUnitInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudBillingPricesV1betaRate(BaseModel):
    """
    Encapsulates a `Rate` price. SKUs with `Rate` price are offered by pricing tiers. The price have 1 or more rate pricing tiers.
    """ # noqa: E501
    aggregation_info: Optional[GoogleCloudBillingPricesV1betaAggregationInfo] = Field(default=None, alias="aggregationInfo")
    tiers: Optional[List[GoogleCloudBillingPricesV1betaRateTier]] = Field(default=None, description="All tiers associated with the `Rate` price.")
    unit_info: Optional[GoogleCloudBillingPricesV1betaUnitInfo] = Field(default=None, alias="unitInfo")
    __properties: ClassVar[List[str]] = ["aggregationInfo", "tiers", "unitInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudBillingPricesV1betaRate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aggregation_info
        if self.aggregation_info:
            _dict['aggregationInfo'] = self.aggregation_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tiers (list)
        _items = []
        if self.tiers:
            for _item_tiers in self.tiers:
                if _item_tiers:
                    _items.append(_item_tiers.to_dict())
            _dict['tiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of unit_info
        if self.unit_info:
            _dict['unitInfo'] = self.unit_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudBillingPricesV1betaRate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregationInfo": GoogleCloudBillingPricesV1betaAggregationInfo.from_dict(obj["aggregationInfo"]) if obj.get("aggregationInfo") is not None else None,
            "tiers": [GoogleCloudBillingPricesV1betaRateTier.from_dict(_item) for _item in obj["tiers"]] if obj.get("tiers") is not None else None,
            "unitInfo": GoogleCloudBillingPricesV1betaUnitInfo.from_dict(obj["unitInfo"]) if obj.get("unitInfo") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.guest_accelerator import GuestAccelerator
from openapi_client.models.machine_type import MachineType
from openapi_client.models.persistent_disk import PersistentDisk
from openapi_client.models.usage import Usage
from typing import Optional, Set
from typing_extensions import Self

class ComputeVmWorkload(BaseModel):
    """
    Specificies usage of a set of identical compute VM instances.
    """ # noqa: E501
    enable_confidential_compute: Optional[StrictBool] = Field(default=None, description="Defines whether each instance has confidential compute enabled.", alias="enableConfidentialCompute")
    guest_accelerator: Optional[GuestAccelerator] = Field(default=None, alias="guestAccelerator")
    instances_running: Optional[Usage] = Field(default=None, alias="instancesRunning")
    licenses: Optional[List[StrictStr]] = Field(default=None, description="Premium image licenses used by each instance.")
    machine_type: Optional[MachineType] = Field(default=None, alias="machineType")
    persistent_disks: Optional[List[PersistentDisk]] = Field(default=None, description="Persistent disks attached to each instance. Must include a boot disk.", alias="persistentDisks")
    preemptible: Optional[StrictBool] = Field(default=None, description="Defines whether each instance is preemptible.")
    region: Optional[StrictStr] = Field(default=None, description="The [region](https://cloud.google.com/compute/docs/regions-zones) where the VMs run. For example: \"us-central1\".")
    __properties: ClassVar[List[str]] = ["enableConfidentialCompute", "guestAccelerator", "instancesRunning", "licenses", "machineType", "persistentDisks", "preemptible", "region"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComputeVmWorkload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of guest_accelerator
        if self.guest_accelerator:
            _dict['guestAccelerator'] = self.guest_accelerator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of instances_running
        if self.instances_running:
            _dict['instancesRunning'] = self.instances_running.to_dict()
        # override the default output from pydantic by calling `to_dict()` of machine_type
        if self.machine_type:
            _dict['machineType'] = self.machine_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in persistent_disks (list)
        _items = []
        if self.persistent_disks:
            for _item_persistent_disks in self.persistent_disks:
                if _item_persistent_disks:
                    _items.append(_item_persistent_disks.to_dict())
            _dict['persistentDisks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComputeVmWorkload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enableConfidentialCompute": obj.get("enableConfidentialCompute"),
            "guestAccelerator": GuestAccelerator.from_dict(obj["guestAccelerator"]) if obj.get("guestAccelerator") is not None else None,
            "instancesRunning": Usage.from_dict(obj["instancesRunning"]) if obj.get("instancesRunning") is not None else None,
            "licenses": obj.get("licenses"),
            "machineType": MachineType.from_dict(obj["machineType"]) if obj.get("machineType") is not None else None,
            "persistentDisks": [PersistentDisk.from_dict(_item) for _item in obj["persistentDisks"]] if obj.get("persistentDisks") is not None else None,
            "preemptible": obj.get("preemptible"),
            "region": obj.get("region")
        })
        return _obj



# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_billing_billingaccountprices_v1beta_fixed_discount import GoogleCloudBillingBillingaccountpricesV1betaFixedDiscount
from openapi_client.models.google_cloud_billing_billingaccountprices_v1beta_floating_discount import GoogleCloudBillingBillingaccountpricesV1betaFloatingDiscount
from openapi_client.models.google_cloud_billing_billingaccountprices_v1beta_migrated_price import GoogleCloudBillingBillingaccountpricesV1betaMigratedPrice
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudBillingBillingaccountpricesV1betaPriceReason(BaseModel):
    """
    Encapsulates a price reason which contains background information about the origin of the price.
    """ # noqa: E501
    default_price: Optional[Dict[str, Any]] = Field(default=None, description="Encapsulates a default price which is the current list price.", alias="defaultPrice")
    fixed_discount: Optional[GoogleCloudBillingBillingaccountpricesV1betaFixedDiscount] = Field(default=None, alias="fixedDiscount")
    fixed_price: Optional[Dict[str, Any]] = Field(default=None, description="Encapsulates a set fixed price applicable during the terms of a contract agreement.", alias="fixedPrice")
    floating_discount: Optional[GoogleCloudBillingBillingaccountpricesV1betaFloatingDiscount] = Field(default=None, alias="floatingDiscount")
    list_price_as_ceiling: Optional[Dict[str, Any]] = Field(default=None, description="Encapsulates a contract feature that the list price (DefaultPrice) will be used for the price if the current list price drops lower than the custom fixed price. Available to new contracts after March 21, 2022. Applies to all fixed price SKUs in the contract, including FixedPrice, FixedDiscount, MigratedPrice, and MergedPrice.", alias="listPriceAsCeiling")
    merged_price: Optional[Dict[str, Any]] = Field(default=None, description="Encapsulates a price after merging from multiple sources. With merged tiers, each individual tier can be from a different source with different discount types.", alias="mergedPrice")
    migrated_price: Optional[GoogleCloudBillingBillingaccountpricesV1betaMigratedPrice] = Field(default=None, alias="migratedPrice")
    type: Optional[StrictStr] = Field(default=None, description="Type of the price reason. It can have values such as 'unspecified', 'default-price', 'fixed-price', 'fixed-discount', 'floating-discount', 'migrated-price', 'merged-price', 'list-price-as-ceiling'.")
    __properties: ClassVar[List[str]] = ["defaultPrice", "fixedDiscount", "fixedPrice", "floatingDiscount", "listPriceAsCeiling", "mergedPrice", "migratedPrice", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudBillingBillingaccountpricesV1betaPriceReason from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fixed_discount
        if self.fixed_discount:
            _dict['fixedDiscount'] = self.fixed_discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of floating_discount
        if self.floating_discount:
            _dict['floatingDiscount'] = self.floating_discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of migrated_price
        if self.migrated_price:
            _dict['migratedPrice'] = self.migrated_price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudBillingBillingaccountpricesV1betaPriceReason from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultPrice": obj.get("defaultPrice"),
            "fixedDiscount": GoogleCloudBillingBillingaccountpricesV1betaFixedDiscount.from_dict(obj["fixedDiscount"]) if obj.get("fixedDiscount") is not None else None,
            "fixedPrice": obj.get("fixedPrice"),
            "floatingDiscount": GoogleCloudBillingBillingaccountpricesV1betaFloatingDiscount.from_dict(obj["floatingDiscount"]) if obj.get("floatingDiscount") is not None else None,
            "listPriceAsCeiling": obj.get("listPriceAsCeiling"),
            "mergedPrice": obj.get("mergedPrice"),
            "migratedPrice": GoogleCloudBillingBillingaccountpricesV1betaMigratedPrice.from_dict(obj["migratedPrice"]) if obj.get("migratedPrice") is not None else None,
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Cloud Billing API

    Allows developers to manage billing for their Google Cloud Platform projects programmatically.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dual_regional import DualRegional
from openapi_client.models.multi_regional import MultiRegional
from openapi_client.models.regional import Regional
from openapi_client.models.usage import Usage
from typing import Optional, Set
from typing_extensions import Self

class CloudStorageWorkload(BaseModel):
    """
    Specifies usage of Cloud Storage resources.
    """ # noqa: E501
    data_retrieval: Optional[Usage] = Field(default=None, alias="dataRetrieval")
    data_stored: Optional[Usage] = Field(default=None, alias="dataStored")
    dual_region: Optional[DualRegional] = Field(default=None, alias="dualRegion")
    multi_region: Optional[MultiRegional] = Field(default=None, alias="multiRegion")
    operation_a: Optional[Usage] = Field(default=None, alias="operationA")
    operation_b: Optional[Usage] = Field(default=None, alias="operationB")
    region: Optional[Regional] = None
    storage_class: Optional[StrictStr] = Field(default=None, description="The [storage class](https://cloud.google.com/storage/docs/storage-classes#classes) of the data and operation. For example: \"standard\" and \"nearline\".", alias="storageClass")
    __properties: ClassVar[List[str]] = ["dataRetrieval", "dataStored", "dualRegion", "multiRegion", "operationA", "operationB", "region", "storageClass"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudStorageWorkload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_retrieval
        if self.data_retrieval:
            _dict['dataRetrieval'] = self.data_retrieval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_stored
        if self.data_stored:
            _dict['dataStored'] = self.data_stored.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dual_region
        if self.dual_region:
            _dict['dualRegion'] = self.dual_region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of multi_region
        if self.multi_region:
            _dict['multiRegion'] = self.multi_region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation_a
        if self.operation_a:
            _dict['operationA'] = self.operation_a.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation_b
        if self.operation_b:
            _dict['operationB'] = self.operation_b.to_dict()
        # override the default output from pydantic by calling `to_dict()` of region
        if self.region:
            _dict['region'] = self.region.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudStorageWorkload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataRetrieval": Usage.from_dict(obj["dataRetrieval"]) if obj.get("dataRetrieval") is not None else None,
            "dataStored": Usage.from_dict(obj["dataStored"]) if obj.get("dataStored") is not None else None,
            "dualRegion": DualRegional.from_dict(obj["dualRegion"]) if obj.get("dualRegion") is not None else None,
            "multiRegion": MultiRegional.from_dict(obj["multiRegion"]) if obj.get("multiRegion") is not None else None,
            "operationA": Usage.from_dict(obj["operationA"]) if obj.get("operationA") is not None else None,
            "operationB": Usage.from_dict(obj["operationB"]) if obj.get("operationB") is not None else None,
            "region": Regional.from_dict(obj["region"]) if obj.get("region") is not None else None,
            "storageClass": obj.get("storageClass")
        })
        return _obj



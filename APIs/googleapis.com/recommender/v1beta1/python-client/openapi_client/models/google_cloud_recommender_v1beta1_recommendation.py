# coding: utf-8

"""
    Recommender API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_recommender_v1beta1_impact import GoogleCloudRecommenderV1beta1Impact
from openapi_client.models.google_cloud_recommender_v1beta1_recommendation_content import GoogleCloudRecommenderV1beta1RecommendationContent
from openapi_client.models.google_cloud_recommender_v1beta1_recommendation_insight_reference import GoogleCloudRecommenderV1beta1RecommendationInsightReference
from openapi_client.models.google_cloud_recommender_v1beta1_recommendation_state_info import GoogleCloudRecommenderV1beta1RecommendationStateInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecommenderV1beta1Recommendation(BaseModel):
    """
    A recommendation along with a suggested action. E.g., a rightsizing recommendation for an underutilized VM, IAM role recommendations, etc
    """ # noqa: E501
    additional_impact: Optional[List[GoogleCloudRecommenderV1beta1Impact]] = Field(default=None, description="Optional set of additional impact that this recommendation may have when trying to optimize for the primary category. These may be positive or negative.", alias="additionalImpact")
    associated_insights: Optional[List[GoogleCloudRecommenderV1beta1RecommendationInsightReference]] = Field(default=None, description="Insights that led to this recommendation.", alias="associatedInsights")
    content: Optional[GoogleCloudRecommenderV1beta1RecommendationContent] = None
    description: Optional[StrictStr] = Field(default=None, description="Free-form human readable summary in English. The maximum length is 500 characters.")
    etag: Optional[StrictStr] = Field(default=None, description="Fingerprint of the Recommendation. Provides optimistic locking when updating states.")
    last_refresh_time: Optional[StrictStr] = Field(default=None, description="Last time this recommendation was refreshed by the system that created it in the first place.", alias="lastRefreshTime")
    name: Optional[StrictStr] = Field(default=None, description="Name of recommendation.")
    primary_impact: Optional[GoogleCloudRecommenderV1beta1Impact] = Field(default=None, alias="primaryImpact")
    priority: Optional[StrictStr] = Field(default=None, description="Recommendation's priority.")
    recommender_subtype: Optional[StrictStr] = Field(default=None, description="Contains an identifier for a subtype of recommendations produced for the same recommender. Subtype is a function of content and impact, meaning a new subtype might be added when significant changes to `content` or `primary_impact.category` are introduced. See the Recommenders section to see a list of subtypes for a given Recommender. Examples: For recommender = \"google.iam.policy.Recommender\", recommender_subtype can be one of \"REMOVE_ROLE\"/\"REPLACE_ROLE\"", alias="recommenderSubtype")
    state_info: Optional[GoogleCloudRecommenderV1beta1RecommendationStateInfo] = Field(default=None, alias="stateInfo")
    target_resources: Optional[List[StrictStr]] = Field(default=None, description="Fully qualified resource names that this recommendation is targeting.", alias="targetResources")
    xor_group_id: Optional[StrictStr] = Field(default=None, description="Corresponds to a mutually exclusive group ID within a recommender. A non-empty ID indicates that the recommendation belongs to a mutually exclusive group. This means that only one recommendation within the group is suggested to be applied.", alias="xorGroupId")
    __properties: ClassVar[List[str]] = ["additionalImpact", "associatedInsights", "content", "description", "etag", "lastRefreshTime", "name", "primaryImpact", "priority", "recommenderSubtype", "stateInfo", "targetResources", "xorGroupId"]

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRIORITY_UNSPECIFIED', 'P4', 'P3', 'P2', 'P1']):
            raise ValueError("must be one of enum values ('PRIORITY_UNSPECIFIED', 'P4', 'P3', 'P2', 'P1')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommenderV1beta1Recommendation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_impact (list)
        _items = []
        if self.additional_impact:
            for _item_additional_impact in self.additional_impact:
                if _item_additional_impact:
                    _items.append(_item_additional_impact.to_dict())
            _dict['additionalImpact'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in associated_insights (list)
        _items = []
        if self.associated_insights:
            for _item_associated_insights in self.associated_insights:
                if _item_associated_insights:
                    _items.append(_item_associated_insights.to_dict())
            _dict['associatedInsights'] = _items
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primary_impact
        if self.primary_impact:
            _dict['primaryImpact'] = self.primary_impact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state_info
        if self.state_info:
            _dict['stateInfo'] = self.state_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommenderV1beta1Recommendation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalImpact": [GoogleCloudRecommenderV1beta1Impact.from_dict(_item) for _item in obj["additionalImpact"]] if obj.get("additionalImpact") is not None else None,
            "associatedInsights": [GoogleCloudRecommenderV1beta1RecommendationInsightReference.from_dict(_item) for _item in obj["associatedInsights"]] if obj.get("associatedInsights") is not None else None,
            "content": GoogleCloudRecommenderV1beta1RecommendationContent.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "lastRefreshTime": obj.get("lastRefreshTime"),
            "name": obj.get("name"),
            "primaryImpact": GoogleCloudRecommenderV1beta1Impact.from_dict(obj["primaryImpact"]) if obj.get("primaryImpact") is not None else None,
            "priority": obj.get("priority"),
            "recommenderSubtype": obj.get("recommenderSubtype"),
            "stateInfo": GoogleCloudRecommenderV1beta1RecommendationStateInfo.from_dict(obj["stateInfo"]) if obj.get("stateInfo") is not None else None,
            "targetResources": obj.get("targetResources"),
            "xorGroupId": obj.get("xorGroupId")
        })
        return _obj



# coding: utf-8

"""
    Recommender API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_type_money import GoogleTypeMoney
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecommenderV1beta1CostProjection(BaseModel):
    """
    Contains metadata about how much money a recommendation can save or incur.
    """ # noqa: E501
    cost: Optional[GoogleTypeMoney] = None
    cost_in_local_currency: Optional[GoogleTypeMoney] = Field(default=None, alias="costInLocalCurrency")
    duration: Optional[StrictStr] = Field(default=None, description="Duration for which this cost applies.")
    pricing_type: Optional[StrictStr] = Field(default=None, description="How the cost is calculated.", alias="pricingType")
    __properties: ClassVar[List[str]] = ["cost", "costInLocalCurrency", "duration", "pricingType"]

    @field_validator('pricing_type')
    def pricing_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRICING_TYPE_UNSPECIFIED', 'LIST_PRICE', 'CUSTOM_PRICE']):
            raise ValueError("must be one of enum values ('PRICING_TYPE_UNSPECIFIED', 'LIST_PRICE', 'CUSTOM_PRICE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommenderV1beta1CostProjection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cost
        if self.cost:
            _dict['cost'] = self.cost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cost_in_local_currency
        if self.cost_in_local_currency:
            _dict['costInLocalCurrency'] = self.cost_in_local_currency.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommenderV1beta1CostProjection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cost": GoogleTypeMoney.from_dict(obj["cost"]) if obj.get("cost") is not None else None,
            "costInLocalCurrency": GoogleTypeMoney.from_dict(obj["costInLocalCurrency"]) if obj.get("costInLocalCurrency") is not None else None,
            "duration": obj.get("duration"),
            "pricingType": obj.get("pricingType")
        })
        return _obj



# coding: utf-8

"""
    Recommender API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_recommender_v1beta1_insight_recommendation_reference import GoogleCloudRecommenderV1beta1InsightRecommendationReference
from openapi_client.models.google_cloud_recommender_v1beta1_insight_state_info import GoogleCloudRecommenderV1beta1InsightStateInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecommenderV1beta1Insight(BaseModel):
    """
    An insight along with the information used to derive the insight. The insight may have associated recommendations as well.
    """ # noqa: E501
    associated_recommendations: Optional[List[GoogleCloudRecommenderV1beta1InsightRecommendationReference]] = Field(default=None, description="Recommendations derived from this insight.", alias="associatedRecommendations")
    category: Optional[StrictStr] = Field(default=None, description="Category being targeted by the insight.")
    content: Optional[Dict[str, Any]] = Field(default=None, description="A struct of custom fields to explain the insight. Example: \"grantedPermissionsCount\": \"1000\"")
    description: Optional[StrictStr] = Field(default=None, description="Free-form human readable summary in English. The maximum length is 500 characters.")
    etag: Optional[StrictStr] = Field(default=None, description="Fingerprint of the Insight. Provides optimistic locking when updating states.")
    insight_subtype: Optional[StrictStr] = Field(default=None, description="Insight subtype. Insight content schema will be stable for a given subtype.", alias="insightSubtype")
    last_refresh_time: Optional[StrictStr] = Field(default=None, description="Timestamp of the latest data used to generate the insight.", alias="lastRefreshTime")
    name: Optional[StrictStr] = Field(default=None, description="Name of the insight.")
    observation_period: Optional[StrictStr] = Field(default=None, description="Observation period that led to the insight. The source data used to generate the insight ends at last_refresh_time and begins at (last_refresh_time - observation_period).", alias="observationPeriod")
    severity: Optional[StrictStr] = Field(default=None, description="Insight's severity.")
    state_info: Optional[GoogleCloudRecommenderV1beta1InsightStateInfo] = Field(default=None, alias="stateInfo")
    target_resources: Optional[List[StrictStr]] = Field(default=None, description="Fully qualified resource names that this insight is targeting.", alias="targetResources")
    __properties: ClassVar[List[str]] = ["associatedRecommendations", "category", "content", "description", "etag", "insightSubtype", "lastRefreshTime", "name", "observationPeriod", "severity", "stateInfo", "targetResources"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CATEGORY_UNSPECIFIED', 'COST', 'SECURITY', 'PERFORMANCE', 'MANAGEABILITY', 'SUSTAINABILITY', 'RELIABILITY']):
            raise ValueError("must be one of enum values ('CATEGORY_UNSPECIFIED', 'COST', 'SECURITY', 'PERFORMANCE', 'MANAGEABILITY', 'SUSTAINABILITY', 'RELIABILITY')")
        return value

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEVERITY_UNSPECIFIED', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL']):
            raise ValueError("must be one of enum values ('SEVERITY_UNSPECIFIED', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommenderV1beta1Insight from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_recommendations (list)
        _items = []
        if self.associated_recommendations:
            for _item_associated_recommendations in self.associated_recommendations:
                if _item_associated_recommendations:
                    _items.append(_item_associated_recommendations.to_dict())
            _dict['associatedRecommendations'] = _items
        # override the default output from pydantic by calling `to_dict()` of state_info
        if self.state_info:
            _dict['stateInfo'] = self.state_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommenderV1beta1Insight from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associatedRecommendations": [GoogleCloudRecommenderV1beta1InsightRecommendationReference.from_dict(_item) for _item in obj["associatedRecommendations"]] if obj.get("associatedRecommendations") is not None else None,
            "category": obj.get("category"),
            "content": obj.get("content"),
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "insightSubtype": obj.get("insightSubtype"),
            "lastRefreshTime": obj.get("lastRefreshTime"),
            "name": obj.get("name"),
            "observationPeriod": obj.get("observationPeriod"),
            "severity": obj.get("severity"),
            "stateInfo": GoogleCloudRecommenderV1beta1InsightStateInfo.from_dict(obj["stateInfo"]) if obj.get("stateInfo") is not None else None,
            "targetResources": obj.get("targetResources")
        })
        return _obj



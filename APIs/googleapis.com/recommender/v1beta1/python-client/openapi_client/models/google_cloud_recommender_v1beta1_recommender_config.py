# coding: utf-8

"""
    Recommender API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_recommender_v1beta1_recommender_generation_config import GoogleCloudRecommenderV1beta1RecommenderGenerationConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecommenderV1beta1RecommenderConfig(BaseModel):
    """
    Configuration for a Recommender.
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Allows clients to store small amounts of arbitrary data. Annotations must follow the Kubernetes syntax. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.")
    display_name: Optional[StrictStr] = Field(default=None, description="A user-settable field to provide a human-readable name to be used in user interfaces.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="Fingerprint of the RecommenderConfig. Provides optimistic locking when updating.")
    name: Optional[StrictStr] = Field(default=None, description="Name of recommender config. Eg, projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config")
    recommender_generation_config: Optional[GoogleCloudRecommenderV1beta1RecommenderGenerationConfig] = Field(default=None, alias="recommenderGenerationConfig")
    revision_id: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. The revision ID of the config. A new revision is committed whenever the config is changed in any way. The format is an 8-character hexadecimal string.", alias="revisionId")
    update_time: Optional[StrictStr] = Field(default=None, description="Last time when the config was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["annotations", "displayName", "etag", "name", "recommenderGenerationConfig", "revisionId", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommenderV1beta1RecommenderConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "revision_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of recommender_generation_config
        if self.recommender_generation_config:
            _dict['recommenderGenerationConfig'] = self.recommender_generation_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommenderV1beta1RecommenderConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "name": obj.get("name"),
            "recommenderGenerationConfig": GoogleCloudRecommenderV1beta1RecommenderGenerationConfig.from_dict(obj["recommenderGenerationConfig"]) if obj.get("recommenderGenerationConfig") is not None else None,
            "revisionId": obj.get("revisionId"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



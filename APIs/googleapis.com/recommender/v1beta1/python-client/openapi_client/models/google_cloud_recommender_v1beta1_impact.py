# coding: utf-8

"""
    Recommender API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_recommender_v1beta1_cost_projection import GoogleCloudRecommenderV1beta1CostProjection
from openapi_client.models.google_cloud_recommender_v1beta1_reliability_projection import GoogleCloudRecommenderV1beta1ReliabilityProjection
from openapi_client.models.google_cloud_recommender_v1beta1_security_projection import GoogleCloudRecommenderV1beta1SecurityProjection
from openapi_client.models.google_cloud_recommender_v1beta1_sustainability_projection import GoogleCloudRecommenderV1beta1SustainabilityProjection
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecommenderV1beta1Impact(BaseModel):
    """
    Contains the impact a recommendation can have for a given category.
    """ # noqa: E501
    category: Optional[StrictStr] = Field(default=None, description="Category that is being targeted.")
    cost_projection: Optional[GoogleCloudRecommenderV1beta1CostProjection] = Field(default=None, alias="costProjection")
    reliability_projection: Optional[GoogleCloudRecommenderV1beta1ReliabilityProjection] = Field(default=None, alias="reliabilityProjection")
    security_projection: Optional[GoogleCloudRecommenderV1beta1SecurityProjection] = Field(default=None, alias="securityProjection")
    sustainability_projection: Optional[GoogleCloudRecommenderV1beta1SustainabilityProjection] = Field(default=None, alias="sustainabilityProjection")
    __properties: ClassVar[List[str]] = ["category", "costProjection", "reliabilityProjection", "securityProjection", "sustainabilityProjection"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CATEGORY_UNSPECIFIED', 'COST', 'SECURITY', 'PERFORMANCE', 'MANAGEABILITY', 'SUSTAINABILITY', 'RELIABILITY']):
            raise ValueError("must be one of enum values ('CATEGORY_UNSPECIFIED', 'COST', 'SECURITY', 'PERFORMANCE', 'MANAGEABILITY', 'SUSTAINABILITY', 'RELIABILITY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommenderV1beta1Impact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cost_projection
        if self.cost_projection:
            _dict['costProjection'] = self.cost_projection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reliability_projection
        if self.reliability_projection:
            _dict['reliabilityProjection'] = self.reliability_projection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_projection
        if self.security_projection:
            _dict['securityProjection'] = self.security_projection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sustainability_projection
        if self.sustainability_projection:
            _dict['sustainabilityProjection'] = self.sustainability_projection.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommenderV1beta1Impact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "costProjection": GoogleCloudRecommenderV1beta1CostProjection.from_dict(obj["costProjection"]) if obj.get("costProjection") is not None else None,
            "reliabilityProjection": GoogleCloudRecommenderV1beta1ReliabilityProjection.from_dict(obj["reliabilityProjection"]) if obj.get("reliabilityProjection") is not None else None,
            "securityProjection": GoogleCloudRecommenderV1beta1SecurityProjection.from_dict(obj["securityProjection"]) if obj.get("securityProjection") is not None else None,
            "sustainabilityProjection": GoogleCloudRecommenderV1beta1SustainabilityProjection.from_dict(obj["sustainabilityProjection"]) if obj.get("sustainabilityProjection") is not None else None
        })
        return _obj



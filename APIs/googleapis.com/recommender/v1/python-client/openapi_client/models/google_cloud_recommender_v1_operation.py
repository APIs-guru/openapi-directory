# coding: utf-8

"""
    Recommender API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_recommender_v1_value_matcher import GoogleCloudRecommenderV1ValueMatcher
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecommenderV1Operation(BaseModel):
    """
    Contains an operation for a resource loosely based on the JSON-PATCH format with support for: * Custom filters for describing partial array patch. * Extended path values for describing nested arrays. * Custom fields for describing the resource for which the operation is being described. * Allows extension to custom operations not natively supported by RFC6902. See https://tools.ietf.org/html/rfc6902 for details on the original RFC.
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="Type of this operation. Contains one of 'add', 'remove', 'replace', 'move', 'copy', 'test' and custom operations. This field is case-insensitive and always populated.")
    path: Optional[StrictStr] = Field(default=None, description="Path to the target field being operated on. If the operation is at the resource level, then path should be \"/\". This field is always populated.")
    path_filters: Optional[Dict[str, Any]] = Field(default=None, description="Set of filters to apply if `path` refers to array elements or nested array elements in order to narrow down to a single unique element that is being tested/modified. This is intended to be an exact match per filter. To perform advanced matching, use path_value_matchers. * Example: ``` { \"/versions/*/name\" : \"it-123\" \"/versions/*/targetSize/percent\": 20 } ``` * Example: ``` { \"/bindings/*/role\": \"roles/owner\" \"/bindings/*/condition\" : null } ``` * Example: ``` { \"/bindings/*/role\": \"roles/owner\" \"/bindings/*/members/*\" : [\"x@example.com\", \"y@example.com\"] } ``` When both path_filters and path_value_matchers are set, an implicit AND must be performed.", alias="pathFilters")
    path_value_matchers: Optional[Dict[str, GoogleCloudRecommenderV1ValueMatcher]] = Field(default=None, description="Similar to path_filters, this contains set of filters to apply if `path` field refers to array elements. This is meant to support value matching beyond exact match. To perform exact match, use path_filters. When both path_filters and path_value_matchers are set, an implicit AND must be performed.", alias="pathValueMatchers")
    resource: Optional[StrictStr] = Field(default=None, description="Contains the fully qualified resource name. This field is always populated. ex: //cloudresourcemanager.googleapis.com/projects/foo.")
    resource_type: Optional[StrictStr] = Field(default=None, description="Type of GCP resource being modified/tested. This field is always populated. Example: cloudresourcemanager.googleapis.com/Project, compute.googleapis.com/Instance", alias="resourceType")
    source_path: Optional[StrictStr] = Field(default=None, description="Can be set with action 'copy' or 'move' to indicate the source field within resource or source_resource, ignored if provided for other operation types.", alias="sourcePath")
    source_resource: Optional[StrictStr] = Field(default=None, description="Can be set with action 'copy' to copy resource configuration across different resources of the same type. Example: A resource clone can be done via action = 'copy', path = \"/\", from = \"/\", source_resource = and resource_name = . This field is empty for all other values of `action`.", alias="sourceResource")
    value: Optional[Any] = Field(default=None, description="Value for the `path` field. Will be set for actions:'add'/'replace'. Maybe set for action: 'test'. Either this or `value_matcher` will be set for 'test' operation. An exact match must be performed.")
    value_matcher: Optional[GoogleCloudRecommenderV1ValueMatcher] = Field(default=None, alias="valueMatcher")
    __properties: ClassVar[List[str]] = ["action", "path", "pathFilters", "pathValueMatchers", "resource", "resourceType", "sourcePath", "sourceResource", "value", "valueMatcher"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommenderV1Operation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in path_value_matchers (dict)
        _field_dict = {}
        if self.path_value_matchers:
            for _key_path_value_matchers in self.path_value_matchers:
                if self.path_value_matchers[_key_path_value_matchers]:
                    _field_dict[_key_path_value_matchers] = self.path_value_matchers[_key_path_value_matchers].to_dict()
            _dict['pathValueMatchers'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of value_matcher
        if self.value_matcher:
            _dict['valueMatcher'] = self.value_matcher.to_dict()
        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommenderV1Operation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "path": obj.get("path"),
            "pathFilters": obj.get("pathFilters"),
            "pathValueMatchers": dict(
                (_k, GoogleCloudRecommenderV1ValueMatcher.from_dict(_v))
                for _k, _v in obj["pathValueMatchers"].items()
            )
            if obj.get("pathValueMatchers") is not None
            else None,
            "resource": obj.get("resource"),
            "resourceType": obj.get("resourceType"),
            "sourcePath": obj.get("sourcePath"),
            "sourceResource": obj.get("sourceResource"),
            "value": obj.get("value"),
            "valueMatcher": GoogleCloudRecommenderV1ValueMatcher.from_dict(obj["valueMatcher"]) if obj.get("valueMatcher") is not None else None
        })
        return _obj



# coding: utf-8

"""
    My Business Business Calls API

    The My Business Business Calls API manages business calls information of a location on Google and collect insights like the number of missed calls to their location. Additional information about Business calls can be found at https://support.google.com/business/answer/9688285?p=call_history. If the Google Business Profile links to a Google Ads account and call history is turned on, calls that last longer than a specific time, and that can be attributed to an ad interaction, will show in the linked Google Ads account under the \"Calls from Ads\" conversion. If smart bidding and call conversions are used in the optimization strategy, there could be a change in ad spend. Learn more about smart bidding. To view and perform actions on a location's calls, you need to be a `OWNER`, `CO_OWNER` or `MANAGER` of the location. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aggregate_metrics import AggregateMetrics
from typing import Optional, Set
from typing_extensions import Self

class BusinessCallsInsights(BaseModel):
    """
    Insights for calls made to a location.
    """ # noqa: E501
    aggregate_metrics: Optional[AggregateMetrics] = Field(default=None, alias="aggregateMetrics")
    metric_type: Optional[StrictStr] = Field(default=None, description="The metric for which the value applies.", alias="metricType")
    name: Optional[StrictStr] = Field(default=None, description="Required. The resource name of the calls insights. Format: locations/{location}/businesscallsinsights")
    __properties: ClassVar[List[str]] = ["aggregateMetrics", "metricType", "name"]

    @field_validator('metric_type')
    def metric_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['METRIC_TYPE_UNSPECIFIED', 'AGGREGATE_COUNT']):
            raise ValueError("must be one of enum values ('METRIC_TYPE_UNSPECIFIED', 'AGGREGATE_COUNT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BusinessCallsInsights from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aggregate_metrics
        if self.aggregate_metrics:
            _dict['aggregateMetrics'] = self.aggregate_metrics.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BusinessCallsInsights from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregateMetrics": AggregateMetrics.from_dict(obj["aggregateMetrics"]) if obj.get("aggregateMetrics") is not None else None,
            "metricType": obj.get("metricType"),
            "name": obj.get("name")
        })
        return _obj



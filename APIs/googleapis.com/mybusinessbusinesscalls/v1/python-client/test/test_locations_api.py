# coding: utf-8

"""
    My Business Business Calls API

    The My Business Business Calls API manages business calls information of a location on Google and collect insights like the number of missed calls to their location. Additional information about Business calls can be found at https://support.google.com/business/answer/9688285?p=call_history. If the Google Business Profile links to a Google Ads account and call history is turned on, calls that last longer than a specific time, and that can be attributed to an ad interaction, will show in the linked Google Ads account under the \"Calls from Ads\" conversion. If smart bidding and call conversions are used in the optimization strategy, there could be a change in ad spend. Learn more about smart bidding. To view and perform actions on a location's calls, you need to be a `OWNER`, `CO_OWNER` or `MANAGER` of the location. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.locations_api import LocationsApi


class TestLocationsApi(unittest.TestCase):
    """LocationsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = LocationsApi()

    def tearDown(self) -> None:
        pass

    def test_mybusinessbusinesscalls_locations_businesscallsinsights_list(self) -> None:
        """Test case for mybusinessbusinesscalls_locations_businesscallsinsights_list

        """
        pass

    def test_mybusinessbusinesscalls_locations_get_businesscallssettings(self) -> None:
        """Test case for mybusinessbusinesscalls_locations_get_businesscallssettings

        """
        pass

    def test_mybusinessbusinesscalls_locations_update_businesscallssettings(self) -> None:
        """Test case for mybusinessbusinesscalls_locations_update_businesscallssettings

        """
        pass


if __name__ == '__main__':
    unittest.main()

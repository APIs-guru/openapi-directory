# coding: utf-8

"""
    Workflows API

    Manage workflow definitions. To execute workflows and manage executions, see the Workflows Executions API.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Workflow(BaseModel):
    """
    Workflow program to be executed by Workflows.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp of when the workflow was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Description of the workflow provided by the user. Must be at most 1000 unicode characters long.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels associated with this workflow. Labels can contain at most 64 entries. Keys and values can be no longer than 63 characters and can only contain lowercase letters, numeric characters, underscores and dashes. Label keys must start with a letter. International characters are allowed.")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the workflow. Format: projects/{project}/locations/{location}/workflows/{workflow}")
    revision_create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp that the latest revision of the workflow was created.", alias="revisionCreateTime")
    revision_id: Optional[StrictStr] = Field(default=None, description="Output only. The revision of the workflow. A new revision of a workflow is created as a result of updating the following properties of a workflow: - Service account - Workflow code to be executed The format is \"000001-a4d\", where the first 6 characters define the zero-padded revision ordinal number. They are followed by a hyphen and 3 hexadecimal random characters.", alias="revisionId")
    service_account: Optional[StrictStr] = Field(default=None, description="The service account associated with the latest workflow version. This service account represents the identity of the workflow and determines what permissions the workflow has. Format: projects/{project}/serviceAccounts/{account} or {account} Using `-` as a wildcard for the `{project}` or not providing one at all will infer the project from the account. The `{account}` value can be the `email` address or the `unique_id` of the service account. If not provided, workflow will use the project's default service account. Modifying this field for an existing workflow results in a new workflow revision.", alias="serviceAccount")
    source_contents: Optional[StrictStr] = Field(default=None, description="Workflow code to be executed. The size limit is 128KB.", alias="sourceContents")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the workflow deployment.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last update timestamp of the workflow.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "labels", "name", "revisionCreateTime", "revisionId", "serviceAccount", "sourceContents", "state", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Workflow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "revision_create_time",
            "revision_id",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Workflow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "revisionCreateTime": obj.get("revisionCreateTime"),
            "revisionId": obj.get("revisionId"),
            "serviceAccount": obj.get("serviceAccount"),
            "sourceContents": obj.get("sourceContents"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



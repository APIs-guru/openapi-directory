# coding: utf-8

"""
    Workflows API

    Manage workflow definitions. To execute workflows and manage executions, see the Workflows Executions API.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Location(BaseModel):
    """
    A resource that represents a Google Cloud location.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".", alias="displayName")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}")
    location_id: Optional[StrictStr] = Field(default=None, description="The canonical id for this location. For example: `\"us-east1\"`.", alias="locationId")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Service-specific metadata. For example the available capacity at the given location.")
    name: Optional[StrictStr] = Field(default=None, description="Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`")
    __properties: ClassVar[List[str]] = ["displayName", "labels", "locationId", "metadata", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Location from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Location from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "labels": obj.get("labels"),
            "locationId": obj.get("locationId"),
            "metadata": obj.get("metadata"),
            "name": obj.get("name")
        })
        return _obj



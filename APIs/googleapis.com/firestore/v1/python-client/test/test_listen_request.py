# coding: utf-8

"""
    Cloud Firestore API

    Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.listen_request import ListenRequest

class TestListenRequest(unittest.TestCase):
    """ListenRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListenRequest:
        """Test ListenRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListenRequest`
        """
        model = ListenRequest()
        if include_optional:
            return ListenRequest(
                add_target = openapi_client.models.target.Target(
                    documents = openapi_client.models.documents_target.DocumentsTarget(), 
                    expected_count = 56, 
                    once = True, 
                    query = openapi_client.models.query_target.QueryTarget(
                        parent = '', 
                        structured_query = openapi_client.models.structured_query.StructuredQuery(
                            end_at = openapi_client.models.cursor.Cursor(
                                before = True, 
                                values = [
                                    openapi_client.models.value.Value(
                                        array_value = openapi_client.models.array_value.ArrayValue(), 
                                        boolean_value = True, 
                                        bytes_value = 'YQ==', 
                                        double_value = 1.337, 
                                        geo_point_value = openapi_client.models.lat_lng.LatLng(
                                            latitude = 1.337, 
                                            longitude = 1.337, ), 
                                        integer_value = '', 
                                        map_value = openapi_client.models.map_value.MapValue(
                                            fields = {
                                                'key' : openapi_client.models.value.Value(
                                                    boolean_value = True, 
                                                    bytes_value = 'YQ==', 
                                                    double_value = 1.337, 
                                                    integer_value = '', 
                                                    null_value = 'NULL_VALUE', 
                                                    reference_value = '', 
                                                    string_value = '', 
                                                    timestamp_value = '', )
                                                }, ), 
                                        null_value = 'NULL_VALUE', 
                                        reference_value = '', 
                                        string_value = '', 
                                        timestamp_value = '', )
                                    ], ), 
                            from = [
                                openapi_client.models.collection_selector.CollectionSelector(
                                    all_descendants = True, 
                                    collection_id = '', )
                                ], 
                            limit = 56, 
                            offset = 56, 
                            order_by = [
                                openapi_client.models.order.Order(
                                    direction = 'DIRECTION_UNSPECIFIED', 
                                    field = openapi_client.models.field_reference.FieldReference(
                                        field_path = '', ), )
                                ], 
                            select = openapi_client.models.projection.Projection(), 
                            start_at = openapi_client.models.cursor.Cursor(
                                before = True, ), 
                            where = openapi_client.models.filter.Filter(
                                composite_filter = openapi_client.models.composite_filter.CompositeFilter(
                                    filters = [
                                        openapi_client.models.filter.Filter(
                                            field_filter = openapi_client.models.field_filter.FieldFilter(
                                                op = 'OPERATOR_UNSPECIFIED', 
                                                value = , ), 
                                            unary_filter = openapi_client.models.unary_filter.UnaryFilter(
                                                op = 'OPERATOR_UNSPECIFIED', ), )
                                        ], 
                                    op = 'OPERATOR_UNSPECIFIED', ), 
                                field_filter = openapi_client.models.field_filter.FieldFilter(
                                    op = 'OPERATOR_UNSPECIFIED', ), 
                                unary_filter = openapi_client.models.unary_filter.UnaryFilter(
                                    op = 'OPERATOR_UNSPECIFIED', ), ), ), ), 
                    read_time = '', 
                    resume_token = 'YQ==', 
                    target_id = 56, ),
                labels = {
                    'key' : ''
                    },
                remove_target = 56
            )
        else:
            return ListenRequest(
        )
        """

    def testListenRequest(self):
        """Test ListenRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

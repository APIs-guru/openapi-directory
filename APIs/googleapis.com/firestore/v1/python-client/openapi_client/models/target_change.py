# coding: utf-8

"""
    Cloud Firestore API

    Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class TargetChange(BaseModel):
    """
    Targets being watched have changed.
    """ # noqa: E501
    cause: Optional[Status] = None
    read_time: Optional[StrictStr] = Field(default=None, description="The consistent `read_time` for the given `target_ids` (omitted when the target_ids are not at a consistent snapshot). The stream is guaranteed to send a `read_time` with `target_ids` empty whenever the entire stream reaches a new consistent snapshot. ADD, CURRENT, and RESET messages are guaranteed to (eventually) result in a new consistent snapshot (while NO_CHANGE and REMOVE messages are not). For a given stream, `read_time` is guaranteed to be monotonically increasing.", alias="readTime")
    resume_token: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="A token that can be used to resume the stream for the given `target_ids`, or all targets if `target_ids` is empty. Not set on every target change.", alias="resumeToken")
    target_change_type: Optional[StrictStr] = Field(default=None, description="The type of change that occurred.", alias="targetChangeType")
    target_ids: Optional[List[StrictInt]] = Field(default=None, description="The target IDs of targets that have changed. If empty, the change applies to all targets. The order of the target IDs is not defined.", alias="targetIds")
    __properties: ClassVar[List[str]] = ["cause", "readTime", "resumeToken", "targetChangeType", "targetIds"]

    @field_validator('target_change_type')
    def target_change_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NO_CHANGE', 'ADD', 'REMOVE', 'CURRENT', 'RESET']):
            raise ValueError("must be one of enum values ('NO_CHANGE', 'ADD', 'REMOVE', 'CURRENT', 'RESET')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TargetChange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cause
        if self.cause:
            _dict['cause'] = self.cause.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TargetChange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cause": Status.from_dict(obj["cause"]) if obj.get("cause") is not None else None,
            "readTime": obj.get("readTime"),
            "resumeToken": obj.get("resumeToken"),
            "targetChangeType": obj.get("targetChangeType"),
            "targetIds": obj.get("targetIds")
        })
        return _obj



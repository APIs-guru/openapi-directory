# coding: utf-8

"""
    Cloud Firestore API

    Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_firestore_admin_v1_weekly_recurrence import GoogleFirestoreAdminV1WeeklyRecurrence
from typing import Optional, Set
from typing_extensions import Self

class GoogleFirestoreAdminV1BackupSchedule(BaseModel):
    """
    A backup schedule for a Cloud Firestore Database. This resource is owned by the database it is backing up, and is deleted along with the database. The actual backups are not though.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp at which this backup schedule was created and effective since. No backups will be created for this schedule before this time.", alias="createTime")
    daily_recurrence: Optional[Dict[str, Any]] = Field(default=None, description="Represent a recurring schedule that runs at a specific time every day. The time zone is UTC.", alias="dailyRecurrence")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The unique backup schedule identifier across all locations and databases for the given project. This will be auto-assigned. Format is `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`")
    retention: Optional[StrictStr] = Field(default=None, description="At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp at which this backup schedule was most recently updated. When a backup schedule is first created, this is the same as create_time.", alias="updateTime")
    weekly_recurrence: Optional[GoogleFirestoreAdminV1WeeklyRecurrence] = Field(default=None, alias="weeklyRecurrence")
    __properties: ClassVar[List[str]] = ["createTime", "dailyRecurrence", "name", "retention", "updateTime", "weeklyRecurrence"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFirestoreAdminV1BackupSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of weekly_recurrence
        if self.weekly_recurrence:
            _dict['weeklyRecurrence'] = self.weekly_recurrence.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFirestoreAdminV1BackupSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "dailyRecurrence": obj.get("dailyRecurrence"),
            "name": obj.get("name"),
            "retention": obj.get("retention"),
            "updateTime": obj.get("updateTime"),
            "weeklyRecurrence": GoogleFirestoreAdminV1WeeklyRecurrence.from_dict(obj["weeklyRecurrence"]) if obj.get("weeklyRecurrence") is not None else None
        })
        return _obj



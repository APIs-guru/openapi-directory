# coding: utf-8

"""
    Cloud Firestore API

    Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.write_result import WriteResult
from typing import Optional, Set
from typing_extensions import Self

class WriteResponse(BaseModel):
    """
    The response for Firestore.Write.
    """ # noqa: E501
    commit_time: Optional[StrictStr] = Field(default=None, description="The time at which the commit occurred. Any read with an equal or greater `read_time` is guaranteed to see the effects of the write.", alias="commitTime")
    stream_id: Optional[StrictStr] = Field(default=None, description="The ID of the stream. Only set on the first message, when a new stream was created.", alias="streamId")
    stream_token: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="A token that represents the position of this response in the stream. This can be used by a client to resume the stream at this point. This field is always set.", alias="streamToken")
    write_results: Optional[List[WriteResult]] = Field(default=None, description="The result of applying the writes. This i-th write result corresponds to the i-th write in the request.", alias="writeResults")
    __properties: ClassVar[List[str]] = ["commitTime", "streamId", "streamToken", "writeResults"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WriteResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in write_results (list)
        _items = []
        if self.write_results:
            for _item_write_results in self.write_results:
                if _item_write_results:
                    _items.append(_item_write_results.to_dict())
            _dict['writeResults'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WriteResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commitTime": obj.get("commitTime"),
            "streamId": obj.get("streamId"),
            "streamToken": obj.get("streamToken"),
            "writeResults": [WriteResult.from_dict(_item) for _item in obj["writeResults"]] if obj.get("writeResults") is not None else None
        })
        return _obj



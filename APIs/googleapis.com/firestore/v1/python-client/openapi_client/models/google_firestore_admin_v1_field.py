# coding: utf-8

"""
    Cloud Firestore API

    Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_firestore_admin_v1_index_config import GoogleFirestoreAdminV1IndexConfig
from openapi_client.models.google_firestore_admin_v1_ttl_config import GoogleFirestoreAdminV1TtlConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleFirestoreAdminV1Field(BaseModel):
    """
    Represents a single field in the database. Fields are grouped by their \"Collection Group\", which represent all collections in the database with the same id.
    """ # noqa: E501
    index_config: Optional[GoogleFirestoreAdminV1IndexConfig] = Field(default=None, alias="indexConfig")
    name: Optional[StrictStr] = Field(default=None, description="Required. A field name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}` A field path may be a simple field name, e.g. `address` or a path to fields within map_value , e.g. `address.city`, or a special field path. The only valid special field is `*`, which represents any field. Field paths may be quoted using ` (backtick). The only character that needs to be escaped within a quoted field path is the backtick character itself, escaped using a backslash. Special characters in field paths that must be quoted include: `*`, `.`, ``` (backtick), `[`, `]`, as well as any ascii symbolic characters. Examples: (Note: Comments here are written in markdown syntax, so there is an additional layer of backticks to represent a code block) `\\`address.city\\`` represents a field named `address.city`, not the map key `city` in the field `address`. `\\`*\\`` represents a field named `*`, not any field. A special `Field` contains the default indexing settings for all fields. This field's resource name is: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*` Indexes defined on this `Field` will be applied to all fields which do not have their own `Field` index configuration.")
    ttl_config: Optional[GoogleFirestoreAdminV1TtlConfig] = Field(default=None, alias="ttlConfig")
    __properties: ClassVar[List[str]] = ["indexConfig", "name", "ttlConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFirestoreAdminV1Field from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of index_config
        if self.index_config:
            _dict['indexConfig'] = self.index_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ttl_config
        if self.ttl_config:
            _dict['ttlConfig'] = self.ttl_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFirestoreAdminV1Field from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "indexConfig": GoogleFirestoreAdminV1IndexConfig.from_dict(obj["indexConfig"]) if obj.get("indexConfig") is not None else None,
            "name": obj.get("name"),
            "ttlConfig": GoogleFirestoreAdminV1TtlConfig.from_dict(obj["ttlConfig"]) if obj.get("ttlConfig") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Firestore API

    Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.array_value import ArrayValue
from openapi_client.models.value import Value
from typing import Optional, Set
from typing_extensions import Self

class FieldTransform(BaseModel):
    """
    A transformation of a field of the document.
    """ # noqa: E501
    append_missing_elements: Optional[ArrayValue] = Field(default=None, alias="appendMissingElements")
    field_path: Optional[StrictStr] = Field(default=None, description="The path of the field. See Document.fields for the field path syntax reference.", alias="fieldPath")
    increment: Optional[Value] = None
    maximum: Optional[Value] = None
    minimum: Optional[Value] = None
    remove_all_from_array: Optional[ArrayValue] = Field(default=None, alias="removeAllFromArray")
    set_to_server_value: Optional[StrictStr] = Field(default=None, description="Sets the field to the given server value.", alias="setToServerValue")
    __properties: ClassVar[List[str]] = ["appendMissingElements", "fieldPath", "increment", "maximum", "minimum", "removeAllFromArray", "setToServerValue"]

    @field_validator('set_to_server_value')
    def set_to_server_value_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SERVER_VALUE_UNSPECIFIED', 'REQUEST_TIME']):
            raise ValueError("must be one of enum values ('SERVER_VALUE_UNSPECIFIED', 'REQUEST_TIME')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FieldTransform from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of append_missing_elements
        if self.append_missing_elements:
            _dict['appendMissingElements'] = self.append_missing_elements.to_dict()
        # override the default output from pydantic by calling `to_dict()` of increment
        if self.increment:
            _dict['increment'] = self.increment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maximum
        if self.maximum:
            _dict['maximum'] = self.maximum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of minimum
        if self.minimum:
            _dict['minimum'] = self.minimum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remove_all_from_array
        if self.remove_all_from_array:
            _dict['removeAllFromArray'] = self.remove_all_from_array.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FieldTransform from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appendMissingElements": ArrayValue.from_dict(obj["appendMissingElements"]) if obj.get("appendMissingElements") is not None else None,
            "fieldPath": obj.get("fieldPath"),
            "increment": Value.from_dict(obj["increment"]) if obj.get("increment") is not None else None,
            "maximum": Value.from_dict(obj["maximum"]) if obj.get("maximum") is not None else None,
            "minimum": Value.from_dict(obj["minimum"]) if obj.get("minimum") is not None else None,
            "removeAllFromArray": ArrayValue.from_dict(obj["removeAllFromArray"]) if obj.get("removeAllFromArray") is not None else None,
            "setToServerValue": obj.get("setToServerValue")
        })
        return _obj



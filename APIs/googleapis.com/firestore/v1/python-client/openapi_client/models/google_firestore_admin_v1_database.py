# coding: utf-8

"""
    Cloud Firestore API

    Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleFirestoreAdminV1Database(BaseModel):
    """
    A Cloud Firestore Database.
    """ # noqa: E501
    app_engine_integration_mode: Optional[StrictStr] = Field(default=None, description="The App Engine integration mode to use for this database.", alias="appEngineIntegrationMode")
    concurrency_mode: Optional[StrictStr] = Field(default=None, description="The concurrency control mode to use for this database.", alias="concurrencyMode")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp at which this database was created. Databases created before 2016 do not populate create_time.", alias="createTime")
    delete_protection_state: Optional[StrictStr] = Field(default=None, description="State of delete protection for the database.", alias="deleteProtectionState")
    earliest_version_time: Optional[StrictStr] = Field(default=None, description="Output only. The earliest timestamp at which older versions of the data can be read from the database. See [version_retention_period] above; this field is populated with `now - version_retention_period`. This value is continuously updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.", alias="earliestVersionTime")
    etag: Optional[StrictStr] = Field(default=None, description="This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.")
    key_prefix: Optional[StrictStr] = Field(default=None, description="Output only. The key_prefix for this database. This key_prefix is used, in combination with the project id (\"~\") to construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).", alias="keyPrefix")
    location_id: Optional[StrictStr] = Field(default=None, description="The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.", alias="locationId")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the Database. Format: `projects/{project}/databases/{database}`")
    point_in_time_recovery_enablement: Optional[StrictStr] = Field(default=None, description="Whether to enable the PITR feature on this database.", alias="pointInTimeRecoveryEnablement")
    type: Optional[StrictStr] = Field(default=None, description="The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. The system-generated UUID4 for this Database.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp at which this database was most recently updated. Note this only includes updates to the database resource and not data contained by the database.", alias="updateTime")
    version_retention_period: Optional[StrictStr] = Field(default=None, description="Output only. The period during which past versions of data are retained in the database. Any read or query can specify a `read_time` within this window, and will read the state of the database at that time. If the PITR feature is enabled, the retention period is 7 days. Otherwise, the retention period is 1 hour.", alias="versionRetentionPeriod")
    __properties: ClassVar[List[str]] = ["appEngineIntegrationMode", "concurrencyMode", "createTime", "deleteProtectionState", "earliestVersionTime", "etag", "keyPrefix", "locationId", "name", "pointInTimeRecoveryEnablement", "type", "uid", "updateTime", "versionRetentionPeriod"]

    @field_validator('app_engine_integration_mode')
    def app_engine_integration_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED', 'ENABLED', 'DISABLED']):
            raise ValueError("must be one of enum values ('APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED', 'ENABLED', 'DISABLED')")
        return value

    @field_validator('concurrency_mode')
    def concurrency_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONCURRENCY_MODE_UNSPECIFIED', 'OPTIMISTIC', 'PESSIMISTIC', 'OPTIMISTIC_WITH_ENTITY_GROUPS']):
            raise ValueError("must be one of enum values ('CONCURRENCY_MODE_UNSPECIFIED', 'OPTIMISTIC', 'PESSIMISTIC', 'OPTIMISTIC_WITH_ENTITY_GROUPS')")
        return value

    @field_validator('delete_protection_state')
    def delete_protection_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DELETE_PROTECTION_STATE_UNSPECIFIED', 'DELETE_PROTECTION_DISABLED', 'DELETE_PROTECTION_ENABLED']):
            raise ValueError("must be one of enum values ('DELETE_PROTECTION_STATE_UNSPECIFIED', 'DELETE_PROTECTION_DISABLED', 'DELETE_PROTECTION_ENABLED')")
        return value

    @field_validator('point_in_time_recovery_enablement')
    def point_in_time_recovery_enablement_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['POINT_IN_TIME_RECOVERY_ENABLEMENT_UNSPECIFIED', 'POINT_IN_TIME_RECOVERY_ENABLED', 'POINT_IN_TIME_RECOVERY_DISABLED']):
            raise ValueError("must be one of enum values ('POINT_IN_TIME_RECOVERY_ENABLEMENT_UNSPECIFIED', 'POINT_IN_TIME_RECOVERY_ENABLED', 'POINT_IN_TIME_RECOVERY_DISABLED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATABASE_TYPE_UNSPECIFIED', 'FIRESTORE_NATIVE', 'DATASTORE_MODE']):
            raise ValueError("must be one of enum values ('DATABASE_TYPE_UNSPECIFIED', 'FIRESTORE_NATIVE', 'DATASTORE_MODE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFirestoreAdminV1Database from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "earliest_version_time",
            "key_prefix",
            "uid",
            "update_time",
            "version_retention_period",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFirestoreAdminV1Database from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appEngineIntegrationMode": obj.get("appEngineIntegrationMode"),
            "concurrencyMode": obj.get("concurrencyMode"),
            "createTime": obj.get("createTime"),
            "deleteProtectionState": obj.get("deleteProtectionState"),
            "earliestVersionTime": obj.get("earliestVersionTime"),
            "etag": obj.get("etag"),
            "keyPrefix": obj.get("keyPrefix"),
            "locationId": obj.get("locationId"),
            "name": obj.get("name"),
            "pointInTimeRecoveryEnablement": obj.get("pointInTimeRecoveryEnablement"),
            "type": obj.get("type"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime"),
            "versionRetentionPeriod": obj.get("versionRetentionPeriod")
        })
        return _obj



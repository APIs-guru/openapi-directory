# coding: utf-8

"""
    Cloud Firestore API

    Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.document import Document
from openapi_client.models.document_mask import DocumentMask
from openapi_client.models.document_transform import DocumentTransform
from openapi_client.models.field_transform import FieldTransform
from openapi_client.models.precondition import Precondition
from typing import Optional, Set
from typing_extensions import Self

class Write(BaseModel):
    """
    A write on a document.
    """ # noqa: E501
    current_document: Optional[Precondition] = Field(default=None, alias="currentDocument")
    delete: Optional[StrictStr] = Field(default=None, description="A document name to delete. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.")
    transform: Optional[DocumentTransform] = None
    update: Optional[Document] = None
    update_mask: Optional[DocumentMask] = Field(default=None, alias="updateMask")
    update_transforms: Optional[List[FieldTransform]] = Field(default=None, description="The transforms to perform after update. This field can be set only when the operation is `update`. If present, this write is equivalent to performing `update` and `transform` to the same document atomically and in order.", alias="updateTransforms")
    __properties: ClassVar[List[str]] = ["currentDocument", "delete", "transform", "update", "updateMask", "updateTransforms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Write from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_document
        if self.current_document:
            _dict['currentDocument'] = self.current_document.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transform
        if self.transform:
            _dict['transform'] = self.transform.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update
        if self.update:
            _dict['update'] = self.update.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_mask
        if self.update_mask:
            _dict['updateMask'] = self.update_mask.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in update_transforms (list)
        _items = []
        if self.update_transforms:
            for _item_update_transforms in self.update_transforms:
                if _item_update_transforms:
                    _items.append(_item_update_transforms.to_dict())
            _dict['updateTransforms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Write from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentDocument": Precondition.from_dict(obj["currentDocument"]) if obj.get("currentDocument") is not None else None,
            "delete": obj.get("delete"),
            "transform": DocumentTransform.from_dict(obj["transform"]) if obj.get("transform") is not None else None,
            "update": Document.from_dict(obj["update"]) if obj.get("update") is not None else None,
            "updateMask": DocumentMask.from_dict(obj["updateMask"]) if obj.get("updateMask") is not None else None,
            "updateTransforms": [FieldTransform.from_dict(_item) for _item in obj["updateTransforms"]] if obj.get("updateTransforms") is not None else None
        })
        return _obj



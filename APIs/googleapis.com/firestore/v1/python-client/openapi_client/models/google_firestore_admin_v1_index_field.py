# coding: utf-8

"""
    Cloud Firestore API

    Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_firestore_admin_v1_vector_config import GoogleFirestoreAdminV1VectorConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleFirestoreAdminV1IndexField(BaseModel):
    """
    A field in an index. The field_path describes which field is indexed, the value_mode describes how the field value is indexed.
    """ # noqa: E501
    array_config: Optional[StrictStr] = Field(default=None, description="Indicates that this field supports operations on `array_value`s.", alias="arrayConfig")
    field_path: Optional[StrictStr] = Field(default=None, description="Can be __name__. For single field indexes, this must match the name of the field or may be omitted.", alias="fieldPath")
    order: Optional[StrictStr] = Field(default=None, description="Indicates that this field supports ordering by the specified order or comparing using =, !=, <, <=, >, >=.")
    vector_config: Optional[GoogleFirestoreAdminV1VectorConfig] = Field(default=None, alias="vectorConfig")
    __properties: ClassVar[List[str]] = ["arrayConfig", "fieldPath", "order", "vectorConfig"]

    @field_validator('array_config')
    def array_config_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ARRAY_CONFIG_UNSPECIFIED', 'CONTAINS']):
            raise ValueError("must be one of enum values ('ARRAY_CONFIG_UNSPECIFIED', 'CONTAINS')")
        return value

    @field_validator('order')
    def order_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ORDER_UNSPECIFIED', 'ASCENDING', 'DESCENDING']):
            raise ValueError("must be one of enum values ('ORDER_UNSPECIFIED', 'ASCENDING', 'DESCENDING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFirestoreAdminV1IndexField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of vector_config
        if self.vector_config:
            _dict['vectorConfig'] = self.vector_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFirestoreAdminV1IndexField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arrayConfig": obj.get("arrayConfig"),
            "fieldPath": obj.get("fieldPath"),
            "order": obj.get("order"),
            "vectorConfig": GoogleFirestoreAdminV1VectorConfig.from_dict(obj["vectorConfig"]) if obj.get("vectorConfig") is not None else None
        })
        return _obj



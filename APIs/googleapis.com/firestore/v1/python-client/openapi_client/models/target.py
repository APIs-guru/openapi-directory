# coding: utf-8

"""
    Cloud Firestore API

    Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.documents_target import DocumentsTarget
from openapi_client.models.query_target import QueryTarget
from typing import Optional, Set
from typing_extensions import Self

class Target(BaseModel):
    """
    A specification of a set of documents to listen to.
    """ # noqa: E501
    documents: Optional[DocumentsTarget] = None
    expected_count: Optional[StrictInt] = Field(default=None, description="The number of documents that last matched the query at the resume token or read time. This value is only relevant when a `resume_type` is provided. This value being present and greater than zero signals that the client wants `ExistenceFilter.unchanged_names` to be included in the response.", alias="expectedCount")
    once: Optional[StrictBool] = Field(default=None, description="If the target should be removed once it is current and consistent.")
    query: Optional[QueryTarget] = None
    read_time: Optional[StrictStr] = Field(default=None, description="Start listening after a specific `read_time`. The client must know the state of matching documents at this time.", alias="readTime")
    resume_token: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="A resume token from a prior TargetChange for an identical target. Using a resume token with a different target is unsupported and may fail.", alias="resumeToken")
    target_id: Optional[StrictInt] = Field(default=None, description="The target ID that identifies the target on the stream. Must be a positive number and non-zero. If `target_id` is 0 (or unspecified), the server will assign an ID for this target and return that in a `TargetChange::ADD` event. Once a target with `target_id=0` is added, all subsequent targets must also have `target_id=0`. If an `AddTarget` request with `target_id != 0` is sent to the server after a target with `target_id=0` is added, the server will immediately send a response with a `TargetChange::Remove` event. Note that if the client sends multiple `AddTarget` requests without an ID, the order of IDs returned in `TargetChage.target_ids` are undefined. Therefore, clients should provide a target ID instead of relying on the server to assign one. If `target_id` is non-zero, there must not be an existing active target on this stream with the same ID.", alias="targetId")
    __properties: ClassVar[List[str]] = ["documents", "expectedCount", "once", "query", "readTime", "resumeToken", "targetId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Target from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of documents
        if self.documents:
            _dict['documents'] = self.documents.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Target from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "documents": DocumentsTarget.from_dict(obj["documents"]) if obj.get("documents") is not None else None,
            "expectedCount": obj.get("expectedCount"),
            "once": obj.get("once"),
            "query": QueryTarget.from_dict(obj["query"]) if obj.get("query") is not None else None,
            "readTime": obj.get("readTime"),
            "resumeToken": obj.get("resumeToken"),
            "targetId": obj.get("targetId")
        })
        return _obj



# coding: utf-8

"""
    Cloud Firestore API

    Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.listen_response import ListenResponse

class TestListenResponse(unittest.TestCase):
    """ListenResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListenResponse:
        """Test ListenResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListenResponse`
        """
        model = ListenResponse()
        if include_optional:
            return ListenResponse(
                document_change = openapi_client.models.document_change.DocumentChange(
                    document = openapi_client.models.document.Document(
                        create_time = '', 
                        fields = {
                            'key' : openapi_client.models.value.Value(
                                array_value = openapi_client.models.array_value.ArrayValue(
                                    values = [
                                        openapi_client.models.value.Value(
                                            boolean_value = True, 
                                            bytes_value = 'YQ==', 
                                            double_value = 1.337, 
                                            geo_point_value = openapi_client.models.lat_lng.LatLng(
                                                latitude = 1.337, 
                                                longitude = 1.337, ), 
                                            integer_value = '', 
                                            map_value = openapi_client.models.map_value.MapValue(), 
                                            null_value = 'NULL_VALUE', 
                                            reference_value = '', 
                                            string_value = '', 
                                            timestamp_value = '', )
                                        ], ), 
                                boolean_value = True, 
                                bytes_value = 'YQ==', 
                                double_value = 1.337, 
                                geo_point_value = openapi_client.models.lat_lng.LatLng(
                                    latitude = 1.337, 
                                    longitude = 1.337, ), 
                                integer_value = '', 
                                map_value = openapi_client.models.map_value.MapValue(), 
                                null_value = 'NULL_VALUE', 
                                reference_value = '', 
                                string_value = '', 
                                timestamp_value = '', )
                            }, 
                        name = '', 
                        update_time = '', ), 
                    removed_target_ids = [
                        56
                        ], 
                    target_ids = [
                        56
                        ], ),
                document_delete = openapi_client.models.document_delete.DocumentDelete(
                    document = '', 
                    read_time = '', 
                    removed_target_ids = [
                        56
                        ], ),
                document_remove = openapi_client.models.document_remove.DocumentRemove(
                    document = '', 
                    read_time = '', 
                    removed_target_ids = [
                        56
                        ], ),
                filter = openapi_client.models.existence_filter.ExistenceFilter(
                    count = 56, 
                    target_id = 56, 
                    unchanged_names = openapi_client.models.bloom_filter.BloomFilter(
                        bits = openapi_client.models.bit_sequence.BitSequence(
                            bitmap = 'YQ==', 
                            padding = 56, ), 
                        hash_count = 56, ), ),
                target_change = openapi_client.models.target_change.TargetChange(
                    cause = openapi_client.models.status.Status(
                        code = 56, 
                        details = [
                            {
                                'key' : null
                                }
                            ], 
                        message = '', ), 
                    read_time = '', 
                    resume_token = 'YQ==', 
                    target_change_type = 'NO_CHANGE', 
                    target_ids = [
                        56
                        ], )
            )
        else:
            return ListenResponse(
        )
        """

    def testListenResponse(self):
        """Test ListenResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

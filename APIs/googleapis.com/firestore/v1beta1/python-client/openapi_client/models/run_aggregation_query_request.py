# coding: utf-8

"""
    Cloud Firestore API

    Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.structured_aggregation_query import StructuredAggregationQuery
from openapi_client.models.transaction_options import TransactionOptions
from typing import Optional, Set
from typing_extensions import Self

class RunAggregationQueryRequest(BaseModel):
    """
    The request for Firestore.RunAggregationQuery.
    """ # noqa: E501
    new_transaction: Optional[TransactionOptions] = Field(default=None, alias="newTransaction")
    read_time: Optional[StrictStr] = Field(default=None, description="Executes the query at the given timestamp. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.", alias="readTime")
    structured_aggregation_query: Optional[StructuredAggregationQuery] = Field(default=None, alias="structuredAggregationQuery")
    transaction: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Run the aggregation within an already active transaction. The value here is the opaque transaction ID to execute the query in.")
    __properties: ClassVar[List[str]] = ["newTransaction", "readTime", "structuredAggregationQuery", "transaction"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunAggregationQueryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of new_transaction
        if self.new_transaction:
            _dict['newTransaction'] = self.new_transaction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of structured_aggregation_query
        if self.structured_aggregation_query:
            _dict['structuredAggregationQuery'] = self.structured_aggregation_query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunAggregationQueryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "newTransaction": TransactionOptions.from_dict(obj["newTransaction"]) if obj.get("newTransaction") is not None else None,
            "readTime": obj.get("readTime"),
            "structuredAggregationQuery": StructuredAggregationQuery.from_dict(obj["structuredAggregationQuery"]) if obj.get("structuredAggregationQuery") is not None else None,
            "transaction": obj.get("transaction")
        })
        return _obj



# coding: utf-8

"""
    Cloud Firestore API

    Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.document_change import DocumentChange
from openapi_client.models.document_delete import DocumentDelete
from openapi_client.models.document_remove import DocumentRemove
from openapi_client.models.existence_filter import ExistenceFilter
from openapi_client.models.target_change import TargetChange
from typing import Optional, Set
from typing_extensions import Self

class ListenResponse(BaseModel):
    """
    The response for Firestore.Listen.
    """ # noqa: E501
    document_change: Optional[DocumentChange] = Field(default=None, alias="documentChange")
    document_delete: Optional[DocumentDelete] = Field(default=None, alias="documentDelete")
    document_remove: Optional[DocumentRemove] = Field(default=None, alias="documentRemove")
    filter: Optional[ExistenceFilter] = None
    target_change: Optional[TargetChange] = Field(default=None, alias="targetChange")
    __properties: ClassVar[List[str]] = ["documentChange", "documentDelete", "documentRemove", "filter", "targetChange"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListenResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of document_change
        if self.document_change:
            _dict['documentChange'] = self.document_change.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_delete
        if self.document_delete:
            _dict['documentDelete'] = self.document_delete.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_remove
        if self.document_remove:
            _dict['documentRemove'] = self.document_remove.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_change
        if self.target_change:
            _dict['targetChange'] = self.target_change.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListenResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "documentChange": DocumentChange.from_dict(obj["documentChange"]) if obj.get("documentChange") is not None else None,
            "documentDelete": DocumentDelete.from_dict(obj["documentDelete"]) if obj.get("documentDelete") is not None else None,
            "documentRemove": DocumentRemove.from_dict(obj["documentRemove"]) if obj.get("documentRemove") is not None else None,
            "filter": ExistenceFilter.from_dict(obj["filter"]) if obj.get("filter") is not None else None,
            "targetChange": TargetChange.from_dict(obj["targetChange"]) if obj.get("targetChange") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Firestore API

    Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_firestore_admin_v1beta2_index_config_delta import GoogleFirestoreAdminV1beta2IndexConfigDelta
from openapi_client.models.google_firestore_admin_v1beta2_progress import GoogleFirestoreAdminV1beta2Progress
from typing import Optional, Set
from typing_extensions import Self

class GoogleFirestoreAdminV1beta2FieldOperationMetadata(BaseModel):
    """
    Metadata for google.longrunning.Operation results from FirestoreAdmin.UpdateField.
    """ # noqa: E501
    bytes_progress: Optional[GoogleFirestoreAdminV1beta2Progress] = Field(default=None, alias="bytesProgress")
    document_progress: Optional[GoogleFirestoreAdminV1beta2Progress] = Field(default=None, alias="documentProgress")
    end_time: Optional[StrictStr] = Field(default=None, description="The time this operation completed. Will be unset if operation still in progress.", alias="endTime")
    var_field: Optional[StrictStr] = Field(default=None, description="The field resource that this operation is acting on. For example: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`", alias="field")
    index_config_deltas: Optional[List[GoogleFirestoreAdminV1beta2IndexConfigDelta]] = Field(default=None, description="A list of IndexConfigDelta, which describe the intent of this operation.", alias="indexConfigDeltas")
    start_time: Optional[StrictStr] = Field(default=None, description="The time this operation started.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="The state of the operation.")
    __properties: ClassVar[List[str]] = ["bytesProgress", "documentProgress", "endTime", "field", "indexConfigDeltas", "startTime", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OPERATION_STATE_UNSPECIFIED', 'INITIALIZING', 'PROCESSING', 'CANCELLING', 'FINALIZING', 'SUCCESSFUL', 'FAILED', 'CANCELLED']):
            raise ValueError("must be one of enum values ('OPERATION_STATE_UNSPECIFIED', 'INITIALIZING', 'PROCESSING', 'CANCELLING', 'FINALIZING', 'SUCCESSFUL', 'FAILED', 'CANCELLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFirestoreAdminV1beta2FieldOperationMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bytes_progress
        if self.bytes_progress:
            _dict['bytesProgress'] = self.bytes_progress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_progress
        if self.document_progress:
            _dict['documentProgress'] = self.document_progress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in index_config_deltas (list)
        _items = []
        if self.index_config_deltas:
            for _item_index_config_deltas in self.index_config_deltas:
                if _item_index_config_deltas:
                    _items.append(_item_index_config_deltas.to_dict())
            _dict['indexConfigDeltas'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFirestoreAdminV1beta2FieldOperationMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bytesProgress": GoogleFirestoreAdminV1beta2Progress.from_dict(obj["bytesProgress"]) if obj.get("bytesProgress") is not None else None,
            "documentProgress": GoogleFirestoreAdminV1beta2Progress.from_dict(obj["documentProgress"]) if obj.get("documentProgress") is not None else None,
            "endTime": obj.get("endTime"),
            "field": obj.get("field"),
            "indexConfigDeltas": [GoogleFirestoreAdminV1beta2IndexConfigDelta.from_dict(_item) for _item in obj["indexConfigDeltas"]] if obj.get("indexConfigDeltas") is not None else None,
            "startTime": obj.get("startTime"),
            "state": obj.get("state")
        })
        return _obj



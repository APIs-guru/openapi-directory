# coding: utf-8

"""
    Cloud Firestore API

    Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_firestore_admin_v1beta2_index_field import GoogleFirestoreAdminV1beta2IndexField
from typing import Optional, Set
from typing_extensions import Self

class GoogleFirestoreAdminV1beta2Index(BaseModel):
    """
    Cloud Firestore indexes enable simple and complex queries against documents in a database.
    """ # noqa: E501
    fields: Optional[List[GoogleFirestoreAdminV1beta2IndexField]] = Field(default=None, description="The fields supported by this index. For composite indexes, this is always 2 or more fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty.")
    query_scope: Optional[StrictStr] = Field(default=None, description="Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.", alias="queryScope")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The serving state of the index.")
    __properties: ClassVar[List[str]] = ["fields", "name", "queryScope", "state"]

    @field_validator('query_scope')
    def query_scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['QUERY_SCOPE_UNSPECIFIED', 'COLLECTION', 'COLLECTION_GROUP']):
            raise ValueError("must be one of enum values ('QUERY_SCOPE_UNSPECIFIED', 'COLLECTION', 'COLLECTION_GROUP')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'READY', 'NEEDS_REPAIR']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'READY', 'NEEDS_REPAIR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFirestoreAdminV1beta2Index from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item_fields in self.fields:
                if _item_fields:
                    _items.append(_item_fields.to_dict())
            _dict['fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFirestoreAdminV1beta2Index from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fields": [GoogleFirestoreAdminV1beta2IndexField.from_dict(_item) for _item in obj["fields"]] if obj.get("fields") is not None else None,
            "name": obj.get("name"),
            "queryScope": obj.get("queryScope"),
            "state": obj.get("state")
        })
        return _obj



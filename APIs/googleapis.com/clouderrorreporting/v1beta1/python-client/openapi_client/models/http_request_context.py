# coding: utf-8

"""
    Error Reporting API

    Groups and counts similar errors from cloud services and applications, reports new errors, and provides access to error groups and their associated errors. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HttpRequestContext(BaseModel):
    """
    HTTP request data that is related to a reported error. This data should be provided by the application when reporting an error, unless the error report has been generated automatically from Google App Engine logs.
    """ # noqa: E501
    method: Optional[StrictStr] = Field(default=None, description="The type of HTTP request, such as `GET`, `POST`, etc.")
    referrer: Optional[StrictStr] = Field(default=None, description="The referrer information that is provided with the request.")
    remote_ip: Optional[StrictStr] = Field(default=None, description="The IP address from which the request originated. This can be IPv4, IPv6, or a token which is derived from the IP address, depending on the data that has been provided in the error report.", alias="remoteIp")
    response_status_code: Optional[StrictInt] = Field(default=None, description="The HTTP response status code for the request.", alias="responseStatusCode")
    url: Optional[StrictStr] = Field(default=None, description="The URL of the request.")
    user_agent: Optional[StrictStr] = Field(default=None, description="The user agent information that is provided with the request.", alias="userAgent")
    __properties: ClassVar[List[str]] = ["method", "referrer", "remoteIp", "responseStatusCode", "url", "userAgent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HttpRequestContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HttpRequestContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "method": obj.get("method"),
            "referrer": obj.get("referrer"),
            "remoteIp": obj.get("remoteIp"),
            "responseStatusCode": obj.get("responseStatusCode"),
            "url": obj.get("url"),
            "userAgent": obj.get("userAgent")
        })
        return _obj



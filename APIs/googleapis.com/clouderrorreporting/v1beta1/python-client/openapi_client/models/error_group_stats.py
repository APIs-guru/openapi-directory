# coding: utf-8

"""
    Error Reporting API

    Groups and counts similar errors from cloud services and applications, reports new errors, and provides access to error groups and their associated errors. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error_event import ErrorEvent
from openapi_client.models.error_group import ErrorGroup
from openapi_client.models.service_context import ServiceContext
from openapi_client.models.timed_count import TimedCount
from typing import Optional, Set
from typing_extensions import Self

class ErrorGroupStats(BaseModel):
    """
    Data extracted for a specific group based on certain filter criteria, such as a given time period and/or service filter.
    """ # noqa: E501
    affected_services: Optional[List[ServiceContext]] = Field(default=None, description="Service contexts with a non-zero error count for the given filter criteria. This list can be truncated if multiple services are affected. Refer to `num_affected_services` for the total count.", alias="affectedServices")
    affected_users_count: Optional[StrictStr] = Field(default=None, description="Approximate number of affected users in the given group that match the filter criteria. Users are distinguished by data in the ErrorContext of the individual error events, such as their login name or their remote IP address in case of HTTP requests. The number of affected users can be zero even if the number of errors is non-zero if no data was provided from which the affected user could be deduced. Users are counted based on data in the request context that was provided in the error report. If more users are implicitly affected, such as due to a crash of the whole service, this is not reflected here.", alias="affectedUsersCount")
    count: Optional[StrictStr] = Field(default=None, description="Approximate total number of events in the given group that match the filter criteria.")
    first_seen_time: Optional[StrictStr] = Field(default=None, description="Approximate first occurrence that was ever seen for this group and which matches the given filter criteria, ignoring the time_range that was specified in the request.", alias="firstSeenTime")
    group: Optional[ErrorGroup] = None
    last_seen_time: Optional[StrictStr] = Field(default=None, description="Approximate last occurrence that was ever seen for this group and which matches the given filter criteria, ignoring the time_range that was specified in the request.", alias="lastSeenTime")
    num_affected_services: Optional[StrictInt] = Field(default=None, description="The total number of services with a non-zero error count for the given filter criteria.", alias="numAffectedServices")
    representative: Optional[ErrorEvent] = None
    timed_counts: Optional[List[TimedCount]] = Field(default=None, description="Approximate number of occurrences over time. Timed counts returned by ListGroups are guaranteed to be: - Inside the requested time interval - Non-overlapping, and - Ordered by ascending time.", alias="timedCounts")
    __properties: ClassVar[List[str]] = ["affectedServices", "affectedUsersCount", "count", "firstSeenTime", "group", "lastSeenTime", "numAffectedServices", "representative", "timedCounts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ErrorGroupStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in affected_services (list)
        _items = []
        if self.affected_services:
            for _item_affected_services in self.affected_services:
                if _item_affected_services:
                    _items.append(_item_affected_services.to_dict())
            _dict['affectedServices'] = _items
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group:
            _dict['group'] = self.group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of representative
        if self.representative:
            _dict['representative'] = self.representative.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in timed_counts (list)
        _items = []
        if self.timed_counts:
            for _item_timed_counts in self.timed_counts:
                if _item_timed_counts:
                    _items.append(_item_timed_counts.to_dict())
            _dict['timedCounts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ErrorGroupStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affectedServices": [ServiceContext.from_dict(_item) for _item in obj["affectedServices"]] if obj.get("affectedServices") is not None else None,
            "affectedUsersCount": obj.get("affectedUsersCount"),
            "count": obj.get("count"),
            "firstSeenTime": obj.get("firstSeenTime"),
            "group": ErrorGroup.from_dict(obj["group"]) if obj.get("group") is not None else None,
            "lastSeenTime": obj.get("lastSeenTime"),
            "numAffectedServices": obj.get("numAffectedServices"),
            "representative": ErrorEvent.from_dict(obj["representative"]) if obj.get("representative") is not None else None,
            "timedCounts": [TimedCount.from_dict(_item) for _item in obj["timedCounts"]] if obj.get("timedCounts") is not None else None
        })
        return _obj



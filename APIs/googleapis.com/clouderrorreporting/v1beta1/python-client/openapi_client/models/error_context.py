# coding: utf-8

"""
    Error Reporting API

    Groups and counts similar errors from cloud services and applications, reports new errors, and provides access to error groups and their associated errors. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.http_request_context import HttpRequestContext
from openapi_client.models.source_location import SourceLocation
from openapi_client.models.source_reference import SourceReference
from typing import Optional, Set
from typing_extensions import Self

class ErrorContext(BaseModel):
    """
    A description of the context in which an error occurred. This data should be provided by the application when reporting an error, unless the error report has been generated automatically from Google App Engine logs.
    """ # noqa: E501
    http_request: Optional[HttpRequestContext] = Field(default=None, alias="httpRequest")
    report_location: Optional[SourceLocation] = Field(default=None, alias="reportLocation")
    source_references: Optional[List[SourceReference]] = Field(default=None, description="Source code that was used to build the executable which has caused the given error message.", alias="sourceReferences")
    user: Optional[StrictStr] = Field(default=None, description="The user who caused or was affected by the crash. This can be a user ID, an email address, or an arbitrary token that uniquely identifies the user. When sending an error report, leave this field empty if the user was not logged in. In this case the Error Reporting system will use other data, such as remote IP address, to distinguish affected users. See `affected_users_count` in `ErrorGroupStats`.")
    __properties: ClassVar[List[str]] = ["httpRequest", "reportLocation", "sourceReferences", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ErrorContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of http_request
        if self.http_request:
            _dict['httpRequest'] = self.http_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of report_location
        if self.report_location:
            _dict['reportLocation'] = self.report_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in source_references (list)
        _items = []
        if self.source_references:
            for _item_source_references in self.source_references:
                if _item_source_references:
                    _items.append(_item_source_references.to_dict())
            _dict['sourceReferences'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ErrorContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "httpRequest": HttpRequestContext.from_dict(obj["httpRequest"]) if obj.get("httpRequest") is not None else None,
            "reportLocation": SourceLocation.from_dict(obj["reportLocation"]) if obj.get("reportLocation") is not None else None,
            "sourceReferences": [SourceReference.from_dict(_item) for _item in obj["sourceReferences"]] if obj.get("sourceReferences") is not None else None,
            "user": obj.get("user")
        })
        return _obj



# coding: utf-8

"""
    Error Reporting API

    Groups and counts similar errors from cloud services and applications, reports new errors, and provides access to error groups and their associated errors. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.tracking_issue import TrackingIssue
from typing import Optional, Set
from typing_extensions import Self

class ErrorGroup(BaseModel):
    """
    Description of a group of similar error events.
    """ # noqa: E501
    group_id: Optional[StrictStr] = Field(default=None, description="An opaque identifier of the group. This field is assigned by the Error Reporting system and always populated. In the group resource name, the `group_id` is a unique identifier for a particular error group. The identifier is derived from key parts of the error-log content and is treated as Service Data. For information about how Service Data is handled, see [Google Cloud Privacy Notice](https://cloud.google.com/terms/cloud-privacy-notice).", alias="groupId")
    name: Optional[StrictStr] = Field(default=None, description="The group resource name. Written as `projects/{projectID}/groups/{group_id}`. Example: `projects/my-project-123/groups/my-group` In the group resource name, the `group_id` is a unique identifier for a particular error group. The identifier is derived from key parts of the error-log content and is treated as Service Data. For information about how Service Data is handled, see [Google Cloud Privacy Notice](https://cloud.google.com/terms/cloud-privacy-notice).")
    resolution_status: Optional[StrictStr] = Field(default=None, description="Error group's resolution status. An unspecified resolution status will be interpreted as OPEN", alias="resolutionStatus")
    tracking_issues: Optional[List[TrackingIssue]] = Field(default=None, description="Associated tracking issues.", alias="trackingIssues")
    __properties: ClassVar[List[str]] = ["groupId", "name", "resolutionStatus", "trackingIssues"]

    @field_validator('resolution_status')
    def resolution_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESOLUTION_STATUS_UNSPECIFIED', 'OPEN', 'ACKNOWLEDGED', 'RESOLVED', 'MUTED']):
            raise ValueError("must be one of enum values ('RESOLUTION_STATUS_UNSPECIFIED', 'OPEN', 'ACKNOWLEDGED', 'RESOLVED', 'MUTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ErrorGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tracking_issues (list)
        _items = []
        if self.tracking_issues:
            for _item_tracking_issues in self.tracking_issues:
                if _item_tracking_issues:
                    _items.append(_item_tracking_issues.to_dict())
            _dict['trackingIssues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ErrorGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "groupId": obj.get("groupId"),
            "name": obj.get("name"),
            "resolutionStatus": obj.get("resolutionStatus"),
            "trackingIssues": [TrackingIssue.from_dict(_item) for _item in obj["trackingIssues"]] if obj.get("trackingIssues") is not None else None
        })
        return _obj



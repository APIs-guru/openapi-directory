# coding: utf-8

"""
    Error Reporting API

    Groups and counts similar errors from cloud services and applications, reports new errors, and provides access to error groups and their associated errors. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error_context import ErrorContext
from openapi_client.models.service_context import ServiceContext
from typing import Optional, Set
from typing_extensions import Self

class ErrorEvent(BaseModel):
    """
    An error event which is returned by the Error Reporting system.
    """ # noqa: E501
    context: Optional[ErrorContext] = None
    event_time: Optional[StrictStr] = Field(default=None, description="Time when the event occurred as provided in the error report. If the report did not contain a timestamp, the time the error was received by the Error Reporting system is used.", alias="eventTime")
    message: Optional[StrictStr] = Field(default=None, description="The stack trace that was reported or logged by the service.")
    service_context: Optional[ServiceContext] = Field(default=None, alias="serviceContext")
    __properties: ClassVar[List[str]] = ["context", "eventTime", "message", "serviceContext"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ErrorEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_context
        if self.service_context:
            _dict['serviceContext'] = self.service_context.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ErrorEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "context": ErrorContext.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "eventTime": obj.get("eventTime"),
            "message": obj.get("message"),
            "serviceContext": ServiceContext.from_dict(obj["serviceContext"]) if obj.get("serviceContext") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Error Reporting API

    Groups and counts similar errors from cloud services and applications, reports new errors, and provides access to error groups and their associated errors. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error_event import ErrorEvent
from typing import Optional, Set
from typing_extensions import Self

class ListEventsResponse(BaseModel):
    """
    Contains a set of requested error events.
    """ # noqa: E501
    error_events: Optional[List[ErrorEvent]] = Field(default=None, description="The error events which match the given request.", alias="errorEvents")
    next_page_token: Optional[StrictStr] = Field(default=None, description="If non-empty, more results are available. Pass this token, along with the same query parameters as the first request, to view the next page of results.", alias="nextPageToken")
    time_range_begin: Optional[StrictStr] = Field(default=None, description="The timestamp specifies the start time to which the request was restricted.", alias="timeRangeBegin")
    __properties: ClassVar[List[str]] = ["errorEvents", "nextPageToken", "timeRangeBegin"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListEventsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in error_events (list)
        _items = []
        if self.error_events:
            for _item_error_events in self.error_events:
                if _item_error_events:
                    _items.append(_item_error_events.to_dict())
            _dict['errorEvents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListEventsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorEvents": [ErrorEvent.from_dict(_item) for _item in obj["errorEvents"]] if obj.get("errorEvents") is not None else None,
            "nextPageToken": obj.get("nextPageToken"),
            "timeRangeBegin": obj.get("timeRangeBegin")
        })
        return _obj



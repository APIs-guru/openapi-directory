# coding: utf-8

"""
    Error Reporting API

    Groups and counts similar errors from cloud services and applications, reports new errors, and provides access to error groups and their associated errors. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.error_group_stats import ErrorGroupStats

class TestErrorGroupStats(unittest.TestCase):
    """ErrorGroupStats unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ErrorGroupStats:
        """Test ErrorGroupStats
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ErrorGroupStats`
        """
        model = ErrorGroupStats()
        if include_optional:
            return ErrorGroupStats(
                affected_services = [
                    openapi_client.models.service_context.ServiceContext(
                        resource_type = '', 
                        service = '', 
                        version = '', )
                    ],
                affected_users_count = '',
                count = '',
                first_seen_time = '',
                group = openapi_client.models.error_group.ErrorGroup(
                    group_id = '', 
                    name = '', 
                    resolution_status = 'RESOLUTION_STATUS_UNSPECIFIED', 
                    tracking_issues = [
                        openapi_client.models.tracking_issue.TrackingIssue(
                            url = '', )
                        ], ),
                last_seen_time = '',
                num_affected_services = 56,
                representative = openapi_client.models.error_event.ErrorEvent(
                    context = openapi_client.models.error_context.ErrorContext(
                        http_request = openapi_client.models.http_request_context.HttpRequestContext(
                            method = '', 
                            referrer = '', 
                            remote_ip = '', 
                            response_status_code = 56, 
                            url = '', 
                            user_agent = '', ), 
                        report_location = openapi_client.models.source_location.SourceLocation(
                            file_path = '', 
                            function_name = '', 
                            line_number = 56, ), 
                        source_references = [
                            openapi_client.models.source_reference.SourceReference(
                                repository = '', 
                                revision_id = '', )
                            ], 
                        user = '', ), 
                    event_time = '', 
                    message = '', 
                    service_context = openapi_client.models.service_context.ServiceContext(
                        resource_type = '', 
                        service = '', 
                        version = '', ), ),
                timed_counts = [
                    openapi_client.models.timed_count.TimedCount(
                        count = '', 
                        end_time = '', 
                        start_time = '', )
                    ]
            )
        else:
            return ErrorGroupStats(
        )
        """

    def testErrorGroupStats(self):
        """Test ErrorGroupStats"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

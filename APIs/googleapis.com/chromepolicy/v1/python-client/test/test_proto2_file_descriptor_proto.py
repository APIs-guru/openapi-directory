# coding: utf-8

"""
    Chrome Policy API

    The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.proto2_file_descriptor_proto import Proto2FileDescriptorProto

class TestProto2FileDescriptorProto(unittest.TestCase):
    """Proto2FileDescriptorProto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Proto2FileDescriptorProto:
        """Test Proto2FileDescriptorProto
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Proto2FileDescriptorProto`
        """
        model = Proto2FileDescriptorProto()
        if include_optional:
            return Proto2FileDescriptorProto(
                edition_deprecated = '',
                enum_type = [
                    openapi_client.models.proto2_enum_descriptor_proto.Proto2EnumDescriptorProto(
                        name = '', 
                        value = [
                            openapi_client.models.proto2_enum_value_descriptor_proto.Proto2EnumValueDescriptorProto(
                                name = '', 
                                number = 56, )
                            ], )
                    ],
                message_type = [
                    openapi_client.models.proto2_descriptor_proto.Proto2DescriptorProto(
                        enum_type = [
                            openapi_client.models.proto2_enum_descriptor_proto.Proto2EnumDescriptorProto(
                                name = '', 
                                value = [
                                    openapi_client.models.proto2_enum_value_descriptor_proto.Proto2EnumValueDescriptorProto(
                                        name = '', 
                                        number = 56, )
                                    ], )
                            ], 
                        field = [
                            openapi_client.models.proto2_field_descriptor_proto.Proto2FieldDescriptorProto(
                                default_value = '', 
                                json_name = '', 
                                label = 'LABEL_OPTIONAL', 
                                name = '', 
                                number = 56, 
                                oneof_index = 56, 
                                proto3_optional = True, 
                                type = 'TYPE_DOUBLE', 
                                type_name = '', )
                            ], 
                        name = '', 
                        nested_type = [
                            openapi_client.models.proto2_descriptor_proto.Proto2DescriptorProto(
                                name = '', 
                                oneof_decl = [
                                    openapi_client.models.proto2_oneof_descriptor_proto.Proto2OneofDescriptorProto(
                                        name = '', )
                                    ], )
                            ], 
                        oneof_decl = [
                            openapi_client.models.proto2_oneof_descriptor_proto.Proto2OneofDescriptorProto(
                                name = '', )
                            ], )
                    ],
                name = '',
                package = '',
                syntax = ''
            )
        else:
            return Proto2FileDescriptorProto(
        )
        """

    def testProto2FileDescriptorProto(self):
        """Test Proto2FileDescriptorProto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

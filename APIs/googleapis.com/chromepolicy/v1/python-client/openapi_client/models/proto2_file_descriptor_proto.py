# coding: utf-8

"""
    Chrome Policy API

    The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.proto2_descriptor_proto import Proto2DescriptorProto
from openapi_client.models.proto2_enum_descriptor_proto import Proto2EnumDescriptorProto
from typing import Optional, Set
from typing_extensions import Self

class Proto2FileDescriptorProto(BaseModel):
    """
    Describes a complete .proto file.
    """ # noqa: E501
    edition_deprecated: Optional[StrictStr] = Field(default=None, description="BEGIN GOOGLE-INTERNAL TODO(b/297898292) Deprecate and remove this field in favor of enums. END GOOGLE-INTERNAL", alias="editionDeprecated")
    enum_type: Optional[List[Proto2EnumDescriptorProto]] = Field(default=None, alias="enumType")
    message_type: Optional[List[Proto2DescriptorProto]] = Field(default=None, description="All top-level definitions in this file.", alias="messageType")
    name: Optional[StrictStr] = Field(default=None, description="file name, relative to root of source tree")
    package: Optional[StrictStr] = Field(default=None, description="e.g. \"foo\", \"foo.bar\", etc.")
    syntax: Optional[StrictStr] = Field(default=None, description="The syntax of the proto file. The supported values are \"proto2\", \"proto3\", and \"editions\". If `edition` is present, this value must be \"editions\".")
    __properties: ClassVar[List[str]] = ["editionDeprecated", "enumType", "messageType", "name", "package", "syntax"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Proto2FileDescriptorProto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in enum_type (list)
        _items = []
        if self.enum_type:
            for _item_enum_type in self.enum_type:
                if _item_enum_type:
                    _items.append(_item_enum_type.to_dict())
            _dict['enumType'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in message_type (list)
        _items = []
        if self.message_type:
            for _item_message_type in self.message_type:
                if _item_message_type:
                    _items.append(_item_message_type.to_dict())
            _dict['messageType'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Proto2FileDescriptorProto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "editionDeprecated": obj.get("editionDeprecated"),
            "enumType": [Proto2EnumDescriptorProto.from_dict(_item) for _item in obj["enumType"]] if obj.get("enumType") is not None else None,
            "messageType": [Proto2DescriptorProto.from_dict(_item) for _item in obj["messageType"]] if obj.get("messageType") is not None else None,
            "name": obj.get("name"),
            "package": obj.get("package"),
            "syntax": obj.get("syntax")
        })
        return _obj



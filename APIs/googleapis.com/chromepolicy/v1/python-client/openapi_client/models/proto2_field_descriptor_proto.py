# coding: utf-8

"""
    Chrome Policy API

    The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Proto2FieldDescriptorProto(BaseModel):
    """
    Describes a field within a message.
    """ # noqa: E501
    default_value: Optional[StrictStr] = Field(default=None, description="For numeric types, contains the original text representation of the value. For booleans, \"true\" or \"false\". For strings, contains the default text contents (not escaped in any way). For bytes, contains the C escaped value. All bytes >= 128 are escaped.", alias="defaultValue")
    json_name: Optional[StrictStr] = Field(default=None, description="JSON name of this field. The value is set by protocol compiler. If the user has set a \"json_name\" option on this field, that option's value will be used. Otherwise, it's deduced from the field's name by converting it to camelCase.", alias="jsonName")
    label: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    number: Optional[StrictInt] = None
    oneof_index: Optional[StrictInt] = Field(default=None, description="If set, gives the index of a oneof in the containing type's oneof_decl list. This field is a member of that oneof.", alias="oneofIndex")
    proto3_optional: Optional[StrictBool] = Field(default=None, description="If true, this is a proto3 \"optional\". When a proto3 field is optional, it tracks presence regardless of field type. When proto3_optional is true, this field must belong to a oneof to signal to old proto3 clients that presence is tracked for this field. This oneof is known as a \"synthetic\" oneof, and this field must be its sole member (each proto3 optional field gets its own synthetic oneof). Synthetic oneofs exist in the descriptor only, and do not generate any API. Synthetic oneofs must be ordered after all \"real\" oneofs. For message fields, proto3_optional doesn't create any semantic change, since non-repeated message fields always track presence. However it still indicates the semantic detail of whether the user wrote \"optional\" or not. This can be useful for round-tripping the .proto file. For consistency we give message fields a synthetic oneof also, even though it is not required to track presence. This is especially important because the parser can't tell if a field is a message or an enum, so it must always create a synthetic oneof. Proto2 optional fields do not set this flag, because they already indicate optional with `LABEL_OPTIONAL`.", alias="proto3Optional")
    type: Optional[StrictStr] = Field(default=None, description="If type_name is set, this need not be set. If both this and type_name are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.")
    type_name: Optional[StrictStr] = Field(default=None, description="For message and enum types, this is the name of the type. If the name starts with a '.', it is fully-qualified. Otherwise, C++-like scoping rules are used to find the type (i.e. first the nested types within this message are searched, then within the parent, on up to the root namespace).", alias="typeName")
    __properties: ClassVar[List[str]] = ["defaultValue", "jsonName", "label", "name", "number", "oneofIndex", "proto3Optional", "type", "typeName"]

    @field_validator('label')
    def label_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LABEL_OPTIONAL', 'LABEL_REPEATED', 'LABEL_REQUIRED']):
            raise ValueError("must be one of enum values ('LABEL_OPTIONAL', 'LABEL_REPEATED', 'LABEL_REQUIRED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_DOUBLE', 'TYPE_FLOAT', 'TYPE_INT64', 'TYPE_UINT64', 'TYPE_INT32', 'TYPE_FIXED64', 'TYPE_FIXED32', 'TYPE_BOOL', 'TYPE_STRING', 'TYPE_GROUP', 'TYPE_MESSAGE', 'TYPE_BYTES', 'TYPE_UINT32', 'TYPE_ENUM', 'TYPE_SFIXED32', 'TYPE_SFIXED64', 'TYPE_SINT32', 'TYPE_SINT64']):
            raise ValueError("must be one of enum values ('TYPE_DOUBLE', 'TYPE_FLOAT', 'TYPE_INT64', 'TYPE_UINT64', 'TYPE_INT32', 'TYPE_FIXED64', 'TYPE_FIXED32', 'TYPE_BOOL', 'TYPE_STRING', 'TYPE_GROUP', 'TYPE_MESSAGE', 'TYPE_BYTES', 'TYPE_UINT32', 'TYPE_ENUM', 'TYPE_SFIXED32', 'TYPE_SFIXED64', 'TYPE_SINT32', 'TYPE_SINT64')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Proto2FieldDescriptorProto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Proto2FieldDescriptorProto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultValue": obj.get("defaultValue"),
            "jsonName": obj.get("jsonName"),
            "label": obj.get("label"),
            "name": obj.get("name"),
            "number": obj.get("number"),
            "oneofIndex": obj.get("oneofIndex"),
            "proto3Optional": obj.get("proto3Optional"),
            "type": obj.get("type"),
            "typeName": obj.get("typeName")
        })
        return _obj



# coding: utf-8

"""
    Chrome Policy API

    The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_chrome_policy_versions_v1_field_constraints import GoogleChromePolicyVersionsV1FieldConstraints
from openapi_client.models.google_chrome_policy_versions_v1_policy_schema_field_dependencies import GoogleChromePolicyVersionsV1PolicySchemaFieldDependencies
from openapi_client.models.google_chrome_policy_versions_v1_policy_schema_field_known_value_description import GoogleChromePolicyVersionsV1PolicySchemaFieldKnownValueDescription
from openapi_client.models.google_chrome_policy_versions_v1_policy_schema_required_items import GoogleChromePolicyVersionsV1PolicySchemaRequiredItems
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromePolicyVersionsV1PolicySchemaFieldDescription(BaseModel):
    """
    Provides detailed information for a particular field that is part of a PolicySchema.
    """ # noqa: E501
    default_value: Optional[Any] = Field(default=None, description="Output only. Client default if the policy is unset.", alias="defaultValue")
    description: Optional[StrictStr] = Field(default=None, description="Deprecated. Use name and field_description instead. The description for the field.")
    var_field: Optional[StrictStr] = Field(default=None, description="Output only. The name of the field for associated with this description.", alias="field")
    field_constraints: Optional[GoogleChromePolicyVersionsV1FieldConstraints] = Field(default=None, alias="fieldConstraints")
    field_dependencies: Optional[List[GoogleChromePolicyVersionsV1PolicySchemaFieldDependencies]] = Field(default=None, description="Output only. Provides a list of fields and values. At least one of the fields must have the corresponding value in order for this field to be allowed to be set.", alias="fieldDependencies")
    field_description: Optional[StrictStr] = Field(default=None, description="Output only. The description of the field.", alias="fieldDescription")
    input_constraint: Optional[StrictStr] = Field(default=None, description="Output only. Any input constraints associated on the values for the field.", alias="inputConstraint")
    known_value_descriptions: Optional[List[GoogleChromePolicyVersionsV1PolicySchemaFieldKnownValueDescription]] = Field(default=None, description="Output only. If the field has a set of known values, this field will provide a description for these values.", alias="knownValueDescriptions")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of the field.")
    nested_field_descriptions: Optional[List[GoogleChromePolicyVersionsV1PolicySchemaFieldDescription]] = Field(default=None, description="Output only. Provides the description of the fields nested in this field, if the field is a message type that defines multiple fields. Fields are suggested to be displayed by the ordering in this list, not by field number.", alias="nestedFieldDescriptions")
    required_items: Optional[List[GoogleChromePolicyVersionsV1PolicySchemaRequiredItems]] = Field(default=None, description="Output only. Provides a list of fields that are required to be set if this field has a certain value.", alias="requiredItems")
    __properties: ClassVar[List[str]] = ["defaultValue", "description", "field", "fieldConstraints", "fieldDependencies", "fieldDescription", "inputConstraint", "knownValueDescriptions", "name", "nestedFieldDescriptions", "requiredItems"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromePolicyVersionsV1PolicySchemaFieldDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "default_value",
            "var_field",
            "field_dependencies",
            "field_description",
            "input_constraint",
            "known_value_descriptions",
            "name",
            "nested_field_descriptions",
            "required_items",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of field_constraints
        if self.field_constraints:
            _dict['fieldConstraints'] = self.field_constraints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in field_dependencies (list)
        _items = []
        if self.field_dependencies:
            for _item_field_dependencies in self.field_dependencies:
                if _item_field_dependencies:
                    _items.append(_item_field_dependencies.to_dict())
            _dict['fieldDependencies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in known_value_descriptions (list)
        _items = []
        if self.known_value_descriptions:
            for _item_known_value_descriptions in self.known_value_descriptions:
                if _item_known_value_descriptions:
                    _items.append(_item_known_value_descriptions.to_dict())
            _dict['knownValueDescriptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nested_field_descriptions (list)
        _items = []
        if self.nested_field_descriptions:
            for _item_nested_field_descriptions in self.nested_field_descriptions:
                if _item_nested_field_descriptions:
                    _items.append(_item_nested_field_descriptions.to_dict())
            _dict['nestedFieldDescriptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in required_items (list)
        _items = []
        if self.required_items:
            for _item_required_items in self.required_items:
                if _item_required_items:
                    _items.append(_item_required_items.to_dict())
            _dict['requiredItems'] = _items
        # set to None if default_value (nullable) is None
        # and model_fields_set contains the field
        if self.default_value is None and "default_value" in self.model_fields_set:
            _dict['defaultValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromePolicyVersionsV1PolicySchemaFieldDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultValue": obj.get("defaultValue"),
            "description": obj.get("description"),
            "field": obj.get("field"),
            "fieldConstraints": GoogleChromePolicyVersionsV1FieldConstraints.from_dict(obj["fieldConstraints"]) if obj.get("fieldConstraints") is not None else None,
            "fieldDependencies": [GoogleChromePolicyVersionsV1PolicySchemaFieldDependencies.from_dict(_item) for _item in obj["fieldDependencies"]] if obj.get("fieldDependencies") is not None else None,
            "fieldDescription": obj.get("fieldDescription"),
            "inputConstraint": obj.get("inputConstraint"),
            "knownValueDescriptions": [GoogleChromePolicyVersionsV1PolicySchemaFieldKnownValueDescription.from_dict(_item) for _item in obj["knownValueDescriptions"]] if obj.get("knownValueDescriptions") is not None else None,
            "name": obj.get("name"),
            "nestedFieldDescriptions": [GoogleChromePolicyVersionsV1PolicySchemaFieldDescription.from_dict(_item) for _item in obj["nestedFieldDescriptions"]] if obj.get("nestedFieldDescriptions") is not None else None,
            "requiredItems": [GoogleChromePolicyVersionsV1PolicySchemaRequiredItems.from_dict(_item) for _item in obj["requiredItems"]] if obj.get("requiredItems") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
GoogleChromePolicyVersionsV1PolicySchemaFieldDescription.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    Chrome Policy API

    The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.proto2_enum_descriptor_proto import Proto2EnumDescriptorProto
from openapi_client.models.proto2_field_descriptor_proto import Proto2FieldDescriptorProto
from openapi_client.models.proto2_oneof_descriptor_proto import Proto2OneofDescriptorProto
from typing import Optional, Set
from typing_extensions import Self

class Proto2DescriptorProto(BaseModel):
    """
    Describes a message type.
    """ # noqa: E501
    enum_type: Optional[List[Proto2EnumDescriptorProto]] = Field(default=None, alias="enumType")
    var_field: Optional[List[Proto2FieldDescriptorProto]] = Field(default=None, alias="field")
    name: Optional[StrictStr] = None
    nested_type: Optional[List[Proto2DescriptorProto]] = Field(default=None, alias="nestedType")
    oneof_decl: Optional[List[Proto2OneofDescriptorProto]] = Field(default=None, alias="oneofDecl")
    __properties: ClassVar[List[str]] = ["enumType", "field", "name", "nestedType", "oneofDecl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Proto2DescriptorProto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in enum_type (list)
        _items = []
        if self.enum_type:
            for _item_enum_type in self.enum_type:
                if _item_enum_type:
                    _items.append(_item_enum_type.to_dict())
            _dict['enumType'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in var_field (list)
        _items = []
        if self.var_field:
            for _item_var_field in self.var_field:
                if _item_var_field:
                    _items.append(_item_var_field.to_dict())
            _dict['field'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nested_type (list)
        _items = []
        if self.nested_type:
            for _item_nested_type in self.nested_type:
                if _item_nested_type:
                    _items.append(_item_nested_type.to_dict())
            _dict['nestedType'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in oneof_decl (list)
        _items = []
        if self.oneof_decl:
            for _item_oneof_decl in self.oneof_decl:
                if _item_oneof_decl:
                    _items.append(_item_oneof_decl.to_dict())
            _dict['oneofDecl'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Proto2DescriptorProto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enumType": [Proto2EnumDescriptorProto.from_dict(_item) for _item in obj["enumType"]] if obj.get("enumType") is not None else None,
            "field": [Proto2FieldDescriptorProto.from_dict(_item) for _item in obj["field"]] if obj.get("field") is not None else None,
            "name": obj.get("name"),
            "nestedType": [Proto2DescriptorProto.from_dict(_item) for _item in obj["nestedType"]] if obj.get("nestedType") is not None else None,
            "oneofDecl": [Proto2OneofDescriptorProto.from_dict(_item) for _item in obj["oneofDecl"]] if obj.get("oneofDecl") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
Proto2DescriptorProto.model_rebuild(raise_errors=False)


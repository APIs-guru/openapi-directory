# coding: utf-8

"""
    Chrome Policy API

    The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_type_date import GoogleTypeDate
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromePolicyVersionsV1PolicyApiLifecycle(BaseModel):
    """
    Lifecycle information.
    """ # noqa: E501
    deprecated_in_favor_of: Optional[List[StrictStr]] = Field(default=None, description="In the event that this policy was deprecated in favor of another policy, the fully qualified namespace(s) of the new policies as they will show in PolicyAPI. Could only be set if policy_api_lifecycle_stage is API_DEPRECATED.", alias="deprecatedInFavorOf")
    description: Optional[StrictStr] = Field(default=None, description="Description about current life cycle.")
    end_support: Optional[GoogleTypeDate] = Field(default=None, alias="endSupport")
    policy_api_lifecycle_stage: Optional[StrictStr] = Field(default=None, description="Indicates current life cycle stage of the policy API.", alias="policyApiLifecycleStage")
    scheduled_to_deprecate_policies: Optional[List[StrictStr]] = Field(default=None, description="Corresponding to deprecated_in_favor_of, the fully qualified namespace(s) of the old policies that will be deprecated because of introduction of this policy. This field should not be manually set but will be set and exposed through PolicyAPI automatically.", alias="scheduledToDeprecatePolicies")
    __properties: ClassVar[List[str]] = ["deprecatedInFavorOf", "description", "endSupport", "policyApiLifecycleStage", "scheduledToDeprecatePolicies"]

    @field_validator('policy_api_lifecycle_stage')
    def policy_api_lifecycle_stage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['API_UNSPECIFIED', 'API_PREVIEW', 'API_DEVELOPMENT', 'API_CURRENT', 'API_DEPRECATED']):
            raise ValueError("must be one of enum values ('API_UNSPECIFIED', 'API_PREVIEW', 'API_DEVELOPMENT', 'API_CURRENT', 'API_DEPRECATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromePolicyVersionsV1PolicyApiLifecycle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of end_support
        if self.end_support:
            _dict['endSupport'] = self.end_support.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromePolicyVersionsV1PolicyApiLifecycle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deprecatedInFavorOf": obj.get("deprecatedInFavorOf"),
            "description": obj.get("description"),
            "endSupport": GoogleTypeDate.from_dict(obj["endSupport"]) if obj.get("endSupport") is not None else None,
            "policyApiLifecycleStage": obj.get("policyApiLifecycleStage"),
            "scheduledToDeprecatePolicies": obj.get("scheduledToDeprecatePolicies")
        })
        return _obj



# coding: utf-8

"""
    Chrome Policy API

    The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_chrome_policy_versions_v1_additional_target_key_name import GoogleChromePolicyVersionsV1AdditionalTargetKeyName
from openapi_client.models.google_chrome_policy_versions_v1_policy_api_lifecycle import GoogleChromePolicyVersionsV1PolicyApiLifecycle
from openapi_client.models.google_chrome_policy_versions_v1_policy_schema_field_description import GoogleChromePolicyVersionsV1PolicySchemaFieldDescription
from openapi_client.models.google_chrome_policy_versions_v1_policy_schema_notice_description import GoogleChromePolicyVersionsV1PolicySchemaNoticeDescription
from openapi_client.models.proto2_file_descriptor_proto import Proto2FileDescriptorProto
from typing import Optional, Set
from typing_extensions import Self

class GoogleChromePolicyVersionsV1PolicySchema(BaseModel):
    """
    Resource representing a policy schema.
    """ # noqa: E501
    access_restrictions: Optional[List[StrictStr]] = Field(default=None, description="Output only. Specific access restrictions related to this policy.", alias="accessRestrictions")
    additional_target_key_names: Optional[List[GoogleChromePolicyVersionsV1AdditionalTargetKeyName]] = Field(default=None, description="Output only. Additional key names that will be used to identify the target of the policy value. When specifying a `policyTargetKey`, each of the additional keys specified here will have to be included in the `additionalTargetKeys` map.", alias="additionalTargetKeyNames")
    category_title: Optional[StrictStr] = Field(default=None, description="Title of the category in which a setting belongs.", alias="categoryTitle")
    definition: Optional[Proto2FileDescriptorProto] = None
    field_descriptions: Optional[List[GoogleChromePolicyVersionsV1PolicySchemaFieldDescription]] = Field(default=None, description="Output only. Detailed description of each field that is part of the schema. Fields are suggested to be displayed by the ordering in this list, not by field number.", alias="fieldDescriptions")
    name: Optional[StrictStr] = Field(default=None, description="Format: name=customers/{customer}/policySchemas/{schema_namespace}")
    notices: Optional[List[GoogleChromePolicyVersionsV1PolicySchemaNoticeDescription]] = Field(default=None, description="Output only. Special notice messages related to setting certain values in certain fields in the schema.")
    policy_api_lifecycle: Optional[GoogleChromePolicyVersionsV1PolicyApiLifecycle] = Field(default=None, alias="policyApiLifecycle")
    policy_description: Optional[StrictStr] = Field(default=None, description="Output only. Description about the policy schema for user consumption.", alias="policyDescription")
    schema_name: Optional[StrictStr] = Field(default=None, description="Output only. The fully qualified name of the policy schema. This value is used to fill the field `policy_schema` in PolicyValue when calling BatchInheritOrgUnitPolicies BatchModifyOrgUnitPolicies BatchModifyGroupPolicies or BatchDeleteGroupPolicies.", alias="schemaName")
    support_uri: Optional[StrictStr] = Field(default=None, description="Output only. URI to related support article for this schema.", alias="supportUri")
    supported_platforms: Optional[List[StrictStr]] = Field(default=None, description="Output only. List indicates that the policy will only apply to devices/users on these platforms.", alias="supportedPlatforms")
    valid_target_resources: Optional[List[StrictStr]] = Field(default=None, description="Output only. Information about applicable target resources for the policy.", alias="validTargetResources")
    __properties: ClassVar[List[str]] = ["accessRestrictions", "additionalTargetKeyNames", "categoryTitle", "definition", "fieldDescriptions", "name", "notices", "policyApiLifecycle", "policyDescription", "schemaName", "supportUri", "supportedPlatforms", "validTargetResources"]

    @field_validator('supported_platforms')
    def supported_platforms_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['PLATFORM_UNSPECIFIED', 'CHROME_OS', 'CHROME_BROWSER', 'CHROME_BROWSER_FOR_ANDROID', 'CHROME_BROWSER_FOR_IOS']):
                raise ValueError("each list item must be one of ('PLATFORM_UNSPECIFIED', 'CHROME_OS', 'CHROME_BROWSER', 'CHROME_BROWSER_FOR_ANDROID', 'CHROME_BROWSER_FOR_IOS')")
        return value

    @field_validator('valid_target_resources')
    def valid_target_resources_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['TARGET_RESOURCE_UNSPECIFIED', 'ORG_UNIT', 'GROUP']):
                raise ValueError("each list item must be one of ('TARGET_RESOURCE_UNSPECIFIED', 'ORG_UNIT', 'GROUP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChromePolicyVersionsV1PolicySchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "access_restrictions",
            "additional_target_key_names",
            "field_descriptions",
            "notices",
            "policy_description",
            "schema_name",
            "support_uri",
            "supported_platforms",
            "valid_target_resources",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_target_key_names (list)
        _items = []
        if self.additional_target_key_names:
            for _item_additional_target_key_names in self.additional_target_key_names:
                if _item_additional_target_key_names:
                    _items.append(_item_additional_target_key_names.to_dict())
            _dict['additionalTargetKeyNames'] = _items
        # override the default output from pydantic by calling `to_dict()` of definition
        if self.definition:
            _dict['definition'] = self.definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in field_descriptions (list)
        _items = []
        if self.field_descriptions:
            for _item_field_descriptions in self.field_descriptions:
                if _item_field_descriptions:
                    _items.append(_item_field_descriptions.to_dict())
            _dict['fieldDescriptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in notices (list)
        _items = []
        if self.notices:
            for _item_notices in self.notices:
                if _item_notices:
                    _items.append(_item_notices.to_dict())
            _dict['notices'] = _items
        # override the default output from pydantic by calling `to_dict()` of policy_api_lifecycle
        if self.policy_api_lifecycle:
            _dict['policyApiLifecycle'] = self.policy_api_lifecycle.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChromePolicyVersionsV1PolicySchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessRestrictions": obj.get("accessRestrictions"),
            "additionalTargetKeyNames": [GoogleChromePolicyVersionsV1AdditionalTargetKeyName.from_dict(_item) for _item in obj["additionalTargetKeyNames"]] if obj.get("additionalTargetKeyNames") is not None else None,
            "categoryTitle": obj.get("categoryTitle"),
            "definition": Proto2FileDescriptorProto.from_dict(obj["definition"]) if obj.get("definition") is not None else None,
            "fieldDescriptions": [GoogleChromePolicyVersionsV1PolicySchemaFieldDescription.from_dict(_item) for _item in obj["fieldDescriptions"]] if obj.get("fieldDescriptions") is not None else None,
            "name": obj.get("name"),
            "notices": [GoogleChromePolicyVersionsV1PolicySchemaNoticeDescription.from_dict(_item) for _item in obj["notices"]] if obj.get("notices") is not None else None,
            "policyApiLifecycle": GoogleChromePolicyVersionsV1PolicyApiLifecycle.from_dict(obj["policyApiLifecycle"]) if obj.get("policyApiLifecycle") is not None else None,
            "policyDescription": obj.get("policyDescription"),
            "schemaName": obj.get("schemaName"),
            "supportUri": obj.get("supportUri"),
            "supportedPlatforms": obj.get("supportedPlatforms"),
            "validTargetResources": obj.get("validTargetResources")
        })
        return _obj



# coding: utf-8

"""
    Google Cloud Memorystore for Redis API

    Creates and manages Redis instances on the Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.discovery_endpoint import DiscoveryEndpoint
from openapi_client.models.psc_config import PscConfig
from openapi_client.models.psc_connection import PscConnection
from openapi_client.models.state_info import StateInfo
from typing import Optional, Set
from typing_extensions import Self

class Cluster(BaseModel):
    """
    A cluster instance.
    """ # noqa: E501
    authorization_mode: Optional[StrictStr] = Field(default=None, description="Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.", alias="authorizationMode")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp associated with the cluster creation request.", alias="createTime")
    discovery_endpoints: Optional[List[DiscoveryEndpoint]] = Field(default=None, description="Output only. Endpoints created on each given network, for Redis clients to connect to the cluster. Currently only one discovery endpoint is supported.", alias="discoveryEndpoints")
    name: Optional[StrictStr] = Field(default=None, description="Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`")
    psc_configs: Optional[List[PscConfig]] = Field(default=None, description="Required. Each PscConfig configures the consumer network where IPs will be designated to the cluster for client access through Private Service Connect Automation. Currently, only one PscConfig is supported.", alias="pscConfigs")
    psc_connections: Optional[List[PscConnection]] = Field(default=None, description="Output only. PSC connections for discovery of the cluster topology and accessing the cluster.", alias="pscConnections")
    replica_count: Optional[StrictInt] = Field(default=None, description="Optional. The number of replica nodes per shard.", alias="replicaCount")
    shard_count: Optional[StrictInt] = Field(default=None, description="Required. Number of shards for the Redis cluster.", alias="shardCount")
    size_gb: Optional[StrictInt] = Field(default=None, description="Output only. Redis memory size in GB for the entire cluster rounded up to the next integer.", alias="sizeGb")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED")
    state_info: Optional[StateInfo] = Field(default=None, alias="stateInfo")
    transit_encryption_mode: Optional[StrictStr] = Field(default=None, description="Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.", alias="transitEncryptionMode")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. System assigned, unique identifier for the cluster.")
    __properties: ClassVar[List[str]] = ["authorizationMode", "createTime", "discoveryEndpoints", "name", "pscConfigs", "pscConnections", "replicaCount", "shardCount", "sizeGb", "state", "stateInfo", "transitEncryptionMode", "uid"]

    @field_validator('authorization_mode')
    def authorization_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUTH_MODE_UNSPECIFIED', 'AUTH_MODE_IAM_AUTH', 'AUTH_MODE_DISABLED']):
            raise ValueError("must be one of enum values ('AUTH_MODE_UNSPECIFIED', 'AUTH_MODE_IAM_AUTH', 'AUTH_MODE_DISABLED')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'UPDATING', 'DELETING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'UPDATING', 'DELETING')")
        return value

    @field_validator('transit_encryption_mode')
    def transit_encryption_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRANSIT_ENCRYPTION_MODE_UNSPECIFIED', 'TRANSIT_ENCRYPTION_MODE_DISABLED', 'TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION']):
            raise ValueError("must be one of enum values ('TRANSIT_ENCRYPTION_MODE_UNSPECIFIED', 'TRANSIT_ENCRYPTION_MODE_DISABLED', 'TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Cluster from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "discovery_endpoints",
            "psc_connections",
            "size_gb",
            "state",
            "uid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in discovery_endpoints (list)
        _items = []
        if self.discovery_endpoints:
            for _item_discovery_endpoints in self.discovery_endpoints:
                if _item_discovery_endpoints:
                    _items.append(_item_discovery_endpoints.to_dict())
            _dict['discoveryEndpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in psc_configs (list)
        _items = []
        if self.psc_configs:
            for _item_psc_configs in self.psc_configs:
                if _item_psc_configs:
                    _items.append(_item_psc_configs.to_dict())
            _dict['pscConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in psc_connections (list)
        _items = []
        if self.psc_connections:
            for _item_psc_connections in self.psc_connections:
                if _item_psc_connections:
                    _items.append(_item_psc_connections.to_dict())
            _dict['pscConnections'] = _items
        # override the default output from pydantic by calling `to_dict()` of state_info
        if self.state_info:
            _dict['stateInfo'] = self.state_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Cluster from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorizationMode": obj.get("authorizationMode"),
            "createTime": obj.get("createTime"),
            "discoveryEndpoints": [DiscoveryEndpoint.from_dict(_item) for _item in obj["discoveryEndpoints"]] if obj.get("discoveryEndpoints") is not None else None,
            "name": obj.get("name"),
            "pscConfigs": [PscConfig.from_dict(_item) for _item in obj["pscConfigs"]] if obj.get("pscConfigs") is not None else None,
            "pscConnections": [PscConnection.from_dict(_item) for _item in obj["pscConnections"]] if obj.get("pscConnections") is not None else None,
            "replicaCount": obj.get("replicaCount"),
            "shardCount": obj.get("shardCount"),
            "sizeGb": obj.get("sizeGb"),
            "state": obj.get("state"),
            "stateInfo": StateInfo.from_dict(obj["stateInfo"]) if obj.get("stateInfo") is not None else None,
            "transitEncryptionMode": obj.get("transitEncryptionMode"),
            "uid": obj.get("uid")
        })
        return _obj



# coding: utf-8

"""
    Google Cloud Memorystore for Redis API

    Creates and manages Redis instances on the Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.backup_configuration import BackupConfiguration
from openapi_client.models.backup_run import BackupRun
from openapi_client.models.database_resource_id import DatabaseResourceId
from openapi_client.models.product import Product
from typing import Optional, Set
from typing_extensions import Self

class DatabaseMetadata(BaseModel):
    """
    Metadata for individual databases created in an instance. i.e. spanner instance can have multiple databases with unique configuration settings.
    """ # noqa: E501
    backup_configuration: Optional[BackupConfiguration] = Field(default=None, alias="backupConfiguration")
    backup_run: Optional[BackupRun] = Field(default=None, alias="backupRun")
    product: Optional[Product] = None
    resource_id: Optional[DatabaseResourceId] = Field(default=None, alias="resourceId")
    resource_name: Optional[StrictStr] = Field(default=None, description="Required. Database name. Resource name to follow CAIS resource_name format as noted here go/condor-common-datamodel", alias="resourceName")
    __properties: ClassVar[List[str]] = ["backupConfiguration", "backupRun", "product", "resourceId", "resourceName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatabaseMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of backup_configuration
        if self.backup_configuration:
            _dict['backupConfiguration'] = self.backup_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of backup_run
        if self.backup_run:
            _dict['backupRun'] = self.backup_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_id
        if self.resource_id:
            _dict['resourceId'] = self.resource_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatabaseMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupConfiguration": BackupConfiguration.from_dict(obj["backupConfiguration"]) if obj.get("backupConfiguration") is not None else None,
            "backupRun": BackupRun.from_dict(obj["backupRun"]) if obj.get("backupRun") is not None else None,
            "product": Product.from_dict(obj["product"]) if obj.get("product") is not None else None,
            "resourceId": DatabaseResourceId.from_dict(obj["resourceId"]) if obj.get("resourceId") is not None else None,
            "resourceName": obj.get("resourceName")
        })
        return _obj



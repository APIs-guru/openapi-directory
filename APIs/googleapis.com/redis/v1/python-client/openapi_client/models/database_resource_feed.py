# coding: utf-8

"""
    Google Cloud Memorystore for Redis API

    Creates and manages Redis instances on the Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.database_resource_health_signal_data import DatabaseResourceHealthSignalData
from openapi_client.models.database_resource_id import DatabaseResourceId
from openapi_client.models.database_resource_metadata import DatabaseResourceMetadata
from openapi_client.models.database_resource_recommendation_signal_data import DatabaseResourceRecommendationSignalData
from typing import Optional, Set
from typing_extensions import Self

class DatabaseResourceFeed(BaseModel):
    """
    DatabaseResourceFeed is the top level proto to be used to ingest different database resource level events into Condor platform.
    """ # noqa: E501
    feed_timestamp: Optional[StrictStr] = Field(default=None, description="Required. Timestamp when feed is generated.", alias="feedTimestamp")
    feed_type: Optional[StrictStr] = Field(default=None, description="Required. Type feed to be ingested into condor", alias="feedType")
    recommendation_signal_data: Optional[DatabaseResourceRecommendationSignalData] = Field(default=None, alias="recommendationSignalData")
    resource_health_signal_data: Optional[DatabaseResourceHealthSignalData] = Field(default=None, alias="resourceHealthSignalData")
    resource_id: Optional[DatabaseResourceId] = Field(default=None, alias="resourceId")
    resource_metadata: Optional[DatabaseResourceMetadata] = Field(default=None, alias="resourceMetadata")
    __properties: ClassVar[List[str]] = ["feedTimestamp", "feedType", "recommendationSignalData", "resourceHealthSignalData", "resourceId", "resourceMetadata"]

    @field_validator('feed_type')
    def feed_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FEEDTYPE_UNSPECIFIED', 'RESOURCE_METADATA', 'OBSERVABILITY_DATA', 'SECURITY_FINDING_DATA', 'RECOMMENDATION_SIGNAL_DATA']):
            raise ValueError("must be one of enum values ('FEEDTYPE_UNSPECIFIED', 'RESOURCE_METADATA', 'OBSERVABILITY_DATA', 'SECURITY_FINDING_DATA', 'RECOMMENDATION_SIGNAL_DATA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatabaseResourceFeed from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of recommendation_signal_data
        if self.recommendation_signal_data:
            _dict['recommendationSignalData'] = self.recommendation_signal_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_health_signal_data
        if self.resource_health_signal_data:
            _dict['resourceHealthSignalData'] = self.resource_health_signal_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_id
        if self.resource_id:
            _dict['resourceId'] = self.resource_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_metadata
        if self.resource_metadata:
            _dict['resourceMetadata'] = self.resource_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatabaseResourceFeed from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "feedTimestamp": obj.get("feedTimestamp"),
            "feedType": obj.get("feedType"),
            "recommendationSignalData": DatabaseResourceRecommendationSignalData.from_dict(obj["recommendationSignalData"]) if obj.get("recommendationSignalData") is not None else None,
            "resourceHealthSignalData": DatabaseResourceHealthSignalData.from_dict(obj["resourceHealthSignalData"]) if obj.get("resourceHealthSignalData") is not None else None,
            "resourceId": DatabaseResourceId.from_dict(obj["resourceId"]) if obj.get("resourceId") is not None else None,
            "resourceMetadata": DatabaseResourceMetadata.from_dict(obj["resourceMetadata"]) if obj.get("resourceMetadata") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Cloud Memorystore for Redis API

    Creates and manages Redis instances on the Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.database_metadata import DatabaseMetadata

class TestDatabaseMetadata(unittest.TestCase):
    """DatabaseMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DatabaseMetadata:
        """Test DatabaseMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DatabaseMetadata`
        """
        model = DatabaseMetadata()
        if include_optional:
            return DatabaseMetadata(
                backup_configuration = openapi_client.models.backup_configuration.BackupConfiguration(
                    automated_backup_enabled = True, 
                    backup_retention_settings = openapi_client.models.retention_settings.RetentionSettings(
                        quantity_based_retention = 56, 
                        retention_unit = 'RETENTION_UNIT_UNSPECIFIED', 
                        time_based_retention = '', ), 
                    point_in_time_recovery_enabled = True, ),
                backup_run = openapi_client.models.backup_run.BackupRun(
                    end_time = '', 
                    error = openapi_client.models.operation_error.OperationError(
                        code = '', 
                        error_type = 'OPERATION_ERROR_TYPE_UNSPECIFIED', 
                        message = '', ), 
                    start_time = '', 
                    status = 'STATUS_UNSPECIFIED', ),
                product = openapi_client.models.product.Product(
                    engine = 'ENGINE_UNSPECIFIED', 
                    type = 'PRODUCT_TYPE_UNSPECIFIED', 
                    version = '', ),
                resource_id = openapi_client.models.database_resource_id.DatabaseResourceId(
                    provider = 'PROVIDER_UNSPECIFIED', 
                    provider_description = '', 
                    resource_type = '', 
                    unique_id = '', ),
                resource_name = ''
            )
        else:
            return DatabaseMetadata(
        )
        """

    def testDatabaseMetadata(self):
        """Test DatabaseMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Google Cloud Memorystore for Redis API

    Creates and manages Redis instances on the Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.database_resource_metadata import DatabaseResourceMetadata

class TestDatabaseResourceMetadata(unittest.TestCase):
    """DatabaseResourceMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DatabaseResourceMetadata:
        """Test DatabaseResourceMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DatabaseResourceMetadata`
        """
        model = DatabaseResourceMetadata()
        if include_optional:
            return DatabaseResourceMetadata(
                availability_configuration = openapi_client.models.availability_configuration.AvailabilityConfiguration(
                    availability_type = 'AVAILABILITY_TYPE_UNSPECIFIED', 
                    external_replica_configured = True, 
                    promotable_replica_configured = True, ),
                backup_configuration = openapi_client.models.backup_configuration.BackupConfiguration(
                    automated_backup_enabled = True, 
                    backup_retention_settings = openapi_client.models.retention_settings.RetentionSettings(
                        quantity_based_retention = 56, 
                        retention_unit = 'RETENTION_UNIT_UNSPECIFIED', 
                        time_based_retention = '', ), 
                    point_in_time_recovery_enabled = True, ),
                backup_run = openapi_client.models.backup_run.BackupRun(
                    end_time = '', 
                    error = openapi_client.models.operation_error.OperationError(
                        code = '', 
                        error_type = 'OPERATION_ERROR_TYPE_UNSPECIFIED', 
                        message = '', ), 
                    start_time = '', 
                    status = 'STATUS_UNSPECIFIED', ),
                creation_time = '',
                current_state = 'STATE_UNSPECIFIED',
                custom_metadata = openapi_client.models.custom_metadata_data.CustomMetadataData(
                    database_metadata = [
                        openapi_client.models.database_metadata.DatabaseMetadata(
                            backup_configuration = openapi_client.models.backup_configuration.BackupConfiguration(
                                automated_backup_enabled = True, 
                                backup_retention_settings = openapi_client.models.retention_settings.RetentionSettings(
                                    quantity_based_retention = 56, 
                                    retention_unit = 'RETENTION_UNIT_UNSPECIFIED', 
                                    time_based_retention = '', ), 
                                point_in_time_recovery_enabled = True, ), 
                            backup_run = openapi_client.models.backup_run.BackupRun(
                                end_time = '', 
                                error = openapi_client.models.operation_error.OperationError(
                                    code = '', 
                                    error_type = 'OPERATION_ERROR_TYPE_UNSPECIFIED', 
                                    message = '', ), 
                                start_time = '', 
                                status = 'STATUS_UNSPECIFIED', ), 
                            product = openapi_client.models.product.Product(
                                engine = 'ENGINE_UNSPECIFIED', 
                                type = 'PRODUCT_TYPE_UNSPECIFIED', 
                                version = '', ), 
                            resource_id = openapi_client.models.database_resource_id.DatabaseResourceId(
                                provider = 'PROVIDER_UNSPECIFIED', 
                                provider_description = '', 
                                resource_type = '', 
                                unique_id = '', ), 
                            resource_name = '', )
                        ], ),
                entitlements = [
                    openapi_client.models.entitlement.Entitlement(
                        entitlement_state = 'ENTITLEMENT_STATE_UNSPECIFIED', 
                        type = 'ENTITLEMENT_TYPE_UNSPECIFIED', )
                    ],
                expected_state = 'STATE_UNSPECIFIED',
                id = openapi_client.models.database_resource_id.DatabaseResourceId(
                    provider = 'PROVIDER_UNSPECIFIED', 
                    provider_description = '', 
                    resource_type = '', 
                    unique_id = '', ),
                instance_type = 'INSTANCE_TYPE_UNSPECIFIED',
                location = '',
                primary_resource_id = openapi_client.models.database_resource_id.DatabaseResourceId(
                    provider = 'PROVIDER_UNSPECIFIED', 
                    provider_description = '', 
                    resource_type = '', 
                    unique_id = '', ),
                product = openapi_client.models.product.Product(
                    engine = 'ENGINE_UNSPECIFIED', 
                    type = 'PRODUCT_TYPE_UNSPECIFIED', 
                    version = '', ),
                resource_container = '',
                resource_name = '',
                updation_time = '',
                user_labels = {
                    'key' : ''
                    }
            )
        else:
            return DatabaseResourceMetadata(
        )
        """

    def testDatabaseResourceMetadata(self):
        """Test DatabaseResourceMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

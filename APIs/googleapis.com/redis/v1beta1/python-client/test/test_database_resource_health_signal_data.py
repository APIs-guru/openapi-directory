# coding: utf-8

"""
    Google Cloud Memorystore for Redis API

    Creates and manages Redis instances on the Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.database_resource_health_signal_data import DatabaseResourceHealthSignalData

class TestDatabaseResourceHealthSignalData(unittest.TestCase):
    """DatabaseResourceHealthSignalData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DatabaseResourceHealthSignalData:
        """Test DatabaseResourceHealthSignalData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DatabaseResourceHealthSignalData`
        """
        model = DatabaseResourceHealthSignalData()
        if include_optional:
            return DatabaseResourceHealthSignalData(
                additional_metadata = {
                    'key' : null
                    },
                compliance = [
                    openapi_client.models.compliance.Compliance(
                        standard = '', 
                        version = '', )
                    ],
                description = '',
                event_time = '',
                external_uri = '',
                name = '',
                provider = 'PROVIDER_UNSPECIFIED',
                resource_container = '',
                resource_name = '',
                signal_class = 'CLASS_UNSPECIFIED',
                signal_id = '',
                signal_type = 'SIGNAL_TYPE_UNSPECIFIED',
                state = 'STATE_UNSPECIFIED'
            )
        else:
            return DatabaseResourceHealthSignalData(
        )
        """

    def testDatabaseResourceHealthSignalData(self):
        """Test DatabaseResourceHealthSignalData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

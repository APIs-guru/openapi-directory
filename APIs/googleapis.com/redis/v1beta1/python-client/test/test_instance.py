# coding: utf-8

"""
    Google Cloud Memorystore for Redis API

    Creates and manages Redis instances on the Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.instance import Instance

class TestInstance(unittest.TestCase):
    """Instance unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Instance:
        """Test Instance
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Instance`
        """
        model = Instance()
        if include_optional:
            return Instance(
                alternative_location_id = '',
                auth_enabled = True,
                authorized_network = '',
                available_maintenance_versions = [
                    ''
                    ],
                connect_mode = 'CONNECT_MODE_UNSPECIFIED',
                create_time = '',
                current_location_id = '',
                customer_managed_key = '',
                display_name = '',
                host = '',
                labels = {
                    'key' : ''
                    },
                location_id = '',
                maintenance_policy = openapi_client.models.maintenance_policy.MaintenancePolicy(
                    create_time = '', 
                    description = '', 
                    update_time = '', 
                    weekly_maintenance_window = [
                        openapi_client.models.weekly_maintenance_window.WeeklyMaintenanceWindow(
                            day = 'DAY_OF_WEEK_UNSPECIFIED', 
                            duration = '', 
                            start_time = openapi_client.models.time_of_day.TimeOfDay(
                                hours = 56, 
                                minutes = 56, 
                                nanos = 56, 
                                seconds = 56, ), )
                        ], ),
                maintenance_schedule = openapi_client.models.maintenance_schedule.MaintenanceSchedule(
                    can_reschedule = True, 
                    end_time = '', 
                    schedule_deadline_time = '', 
                    start_time = '', ),
                maintenance_version = '',
                memory_size_gb = 56,
                name = '',
                nodes = [
                    openapi_client.models.node_info.NodeInfo(
                        id = '', 
                        zone = '', )
                    ],
                persistence_config = openapi_client.models.persistence_config.PersistenceConfig(
                    persistence_mode = 'PERSISTENCE_MODE_UNSPECIFIED', 
                    rdb_next_snapshot_time = '', 
                    rdb_snapshot_period = 'SNAPSHOT_PERIOD_UNSPECIFIED', 
                    rdb_snapshot_start_time = '', ),
                persistence_iam_identity = '',
                port = 56,
                read_endpoint = '',
                read_endpoint_port = 56,
                read_replicas_mode = 'READ_REPLICAS_MODE_UNSPECIFIED',
                redis_configs = {
                    'key' : ''
                    },
                redis_version = '',
                replica_count = 56,
                reserved_ip_range = '',
                satisfies_pzi = True,
                satisfies_pzs = True,
                secondary_ip_range = '',
                server_ca_certs = [
                    openapi_client.models.tls_certificate.TlsCertificate(
                        cert = '', 
                        create_time = '', 
                        expire_time = '', 
                        serial_number = '', 
                        sha1_fingerprint = '', )
                    ],
                state = 'STATE_UNSPECIFIED',
                status_message = '',
                suspension_reasons = [
                    'SUSPENSION_REASON_UNSPECIFIED'
                    ],
                tier = 'TIER_UNSPECIFIED',
                transit_encryption_mode = 'TRANSIT_ENCRYPTION_MODE_UNSPECIFIED'
            )
        else:
            return Instance(
        )
        """

    def testInstance(self):
        """Test Instance"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Google Cloud Memorystore for Redis API

    Creates and manages Redis instances on the Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cluster import Cluster

class TestCluster(unittest.TestCase):
    """Cluster unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Cluster:
        """Test Cluster
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Cluster`
        """
        model = Cluster()
        if include_optional:
            return Cluster(
                authorization_mode = 'AUTH_MODE_UNSPECIFIED',
                create_time = '',
                discovery_endpoints = [
                    openapi_client.models.discovery_endpoint.DiscoveryEndpoint(
                        address = '', 
                        port = 56, 
                        psc_config = openapi_client.models.psc_config.PscConfig(
                            network = '', ), )
                    ],
                name = '',
                psc_configs = [
                    openapi_client.models.psc_config.PscConfig(
                        network = '', )
                    ],
                psc_connections = [
                    openapi_client.models.psc_connection.PscConnection(
                        address = '', 
                        forwarding_rule = '', 
                        network = '', 
                        project_id = '', 
                        psc_connection_id = '', )
                    ],
                replica_count = 56,
                shard_count = 56,
                size_gb = 56,
                state = 'STATE_UNSPECIFIED',
                state_info = openapi_client.models.state_info.StateInfo(
                    update_info = openapi_client.models.update_info.UpdateInfo(
                        target_replica_count = 56, 
                        target_shard_count = 56, ), ),
                transit_encryption_mode = 'TRANSIT_ENCRYPTION_MODE_UNSPECIFIED',
                uid = ''
            )
        else:
            return Cluster(
        )
        """

    def testCluster(self):
        """Test Cluster"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Google Cloud Memorystore for Redis API

    Creates and manages Redis instances on the Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.retention_settings import RetentionSettings
from typing import Optional, Set
from typing_extensions import Self

class BackupConfiguration(BaseModel):
    """
    Configuration for automatic backups
    """ # noqa: E501
    automated_backup_enabled: Optional[StrictBool] = Field(default=None, description="Whether customer visible automated backups are enabled on the instance.", alias="automatedBackupEnabled")
    backup_retention_settings: Optional[RetentionSettings] = Field(default=None, alias="backupRetentionSettings")
    point_in_time_recovery_enabled: Optional[StrictBool] = Field(default=None, description="Whether point-in-time recovery is enabled. This is optional field, if the database service does not have this feature or metadata is not available in control plane, this can be omitted.", alias="pointInTimeRecoveryEnabled")
    __properties: ClassVar[List[str]] = ["automatedBackupEnabled", "backupRetentionSettings", "pointInTimeRecoveryEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackupConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of backup_retention_settings
        if self.backup_retention_settings:
            _dict['backupRetentionSettings'] = self.backup_retention_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackupConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automatedBackupEnabled": obj.get("automatedBackupEnabled"),
            "backupRetentionSettings": RetentionSettings.from_dict(obj["backupRetentionSettings"]) if obj.get("backupRetentionSettings") is not None else None,
            "pointInTimeRecoveryEnabled": obj.get("pointInTimeRecoveryEnabled")
        })
        return _obj



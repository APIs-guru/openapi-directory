# coding: utf-8

"""
    Area120 Tables API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.date_details import DateDetails
from openapi_client.models.labeled_item import LabeledItem
from openapi_client.models.lookup_details import LookupDetails
from openapi_client.models.relationship_details import RelationshipDetails
from typing import Optional, Set
from typing_extensions import Self

class ColumnDescription(BaseModel):
    """
    Details on a column in the table.
    """ # noqa: E501
    data_type: Optional[StrictStr] = Field(default=None, description="Data type of the column Supported types are auto_id, boolean, boolean_list, creator, create_timestamp, date, dropdown, location, integer, integer_list, number, number_list, person, person_list, tags, check_list, text, text_list, update_timestamp, updater, relationship, file_attachment_list. These types directly map to the column types supported on Tables website.", alias="dataType")
    date_details: Optional[DateDetails] = Field(default=None, alias="dateDetails")
    id: Optional[StrictStr] = Field(default=None, description="Internal id for a column.")
    labels: Optional[List[LabeledItem]] = Field(default=None, description="Optional. Range of labeled values for the column. Some columns like tags and drop-downs limit the values to a set of possible values. We return the range of values in such cases to help clients implement better user data validation.")
    lookup_details: Optional[LookupDetails] = Field(default=None, alias="lookupDetails")
    multiple_values_disallowed: Optional[StrictBool] = Field(default=None, description="Optional. Indicates whether or not multiple values are allowed for array types where such a restriction is possible.", alias="multipleValuesDisallowed")
    name: Optional[StrictStr] = Field(default=None, description="column name")
    readonly: Optional[StrictBool] = Field(default=None, description="Optional. Indicates that values for the column cannot be set by the user.")
    relationship_details: Optional[RelationshipDetails] = Field(default=None, alias="relationshipDetails")
    __properties: ClassVar[List[str]] = ["dataType", "dateDetails", "id", "labels", "lookupDetails", "multipleValuesDisallowed", "name", "readonly", "relationshipDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ColumnDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_details
        if self.date_details:
            _dict['dateDetails'] = self.date_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict['labels'] = _items
        # override the default output from pydantic by calling `to_dict()` of lookup_details
        if self.lookup_details:
            _dict['lookupDetails'] = self.lookup_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of relationship_details
        if self.relationship_details:
            _dict['relationshipDetails'] = self.relationship_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ColumnDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataType": obj.get("dataType"),
            "dateDetails": DateDetails.from_dict(obj["dateDetails"]) if obj.get("dateDetails") is not None else None,
            "id": obj.get("id"),
            "labels": [LabeledItem.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "lookupDetails": LookupDetails.from_dict(obj["lookupDetails"]) if obj.get("lookupDetails") is not None else None,
            "multipleValuesDisallowed": obj.get("multipleValuesDisallowed"),
            "name": obj.get("name"),
            "readonly": obj.get("readonly"),
            "relationshipDetails": RelationshipDetails.from_dict(obj["relationshipDetails"]) if obj.get("relationshipDetails") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_policies_response import ListPoliciesResponse

class TestListPoliciesResponse(unittest.TestCase):
    """ListPoliciesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListPoliciesResponse:
        """Test ListPoliciesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListPoliciesResponse`
        """
        model = ListPoliciesResponse()
        if include_optional:
            return ListPoliciesResponse(
                next_page_token = '',
                policies = [
                    openapi_client.models.policy.Policy(
                        account_types_with_management_disabled = [
                            ''
                            ], 
                        add_user_disabled = True, 
                        adjust_volume_disabled = True, 
                        advanced_security_overrides = openapi_client.models.advanced_security_overrides.AdvancedSecurityOverrides(
                            common_criteria_mode = 'COMMON_CRITERIA_MODE_UNSPECIFIED', 
                            developer_settings = 'DEVELOPER_SETTINGS_UNSPECIFIED', 
                            google_play_protect_verify_apps = 'GOOGLE_PLAY_PROTECT_VERIFY_APPS_UNSPECIFIED', 
                            mte_policy = 'MTE_POLICY_UNSPECIFIED', 
                            personal_apps_that_can_read_work_notifications = [
                                ''
                                ], 
                            untrusted_apps_policy = 'UNTRUSTED_APPS_POLICY_UNSPECIFIED', ), 
                        always_on_vpn_package = openapi_client.models.always_on_vpn_package.AlwaysOnVpnPackage(
                            lockdown_enabled = True, 
                            package_name = '', ), 
                        android_device_policy_tracks = [
                            'APP_TRACK_UNSPECIFIED'
                            ], 
                        app_auto_update_policy = 'APP_AUTO_UPDATE_POLICY_UNSPECIFIED', 
                        applications = [
                            openapi_client.models.application_policy.ApplicationPolicy(
                                accessible_track_ids = [
                                    ''
                                    ], 
                                always_on_vpn_lockdown_exemption = 'ALWAYS_ON_VPN_LOCKDOWN_EXEMPTION_UNSPECIFIED', 
                                auto_update_mode = 'AUTO_UPDATE_MODE_UNSPECIFIED', 
                                connected_work_and_personal_app = 'CONNECTED_WORK_AND_PERSONAL_APP_UNSPECIFIED', 
                                credential_provider_policy = 'CREDENTIAL_PROVIDER_POLICY_UNSPECIFIED', 
                                default_permission_policy = 'PERMISSION_POLICY_UNSPECIFIED', 
                                delegated_scopes = [
                                    'DELEGATED_SCOPE_UNSPECIFIED'
                                    ], 
                                disabled = True, 
                                extension_config = openapi_client.models.extension_config.ExtensionConfig(
                                    notification_receiver = '', 
                                    signing_key_fingerprints_sha256 = [
                                        ''
                                        ], ), 
                                install_constraint = [
                                    openapi_client.models.install_constraint.InstallConstraint(
                                        charging_constraint = 'CHARGING_CONSTRAINT_UNSPECIFIED', 
                                        device_idle_constraint = 'DEVICE_IDLE_CONSTRAINT_UNSPECIFIED', 
                                        network_type_constraint = 'NETWORK_TYPE_CONSTRAINT_UNSPECIFIED', )
                                    ], 
                                install_priority = 56, 
                                install_type = 'INSTALL_TYPE_UNSPECIFIED', 
                                lock_task_allowed = True, 
                                managed_configuration = {
                                    'key' : null
                                    }, 
                                managed_configuration_template = openapi_client.models.managed_configuration_template.ManagedConfigurationTemplate(
                                    configuration_variables = {
                                        'key' : ''
                                        }, 
                                    template_id = '', ), 
                                minimum_version_code = 56, 
                                package_name = '', 
                                permission_grants = [
                                    openapi_client.models.permission_grant.PermissionGrant(
                                        permission = '', 
                                        policy = 'PERMISSION_POLICY_UNSPECIFIED', )
                                    ], 
                                work_profile_widgets = 'WORK_PROFILE_WIDGETS_UNSPECIFIED', )
                            ], 
                        auto_date_and_time_zone = 'AUTO_DATE_AND_TIME_ZONE_UNSPECIFIED', 
                        auto_time_required = True, 
                        block_applications_enabled = True, 
                        bluetooth_config_disabled = True, 
                        bluetooth_contact_sharing_disabled = True, 
                        bluetooth_disabled = True, 
                        camera_access = 'CAMERA_ACCESS_UNSPECIFIED', 
                        camera_disabled = True, 
                        cell_broadcasts_config_disabled = True, 
                        choose_private_key_rules = [
                            openapi_client.models.choose_private_key_rule.ChoosePrivateKeyRule(
                                package_names = [
                                    ''
                                    ], 
                                private_key_alias = '', 
                                url_pattern = '', )
                            ], 
                        compliance_rules = [
                            openapi_client.models.compliance_rule.ComplianceRule(
                                api_level_condition = openapi_client.models.api_level_condition.ApiLevelCondition(
                                    min_api_level = 56, ), 
                                disable_apps = True, 
                                non_compliance_detail_condition = openapi_client.models.non_compliance_detail_condition.NonComplianceDetailCondition(
                                    non_compliance_reason = 'NON_COMPLIANCE_REASON_UNSPECIFIED', 
                                    package_name = '', 
                                    setting_name = '', ), 
                                package_names_to_disable = [
                                    ''
                                    ], )
                            ], 
                        create_windows_disabled = True, 
                        credential_provider_policy_default = 'CREDENTIAL_PROVIDER_POLICY_DEFAULT_UNSPECIFIED', 
                        credentials_config_disabled = True, 
                        cross_profile_policies = openapi_client.models.cross_profile_policies.CrossProfilePolicies(
                            cross_profile_copy_paste = 'CROSS_PROFILE_COPY_PASTE_UNSPECIFIED', 
                            cross_profile_data_sharing = 'CROSS_PROFILE_DATA_SHARING_UNSPECIFIED', 
                            exemptions_to_show_work_contacts_in_personal_profile = openapi_client.models.package_name_list.PackageNameList(), 
                            show_work_contacts_in_personal_profile = 'SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_UNSPECIFIED', 
                            work_profile_widgets_default = 'WORK_PROFILE_WIDGETS_DEFAULT_UNSPECIFIED', ), 
                        data_roaming_disabled = True, 
                        debugging_features_allowed = True, 
                        default_permission_policy = 'PERMISSION_POLICY_UNSPECIFIED', 
                        device_connectivity_management = openapi_client.models.device_connectivity_management.DeviceConnectivityManagement(
                            configure_wifi = 'CONFIGURE_WIFI_UNSPECIFIED', 
                            tethering_settings = 'TETHERING_SETTINGS_UNSPECIFIED', 
                            usb_data_access = 'USB_DATA_ACCESS_UNSPECIFIED', 
                            wifi_direct_settings = 'WIFI_DIRECT_SETTINGS_UNSPECIFIED', ), 
                        device_owner_lock_screen_info = openapi_client.models.user_facing_message.UserFacingMessage(
                            default_message = '', 
                            localized_messages = {
                                'key' : ''
                                }, ), 
                        device_radio_state = openapi_client.models.device_radio_state.DeviceRadioState(
                            airplane_mode_state = 'AIRPLANE_MODE_STATE_UNSPECIFIED', 
                            cellular_two_g_state = 'CELLULAR_TWO_G_STATE_UNSPECIFIED', 
                            minimum_wifi_security_level = 'MINIMUM_WIFI_SECURITY_LEVEL_UNSPECIFIED', 
                            ultra_wideband_state = 'ULTRA_WIDEBAND_STATE_UNSPECIFIED', 
                            wifi_state = 'WIFI_STATE_UNSPECIFIED', ), 
                        encryption_policy = 'ENCRYPTION_POLICY_UNSPECIFIED', 
                        ensure_verify_apps_enabled = True, 
                        factory_reset_disabled = True, 
                        frp_admin_emails = [
                            ''
                            ], 
                        fun_disabled = True, 
                        install_apps_disabled = True, 
                        install_unknown_sources_allowed = True, 
                        keyguard_disabled = True, 
                        keyguard_disabled_features = [
                            'KEYGUARD_DISABLED_FEATURE_UNSPECIFIED'
                            ], 
                        kiosk_custom_launcher_enabled = True, 
                        kiosk_customization = openapi_client.models.kiosk_customization.KioskCustomization(
                            device_settings = 'DEVICE_SETTINGS_UNSPECIFIED', 
                            power_button_actions = 'POWER_BUTTON_ACTIONS_UNSPECIFIED', 
                            status_bar = 'STATUS_BAR_UNSPECIFIED', 
                            system_error_warnings = 'SYSTEM_ERROR_WARNINGS_UNSPECIFIED', 
                            system_navigation = 'SYSTEM_NAVIGATION_UNSPECIFIED', ), 
                        location_mode = 'LOCATION_MODE_UNSPECIFIED', 
                        long_support_message = openapi_client.models.user_facing_message.UserFacingMessage(
                            default_message = '', ), 
                        maximum_time_to_lock = '', 
                        microphone_access = 'MICROPHONE_ACCESS_UNSPECIFIED', 
                        minimum_api_level = 56, 
                        mobile_networks_config_disabled = True, 
                        modify_accounts_disabled = True, 
                        mount_physical_media_disabled = True, 
                        name = '', 
                        network_escape_hatch_enabled = True, 
                        network_reset_disabled = True, 
                        onc_certificate_providers = [
                            openapi_client.models.onc_certificate_provider.OncCertificateProvider(
                                certificate_references = [
                                    ''
                                    ], 
                                content_provider_endpoint = openapi_client.models.content_provider_endpoint.ContentProviderEndpoint(
                                    package_name = '', 
                                    signing_certs_sha256 = [
                                        ''
                                        ], 
                                    uri = '', ), )
                            ], 
                        open_network_configuration = {
                            'key' : null
                            }, 
                        outgoing_beam_disabled = True, 
                        outgoing_calls_disabled = True, 
                        password_policies = [
                            openapi_client.models.password_requirements.PasswordRequirements(
                                maximum_failed_passwords_for_wipe = 56, 
                                password_expiration_timeout = '', 
                                password_history_length = 56, 
                                password_minimum_length = 56, 
                                password_minimum_letters = 56, 
                                password_minimum_lower_case = 56, 
                                password_minimum_non_letter = 56, 
                                password_minimum_numeric = 56, 
                                password_minimum_symbols = 56, 
                                password_minimum_upper_case = 56, 
                                password_quality = 'PASSWORD_QUALITY_UNSPECIFIED', 
                                password_scope = 'SCOPE_UNSPECIFIED', 
                                require_password_unlock = 'REQUIRE_PASSWORD_UNLOCK_UNSPECIFIED', 
                                unified_lock_settings = 'UNIFIED_LOCK_SETTINGS_UNSPECIFIED', )
                            ], 
                        password_requirements = openapi_client.models.password_requirements.PasswordRequirements(
                            maximum_failed_passwords_for_wipe = 56, 
                            password_expiration_timeout = '', 
                            password_history_length = 56, 
                            password_minimum_length = 56, 
                            password_minimum_letters = 56, 
                            password_minimum_lower_case = 56, 
                            password_minimum_non_letter = 56, 
                            password_minimum_numeric = 56, 
                            password_minimum_symbols = 56, 
                            password_minimum_upper_case = 56, 
                            password_quality = 'PASSWORD_QUALITY_UNSPECIFIED', 
                            password_scope = 'SCOPE_UNSPECIFIED', 
                            require_password_unlock = 'REQUIRE_PASSWORD_UNLOCK_UNSPECIFIED', 
                            unified_lock_settings = 'UNIFIED_LOCK_SETTINGS_UNSPECIFIED', ), 
                        permission_grants = [
                            openapi_client.models.permission_grant.PermissionGrant(
                                permission = '', 
                                policy = 'PERMISSION_POLICY_UNSPECIFIED', )
                            ], 
                        permitted_accessibility_services = openapi_client.models.package_name_list.PackageNameList(), 
                        permitted_input_methods = , 
                        persistent_preferred_activities = [
                            openapi_client.models.persistent_preferred_activity.PersistentPreferredActivity(
                                actions = [
                                    ''
                                    ], 
                                categories = [
                                    ''
                                    ], 
                                receiver_activity = '', )
                            ], 
                        personal_usage_policies = openapi_client.models.personal_usage_policies.PersonalUsagePolicies(
                            camera_disabled = True, 
                            max_days_with_work_off = 56, 
                            personal_applications = [
                                openapi_client.models.personal_application_policy.PersonalApplicationPolicy(
                                    install_type = 'INSTALL_TYPE_UNSPECIFIED', 
                                    package_name = '', )
                                ], 
                            personal_play_store_mode = 'PLAY_STORE_MODE_UNSPECIFIED', 
                            screen_capture_disabled = True, ), 
                        play_store_mode = 'PLAY_STORE_MODE_UNSPECIFIED', 
                        policy_enforcement_rules = [
                            openapi_client.models.policy_enforcement_rule.PolicyEnforcementRule(
                                block_action = openapi_client.models.block_action.BlockAction(
                                    block_after_days = 56, 
                                    block_scope = 'BLOCK_SCOPE_UNSPECIFIED', ), 
                                setting_name = '', 
                                wipe_action = openapi_client.models.wipe_action.WipeAction(
                                    preserve_frp = True, 
                                    wipe_after_days = 56, ), )
                            ], 
                        preferential_network_service = 'PREFERENTIAL_NETWORK_SERVICE_UNSPECIFIED', 
                        printing_policy = 'PRINTING_POLICY_UNSPECIFIED', 
                        private_key_selection_enabled = True, 
                        recommended_global_proxy = openapi_client.models.proxy_info.ProxyInfo(
                            excluded_hosts = [
                                ''
                                ], 
                            host = '', 
                            pac_uri = '', 
                            port = 56, ), 
                        remove_user_disabled = True, 
                        safe_boot_disabled = True, 
                        screen_capture_disabled = True, 
                        set_user_icon_disabled = True, 
                        set_wallpaper_disabled = True, 
                        setup_actions = [
                            openapi_client.models.setup_action.SetupAction(
                                description = , 
                                launch_app = openapi_client.models.launch_app_action.LaunchAppAction(
                                    package_name = '', ), 
                                title = , )
                            ], 
                        share_location_disabled = True, 
                        short_support_message = , 
                        skip_first_use_hints_enabled = True, 
                        sms_disabled = True, 
                        status_bar_disabled = True, 
                        status_reporting_settings = openapi_client.models.status_reporting_settings.StatusReportingSettings(
                            application_reporting_settings = openapi_client.models.application_reporting_settings.ApplicationReportingSettings(
                                include_removed_apps = True, ), 
                            application_reports_enabled = True, 
                            common_criteria_mode_enabled = True, 
                            device_settings_enabled = True, 
                            display_info_enabled = True, 
                            hardware_status_enabled = True, 
                            memory_info_enabled = True, 
                            network_info_enabled = True, 
                            power_management_events_enabled = True, 
                            software_info_enabled = True, 
                            system_properties_enabled = True, ), 
                        stay_on_plugged_modes = [
                            'BATTERY_PLUGGED_MODE_UNSPECIFIED'
                            ], 
                        system_update = openapi_client.models.system_update.SystemUpdate(
                            end_minutes = 56, 
                            freeze_periods = [
                                openapi_client.models.freeze_period.FreezePeriod(
                                    end_date = openapi_client.models.date.Date(
                                        day = 56, 
                                        month = 56, 
                                        year = 56, ), 
                                    start_date = openapi_client.models.date.Date(
                                        day = 56, 
                                        month = 56, 
                                        year = 56, ), )
                                ], 
                            start_minutes = 56, 
                            type = 'SYSTEM_UPDATE_TYPE_UNSPECIFIED', ), 
                        tethering_config_disabled = True, 
                        uninstall_apps_disabled = True, 
                        unmute_microphone_disabled = True, 
                        usage_log = openapi_client.models.usage_log.UsageLog(
                            enabled_log_types = [
                                'LOG_TYPE_UNSPECIFIED'
                                ], 
                            upload_on_cellular_allowed = [
                                'LOG_TYPE_UNSPECIFIED'
                                ], ), 
                        usb_file_transfer_disabled = True, 
                        usb_mass_storage_enabled = True, 
                        version = '', 
                        vpn_config_disabled = True, 
                        wifi_config_disabled = True, 
                        wifi_configs_lockdown_enabled = True, )
                    ]
            )
        else:
            return ListPoliciesResponse(
        )
        """

    def testListPoliciesResponse(self):
        """Test ListPoliciesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

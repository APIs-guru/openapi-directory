# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.usage_log_event import UsageLogEvent

class TestUsageLogEvent(unittest.TestCase):
    """UsageLogEvent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UsageLogEvent:
        """Test UsageLogEvent
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UsageLogEvent`
        """
        model = UsageLogEvent()
        if include_optional:
            return UsageLogEvent(
                adb_shell_command_event = openapi_client.models.adb_shell_command_event.AdbShellCommandEvent(
                    shell_cmd = '', ),
                adb_shell_interactive_event = openapi_client.models.adb_shell_interactive_event.AdbShellInteractiveEvent(),
                app_process_start_event = openapi_client.models.app_process_start_event.AppProcessStartEvent(
                    process_info = openapi_client.models.app_process_info.AppProcessInfo(
                        apk_sha256_hash = '', 
                        package_names = [
                            ''
                            ], 
                        pid = 56, 
                        process_name = '', 
                        seinfo = '', 
                        start_time = '', 
                        uid = 56, ), ),
                cert_authority_installed_event = openapi_client.models.cert_authority_installed_event.CertAuthorityInstalledEvent(
                    certificate = '', 
                    success = True, 
                    user_id = 56, ),
                cert_authority_removed_event = openapi_client.models.cert_authority_removed_event.CertAuthorityRemovedEvent(
                    certificate = '', 
                    success = True, 
                    user_id = 56, ),
                cert_validation_failure_event = openapi_client.models.cert_validation_failure_event.CertValidationFailureEvent(
                    failure_reason = '', ),
                connect_event = openapi_client.models.connect_event.ConnectEvent(
                    destination_ip_address = '', 
                    destination_port = 56, 
                    package_name = '', ),
                crypto_self_test_completed_event = openapi_client.models.crypto_self_test_completed_event.CryptoSelfTestCompletedEvent(
                    success = True, ),
                dns_event = openapi_client.models.dns_event.DnsEvent(
                    hostname = '', 
                    ip_addresses = [
                        ''
                        ], 
                    package_name = '', 
                    total_ip_addresses_returned = '', ),
                enrollment_complete_event = openapi_client.models.enrollment_complete_event.EnrollmentCompleteEvent(),
                event_id = '',
                event_time = '',
                event_type = 'EVENT_TYPE_UNSPECIFIED',
                file_pulled_event = openapi_client.models.file_pulled_event.FilePulledEvent(
                    file_path = '', ),
                file_pushed_event = openapi_client.models.file_pushed_event.FilePushedEvent(
                    file_path = '', ),
                key_destruction_event = openapi_client.models.key_destruction_event.KeyDestructionEvent(
                    application_uid = 56, 
                    key_alias = '', 
                    success = True, ),
                key_generated_event = openapi_client.models.key_generated_event.KeyGeneratedEvent(
                    application_uid = 56, 
                    key_alias = '', 
                    success = True, ),
                key_import_event = openapi_client.models.key_import_event.KeyImportEvent(
                    application_uid = 56, 
                    key_alias = '', 
                    success = True, ),
                key_integrity_violation_event = openapi_client.models.key_integrity_violation_event.KeyIntegrityViolationEvent(
                    application_uid = 56, 
                    key_alias = '', ),
                keyguard_dismiss_auth_attempt_event = openapi_client.models.keyguard_dismiss_auth_attempt_event.KeyguardDismissAuthAttemptEvent(
                    strong_auth_method_used = True, 
                    success = True, ),
                keyguard_dismissed_event = openapi_client.models.keyguard_dismissed_event.KeyguardDismissedEvent(),
                keyguard_secured_event = openapi_client.models.keyguard_secured_event.KeyguardSecuredEvent(),
                log_buffer_size_critical_event = openapi_client.models.log_buffer_size_critical_event.LogBufferSizeCriticalEvent(),
                logging_started_event = openapi_client.models.logging_started_event.LoggingStartedEvent(),
                logging_stopped_event = openapi_client.models.logging_stopped_event.LoggingStoppedEvent(),
                lost_mode_location_event = openapi_client.models.lost_mode_location_event.LostModeLocationEvent(
                    battery_level = 56, 
                    location = openapi_client.models.location.Location(
                        latitude = 1.337, 
                        longitude = 1.337, ), ),
                lost_mode_outgoing_phone_call_event = openapi_client.models.lost_mode_outgoing_phone_call_event.LostModeOutgoingPhoneCallEvent(),
                media_mount_event = openapi_client.models.media_mount_event.MediaMountEvent(
                    mount_point = '', 
                    volume_label = '', ),
                media_unmount_event = openapi_client.models.media_unmount_event.MediaUnmountEvent(
                    mount_point = '', 
                    volume_label = '', ),
                os_shutdown_event = openapi_client.models.os_shutdown_event.OsShutdownEvent(),
                os_startup_event = openapi_client.models.os_startup_event.OsStartupEvent(
                    verified_boot_state = 'VERIFIED_BOOT_STATE_UNSPECIFIED', 
                    verity_mode = 'DM_VERITY_MODE_UNSPECIFIED', ),
                remote_lock_event = openapi_client.models.remote_lock_event.RemoteLockEvent(
                    admin_package_name = '', 
                    admin_user_id = 56, 
                    target_user_id = 56, ),
                stop_lost_mode_user_attempt_event = openapi_client.models.stop_lost_mode_user_attempt_event.StopLostModeUserAttemptEvent(
                    status = 'STATUS_UNSPECIFIED', ),
                wipe_failure_event = openapi_client.models.wipe_failure_event.WipeFailureEvent()
            )
        else:
            return UsageLogEvent(
        )
        """

    def testUsageLogEvent(self):
        """Test UsageLogEvent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

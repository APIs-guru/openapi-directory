# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_devices_response import ListDevicesResponse

class TestListDevicesResponse(unittest.TestCase):
    """ListDevicesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListDevicesResponse:
        """Test ListDevicesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListDevicesResponse`
        """
        model = ListDevicesResponse()
        if include_optional:
            return ListDevicesResponse(
                devices = [
                    openapi_client.models.device.Device(
                        api_level = 56, 
                        application_reports = [
                            openapi_client.models.application_report.ApplicationReport(
                                application_source = 'APPLICATION_SOURCE_UNSPECIFIED', 
                                display_name = '', 
                                events = [
                                    openapi_client.models.application_event.ApplicationEvent(
                                        create_time = '', 
                                        event_type = 'APPLICATION_EVENT_TYPE_UNSPECIFIED', )
                                    ], 
                                installer_package_name = '', 
                                keyed_app_states = [
                                    openapi_client.models.keyed_app_state.KeyedAppState(
                                        create_time = '', 
                                        data = '', 
                                        key = '', 
                                        last_update_time = '', 
                                        message = '', 
                                        severity = 'SEVERITY_UNSPECIFIED', )
                                    ], 
                                package_name = '', 
                                package_sha256_hash = '', 
                                signing_key_cert_fingerprints = [
                                    ''
                                    ], 
                                state = 'APPLICATION_STATE_UNSPECIFIED', 
                                user_facing_type = 'USER_FACING_TYPE_UNSPECIFIED', 
                                version_code = 56, 
                                version_name = '', )
                            ], 
                        applied_password_policies = [
                            openapi_client.models.password_requirements.PasswordRequirements(
                                maximum_failed_passwords_for_wipe = 56, 
                                password_expiration_timeout = '', 
                                password_history_length = 56, 
                                password_minimum_length = 56, 
                                password_minimum_letters = 56, 
                                password_minimum_lower_case = 56, 
                                password_minimum_non_letter = 56, 
                                password_minimum_numeric = 56, 
                                password_minimum_symbols = 56, 
                                password_minimum_upper_case = 56, 
                                password_quality = 'PASSWORD_QUALITY_UNSPECIFIED', 
                                password_scope = 'SCOPE_UNSPECIFIED', 
                                require_password_unlock = 'REQUIRE_PASSWORD_UNLOCK_UNSPECIFIED', 
                                unified_lock_settings = 'UNIFIED_LOCK_SETTINGS_UNSPECIFIED', )
                            ], 
                        applied_policy_name = '', 
                        applied_policy_version = '', 
                        applied_state = 'DEVICE_STATE_UNSPECIFIED', 
                        common_criteria_mode_info = openapi_client.models.common_criteria_mode_info.CommonCriteriaModeInfo(
                            common_criteria_mode_status = 'COMMON_CRITERIA_MODE_STATUS_UNKNOWN', ), 
                        device_settings = openapi_client.models.device_settings.DeviceSettings(
                            adb_enabled = True, 
                            development_settings_enabled = True, 
                            encryption_status = 'ENCRYPTION_STATUS_UNSPECIFIED', 
                            is_device_secure = True, 
                            is_encrypted = True, 
                            unknown_sources_enabled = True, 
                            verify_apps_enabled = True, ), 
                        disabled_reason = openapi_client.models.user_facing_message.UserFacingMessage(
                            default_message = '', 
                            localized_messages = {
                                'key' : ''
                                }, ), 
                        displays = [
                            openapi_client.models.display.Display(
                                density = 56, 
                                display_id = 56, 
                                height = 56, 
                                name = '', 
                                refresh_rate = 56, 
                                state = 'DISPLAY_STATE_UNSPECIFIED', 
                                width = 56, )
                            ], 
                        dpc_migration_info = openapi_client.models.dpc_migration_info.DpcMigrationInfo(
                            additional_data = '', 
                            previous_dpc = '', ), 
                        enrollment_time = '', 
                        enrollment_token_data = '', 
                        enrollment_token_name = '', 
                        hardware_info = openapi_client.models.hardware_info.HardwareInfo(
                            battery_shutdown_temperatures = [
                                1.337
                                ], 
                            battery_throttling_temperatures = [
                                1.337
                                ], 
                            brand = '', 
                            cpu_shutdown_temperatures = [
                                1.337
                                ], 
                            cpu_throttling_temperatures = [
                                1.337
                                ], 
                            device_baseband_version = '', 
                            enterprise_specific_id = '', 
                            gpu_shutdown_temperatures = [
                                1.337
                                ], 
                            gpu_throttling_temperatures = [
                                1.337
                                ], 
                            hardware = '', 
                            manufacturer = '', 
                            model = '', 
                            serial_number = '', 
                            skin_shutdown_temperatures = [
                                1.337
                                ], 
                            skin_throttling_temperatures = [
                                1.337
                                ], ), 
                        hardware_status_samples = [
                            openapi_client.models.hardware_status.HardwareStatus(
                                battery_temperatures = [
                                    1.337
                                    ], 
                                cpu_temperatures = [
                                    1.337
                                    ], 
                                cpu_usages = [
                                    1.337
                                    ], 
                                create_time = '', 
                                fan_speeds = [
                                    1.337
                                    ], 
                                gpu_temperatures = [
                                    1.337
                                    ], 
                                skin_temperatures = [
                                    1.337
                                    ], )
                            ], 
                        last_policy_compliance_report_time = '', 
                        last_policy_sync_time = '', 
                        last_status_report_time = '', 
                        management_mode = 'MANAGEMENT_MODE_UNSPECIFIED', 
                        memory_events = [
                            openapi_client.models.memory_event.MemoryEvent(
                                byte_count = '', 
                                create_time = '', 
                                event_type = 'MEMORY_EVENT_TYPE_UNSPECIFIED', )
                            ], 
                        memory_info = openapi_client.models.memory_info.MemoryInfo(
                            total_internal_storage = '', 
                            total_ram = '', ), 
                        name = '', 
                        network_info = openapi_client.models.network_info.NetworkInfo(
                            imei = '', 
                            meid = '', 
                            network_operator_name = '', 
                            telephony_infos = [
                                openapi_client.models.telephony_info.TelephonyInfo(
                                    carrier_name = '', 
                                    phone_number = '', )
                                ], 
                            wifi_mac_address = '', ), 
                        non_compliance_details = [
                            openapi_client.models.non_compliance_detail.NonComplianceDetail(
                                current_value = null, 
                                field_path = '', 
                                installation_failure_reason = 'INSTALLATION_FAILURE_REASON_UNSPECIFIED', 
                                non_compliance_reason = 'NON_COMPLIANCE_REASON_UNSPECIFIED', 
                                package_name = '', 
                                setting_name = '', 
                                specific_non_compliance_context = openapi_client.models.specific_non_compliance_context.SpecificNonComplianceContext(
                                    onc_wifi_context = openapi_client.models.onc_wifi_context.OncWifiContext(
                                        wifi_guid = '', ), 
                                    password_policies_context = openapi_client.models.password_policies_context.PasswordPoliciesContext(
                                        password_policy_scope = 'SCOPE_UNSPECIFIED', ), ), 
                                specific_non_compliance_reason = 'SPECIFIC_NON_COMPLIANCE_REASON_UNSPECIFIED', )
                            ], 
                        ownership = 'OWNERSHIP_UNSPECIFIED', 
                        policy_compliant = True, 
                        policy_name = '', 
                        power_management_events = [
                            openapi_client.models.power_management_event.PowerManagementEvent(
                                battery_level = 1.337, 
                                create_time = '', 
                                event_type = 'POWER_MANAGEMENT_EVENT_TYPE_UNSPECIFIED', )
                            ], 
                        previous_device_names = [
                            ''
                            ], 
                        security_posture = openapi_client.models.security_posture.SecurityPosture(
                            device_posture = 'POSTURE_UNSPECIFIED', 
                            posture_details = [
                                openapi_client.models.posture_detail.PostureDetail(
                                    advice = [
                                        openapi_client.models.user_facing_message.UserFacingMessage(
                                            default_message = '', )
                                        ], 
                                    security_risk = 'SECURITY_RISK_UNSPECIFIED', )
                                ], ), 
                        software_info = openapi_client.models.software_info.SoftwareInfo(
                            android_build_number = '', 
                            android_build_time = '', 
                            android_device_policy_version_code = 56, 
                            android_device_policy_version_name = '', 
                            android_version = '', 
                            bootloader_version = '', 
                            device_build_signature = '', 
                            device_kernel_version = '', 
                            primary_language_code = '', 
                            security_patch_level = '', 
                            system_update_info = openapi_client.models.system_update_info.SystemUpdateInfo(
                                update_received_time = '', 
                                update_status = 'UPDATE_STATUS_UNKNOWN', ), ), 
                        state = 'DEVICE_STATE_UNSPECIFIED', 
                        system_properties = {
                            'key' : ''
                            }, 
                        user = openapi_client.models.user.User(
                            account_identifier = '', ), 
                        user_name = '', )
                    ],
                next_page_token = ''
            )
        else:
            return ListDevicesResponse(
        )
        """

    def testListDevicesResponse(self):
        """Test ListDevicesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

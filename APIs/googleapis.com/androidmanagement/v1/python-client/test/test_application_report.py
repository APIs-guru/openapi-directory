# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.application_report import ApplicationReport

class TestApplicationReport(unittest.TestCase):
    """ApplicationReport unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApplicationReport:
        """Test ApplicationReport
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApplicationReport`
        """
        model = ApplicationReport()
        if include_optional:
            return ApplicationReport(
                application_source = 'APPLICATION_SOURCE_UNSPECIFIED',
                display_name = '',
                events = [
                    openapi_client.models.application_event.ApplicationEvent(
                        create_time = '', 
                        event_type = 'APPLICATION_EVENT_TYPE_UNSPECIFIED', )
                    ],
                installer_package_name = '',
                keyed_app_states = [
                    openapi_client.models.keyed_app_state.KeyedAppState(
                        create_time = '', 
                        data = '', 
                        key = '', 
                        last_update_time = '', 
                        message = '', 
                        severity = 'SEVERITY_UNSPECIFIED', )
                    ],
                package_name = '',
                package_sha256_hash = '',
                signing_key_cert_fingerprints = [
                    ''
                    ],
                state = 'APPLICATION_STATE_UNSPECIFIED',
                user_facing_type = 'USER_FACING_TYPE_UNSPECIFIED',
                version_code = 56,
                version_name = ''
            )
        else:
            return ApplicationReport(
        )
        """

    def testApplicationReport(self):
        """Test ApplicationReport"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_reporting_settings import ApplicationReportingSettings
from typing import Optional, Set
from typing_extensions import Self

class StatusReportingSettings(BaseModel):
    """
    Settings controlling the behavior of status reports.
    """ # noqa: E501
    application_reporting_settings: Optional[ApplicationReportingSettings] = Field(default=None, alias="applicationReportingSettings")
    application_reports_enabled: Optional[StrictBool] = Field(default=None, description="Whether app reports are enabled.", alias="applicationReportsEnabled")
    common_criteria_mode_enabled: Optional[StrictBool] = Field(default=None, description="Whether Common Criteria Mode reporting is enabled.", alias="commonCriteriaModeEnabled")
    device_settings_enabled: Optional[StrictBool] = Field(default=None, description="Whether device settings reporting is enabled.", alias="deviceSettingsEnabled")
    display_info_enabled: Optional[StrictBool] = Field(default=None, description="Whether displays reporting is enabled. Report data is not available for personally owned devices with work profiles.", alias="displayInfoEnabled")
    hardware_status_enabled: Optional[StrictBool] = Field(default=None, description="Whether hardware status reporting is enabled. Report data is not available for personally owned devices with work profiles.", alias="hardwareStatusEnabled")
    memory_info_enabled: Optional[StrictBool] = Field(default=None, description="Whether memory event reporting is enabled.", alias="memoryInfoEnabled")
    network_info_enabled: Optional[StrictBool] = Field(default=None, description="Whether network info reporting is enabled.", alias="networkInfoEnabled")
    power_management_events_enabled: Optional[StrictBool] = Field(default=None, description="Whether power management event reporting is enabled. Report data is not available for personally owned devices with work profiles.", alias="powerManagementEventsEnabled")
    software_info_enabled: Optional[StrictBool] = Field(default=None, description="Whether software info reporting is enabled.", alias="softwareInfoEnabled")
    system_properties_enabled: Optional[StrictBool] = Field(default=None, description="Whether system properties reporting is enabled.", alias="systemPropertiesEnabled")
    __properties: ClassVar[List[str]] = ["applicationReportingSettings", "applicationReportsEnabled", "commonCriteriaModeEnabled", "deviceSettingsEnabled", "displayInfoEnabled", "hardwareStatusEnabled", "memoryInfoEnabled", "networkInfoEnabled", "powerManagementEventsEnabled", "softwareInfoEnabled", "systemPropertiesEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatusReportingSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of application_reporting_settings
        if self.application_reporting_settings:
            _dict['applicationReportingSettings'] = self.application_reporting_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatusReportingSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationReportingSettings": ApplicationReportingSettings.from_dict(obj["applicationReportingSettings"]) if obj.get("applicationReportingSettings") is not None else None,
            "applicationReportsEnabled": obj.get("applicationReportsEnabled"),
            "commonCriteriaModeEnabled": obj.get("commonCriteriaModeEnabled"),
            "deviceSettingsEnabled": obj.get("deviceSettingsEnabled"),
            "displayInfoEnabled": obj.get("displayInfoEnabled"),
            "hardwareStatusEnabled": obj.get("hardwareStatusEnabled"),
            "memoryInfoEnabled": obj.get("memoryInfoEnabled"),
            "networkInfoEnabled": obj.get("networkInfoEnabled"),
            "powerManagementEventsEnabled": obj.get("powerManagementEventsEnabled"),
            "softwareInfoEnabled": obj.get("softwareInfoEnabled"),
            "systemPropertiesEnabled": obj.get("systemPropertiesEnabled")
        })
        return _obj



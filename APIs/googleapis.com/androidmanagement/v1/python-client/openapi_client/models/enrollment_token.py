# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class EnrollmentToken(BaseModel):
    """
    An enrollment token.
    """ # noqa: E501
    additional_data: Optional[StrictStr] = Field(default=None, description="Optional, arbitrary data associated with the enrollment token. This could contain, for example, the ID of an org unit the device is assigned to after enrollment. After a device enrolls with the token, this data will be exposed in the enrollment_token_data field of the Device resource. The data must be 1024 characters or less; otherwise, the creation request will fail.", alias="additionalData")
    allow_personal_usage: Optional[StrictStr] = Field(default=None, description="Controls whether personal usage is allowed on a device provisioned with this enrollment token.For company-owned devices: Enabling personal usage allows the user to set up a work profile on the device. Disabling personal usage requires the user provision the device as a fully managed device.For personally-owned devices: Enabling personal usage allows the user to set up a work profile on the device. Disabling personal usage will prevent the device from provisioning. Personal usage cannot be disabled on personally-owned device.", alias="allowPersonalUsage")
    duration: Optional[StrictStr] = Field(default=None, description="The length of time the enrollment token is valid, ranging from 1 minute to Durations.MAX_VALUE (https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/util/Durations.html#MAX_VALUE), approximately 10,000 years. If not specified, the default duration is 1 hour. Please note that if requested duration causes the resulting expiration_timestamp to exceed Timestamps.MAX_VALUE (https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/util/Timestamps.html#MAX_VALUE), then expiration_timestamp is coerced to Timestamps.MAX_VALUE.")
    expiration_timestamp: Optional[StrictStr] = Field(default=None, description="The expiration time of the token. This is a read-only field generated by the server.", alias="expirationTimestamp")
    name: Optional[StrictStr] = Field(default=None, description="The name of the enrollment token, which is generated by the server during creation, in the form enterprises/{enterpriseId}/enrollmentTokens/{enrollmentTokenId}.")
    one_time_only: Optional[StrictBool] = Field(default=None, description="Whether the enrollment token is for one time use only. If the flag is set to true, only one device can use it for registration.", alias="oneTimeOnly")
    policy_name: Optional[StrictStr] = Field(default=None, description="The name of the policy initially applied to the enrolled device, in the form enterprises/{enterpriseId}/policies/{policyId}. If not specified, the policy_name for the device’s user is applied. If user_name is also not specified, enterprises/{enterpriseId}/policies/default is applied by default. When updating this field, you can specify only the policyId as long as the policyId doesn’t contain any slashes. The rest of the policy name will be inferred.", alias="policyName")
    qr_code: Optional[StrictStr] = Field(default=None, description="A JSON string whose UTF-8 representation can be used to generate a QR code to enroll a device with this enrollment token. To enroll a device using NFC, the NFC record must contain a serialized java.util.Properties representation of the properties in the JSON.", alias="qrCode")
    user: Optional[User] = None
    value: Optional[StrictStr] = Field(default=None, description="The token value that's passed to the device and authorizes the device to enroll. This is a read-only field generated by the server.")
    __properties: ClassVar[List[str]] = ["additionalData", "allowPersonalUsage", "duration", "expirationTimestamp", "name", "oneTimeOnly", "policyName", "qrCode", "user", "value"]

    @field_validator('allow_personal_usage')
    def allow_personal_usage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALLOW_PERSONAL_USAGE_UNSPECIFIED', 'PERSONAL_USAGE_ALLOWED', 'PERSONAL_USAGE_DISALLOWED']):
            raise ValueError("must be one of enum values ('ALLOW_PERSONAL_USAGE_UNSPECIFIED', 'PERSONAL_USAGE_ALLOWED', 'PERSONAL_USAGE_DISALLOWED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnrollmentToken from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnrollmentToken from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalData": obj.get("additionalData"),
            "allowPersonalUsage": obj.get("allowPersonalUsage"),
            "duration": obj.get("duration"),
            "expirationTimestamp": obj.get("expirationTimestamp"),
            "name": obj.get("name"),
            "oneTimeOnly": obj.get("oneTimeOnly"),
            "policyName": obj.get("policyName"),
            "qrCode": obj.get("qrCode"),
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "value": obj.get("value")
        })
        return _obj



# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.personal_application_policy import PersonalApplicationPolicy
from typing import Optional, Set
from typing_extensions import Self

class PersonalUsagePolicies(BaseModel):
    """
    Policies controlling personal usage on a company-owned device with a work profile.
    """ # noqa: E501
    account_types_with_management_disabled: Optional[List[StrictStr]] = Field(default=None, description="Account types that can't be managed by the user.", alias="accountTypesWithManagementDisabled")
    camera_disabled: Optional[StrictBool] = Field(default=None, description="If true, the camera is disabled on the personal profile.", alias="cameraDisabled")
    max_days_with_work_off: Optional[StrictInt] = Field(default=None, description="Controls how long the work profile can stay off. The minimum duration must be at least 3 days. Other details are as follows: - If the duration is set to 0, the feature is turned off. - If the duration is set to a value smaller than the minimum duration, the feature returns an error. *Note:* If you want to avoid personal profiles being suspended during long periods of off-time, you can temporarily set a large value for this parameter.", alias="maxDaysWithWorkOff")
    personal_applications: Optional[List[PersonalApplicationPolicy]] = Field(default=None, description="Policy applied to applications in the personal profile.", alias="personalApplications")
    personal_play_store_mode: Optional[StrictStr] = Field(default=None, description="Used together with personalApplications to control how apps in the personal profile are allowed or blocked.", alias="personalPlayStoreMode")
    screen_capture_disabled: Optional[StrictBool] = Field(default=None, description="If true, screen capture is disabled for all users.", alias="screenCaptureDisabled")
    __properties: ClassVar[List[str]] = ["accountTypesWithManagementDisabled", "cameraDisabled", "maxDaysWithWorkOff", "personalApplications", "personalPlayStoreMode", "screenCaptureDisabled"]

    @field_validator('personal_play_store_mode')
    def personal_play_store_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLAY_STORE_MODE_UNSPECIFIED', 'BLACKLIST', 'BLOCKLIST', 'ALLOWLIST']):
            raise ValueError("must be one of enum values ('PLAY_STORE_MODE_UNSPECIFIED', 'BLACKLIST', 'BLOCKLIST', 'ALLOWLIST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersonalUsagePolicies from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in personal_applications (list)
        _items = []
        if self.personal_applications:
            for _item_personal_applications in self.personal_applications:
                if _item_personal_applications:
                    _items.append(_item_personal_applications.to_dict())
            _dict['personalApplications'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersonalUsagePolicies from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountTypesWithManagementDisabled": obj.get("accountTypesWithManagementDisabled"),
            "cameraDisabled": obj.get("cameraDisabled"),
            "maxDaysWithWorkOff": obj.get("maxDaysWithWorkOff"),
            "personalApplications": [PersonalApplicationPolicy.from_dict(_item) for _item in obj["personalApplications"]] if obj.get("personalApplications") is not None else None,
            "personalPlayStoreMode": obj.get("personalPlayStoreMode"),
            "screenCaptureDisabled": obj.get("screenCaptureDisabled")
        })
        return _obj



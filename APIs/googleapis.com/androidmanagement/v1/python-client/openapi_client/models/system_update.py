# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.freeze_period import FreezePeriod
from typing import Optional, Set
from typing_extensions import Self

class SystemUpdate(BaseModel):
    """
    Configuration for managing system updates
    """ # noqa: E501
    end_minutes: Optional[StrictInt] = Field(default=None, description="If the type is WINDOWED, the end of the maintenance window, measured as the number of minutes after midnight in device's local time. This value must be between 0 and 1439, inclusive. If this value is less than start_minutes, then the maintenance window spans midnight. If the maintenance window specified is smaller than 30 minutes, the actual window is extended to 30 minutes beyond the start time.", alias="endMinutes")
    freeze_periods: Optional[List[FreezePeriod]] = Field(default=None, description="An annually repeating time period in which over-the-air (OTA) system updates are postponed to freeze the OS version running on a device. To prevent freezing the device indefinitely, each freeze period must be separated by at least 60 days.", alias="freezePeriods")
    start_minutes: Optional[StrictInt] = Field(default=None, description="If the type is WINDOWED, the start of the maintenance window, measured as the number of minutes after midnight in the device's local time. This value must be between 0 and 1439, inclusive.", alias="startMinutes")
    type: Optional[StrictStr] = Field(default=None, description="The type of system update to configure.")
    __properties: ClassVar[List[str]] = ["endMinutes", "freezePeriods", "startMinutes", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SYSTEM_UPDATE_TYPE_UNSPECIFIED', 'AUTOMATIC', 'WINDOWED', 'POSTPONE']):
            raise ValueError("must be one of enum values ('SYSTEM_UPDATE_TYPE_UNSPECIFIED', 'AUTOMATIC', 'WINDOWED', 'POSTPONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SystemUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in freeze_periods (list)
        _items = []
        if self.freeze_periods:
            for _item_freeze_periods in self.freeze_periods:
                if _item_freeze_periods:
                    _items.append(_item_freeze_periods.to_dict())
            _dict['freezePeriods'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SystemUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endMinutes": obj.get("endMinutes"),
            "freezePeriods": [FreezePeriod.from_dict(_item) for _item in obj["freezePeriods"]] if obj.get("freezePeriods") is not None else None,
            "startMinutes": obj.get("startMinutes"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AppProcessInfo(BaseModel):
    """
    Information about a process. It contains process name, start time, app Uid, app Pid, seinfo tag, hash of the base APK.
    """ # noqa: E501
    apk_sha256_hash: Optional[StrictStr] = Field(default=None, description="SHA-256 hash of the base APK, in hexadecimal format.", alias="apkSha256Hash")
    package_names: Optional[List[StrictStr]] = Field(default=None, description="Package names of all packages that are associated with the particular user ID. In most cases, this will be a single package name, the package that has been assigned that user ID. If multiple application share a UID then all packages sharing UID will be included.", alias="packageNames")
    pid: Optional[StrictInt] = Field(default=None, description="Process ID.")
    process_name: Optional[StrictStr] = Field(default=None, description="Process name.", alias="processName")
    seinfo: Optional[StrictStr] = Field(default=None, description="SELinux policy info.")
    start_time: Optional[StrictStr] = Field(default=None, description="Process start time.", alias="startTime")
    uid: Optional[StrictInt] = Field(default=None, description="UID of the package.")
    __properties: ClassVar[List[str]] = ["apkSha256Hash", "packageNames", "pid", "processName", "seinfo", "startTime", "uid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppProcessInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppProcessInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apkSha256Hash": obj.get("apkSha256Hash"),
            "packageNames": obj.get("packageNames"),
            "pid": obj.get("pid"),
            "processName": obj.get("processName"),
            "seinfo": obj.get("seinfo"),
            "startTime": obj.get("startTime"),
            "uid": obj.get("uid")
        })
        return _obj



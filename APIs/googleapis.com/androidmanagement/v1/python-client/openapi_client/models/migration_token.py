# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MigrationToken(BaseModel):
    """
    A token to initiate the migration of a device from being managed by a third-party DPC to being managed by Android Management API. A migration token is valid only for a single device.
    """ # noqa: E501
    additional_data: Optional[StrictStr] = Field(default=None, description="Immutable. Optional EMM-specified additional data. Once the device is migrated this will be populated in the migrationAdditionalData field of the Device resource. This must be at most 1024 characters.", alias="additionalData")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when this migration token was created.", alias="createTime")
    device: Optional[StrictStr] = Field(default=None, description="Output only. Once this migration token is used to migrate a device, the name of the resulting Device resource will be populated here, in the form enterprises/{enterprise}/devices/{device}.")
    device_id: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The id of the device, as in the Play EMM API. This corresponds to the deviceId parameter in Play EMM API's Devices.get (https://developers.google.com/android/work/play/emm-api/v1/devices/get#parameters) call.", alias="deviceId")
    expire_time: Optional[StrictStr] = Field(default=None, description="Immutable. The time when this migration token expires. This can be at most seven days from the time of creation. The migration token is deleted seven days after it expires.", alias="expireTime")
    management_mode: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The management mode of the device or profile being migrated.", alias="managementMode")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of the migration token, which is generated by the server during creation, in the form enterprises/{enterprise}/migrationTokens/{migration_token}.")
    policy: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The name of the policy initially applied to the enrolled device, in the form enterprises/{enterprise}/policies/{policy}.")
    ttl: Optional[StrictStr] = Field(default=None, description="Input only. The time that this migration token is valid for. This is input-only, and for returning a migration token the server will populate the expireTime field. This can be at most seven days. The default is seven days.")
    user_id: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The user id of the Managed Google Play account on the device, as in the Play EMM API. This corresponds to the userId parameter in Play EMM API's Devices.get (https://developers.google.com/android/work/play/emm-api/v1/devices/get#parameters) call.", alias="userId")
    value: Optional[StrictStr] = Field(default=None, description="Output only. The value of the migration token.")
    __properties: ClassVar[List[str]] = ["additionalData", "createTime", "device", "deviceId", "expireTime", "managementMode", "name", "policy", "ttl", "userId", "value"]

    @field_validator('management_mode')
    def management_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MANAGEMENT_MODE_UNSPECIFIED', 'WORK_PROFILE_PERSONALLY_OWNED', 'WORK_PROFILE_COMPANY_OWNED', 'FULLY_MANAGED']):
            raise ValueError("must be one of enum values ('MANAGEMENT_MODE_UNSPECIFIED', 'WORK_PROFILE_PERSONALLY_OWNED', 'WORK_PROFILE_COMPANY_OWNED', 'FULLY_MANAGED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MigrationToken from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "device",
            "name",
            "value",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MigrationToken from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalData": obj.get("additionalData"),
            "createTime": obj.get("createTime"),
            "device": obj.get("device"),
            "deviceId": obj.get("deviceId"),
            "expireTime": obj.get("expireTime"),
            "managementMode": obj.get("managementMode"),
            "name": obj.get("name"),
            "policy": obj.get("policy"),
            "ttl": obj.get("ttl"),
            "userId": obj.get("userId"),
            "value": obj.get("value")
        })
        return _obj



# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.usage_log_event import UsageLogEvent
from typing import Optional, Set
from typing_extensions import Self

class BatchUsageLogEvents(BaseModel):
    """
    Batched event logs of events from the device.
    """ # noqa: E501
    device: Optional[StrictStr] = Field(default=None, description="The name of the device in the form ‘enterprises/{enterpriseId}/devices/{deviceId}’")
    retrieval_time: Optional[StrictStr] = Field(default=None, description="The device timestamp when the batch of events were collected from the device.", alias="retrievalTime")
    usage_log_events: Optional[List[UsageLogEvent]] = Field(default=None, description="The list of UsageLogEvent that were reported by the device, sorted chronologically by the event time.", alias="usageLogEvents")
    user: Optional[StrictStr] = Field(default=None, description="The resource name of the user that owns this device in the form ‘enterprises/{enterpriseId}/users/{userId}’.")
    __properties: ClassVar[List[str]] = ["device", "retrievalTime", "usageLogEvents", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BatchUsageLogEvents from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in usage_log_events (list)
        _items = []
        if self.usage_log_events:
            for _item_usage_log_events in self.usage_log_events:
                if _item_usage_log_events:
                    _items.append(_item_usage_log_events.to_dict())
            _dict['usageLogEvents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BatchUsageLogEvents from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "device": obj.get("device"),
            "retrievalTime": obj.get("retrievalTime"),
            "usageLogEvents": [UsageLogEvent.from_dict(_item) for _item in obj["usageLogEvents"]] if obj.get("usageLogEvents") is not None else None,
            "user": obj.get("user")
        })
        return _obj



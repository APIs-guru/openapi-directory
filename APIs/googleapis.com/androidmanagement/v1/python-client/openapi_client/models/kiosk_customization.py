# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class KioskCustomization(BaseModel):
    """
    Settings controlling the behavior of a device in kiosk mode. To enable kiosk mode, set kioskCustomLauncherEnabled to true or specify an app in the policy with installType KIOSK.
    """ # noqa: E501
    device_settings: Optional[StrictStr] = Field(default=None, description="Specifies whether the Settings app is allowed in kiosk mode.", alias="deviceSettings")
    power_button_actions: Optional[StrictStr] = Field(default=None, description="Sets the behavior of a device in kiosk mode when a user presses and holds (long-presses) the Power button.", alias="powerButtonActions")
    status_bar: Optional[StrictStr] = Field(default=None, description="Specifies whether system info and notifications are disabled in kiosk mode.", alias="statusBar")
    system_error_warnings: Optional[StrictStr] = Field(default=None, description="Specifies whether system error dialogs for crashed or unresponsive apps are blocked in kiosk mode. When blocked, the system will force-stop the app as if the user chooses the \"close app\" option on the UI.", alias="systemErrorWarnings")
    system_navigation: Optional[StrictStr] = Field(default=None, description="Specifies which navigation features are enabled (e.g. Home, Overview buttons) in kiosk mode.", alias="systemNavigation")
    __properties: ClassVar[List[str]] = ["deviceSettings", "powerButtonActions", "statusBar", "systemErrorWarnings", "systemNavigation"]

    @field_validator('device_settings')
    def device_settings_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEVICE_SETTINGS_UNSPECIFIED', 'SETTINGS_ACCESS_ALLOWED', 'SETTINGS_ACCESS_BLOCKED']):
            raise ValueError("must be one of enum values ('DEVICE_SETTINGS_UNSPECIFIED', 'SETTINGS_ACCESS_ALLOWED', 'SETTINGS_ACCESS_BLOCKED')")
        return value

    @field_validator('power_button_actions')
    def power_button_actions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['POWER_BUTTON_ACTIONS_UNSPECIFIED', 'POWER_BUTTON_AVAILABLE', 'POWER_BUTTON_BLOCKED']):
            raise ValueError("must be one of enum values ('POWER_BUTTON_ACTIONS_UNSPECIFIED', 'POWER_BUTTON_AVAILABLE', 'POWER_BUTTON_BLOCKED')")
        return value

    @field_validator('status_bar')
    def status_bar_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATUS_BAR_UNSPECIFIED', 'NOTIFICATIONS_AND_SYSTEM_INFO_ENABLED', 'NOTIFICATIONS_AND_SYSTEM_INFO_DISABLED', 'SYSTEM_INFO_ONLY']):
            raise ValueError("must be one of enum values ('STATUS_BAR_UNSPECIFIED', 'NOTIFICATIONS_AND_SYSTEM_INFO_ENABLED', 'NOTIFICATIONS_AND_SYSTEM_INFO_DISABLED', 'SYSTEM_INFO_ONLY')")
        return value

    @field_validator('system_error_warnings')
    def system_error_warnings_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SYSTEM_ERROR_WARNINGS_UNSPECIFIED', 'ERROR_AND_WARNINGS_ENABLED', 'ERROR_AND_WARNINGS_MUTED']):
            raise ValueError("must be one of enum values ('SYSTEM_ERROR_WARNINGS_UNSPECIFIED', 'ERROR_AND_WARNINGS_ENABLED', 'ERROR_AND_WARNINGS_MUTED')")
        return value

    @field_validator('system_navigation')
    def system_navigation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SYSTEM_NAVIGATION_UNSPECIFIED', 'NAVIGATION_ENABLED', 'NAVIGATION_DISABLED', 'HOME_BUTTON_ONLY']):
            raise ValueError("must be one of enum values ('SYSTEM_NAVIGATION_UNSPECIFIED', 'NAVIGATION_ENABLED', 'NAVIGATION_DISABLED', 'HOME_BUTTON_ONLY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KioskCustomization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KioskCustomization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceSettings": obj.get("deviceSettings"),
            "powerButtonActions": obj.get("powerButtonActions"),
            "statusBar": obj.get("statusBar"),
            "systemErrorWarnings": obj.get("systemErrorWarnings"),
            "systemNavigation": obj.get("systemNavigation")
        })
        return _obj



# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class HardwareStatus(BaseModel):
    """
    Hardware status. Temperatures may be compared to the temperature thresholds available in hardwareInfo to determine hardware health.
    """ # noqa: E501
    battery_temperatures: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Current battery temperatures in Celsius for each battery on the device.", alias="batteryTemperatures")
    cpu_temperatures: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Current CPU temperatures in Celsius for each CPU on the device.", alias="cpuTemperatures")
    cpu_usages: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="CPU usages in percentage for each core available on the device. Usage is 0 for each unplugged core. Empty array implies that CPU usage is not supported in the system.", alias="cpuUsages")
    create_time: Optional[StrictStr] = Field(default=None, description="The time the measurements were taken.", alias="createTime")
    fan_speeds: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Fan speeds in RPM for each fan on the device. Empty array means that there are no fans or fan speed is not supported on the system.", alias="fanSpeeds")
    gpu_temperatures: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Current GPU temperatures in Celsius for each GPU on the device.", alias="gpuTemperatures")
    skin_temperatures: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Current device skin temperatures in Celsius.", alias="skinTemperatures")
    __properties: ClassVar[List[str]] = ["batteryTemperatures", "cpuTemperatures", "cpuUsages", "createTime", "fanSpeeds", "gpuTemperatures", "skinTemperatures"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HardwareStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HardwareStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "batteryTemperatures": obj.get("batteryTemperatures"),
            "cpuTemperatures": obj.get("cpuTemperatures"),
            "cpuUsages": obj.get("cpuUsages"),
            "createTime": obj.get("createTime"),
            "fanSpeeds": obj.get("fanSpeeds"),
            "gpuTemperatures": obj.get("gpuTemperatures"),
            "skinTemperatures": obj.get("skinTemperatures")
        })
        return _obj



# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceConnectivityManagement(BaseModel):
    """
    Covers controls for device connectivity such as Wi-Fi, USB data access, keyboard/mouse connections, and more.
    """ # noqa: E501
    configure_wifi: Optional[StrictStr] = Field(default=None, description="Controls Wi-Fi configuring privileges. Based on the option set, user will have either full or limited or no control in configuring Wi-Fi networks.", alias="configureWifi")
    tethering_settings: Optional[StrictStr] = Field(default=None, description="Controls tethering settings. Based on the value set, the user is partially or fully disallowed from using different forms of tethering.", alias="tetheringSettings")
    usb_data_access: Optional[StrictStr] = Field(default=None, description="Controls what files and/or data can be transferred via USB. Supported only on company-owned devices.", alias="usbDataAccess")
    wifi_direct_settings: Optional[StrictStr] = Field(default=None, description="Controls configuring and using Wi-Fi direct settings. Supported on company-owned devices running Android 13 and above.", alias="wifiDirectSettings")
    __properties: ClassVar[List[str]] = ["configureWifi", "tetheringSettings", "usbDataAccess", "wifiDirectSettings"]

    @field_validator('configure_wifi')
    def configure_wifi_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONFIGURE_WIFI_UNSPECIFIED', 'ALLOW_CONFIGURING_WIFI', 'DISALLOW_ADD_WIFI_CONFIG', 'DISALLOW_CONFIGURING_WIFI']):
            raise ValueError("must be one of enum values ('CONFIGURE_WIFI_UNSPECIFIED', 'ALLOW_CONFIGURING_WIFI', 'DISALLOW_ADD_WIFI_CONFIG', 'DISALLOW_CONFIGURING_WIFI')")
        return value

    @field_validator('tethering_settings')
    def tethering_settings_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TETHERING_SETTINGS_UNSPECIFIED', 'ALLOW_ALL_TETHERING', 'DISALLOW_WIFI_TETHERING', 'DISALLOW_ALL_TETHERING']):
            raise ValueError("must be one of enum values ('TETHERING_SETTINGS_UNSPECIFIED', 'ALLOW_ALL_TETHERING', 'DISALLOW_WIFI_TETHERING', 'DISALLOW_ALL_TETHERING')")
        return value

    @field_validator('usb_data_access')
    def usb_data_access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['USB_DATA_ACCESS_UNSPECIFIED', 'ALLOW_USB_DATA_TRANSFER', 'DISALLOW_USB_FILE_TRANSFER', 'DISALLOW_USB_DATA_TRANSFER']):
            raise ValueError("must be one of enum values ('USB_DATA_ACCESS_UNSPECIFIED', 'ALLOW_USB_DATA_TRANSFER', 'DISALLOW_USB_FILE_TRANSFER', 'DISALLOW_USB_DATA_TRANSFER')")
        return value

    @field_validator('wifi_direct_settings')
    def wifi_direct_settings_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WIFI_DIRECT_SETTINGS_UNSPECIFIED', 'ALLOW_WIFI_DIRECT', 'DISALLOW_WIFI_DIRECT']):
            raise ValueError("must be one of enum values ('WIFI_DIRECT_SETTINGS_UNSPECIFIED', 'ALLOW_WIFI_DIRECT', 'DISALLOW_WIFI_DIRECT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceConnectivityManagement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceConnectivityManagement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configureWifi": obj.get("configureWifi"),
            "tetheringSettings": obj.get("tetheringSettings"),
            "usbDataAccess": obj.get("usbDataAccess"),
            "wifiDirectSettings": obj.get("wifiDirectSettings")
        })
        return _obj



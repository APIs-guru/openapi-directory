# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.extension_config import ExtensionConfig
from openapi_client.models.install_constraint import InstallConstraint
from openapi_client.models.managed_configuration_template import ManagedConfigurationTemplate
from openapi_client.models.permission_grant import PermissionGrant
from typing import Optional, Set
from typing_extensions import Self

class ApplicationPolicy(BaseModel):
    """
    Policy for an individual app. Note: Application availability on a given device cannot be changed using this policy if installAppsDisabled is enabled. The maximum number of applications that you can specify per policy is 3,000.
    """ # noqa: E501
    accessible_track_ids: Optional[List[StrictStr]] = Field(default=None, description="List of the app’s track IDs that a device belonging to the enterprise can access. If the list contains multiple track IDs, devices receive the latest version among all accessible tracks. If the list contains no track IDs, devices only have access to the app’s production track. More details about each track are available in AppTrackInfo.", alias="accessibleTrackIds")
    always_on_vpn_lockdown_exemption: Optional[StrictStr] = Field(default=None, description="Specifies whether the app is allowed networking when the VPN is not connected and alwaysOnVpnPackage.lockdownEnabled is enabled. If set to VPN_LOCKDOWN_ENFORCED, the app is not allowed networking, and if set to VPN_LOCKDOWN_EXEMPTION, the app is allowed networking. Only supported on devices running Android 10 and above. If this is not supported by the device, the device will contain a NonComplianceDetail with non_compliance_reason set to API_LEVEL and a fieldPath. If this is not applicable to the app, the device will contain a NonComplianceDetail with non_compliance_reason set to UNSUPPORTED and a fieldPath. The fieldPath is set to applications[i].alwaysOnVpnLockdownExemption, where i is the index of the package in the applications policy.", alias="alwaysOnVpnLockdownExemption")
    auto_update_mode: Optional[StrictStr] = Field(default=None, description="Controls the auto-update mode for the app.", alias="autoUpdateMode")
    connected_work_and_personal_app: Optional[StrictStr] = Field(default=None, description="Controls whether the app can communicate with itself across a device’s work and personal profiles, subject to user consent.", alias="connectedWorkAndPersonalApp")
    credential_provider_policy: Optional[StrictStr] = Field(default=None, description="Optional. Whether the app is allowed to act as a credential provider on Android 14 and above.", alias="credentialProviderPolicy")
    default_permission_policy: Optional[StrictStr] = Field(default=None, description="The default policy for all permissions requested by the app. If specified, this overrides the policy-level default_permission_policy which applies to all apps. It does not override the permission_grants which applies to all apps.", alias="defaultPermissionPolicy")
    delegated_scopes: Optional[List[StrictStr]] = Field(default=None, description="The scopes delegated to the app from Android Device Policy. These provide additional privileges for the applications they are applied to.", alias="delegatedScopes")
    disabled: Optional[StrictBool] = Field(default=None, description="Whether the app is disabled. When disabled, the app data is still preserved.")
    extension_config: Optional[ExtensionConfig] = Field(default=None, alias="extensionConfig")
    install_constraint: Optional[List[InstallConstraint]] = Field(default=None, description="Optional. The constraints for installing the app. You can specify a maximum of one InstallConstraint. Multiple constraints are rejected.", alias="installConstraint")
    install_priority: Optional[StrictInt] = Field(default=None, description="Optional. Amongst apps with installType set to: FORCE_INSTALLED PREINSTALLEDthis controls the relative priority of installation. A value of 0 (default) means this app has no priority over other apps. For values between 1 and 10,000, a lower value means a higher priority. Values outside of the range 0 to 10,000 inclusive are rejected.", alias="installPriority")
    install_type: Optional[StrictStr] = Field(default=None, description="The type of installation to perform.", alias="installType")
    lock_task_allowed: Optional[StrictBool] = Field(default=None, description="Whether the app is allowed to lock itself in full-screen mode. DEPRECATED. Use InstallType KIOSK or kioskCustomLauncherEnabled to configure a dedicated device.", alias="lockTaskAllowed")
    managed_configuration: Optional[Dict[str, Any]] = Field(default=None, description="Managed configuration applied to the app. The format for the configuration is dictated by the ManagedProperty values supported by the app. Each field name in the managed configuration must match the key field of the ManagedProperty. The field value must be compatible with the type of the ManagedProperty: *type* *JSON value* BOOL true or false STRING string INTEGER number CHOICE string MULTISELECT array of strings HIDDEN string BUNDLE_ARRAY array of objects ", alias="managedConfiguration")
    managed_configuration_template: Optional[ManagedConfigurationTemplate] = Field(default=None, alias="managedConfigurationTemplate")
    minimum_version_code: Optional[StrictInt] = Field(default=None, description="The minimum version of the app that runs on the device. If set, the device attempts to update the app to at least this version code. If the app is not up-to-date, the device will contain a NonComplianceDetail with non_compliance_reason set to APP_NOT_UPDATED. The app must already be published to Google Play with a version code greater than or equal to this value. At most 20 apps may specify a minimum version code per policy.", alias="minimumVersionCode")
    package_name: Optional[StrictStr] = Field(default=None, description="The package name of the app. For example, com.google.android.youtube for the YouTube app.", alias="packageName")
    permission_grants: Optional[List[PermissionGrant]] = Field(default=None, description="Explicit permission grants or denials for the app. These values override the default_permission_policy and permission_grants which apply to all apps.", alias="permissionGrants")
    work_profile_widgets: Optional[StrictStr] = Field(default=None, description="Specifies whether the app installed in the work profile is allowed to add widgets to the home screen.", alias="workProfileWidgets")
    __properties: ClassVar[List[str]] = ["accessibleTrackIds", "alwaysOnVpnLockdownExemption", "autoUpdateMode", "connectedWorkAndPersonalApp", "credentialProviderPolicy", "defaultPermissionPolicy", "delegatedScopes", "disabled", "extensionConfig", "installConstraint", "installPriority", "installType", "lockTaskAllowed", "managedConfiguration", "managedConfigurationTemplate", "minimumVersionCode", "packageName", "permissionGrants", "workProfileWidgets"]

    @field_validator('always_on_vpn_lockdown_exemption')
    def always_on_vpn_lockdown_exemption_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALWAYS_ON_VPN_LOCKDOWN_EXEMPTION_UNSPECIFIED', 'VPN_LOCKDOWN_ENFORCED', 'VPN_LOCKDOWN_EXEMPTION']):
            raise ValueError("must be one of enum values ('ALWAYS_ON_VPN_LOCKDOWN_EXEMPTION_UNSPECIFIED', 'VPN_LOCKDOWN_ENFORCED', 'VPN_LOCKDOWN_EXEMPTION')")
        return value

    @field_validator('auto_update_mode')
    def auto_update_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUTO_UPDATE_MODE_UNSPECIFIED', 'AUTO_UPDATE_DEFAULT', 'AUTO_UPDATE_POSTPONED', 'AUTO_UPDATE_HIGH_PRIORITY']):
            raise ValueError("must be one of enum values ('AUTO_UPDATE_MODE_UNSPECIFIED', 'AUTO_UPDATE_DEFAULT', 'AUTO_UPDATE_POSTPONED', 'AUTO_UPDATE_HIGH_PRIORITY')")
        return value

    @field_validator('connected_work_and_personal_app')
    def connected_work_and_personal_app_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONNECTED_WORK_AND_PERSONAL_APP_UNSPECIFIED', 'CONNECTED_WORK_AND_PERSONAL_APP_DISALLOWED', 'CONNECTED_WORK_AND_PERSONAL_APP_ALLOWED']):
            raise ValueError("must be one of enum values ('CONNECTED_WORK_AND_PERSONAL_APP_UNSPECIFIED', 'CONNECTED_WORK_AND_PERSONAL_APP_DISALLOWED', 'CONNECTED_WORK_AND_PERSONAL_APP_ALLOWED')")
        return value

    @field_validator('credential_provider_policy')
    def credential_provider_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREDENTIAL_PROVIDER_POLICY_UNSPECIFIED', 'CREDENTIAL_PROVIDER_ALLOWED']):
            raise ValueError("must be one of enum values ('CREDENTIAL_PROVIDER_POLICY_UNSPECIFIED', 'CREDENTIAL_PROVIDER_ALLOWED')")
        return value

    @field_validator('default_permission_policy')
    def default_permission_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PERMISSION_POLICY_UNSPECIFIED', 'PROMPT', 'GRANT', 'DENY']):
            raise ValueError("must be one of enum values ('PERMISSION_POLICY_UNSPECIFIED', 'PROMPT', 'GRANT', 'DENY')")
        return value

    @field_validator('delegated_scopes')
    def delegated_scopes_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['DELEGATED_SCOPE_UNSPECIFIED', 'CERT_INSTALL', 'MANAGED_CONFIGURATIONS', 'BLOCK_UNINSTALL', 'PERMISSION_GRANT', 'PACKAGE_ACCESS', 'ENABLE_SYSTEM_APP', 'NETWORK_ACTIVITY_LOGS', 'SECURITY_LOGS', 'CERT_SELECTION']):
                raise ValueError("each list item must be one of ('DELEGATED_SCOPE_UNSPECIFIED', 'CERT_INSTALL', 'MANAGED_CONFIGURATIONS', 'BLOCK_UNINSTALL', 'PERMISSION_GRANT', 'PACKAGE_ACCESS', 'ENABLE_SYSTEM_APP', 'NETWORK_ACTIVITY_LOGS', 'SECURITY_LOGS', 'CERT_SELECTION')")
        return value

    @field_validator('install_type')
    def install_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INSTALL_TYPE_UNSPECIFIED', 'PREINSTALLED', 'FORCE_INSTALLED', 'BLOCKED', 'AVAILABLE', 'REQUIRED_FOR_SETUP', 'KIOSK']):
            raise ValueError("must be one of enum values ('INSTALL_TYPE_UNSPECIFIED', 'PREINSTALLED', 'FORCE_INSTALLED', 'BLOCKED', 'AVAILABLE', 'REQUIRED_FOR_SETUP', 'KIOSK')")
        return value

    @field_validator('work_profile_widgets')
    def work_profile_widgets_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WORK_PROFILE_WIDGETS_UNSPECIFIED', 'WORK_PROFILE_WIDGETS_ALLOWED', 'WORK_PROFILE_WIDGETS_DISALLOWED']):
            raise ValueError("must be one of enum values ('WORK_PROFILE_WIDGETS_UNSPECIFIED', 'WORK_PROFILE_WIDGETS_ALLOWED', 'WORK_PROFILE_WIDGETS_DISALLOWED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of extension_config
        if self.extension_config:
            _dict['extensionConfig'] = self.extension_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in install_constraint (list)
        _items = []
        if self.install_constraint:
            for _item_install_constraint in self.install_constraint:
                if _item_install_constraint:
                    _items.append(_item_install_constraint.to_dict())
            _dict['installConstraint'] = _items
        # override the default output from pydantic by calling `to_dict()` of managed_configuration_template
        if self.managed_configuration_template:
            _dict['managedConfigurationTemplate'] = self.managed_configuration_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in permission_grants (list)
        _items = []
        if self.permission_grants:
            for _item_permission_grants in self.permission_grants:
                if _item_permission_grants:
                    _items.append(_item_permission_grants.to_dict())
            _dict['permissionGrants'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessibleTrackIds": obj.get("accessibleTrackIds"),
            "alwaysOnVpnLockdownExemption": obj.get("alwaysOnVpnLockdownExemption"),
            "autoUpdateMode": obj.get("autoUpdateMode"),
            "connectedWorkAndPersonalApp": obj.get("connectedWorkAndPersonalApp"),
            "credentialProviderPolicy": obj.get("credentialProviderPolicy"),
            "defaultPermissionPolicy": obj.get("defaultPermissionPolicy"),
            "delegatedScopes": obj.get("delegatedScopes"),
            "disabled": obj.get("disabled"),
            "extensionConfig": ExtensionConfig.from_dict(obj["extensionConfig"]) if obj.get("extensionConfig") is not None else None,
            "installConstraint": [InstallConstraint.from_dict(_item) for _item in obj["installConstraint"]] if obj.get("installConstraint") is not None else None,
            "installPriority": obj.get("installPriority"),
            "installType": obj.get("installType"),
            "lockTaskAllowed": obj.get("lockTaskAllowed"),
            "managedConfiguration": obj.get("managedConfiguration"),
            "managedConfigurationTemplate": ManagedConfigurationTemplate.from_dict(obj["managedConfigurationTemplate"]) if obj.get("managedConfigurationTemplate") is not None else None,
            "minimumVersionCode": obj.get("minimumVersionCode"),
            "packageName": obj.get("packageName"),
            "permissionGrants": [PermissionGrant.from_dict(_item) for _item in obj["permissionGrants"]] if obj.get("permissionGrants") is not None else None,
            "workProfileWidgets": obj.get("workProfileWidgets")
        })
        return _obj



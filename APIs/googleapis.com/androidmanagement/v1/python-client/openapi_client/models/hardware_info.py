# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class HardwareInfo(BaseModel):
    """
    Information about device hardware. The fields related to temperature thresholds are only available if hardwareStatusEnabled is true in the device's policy.
    """ # noqa: E501
    battery_shutdown_temperatures: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Battery shutdown temperature thresholds in Celsius for each battery on the device.", alias="batteryShutdownTemperatures")
    battery_throttling_temperatures: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Battery throttling temperature thresholds in Celsius for each battery on the device.", alias="batteryThrottlingTemperatures")
    brand: Optional[StrictStr] = Field(default=None, description="Brand of the device. For example, Google.")
    cpu_shutdown_temperatures: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="CPU shutdown temperature thresholds in Celsius for each CPU on the device.", alias="cpuShutdownTemperatures")
    cpu_throttling_temperatures: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="CPU throttling temperature thresholds in Celsius for each CPU on the device.", alias="cpuThrottlingTemperatures")
    device_baseband_version: Optional[StrictStr] = Field(default=None, description="Baseband version. For example, MDM9625_104662.22.05.34p.", alias="deviceBasebandVersion")
    enterprise_specific_id: Optional[StrictStr] = Field(default=None, description="Output only. ID that uniquely identifies a personally-owned device in a particular organization. On the same physical device when enrolled with the same organization, this ID persists across setups and even factory resets. This ID is available on personally-owned devices with a work profile on devices running Android 12 and above.", alias="enterpriseSpecificId")
    gpu_shutdown_temperatures: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="GPU shutdown temperature thresholds in Celsius for each GPU on the device.", alias="gpuShutdownTemperatures")
    gpu_throttling_temperatures: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="GPU throttling temperature thresholds in Celsius for each GPU on the device.", alias="gpuThrottlingTemperatures")
    hardware: Optional[StrictStr] = Field(default=None, description="Name of the hardware. For example, Angler.")
    manufacturer: Optional[StrictStr] = Field(default=None, description="Manufacturer. For example, Motorola.")
    model: Optional[StrictStr] = Field(default=None, description="The model of the device. For example, Asus Nexus 7.")
    serial_number: Optional[StrictStr] = Field(default=None, description="The device serial number.", alias="serialNumber")
    skin_shutdown_temperatures: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Device skin shutdown temperature thresholds in Celsius.", alias="skinShutdownTemperatures")
    skin_throttling_temperatures: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Device skin throttling temperature thresholds in Celsius.", alias="skinThrottlingTemperatures")
    __properties: ClassVar[List[str]] = ["batteryShutdownTemperatures", "batteryThrottlingTemperatures", "brand", "cpuShutdownTemperatures", "cpuThrottlingTemperatures", "deviceBasebandVersion", "enterpriseSpecificId", "gpuShutdownTemperatures", "gpuThrottlingTemperatures", "hardware", "manufacturer", "model", "serialNumber", "skinShutdownTemperatures", "skinThrottlingTemperatures"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HardwareInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "enterprise_specific_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HardwareInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "batteryShutdownTemperatures": obj.get("batteryShutdownTemperatures"),
            "batteryThrottlingTemperatures": obj.get("batteryThrottlingTemperatures"),
            "brand": obj.get("brand"),
            "cpuShutdownTemperatures": obj.get("cpuShutdownTemperatures"),
            "cpuThrottlingTemperatures": obj.get("cpuThrottlingTemperatures"),
            "deviceBasebandVersion": obj.get("deviceBasebandVersion"),
            "enterpriseSpecificId": obj.get("enterpriseSpecificId"),
            "gpuShutdownTemperatures": obj.get("gpuShutdownTemperatures"),
            "gpuThrottlingTemperatures": obj.get("gpuThrottlingTemperatures"),
            "hardware": obj.get("hardware"),
            "manufacturer": obj.get("manufacturer"),
            "model": obj.get("model"),
            "serialNumber": obj.get("serialNumber"),
            "skinShutdownTemperatures": obj.get("skinShutdownTemperatures"),
            "skinThrottlingTemperatures": obj.get("skinThrottlingTemperatures")
        })
        return _obj



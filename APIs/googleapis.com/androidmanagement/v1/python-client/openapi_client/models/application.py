# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_track_info import AppTrackInfo
from openapi_client.models.app_version import AppVersion
from openapi_client.models.application_permission import ApplicationPermission
from openapi_client.models.managed_property import ManagedProperty
from typing import Optional, Set
from typing_extensions import Self

class Application(BaseModel):
    """
    Information about an app.
    """ # noqa: E501
    app_pricing: Optional[StrictStr] = Field(default=None, description="Whether this app is free, free with in-app purchases, or paid. If the pricing is unspecified, this means the app is not generally available anymore (even though it might still be available to people who own it).", alias="appPricing")
    app_tracks: Optional[List[AppTrackInfo]] = Field(default=None, description="Application tracks visible to the enterprise.", alias="appTracks")
    app_versions: Optional[List[AppVersion]] = Field(default=None, description="Versions currently available for this app.", alias="appVersions")
    author: Optional[StrictStr] = Field(default=None, description="The name of the author of the apps (for example, the app developer).")
    available_countries: Optional[List[StrictStr]] = Field(default=None, description="The countries which this app is available in as per ISO 3166-1 alpha-2.", alias="availableCountries")
    category: Optional[StrictStr] = Field(default=None, description="The app category (e.g. RACING, SOCIAL, etc.)")
    content_rating: Optional[StrictStr] = Field(default=None, description="The content rating for this app.", alias="contentRating")
    description: Optional[StrictStr] = Field(default=None, description="The localized promotional description, if available.")
    distribution_channel: Optional[StrictStr] = Field(default=None, description="How and to whom the package is made available.", alias="distributionChannel")
    features: Optional[List[StrictStr]] = Field(default=None, description="Noteworthy features (if any) of this app.")
    full_description: Optional[StrictStr] = Field(default=None, description="Full app description, if available.", alias="fullDescription")
    icon_url: Optional[StrictStr] = Field(default=None, description="A link to an image that can be used as an icon for the app. This image is suitable for use up to a pixel size of 512 x 512.", alias="iconUrl")
    managed_properties: Optional[List[ManagedProperty]] = Field(default=None, description="The set of managed properties available to be pre-configured for the app.", alias="managedProperties")
    min_android_sdk_version: Optional[StrictInt] = Field(default=None, description="The minimum Android SDK necessary to run the app.", alias="minAndroidSdkVersion")
    name: Optional[StrictStr] = Field(default=None, description="The name of the app in the form enterprises/{enterprise}/applications/{package_name}.")
    permissions: Optional[List[ApplicationPermission]] = Field(default=None, description="The permissions required by the app.")
    play_store_url: Optional[StrictStr] = Field(default=None, description="A link to the (consumer) Google Play details page for the app.", alias="playStoreUrl")
    recent_changes: Optional[StrictStr] = Field(default=None, description="A localised description of the recent changes made to the app.", alias="recentChanges")
    screenshot_urls: Optional[List[StrictStr]] = Field(default=None, description="A list of screenshot links representing the app.", alias="screenshotUrls")
    small_icon_url: Optional[StrictStr] = Field(default=None, description="A link to a smaller image that can be used as an icon for the app. This image is suitable for use up to a pixel size of 128 x 128.", alias="smallIconUrl")
    title: Optional[StrictStr] = Field(default=None, description="The title of the app. Localized.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The approximate time (within 7 days) the app was last published.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["appPricing", "appTracks", "appVersions", "author", "availableCountries", "category", "contentRating", "description", "distributionChannel", "features", "fullDescription", "iconUrl", "managedProperties", "minAndroidSdkVersion", "name", "permissions", "playStoreUrl", "recentChanges", "screenshotUrls", "smallIconUrl", "title", "updateTime"]

    @field_validator('app_pricing')
    def app_pricing_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APP_PRICING_UNSPECIFIED', 'FREE', 'FREE_WITH_IN_APP_PURCHASE', 'PAID']):
            raise ValueError("must be one of enum values ('APP_PRICING_UNSPECIFIED', 'FREE', 'FREE_WITH_IN_APP_PURCHASE', 'PAID')")
        return value

    @field_validator('content_rating')
    def content_rating_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONTENT_RATING_UNSPECIFIED', 'THREE_YEARS', 'SEVEN_YEARS', 'TWELVE_YEARS', 'SIXTEEN_YEARS', 'EIGHTEEN_YEARS']):
            raise ValueError("must be one of enum values ('CONTENT_RATING_UNSPECIFIED', 'THREE_YEARS', 'SEVEN_YEARS', 'TWELVE_YEARS', 'SIXTEEN_YEARS', 'EIGHTEEN_YEARS')")
        return value

    @field_validator('distribution_channel')
    def distribution_channel_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DISTRIBUTION_CHANNEL_UNSPECIFIED', 'PUBLIC_GOOGLE_HOSTED', 'PRIVATE_GOOGLE_HOSTED', 'PRIVATE_SELF_HOSTED']):
            raise ValueError("must be one of enum values ('DISTRIBUTION_CHANNEL_UNSPECIFIED', 'PUBLIC_GOOGLE_HOSTED', 'PRIVATE_GOOGLE_HOSTED', 'PRIVATE_SELF_HOSTED')")
        return value

    @field_validator('features')
    def features_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['APP_FEATURE_UNSPECIFIED', 'VPN_APP']):
                raise ValueError("each list item must be one of ('APP_FEATURE_UNSPECIFIED', 'VPN_APP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Application from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in app_tracks (list)
        _items = []
        if self.app_tracks:
            for _item_app_tracks in self.app_tracks:
                if _item_app_tracks:
                    _items.append(_item_app_tracks.to_dict())
            _dict['appTracks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in app_versions (list)
        _items = []
        if self.app_versions:
            for _item_app_versions in self.app_versions:
                if _item_app_versions:
                    _items.append(_item_app_versions.to_dict())
            _dict['appVersions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in managed_properties (list)
        _items = []
        if self.managed_properties:
            for _item_managed_properties in self.managed_properties:
                if _item_managed_properties:
                    _items.append(_item_managed_properties.to_dict())
            _dict['managedProperties'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item_permissions in self.permissions:
                if _item_permissions:
                    _items.append(_item_permissions.to_dict())
            _dict['permissions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Application from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appPricing": obj.get("appPricing"),
            "appTracks": [AppTrackInfo.from_dict(_item) for _item in obj["appTracks"]] if obj.get("appTracks") is not None else None,
            "appVersions": [AppVersion.from_dict(_item) for _item in obj["appVersions"]] if obj.get("appVersions") is not None else None,
            "author": obj.get("author"),
            "availableCountries": obj.get("availableCountries"),
            "category": obj.get("category"),
            "contentRating": obj.get("contentRating"),
            "description": obj.get("description"),
            "distributionChannel": obj.get("distributionChannel"),
            "features": obj.get("features"),
            "fullDescription": obj.get("fullDescription"),
            "iconUrl": obj.get("iconUrl"),
            "managedProperties": [ManagedProperty.from_dict(_item) for _item in obj["managedProperties"]] if obj.get("managedProperties") is not None else None,
            "minAndroidSdkVersion": obj.get("minAndroidSdkVersion"),
            "name": obj.get("name"),
            "permissions": [ApplicationPermission.from_dict(_item) for _item in obj["permissions"]] if obj.get("permissions") is not None else None,
            "playStoreUrl": obj.get("playStoreUrl"),
            "recentChanges": obj.get("recentChanges"),
            "screenshotUrls": obj.get("screenshotUrls"),
            "smallIconUrl": obj.get("smallIconUrl"),
            "title": obj.get("title"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



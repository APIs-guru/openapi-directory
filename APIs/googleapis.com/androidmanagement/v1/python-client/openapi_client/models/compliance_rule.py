# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_level_condition import ApiLevelCondition
from openapi_client.models.non_compliance_detail_condition import NonComplianceDetailCondition
from typing import Optional, Set
from typing_extensions import Self

class ComplianceRule(BaseModel):
    """
    A rule declaring which mitigating actions to take when a device is not compliant with its policy. For every rule, there is always an implicit mitigating action to set policy_compliant to false for the Device resource, and display a message on the device indicating that the device is not compliant with its policy. Other mitigating actions may optionally be taken as well, depending on the field values in the rule.
    """ # noqa: E501
    api_level_condition: Optional[ApiLevelCondition] = Field(default=None, alias="apiLevelCondition")
    disable_apps: Optional[StrictBool] = Field(default=None, description="If set to true, the rule includes a mitigating action to disable apps so that the device is effectively disabled, but app data is preserved. If the device is running an app in locked task mode, the app will be closed and a UI showing the reason for non-compliance will be displayed.", alias="disableApps")
    non_compliance_detail_condition: Optional[NonComplianceDetailCondition] = Field(default=None, alias="nonComplianceDetailCondition")
    package_names_to_disable: Optional[List[StrictStr]] = Field(default=None, description="If set, the rule includes a mitigating action to disable apps specified in the list, but app data is preserved.", alias="packageNamesToDisable")
    __properties: ClassVar[List[str]] = ["apiLevelCondition", "disableApps", "nonComplianceDetailCondition", "packageNamesToDisable"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComplianceRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of api_level_condition
        if self.api_level_condition:
            _dict['apiLevelCondition'] = self.api_level_condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of non_compliance_detail_condition
        if self.non_compliance_detail_condition:
            _dict['nonComplianceDetailCondition'] = self.non_compliance_detail_condition.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComplianceRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiLevelCondition": ApiLevelCondition.from_dict(obj["apiLevelCondition"]) if obj.get("apiLevelCondition") is not None else None,
            "disableApps": obj.get("disableApps"),
            "nonComplianceDetailCondition": NonComplianceDetailCondition.from_dict(obj["nonComplianceDetailCondition"]) if obj.get("nonComplianceDetailCondition") is not None else None,
            "packageNamesToDisable": obj.get("packageNamesToDisable")
        })
        return _obj



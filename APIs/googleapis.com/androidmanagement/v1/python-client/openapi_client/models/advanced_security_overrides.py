# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AdvancedSecurityOverrides(BaseModel):
    """
    Advanced security settings. In most cases, setting these is not needed.
    """ # noqa: E501
    common_criteria_mode: Optional[StrictStr] = Field(default=None, description="Controls Common Criteria Modeâ€”security standards defined in the Common Criteria for Information Technology Security Evaluation (https://www.commoncriteriaportal.org/) (CC). Enabling Common Criteria Mode increases certain security components on a device, including AES-GCM encryption of Bluetooth Long Term Keys, and Wi-Fi configuration stores.Warning: Common Criteria Mode enforces a strict security model typically only required for IT products used in national security systems and other highly sensitive organizations. Standard device use may be affected. Only enabled if required.", alias="commonCriteriaMode")
    developer_settings: Optional[StrictStr] = Field(default=None, description="Controls access to developer settings: developer options and safe boot. Replaces safeBootDisabled (deprecated) and debuggingFeaturesAllowed (deprecated).", alias="developerSettings")
    google_play_protect_verify_apps: Optional[StrictStr] = Field(default=None, description="Whether Google Play Protect verification (https://support.google.com/accounts/answer/2812853) is enforced. Replaces ensureVerifyAppsEnabled (deprecated).", alias="googlePlayProtectVerifyApps")
    mte_policy: Optional[StrictStr] = Field(default=None, description="Optional. Controls Memory Tagging Extension (MTE) (https://source.android.com/docs/security/test/memory-safety/arm-mte) on the device. The device needs to be rebooted to apply changes to the MTE policy.", alias="mtePolicy")
    personal_apps_that_can_read_work_notifications: Optional[List[StrictStr]] = Field(default=None, description="Personal apps that can read work profile notifications using a NotificationListenerService (https://developer.android.com/reference/android/service/notification/NotificationListenerService). By default, no personal apps (aside from system apps) can read work notifications. Each value in the list must be a package name.", alias="personalAppsThatCanReadWorkNotifications")
    untrusted_apps_policy: Optional[StrictStr] = Field(default=None, description="The policy for untrusted apps (apps from unknown sources) enforced on the device. Replaces install_unknown_sources_allowed (deprecated).", alias="untrustedAppsPolicy")
    __properties: ClassVar[List[str]] = ["commonCriteriaMode", "developerSettings", "googlePlayProtectVerifyApps", "mtePolicy", "personalAppsThatCanReadWorkNotifications", "untrustedAppsPolicy"]

    @field_validator('common_criteria_mode')
    def common_criteria_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMMON_CRITERIA_MODE_UNSPECIFIED', 'COMMON_CRITERIA_MODE_DISABLED', 'COMMON_CRITERIA_MODE_ENABLED']):
            raise ValueError("must be one of enum values ('COMMON_CRITERIA_MODE_UNSPECIFIED', 'COMMON_CRITERIA_MODE_DISABLED', 'COMMON_CRITERIA_MODE_ENABLED')")
        return value

    @field_validator('developer_settings')
    def developer_settings_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEVELOPER_SETTINGS_UNSPECIFIED', 'DEVELOPER_SETTINGS_DISABLED', 'DEVELOPER_SETTINGS_ALLOWED']):
            raise ValueError("must be one of enum values ('DEVELOPER_SETTINGS_UNSPECIFIED', 'DEVELOPER_SETTINGS_DISABLED', 'DEVELOPER_SETTINGS_ALLOWED')")
        return value

    @field_validator('google_play_protect_verify_apps')
    def google_play_protect_verify_apps_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GOOGLE_PLAY_PROTECT_VERIFY_APPS_UNSPECIFIED', 'VERIFY_APPS_ENFORCED', 'VERIFY_APPS_USER_CHOICE']):
            raise ValueError("must be one of enum values ('GOOGLE_PLAY_PROTECT_VERIFY_APPS_UNSPECIFIED', 'VERIFY_APPS_ENFORCED', 'VERIFY_APPS_USER_CHOICE')")
        return value

    @field_validator('mte_policy')
    def mte_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MTE_POLICY_UNSPECIFIED', 'MTE_USER_CHOICE', 'MTE_ENFORCED', 'MTE_DISABLED']):
            raise ValueError("must be one of enum values ('MTE_POLICY_UNSPECIFIED', 'MTE_USER_CHOICE', 'MTE_ENFORCED', 'MTE_DISABLED')")
        return value

    @field_validator('untrusted_apps_policy')
    def untrusted_apps_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNTRUSTED_APPS_POLICY_UNSPECIFIED', 'DISALLOW_INSTALL', 'ALLOW_INSTALL_IN_PERSONAL_PROFILE_ONLY', 'ALLOW_INSTALL_DEVICE_WIDE']):
            raise ValueError("must be one of enum values ('UNTRUSTED_APPS_POLICY_UNSPECIFIED', 'DISALLOW_INSTALL', 'ALLOW_INSTALL_IN_PERSONAL_PROFILE_ONLY', 'ALLOW_INSTALL_DEVICE_WIDE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdvancedSecurityOverrides from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdvancedSecurityOverrides from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commonCriteriaMode": obj.get("commonCriteriaMode"),
            "developerSettings": obj.get("developerSettings"),
            "googlePlayProtectVerifyApps": obj.get("googlePlayProtectVerifyApps"),
            "mtePolicy": obj.get("mtePolicy"),
            "personalAppsThatCanReadWorkNotifications": obj.get("personalAppsThatCanReadWorkNotifications"),
            "untrustedAppsPolicy": obj.get("untrustedAppsPolicy")
        })
        return _obj



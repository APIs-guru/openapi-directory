# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WebToken(BaseModel):
    """
    A web token used to access the managed Google Play iframe.
    """ # noqa: E501
    enabled_features: Optional[List[StrictStr]] = Field(default=None, description="The features to enable. Use this if you want to control exactly which feature(s) will be activated; leave empty to allow all features.Restrictions / things to note: - If no features are listed here, all features are enabled â€” this is the default behavior where you give access to all features to your admins. - This must not contain any FEATURE_UNSPECIFIED values. - Repeated values are ignored ", alias="enabledFeatures")
    name: Optional[StrictStr] = Field(default=None, description="The name of the web token, which is generated by the server during creation in the form enterprises/{enterpriseId}/webTokens/{webTokenId}.")
    parent_frame_url: Optional[StrictStr] = Field(default=None, description="The URL of the parent frame hosting the iframe with the embedded UI. To prevent XSS, the iframe may not be hosted at other URLs. The URL must use the https scheme.", alias="parentFrameUrl")
    permissions: Optional[List[StrictStr]] = Field(default=None, description="Permissions available to an admin in the embedded UI. An admin must have all of these permissions in order to view the UI. This field is deprecated.")
    value: Optional[StrictStr] = Field(default=None, description="The token value which is used in the hosting page to generate the iframe with the embedded UI. This is a read-only field generated by the server.")
    __properties: ClassVar[List[str]] = ["enabledFeatures", "name", "parentFrameUrl", "permissions", "value"]

    @field_validator('enabled_features')
    def enabled_features_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['FEATURE_UNSPECIFIED', 'PLAY_SEARCH', 'PRIVATE_APPS', 'WEB_APPS', 'STORE_BUILDER', 'MANAGED_CONFIGURATIONS', 'ZERO_TOUCH_CUSTOMER_MANAGEMENT']):
                raise ValueError("each list item must be one of ('FEATURE_UNSPECIFIED', 'PLAY_SEARCH', 'PRIVATE_APPS', 'WEB_APPS', 'STORE_BUILDER', 'MANAGED_CONFIGURATIONS', 'ZERO_TOUCH_CUSTOMER_MANAGEMENT')")
        return value

    @field_validator('permissions')
    def permissions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['WEB_TOKEN_PERMISSION_UNSPECIFIED', 'APPROVE_APPS']):
                raise ValueError("each list item must be one of ('WEB_TOKEN_PERMISSION_UNSPECIFIED', 'APPROVE_APPS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebToken from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebToken from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabledFeatures": obj.get("enabledFeatures"),
            "name": obj.get("name"),
            "parentFrameUrl": obj.get("parentFrameUrl"),
            "permissions": obj.get("permissions"),
            "value": obj.get("value")
        })
        return _obj



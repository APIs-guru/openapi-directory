# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.managed_property_entry import ManagedPropertyEntry
from typing import Optional, Set
from typing_extensions import Self

class ManagedProperty(BaseModel):
    """
    Managed property.
    """ # noqa: E501
    default_value: Optional[Any] = Field(default=None, description="The default value of the property. BUNDLE_ARRAY properties don't have a default value.", alias="defaultValue")
    description: Optional[StrictStr] = Field(default=None, description="A longer description of the property, providing more detail of what it affects. Localized.")
    entries: Optional[List[ManagedPropertyEntry]] = Field(default=None, description="For CHOICE or MULTISELECT properties, the list of possible entries.")
    key: Optional[StrictStr] = Field(default=None, description="The unique key that the app uses to identify the property, e.g. \"com.google.android.gm.fieldname\".")
    nested_properties: Optional[List[ManagedProperty]] = Field(default=None, description="For BUNDLE_ARRAY properties, the list of nested properties. A BUNDLE_ARRAY property is at most two levels deep.", alias="nestedProperties")
    title: Optional[StrictStr] = Field(default=None, description="The name of the property. Localized.")
    type: Optional[StrictStr] = Field(default=None, description="The type of the property.")
    __properties: ClassVar[List[str]] = ["defaultValue", "description", "entries", "key", "nestedProperties", "title", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MANAGED_PROPERTY_TYPE_UNSPECIFIED', 'BOOL', 'STRING', 'INTEGER', 'CHOICE', 'MULTISELECT', 'HIDDEN', 'BUNDLE', 'BUNDLE_ARRAY']):
            raise ValueError("must be one of enum values ('MANAGED_PROPERTY_TYPE_UNSPECIFIED', 'BOOL', 'STRING', 'INTEGER', 'CHOICE', 'MULTISELECT', 'HIDDEN', 'BUNDLE', 'BUNDLE_ARRAY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagedProperty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in entries (list)
        _items = []
        if self.entries:
            for _item_entries in self.entries:
                if _item_entries:
                    _items.append(_item_entries.to_dict())
            _dict['entries'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nested_properties (list)
        _items = []
        if self.nested_properties:
            for _item_nested_properties in self.nested_properties:
                if _item_nested_properties:
                    _items.append(_item_nested_properties.to_dict())
            _dict['nestedProperties'] = _items
        # set to None if default_value (nullable) is None
        # and model_fields_set contains the field
        if self.default_value is None and "default_value" in self.model_fields_set:
            _dict['defaultValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagedProperty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultValue": obj.get("defaultValue"),
            "description": obj.get("description"),
            "entries": [ManagedPropertyEntry.from_dict(_item) for _item in obj["entries"]] if obj.get("entries") is not None else None,
            "key": obj.get("key"),
            "nestedProperties": [ManagedProperty.from_dict(_item) for _item in obj["nestedProperties"]] if obj.get("nestedProperties") is not None else None,
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
ManagedProperty.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PasswordRequirements(BaseModel):
    """
    Requirements for the password used to unlock a device.
    """ # noqa: E501
    maximum_failed_passwords_for_wipe: Optional[StrictInt] = Field(default=None, description="Number of incorrect device-unlock passwords that can be entered before a device is wiped. A value of 0 means there is no restriction.", alias="maximumFailedPasswordsForWipe")
    password_expiration_timeout: Optional[StrictStr] = Field(default=None, description="Password expiration timeout.", alias="passwordExpirationTimeout")
    password_history_length: Optional[StrictInt] = Field(default=None, description="The length of the password history. After setting this field, the user won't be able to enter a new password that is the same as any password in the history. A value of 0 means there is no restriction.", alias="passwordHistoryLength")
    password_minimum_length: Optional[StrictInt] = Field(default=None, description="The minimum allowed password length. A value of 0 means there is no restriction. Only enforced when password_quality is NUMERIC, NUMERIC_COMPLEX, ALPHABETIC, ALPHANUMERIC, or COMPLEX.", alias="passwordMinimumLength")
    password_minimum_letters: Optional[StrictInt] = Field(default=None, description="Minimum number of letters required in the password. Only enforced when password_quality is COMPLEX.", alias="passwordMinimumLetters")
    password_minimum_lower_case: Optional[StrictInt] = Field(default=None, description="Minimum number of lower case letters required in the password. Only enforced when password_quality is COMPLEX.", alias="passwordMinimumLowerCase")
    password_minimum_non_letter: Optional[StrictInt] = Field(default=None, description="Minimum number of non-letter characters (numerical digits or symbols) required in the password. Only enforced when password_quality is COMPLEX.", alias="passwordMinimumNonLetter")
    password_minimum_numeric: Optional[StrictInt] = Field(default=None, description="Minimum number of numerical digits required in the password. Only enforced when password_quality is COMPLEX.", alias="passwordMinimumNumeric")
    password_minimum_symbols: Optional[StrictInt] = Field(default=None, description="Minimum number of symbols required in the password. Only enforced when password_quality is COMPLEX.", alias="passwordMinimumSymbols")
    password_minimum_upper_case: Optional[StrictInt] = Field(default=None, description="Minimum number of upper case letters required in the password. Only enforced when password_quality is COMPLEX.", alias="passwordMinimumUpperCase")
    password_quality: Optional[StrictStr] = Field(default=None, description="The required password quality.", alias="passwordQuality")
    password_scope: Optional[StrictStr] = Field(default=None, description="The scope that the password requirement applies to.", alias="passwordScope")
    require_password_unlock: Optional[StrictStr] = Field(default=None, description="The length of time after a device or work profile is unlocked using a strong form of authentication (password, PIN, pattern) that it can be unlocked using any other authentication method (e.g. fingerprint, trust agents, face). After the specified time period elapses, only strong forms of authentication can be used to unlock the device or work profile.", alias="requirePasswordUnlock")
    unified_lock_settings: Optional[StrictStr] = Field(default=None, description="Controls whether a unified lock is allowed for the device and the work profile, on devices running Android 9 and above with a work profile. This can be set only if password_scope is set to SCOPE_PROFILE, the policy will be rejected otherwise. If user has not set a separate work lock and this field is set to REQUIRE_SEPARATE_WORK_LOCK, a NonComplianceDetail is reported with nonComplianceReason set to USER_ACTION.", alias="unifiedLockSettings")
    __properties: ClassVar[List[str]] = ["maximumFailedPasswordsForWipe", "passwordExpirationTimeout", "passwordHistoryLength", "passwordMinimumLength", "passwordMinimumLetters", "passwordMinimumLowerCase", "passwordMinimumNonLetter", "passwordMinimumNumeric", "passwordMinimumSymbols", "passwordMinimumUpperCase", "passwordQuality", "passwordScope", "requirePasswordUnlock", "unifiedLockSettings"]

    @field_validator('password_quality')
    def password_quality_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PASSWORD_QUALITY_UNSPECIFIED', 'BIOMETRIC_WEAK', 'SOMETHING', 'NUMERIC', 'NUMERIC_COMPLEX', 'ALPHABETIC', 'ALPHANUMERIC', 'COMPLEX', 'COMPLEXITY_LOW', 'COMPLEXITY_MEDIUM', 'COMPLEXITY_HIGH']):
            raise ValueError("must be one of enum values ('PASSWORD_QUALITY_UNSPECIFIED', 'BIOMETRIC_WEAK', 'SOMETHING', 'NUMERIC', 'NUMERIC_COMPLEX', 'ALPHABETIC', 'ALPHANUMERIC', 'COMPLEX', 'COMPLEXITY_LOW', 'COMPLEXITY_MEDIUM', 'COMPLEXITY_HIGH')")
        return value

    @field_validator('password_scope')
    def password_scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SCOPE_UNSPECIFIED', 'SCOPE_DEVICE', 'SCOPE_PROFILE']):
            raise ValueError("must be one of enum values ('SCOPE_UNSPECIFIED', 'SCOPE_DEVICE', 'SCOPE_PROFILE')")
        return value

    @field_validator('require_password_unlock')
    def require_password_unlock_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REQUIRE_PASSWORD_UNLOCK_UNSPECIFIED', 'USE_DEFAULT_DEVICE_TIMEOUT', 'REQUIRE_EVERY_DAY']):
            raise ValueError("must be one of enum values ('REQUIRE_PASSWORD_UNLOCK_UNSPECIFIED', 'USE_DEFAULT_DEVICE_TIMEOUT', 'REQUIRE_EVERY_DAY')")
        return value

    @field_validator('unified_lock_settings')
    def unified_lock_settings_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNIFIED_LOCK_SETTINGS_UNSPECIFIED', 'ALLOW_UNIFIED_WORK_AND_PERSONAL_LOCK', 'REQUIRE_SEPARATE_WORK_LOCK']):
            raise ValueError("must be one of enum values ('UNIFIED_LOCK_SETTINGS_UNSPECIFIED', 'ALLOW_UNIFIED_WORK_AND_PERSONAL_LOCK', 'REQUIRE_SEPARATE_WORK_LOCK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PasswordRequirements from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PasswordRequirements from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maximumFailedPasswordsForWipe": obj.get("maximumFailedPasswordsForWipe"),
            "passwordExpirationTimeout": obj.get("passwordExpirationTimeout"),
            "passwordHistoryLength": obj.get("passwordHistoryLength"),
            "passwordMinimumLength": obj.get("passwordMinimumLength"),
            "passwordMinimumLetters": obj.get("passwordMinimumLetters"),
            "passwordMinimumLowerCase": obj.get("passwordMinimumLowerCase"),
            "passwordMinimumNonLetter": obj.get("passwordMinimumNonLetter"),
            "passwordMinimumNumeric": obj.get("passwordMinimumNumeric"),
            "passwordMinimumSymbols": obj.get("passwordMinimumSymbols"),
            "passwordMinimumUpperCase": obj.get("passwordMinimumUpperCase"),
            "passwordQuality": obj.get("passwordQuality"),
            "passwordScope": obj.get("passwordScope"),
            "requirePasswordUnlock": obj.get("requirePasswordUnlock"),
            "unifiedLockSettings": obj.get("unifiedLockSettings")
        })
        return _obj



# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.telephony_info import TelephonyInfo
from typing import Optional, Set
from typing_extensions import Self

class NetworkInfo(BaseModel):
    """
    Device network info.
    """ # noqa: E501
    imei: Optional[StrictStr] = Field(default=None, description="IMEI number of the GSM device. For example, A1000031212.")
    meid: Optional[StrictStr] = Field(default=None, description="MEID number of the CDMA device. For example, A00000292788E1.")
    network_operator_name: Optional[StrictStr] = Field(default=None, description="Alphabetic name of current registered operator. For example, Vodafone.", alias="networkOperatorName")
    telephony_infos: Optional[List[TelephonyInfo]] = Field(default=None, description="Provides telephony information associated with each SIM card on the device. Only supported on fully managed devices starting from Android API level 23.", alias="telephonyInfos")
    wifi_mac_address: Optional[StrictStr] = Field(default=None, description="Wi-Fi MAC address of the device. For example, 7c:11:11:11:11:11.", alias="wifiMacAddress")
    __properties: ClassVar[List[str]] = ["imei", "meid", "networkOperatorName", "telephonyInfos", "wifiMacAddress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in telephony_infos (list)
        _items = []
        if self.telephony_infos:
            for _item_telephony_infos in self.telephony_infos:
                if _item_telephony_infos:
                    _items.append(_item_telephony_infos.to_dict())
            _dict['telephonyInfos'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "imei": obj.get("imei"),
            "meid": obj.get("meid"),
            "networkOperatorName": obj.get("networkOperatorName"),
            "telephonyInfos": [TelephonyInfo.from_dict(_item) for _item in obj["telephonyInfos"]] if obj.get("telephonyInfos") is not None else None,
            "wifiMacAddress": obj.get("wifiMacAddress")
        })
        return _obj



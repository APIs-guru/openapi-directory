# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.system_update_info import SystemUpdateInfo
from typing import Optional, Set
from typing_extensions import Self

class SoftwareInfo(BaseModel):
    """
    Information about device software.
    """ # noqa: E501
    android_build_number: Optional[StrictStr] = Field(default=None, description="Android build ID string meant for displaying to the user. For example, shamu-userdebug 6.0.1 MOB30I 2756745 dev-keys.", alias="androidBuildNumber")
    android_build_time: Optional[StrictStr] = Field(default=None, description="Build time.", alias="androidBuildTime")
    android_device_policy_version_code: Optional[StrictInt] = Field(default=None, description="The Android Device Policy app version code.", alias="androidDevicePolicyVersionCode")
    android_device_policy_version_name: Optional[StrictStr] = Field(default=None, description="The Android Device Policy app version as displayed to the user.", alias="androidDevicePolicyVersionName")
    android_version: Optional[StrictStr] = Field(default=None, description="The user-visible Android version string. For example, 6.0.1.", alias="androidVersion")
    bootloader_version: Optional[StrictStr] = Field(default=None, description="The system bootloader version number, e.g. 0.6.7.", alias="bootloaderVersion")
    device_build_signature: Optional[StrictStr] = Field(default=None, description="SHA-256 hash of android.content.pm.Signature (https://developer.android.com/reference/android/content/pm/Signature.html) associated with the system package, which can be used to verify that the system build hasn't been modified.", alias="deviceBuildSignature")
    device_kernel_version: Optional[StrictStr] = Field(default=None, description="Kernel version, for example, 2.6.32.9-g103d848.", alias="deviceKernelVersion")
    primary_language_code: Optional[StrictStr] = Field(default=None, description="An IETF BCP 47 language code for the primary locale on the device.", alias="primaryLanguageCode")
    security_patch_level: Optional[StrictStr] = Field(default=None, description="Security patch level, e.g. 2016-05-01.", alias="securityPatchLevel")
    system_update_info: Optional[SystemUpdateInfo] = Field(default=None, alias="systemUpdateInfo")
    __properties: ClassVar[List[str]] = ["androidBuildNumber", "androidBuildTime", "androidDevicePolicyVersionCode", "androidDevicePolicyVersionName", "androidVersion", "bootloaderVersion", "deviceBuildSignature", "deviceKernelVersion", "primaryLanguageCode", "securityPatchLevel", "systemUpdateInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SoftwareInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of system_update_info
        if self.system_update_info:
            _dict['systemUpdateInfo'] = self.system_update_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SoftwareInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "androidBuildNumber": obj.get("androidBuildNumber"),
            "androidBuildTime": obj.get("androidBuildTime"),
            "androidDevicePolicyVersionCode": obj.get("androidDevicePolicyVersionCode"),
            "androidDevicePolicyVersionName": obj.get("androidDevicePolicyVersionName"),
            "androidVersion": obj.get("androidVersion"),
            "bootloaderVersion": obj.get("bootloaderVersion"),
            "deviceBuildSignature": obj.get("deviceBuildSignature"),
            "deviceKernelVersion": obj.get("deviceKernelVersion"),
            "primaryLanguageCode": obj.get("primaryLanguageCode"),
            "securityPatchLevel": obj.get("securityPatchLevel"),
            "systemUpdateInfo": SystemUpdateInfo.from_dict(obj["systemUpdateInfo"]) if obj.get("systemUpdateInfo") is not None else None
        })
        return _obj



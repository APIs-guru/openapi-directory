# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.web_app_icon import WebAppIcon
from typing import Optional, Set
from typing_extensions import Self

class WebApp(BaseModel):
    """
    A web app.
    """ # noqa: E501
    display_mode: Optional[StrictStr] = Field(default=None, description="The display mode of the web app.", alias="displayMode")
    icons: Optional[List[WebAppIcon]] = Field(default=None, description="A list of icons for the web app. Must have at least one element.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the web app, which is generated by the server during creation in the form enterprises/{enterpriseId}/webApps/{packageName}.")
    start_url: Optional[StrictStr] = Field(default=None, description="The start URL, i.e. the URL that should load when the user opens the application.", alias="startUrl")
    title: Optional[StrictStr] = Field(default=None, description="The title of the web app as displayed to the user (e.g., amongst a list of other applications, or as a label for an icon).")
    version_code: Optional[StrictStr] = Field(default=None, description="The current version of the app.Note that the version can automatically increase during the lifetime of the web app, while Google does internal housekeeping to keep the web app up-to-date.", alias="versionCode")
    __properties: ClassVar[List[str]] = ["displayMode", "icons", "name", "startUrl", "title", "versionCode"]

    @field_validator('display_mode')
    def display_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DISPLAY_MODE_UNSPECIFIED', 'MINIMAL_UI', 'STANDALONE', 'FULL_SCREEN']):
            raise ValueError("must be one of enum values ('DISPLAY_MODE_UNSPECIFIED', 'MINIMAL_UI', 'STANDALONE', 'FULL_SCREEN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebApp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in icons (list)
        _items = []
        if self.icons:
            for _item_icons in self.icons:
                if _item_icons:
                    _items.append(_item_icons.to_dict())
            _dict['icons'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebApp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayMode": obj.get("displayMode"),
            "icons": [WebAppIcon.from_dict(_item) for _item in obj["icons"]] if obj.get("icons") is not None else None,
            "name": obj.get("name"),
            "startUrl": obj.get("startUrl"),
            "title": obj.get("title"),
            "versionCode": obj.get("versionCode")
        })
        return _obj



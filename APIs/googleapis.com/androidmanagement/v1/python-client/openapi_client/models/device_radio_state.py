# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceRadioState(BaseModel):
    """
    Controls for device radio settings.
    """ # noqa: E501
    airplane_mode_state: Optional[StrictStr] = Field(default=None, description="Controls whether airplane mode can be toggled by the user or not.", alias="airplaneModeState")
    cellular_two_g_state: Optional[StrictStr] = Field(default=None, description="Controls whether cellular 2G setting can be toggled by the user or not.", alias="cellularTwoGState")
    minimum_wifi_security_level: Optional[StrictStr] = Field(default=None, description="The minimum required security level of Wi-Fi networks that the device can connect to.", alias="minimumWifiSecurityLevel")
    ultra_wideband_state: Optional[StrictStr] = Field(default=None, description="Controls the state of the ultra wideband setting and whether the user can toggle it on or off.", alias="ultraWidebandState")
    wifi_state: Optional[StrictStr] = Field(default=None, description="Controls current state of Wi-Fi and if user can change its state.", alias="wifiState")
    __properties: ClassVar[List[str]] = ["airplaneModeState", "cellularTwoGState", "minimumWifiSecurityLevel", "ultraWidebandState", "wifiState"]

    @field_validator('airplane_mode_state')
    def airplane_mode_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AIRPLANE_MODE_STATE_UNSPECIFIED', 'AIRPLANE_MODE_USER_CHOICE', 'AIRPLANE_MODE_DISABLED']):
            raise ValueError("must be one of enum values ('AIRPLANE_MODE_STATE_UNSPECIFIED', 'AIRPLANE_MODE_USER_CHOICE', 'AIRPLANE_MODE_DISABLED')")
        return value

    @field_validator('cellular_two_g_state')
    def cellular_two_g_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CELLULAR_TWO_G_STATE_UNSPECIFIED', 'CELLULAR_TWO_G_USER_CHOICE', 'CELLULAR_TWO_G_DISABLED']):
            raise ValueError("must be one of enum values ('CELLULAR_TWO_G_STATE_UNSPECIFIED', 'CELLULAR_TWO_G_USER_CHOICE', 'CELLULAR_TWO_G_DISABLED')")
        return value

    @field_validator('minimum_wifi_security_level')
    def minimum_wifi_security_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MINIMUM_WIFI_SECURITY_LEVEL_UNSPECIFIED', 'OPEN_NETWORK_SECURITY', 'PERSONAL_NETWORK_SECURITY', 'ENTERPRISE_NETWORK_SECURITY']):
            raise ValueError("must be one of enum values ('MINIMUM_WIFI_SECURITY_LEVEL_UNSPECIFIED', 'OPEN_NETWORK_SECURITY', 'PERSONAL_NETWORK_SECURITY', 'ENTERPRISE_NETWORK_SECURITY')")
        return value

    @field_validator('ultra_wideband_state')
    def ultra_wideband_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ULTRA_WIDEBAND_STATE_UNSPECIFIED', 'ULTRA_WIDEBAND_USER_CHOICE', 'ULTRA_WIDEBAND_DISABLED']):
            raise ValueError("must be one of enum values ('ULTRA_WIDEBAND_STATE_UNSPECIFIED', 'ULTRA_WIDEBAND_USER_CHOICE', 'ULTRA_WIDEBAND_DISABLED')")
        return value

    @field_validator('wifi_state')
    def wifi_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WIFI_STATE_UNSPECIFIED', 'WIFI_STATE_USER_CHOICE', 'WIFI_ENABLED', 'WIFI_DISABLED']):
            raise ValueError("must be one of enum values ('WIFI_STATE_UNSPECIFIED', 'WIFI_STATE_USER_CHOICE', 'WIFI_ENABLED', 'WIFI_DISABLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceRadioState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceRadioState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "airplaneModeState": obj.get("airplaneModeState"),
            "cellularTwoGState": obj.get("cellularTwoGState"),
            "minimumWifiSecurityLevel": obj.get("minimumWifiSecurityLevel"),
            "ultraWidebandState": obj.get("ultraWidebandState"),
            "wifiState": obj.get("wifiState")
        })
        return _obj



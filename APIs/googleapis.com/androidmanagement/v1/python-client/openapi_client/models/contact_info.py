# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ContactInfo(BaseModel):
    """
    Contact details for managed Google Play enterprises.
    """ # noqa: E501
    contact_email: Optional[StrictStr] = Field(default=None, description="Email address for a point of contact, which will be used to send important announcements related to managed Google Play.", alias="contactEmail")
    data_protection_officer_email: Optional[StrictStr] = Field(default=None, description="The email of the data protection officer. The email is validated but not verified.", alias="dataProtectionOfficerEmail")
    data_protection_officer_name: Optional[StrictStr] = Field(default=None, description="The name of the data protection officer.", alias="dataProtectionOfficerName")
    data_protection_officer_phone: Optional[StrictStr] = Field(default=None, description="The phone number of the data protection officer The phone number is validated but not verified.", alias="dataProtectionOfficerPhone")
    eu_representative_email: Optional[StrictStr] = Field(default=None, description="The email of the EU representative. The email is validated but not verified.", alias="euRepresentativeEmail")
    eu_representative_name: Optional[StrictStr] = Field(default=None, description="The name of the EU representative.", alias="euRepresentativeName")
    eu_representative_phone: Optional[StrictStr] = Field(default=None, description="The phone number of the EU representative. The phone number is validated but not verified.", alias="euRepresentativePhone")
    __properties: ClassVar[List[str]] = ["contactEmail", "dataProtectionOfficerEmail", "dataProtectionOfficerName", "dataProtectionOfficerPhone", "euRepresentativeEmail", "euRepresentativeName", "euRepresentativePhone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContactInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContactInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contactEmail": obj.get("contactEmail"),
            "dataProtectionOfficerEmail": obj.get("dataProtectionOfficerEmail"),
            "dataProtectionOfficerName": obj.get("dataProtectionOfficerName"),
            "dataProtectionOfficerPhone": obj.get("dataProtectionOfficerPhone"),
            "euRepresentativeEmail": obj.get("euRepresentativeEmail"),
            "euRepresentativeName": obj.get("euRepresentativeName"),
            "euRepresentativePhone": obj.get("euRepresentativePhone")
        })
        return _obj



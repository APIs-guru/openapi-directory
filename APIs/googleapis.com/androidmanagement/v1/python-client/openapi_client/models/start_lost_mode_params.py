# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_facing_message import UserFacingMessage
from typing import Optional, Set
from typing_extensions import Self

class StartLostModeParams(BaseModel):
    """
    Parameters associated with the START_LOST_MODE command to put the device into lost mode. At least one of the parameters, not including the organization name, must be provided in order for the device to be put into lost mode.
    """ # noqa: E501
    lost_email_address: Optional[StrictStr] = Field(default=None, description="The email address displayed to the user when the device is in lost mode.", alias="lostEmailAddress")
    lost_message: Optional[UserFacingMessage] = Field(default=None, alias="lostMessage")
    lost_organization: Optional[UserFacingMessage] = Field(default=None, alias="lostOrganization")
    lost_phone_number: Optional[UserFacingMessage] = Field(default=None, alias="lostPhoneNumber")
    lost_street_address: Optional[UserFacingMessage] = Field(default=None, alias="lostStreetAddress")
    __properties: ClassVar[List[str]] = ["lostEmailAddress", "lostMessage", "lostOrganization", "lostPhoneNumber", "lostStreetAddress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StartLostModeParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of lost_message
        if self.lost_message:
            _dict['lostMessage'] = self.lost_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lost_organization
        if self.lost_organization:
            _dict['lostOrganization'] = self.lost_organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lost_phone_number
        if self.lost_phone_number:
            _dict['lostPhoneNumber'] = self.lost_phone_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lost_street_address
        if self.lost_street_address:
            _dict['lostStreetAddress'] = self.lost_street_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StartLostModeParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lostEmailAddress": obj.get("lostEmailAddress"),
            "lostMessage": UserFacingMessage.from_dict(obj["lostMessage"]) if obj.get("lostMessage") is not None else None,
            "lostOrganization": UserFacingMessage.from_dict(obj["lostOrganization"]) if obj.get("lostOrganization") is not None else None,
            "lostPhoneNumber": UserFacingMessage.from_dict(obj["lostPhoneNumber"]) if obj.get("lostPhoneNumber") is not None else None,
            "lostStreetAddress": UserFacingMessage.from_dict(obj["lostStreetAddress"]) if obj.get("lostStreetAddress") is not None else None
        })
        return _obj



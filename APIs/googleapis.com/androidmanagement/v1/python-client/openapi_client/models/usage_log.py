# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UsageLog(BaseModel):
    """
    Controls types of device activity logs collected from the device and reported via Pub/Sub notification (https://developers.google.com/android/management/notifications).
    """ # noqa: E501
    enabled_log_types: Optional[List[StrictStr]] = Field(default=None, description="Specifies which log types are enabled. Note that users will receive on-device messaging when usage logging is enabled.", alias="enabledLogTypes")
    upload_on_cellular_allowed: Optional[List[StrictStr]] = Field(default=None, description="Specifies which of the enabled log types can be uploaded over mobile data. By default logs are queued for upload when the device connects to WiFi.", alias="uploadOnCellularAllowed")
    __properties: ClassVar[List[str]] = ["enabledLogTypes", "uploadOnCellularAllowed"]

    @field_validator('enabled_log_types')
    def enabled_log_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['LOG_TYPE_UNSPECIFIED', 'SECURITY_LOGS', 'NETWORK_ACTIVITY_LOGS']):
                raise ValueError("each list item must be one of ('LOG_TYPE_UNSPECIFIED', 'SECURITY_LOGS', 'NETWORK_ACTIVITY_LOGS')")
        return value

    @field_validator('upload_on_cellular_allowed')
    def upload_on_cellular_allowed_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['LOG_TYPE_UNSPECIFIED', 'SECURITY_LOGS', 'NETWORK_ACTIVITY_LOGS']):
                raise ValueError("each list item must be one of ('LOG_TYPE_UNSPECIFIED', 'SECURITY_LOGS', 'NETWORK_ACTIVITY_LOGS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsageLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsageLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabledLogTypes": obj.get("enabledLogTypes"),
            "uploadOnCellularAllowed": obj.get("uploadOnCellularAllowed")
        })
        return _obj



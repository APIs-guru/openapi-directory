# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_event import ApplicationEvent
from openapi_client.models.keyed_app_state import KeyedAppState
from typing import Optional, Set
from typing_extensions import Self

class ApplicationReport(BaseModel):
    """
    Information reported about an installed app.
    """ # noqa: E501
    application_source: Optional[StrictStr] = Field(default=None, description="The source of the package.", alias="applicationSource")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the app.", alias="displayName")
    events: Optional[List[ApplicationEvent]] = Field(default=None, description="The list of app events which have occurred in the last 30 hours.")
    installer_package_name: Optional[StrictStr] = Field(default=None, description="The package name of the app that installed this app.", alias="installerPackageName")
    keyed_app_states: Optional[List[KeyedAppState]] = Field(default=None, description="List of keyed app states reported by the app.", alias="keyedAppStates")
    package_name: Optional[StrictStr] = Field(default=None, description="Package name of the app.", alias="packageName")
    package_sha256_hash: Optional[StrictStr] = Field(default=None, description="The SHA-256 hash of the app's APK file, which can be used to verify the app hasn't been modified. Each byte of the hash value is represented as a two-digit hexadecimal number.", alias="packageSha256Hash")
    signing_key_cert_fingerprints: Optional[List[StrictStr]] = Field(default=None, description="The SHA-1 hash of each android.content.pm.Signature (https://developer.android.com/reference/android/content/pm/Signature.html) associated with the app package. Each byte of each hash value is represented as a two-digit hexadecimal number.", alias="signingKeyCertFingerprints")
    state: Optional[StrictStr] = Field(default=None, description="Application state.")
    user_facing_type: Optional[StrictStr] = Field(default=None, description="Whether the app is user facing.", alias="userFacingType")
    version_code: Optional[StrictInt] = Field(default=None, description="The app version code, which can be used to determine whether one version is more recent than another.", alias="versionCode")
    version_name: Optional[StrictStr] = Field(default=None, description="The app version as displayed to the user.", alias="versionName")
    __properties: ClassVar[List[str]] = ["applicationSource", "displayName", "events", "installerPackageName", "keyedAppStates", "packageName", "packageSha256Hash", "signingKeyCertFingerprints", "state", "userFacingType", "versionCode", "versionName"]

    @field_validator('application_source')
    def application_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APPLICATION_SOURCE_UNSPECIFIED', 'SYSTEM_APP_FACTORY_VERSION', 'SYSTEM_APP_UPDATED_VERSION', 'INSTALLED_FROM_PLAY_STORE']):
            raise ValueError("must be one of enum values ('APPLICATION_SOURCE_UNSPECIFIED', 'SYSTEM_APP_FACTORY_VERSION', 'SYSTEM_APP_UPDATED_VERSION', 'INSTALLED_FROM_PLAY_STORE')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APPLICATION_STATE_UNSPECIFIED', 'REMOVED', 'INSTALLED']):
            raise ValueError("must be one of enum values ('APPLICATION_STATE_UNSPECIFIED', 'REMOVED', 'INSTALLED')")
        return value

    @field_validator('user_facing_type')
    def user_facing_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['USER_FACING_TYPE_UNSPECIFIED', 'NOT_USER_FACING', 'USER_FACING']):
            raise ValueError("must be one of enum values ('USER_FACING_TYPE_UNSPECIFIED', 'NOT_USER_FACING', 'USER_FACING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in events (list)
        _items = []
        if self.events:
            for _item_events in self.events:
                if _item_events:
                    _items.append(_item_events.to_dict())
            _dict['events'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in keyed_app_states (list)
        _items = []
        if self.keyed_app_states:
            for _item_keyed_app_states in self.keyed_app_states:
                if _item_keyed_app_states:
                    _items.append(_item_keyed_app_states.to_dict())
            _dict['keyedAppStates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationSource": obj.get("applicationSource"),
            "displayName": obj.get("displayName"),
            "events": [ApplicationEvent.from_dict(_item) for _item in obj["events"]] if obj.get("events") is not None else None,
            "installerPackageName": obj.get("installerPackageName"),
            "keyedAppStates": [KeyedAppState.from_dict(_item) for _item in obj["keyedAppStates"]] if obj.get("keyedAppStates") is not None else None,
            "packageName": obj.get("packageName"),
            "packageSha256Hash": obj.get("packageSha256Hash"),
            "signingKeyCertFingerprints": obj.get("signingKeyCertFingerprints"),
            "state": obj.get("state"),
            "userFacingType": obj.get("userFacingType"),
            "versionCode": obj.get("versionCode"),
            "versionName": obj.get("versionName")
        })
        return _obj



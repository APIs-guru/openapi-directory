# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.contact_info import ContactInfo
from openapi_client.models.external_data import ExternalData
from openapi_client.models.signin_detail import SigninDetail
from openapi_client.models.terms_and_conditions import TermsAndConditions
from typing import Optional, Set
from typing_extensions import Self

class Enterprise(BaseModel):
    """
    The configuration applied to an enterprise.
    """ # noqa: E501
    app_auto_approval_enabled: Optional[StrictBool] = Field(default=None, description="Deprecated and unused.", alias="appAutoApprovalEnabled")
    contact_info: Optional[ContactInfo] = Field(default=None, alias="contactInfo")
    enabled_notification_types: Optional[List[StrictStr]] = Field(default=None, description="The types of Google Pub/Sub notifications enabled for the enterprise.", alias="enabledNotificationTypes")
    enterprise_display_name: Optional[StrictStr] = Field(default=None, description="The name of the enterprise displayed to users. This field has a maximum length of 100 characters.", alias="enterpriseDisplayName")
    logo: Optional[ExternalData] = None
    name: Optional[StrictStr] = Field(default=None, description="The name of the enterprise which is generated by the server during creation, in the form enterprises/{enterpriseId}.")
    primary_color: Optional[StrictInt] = Field(default=None, description="A color in RGB format that indicates the predominant color to display in the device management app UI. The color components are stored as follows: (red << 16) | (green << 8) | blue, where the value of each component is between 0 and 255, inclusive.", alias="primaryColor")
    pubsub_topic: Optional[StrictStr] = Field(default=None, description="The topic which Pub/Sub notifications are published to, in the form projects/{project}/topics/{topic}. This field is only required if Pub/Sub notifications are enabled.", alias="pubsubTopic")
    signin_details: Optional[List[SigninDetail]] = Field(default=None, description="Sign-in details of the enterprise.", alias="signinDetails")
    terms_and_conditions: Optional[List[TermsAndConditions]] = Field(default=None, description="Terms and conditions that must be accepted when provisioning a device for this enterprise. A page of terms is generated for each value in this list.", alias="termsAndConditions")
    __properties: ClassVar[List[str]] = ["appAutoApprovalEnabled", "contactInfo", "enabledNotificationTypes", "enterpriseDisplayName", "logo", "name", "primaryColor", "pubsubTopic", "signinDetails", "termsAndConditions"]

    @field_validator('enabled_notification_types')
    def enabled_notification_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['NOTIFICATION_TYPE_UNSPECIFIED', 'ENROLLMENT', 'COMPLIANCE_REPORT', 'STATUS_REPORT', 'COMMAND', 'USAGE_LOGS']):
                raise ValueError("each list item must be one of ('NOTIFICATION_TYPE_UNSPECIFIED', 'ENROLLMENT', 'COMPLIANCE_REPORT', 'STATUS_REPORT', 'COMMAND', 'USAGE_LOGS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Enterprise from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contact_info
        if self.contact_info:
            _dict['contactInfo'] = self.contact_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logo
        if self.logo:
            _dict['logo'] = self.logo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in signin_details (list)
        _items = []
        if self.signin_details:
            for _item_signin_details in self.signin_details:
                if _item_signin_details:
                    _items.append(_item_signin_details.to_dict())
            _dict['signinDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in terms_and_conditions (list)
        _items = []
        if self.terms_and_conditions:
            for _item_terms_and_conditions in self.terms_and_conditions:
                if _item_terms_and_conditions:
                    _items.append(_item_terms_and_conditions.to_dict())
            _dict['termsAndConditions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Enterprise from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appAutoApprovalEnabled": obj.get("appAutoApprovalEnabled"),
            "contactInfo": ContactInfo.from_dict(obj["contactInfo"]) if obj.get("contactInfo") is not None else None,
            "enabledNotificationTypes": obj.get("enabledNotificationTypes"),
            "enterpriseDisplayName": obj.get("enterpriseDisplayName"),
            "logo": ExternalData.from_dict(obj["logo"]) if obj.get("logo") is not None else None,
            "name": obj.get("name"),
            "primaryColor": obj.get("primaryColor"),
            "pubsubTopic": obj.get("pubsubTopic"),
            "signinDetails": [SigninDetail.from_dict(_item) for _item in obj["signinDetails"]] if obj.get("signinDetails") is not None else None,
            "termsAndConditions": [TermsAndConditions.from_dict(_item) for _item in obj["termsAndConditions"]] if obj.get("termsAndConditions") is not None else None
        })
        return _obj



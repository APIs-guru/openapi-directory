# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.package_name_list import PackageNameList
from typing import Optional, Set
from typing_extensions import Self

class CrossProfilePolicies(BaseModel):
    """
    Controls the data from the work profile that can be accessed from the personal profile and vice versa. A nonComplianceDetail with MANAGEMENT_MODE is reported if the device does not have a work profile.
    """ # noqa: E501
    cross_profile_copy_paste: Optional[StrictStr] = Field(default=None, description="Whether text copied from one profile (personal or work) can be pasted in the other profile.", alias="crossProfileCopyPaste")
    cross_profile_data_sharing: Optional[StrictStr] = Field(default=None, description="Whether data from one profile (personal or work) can be shared with apps in the other profile. Specifically controls simple data sharing via intents. Management of other cross-profile communication channels, such as contact search, copy/paste, or connected work & personal apps, are configured separately.", alias="crossProfileDataSharing")
    exemptions_to_show_work_contacts_in_personal_profile: Optional[PackageNameList] = Field(default=None, alias="exemptionsToShowWorkContactsInPersonalProfile")
    show_work_contacts_in_personal_profile: Optional[StrictStr] = Field(default=None, description="Whether personal apps can access contacts stored in the work profile.See also exemptions_to_show_work_contacts_in_personal_profile.", alias="showWorkContactsInPersonalProfile")
    work_profile_widgets_default: Optional[StrictStr] = Field(default=None, description="Specifies the default behaviour for work profile widgets. If the policy does not specify work_profile_widgets for a specific application, it will behave according to the value specified here.", alias="workProfileWidgetsDefault")
    __properties: ClassVar[List[str]] = ["crossProfileCopyPaste", "crossProfileDataSharing", "exemptionsToShowWorkContactsInPersonalProfile", "showWorkContactsInPersonalProfile", "workProfileWidgetsDefault"]

    @field_validator('cross_profile_copy_paste')
    def cross_profile_copy_paste_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CROSS_PROFILE_COPY_PASTE_UNSPECIFIED', 'COPY_FROM_WORK_TO_PERSONAL_DISALLOWED', 'CROSS_PROFILE_COPY_PASTE_ALLOWED']):
            raise ValueError("must be one of enum values ('CROSS_PROFILE_COPY_PASTE_UNSPECIFIED', 'COPY_FROM_WORK_TO_PERSONAL_DISALLOWED', 'CROSS_PROFILE_COPY_PASTE_ALLOWED')")
        return value

    @field_validator('cross_profile_data_sharing')
    def cross_profile_data_sharing_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CROSS_PROFILE_DATA_SHARING_UNSPECIFIED', 'CROSS_PROFILE_DATA_SHARING_DISALLOWED', 'DATA_SHARING_FROM_WORK_TO_PERSONAL_DISALLOWED', 'CROSS_PROFILE_DATA_SHARING_ALLOWED']):
            raise ValueError("must be one of enum values ('CROSS_PROFILE_DATA_SHARING_UNSPECIFIED', 'CROSS_PROFILE_DATA_SHARING_DISALLOWED', 'DATA_SHARING_FROM_WORK_TO_PERSONAL_DISALLOWED', 'CROSS_PROFILE_DATA_SHARING_ALLOWED')")
        return value

    @field_validator('show_work_contacts_in_personal_profile')
    def show_work_contacts_in_personal_profile_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_UNSPECIFIED', 'SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_DISALLOWED', 'SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_ALLOWED', 'SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_DISALLOWED_EXCEPT_SYSTEM']):
            raise ValueError("must be one of enum values ('SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_UNSPECIFIED', 'SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_DISALLOWED', 'SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_ALLOWED', 'SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_DISALLOWED_EXCEPT_SYSTEM')")
        return value

    @field_validator('work_profile_widgets_default')
    def work_profile_widgets_default_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WORK_PROFILE_WIDGETS_DEFAULT_UNSPECIFIED', 'WORK_PROFILE_WIDGETS_DEFAULT_ALLOWED', 'WORK_PROFILE_WIDGETS_DEFAULT_DISALLOWED']):
            raise ValueError("must be one of enum values ('WORK_PROFILE_WIDGETS_DEFAULT_UNSPECIFIED', 'WORK_PROFILE_WIDGETS_DEFAULT_ALLOWED', 'WORK_PROFILE_WIDGETS_DEFAULT_DISALLOWED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CrossProfilePolicies from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of exemptions_to_show_work_contacts_in_personal_profile
        if self.exemptions_to_show_work_contacts_in_personal_profile:
            _dict['exemptionsToShowWorkContactsInPersonalProfile'] = self.exemptions_to_show_work_contacts_in_personal_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CrossProfilePolicies from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "crossProfileCopyPaste": obj.get("crossProfileCopyPaste"),
            "crossProfileDataSharing": obj.get("crossProfileDataSharing"),
            "exemptionsToShowWorkContactsInPersonalProfile": PackageNameList.from_dict(obj["exemptionsToShowWorkContactsInPersonalProfile"]) if obj.get("exemptionsToShowWorkContactsInPersonalProfile") is not None else None,
            "showWorkContactsInPersonalProfile": obj.get("showWorkContactsInPersonalProfile"),
            "workProfileWidgetsDefault": obj.get("workProfileWidgetsDefault")
        })
        return _obj



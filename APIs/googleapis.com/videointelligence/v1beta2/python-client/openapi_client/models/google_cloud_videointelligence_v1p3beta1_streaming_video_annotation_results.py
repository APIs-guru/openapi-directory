# coding: utf-8

"""
    Cloud Video Intelligence API

    Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_videointelligence_v1p3beta1_explicit_content_annotation import GoogleCloudVideointelligenceV1p3beta1ExplicitContentAnnotation
from openapi_client.models.google_cloud_videointelligence_v1p3beta1_label_annotation import GoogleCloudVideointelligenceV1p3beta1LabelAnnotation
from openapi_client.models.google_cloud_videointelligence_v1p3beta1_object_tracking_annotation import GoogleCloudVideointelligenceV1p3beta1ObjectTrackingAnnotation
from openapi_client.models.google_cloud_videointelligence_v1p3beta1_video_segment import GoogleCloudVideointelligenceV1p3beta1VideoSegment
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults(BaseModel):
    """
    Streaming annotation results corresponding to a portion of the video that is currently being processed. Only ONE type of annotation will be specified in the response.
    """ # noqa: E501
    explicit_annotation: Optional[GoogleCloudVideointelligenceV1p3beta1ExplicitContentAnnotation] = Field(default=None, alias="explicitAnnotation")
    frame_timestamp: Optional[StrictStr] = Field(default=None, description="Timestamp of the processed frame in microseconds.", alias="frameTimestamp")
    label_annotations: Optional[List[GoogleCloudVideointelligenceV1p3beta1LabelAnnotation]] = Field(default=None, description="Label annotation results.", alias="labelAnnotations")
    object_annotations: Optional[List[GoogleCloudVideointelligenceV1p3beta1ObjectTrackingAnnotation]] = Field(default=None, description="Object tracking results.", alias="objectAnnotations")
    shot_annotations: Optional[List[GoogleCloudVideointelligenceV1p3beta1VideoSegment]] = Field(default=None, description="Shot annotation results. Each shot is represented as a video segment.", alias="shotAnnotations")
    __properties: ClassVar[List[str]] = ["explicitAnnotation", "frameTimestamp", "labelAnnotations", "objectAnnotations", "shotAnnotations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of explicit_annotation
        if self.explicit_annotation:
            _dict['explicitAnnotation'] = self.explicit_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in label_annotations (list)
        _items = []
        if self.label_annotations:
            for _item_label_annotations in self.label_annotations:
                if _item_label_annotations:
                    _items.append(_item_label_annotations.to_dict())
            _dict['labelAnnotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in object_annotations (list)
        _items = []
        if self.object_annotations:
            for _item_object_annotations in self.object_annotations:
                if _item_object_annotations:
                    _items.append(_item_object_annotations.to_dict())
            _dict['objectAnnotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shot_annotations (list)
        _items = []
        if self.shot_annotations:
            for _item_shot_annotations in self.shot_annotations:
                if _item_shot_annotations:
                    _items.append(_item_shot_annotations.to_dict())
            _dict['shotAnnotations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "explicitAnnotation": GoogleCloudVideointelligenceV1p3beta1ExplicitContentAnnotation.from_dict(obj["explicitAnnotation"]) if obj.get("explicitAnnotation") is not None else None,
            "frameTimestamp": obj.get("frameTimestamp"),
            "labelAnnotations": [GoogleCloudVideointelligenceV1p3beta1LabelAnnotation.from_dict(_item) for _item in obj["labelAnnotations"]] if obj.get("labelAnnotations") is not None else None,
            "objectAnnotations": [GoogleCloudVideointelligenceV1p3beta1ObjectTrackingAnnotation.from_dict(_item) for _item in obj["objectAnnotations"]] if obj.get("objectAnnotations") is not None else None,
            "shotAnnotations": [GoogleCloudVideointelligenceV1p3beta1VideoSegment.from_dict(_item) for _item in obj["shotAnnotations"]] if obj.get("shotAnnotations") is not None else None
        })
        return _obj



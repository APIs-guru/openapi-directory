# coding: utf-8

"""
    Cloud Video Intelligence API

    Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_videointelligence_v1p1beta1_normalized_bounding_box import GoogleCloudVideointelligenceV1p1beta1NormalizedBoundingBox
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVideointelligenceV1p1beta1ObjectTrackingFrame(BaseModel):
    """
    Video frame level annotations for object detection and tracking. This field stores per frame location, time offset, and confidence.
    """ # noqa: E501
    normalized_bounding_box: Optional[GoogleCloudVideointelligenceV1p1beta1NormalizedBoundingBox] = Field(default=None, alias="normalizedBoundingBox")
    time_offset: Optional[StrictStr] = Field(default=None, description="The timestamp of the frame in microseconds.", alias="timeOffset")
    __properties: ClassVar[List[str]] = ["normalizedBoundingBox", "timeOffset"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1p1beta1ObjectTrackingFrame from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of normalized_bounding_box
        if self.normalized_bounding_box:
            _dict['normalizedBoundingBox'] = self.normalized_bounding_box.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1p1beta1ObjectTrackingFrame from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "normalizedBoundingBox": GoogleCloudVideointelligenceV1p1beta1NormalizedBoundingBox.from_dict(obj["normalizedBoundingBox"]) if obj.get("normalizedBoundingBox") is not None else None,
            "timeOffset": obj.get("timeOffset")
        })
        return _obj



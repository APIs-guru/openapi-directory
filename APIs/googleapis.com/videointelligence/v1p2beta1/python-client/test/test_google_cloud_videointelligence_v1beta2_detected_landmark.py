# coding: utf-8

"""
    Cloud Video Intelligence API

    Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.

    The version of the OpenAPI document: v1p2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_videointelligence_v1beta2_detected_landmark import GoogleCloudVideointelligenceV1beta2DetectedLandmark

class TestGoogleCloudVideointelligenceV1beta2DetectedLandmark(unittest.TestCase):
    """GoogleCloudVideointelligenceV1beta2DetectedLandmark unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudVideointelligenceV1beta2DetectedLandmark:
        """Test GoogleCloudVideointelligenceV1beta2DetectedLandmark
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudVideointelligenceV1beta2DetectedLandmark`
        """
        model = GoogleCloudVideointelligenceV1beta2DetectedLandmark()
        if include_optional:
            return GoogleCloudVideointelligenceV1beta2DetectedLandmark(
                confidence = 1.337,
                name = '',
                point = openapi_client.models.google_cloud_videointelligence_v1beta2_normalized_vertex.GoogleCloudVideointelligenceV1beta2_NormalizedVertex(
                    x = 1.337, 
                    y = 1.337, )
            )
        else:
            return GoogleCloudVideointelligenceV1beta2DetectedLandmark(
        )
        """

    def testGoogleCloudVideointelligenceV1beta2DetectedLandmark(self):
        """Test GoogleCloudVideointelligenceV1beta2DetectedLandmark"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

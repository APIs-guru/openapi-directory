# coding: utf-8

"""
    Cloud Video Intelligence API

    Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.

    The version of the OpenAPI document: v1p2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVideointelligenceV1p2beta1LabelDetectionConfig(BaseModel):
    """
    Config for LABEL_DETECTION.
    """ # noqa: E501
    frame_confidence_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The confidence threshold we perform filtering on the labels from frame-level detection. If not set, it is set to 0.4 by default. The valid range for this threshold is [0.1, 0.9]. Any value set outside of this range will be clipped. Note: For best results, follow the default threshold. We will update the default threshold everytime when we release a new model.", alias="frameConfidenceThreshold")
    label_detection_mode: Optional[StrictStr] = Field(default=None, description="What labels should be detected with LABEL_DETECTION, in addition to video-level labels or segment-level labels. If unspecified, defaults to `SHOT_MODE`.", alias="labelDetectionMode")
    model: Optional[StrictStr] = Field(default=None, description="Model to use for label detection. Supported values: \"builtin/stable\" (the default if unset) and \"builtin/latest\".")
    stationary_camera: Optional[StrictBool] = Field(default=None, description="Whether the video has been shot from a stationary (i.e., non-moving) camera. When set to true, might improve detection accuracy for moving objects. Should be used with `SHOT_AND_FRAME_MODE` enabled.", alias="stationaryCamera")
    video_confidence_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The confidence threshold we perform filtering on the labels from video-level and shot-level detections. If not set, it's set to 0.3 by default. The valid range for this threshold is [0.1, 0.9]. Any value set outside of this range will be clipped. Note: For best results, follow the default threshold. We will update the default threshold everytime when we release a new model.", alias="videoConfidenceThreshold")
    __properties: ClassVar[List[str]] = ["frameConfidenceThreshold", "labelDetectionMode", "model", "stationaryCamera", "videoConfidenceThreshold"]

    @field_validator('label_detection_mode')
    def label_detection_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LABEL_DETECTION_MODE_UNSPECIFIED', 'SHOT_MODE', 'FRAME_MODE', 'SHOT_AND_FRAME_MODE']):
            raise ValueError("must be one of enum values ('LABEL_DETECTION_MODE_UNSPECIFIED', 'SHOT_MODE', 'FRAME_MODE', 'SHOT_AND_FRAME_MODE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1p2beta1LabelDetectionConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1p2beta1LabelDetectionConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "frameConfidenceThreshold": obj.get("frameConfidenceThreshold"),
            "labelDetectionMode": obj.get("labelDetectionMode"),
            "model": obj.get("model"),
            "stationaryCamera": obj.get("stationaryCamera"),
            "videoConfidenceThreshold": obj.get("videoConfidenceThreshold")
        })
        return _obj



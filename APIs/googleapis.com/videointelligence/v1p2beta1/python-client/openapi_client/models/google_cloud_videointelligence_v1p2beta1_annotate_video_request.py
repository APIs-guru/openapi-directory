# coding: utf-8

"""
    Cloud Video Intelligence API

    Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.

    The version of the OpenAPI document: v1p2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_videointelligence_v1p2beta1_video_context import GoogleCloudVideointelligenceV1p2beta1VideoContext
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest(BaseModel):
    """
    Video annotation request.
    """ # noqa: E501
    features: Optional[List[StrictStr]] = Field(default=None, description="Required. Requested video annotation features.")
    input_content: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The video data bytes. If unset, the input video(s) should be specified via the `input_uri`. If set, `input_uri` must be unset.", alias="inputContent")
    input_uri: Optional[StrictStr] = Field(default=None, description="Input video location. Currently, only [Cloud Storage](https://cloud.google.com/storage/) URIs are supported. URIs must be specified in the following format: `gs://bucket-id/object-id` (other URI formats return google.rpc.Code.INVALID_ARGUMENT). For more information, see [Request URIs](https://cloud.google.com/storage/docs/request-endpoints). To identify multiple videos, a video URI may include wildcards in the `object-id`. Supported wildcards: '*' to match 0 or more characters; '?' to match 1 character. If unset, the input video should be embedded in the request as `input_content`. If set, `input_content` must be unset.", alias="inputUri")
    location_id: Optional[StrictStr] = Field(default=None, description="Optional. Cloud region where annotation should take place. Supported cloud regions are: `us-east1`, `us-west1`, `europe-west1`, `asia-east1`. If no region is specified, the region will be determined based on video file location.", alias="locationId")
    output_uri: Optional[StrictStr] = Field(default=None, description="Optional. Location where the output (in JSON format) should be stored. Currently, only [Cloud Storage](https://cloud.google.com/storage/) URIs are supported. These must be specified in the following format: `gs://bucket-id/object-id` (other URI formats return google.rpc.Code.INVALID_ARGUMENT). For more information, see [Request URIs](https://cloud.google.com/storage/docs/request-endpoints).", alias="outputUri")
    video_context: Optional[GoogleCloudVideointelligenceV1p2beta1VideoContext] = Field(default=None, alias="videoContext")
    __properties: ClassVar[List[str]] = ["features", "inputContent", "inputUri", "locationId", "outputUri", "videoContext"]

    @field_validator('features')
    def features_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['FEATURE_UNSPECIFIED', 'LABEL_DETECTION', 'SHOT_CHANGE_DETECTION', 'EXPLICIT_CONTENT_DETECTION', 'FACE_DETECTION', 'SPEECH_TRANSCRIPTION', 'TEXT_DETECTION', 'OBJECT_TRACKING', 'LOGO_RECOGNITION', 'PERSON_DETECTION']):
                raise ValueError("each list item must be one of ('FEATURE_UNSPECIFIED', 'LABEL_DETECTION', 'SHOT_CHANGE_DETECTION', 'EXPLICIT_CONTENT_DETECTION', 'FACE_DETECTION', 'SPEECH_TRANSCRIPTION', 'TEXT_DETECTION', 'OBJECT_TRACKING', 'LOGO_RECOGNITION', 'PERSON_DETECTION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of video_context
        if self.video_context:
            _dict['videoContext'] = self.video_context.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1p2beta1AnnotateVideoRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "features": obj.get("features"),
            "inputContent": obj.get("inputContent"),
            "inputUri": obj.get("inputUri"),
            "locationId": obj.get("locationId"),
            "outputUri": obj.get("outputUri"),
            "videoContext": GoogleCloudVideointelligenceV1p2beta1VideoContext.from_dict(obj["videoContext"]) if obj.get("videoContext") is not None else None
        })
        return _obj



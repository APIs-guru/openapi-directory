# coding: utf-8

"""
    Cloud Video Intelligence API

    Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.

    The version of the OpenAPI document: v1p2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_videointelligence_v1p1beta1_normalized_bounding_box import GoogleCloudVideointelligenceV1p1beta1NormalizedBoundingBox
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVideointelligenceV1p1beta1FaceFrame(BaseModel):
    """
    Deprecated. No effect.
    """ # noqa: E501
    normalized_bounding_boxes: Optional[List[GoogleCloudVideointelligenceV1p1beta1NormalizedBoundingBox]] = Field(default=None, description="Normalized Bounding boxes in a frame. There can be more than one boxes if the same face is detected in multiple locations within the current frame.", alias="normalizedBoundingBoxes")
    time_offset: Optional[StrictStr] = Field(default=None, description="Time-offset, relative to the beginning of the video, corresponding to the video frame for this location.", alias="timeOffset")
    __properties: ClassVar[List[str]] = ["normalizedBoundingBoxes", "timeOffset"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1p1beta1FaceFrame from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in normalized_bounding_boxes (list)
        _items = []
        if self.normalized_bounding_boxes:
            for _item_normalized_bounding_boxes in self.normalized_bounding_boxes:
                if _item_normalized_bounding_boxes:
                    _items.append(_item_normalized_bounding_boxes.to_dict())
            _dict['normalizedBoundingBoxes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1p1beta1FaceFrame from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "normalizedBoundingBoxes": [GoogleCloudVideointelligenceV1p1beta1NormalizedBoundingBox.from_dict(_item) for _item in obj["normalizedBoundingBoxes"]] if obj.get("normalizedBoundingBoxes") is not None else None,
            "timeOffset": obj.get("timeOffset")
        })
        return _obj



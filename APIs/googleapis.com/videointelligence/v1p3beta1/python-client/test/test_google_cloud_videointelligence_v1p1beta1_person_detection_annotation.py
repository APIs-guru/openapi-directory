# coding: utf-8

"""
    Cloud Video Intelligence API

    Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.

    The version of the OpenAPI document: v1p3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_videointelligence_v1p1beta1_person_detection_annotation import GoogleCloudVideointelligenceV1p1beta1PersonDetectionAnnotation

class TestGoogleCloudVideointelligenceV1p1beta1PersonDetectionAnnotation(unittest.TestCase):
    """GoogleCloudVideointelligenceV1p1beta1PersonDetectionAnnotation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudVideointelligenceV1p1beta1PersonDetectionAnnotation:
        """Test GoogleCloudVideointelligenceV1p1beta1PersonDetectionAnnotation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudVideointelligenceV1p1beta1PersonDetectionAnnotation`
        """
        model = GoogleCloudVideointelligenceV1p1beta1PersonDetectionAnnotation()
        if include_optional:
            return GoogleCloudVideointelligenceV1p1beta1PersonDetectionAnnotation(
                tracks = [
                    openapi_client.models.google_cloud_videointelligence_v1p1beta1_track.GoogleCloudVideointelligenceV1p1beta1_Track(
                        attributes = [
                            openapi_client.models.google_cloud_videointelligence_v1p1beta1_detected_attribute.GoogleCloudVideointelligenceV1p1beta1_DetectedAttribute(
                                confidence = 1.337, 
                                name = '', 
                                value = '', )
                            ], 
                        confidence = 1.337, 
                        segment = openapi_client.models.google_cloud_videointelligence_v1p1beta1_video_segment.GoogleCloudVideointelligenceV1p1beta1_VideoSegment(
                            end_time_offset = '', 
                            start_time_offset = '', ), 
                        timestamped_objects = [
                            openapi_client.models.google_cloud_videointelligence_v1p1beta1_timestamped_object.GoogleCloudVideointelligenceV1p1beta1_TimestampedObject(
                                landmarks = [
                                    openapi_client.models.google_cloud_videointelligence_v1p1beta1_detected_landmark.GoogleCloudVideointelligenceV1p1beta1_DetectedLandmark(
                                        confidence = 1.337, 
                                        name = '', 
                                        point = openapi_client.models.google_cloud_videointelligence_v1p1beta1_normalized_vertex.GoogleCloudVideointelligenceV1p1beta1_NormalizedVertex(
                                            x = 1.337, 
                                            y = 1.337, ), )
                                    ], 
                                normalized_bounding_box = openapi_client.models.google_cloud_videointelligence_v1p1beta1_normalized_bounding_box.GoogleCloudVideointelligenceV1p1beta1_NormalizedBoundingBox(
                                    bottom = 1.337, 
                                    left = 1.337, 
                                    right = 1.337, 
                                    top = 1.337, ), 
                                time_offset = '', )
                            ], )
                    ],
                version = ''
            )
        else:
            return GoogleCloudVideointelligenceV1p1beta1PersonDetectionAnnotation(
        )
        """

    def testGoogleCloudVideointelligenceV1p1beta1PersonDetectionAnnotation(self):
        """Test GoogleCloudVideointelligenceV1p1beta1PersonDetectionAnnotation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

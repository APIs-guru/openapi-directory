# coding: utf-8

"""
    Cloud Video Intelligence API

    Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.

    The version of the OpenAPI document: v1p3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_videointelligence_v1p2beta1_video_annotation_results import GoogleCloudVideointelligenceV1p2beta1VideoAnnotationResults
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVideointelligenceV1p2beta1AnnotateVideoResponse(BaseModel):
    """
    Video annotation response. Included in the `response` field of the `Operation` returned by the `GetOperation` call of the `google::longrunning::Operations` service.
    """ # noqa: E501
    annotation_results: Optional[List[GoogleCloudVideointelligenceV1p2beta1VideoAnnotationResults]] = Field(default=None, description="Annotation results for all videos specified in `AnnotateVideoRequest`.", alias="annotationResults")
    __properties: ClassVar[List[str]] = ["annotationResults"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1p2beta1AnnotateVideoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in annotation_results (list)
        _items = []
        if self.annotation_results:
            for _item_annotation_results in self.annotation_results:
                if _item_annotation_results:
                    _items.append(_item_annotation_results.to_dict())
            _dict['annotationResults'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1p2beta1AnnotateVideoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotationResults": [GoogleCloudVideointelligenceV1p2beta1VideoAnnotationResults.from_dict(_item) for _item in obj["annotationResults"]] if obj.get("annotationResults") is not None else None
        })
        return _obj



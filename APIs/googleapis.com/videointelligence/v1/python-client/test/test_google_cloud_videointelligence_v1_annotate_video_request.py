# coding: utf-8

"""
    Cloud Video Intelligence API

    Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_videointelligence_v1_annotate_video_request import GoogleCloudVideointelligenceV1AnnotateVideoRequest

class TestGoogleCloudVideointelligenceV1AnnotateVideoRequest(unittest.TestCase):
    """GoogleCloudVideointelligenceV1AnnotateVideoRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudVideointelligenceV1AnnotateVideoRequest:
        """Test GoogleCloudVideointelligenceV1AnnotateVideoRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudVideointelligenceV1AnnotateVideoRequest`
        """
        model = GoogleCloudVideointelligenceV1AnnotateVideoRequest()
        if include_optional:
            return GoogleCloudVideointelligenceV1AnnotateVideoRequest(
                features = [
                    'FEATURE_UNSPECIFIED'
                    ],
                input_content = 'YQ==',
                input_uri = '',
                location_id = '',
                output_uri = '',
                video_context = openapi_client.models.google_cloud_videointelligence_v1_video_context.GoogleCloudVideointelligenceV1_VideoContext(
                    explicit_content_detection_config = openapi_client.models.google_cloud_videointelligence_v1_explicit_content_detection_config.GoogleCloudVideointelligenceV1_ExplicitContentDetectionConfig(
                        model = '', ), 
                    face_detection_config = openapi_client.models.google_cloud_videointelligence_v1_face_detection_config.GoogleCloudVideointelligenceV1_FaceDetectionConfig(
                        include_attributes = True, 
                        include_bounding_boxes = True, 
                        model = '', ), 
                    label_detection_config = openapi_client.models.google_cloud_videointelligence_v1_label_detection_config.GoogleCloudVideointelligenceV1_LabelDetectionConfig(
                        frame_confidence_threshold = 1.337, 
                        label_detection_mode = 'LABEL_DETECTION_MODE_UNSPECIFIED', 
                        model = '', 
                        stationary_camera = True, 
                        video_confidence_threshold = 1.337, ), 
                    object_tracking_config = openapi_client.models.google_cloud_videointelligence_v1_object_tracking_config.GoogleCloudVideointelligenceV1_ObjectTrackingConfig(
                        model = '', ), 
                    person_detection_config = openapi_client.models.google_cloud_videointelligence_v1_person_detection_config.GoogleCloudVideointelligenceV1_PersonDetectionConfig(
                        include_attributes = True, 
                        include_bounding_boxes = True, 
                        include_pose_landmarks = True, ), 
                    segments = [
                        openapi_client.models.google_cloud_videointelligence_v1_video_segment.GoogleCloudVideointelligenceV1_VideoSegment(
                            end_time_offset = '', 
                            start_time_offset = '', )
                        ], 
                    shot_change_detection_config = openapi_client.models.google_cloud_videointelligence_v1_shot_change_detection_config.GoogleCloudVideointelligenceV1_ShotChangeDetectionConfig(
                        model = '', ), 
                    speech_transcription_config = openapi_client.models.google_cloud_videointelligence_v1_speech_transcription_config.GoogleCloudVideointelligenceV1_SpeechTranscriptionConfig(
                        audio_tracks = [
                            56
                            ], 
                        diarization_speaker_count = 56, 
                        enable_automatic_punctuation = True, 
                        enable_speaker_diarization = True, 
                        enable_word_confidence = True, 
                        filter_profanity = True, 
                        language_code = '', 
                        max_alternatives = 56, 
                        speech_contexts = [
                            openapi_client.models.google_cloud_videointelligence_v1_speech_context.GoogleCloudVideointelligenceV1_SpeechContext(
                                phrases = [
                                    ''
                                    ], )
                            ], ), 
                    text_detection_config = openapi_client.models.google_cloud_videointelligence_v1_text_detection_config.GoogleCloudVideointelligenceV1_TextDetectionConfig(
                        language_hints = [
                            ''
                            ], 
                        model = '', ), )
            )
        else:
            return GoogleCloudVideointelligenceV1AnnotateVideoRequest(
        )
        """

    def testGoogleCloudVideointelligenceV1AnnotateVideoRequest(self):
        """Test GoogleCloudVideointelligenceV1AnnotateVideoRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

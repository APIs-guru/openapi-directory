# coding: utf-8

"""
    Cloud Video Intelligence API

    Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_videointelligence_v1_label_detection_config import GoogleCloudVideointelligenceV1LabelDetectionConfig

class TestGoogleCloudVideointelligenceV1LabelDetectionConfig(unittest.TestCase):
    """GoogleCloudVideointelligenceV1LabelDetectionConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudVideointelligenceV1LabelDetectionConfig:
        """Test GoogleCloudVideointelligenceV1LabelDetectionConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudVideointelligenceV1LabelDetectionConfig`
        """
        model = GoogleCloudVideointelligenceV1LabelDetectionConfig()
        if include_optional:
            return GoogleCloudVideointelligenceV1LabelDetectionConfig(
                frame_confidence_threshold = 1.337,
                label_detection_mode = 'LABEL_DETECTION_MODE_UNSPECIFIED',
                model = '',
                stationary_camera = True,
                video_confidence_threshold = 1.337
            )
        else:
            return GoogleCloudVideointelligenceV1LabelDetectionConfig(
        )
        """

    def testGoogleCloudVideointelligenceV1LabelDetectionConfig(self):
        """Test GoogleCloudVideointelligenceV1LabelDetectionConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

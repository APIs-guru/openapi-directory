# coding: utf-8

"""
    Cloud Video Intelligence API

    Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_videointelligence_v1beta2_annotate_video_response import GoogleCloudVideointelligenceV1beta2AnnotateVideoResponse

class TestGoogleCloudVideointelligenceV1beta2AnnotateVideoResponse(unittest.TestCase):
    """GoogleCloudVideointelligenceV1beta2AnnotateVideoResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudVideointelligenceV1beta2AnnotateVideoResponse:
        """Test GoogleCloudVideointelligenceV1beta2AnnotateVideoResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudVideointelligenceV1beta2AnnotateVideoResponse`
        """
        model = GoogleCloudVideointelligenceV1beta2AnnotateVideoResponse()
        if include_optional:
            return GoogleCloudVideointelligenceV1beta2AnnotateVideoResponse(
                annotation_results = [
                    openapi_client.models.google_cloud_videointelligence_v1beta2_video_annotation_results.GoogleCloudVideointelligenceV1beta2_VideoAnnotationResults(
                        error = openapi_client.models.google_rpc_status.GoogleRpc_Status(
                            code = 56, 
                            details = [
                                {
                                    'key' : null
                                    }
                                ], 
                            message = '', ), 
                        explicit_annotation = openapi_client.models.google_cloud_videointelligence_v1beta2_explicit_content_annotation.GoogleCloudVideointelligenceV1beta2_ExplicitContentAnnotation(
                            frames = [
                                openapi_client.models.google_cloud_videointelligence_v1beta2_explicit_content_frame.GoogleCloudVideointelligenceV1beta2_ExplicitContentFrame(
                                    pornography_likelihood = 'LIKELIHOOD_UNSPECIFIED', 
                                    time_offset = '', )
                                ], 
                            version = '', ), 
                        face_annotations = [
                            openapi_client.models.google_cloud_videointelligence_v1beta2_face_annotation.GoogleCloudVideointelligenceV1beta2_FaceAnnotation(
                                segments = [
                                    openapi_client.models.google_cloud_videointelligence_v1beta2_face_segment.GoogleCloudVideointelligenceV1beta2_FaceSegment(
                                        segment = openapi_client.models.google_cloud_videointelligence_v1beta2_video_segment.GoogleCloudVideointelligenceV1beta2_VideoSegment(
                                            end_time_offset = '', 
                                            start_time_offset = '', ), )
                                    ], 
                                thumbnail = 'YQ==', )
                            ], 
                        face_detection_annotations = [
                            openapi_client.models.google_cloud_videointelligence_v1beta2_face_detection_annotation.GoogleCloudVideointelligenceV1beta2_FaceDetectionAnnotation(
                                thumbnail = 'YQ==', 
                                tracks = [
                                    openapi_client.models.google_cloud_videointelligence_v1beta2_track.GoogleCloudVideointelligenceV1beta2_Track(
                                        attributes = [
                                            openapi_client.models.google_cloud_videointelligence_v1beta2_detected_attribute.GoogleCloudVideointelligenceV1beta2_DetectedAttribute(
                                                confidence = 1.337, 
                                                name = '', 
                                                value = '', )
                                            ], 
                                        confidence = 1.337, 
                                        timestamped_objects = [
                                            openapi_client.models.google_cloud_videointelligence_v1beta2_timestamped_object.GoogleCloudVideointelligenceV1beta2_TimestampedObject(
                                                landmarks = [
                                                    openapi_client.models.google_cloud_videointelligence_v1beta2_detected_landmark.GoogleCloudVideointelligenceV1beta2_DetectedLandmark(
                                                        confidence = 1.337, 
                                                        name = '', 
                                                        point = openapi_client.models.google_cloud_videointelligence_v1beta2_normalized_vertex.GoogleCloudVideointelligenceV1beta2_NormalizedVertex(
                                                            x = 1.337, 
                                                            y = 1.337, ), )
                                                    ], 
                                                normalized_bounding_box = openapi_client.models.google_cloud_videointelligence_v1beta2_normalized_bounding_box.GoogleCloudVideointelligenceV1beta2_NormalizedBoundingBox(
                                                    bottom = 1.337, 
                                                    left = 1.337, 
                                                    right = 1.337, 
                                                    top = 1.337, ), 
                                                time_offset = '', )
                                            ], )
                                    ], 
                                version = '', )
                            ], 
                        frame_label_annotations = [
                            openapi_client.models.google_cloud_videointelligence_v1beta2_label_annotation.GoogleCloudVideointelligenceV1beta2_LabelAnnotation(
                                category_entities = [
                                    openapi_client.models.google_cloud_videointelligence_v1beta2_entity.GoogleCloudVideointelligenceV1beta2_Entity(
                                        description = '', 
                                        entity_id = '', 
                                        language_code = '', )
                                    ], 
                                entity = openapi_client.models.google_cloud_videointelligence_v1beta2_entity.GoogleCloudVideointelligenceV1beta2_Entity(
                                    description = '', 
                                    entity_id = '', 
                                    language_code = '', ), 
                                version = '', )
                            ], 
                        input_uri = '', 
                        logo_recognition_annotations = [
                            openapi_client.models.google_cloud_videointelligence_v1beta2_logo_recognition_annotation.GoogleCloudVideointelligenceV1beta2_LogoRecognitionAnnotation()
                            ], 
                        object_annotations = [
                            openapi_client.models.google_cloud_videointelligence_v1beta2_object_tracking_annotation.GoogleCloudVideointelligenceV1beta2_ObjectTrackingAnnotation(
                                confidence = 1.337, 
                                track_id = '', 
                                version = '', )
                            ], 
                        person_detection_annotations = [
                            openapi_client.models.google_cloud_videointelligence_v1beta2_person_detection_annotation.GoogleCloudVideointelligenceV1beta2_PersonDetectionAnnotation(
                                version = '', )
                            ], 
                        segment = openapi_client.models.google_cloud_videointelligence_v1beta2_video_segment.GoogleCloudVideointelligenceV1beta2_VideoSegment(
                            end_time_offset = '', 
                            start_time_offset = '', ), 
                        segment_label_annotations = [
                            openapi_client.models.google_cloud_videointelligence_v1beta2_label_annotation.GoogleCloudVideointelligenceV1beta2_LabelAnnotation(
                                version = '', )
                            ], 
                        segment_presence_label_annotations = [
                            
                            ], 
                        shot_annotations = [
                            
                            ], 
                        shot_label_annotations = [
                            
                            ], 
                        shot_presence_label_annotations = [
                            
                            ], 
                        speech_transcriptions = [
                            openapi_client.models.google_cloud_videointelligence_v1beta2_speech_transcription.GoogleCloudVideointelligenceV1beta2_SpeechTranscription(
                                alternatives = [
                                    openapi_client.models.google_cloud_videointelligence_v1beta2_speech_recognition_alternative.GoogleCloudVideointelligenceV1beta2_SpeechRecognitionAlternative(
                                        confidence = 1.337, 
                                        transcript = '', 
                                        words = [
                                            openapi_client.models.google_cloud_videointelligence_v1beta2_word_info.GoogleCloudVideointelligenceV1beta2_WordInfo(
                                                confidence = 1.337, 
                                                end_time = '', 
                                                speaker_tag = 56, 
                                                start_time = '', 
                                                word = '', )
                                            ], )
                                    ], 
                                language_code = '', )
                            ], 
                        text_annotations = [
                            openapi_client.models.google_cloud_videointelligence_v1beta2_text_annotation.GoogleCloudVideointelligenceV1beta2_TextAnnotation(
                                text = '', 
                                version = '', )
                            ], )
                    ]
            )
        else:
            return GoogleCloudVideointelligenceV1beta2AnnotateVideoResponse(
        )
        """

    def testGoogleCloudVideointelligenceV1beta2AnnotateVideoResponse(self):
        """Test GoogleCloudVideointelligenceV1beta2AnnotateVideoResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

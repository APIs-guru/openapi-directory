# coding: utf-8

"""
    Cloud Video Intelligence API

    Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_videointelligence_v1p3beta1_video_segment import GoogleCloudVideointelligenceV1p3beta1VideoSegment
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVideointelligenceV1p3beta1VideoAnnotationProgress(BaseModel):
    """
    Annotation progress for a single video.
    """ # noqa: E501
    feature: Optional[StrictStr] = Field(default=None, description="Specifies which feature is being tracked if the request contains more than one feature.")
    input_uri: Optional[StrictStr] = Field(default=None, description="Video file location in [Cloud Storage](https://cloud.google.com/storage/).", alias="inputUri")
    progress_percent: Optional[StrictInt] = Field(default=None, description="Approximate percentage processed thus far. Guaranteed to be 100 when fully processed.", alias="progressPercent")
    segment: Optional[GoogleCloudVideointelligenceV1p3beta1VideoSegment] = None
    start_time: Optional[StrictStr] = Field(default=None, description="Time when the request was received.", alias="startTime")
    update_time: Optional[StrictStr] = Field(default=None, description="Time of the most recent update.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["feature", "inputUri", "progressPercent", "segment", "startTime", "updateTime"]

    @field_validator('feature')
    def feature_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FEATURE_UNSPECIFIED', 'LABEL_DETECTION', 'SHOT_CHANGE_DETECTION', 'EXPLICIT_CONTENT_DETECTION', 'FACE_DETECTION', 'SPEECH_TRANSCRIPTION', 'TEXT_DETECTION', 'OBJECT_TRACKING', 'LOGO_RECOGNITION', 'CELEBRITY_RECOGNITION', 'PERSON_DETECTION']):
            raise ValueError("must be one of enum values ('FEATURE_UNSPECIFIED', 'LABEL_DETECTION', 'SHOT_CHANGE_DETECTION', 'EXPLICIT_CONTENT_DETECTION', 'FACE_DETECTION', 'SPEECH_TRANSCRIPTION', 'TEXT_DETECTION', 'OBJECT_TRACKING', 'LOGO_RECOGNITION', 'CELEBRITY_RECOGNITION', 'PERSON_DETECTION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1p3beta1VideoAnnotationProgress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of segment
        if self.segment:
            _dict['segment'] = self.segment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1p3beta1VideoAnnotationProgress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "feature": obj.get("feature"),
            "inputUri": obj.get("inputUri"),
            "progressPercent": obj.get("progressPercent"),
            "segment": GoogleCloudVideointelligenceV1p3beta1VideoSegment.from_dict(obj["segment"]) if obj.get("segment") is not None else None,
            "startTime": obj.get("startTime"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



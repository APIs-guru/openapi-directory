# coding: utf-8

"""
    Cloud Video Intelligence API

    Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_videointelligence_v1p1beta1_entity import GoogleCloudVideointelligenceV1p1beta1Entity
from openapi_client.models.google_cloud_videointelligence_v1p1beta1_track import GoogleCloudVideointelligenceV1p1beta1Track
from openapi_client.models.google_cloud_videointelligence_v1p1beta1_video_segment import GoogleCloudVideointelligenceV1p1beta1VideoSegment
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation(BaseModel):
    """
    Annotation corresponding to one detected, tracked and recognized logo class.
    """ # noqa: E501
    entity: Optional[GoogleCloudVideointelligenceV1p1beta1Entity] = None
    segments: Optional[List[GoogleCloudVideointelligenceV1p1beta1VideoSegment]] = Field(default=None, description="All video segments where the recognized logo appears. There might be multiple instances of the same logo class appearing in one VideoSegment.")
    tracks: Optional[List[GoogleCloudVideointelligenceV1p1beta1Track]] = Field(default=None, description="All logo tracks where the recognized logo appears. Each track corresponds to one logo instance appearing in consecutive frames.")
    __properties: ClassVar[List[str]] = ["entity", "segments", "tracks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict['entity'] = self.entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in segments (list)
        _items = []
        if self.segments:
            for _item_segments in self.segments:
                if _item_segments:
                    _items.append(_item_segments.to_dict())
            _dict['segments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tracks (list)
        _items = []
        if self.tracks:
            for _item_tracks in self.tracks:
                if _item_tracks:
                    _items.append(_item_tracks.to_dict())
            _dict['tracks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entity": GoogleCloudVideointelligenceV1p1beta1Entity.from_dict(obj["entity"]) if obj.get("entity") is not None else None,
            "segments": [GoogleCloudVideointelligenceV1p1beta1VideoSegment.from_dict(_item) for _item in obj["segments"]] if obj.get("segments") is not None else None,
            "tracks": [GoogleCloudVideointelligenceV1p1beta1Track.from_dict(_item) for _item in obj["tracks"]] if obj.get("tracks") is not None else None
        })
        return _obj



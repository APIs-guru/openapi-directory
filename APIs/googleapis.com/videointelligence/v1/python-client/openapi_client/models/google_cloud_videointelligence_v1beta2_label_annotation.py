# coding: utf-8

"""
    Cloud Video Intelligence API

    Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_videointelligence_v1beta2_entity import GoogleCloudVideointelligenceV1beta2Entity
from openapi_client.models.google_cloud_videointelligence_v1beta2_label_frame import GoogleCloudVideointelligenceV1beta2LabelFrame
from openapi_client.models.google_cloud_videointelligence_v1beta2_label_segment import GoogleCloudVideointelligenceV1beta2LabelSegment
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVideointelligenceV1beta2LabelAnnotation(BaseModel):
    """
    Label annotation.
    """ # noqa: E501
    category_entities: Optional[List[GoogleCloudVideointelligenceV1beta2Entity]] = Field(default=None, description="Common categories for the detected entity. For example, when the label is `Terrier`, the category is likely `dog`. And in some cases there might be more than one categories e.g., `Terrier` could also be a `pet`.", alias="categoryEntities")
    entity: Optional[GoogleCloudVideointelligenceV1beta2Entity] = None
    frames: Optional[List[GoogleCloudVideointelligenceV1beta2LabelFrame]] = Field(default=None, description="All video frames where a label was detected.")
    segments: Optional[List[GoogleCloudVideointelligenceV1beta2LabelSegment]] = Field(default=None, description="All video segments where a label was detected.")
    version: Optional[StrictStr] = Field(default=None, description="Feature version.")
    __properties: ClassVar[List[str]] = ["categoryEntities", "entity", "frames", "segments", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1beta2LabelAnnotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in category_entities (list)
        _items = []
        if self.category_entities:
            for _item_category_entities in self.category_entities:
                if _item_category_entities:
                    _items.append(_item_category_entities.to_dict())
            _dict['categoryEntities'] = _items
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict['entity'] = self.entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in frames (list)
        _items = []
        if self.frames:
            for _item_frames in self.frames:
                if _item_frames:
                    _items.append(_item_frames.to_dict())
            _dict['frames'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in segments (list)
        _items = []
        if self.segments:
            for _item_segments in self.segments:
                if _item_segments:
                    _items.append(_item_segments.to_dict())
            _dict['segments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1beta2LabelAnnotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categoryEntities": [GoogleCloudVideointelligenceV1beta2Entity.from_dict(_item) for _item in obj["categoryEntities"]] if obj.get("categoryEntities") is not None else None,
            "entity": GoogleCloudVideointelligenceV1beta2Entity.from_dict(obj["entity"]) if obj.get("entity") is not None else None,
            "frames": [GoogleCloudVideointelligenceV1beta2LabelFrame.from_dict(_item) for _item in obj["frames"]] if obj.get("frames") is not None else None,
            "segments": [GoogleCloudVideointelligenceV1beta2LabelSegment.from_dict(_item) for _item in obj["segments"]] if obj.get("segments") is not None else None,
            "version": obj.get("version")
        })
        return _obj



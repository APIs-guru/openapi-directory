# coding: utf-8

"""
    Cloud Video Intelligence API

    Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_videointelligence_v1p1beta1_detected_attribute import GoogleCloudVideointelligenceV1p1beta1DetectedAttribute
from openapi_client.models.google_cloud_videointelligence_v1p1beta1_timestamped_object import GoogleCloudVideointelligenceV1p1beta1TimestampedObject
from openapi_client.models.google_cloud_videointelligence_v1p1beta1_video_segment import GoogleCloudVideointelligenceV1p1beta1VideoSegment
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVideointelligenceV1p1beta1Track(BaseModel):
    """
    A track of an object instance.
    """ # noqa: E501
    attributes: Optional[List[GoogleCloudVideointelligenceV1p1beta1DetectedAttribute]] = Field(default=None, description="Optional. Attributes in the track level.")
    confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. The confidence score of the tracked object.")
    segment: Optional[GoogleCloudVideointelligenceV1p1beta1VideoSegment] = None
    timestamped_objects: Optional[List[GoogleCloudVideointelligenceV1p1beta1TimestampedObject]] = Field(default=None, description="The object with timestamp and attributes per frame in the track.", alias="timestampedObjects")
    __properties: ClassVar[List[str]] = ["attributes", "confidence", "segment", "timestampedObjects"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1p1beta1Track from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of segment
        if self.segment:
            _dict['segment'] = self.segment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in timestamped_objects (list)
        _items = []
        if self.timestamped_objects:
            for _item_timestamped_objects in self.timestamped_objects:
                if _item_timestamped_objects:
                    _items.append(_item_timestamped_objects.to_dict())
            _dict['timestampedObjects'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVideointelligenceV1p1beta1Track from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": [GoogleCloudVideointelligenceV1p1beta1DetectedAttribute.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "confidence": obj.get("confidence"),
            "segment": GoogleCloudVideointelligenceV1p1beta1VideoSegment.from_dict(obj["segment"]) if obj.get("segment") is not None else None,
            "timestampedObjects": [GoogleCloudVideointelligenceV1p1beta1TimestampedObject.from_dict(_item) for _item in obj["timestampedObjects"]] if obj.get("timestampedObjects") is not None else None
        })
        return _obj



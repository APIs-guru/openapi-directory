# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.localized_string import LocalizedString
from typing import Optional, Set
from typing_extensions import Self

class TicketSeat(BaseModel):
    """
    TicketSeat
    """ # noqa: E501
    coach: Optional[StrictStr] = Field(default=None, description="The identifier of the train car or coach in which the ticketed seat is located. Eg. \"10\"")
    custom_fare_class: Optional[LocalizedString] = Field(default=None, alias="customFareClass")
    fare_class: Optional[StrictStr] = Field(default=None, description="The fare class of the ticketed seat.", alias="fareClass")
    seat: Optional[StrictStr] = Field(default=None, description="The identifier of where the ticketed seat is located. Eg. \"42\". If there is no specific identifier, use `seatAssigment` instead.")
    seat_assignment: Optional[LocalizedString] = Field(default=None, alias="seatAssignment")
    __properties: ClassVar[List[str]] = ["coach", "customFareClass", "fareClass", "seat", "seatAssignment"]

    @field_validator('fare_class')
    def fare_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FARE_CLASS_UNSPECIFIED', 'ECONOMY', 'economy', 'FIRST', 'first', 'BUSINESS', 'business']):
            raise ValueError("must be one of enum values ('FARE_CLASS_UNSPECIFIED', 'ECONOMY', 'economy', 'FIRST', 'first', 'BUSINESS', 'business')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TicketSeat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_fare_class
        if self.custom_fare_class:
            _dict['customFareClass'] = self.custom_fare_class.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seat_assignment
        if self.seat_assignment:
            _dict['seatAssignment'] = self.seat_assignment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TicketSeat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coach": obj.get("coach"),
            "customFareClass": LocalizedString.from_dict(obj["customFareClass"]) if obj.get("customFareClass") is not None else None,
            "fareClass": obj.get("fareClass"),
            "seat": obj.get("seat"),
            "seatAssignment": LocalizedString.from_dict(obj["seatAssignment"]) if obj.get("seatAssignment") is not None else None
        })
        return _obj



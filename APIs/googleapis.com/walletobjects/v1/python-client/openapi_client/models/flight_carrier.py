# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image import Image
from openapi_client.models.localized_string import LocalizedString
from typing import Optional, Set
from typing_extensions import Self

class FlightCarrier(BaseModel):
    """
    FlightCarrier
    """ # noqa: E501
    airline_alliance_logo: Optional[Image] = Field(default=None, alias="airlineAllianceLogo")
    airline_logo: Optional[Image] = Field(default=None, alias="airlineLogo")
    airline_name: Optional[LocalizedString] = Field(default=None, alias="airlineName")
    carrier_iata_code: Optional[StrictStr] = Field(default=None, description="Two character IATA airline code of the marketing carrier (as opposed to operating carrier). Exactly one of this or `carrierIcaoCode` needs to be provided for `carrier` and `operatingCarrier`. eg: \"LX\" for Swiss Air", alias="carrierIataCode")
    carrier_icao_code: Optional[StrictStr] = Field(default=None, description="Three character ICAO airline code of the marketing carrier (as opposed to operating carrier). Exactly one of this or `carrierIataCode` needs to be provided for `carrier` and `operatingCarrier`. eg: \"EZY\" for Easy Jet", alias="carrierIcaoCode")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#flightCarrier\"`.")
    wide_airline_logo: Optional[Image] = Field(default=None, alias="wideAirlineLogo")
    __properties: ClassVar[List[str]] = ["airlineAllianceLogo", "airlineLogo", "airlineName", "carrierIataCode", "carrierIcaoCode", "kind", "wideAirlineLogo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FlightCarrier from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of airline_alliance_logo
        if self.airline_alliance_logo:
            _dict['airlineAllianceLogo'] = self.airline_alliance_logo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of airline_logo
        if self.airline_logo:
            _dict['airlineLogo'] = self.airline_logo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of airline_name
        if self.airline_name:
            _dict['airlineName'] = self.airline_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wide_airline_logo
        if self.wide_airline_logo:
            _dict['wideAirlineLogo'] = self.wide_airline_logo.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FlightCarrier from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "airlineAllianceLogo": Image.from_dict(obj["airlineAllianceLogo"]) if obj.get("airlineAllianceLogo") is not None else None,
            "airlineLogo": Image.from_dict(obj["airlineLogo"]) if obj.get("airlineLogo") is not None else None,
            "airlineName": LocalizedString.from_dict(obj["airlineName"]) if obj.get("airlineName") is not None else None,
            "carrierIataCode": obj.get("carrierIataCode"),
            "carrierIcaoCode": obj.get("carrierIcaoCode"),
            "kind": obj.get("kind"),
            "wideAirlineLogo": Image.from_dict(obj["wideAirlineLogo"]) if obj.get("wideAirlineLogo") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_link_data import AppLinkData
from openapi_client.models.barcode import Barcode
from openapi_client.models.boarding_and_seating_info import BoardingAndSeatingInfo
from openapi_client.models.flight_class import FlightClass
from openapi_client.models.grouping_info import GroupingInfo
from openapi_client.models.image import Image
from openapi_client.models.image_module_data import ImageModuleData
from openapi_client.models.info_module_data import InfoModuleData
from openapi_client.models.lat_long_point import LatLongPoint
from openapi_client.models.links_module_data import LinksModuleData
from openapi_client.models.message import Message
from openapi_client.models.pass_constraints import PassConstraints
from openapi_client.models.reservation_info import ReservationInfo
from openapi_client.models.rotating_barcode import RotatingBarcode
from openapi_client.models.text_module_data import TextModuleData
from openapi_client.models.time_interval import TimeInterval
from typing import Optional, Set
from typing_extensions import Self

class FlightObject(BaseModel):
    """
    FlightObject
    """ # noqa: E501
    app_link_data: Optional[AppLinkData] = Field(default=None, alias="appLinkData")
    barcode: Optional[Barcode] = None
    boarding_and_seating_info: Optional[BoardingAndSeatingInfo] = Field(default=None, alias="boardingAndSeatingInfo")
    class_id: Optional[StrictStr] = Field(default=None, description="Required. The class associated with this object. The class must be of the same type as this object, must already exist, and must be approved. Class IDs should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you.", alias="classId")
    class_reference: Optional[FlightClass] = Field(default=None, alias="classReference")
    disable_expiration_notification: Optional[StrictBool] = Field(default=None, description="Indicates if notifications should explicitly be suppressed. If this field is set to true, regardless of the `messages` field, expiration notifications to the user will be suppressed. By default, this field is set to false. Currently, this can only be set for Flights.", alias="disableExpirationNotification")
    grouping_info: Optional[GroupingInfo] = Field(default=None, alias="groupingInfo")
    has_linked_device: Optional[StrictBool] = Field(default=None, description="Whether this object is currently linked to a single device. This field is set by the platform when a user saves the object, linking it to their device. Intended for use by select partners. Contact support for additional information.", alias="hasLinkedDevice")
    has_users: Optional[StrictBool] = Field(default=None, description="Indicates if the object has users. This field is set by the platform.", alias="hasUsers")
    hero_image: Optional[Image] = Field(default=None, alias="heroImage")
    hex_background_color: Optional[StrictStr] = Field(default=None, description="The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.", alias="hexBackgroundColor")
    id: Optional[StrictStr] = Field(default=None, description="Required. The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you. The unique identifier should only include alphanumeric characters, '.', '_', or '-'.")
    image_modules_data: Optional[List[ImageModuleData]] = Field(default=None, description="Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.", alias="imageModulesData")
    info_module_data: Optional[InfoModuleData] = Field(default=None, alias="infoModuleData")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#flightObject\"`.")
    links_module_data: Optional[LinksModuleData] = Field(default=None, alias="linksModuleData")
    locations: Optional[List[LatLongPoint]] = Field(default=None, description="Note: This field is currently not supported to trigger geo notifications.")
    messages: Optional[List[Message]] = Field(default=None, description="An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.")
    pass_constraints: Optional[PassConstraints] = Field(default=None, alias="passConstraints")
    passenger_name: Optional[StrictStr] = Field(default=None, description="Required. Passenger name as it would appear on the boarding pass. eg: \"Dave M Gahan\" or \"Gahan/Dave\" or \"GAHAN/DAVEM\"", alias="passengerName")
    reservation_info: Optional[ReservationInfo] = Field(default=None, alias="reservationInfo")
    rotating_barcode: Optional[RotatingBarcode] = Field(default=None, alias="rotatingBarcode")
    security_program_logo: Optional[Image] = Field(default=None, alias="securityProgramLogo")
    smart_tap_redemption_value: Optional[StrictStr] = Field(default=None, description="The value that will be transmitted to a Smart Tap certified terminal over NFC for this object. The class level fields `enableSmartTap` and `redemptionIssuers` must also be set up correctly in order for the pass to support Smart Tap. Only ASCII characters are supported.", alias="smartTapRedemptionValue")
    state: Optional[StrictStr] = Field(default=None, description="Required. The state of the object. This field is used to determine how an object is displayed in the app. For example, an `inactive` object is moved to the \"Expired passes\" section.")
    text_modules_data: Optional[List[TextModuleData]] = Field(default=None, description="Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.", alias="textModulesData")
    valid_time_interval: Optional[TimeInterval] = Field(default=None, alias="validTimeInterval")
    version: Optional[StrictStr] = Field(default=None, description="Deprecated")
    __properties: ClassVar[List[str]] = ["appLinkData", "barcode", "boardingAndSeatingInfo", "classId", "classReference", "disableExpirationNotification", "groupingInfo", "hasLinkedDevice", "hasUsers", "heroImage", "hexBackgroundColor", "id", "imageModulesData", "infoModuleData", "kind", "linksModuleData", "locations", "messages", "passConstraints", "passengerName", "reservationInfo", "rotatingBarcode", "securityProgramLogo", "smartTapRedemptionValue", "state", "textModulesData", "validTimeInterval", "version"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'active', 'COMPLETED', 'completed', 'EXPIRED', 'expired', 'INACTIVE', 'inactive']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'active', 'COMPLETED', 'completed', 'EXPIRED', 'expired', 'INACTIVE', 'inactive')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FlightObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_link_data
        if self.app_link_data:
            _dict['appLinkData'] = self.app_link_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of barcode
        if self.barcode:
            _dict['barcode'] = self.barcode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of boarding_and_seating_info
        if self.boarding_and_seating_info:
            _dict['boardingAndSeatingInfo'] = self.boarding_and_seating_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of class_reference
        if self.class_reference:
            _dict['classReference'] = self.class_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of grouping_info
        if self.grouping_info:
            _dict['groupingInfo'] = self.grouping_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hero_image
        if self.hero_image:
            _dict['heroImage'] = self.hero_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in image_modules_data (list)
        _items = []
        if self.image_modules_data:
            for _item_image_modules_data in self.image_modules_data:
                if _item_image_modules_data:
                    _items.append(_item_image_modules_data.to_dict())
            _dict['imageModulesData'] = _items
        # override the default output from pydantic by calling `to_dict()` of info_module_data
        if self.info_module_data:
            _dict['infoModuleData'] = self.info_module_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of links_module_data
        if self.links_module_data:
            _dict['linksModuleData'] = self.links_module_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in locations (list)
        _items = []
        if self.locations:
            for _item_locations in self.locations:
                if _item_locations:
                    _items.append(_item_locations.to_dict())
            _dict['locations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of pass_constraints
        if self.pass_constraints:
            _dict['passConstraints'] = self.pass_constraints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reservation_info
        if self.reservation_info:
            _dict['reservationInfo'] = self.reservation_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rotating_barcode
        if self.rotating_barcode:
            _dict['rotatingBarcode'] = self.rotating_barcode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_program_logo
        if self.security_program_logo:
            _dict['securityProgramLogo'] = self.security_program_logo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in text_modules_data (list)
        _items = []
        if self.text_modules_data:
            for _item_text_modules_data in self.text_modules_data:
                if _item_text_modules_data:
                    _items.append(_item_text_modules_data.to_dict())
            _dict['textModulesData'] = _items
        # override the default output from pydantic by calling `to_dict()` of valid_time_interval
        if self.valid_time_interval:
            _dict['validTimeInterval'] = self.valid_time_interval.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FlightObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appLinkData": AppLinkData.from_dict(obj["appLinkData"]) if obj.get("appLinkData") is not None else None,
            "barcode": Barcode.from_dict(obj["barcode"]) if obj.get("barcode") is not None else None,
            "boardingAndSeatingInfo": BoardingAndSeatingInfo.from_dict(obj["boardingAndSeatingInfo"]) if obj.get("boardingAndSeatingInfo") is not None else None,
            "classId": obj.get("classId"),
            "classReference": FlightClass.from_dict(obj["classReference"]) if obj.get("classReference") is not None else None,
            "disableExpirationNotification": obj.get("disableExpirationNotification"),
            "groupingInfo": GroupingInfo.from_dict(obj["groupingInfo"]) if obj.get("groupingInfo") is not None else None,
            "hasLinkedDevice": obj.get("hasLinkedDevice"),
            "hasUsers": obj.get("hasUsers"),
            "heroImage": Image.from_dict(obj["heroImage"]) if obj.get("heroImage") is not None else None,
            "hexBackgroundColor": obj.get("hexBackgroundColor"),
            "id": obj.get("id"),
            "imageModulesData": [ImageModuleData.from_dict(_item) for _item in obj["imageModulesData"]] if obj.get("imageModulesData") is not None else None,
            "infoModuleData": InfoModuleData.from_dict(obj["infoModuleData"]) if obj.get("infoModuleData") is not None else None,
            "kind": obj.get("kind"),
            "linksModuleData": LinksModuleData.from_dict(obj["linksModuleData"]) if obj.get("linksModuleData") is not None else None,
            "locations": [LatLongPoint.from_dict(_item) for _item in obj["locations"]] if obj.get("locations") is not None else None,
            "messages": [Message.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "passConstraints": PassConstraints.from_dict(obj["passConstraints"]) if obj.get("passConstraints") is not None else None,
            "passengerName": obj.get("passengerName"),
            "reservationInfo": ReservationInfo.from_dict(obj["reservationInfo"]) if obj.get("reservationInfo") is not None else None,
            "rotatingBarcode": RotatingBarcode.from_dict(obj["rotatingBarcode"]) if obj.get("rotatingBarcode") is not None else None,
            "securityProgramLogo": Image.from_dict(obj["securityProgramLogo"]) if obj.get("securityProgramLogo") is not None else None,
            "smartTapRedemptionValue": obj.get("smartTapRedemptionValue"),
            "state": obj.get("state"),
            "textModulesData": [TextModuleData.from_dict(_item) for _item in obj["textModulesData"]] if obj.get("textModulesData") is not None else None,
            "validTimeInterval": TimeInterval.from_dict(obj["validTimeInterval"]) if obj.get("validTimeInterval") is not None else None,
            "version": obj.get("version")
        })
        return _obj



# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.event_ticket_class import EventTicketClass
from openapi_client.models.event_ticket_object import EventTicketObject
from openapi_client.models.flight_class import FlightClass
from openapi_client.models.flight_object import FlightObject
from openapi_client.models.gift_card_class import GiftCardClass
from openapi_client.models.gift_card_object import GiftCardObject
from openapi_client.models.loyalty_class import LoyaltyClass
from openapi_client.models.loyalty_object import LoyaltyObject
from openapi_client.models.offer_class import OfferClass
from openapi_client.models.offer_object import OfferObject
from openapi_client.models.transit_class import TransitClass
from openapi_client.models.transit_object import TransitObject
from typing import Optional, Set
from typing_extensions import Self

class Resources(BaseModel):
    """
    Resources
    """ # noqa: E501
    event_ticket_classes: Optional[List[EventTicketClass]] = Field(default=None, alias="eventTicketClasses")
    event_ticket_objects: Optional[List[EventTicketObject]] = Field(default=None, alias="eventTicketObjects")
    flight_classes: Optional[List[FlightClass]] = Field(default=None, alias="flightClasses")
    flight_objects: Optional[List[FlightObject]] = Field(default=None, alias="flightObjects")
    gift_card_classes: Optional[List[GiftCardClass]] = Field(default=None, alias="giftCardClasses")
    gift_card_objects: Optional[List[GiftCardObject]] = Field(default=None, alias="giftCardObjects")
    loyalty_classes: Optional[List[LoyaltyClass]] = Field(default=None, alias="loyaltyClasses")
    loyalty_objects: Optional[List[LoyaltyObject]] = Field(default=None, alias="loyaltyObjects")
    offer_classes: Optional[List[OfferClass]] = Field(default=None, alias="offerClasses")
    offer_objects: Optional[List[OfferObject]] = Field(default=None, alias="offerObjects")
    transit_classes: Optional[List[TransitClass]] = Field(default=None, alias="transitClasses")
    transit_objects: Optional[List[TransitObject]] = Field(default=None, alias="transitObjects")
    __properties: ClassVar[List[str]] = ["eventTicketClasses", "eventTicketObjects", "flightClasses", "flightObjects", "giftCardClasses", "giftCardObjects", "loyaltyClasses", "loyaltyObjects", "offerClasses", "offerObjects", "transitClasses", "transitObjects"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Resources from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in event_ticket_classes (list)
        _items = []
        if self.event_ticket_classes:
            for _item_event_ticket_classes in self.event_ticket_classes:
                if _item_event_ticket_classes:
                    _items.append(_item_event_ticket_classes.to_dict())
            _dict['eventTicketClasses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in event_ticket_objects (list)
        _items = []
        if self.event_ticket_objects:
            for _item_event_ticket_objects in self.event_ticket_objects:
                if _item_event_ticket_objects:
                    _items.append(_item_event_ticket_objects.to_dict())
            _dict['eventTicketObjects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in flight_classes (list)
        _items = []
        if self.flight_classes:
            for _item_flight_classes in self.flight_classes:
                if _item_flight_classes:
                    _items.append(_item_flight_classes.to_dict())
            _dict['flightClasses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in flight_objects (list)
        _items = []
        if self.flight_objects:
            for _item_flight_objects in self.flight_objects:
                if _item_flight_objects:
                    _items.append(_item_flight_objects.to_dict())
            _dict['flightObjects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in gift_card_classes (list)
        _items = []
        if self.gift_card_classes:
            for _item_gift_card_classes in self.gift_card_classes:
                if _item_gift_card_classes:
                    _items.append(_item_gift_card_classes.to_dict())
            _dict['giftCardClasses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in gift_card_objects (list)
        _items = []
        if self.gift_card_objects:
            for _item_gift_card_objects in self.gift_card_objects:
                if _item_gift_card_objects:
                    _items.append(_item_gift_card_objects.to_dict())
            _dict['giftCardObjects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in loyalty_classes (list)
        _items = []
        if self.loyalty_classes:
            for _item_loyalty_classes in self.loyalty_classes:
                if _item_loyalty_classes:
                    _items.append(_item_loyalty_classes.to_dict())
            _dict['loyaltyClasses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in loyalty_objects (list)
        _items = []
        if self.loyalty_objects:
            for _item_loyalty_objects in self.loyalty_objects:
                if _item_loyalty_objects:
                    _items.append(_item_loyalty_objects.to_dict())
            _dict['loyaltyObjects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in offer_classes (list)
        _items = []
        if self.offer_classes:
            for _item_offer_classes in self.offer_classes:
                if _item_offer_classes:
                    _items.append(_item_offer_classes.to_dict())
            _dict['offerClasses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in offer_objects (list)
        _items = []
        if self.offer_objects:
            for _item_offer_objects in self.offer_objects:
                if _item_offer_objects:
                    _items.append(_item_offer_objects.to_dict())
            _dict['offerObjects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transit_classes (list)
        _items = []
        if self.transit_classes:
            for _item_transit_classes in self.transit_classes:
                if _item_transit_classes:
                    _items.append(_item_transit_classes.to_dict())
            _dict['transitClasses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transit_objects (list)
        _items = []
        if self.transit_objects:
            for _item_transit_objects in self.transit_objects:
                if _item_transit_objects:
                    _items.append(_item_transit_objects.to_dict())
            _dict['transitObjects'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Resources from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventTicketClasses": [EventTicketClass.from_dict(_item) for _item in obj["eventTicketClasses"]] if obj.get("eventTicketClasses") is not None else None,
            "eventTicketObjects": [EventTicketObject.from_dict(_item) for _item in obj["eventTicketObjects"]] if obj.get("eventTicketObjects") is not None else None,
            "flightClasses": [FlightClass.from_dict(_item) for _item in obj["flightClasses"]] if obj.get("flightClasses") is not None else None,
            "flightObjects": [FlightObject.from_dict(_item) for _item in obj["flightObjects"]] if obj.get("flightObjects") is not None else None,
            "giftCardClasses": [GiftCardClass.from_dict(_item) for _item in obj["giftCardClasses"]] if obj.get("giftCardClasses") is not None else None,
            "giftCardObjects": [GiftCardObject.from_dict(_item) for _item in obj["giftCardObjects"]] if obj.get("giftCardObjects") is not None else None,
            "loyaltyClasses": [LoyaltyClass.from_dict(_item) for _item in obj["loyaltyClasses"]] if obj.get("loyaltyClasses") is not None else None,
            "loyaltyObjects": [LoyaltyObject.from_dict(_item) for _item in obj["loyaltyObjects"]] if obj.get("loyaltyObjects") is not None else None,
            "offerClasses": [OfferClass.from_dict(_item) for _item in obj["offerClasses"]] if obj.get("offerClasses") is not None else None,
            "offerObjects": [OfferObject.from_dict(_item) for _item in obj["offerObjects"]] if obj.get("offerObjects") is not None else None,
            "transitClasses": [TransitClass.from_dict(_item) for _item in obj["transitClasses"]] if obj.get("transitClasses") is not None else None,
            "transitObjects": [TransitObject.from_dict(_item) for _item in obj["transitObjects"]] if obj.get("transitObjects") is not None else None
        })
        return _obj



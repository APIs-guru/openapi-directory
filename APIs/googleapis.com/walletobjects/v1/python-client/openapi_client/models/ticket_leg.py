# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.localized_string import LocalizedString
from openapi_client.models.ticket_seat import TicketSeat
from typing import Optional, Set
from typing_extensions import Self

class TicketLeg(BaseModel):
    """
    TicketLeg
    """ # noqa: E501
    arrival_date_time: Optional[StrictStr] = Field(default=None, description="The date/time of arrival. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the \"local date/time\". This should be the local date/time at the destination station. For example, if the event occurs at the 20th hour of June 5th, 2018 at the destination station, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the destination station is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.", alias="arrivalDateTime")
    carriage: Optional[StrictStr] = Field(default=None, description="The train or ship name/number that the passsenger needs to board.")
    departure_date_time: Optional[StrictStr] = Field(default=None, description="The date/time of departure. This is required if there is no validity time interval set on the transit object. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the \"local date/time\". This should be the local date/time at the origin station. For example, if the departure occurs at the 20th hour of June 5th, 2018 at the origin station, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the origin station is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.", alias="departureDateTime")
    destination_name: Optional[LocalizedString] = Field(default=None, alias="destinationName")
    destination_station_code: Optional[StrictStr] = Field(default=None, description="The destination station code.", alias="destinationStationCode")
    fare_name: Optional[LocalizedString] = Field(default=None, alias="fareName")
    origin_name: Optional[LocalizedString] = Field(default=None, alias="originName")
    origin_station_code: Optional[StrictStr] = Field(default=None, description="The origin station code. This is required if `destinationStationCode` is present or if `originName` is not present.", alias="originStationCode")
    platform: Optional[StrictStr] = Field(default=None, description="The platform or gate where the passenger can board the carriage.")
    ticket_seat: Optional[TicketSeat] = Field(default=None, alias="ticketSeat")
    ticket_seats: Optional[List[TicketSeat]] = Field(default=None, description="The reserved seat for the passenger(s). If only one seat is to be specified then use the `ticketSeat` field instead. Both `ticketSeat` and `ticketSeats` may not be set.", alias="ticketSeats")
    transit_operator_name: Optional[LocalizedString] = Field(default=None, alias="transitOperatorName")
    transit_terminus_name: Optional[LocalizedString] = Field(default=None, alias="transitTerminusName")
    zone: Optional[StrictStr] = Field(default=None, description="The zone of boarding within the platform.")
    __properties: ClassVar[List[str]] = ["arrivalDateTime", "carriage", "departureDateTime", "destinationName", "destinationStationCode", "fareName", "originName", "originStationCode", "platform", "ticketSeat", "ticketSeats", "transitOperatorName", "transitTerminusName", "zone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TicketLeg from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destination_name
        if self.destination_name:
            _dict['destinationName'] = self.destination_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fare_name
        if self.fare_name:
            _dict['fareName'] = self.fare_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of origin_name
        if self.origin_name:
            _dict['originName'] = self.origin_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ticket_seat
        if self.ticket_seat:
            _dict['ticketSeat'] = self.ticket_seat.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ticket_seats (list)
        _items = []
        if self.ticket_seats:
            for _item_ticket_seats in self.ticket_seats:
                if _item_ticket_seats:
                    _items.append(_item_ticket_seats.to_dict())
            _dict['ticketSeats'] = _items
        # override the default output from pydantic by calling `to_dict()` of transit_operator_name
        if self.transit_operator_name:
            _dict['transitOperatorName'] = self.transit_operator_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transit_terminus_name
        if self.transit_terminus_name:
            _dict['transitTerminusName'] = self.transit_terminus_name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TicketLeg from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arrivalDateTime": obj.get("arrivalDateTime"),
            "carriage": obj.get("carriage"),
            "departureDateTime": obj.get("departureDateTime"),
            "destinationName": LocalizedString.from_dict(obj["destinationName"]) if obj.get("destinationName") is not None else None,
            "destinationStationCode": obj.get("destinationStationCode"),
            "fareName": LocalizedString.from_dict(obj["fareName"]) if obj.get("fareName") is not None else None,
            "originName": LocalizedString.from_dict(obj["originName"]) if obj.get("originName") is not None else None,
            "originStationCode": obj.get("originStationCode"),
            "platform": obj.get("platform"),
            "ticketSeat": TicketSeat.from_dict(obj["ticketSeat"]) if obj.get("ticketSeat") is not None else None,
            "ticketSeats": [TicketSeat.from_dict(_item) for _item in obj["ticketSeats"]] if obj.get("ticketSeats") is not None else None,
            "transitOperatorName": LocalizedString.from_dict(obj["transitOperatorName"]) if obj.get("transitOperatorName") is not None else None,
            "transitTerminusName": LocalizedString.from_dict(obj["transitTerminusName"]) if obj.get("transitTerminusName") is not None else None,
            "zone": obj.get("zone")
        })
        return _obj



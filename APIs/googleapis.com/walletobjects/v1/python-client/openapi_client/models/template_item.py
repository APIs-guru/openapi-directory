# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.field_selector import FieldSelector
from typing import Optional, Set
from typing_extensions import Self

class TemplateItem(BaseModel):
    """
    TemplateItem
    """ # noqa: E501
    first_value: Optional[FieldSelector] = Field(default=None, alias="firstValue")
    predefined_item: Optional[StrictStr] = Field(default=None, description="A predefined item to display. Only one of `firstValue` or `predefinedItem` may be set.", alias="predefinedItem")
    second_value: Optional[FieldSelector] = Field(default=None, alias="secondValue")
    __properties: ClassVar[List[str]] = ["firstValue", "predefinedItem", "secondValue"]

    @field_validator('predefined_item')
    def predefined_item_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PREDEFINED_ITEM_UNSPECIFIED', 'FREQUENT_FLYER_PROGRAM_NAME_AND_NUMBER', 'frequentFlyerProgramNameAndNumber', 'FLIGHT_NUMBER_AND_OPERATING_FLIGHT_NUMBER', 'flightNumberAndOperatingFlightNumber']):
            raise ValueError("must be one of enum values ('PREDEFINED_ITEM_UNSPECIFIED', 'FREQUENT_FLYER_PROGRAM_NAME_AND_NUMBER', 'frequentFlyerProgramNameAndNumber', 'FLIGHT_NUMBER_AND_OPERATING_FLIGHT_NUMBER', 'flightNumberAndOperatingFlightNumber')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TemplateItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of first_value
        if self.first_value:
            _dict['firstValue'] = self.first_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of second_value
        if self.second_value:
            _dict['secondValue'] = self.second_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TemplateItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "firstValue": FieldSelector.from_dict(obj["firstValue"]) if obj.get("firstValue") is not None else None,
            "predefinedItem": obj.get("predefinedItem"),
            "secondValue": FieldSelector.from_dict(obj["secondValue"]) if obj.get("secondValue") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.blobstore2_info import Blobstore2Info
from openapi_client.models.object_id import ObjectId
from typing import Optional, Set
from typing_extensions import Self

class CompositeMedia(BaseModel):
    """
    A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.
    """ # noqa: E501
    blob_ref: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should be the byte representation of a blobstore.BlobRef. Since Blobstore is deprecating v1, use blobstore2_info instead. For now, any v2 blob will also be represented in this field as v1 BlobRef.", alias="blobRef")
    blobstore2_info: Optional[Blobstore2Info] = Field(default=None, alias="blobstore2Info")
    cosmo_binary_reference: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="A binary data reference for a media download. Serves as a technology-agnostic binary reference in some Google infrastructure. This value is a serialized storage_cosmo.BinaryReference proto. Storing it as bytes is a hack to get around the fact that the cosmo proto (as well as others it includes) doesn't support JavaScript. This prevents us from including the actual type of this field.", alias="cosmoBinaryReference")
    crc32c_hash: Optional[StrictInt] = Field(default=None, description="crc32.c hash for the payload.", alias="crc32cHash")
    inline: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Media data, set if reference_type is INLINE")
    length: Optional[StrictStr] = Field(default=None, description="Size of the data, in bytes")
    md5_hash: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="MD5 hash for the payload.", alias="md5Hash")
    object_id: Optional[ObjectId] = Field(default=None, alias="objectId")
    path: Optional[StrictStr] = Field(default=None, description="Path to the data, set if reference_type is PATH")
    reference_type: Optional[StrictStr] = Field(default=None, description="Describes what the field reference contains.", alias="referenceType")
    sha1_hash: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="SHA-1 hash for the payload.", alias="sha1Hash")
    __properties: ClassVar[List[str]] = ["blobRef", "blobstore2Info", "cosmoBinaryReference", "crc32cHash", "inline", "length", "md5Hash", "objectId", "path", "referenceType", "sha1Hash"]

    @field_validator('reference_type')
    def reference_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PATH', 'BLOB_REF', 'INLINE', 'BIGSTORE_REF', 'COSMO_BINARY_REFERENCE']):
            raise ValueError("must be one of enum values ('PATH', 'BLOB_REF', 'INLINE', 'BIGSTORE_REF', 'COSMO_BINARY_REFERENCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompositeMedia from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of blobstore2_info
        if self.blobstore2_info:
            _dict['blobstore2Info'] = self.blobstore2_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object_id
        if self.object_id:
            _dict['objectId'] = self.object_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompositeMedia from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blobRef": obj.get("blobRef"),
            "blobstore2Info": Blobstore2Info.from_dict(obj["blobstore2Info"]) if obj.get("blobstore2Info") is not None else None,
            "cosmoBinaryReference": obj.get("cosmoBinaryReference"),
            "crc32cHash": obj.get("crc32cHash"),
            "inline": obj.get("inline"),
            "length": obj.get("length"),
            "md5Hash": obj.get("md5Hash"),
            "objectId": ObjectId.from_dict(obj["objectId"]) if obj.get("objectId") is not None else None,
            "path": obj.get("path"),
            "referenceType": obj.get("referenceType"),
            "sha1Hash": obj.get("sha1Hash")
        })
        return _obj



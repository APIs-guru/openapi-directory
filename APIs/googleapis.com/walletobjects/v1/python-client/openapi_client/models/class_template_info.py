# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.card_barcode_section_details import CardBarcodeSectionDetails
from openapi_client.models.card_template_override import CardTemplateOverride
from openapi_client.models.details_template_override import DetailsTemplateOverride
from openapi_client.models.list_template_override import ListTemplateOverride
from typing import Optional, Set
from typing_extensions import Self

class ClassTemplateInfo(BaseModel):
    """
    ClassTemplateInfo
    """ # noqa: E501
    card_barcode_section_details: Optional[CardBarcodeSectionDetails] = Field(default=None, alias="cardBarcodeSectionDetails")
    card_template_override: Optional[CardTemplateOverride] = Field(default=None, alias="cardTemplateOverride")
    details_template_override: Optional[DetailsTemplateOverride] = Field(default=None, alias="detailsTemplateOverride")
    list_template_override: Optional[ListTemplateOverride] = Field(default=None, alias="listTemplateOverride")
    __properties: ClassVar[List[str]] = ["cardBarcodeSectionDetails", "cardTemplateOverride", "detailsTemplateOverride", "listTemplateOverride"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClassTemplateInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of card_barcode_section_details
        if self.card_barcode_section_details:
            _dict['cardBarcodeSectionDetails'] = self.card_barcode_section_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card_template_override
        if self.card_template_override:
            _dict['cardTemplateOverride'] = self.card_template_override.to_dict()
        # override the default output from pydantic by calling `to_dict()` of details_template_override
        if self.details_template_override:
            _dict['detailsTemplateOverride'] = self.details_template_override.to_dict()
        # override the default output from pydantic by calling `to_dict()` of list_template_override
        if self.list_template_override:
            _dict['listTemplateOverride'] = self.list_template_override.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClassTemplateInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cardBarcodeSectionDetails": CardBarcodeSectionDetails.from_dict(obj["cardBarcodeSectionDetails"]) if obj.get("cardBarcodeSectionDetails") is not None else None,
            "cardTemplateOverride": CardTemplateOverride.from_dict(obj["cardTemplateOverride"]) if obj.get("cardTemplateOverride") is not None else None,
            "detailsTemplateOverride": DetailsTemplateOverride.from_dict(obj["detailsTemplateOverride"]) if obj.get("detailsTemplateOverride") is not None else None,
            "listTemplateOverride": ListTemplateOverride.from_dict(obj["listTemplateOverride"]) if obj.get("listTemplateOverride") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.blobstore2_info import Blobstore2Info
from openapi_client.models.composite_media import CompositeMedia
from openapi_client.models.content_type_info import ContentTypeInfo
from openapi_client.models.diff_checksums_response import DiffChecksumsResponse
from openapi_client.models.diff_download_response import DiffDownloadResponse
from openapi_client.models.diff_upload_request import DiffUploadRequest
from openapi_client.models.diff_upload_response import DiffUploadResponse
from openapi_client.models.diff_version_response import DiffVersionResponse
from openapi_client.models.download_parameters import DownloadParameters
from openapi_client.models.object_id import ObjectId
from typing import Optional, Set
from typing_extensions import Self

class Media(BaseModel):
    """
    A reference to data stored on the filesystem, on GFS or in blobstore.
    """ # noqa: E501
    algorithm: Optional[StrictStr] = Field(default=None, description="Deprecated, use one of explicit hash type fields instead. Algorithm used for calculating the hash. As of 2011/01/21, \"MD5\" is the only possible value for this field. New values may be added at any time.")
    bigstore_object_ref: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Use object_id instead.", alias="bigstoreObjectRef")
    blob_ref: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should be the byte representation of a blobstore.BlobRef. Since Blobstore is deprecating v1, use blobstore2_info instead. For now, any v2 blob will also be represented in this field as v1 BlobRef.", alias="blobRef")
    blobstore2_info: Optional[Blobstore2Info] = Field(default=None, alias="blobstore2Info")
    composite_media: Optional[List[CompositeMedia]] = Field(default=None, description="A composite media composed of one or more media objects, set if reference_type is COMPOSITE_MEDIA. The media length field must be set to the sum of the lengths of all composite media objects. Note: All composite media must have length specified.", alias="compositeMedia")
    content_type: Optional[StrictStr] = Field(default=None, description="MIME type of the data", alias="contentType")
    content_type_info: Optional[ContentTypeInfo] = Field(default=None, alias="contentTypeInfo")
    cosmo_binary_reference: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="A binary data reference for a media download. Serves as a technology-agnostic binary reference in some Google infrastructure. This value is a serialized storage_cosmo.BinaryReference proto. Storing it as bytes is a hack to get around the fact that the cosmo proto (as well as others it includes) doesn't support JavaScript. This prevents us from including the actual type of this field.", alias="cosmoBinaryReference")
    crc32c_hash: Optional[StrictInt] = Field(default=None, description="For Scotty Uploads: Scotty-provided hashes for uploads For Scotty Downloads: (WARNING: DO NOT USE WITHOUT PERMISSION FROM THE SCOTTY TEAM.) A Hash provided by the agent to be used to verify the data being downloaded. Currently only supported for inline payloads. Further, only crc32c_hash is currently supported.", alias="crc32cHash")
    diff_checksums_response: Optional[DiffChecksumsResponse] = Field(default=None, alias="diffChecksumsResponse")
    diff_download_response: Optional[DiffDownloadResponse] = Field(default=None, alias="diffDownloadResponse")
    diff_upload_request: Optional[DiffUploadRequest] = Field(default=None, alias="diffUploadRequest")
    diff_upload_response: Optional[DiffUploadResponse] = Field(default=None, alias="diffUploadResponse")
    diff_version_response: Optional[DiffVersionResponse] = Field(default=None, alias="diffVersionResponse")
    download_parameters: Optional[DownloadParameters] = Field(default=None, alias="downloadParameters")
    filename: Optional[StrictStr] = Field(default=None, description="Original file name")
    hash: Optional[StrictStr] = Field(default=None, description="Deprecated, use one of explicit hash type fields instead. These two hash related fields will only be populated on Scotty based media uploads and will contain the content of the hash group in the NotificationRequest: http://cs/#google3/uploader/service/proto/upload_listener.proto&q=class:Hash Hex encoded hash value of the uploaded media.")
    hash_verified: Optional[StrictBool] = Field(default=None, description="For Scotty uploads only. If a user sends a hash code and the backend has requested that Scotty verify the upload against the client hash, Scotty will perform the check on behalf of the backend and will reject it if the hashes don't match. This is set to true if Scotty performed this verification.", alias="hashVerified")
    inline: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Media data, set if reference_type is INLINE")
    is_potential_retry: Optional[StrictBool] = Field(default=None, description="|is_potential_retry| is set false only when Scotty is certain that it has not sent the request before. When a client resumes an upload, this field must be set true in agent calls, because Scotty cannot be certain that it has never sent the request before due to potential failure in the session state persistence.", alias="isPotentialRetry")
    length: Optional[StrictStr] = Field(default=None, description="Size of the data, in bytes")
    md5_hash: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Scotty-provided MD5 hash for an upload.", alias="md5Hash")
    media_id: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Media id to forward to the operation GetMedia. Can be set if reference_type is GET_MEDIA.", alias="mediaId")
    object_id: Optional[ObjectId] = Field(default=None, alias="objectId")
    path: Optional[StrictStr] = Field(default=None, description="Path to the data, set if reference_type is PATH")
    reference_type: Optional[StrictStr] = Field(default=None, description="Describes what the field reference contains.", alias="referenceType")
    sha1_hash: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Scotty-provided SHA1 hash for an upload.", alias="sha1Hash")
    sha256_hash: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Scotty-provided SHA256 hash for an upload.", alias="sha256Hash")
    timestamp: Optional[StrictStr] = Field(default=None, description="Time at which the media data was last updated, in milliseconds since UNIX epoch")
    token: Optional[StrictStr] = Field(default=None, description="A unique fingerprint/version id for the media data")
    __properties: ClassVar[List[str]] = ["algorithm", "bigstoreObjectRef", "blobRef", "blobstore2Info", "compositeMedia", "contentType", "contentTypeInfo", "cosmoBinaryReference", "crc32cHash", "diffChecksumsResponse", "diffDownloadResponse", "diffUploadRequest", "diffUploadResponse", "diffVersionResponse", "downloadParameters", "filename", "hash", "hashVerified", "inline", "isPotentialRetry", "length", "md5Hash", "mediaId", "objectId", "path", "referenceType", "sha1Hash", "sha256Hash", "timestamp", "token"]

    @field_validator('reference_type')
    def reference_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PATH', 'BLOB_REF', 'INLINE', 'GET_MEDIA', 'COMPOSITE_MEDIA', 'BIGSTORE_REF', 'DIFF_VERSION_RESPONSE', 'DIFF_CHECKSUMS_RESPONSE', 'DIFF_DOWNLOAD_RESPONSE', 'DIFF_UPLOAD_REQUEST', 'DIFF_UPLOAD_RESPONSE', 'COSMO_BINARY_REFERENCE', 'ARBITRARY_BYTES']):
            raise ValueError("must be one of enum values ('PATH', 'BLOB_REF', 'INLINE', 'GET_MEDIA', 'COMPOSITE_MEDIA', 'BIGSTORE_REF', 'DIFF_VERSION_RESPONSE', 'DIFF_CHECKSUMS_RESPONSE', 'DIFF_DOWNLOAD_RESPONSE', 'DIFF_UPLOAD_REQUEST', 'DIFF_UPLOAD_RESPONSE', 'COSMO_BINARY_REFERENCE', 'ARBITRARY_BYTES')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Media from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of blobstore2_info
        if self.blobstore2_info:
            _dict['blobstore2Info'] = self.blobstore2_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in composite_media (list)
        _items = []
        if self.composite_media:
            for _item_composite_media in self.composite_media:
                if _item_composite_media:
                    _items.append(_item_composite_media.to_dict())
            _dict['compositeMedia'] = _items
        # override the default output from pydantic by calling `to_dict()` of content_type_info
        if self.content_type_info:
            _dict['contentTypeInfo'] = self.content_type_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diff_checksums_response
        if self.diff_checksums_response:
            _dict['diffChecksumsResponse'] = self.diff_checksums_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diff_download_response
        if self.diff_download_response:
            _dict['diffDownloadResponse'] = self.diff_download_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diff_upload_request
        if self.diff_upload_request:
            _dict['diffUploadRequest'] = self.diff_upload_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diff_upload_response
        if self.diff_upload_response:
            _dict['diffUploadResponse'] = self.diff_upload_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diff_version_response
        if self.diff_version_response:
            _dict['diffVersionResponse'] = self.diff_version_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of download_parameters
        if self.download_parameters:
            _dict['downloadParameters'] = self.download_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object_id
        if self.object_id:
            _dict['objectId'] = self.object_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Media from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algorithm": obj.get("algorithm"),
            "bigstoreObjectRef": obj.get("bigstoreObjectRef"),
            "blobRef": obj.get("blobRef"),
            "blobstore2Info": Blobstore2Info.from_dict(obj["blobstore2Info"]) if obj.get("blobstore2Info") is not None else None,
            "compositeMedia": [CompositeMedia.from_dict(_item) for _item in obj["compositeMedia"]] if obj.get("compositeMedia") is not None else None,
            "contentType": obj.get("contentType"),
            "contentTypeInfo": ContentTypeInfo.from_dict(obj["contentTypeInfo"]) if obj.get("contentTypeInfo") is not None else None,
            "cosmoBinaryReference": obj.get("cosmoBinaryReference"),
            "crc32cHash": obj.get("crc32cHash"),
            "diffChecksumsResponse": DiffChecksumsResponse.from_dict(obj["diffChecksumsResponse"]) if obj.get("diffChecksumsResponse") is not None else None,
            "diffDownloadResponse": DiffDownloadResponse.from_dict(obj["diffDownloadResponse"]) if obj.get("diffDownloadResponse") is not None else None,
            "diffUploadRequest": DiffUploadRequest.from_dict(obj["diffUploadRequest"]) if obj.get("diffUploadRequest") is not None else None,
            "diffUploadResponse": DiffUploadResponse.from_dict(obj["diffUploadResponse"]) if obj.get("diffUploadResponse") is not None else None,
            "diffVersionResponse": DiffVersionResponse.from_dict(obj["diffVersionResponse"]) if obj.get("diffVersionResponse") is not None else None,
            "downloadParameters": DownloadParameters.from_dict(obj["downloadParameters"]) if obj.get("downloadParameters") is not None else None,
            "filename": obj.get("filename"),
            "hash": obj.get("hash"),
            "hashVerified": obj.get("hashVerified"),
            "inline": obj.get("inline"),
            "isPotentialRetry": obj.get("isPotentialRetry"),
            "length": obj.get("length"),
            "md5Hash": obj.get("md5Hash"),
            "mediaId": obj.get("mediaId"),
            "objectId": ObjectId.from_dict(obj["objectId"]) if obj.get("objectId") is not None else None,
            "path": obj.get("path"),
            "referenceType": obj.get("referenceType"),
            "sha1Hash": obj.get("sha1Hash"),
            "sha256Hash": obj.get("sha256Hash"),
            "timestamp": obj.get("timestamp"),
            "token": obj.get("token")
        })
        return _obj



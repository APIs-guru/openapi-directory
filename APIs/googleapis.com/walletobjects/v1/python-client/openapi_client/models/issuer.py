# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.callback_options import CallbackOptions
from openapi_client.models.issuer_contact_info import IssuerContactInfo
from openapi_client.models.smart_tap_merchant_data import SmartTapMerchantData
from typing import Optional, Set
from typing_extensions import Self

class Issuer(BaseModel):
    """
    Issuer
    """ # noqa: E501
    callback_options: Optional[CallbackOptions] = Field(default=None, alias="callbackOptions")
    contact_info: Optional[IssuerContactInfo] = Field(default=None, alias="contactInfo")
    homepage_url: Optional[StrictStr] = Field(default=None, description="URL for the issuer's home page.", alias="homepageUrl")
    issuer_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for an issuer account. This is automatically generated when the issuer is inserted.", alias="issuerId")
    name: Optional[StrictStr] = Field(default=None, description="The account name of the issuer.")
    smart_tap_merchant_data: Optional[SmartTapMerchantData] = Field(default=None, alias="smartTapMerchantData")
    __properties: ClassVar[List[str]] = ["callbackOptions", "contactInfo", "homepageUrl", "issuerId", "name", "smartTapMerchantData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Issuer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of callback_options
        if self.callback_options:
            _dict['callbackOptions'] = self.callback_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact_info
        if self.contact_info:
            _dict['contactInfo'] = self.contact_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of smart_tap_merchant_data
        if self.smart_tap_merchant_data:
            _dict['smartTapMerchantData'] = self.smart_tap_merchant_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Issuer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callbackOptions": CallbackOptions.from_dict(obj["callbackOptions"]) if obj.get("callbackOptions") is not None else None,
            "contactInfo": IssuerContactInfo.from_dict(obj["contactInfo"]) if obj.get("contactInfo") is not None else None,
            "homepageUrl": obj.get("homepageUrl"),
            "issuerId": obj.get("issuerId"),
            "name": obj.get("name"),
            "smartTapMerchantData": SmartTapMerchantData.from_dict(obj["smartTapMerchantData"]) if obj.get("smartTapMerchantData") is not None else None
        })
        return _obj



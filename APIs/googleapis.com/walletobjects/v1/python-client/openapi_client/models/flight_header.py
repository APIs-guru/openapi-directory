# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.flight_carrier import FlightCarrier
from typing import Optional, Set
from typing_extensions import Self

class FlightHeader(BaseModel):
    """
    FlightHeader
    """ # noqa: E501
    carrier: Optional[FlightCarrier] = None
    flight_number: Optional[StrictStr] = Field(default=None, description="The flight number without IATA carrier code. This field should contain only digits. This is a required property of `flightHeader`. eg: \"123\"", alias="flightNumber")
    flight_number_display_override: Optional[StrictStr] = Field(default=None, description="Override value to use for flight number. The default value used for display purposes is carrier + flight_number. If a different value needs to be shown to passengers, use this field to override the default behavior. eg: \"XX1234 / YY576\"", alias="flightNumberDisplayOverride")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#flightHeader\"`.")
    operating_carrier: Optional[FlightCarrier] = Field(default=None, alias="operatingCarrier")
    operating_flight_number: Optional[StrictStr] = Field(default=None, description="The flight number used by the operating carrier without IATA carrier code. This field should contain only digits. eg: \"234\"", alias="operatingFlightNumber")
    __properties: ClassVar[List[str]] = ["carrier", "flightNumber", "flightNumberDisplayOverride", "kind", "operatingCarrier", "operatingFlightNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FlightHeader from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of carrier
        if self.carrier:
            _dict['carrier'] = self.carrier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operating_carrier
        if self.operating_carrier:
            _dict['operatingCarrier'] = self.operating_carrier.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FlightHeader from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "carrier": FlightCarrier.from_dict(obj["carrier"]) if obj.get("carrier") is not None else None,
            "flightNumber": obj.get("flightNumber"),
            "flightNumberDisplayOverride": obj.get("flightNumberDisplayOverride"),
            "kind": obj.get("kind"),
            "operatingCarrier": FlightCarrier.from_dict(obj["operatingCarrier"]) if obj.get("operatingCarrier") is not None else None,
            "operatingFlightNumber": obj.get("operatingFlightNumber")
        })
        return _obj



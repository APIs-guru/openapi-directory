# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.localized_string import LocalizedString
from openapi_client.models.time_interval import TimeInterval
from typing import Optional, Set
from typing_extensions import Self

class Message(BaseModel):
    """
    A message that will be displayed with a Valuable
    """ # noqa: E501
    body: Optional[StrictStr] = Field(default=None, description="The message body.")
    display_interval: Optional[TimeInterval] = Field(default=None, alias="displayInterval")
    header: Optional[StrictStr] = Field(default=None, description="The message header.")
    id: Optional[StrictStr] = Field(default=None, description="The ID associated with a message. This field is here to enable ease of management of messages. Notice ID values could possibly duplicate across multiple messages in the same class/instance, and care must be taken to select a reasonable ID for each message.")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#walletObjectMessage\"`.")
    localized_body: Optional[LocalizedString] = Field(default=None, alias="localizedBody")
    localized_header: Optional[LocalizedString] = Field(default=None, alias="localizedHeader")
    message_type: Optional[StrictStr] = Field(default=None, description="The message type.", alias="messageType")
    __properties: ClassVar[List[str]] = ["body", "displayInterval", "header", "id", "kind", "localizedBody", "localizedHeader", "messageType"]

    @field_validator('message_type')
    def message_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MESSAGE_TYPE_UNSPECIFIED', 'TEXT', 'text', 'EXPIRATION_NOTIFICATION', 'expirationNotification']):
            raise ValueError("must be one of enum values ('MESSAGE_TYPE_UNSPECIFIED', 'TEXT', 'text', 'EXPIRATION_NOTIFICATION', 'expirationNotification')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Message from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of display_interval
        if self.display_interval:
            _dict['displayInterval'] = self.display_interval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of localized_body
        if self.localized_body:
            _dict['localizedBody'] = self.localized_body.to_dict()
        # override the default output from pydantic by calling `to_dict()` of localized_header
        if self.localized_header:
            _dict['localizedHeader'] = self.localized_header.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Message from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "body": obj.get("body"),
            "displayInterval": TimeInterval.from_dict(obj["displayInterval"]) if obj.get("displayInterval") is not None else None,
            "header": obj.get("header"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "localizedBody": LocalizedString.from_dict(obj["localizedBody"]) if obj.get("localizedBody") is not None else None,
            "localizedHeader": LocalizedString.from_dict(obj["localizedHeader"]) if obj.get("localizedHeader") is not None else None,
            "messageType": obj.get("messageType")
        })
        return _obj



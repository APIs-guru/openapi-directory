# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.localized_string import LocalizedString
from openapi_client.models.rotating_barcode_totp_details import RotatingBarcodeTotpDetails
from openapi_client.models.rotating_barcode_values import RotatingBarcodeValues
from typing import Optional, Set
from typing_extensions import Self

class RotatingBarcode(BaseModel):
    """
    RotatingBarcode
    """ # noqa: E501
    alternate_text: Optional[StrictStr] = Field(default=None, description="An optional text that will override the default text that shows under the barcode. This field is intended for a human readable equivalent of the barcode value, used when the barcode cannot be scanned.", alias="alternateText")
    initial_rotating_barcode_values: Optional[RotatingBarcodeValues] = Field(default=None, alias="initialRotatingBarcodeValues")
    render_encoding: Optional[StrictStr] = Field(default=None, description="The render encoding for the barcode. When specified, barcode is rendered in the given encoding. Otherwise best known encoding is chosen by Google.", alias="renderEncoding")
    show_code_text: Optional[LocalizedString] = Field(default=None, alias="showCodeText")
    totp_details: Optional[RotatingBarcodeTotpDetails] = Field(default=None, alias="totpDetails")
    type: Optional[StrictStr] = Field(default=None, description="The type of this barcode.")
    value_pattern: Optional[StrictStr] = Field(default=None, description="String encoded barcode value. This string supports the following substitutions: * {totp_value_n}: Replaced with the TOTP value (see TotpDetails.parameters). * {totp_timestamp_millis}: Replaced with the timestamp (millis since epoch) at which the barcode was generated. * {totp_timestamp_seconds}: Replaced with the timestamp (seconds since epoch) at which the barcode was generated.", alias="valuePattern")
    __properties: ClassVar[List[str]] = ["alternateText", "initialRotatingBarcodeValues", "renderEncoding", "showCodeText", "totpDetails", "type", "valuePattern"]

    @field_validator('render_encoding')
    def render_encoding_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RENDER_ENCODING_UNSPECIFIED', 'UTF_8']):
            raise ValueError("must be one of enum values ('RENDER_ENCODING_UNSPECIFIED', 'UTF_8')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BARCODE_TYPE_UNSPECIFIED', 'AZTEC', 'aztec', 'CODE_39', 'code39', 'CODE_128', 'code128', 'CODABAR', 'codabar', 'DATA_MATRIX', 'dataMatrix', 'EAN_8', 'ean8', 'EAN_13', 'ean13', 'EAN13', 'ITF_14', 'itf14', 'PDF_417', 'pdf417', 'PDF417', 'QR_CODE', 'qrCode', 'qrcode', 'UPC_A', 'upcA', 'TEXT_ONLY', 'textOnly']):
            raise ValueError("must be one of enum values ('BARCODE_TYPE_UNSPECIFIED', 'AZTEC', 'aztec', 'CODE_39', 'code39', 'CODE_128', 'code128', 'CODABAR', 'codabar', 'DATA_MATRIX', 'dataMatrix', 'EAN_8', 'ean8', 'EAN_13', 'ean13', 'EAN13', 'ITF_14', 'itf14', 'PDF_417', 'pdf417', 'PDF417', 'QR_CODE', 'qrCode', 'qrcode', 'UPC_A', 'upcA', 'TEXT_ONLY', 'textOnly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RotatingBarcode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of initial_rotating_barcode_values
        if self.initial_rotating_barcode_values:
            _dict['initialRotatingBarcodeValues'] = self.initial_rotating_barcode_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of show_code_text
        if self.show_code_text:
            _dict['showCodeText'] = self.show_code_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of totp_details
        if self.totp_details:
            _dict['totpDetails'] = self.totp_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RotatingBarcode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alternateText": obj.get("alternateText"),
            "initialRotatingBarcodeValues": RotatingBarcodeValues.from_dict(obj["initialRotatingBarcodeValues"]) if obj.get("initialRotatingBarcodeValues") is not None else None,
            "renderEncoding": obj.get("renderEncoding"),
            "showCodeText": LocalizedString.from_dict(obj["showCodeText"]) if obj.get("showCodeText") is not None else None,
            "totpDetails": RotatingBarcodeTotpDetails.from_dict(obj["totpDetails"]) if obj.get("totpDetails") is not None else None,
            "type": obj.get("type"),
            "valuePattern": obj.get("valuePattern")
        })
        return _obj



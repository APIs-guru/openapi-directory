# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.card_row_one_item import CardRowOneItem
from openapi_client.models.card_row_three_items import CardRowThreeItems
from openapi_client.models.card_row_two_items import CardRowTwoItems
from typing import Optional, Set
from typing_extensions import Self

class CardRowTemplateInfo(BaseModel):
    """
    CardRowTemplateInfo
    """ # noqa: E501
    one_item: Optional[CardRowOneItem] = Field(default=None, alias="oneItem")
    three_items: Optional[CardRowThreeItems] = Field(default=None, alias="threeItems")
    two_items: Optional[CardRowTwoItems] = Field(default=None, alias="twoItems")
    __properties: ClassVar[List[str]] = ["oneItem", "threeItems", "twoItems"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CardRowTemplateInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of one_item
        if self.one_item:
            _dict['oneItem'] = self.one_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of three_items
        if self.three_items:
            _dict['threeItems'] = self.three_items.to_dict()
        # override the default output from pydantic by calling `to_dict()` of two_items
        if self.two_items:
            _dict['twoItems'] = self.two_items.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CardRowTemplateInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "oneItem": CardRowOneItem.from_dict(obj["oneItem"]) if obj.get("oneItem") is not None else None,
            "threeItems": CardRowThreeItems.from_dict(obj["threeItems"]) if obj.get("threeItems") is not None else None,
            "twoItems": CardRowTwoItems.from_dict(obj["twoItems"]) if obj.get("twoItems") is not None else None
        })
        return _obj



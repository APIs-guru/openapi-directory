# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.uri import Uri
from typing import Optional, Set
from typing_extensions import Self

class DiscoverableProgramMerchantSignupInfo(BaseModel):
    """
    Information about the merchant hosted signup flow for a program.
    """ # noqa: E501
    signup_shared_datas: Optional[List[StrictStr]] = Field(default=None, description=" User data that is sent in a POST request to the signup website URL. This information is encoded and then shared so that the merchant's website can prefill fields used to enroll the user for the discoverable program.", alias="signupSharedDatas")
    signup_website: Optional[Uri] = Field(default=None, alias="signupWebsite")
    __properties: ClassVar[List[str]] = ["signupSharedDatas", "signupWebsite"]

    @field_validator('signup_shared_datas')
    def signup_shared_datas_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['SHARED_DATA_TYPE_UNSPECIFIED', 'FIRST_NAME', 'LAST_NAME', 'STREET_ADDRESS', 'ADDRESS_LINE_1', 'ADDRESS_LINE_2', 'ADDRESS_LINE_3', 'CITY', 'STATE', 'ZIPCODE', 'COUNTRY', 'EMAIL', 'PHONE']):
                raise ValueError("each list item must be one of ('SHARED_DATA_TYPE_UNSPECIFIED', 'FIRST_NAME', 'LAST_NAME', 'STREET_ADDRESS', 'ADDRESS_LINE_1', 'ADDRESS_LINE_2', 'ADDRESS_LINE_3', 'CITY', 'STATE', 'ZIPCODE', 'COUNTRY', 'EMAIL', 'PHONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DiscoverableProgramMerchantSignupInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of signup_website
        if self.signup_website:
            _dict['signupWebsite'] = self.signup_website.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DiscoverableProgramMerchantSignupInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "signupSharedDatas": obj.get("signupSharedDatas"),
            "signupWebsite": Uri.from_dict(obj["signupWebsite"]) if obj.get("signupWebsite") is not None else None
        })
        return _obj



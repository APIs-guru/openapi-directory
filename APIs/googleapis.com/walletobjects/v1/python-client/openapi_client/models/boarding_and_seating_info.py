# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image import Image
from openapi_client.models.localized_string import LocalizedString
from typing import Optional, Set
from typing_extensions import Self

class BoardingAndSeatingInfo(BaseModel):
    """
    BoardingAndSeatingInfo
    """ # noqa: E501
    boarding_door: Optional[StrictStr] = Field(default=None, description="Set this field only if this flight boards through more than one door or bridge and you want to explicitly print the door location on the boarding pass. Most airlines route their passengers to the right door or bridge by refering to doors/bridges by the `seatClass`. In those cases `boardingDoor` should not be set.", alias="boardingDoor")
    boarding_group: Optional[StrictStr] = Field(default=None, description="The value of boarding group (or zone) this passenger shall board with. eg: \"B\" The label for this value will be determined by the `boardingPolicy` field in the `flightClass` referenced by this object.", alias="boardingGroup")
    boarding_position: Optional[StrictStr] = Field(default=None, description="The value of boarding position. eg: \"76\"", alias="boardingPosition")
    boarding_privilege_image: Optional[Image] = Field(default=None, alias="boardingPrivilegeImage")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#boardingAndSeatingInfo\"`.")
    seat_assignment: Optional[LocalizedString] = Field(default=None, alias="seatAssignment")
    seat_class: Optional[StrictStr] = Field(default=None, description="The value of the seat class. eg: \"Economy\" or \"Economy Plus\"", alias="seatClass")
    seat_number: Optional[StrictStr] = Field(default=None, description="The value of passenger seat. If there is no specific identifier, use `seatAssignment` instead. eg: \"25A\"", alias="seatNumber")
    sequence_number: Optional[StrictStr] = Field(default=None, description="The sequence number on the boarding pass. This usually matches the sequence in which the passengers checked in. Airline might use the number for manual boarding and bag tags. eg: \"49\"", alias="sequenceNumber")
    __properties: ClassVar[List[str]] = ["boardingDoor", "boardingGroup", "boardingPosition", "boardingPrivilegeImage", "kind", "seatAssignment", "seatClass", "seatNumber", "sequenceNumber"]

    @field_validator('boarding_door')
    def boarding_door_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BOARDING_DOOR_UNSPECIFIED', 'FRONT', 'front', 'BACK', 'back']):
            raise ValueError("must be one of enum values ('BOARDING_DOOR_UNSPECIFIED', 'FRONT', 'front', 'BACK', 'back')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BoardingAndSeatingInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of boarding_privilege_image
        if self.boarding_privilege_image:
            _dict['boardingPrivilegeImage'] = self.boarding_privilege_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seat_assignment
        if self.seat_assignment:
            _dict['seatAssignment'] = self.seat_assignment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BoardingAndSeatingInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boardingDoor": obj.get("boardingDoor"),
            "boardingGroup": obj.get("boardingGroup"),
            "boardingPosition": obj.get("boardingPosition"),
            "boardingPrivilegeImage": Image.from_dict(obj["boardingPrivilegeImage"]) if obj.get("boardingPrivilegeImage") is not None else None,
            "kind": obj.get("kind"),
            "seatAssignment": LocalizedString.from_dict(obj["seatAssignment"]) if obj.get("seatAssignment") is not None else None,
            "seatClass": obj.get("seatClass"),
            "seatNumber": obj.get("seatNumber"),
            "sequenceNumber": obj.get("sequenceNumber")
        })
        return _obj



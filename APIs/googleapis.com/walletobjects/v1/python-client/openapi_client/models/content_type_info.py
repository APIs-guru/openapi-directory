# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ContentTypeInfo(BaseModel):
    """
    Detailed Content-Type information from Scotty. The Content-Type of the media will typically be filled in by the header or Scotty's best_guess, but this extended information provides the backend with more information so that it can make a better decision if needed. This is only used on media upload requests from Scotty.
    """ # noqa: E501
    best_guess: Optional[StrictStr] = Field(default=None, description="Scotty's best guess of what the content type of the file is.", alias="bestGuess")
    from_bytes: Optional[StrictStr] = Field(default=None, description="The content type of the file derived by looking at specific bytes (i.e. \"magic bytes\") of the actual file.", alias="fromBytes")
    from_file_name: Optional[StrictStr] = Field(default=None, description="The content type of the file derived from the file extension of the original file name used by the client.", alias="fromFileName")
    from_header: Optional[StrictStr] = Field(default=None, description="The content type of the file as specified in the request headers, multipart headers, or RUPIO start request.", alias="fromHeader")
    from_url_path: Optional[StrictStr] = Field(default=None, description="The content type of the file derived from the file extension of the URL path. The URL path is assumed to represent a file name (which is typically only true for agents that are providing a REST API).", alias="fromUrlPath")
    __properties: ClassVar[List[str]] = ["bestGuess", "fromBytes", "fromFileName", "fromHeader", "fromUrlPath"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContentTypeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContentTypeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bestGuess": obj.get("bestGuess"),
            "fromBytes": obj.get("fromBytes"),
            "fromFileName": obj.get("fromFileName"),
            "fromHeader": obj.get("fromHeader"),
            "fromUrlPath": obj.get("fromUrlPath")
        })
        return _obj



# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BoardingAndSeatingPolicy(BaseModel):
    """
    BoardingAndSeatingPolicy
    """ # noqa: E501
    boarding_policy: Optional[StrictStr] = Field(default=None, description="Indicates the policy the airline uses for boarding. If unset, Google will default to `zoneBased`.", alias="boardingPolicy")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#boardingAndSeatingPolicy\"`.")
    seat_class_policy: Optional[StrictStr] = Field(default=None, description="Seating policy which dictates how we display the seat class. If unset, Google will default to `cabinBased`.", alias="seatClassPolicy")
    __properties: ClassVar[List[str]] = ["boardingPolicy", "kind", "seatClassPolicy"]

    @field_validator('boarding_policy')
    def boarding_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BOARDING_POLICY_UNSPECIFIED', 'ZONE_BASED', 'zoneBased', 'GROUP_BASED', 'groupBased', 'BOARDING_POLICY_OTHER', 'boardingPolicyOther']):
            raise ValueError("must be one of enum values ('BOARDING_POLICY_UNSPECIFIED', 'ZONE_BASED', 'zoneBased', 'GROUP_BASED', 'groupBased', 'BOARDING_POLICY_OTHER', 'boardingPolicyOther')")
        return value

    @field_validator('seat_class_policy')
    def seat_class_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEAT_CLASS_POLICY_UNSPECIFIED', 'CABIN_BASED', 'cabinBased', 'CLASS_BASED', 'classBased', 'TIER_BASED', 'tierBased', 'SEAT_CLASS_POLICY_OTHER', 'seatClassPolicyOther']):
            raise ValueError("must be one of enum values ('SEAT_CLASS_POLICY_UNSPECIFIED', 'CABIN_BASED', 'cabinBased', 'CLASS_BASED', 'classBased', 'TIER_BASED', 'tierBased', 'SEAT_CLASS_POLICY_OTHER', 'seatClassPolicyOther')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BoardingAndSeatingPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BoardingAndSeatingPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boardingPolicy": obj.get("boardingPolicy"),
            "kind": obj.get("kind"),
            "seatClassPolicy": obj.get("seatClassPolicy")
        })
        return _obj



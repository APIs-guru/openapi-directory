# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ticket_cost import TicketCost
from typing import Optional, Set
from typing_extensions import Self

class PurchaseDetails(BaseModel):
    """
    PurchaseDetails
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="ID of the account used to purchase the ticket.", alias="accountId")
    confirmation_code: Optional[StrictStr] = Field(default=None, description="The confirmation code for the purchase. This may be the same for multiple different tickets and is used to group tickets together.", alias="confirmationCode")
    purchase_date_time: Optional[StrictStr] = Field(default=None, description="The purchase date/time of the ticket. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. Without offset information, some rich features may not be available.", alias="purchaseDateTime")
    purchase_receipt_number: Optional[StrictStr] = Field(default=None, description="Receipt number/identifier for tracking the ticket purchase via the body that sold the ticket.", alias="purchaseReceiptNumber")
    ticket_cost: Optional[TicketCost] = Field(default=None, alias="ticketCost")
    __properties: ClassVar[List[str]] = ["accountId", "confirmationCode", "purchaseDateTime", "purchaseReceiptNumber", "ticketCost"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PurchaseDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ticket_cost
        if self.ticket_cost:
            _dict['ticketCost'] = self.ticket_cost.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PurchaseDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "confirmationCode": obj.get("confirmationCode"),
            "purchaseDateTime": obj.get("purchaseDateTime"),
            "purchaseReceiptNumber": obj.get("purchaseReceiptNumber"),
            "ticketCost": TicketCost.from_dict(obj["ticketCost"]) if obj.get("ticketCost") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.callback_options import CallbackOptions
from openapi_client.models.class_template_info import ClassTemplateInfo
from openapi_client.models.discoverable_program import DiscoverableProgram
from openapi_client.models.image import Image
from openapi_client.models.image_module_data import ImageModuleData
from openapi_client.models.info_module_data import InfoModuleData
from openapi_client.models.lat_long_point import LatLongPoint
from openapi_client.models.links_module_data import LinksModuleData
from openapi_client.models.localized_string import LocalizedString
from openapi_client.models.message import Message
from openapi_client.models.review import Review
from openapi_client.models.security_animation import SecurityAnimation
from openapi_client.models.text_module_data import TextModuleData
from openapi_client.models.uri import Uri
from typing import Optional, Set
from typing_extensions import Self

class LoyaltyClass(BaseModel):
    """
    LoyaltyClass
    """ # noqa: E501
    account_id_label: Optional[StrictStr] = Field(default=None, description="The account ID label, such as \"Member ID.\" Recommended maximum length is 15 characters to ensure full string is displayed on smaller screens.", alias="accountIdLabel")
    account_name_label: Optional[StrictStr] = Field(default=None, description="The account name label, such as \"Member Name.\" Recommended maximum length is 15 characters to ensure full string is displayed on smaller screens.", alias="accountNameLabel")
    allow_multiple_users_per_object: Optional[StrictBool] = Field(default=None, description="Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.", alias="allowMultipleUsersPerObject")
    callback_options: Optional[CallbackOptions] = Field(default=None, alias="callbackOptions")
    class_template_info: Optional[ClassTemplateInfo] = Field(default=None, alias="classTemplateInfo")
    country_code: Optional[StrictStr] = Field(default=None, description="Country code used to display the card's country (when the user is not in that country), as well as to display localized content when content is not available in the user's locale.", alias="countryCode")
    discoverable_program: Optional[DiscoverableProgram] = Field(default=None, alias="discoverableProgram")
    enable_smart_tap: Optional[StrictBool] = Field(default=None, description="Identifies whether this class supports Smart Tap. The `redemptionIssuers` and one of object level `smartTapRedemptionLevel`, barcode.value`, or `accountId` fields must also be set up correctly in order for a pass to support Smart Tap.", alias="enableSmartTap")
    hero_image: Optional[Image] = Field(default=None, alias="heroImage")
    hex_background_color: Optional[StrictStr] = Field(default=None, description="The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.", alias="hexBackgroundColor")
    homepage_uri: Optional[Uri] = Field(default=None, alias="homepageUri")
    id: Optional[StrictStr] = Field(default=None, description="Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.")
    image_modules_data: Optional[List[ImageModuleData]] = Field(default=None, description="Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.", alias="imageModulesData")
    info_module_data: Optional[InfoModuleData] = Field(default=None, alias="infoModuleData")
    issuer_name: Optional[StrictStr] = Field(default=None, description="Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.", alias="issuerName")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#loyaltyClass\"`.")
    links_module_data: Optional[LinksModuleData] = Field(default=None, alias="linksModuleData")
    localized_account_id_label: Optional[LocalizedString] = Field(default=None, alias="localizedAccountIdLabel")
    localized_account_name_label: Optional[LocalizedString] = Field(default=None, alias="localizedAccountNameLabel")
    localized_issuer_name: Optional[LocalizedString] = Field(default=None, alias="localizedIssuerName")
    localized_program_name: Optional[LocalizedString] = Field(default=None, alias="localizedProgramName")
    localized_rewards_tier: Optional[LocalizedString] = Field(default=None, alias="localizedRewardsTier")
    localized_rewards_tier_label: Optional[LocalizedString] = Field(default=None, alias="localizedRewardsTierLabel")
    localized_secondary_rewards_tier: Optional[LocalizedString] = Field(default=None, alias="localizedSecondaryRewardsTier")
    localized_secondary_rewards_tier_label: Optional[LocalizedString] = Field(default=None, alias="localizedSecondaryRewardsTierLabel")
    locations: Optional[List[LatLongPoint]] = Field(default=None, description="Note: This field is currently not supported to trigger geo notifications.")
    messages: Optional[List[Message]] = Field(default=None, description="An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.")
    multiple_devices_and_holders_allowed_status: Optional[StrictStr] = Field(default=None, description="Identifies whether multiple users and devices will save the same object referencing this class.", alias="multipleDevicesAndHoldersAllowedStatus")
    program_logo: Optional[Image] = Field(default=None, alias="programLogo")
    program_name: Optional[StrictStr] = Field(default=None, description="Required. The program name, such as \"Adam's Apparel\". The app may display an ellipsis after the first 20 characters to ensure full string is displayed on smaller screens.", alias="programName")
    redemption_issuers: Optional[List[StrictStr]] = Field(default=None, description="Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and one of object level `smartTapRedemptionValue`, barcode.value`, or `accountId` fields must also be set up correctly in order for a pass to support Smart Tap.", alias="redemptionIssuers")
    review: Optional[Review] = None
    review_status: Optional[StrictStr] = Field(default=None, description="Required. The status of the class. This field can be set to `draft` or `underReview` using the insert, patch, or update API calls. Once the review state is changed from `draft` it may not be changed back to `draft`. You should keep this field to `draft` when the class is under development. A `draft` class cannot be used to create any object. You should set this field to `underReview` when you believe the class is ready for use. The platform will automatically set this field to `approved` and it can be immediately used to create or migrate objects. When updating an already `approved` class you should keep setting this field to `underReview`.", alias="reviewStatus")
    rewards_tier: Optional[StrictStr] = Field(default=None, description="The rewards tier, such as \"Gold\" or \"Platinum.\" Recommended maximum length is 7 characters to ensure full string is displayed on smaller screens.", alias="rewardsTier")
    rewards_tier_label: Optional[StrictStr] = Field(default=None, description="The rewards tier label, such as \"Rewards Tier.\" Recommended maximum length is 9 characters to ensure full string is displayed on smaller screens.", alias="rewardsTierLabel")
    secondary_rewards_tier: Optional[StrictStr] = Field(default=None, description="The secondary rewards tier, such as \"Gold\" or \"Platinum.\"", alias="secondaryRewardsTier")
    secondary_rewards_tier_label: Optional[StrictStr] = Field(default=None, description="The secondary rewards tier label, such as \"Rewards Tier.\"", alias="secondaryRewardsTierLabel")
    security_animation: Optional[SecurityAnimation] = Field(default=None, alias="securityAnimation")
    text_modules_data: Optional[List[TextModuleData]] = Field(default=None, description="Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.", alias="textModulesData")
    version: Optional[StrictStr] = Field(default=None, description="Deprecated")
    view_unlock_requirement: Optional[StrictStr] = Field(default=None, description="View Unlock Requirement options for the loyalty card.", alias="viewUnlockRequirement")
    wide_program_logo: Optional[Image] = Field(default=None, alias="wideProgramLogo")
    word_mark: Optional[Image] = Field(default=None, alias="wordMark")
    __properties: ClassVar[List[str]] = ["accountIdLabel", "accountNameLabel", "allowMultipleUsersPerObject", "callbackOptions", "classTemplateInfo", "countryCode", "discoverableProgram", "enableSmartTap", "heroImage", "hexBackgroundColor", "homepageUri", "id", "imageModulesData", "infoModuleData", "issuerName", "kind", "linksModuleData", "localizedAccountIdLabel", "localizedAccountNameLabel", "localizedIssuerName", "localizedProgramName", "localizedRewardsTier", "localizedRewardsTierLabel", "localizedSecondaryRewardsTier", "localizedSecondaryRewardsTierLabel", "locations", "messages", "multipleDevicesAndHoldersAllowedStatus", "programLogo", "programName", "redemptionIssuers", "review", "reviewStatus", "rewardsTier", "rewardsTierLabel", "secondaryRewardsTier", "secondaryRewardsTierLabel", "securityAnimation", "textModulesData", "version", "viewUnlockRequirement", "wideProgramLogo", "wordMark"]

    @field_validator('multiple_devices_and_holders_allowed_status')
    def multiple_devices_and_holders_allowed_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATUS_UNSPECIFIED', 'MULTIPLE_HOLDERS', 'ONE_USER_ALL_DEVICES', 'ONE_USER_ONE_DEVICE', 'multipleHolders', 'oneUserAllDevices', 'oneUserOneDevice']):
            raise ValueError("must be one of enum values ('STATUS_UNSPECIFIED', 'MULTIPLE_HOLDERS', 'ONE_USER_ALL_DEVICES', 'ONE_USER_ONE_DEVICE', 'multipleHolders', 'oneUserAllDevices', 'oneUserOneDevice')")
        return value

    @field_validator('review_status')
    def review_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REVIEW_STATUS_UNSPECIFIED', 'UNDER_REVIEW', 'underReview', 'APPROVED', 'approved', 'REJECTED', 'rejected', 'DRAFT', 'draft']):
            raise ValueError("must be one of enum values ('REVIEW_STATUS_UNSPECIFIED', 'UNDER_REVIEW', 'underReview', 'APPROVED', 'approved', 'REJECTED', 'rejected', 'DRAFT', 'draft')")
        return value

    @field_validator('view_unlock_requirement')
    def view_unlock_requirement_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED', 'UNLOCK_NOT_REQUIRED', 'UNLOCK_REQUIRED_TO_VIEW']):
            raise ValueError("must be one of enum values ('VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED', 'UNLOCK_NOT_REQUIRED', 'UNLOCK_REQUIRED_TO_VIEW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoyaltyClass from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of callback_options
        if self.callback_options:
            _dict['callbackOptions'] = self.callback_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of class_template_info
        if self.class_template_info:
            _dict['classTemplateInfo'] = self.class_template_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discoverable_program
        if self.discoverable_program:
            _dict['discoverableProgram'] = self.discoverable_program.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hero_image
        if self.hero_image:
            _dict['heroImage'] = self.hero_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of homepage_uri
        if self.homepage_uri:
            _dict['homepageUri'] = self.homepage_uri.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in image_modules_data (list)
        _items = []
        if self.image_modules_data:
            for _item_image_modules_data in self.image_modules_data:
                if _item_image_modules_data:
                    _items.append(_item_image_modules_data.to_dict())
            _dict['imageModulesData'] = _items
        # override the default output from pydantic by calling `to_dict()` of info_module_data
        if self.info_module_data:
            _dict['infoModuleData'] = self.info_module_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of links_module_data
        if self.links_module_data:
            _dict['linksModuleData'] = self.links_module_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of localized_account_id_label
        if self.localized_account_id_label:
            _dict['localizedAccountIdLabel'] = self.localized_account_id_label.to_dict()
        # override the default output from pydantic by calling `to_dict()` of localized_account_name_label
        if self.localized_account_name_label:
            _dict['localizedAccountNameLabel'] = self.localized_account_name_label.to_dict()
        # override the default output from pydantic by calling `to_dict()` of localized_issuer_name
        if self.localized_issuer_name:
            _dict['localizedIssuerName'] = self.localized_issuer_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of localized_program_name
        if self.localized_program_name:
            _dict['localizedProgramName'] = self.localized_program_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of localized_rewards_tier
        if self.localized_rewards_tier:
            _dict['localizedRewardsTier'] = self.localized_rewards_tier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of localized_rewards_tier_label
        if self.localized_rewards_tier_label:
            _dict['localizedRewardsTierLabel'] = self.localized_rewards_tier_label.to_dict()
        # override the default output from pydantic by calling `to_dict()` of localized_secondary_rewards_tier
        if self.localized_secondary_rewards_tier:
            _dict['localizedSecondaryRewardsTier'] = self.localized_secondary_rewards_tier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of localized_secondary_rewards_tier_label
        if self.localized_secondary_rewards_tier_label:
            _dict['localizedSecondaryRewardsTierLabel'] = self.localized_secondary_rewards_tier_label.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in locations (list)
        _items = []
        if self.locations:
            for _item_locations in self.locations:
                if _item_locations:
                    _items.append(_item_locations.to_dict())
            _dict['locations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of program_logo
        if self.program_logo:
            _dict['programLogo'] = self.program_logo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of review
        if self.review:
            _dict['review'] = self.review.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_animation
        if self.security_animation:
            _dict['securityAnimation'] = self.security_animation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in text_modules_data (list)
        _items = []
        if self.text_modules_data:
            for _item_text_modules_data in self.text_modules_data:
                if _item_text_modules_data:
                    _items.append(_item_text_modules_data.to_dict())
            _dict['textModulesData'] = _items
        # override the default output from pydantic by calling `to_dict()` of wide_program_logo
        if self.wide_program_logo:
            _dict['wideProgramLogo'] = self.wide_program_logo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of word_mark
        if self.word_mark:
            _dict['wordMark'] = self.word_mark.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoyaltyClass from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountIdLabel": obj.get("accountIdLabel"),
            "accountNameLabel": obj.get("accountNameLabel"),
            "allowMultipleUsersPerObject": obj.get("allowMultipleUsersPerObject"),
            "callbackOptions": CallbackOptions.from_dict(obj["callbackOptions"]) if obj.get("callbackOptions") is not None else None,
            "classTemplateInfo": ClassTemplateInfo.from_dict(obj["classTemplateInfo"]) if obj.get("classTemplateInfo") is not None else None,
            "countryCode": obj.get("countryCode"),
            "discoverableProgram": DiscoverableProgram.from_dict(obj["discoverableProgram"]) if obj.get("discoverableProgram") is not None else None,
            "enableSmartTap": obj.get("enableSmartTap"),
            "heroImage": Image.from_dict(obj["heroImage"]) if obj.get("heroImage") is not None else None,
            "hexBackgroundColor": obj.get("hexBackgroundColor"),
            "homepageUri": Uri.from_dict(obj["homepageUri"]) if obj.get("homepageUri") is not None else None,
            "id": obj.get("id"),
            "imageModulesData": [ImageModuleData.from_dict(_item) for _item in obj["imageModulesData"]] if obj.get("imageModulesData") is not None else None,
            "infoModuleData": InfoModuleData.from_dict(obj["infoModuleData"]) if obj.get("infoModuleData") is not None else None,
            "issuerName": obj.get("issuerName"),
            "kind": obj.get("kind"),
            "linksModuleData": LinksModuleData.from_dict(obj["linksModuleData"]) if obj.get("linksModuleData") is not None else None,
            "localizedAccountIdLabel": LocalizedString.from_dict(obj["localizedAccountIdLabel"]) if obj.get("localizedAccountIdLabel") is not None else None,
            "localizedAccountNameLabel": LocalizedString.from_dict(obj["localizedAccountNameLabel"]) if obj.get("localizedAccountNameLabel") is not None else None,
            "localizedIssuerName": LocalizedString.from_dict(obj["localizedIssuerName"]) if obj.get("localizedIssuerName") is not None else None,
            "localizedProgramName": LocalizedString.from_dict(obj["localizedProgramName"]) if obj.get("localizedProgramName") is not None else None,
            "localizedRewardsTier": LocalizedString.from_dict(obj["localizedRewardsTier"]) if obj.get("localizedRewardsTier") is not None else None,
            "localizedRewardsTierLabel": LocalizedString.from_dict(obj["localizedRewardsTierLabel"]) if obj.get("localizedRewardsTierLabel") is not None else None,
            "localizedSecondaryRewardsTier": LocalizedString.from_dict(obj["localizedSecondaryRewardsTier"]) if obj.get("localizedSecondaryRewardsTier") is not None else None,
            "localizedSecondaryRewardsTierLabel": LocalizedString.from_dict(obj["localizedSecondaryRewardsTierLabel"]) if obj.get("localizedSecondaryRewardsTierLabel") is not None else None,
            "locations": [LatLongPoint.from_dict(_item) for _item in obj["locations"]] if obj.get("locations") is not None else None,
            "messages": [Message.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "multipleDevicesAndHoldersAllowedStatus": obj.get("multipleDevicesAndHoldersAllowedStatus"),
            "programLogo": Image.from_dict(obj["programLogo"]) if obj.get("programLogo") is not None else None,
            "programName": obj.get("programName"),
            "redemptionIssuers": obj.get("redemptionIssuers"),
            "review": Review.from_dict(obj["review"]) if obj.get("review") is not None else None,
            "reviewStatus": obj.get("reviewStatus"),
            "rewardsTier": obj.get("rewardsTier"),
            "rewardsTierLabel": obj.get("rewardsTierLabel"),
            "secondaryRewardsTier": obj.get("secondaryRewardsTier"),
            "secondaryRewardsTierLabel": obj.get("secondaryRewardsTierLabel"),
            "securityAnimation": SecurityAnimation.from_dict(obj["securityAnimation"]) if obj.get("securityAnimation") is not None else None,
            "textModulesData": [TextModuleData.from_dict(_item) for _item in obj["textModulesData"]] if obj.get("textModulesData") is not None else None,
            "version": obj.get("version"),
            "viewUnlockRequirement": obj.get("viewUnlockRequirement"),
            "wideProgramLogo": Image.from_dict(obj["wideProgramLogo"]) if obj.get("wideProgramLogo") is not None else None,
            "wordMark": Image.from_dict(obj["wordMark"]) if obj.get("wordMark") is not None else None
        })
        return _obj



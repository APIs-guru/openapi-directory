# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class MediaRequestInfo(BaseModel):
    """
    Extra information added to operations that support Scotty media requests.
    """ # noqa: E501
    current_bytes: Optional[StrictStr] = Field(default=None, description="The number of current bytes uploaded or downloaded.", alias="currentBytes")
    custom_data: Optional[StrictStr] = Field(default=None, description="Data to be copied to backend requests. Custom data is returned to Scotty in the agent_state field, which Scotty will then provide in subsequent upload notifications.", alias="customData")
    diff_object_version: Optional[StrictStr] = Field(default=None, description="Set if the http request info is diff encoded. The value of this field is the version number of the base revision. This is corresponding to Apiary's mediaDiffObjectVersion (//depot/google3/java/com/google/api/server/media/variable/DiffObjectVersionVariable.java). See go/esf-scotty-diff-upload for more information.", alias="diffObjectVersion")
    final_status: Optional[StrictInt] = Field(default=None, description="The existence of the final_status field indicates that this is the last call to the agent for this request_id. http://google3/uploader/agent/scotty_agent.proto?l=737&rcl=347601929", alias="finalStatus")
    notification_type: Optional[StrictStr] = Field(default=None, description="The type of notification received from Scotty.", alias="notificationType")
    request_id: Optional[StrictStr] = Field(default=None, description="The Scotty request ID.", alias="requestId")
    request_received_params_serving_info: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The partition of the Scotty server handling this request. type is uploader_service.RequestReceivedParamsServingInfo LINT.IfChange(request_received_params_serving_info_annotations) LINT.ThenChange()", alias="requestReceivedParamsServingInfo")
    total_bytes: Optional[StrictStr] = Field(default=None, description="The total size of the file.", alias="totalBytes")
    total_bytes_is_estimated: Optional[StrictBool] = Field(default=None, description="Whether the total bytes field contains an estimated data.", alias="totalBytesIsEstimated")
    __properties: ClassVar[List[str]] = ["currentBytes", "customData", "diffObjectVersion", "finalStatus", "notificationType", "requestId", "requestReceivedParamsServingInfo", "totalBytes", "totalBytesIsEstimated"]

    @field_validator('notification_type')
    def notification_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['START', 'PROGRESS', 'END', 'RESPONSE_SENT', 'ERROR']):
            raise ValueError("must be one of enum values ('START', 'PROGRESS', 'END', 'RESPONSE_SENT', 'ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MediaRequestInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MediaRequestInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentBytes": obj.get("currentBytes"),
            "customData": obj.get("customData"),
            "diffObjectVersion": obj.get("diffObjectVersion"),
            "finalStatus": obj.get("finalStatus"),
            "notificationType": obj.get("notificationType"),
            "requestId": obj.get("requestId"),
            "requestReceivedParamsServingInfo": obj.get("requestReceivedParamsServingInfo"),
            "totalBytes": obj.get("totalBytes"),
            "totalBytesIsEstimated": obj.get("totalBytesIsEstimated")
        })
        return _obj



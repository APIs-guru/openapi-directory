# coding: utf-8

"""
    Google Wallet API

    API for issuers to save and manage Google Wallet Objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.generic_object_list_response import GenericObjectListResponse

class TestGenericObjectListResponse(unittest.TestCase):
    """GenericObjectListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GenericObjectListResponse:
        """Test GenericObjectListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GenericObjectListResponse`
        """
        model = GenericObjectListResponse()
        if include_optional:
            return GenericObjectListResponse(
                pagination = openapi_client.models.pagination.Pagination(
                    kind = '', 
                    next_page_token = '', 
                    results_per_page = 56, ),
                resources = [
                    openapi_client.models.generic_object.GenericObject(
                        app_link_data = openapi_client.models.app_link_data.AppLinkData(
                            android_app_link_info = openapi_client.models.app_link_data_app_link_info.AppLinkDataAppLinkInfo(
                                app_logo_image = openapi_client.models.image.Image(
                                    content_description = openapi_client.models.localized_string.LocalizedString(
                                        default_value = openapi_client.models.translated_string.TranslatedString(
                                            kind = '', 
                                            language = '', 
                                            value = '', ), 
                                        kind = '', 
                                        translated_values = [
                                            openapi_client.models.translated_string.TranslatedString(
                                                kind = '', 
                                                language = '', 
                                                value = '', )
                                            ], ), 
                                    kind = '', 
                                    source_uri = openapi_client.models.image_uri.ImageUri(
                                        description = '', 
                                        localized_description = openapi_client.models.localized_string.LocalizedString(
                                            kind = '', ), 
                                        uri = '', ), ), 
                                app_target = openapi_client.models.app_link_data_app_link_info_app_target.AppLinkDataAppLinkInfoAppTarget(
                                    package_name = '', 
                                    target_uri = openapi_client.models.uri.Uri(
                                        description = '', 
                                        id = '', 
                                        kind = '', 
                                        uri = '', ), ), 
                                description = , 
                                title = , ), 
                            ios_app_link_info = openapi_client.models.app_link_data_app_link_info.AppLinkDataAppLinkInfo(), 
                            web_app_link_info = , ), 
                        barcode = openapi_client.models.barcode.Barcode(
                            alternate_text = '', 
                            kind = '', 
                            render_encoding = 'RENDER_ENCODING_UNSPECIFIED', 
                            show_code_text = , 
                            type = 'BARCODE_TYPE_UNSPECIFIED', 
                            value = '', ), 
                        card_title = , 
                        class_id = '', 
                        generic_type = 'GENERIC_TYPE_UNSPECIFIED', 
                        grouping_info = openapi_client.models.grouping_info.GroupingInfo(
                            grouping_id = '', 
                            sort_index = 56, ), 
                        has_users = True, 
                        header = , 
                        hero_image = openapi_client.models.image.Image(
                            kind = '', ), 
                        hex_background_color = '', 
                        id = '', 
                        image_modules_data = [
                            openapi_client.models.image_module_data.ImageModuleData(
                                id = '', 
                                main_image = , )
                            ], 
                        links_module_data = openapi_client.models.links_module_data.LinksModuleData(
                            uris = [
                                openapi_client.models.uri.Uri(
                                    id = '', 
                                    kind = '', 
                                    uri = '', )
                                ], ), 
                        logo = , 
                        notifications = openapi_client.models.notifications.Notifications(
                            expiry_notification = openapi_client.models.expiry_notification.ExpiryNotification(
                                enable_notification = True, ), 
                            upcoming_notification = openapi_client.models.upcoming_notification.UpcomingNotification(
                                enable_notification = True, ), ), 
                        pass_constraints = openapi_client.models.pass_constraints.PassConstraints(
                            nfc_constraint = [
                                'NFC_CONSTRAINT_UNSPECIFIED'
                                ], 
                            screenshot_eligibility = 'SCREENSHOT_ELIGIBILITY_UNSPECIFIED', ), 
                        rotating_barcode = openapi_client.models.rotating_barcode.RotatingBarcode(
                            alternate_text = '', 
                            initial_rotating_barcode_values = openapi_client.models.rotating_barcode_values.RotatingBarcodeValues(
                                period_millis = '', 
                                start_date_time = '', 
                                values = [
                                    ''
                                    ], ), 
                            render_encoding = 'RENDER_ENCODING_UNSPECIFIED', 
                            totp_details = openapi_client.models.rotating_barcode_totp_details.RotatingBarcodeTotpDetails(
                                algorithm = 'TOTP_ALGORITHM_UNSPECIFIED', 
                                parameters = [
                                    openapi_client.models.rotating_barcode_totp_details_totp_parameters.RotatingBarcodeTotpDetailsTotpParameters(
                                        key = '', 
                                        value_length = 56, )
                                    ], 
                                period_millis = '', ), 
                            type = 'BARCODE_TYPE_UNSPECIFIED', 
                            value_pattern = '', ), 
                        smart_tap_redemption_value = '', 
                        state = 'STATE_UNSPECIFIED', 
                        subheader = , 
                        text_modules_data = [
                            openapi_client.models.text_module_data.TextModuleData(
                                body = '', 
                                id = '', 
                                localized_body = , 
                                localized_header = , )
                            ], 
                        valid_time_interval = openapi_client.models.time_interval.TimeInterval(
                            end = openapi_client.models.date_time.DateTime(
                                date = '', ), 
                            kind = '', 
                            start = openapi_client.models.date_time.DateTime(
                                date = '', ), ), 
                        wide_logo = , )
                    ]
            )
        else:
            return GenericObjectListResponse(
        )
        """

    def testGenericObjectListResponse(self):
        """Test GenericObjectListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

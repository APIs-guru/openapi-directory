# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_discoveryengine_v1beta_document_processing_config import GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig
from openapi_client.models.google_cloud_discoveryengine_v1beta_schema import GoogleCloudDiscoveryengineV1betaSchema
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDiscoveryengineV1betaDataStore(BaseModel):
    """
    DataStore captures global settings and configs at the DataStore level.
    """ # noqa: E501
    content_config: Optional[StrictStr] = Field(default=None, description="Immutable. The content config of the data store. If this field is unset, the server behavior defaults to ContentConfig.NO_CONTENT.", alias="contentConfig")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp the DataStore was created at.", alias="createTime")
    default_schema_id: Optional[StrictStr] = Field(default=None, description="Output only. The id of the default Schema asscociated to this data store.", alias="defaultSchemaId")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The data store display name. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.", alias="displayName")
    document_processing_config: Optional[GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig] = Field(default=None, alias="documentProcessingConfig")
    industry_vertical: Optional[StrictStr] = Field(default=None, description="Immutable. The industry vertical that the data store registers.", alias="industryVertical")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The full resource name of the data store. Format: `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.")
    solution_types: Optional[List[StrictStr]] = Field(default=None, description="The solutions that the data store enrolls. Available solutions for each industry_vertical: * `MEDIA`: `SOLUTION_TYPE_RECOMMENDATION` and `SOLUTION_TYPE_SEARCH`. * `SITE_SEARCH`: `SOLUTION_TYPE_SEARCH` is automatically enrolled. Other solutions cannot be enrolled.", alias="solutionTypes")
    starting_schema: Optional[GoogleCloudDiscoveryengineV1betaSchema] = Field(default=None, alias="startingSchema")
    __properties: ClassVar[List[str]] = ["contentConfig", "createTime", "defaultSchemaId", "displayName", "documentProcessingConfig", "industryVertical", "name", "solutionTypes", "startingSchema"]

    @field_validator('content_config')
    def content_config_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONTENT_CONFIG_UNSPECIFIED', 'NO_CONTENT', 'CONTENT_REQUIRED', 'PUBLIC_WEBSITE']):
            raise ValueError("must be one of enum values ('CONTENT_CONFIG_UNSPECIFIED', 'NO_CONTENT', 'CONTENT_REQUIRED', 'PUBLIC_WEBSITE')")
        return value

    @field_validator('industry_vertical')
    def industry_vertical_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INDUSTRY_VERTICAL_UNSPECIFIED', 'GENERIC', 'MEDIA']):
            raise ValueError("must be one of enum values ('INDUSTRY_VERTICAL_UNSPECIFIED', 'GENERIC', 'MEDIA')")
        return value

    @field_validator('solution_types')
    def solution_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['SOLUTION_TYPE_UNSPECIFIED', 'SOLUTION_TYPE_RECOMMENDATION', 'SOLUTION_TYPE_SEARCH', 'SOLUTION_TYPE_CHAT']):
                raise ValueError("each list item must be one of ('SOLUTION_TYPE_UNSPECIFIED', 'SOLUTION_TYPE_RECOMMENDATION', 'SOLUTION_TYPE_SEARCH', 'SOLUTION_TYPE_CHAT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1betaDataStore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "default_schema_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of document_processing_config
        if self.document_processing_config:
            _dict['documentProcessingConfig'] = self.document_processing_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of starting_schema
        if self.starting_schema:
            _dict['startingSchema'] = self.starting_schema.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1betaDataStore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentConfig": obj.get("contentConfig"),
            "createTime": obj.get("createTime"),
            "defaultSchemaId": obj.get("defaultSchemaId"),
            "displayName": obj.get("displayName"),
            "documentProcessingConfig": GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig.from_dict(obj["documentProcessingConfig"]) if obj.get("documentProcessingConfig") is not None else None,
            "industryVertical": obj.get("industryVertical"),
            "name": obj.get("name"),
            "solutionTypes": obj.get("solutionTypes"),
            "startingSchema": GoogleCloudDiscoveryengineV1betaSchema.from_dict(obj["startingSchema"]) if obj.get("startingSchema") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata(BaseModel):
    """
    Metadata related to the progress of the SiteSearchEngineService.RecrawlUris operation. This will be returned by the google.longrunning.Operation.metadata field.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Operation create time.", alias="createTime")
    invalid_uris: Optional[List[StrictStr]] = Field(default=None, description="Unique URIs in the request that don't match any TargetSite in the DataStore, only match TargetSites that haven't been fully indexed, or match a TargetSite with type EXCLUDE.", alias="invalidUris")
    pending_count: Optional[StrictInt] = Field(default=None, description="Total number of URIs that have yet to be crawled.", alias="pendingCount")
    quota_exceeded_count: Optional[StrictInt] = Field(default=None, description="Total number of URIs that were rejected due to insufficient indexing resources.", alias="quotaExceededCount")
    success_count: Optional[StrictInt] = Field(default=None, description="Total number of URIs that have been crawled so far.", alias="successCount")
    update_time: Optional[StrictStr] = Field(default=None, description="Operation last update time. If the operation is done, this is also the finish time.", alias="updateTime")
    valid_uris_count: Optional[StrictInt] = Field(default=None, description="Total number of unique URIs in the request that are not in invalid_uris.", alias="validUrisCount")
    __properties: ClassVar[List[str]] = ["createTime", "invalidUris", "pendingCount", "quotaExceededCount", "successCount", "updateTime", "validUrisCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "invalidUris": obj.get("invalidUris"),
            "pendingCount": obj.get("pendingCount"),
            "quotaExceededCount": obj.get("quotaExceededCount"),
            "successCount": obj.get("successCount"),
            "updateTime": obj.get("updateTime"),
            "validUrisCount": obj.get("validUrisCount")
        })
        return _obj



# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata(BaseModel):
    """
    Additional information of a recommendation engine.
    """ # noqa: E501
    data_state: Optional[StrictStr] = Field(default=None, description="Output only. The state of data requirements for this engine: `DATA_OK` and `DATA_ERROR`. Engine cannot be trained if the data is in `DATA_ERROR` state. Engine can have `DATA_ERROR` state even if serving state is `ACTIVE`: engines were trained successfully before, but cannot be refreshed because the underlying engine no longer has sufficient data for training.", alias="dataState")
    last_tune_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the latest successful tune finished. Only applicable on Media Recommendation engines.", alias="lastTuneTime")
    serving_state: Optional[StrictStr] = Field(default=None, description="Output only. The serving state of the engine: `ACTIVE`, `NOT_ACTIVE`.", alias="servingState")
    tuning_operation: Optional[StrictStr] = Field(default=None, description="Output only. The latest tune operation id associated with the engine. Only applicable on Media Recommendation engines. If present, this operation id can be used to determine if there is an ongoing tune for this engine. To check the operation status, send the GetOperation request with this operation id in the engine resource format. If no tuning has happened for this engine, the string is empty.", alias="tuningOperation")
    __properties: ClassVar[List[str]] = ["dataState", "lastTuneTime", "servingState", "tuningOperation"]

    @field_validator('data_state')
    def data_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_STATE_UNSPECIFIED', 'DATA_OK', 'DATA_ERROR']):
            raise ValueError("must be one of enum values ('DATA_STATE_UNSPECIFIED', 'DATA_OK', 'DATA_ERROR')")
        return value

    @field_validator('serving_state')
    def serving_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SERVING_STATE_UNSPECIFIED', 'INACTIVE', 'ACTIVE', 'TUNED']):
            raise ValueError("must be one of enum values ('SERVING_STATE_UNSPECIFIED', 'INACTIVE', 'ACTIVE', 'TUNED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "data_state",
            "last_tune_time",
            "serving_state",
            "tuning_operation",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataState": obj.get("dataState"),
            "lastTuneTime": obj.get("lastTuneTime"),
            "servingState": obj.get("servingState"),
            "tuningOperation": obj.get("tuningOperation")
        })
        return _obj



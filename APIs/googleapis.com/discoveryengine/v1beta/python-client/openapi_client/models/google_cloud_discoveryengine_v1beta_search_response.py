# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_discoveryengine_v1beta_search_response_facet import GoogleCloudDiscoveryengineV1betaSearchResponseFacet
from openapi_client.models.google_cloud_discoveryengine_v1beta_search_response_geo_search_debug_info import GoogleCloudDiscoveryengineV1betaSearchResponseGeoSearchDebugInfo
from openapi_client.models.google_cloud_discoveryengine_v1beta_search_response_guided_search_result import GoogleCloudDiscoveryengineV1betaSearchResponseGuidedSearchResult
from openapi_client.models.google_cloud_discoveryengine_v1beta_search_response_query_expansion_info import GoogleCloudDiscoveryengineV1betaSearchResponseQueryExpansionInfo
from openapi_client.models.google_cloud_discoveryengine_v1beta_search_response_search_result import GoogleCloudDiscoveryengineV1betaSearchResponseSearchResult
from openapi_client.models.google_cloud_discoveryengine_v1beta_search_response_summary import GoogleCloudDiscoveryengineV1betaSearchResponseSummary
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDiscoveryengineV1betaSearchResponse(BaseModel):
    """
    Response message for SearchService.Search method.
    """ # noqa: E501
    applied_controls: Optional[List[StrictStr]] = Field(default=None, description="Controls applied as part of the Control service.", alias="appliedControls")
    attribution_token: Optional[StrictStr] = Field(default=None, description="A unique search token. This should be included in the UserEvent logs resulting from this search, which enables accurate attribution of search model performance.", alias="attributionToken")
    corrected_query: Optional[StrictStr] = Field(default=None, description="Contains the spell corrected query, if found. If the spell correction type is AUTOMATIC, then the search results are based on corrected_query. Otherwise the original query is used for search.", alias="correctedQuery")
    facets: Optional[List[GoogleCloudDiscoveryengineV1betaSearchResponseFacet]] = Field(default=None, description="Results of facets requested by user.")
    geo_search_debug_info: Optional[List[GoogleCloudDiscoveryengineV1betaSearchResponseGeoSearchDebugInfo]] = Field(default=None, alias="geoSearchDebugInfo")
    guided_search_result: Optional[GoogleCloudDiscoveryengineV1betaSearchResponseGuidedSearchResult] = Field(default=None, alias="guidedSearchResult")
    next_page_token: Optional[StrictStr] = Field(default=None, description="A token that can be sent as SearchRequest.page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.", alias="nextPageToken")
    query_expansion_info: Optional[GoogleCloudDiscoveryengineV1betaSearchResponseQueryExpansionInfo] = Field(default=None, alias="queryExpansionInfo")
    redirect_uri: Optional[StrictStr] = Field(default=None, description="The URI of a customer-defined redirect page. If redirect action is triggered, no search is performed, and only redirect_uri and attribution_token are set in the response.", alias="redirectUri")
    results: Optional[List[GoogleCloudDiscoveryengineV1betaSearchResponseSearchResult]] = Field(default=None, description="A list of matched documents. The order represents the ranking.")
    summary: Optional[GoogleCloudDiscoveryengineV1betaSearchResponseSummary] = None
    total_size: Optional[StrictInt] = Field(default=None, description="The estimated total count of matched items irrespective of pagination. The count of results returned by pagination may be less than the total_size that matches.", alias="totalSize")
    __properties: ClassVar[List[str]] = ["appliedControls", "attributionToken", "correctedQuery", "facets", "geoSearchDebugInfo", "guidedSearchResult", "nextPageToken", "queryExpansionInfo", "redirectUri", "results", "summary", "totalSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1betaSearchResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in facets (list)
        _items = []
        if self.facets:
            for _item_facets in self.facets:
                if _item_facets:
                    _items.append(_item_facets.to_dict())
            _dict['facets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in geo_search_debug_info (list)
        _items = []
        if self.geo_search_debug_info:
            for _item_geo_search_debug_info in self.geo_search_debug_info:
                if _item_geo_search_debug_info:
                    _items.append(_item_geo_search_debug_info.to_dict())
            _dict['geoSearchDebugInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of guided_search_result
        if self.guided_search_result:
            _dict['guidedSearchResult'] = self.guided_search_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query_expansion_info
        if self.query_expansion_info:
            _dict['queryExpansionInfo'] = self.query_expansion_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item_results in self.results:
                if _item_results:
                    _items.append(_item_results.to_dict())
            _dict['results'] = _items
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1betaSearchResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appliedControls": obj.get("appliedControls"),
            "attributionToken": obj.get("attributionToken"),
            "correctedQuery": obj.get("correctedQuery"),
            "facets": [GoogleCloudDiscoveryengineV1betaSearchResponseFacet.from_dict(_item) for _item in obj["facets"]] if obj.get("facets") is not None else None,
            "geoSearchDebugInfo": [GoogleCloudDiscoveryengineV1betaSearchResponseGeoSearchDebugInfo.from_dict(_item) for _item in obj["geoSearchDebugInfo"]] if obj.get("geoSearchDebugInfo") is not None else None,
            "guidedSearchResult": GoogleCloudDiscoveryengineV1betaSearchResponseGuidedSearchResult.from_dict(obj["guidedSearchResult"]) if obj.get("guidedSearchResult") is not None else None,
            "nextPageToken": obj.get("nextPageToken"),
            "queryExpansionInfo": GoogleCloudDiscoveryengineV1betaSearchResponseQueryExpansionInfo.from_dict(obj["queryExpansionInfo"]) if obj.get("queryExpansionInfo") is not None else None,
            "redirectUri": obj.get("redirectUri"),
            "results": [GoogleCloudDiscoveryengineV1betaSearchResponseSearchResult.from_dict(_item) for _item in obj["results"]] if obj.get("results") is not None else None,
            "summary": GoogleCloudDiscoveryengineV1betaSearchResponseSummary.from_dict(obj["summary"]) if obj.get("summary") is not None else None,
            "totalSize": obj.get("totalSize")
        })
        return _obj



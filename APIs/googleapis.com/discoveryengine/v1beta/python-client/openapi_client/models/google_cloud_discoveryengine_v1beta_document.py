# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_discoveryengine_v1beta_document_content import GoogleCloudDiscoveryengineV1betaDocumentContent
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDiscoveryengineV1betaDocument(BaseModel):
    """
    Document captures all raw metadata information of items to be recommended or searched.
    """ # noqa: E501
    content: Optional[GoogleCloudDiscoveryengineV1betaDocumentContent] = None
    derived_struct_data: Optional[Dict[str, Any]] = Field(default=None, description="Output only. This field is OUTPUT_ONLY. It contains derived data that are not in the original input document.", alias="derivedStructData")
    id: Optional[StrictStr] = Field(default=None, description="Immutable. The identifier of the document. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.")
    index_time: Optional[StrictStr] = Field(default=None, description="Output only. The last time the document was indexed. If this field is set, the document could be returned in search results. This field is OUTPUT_ONLY. If this field is not populated, it means the document has never been indexed.", alias="indexTime")
    json_data: Optional[StrictStr] = Field(default=None, description="The JSON string representation of the document. It should conform to the registered Schema or an `INVALID_ARGUMENT` error is thrown.", alias="jsonData")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The full resource name of the document. Format: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.")
    parent_document_id: Optional[StrictStr] = Field(default=None, description="The identifier of the parent document. Currently supports at most two level document hierarchy. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.", alias="parentDocumentId")
    schema_id: Optional[StrictStr] = Field(default=None, description="The identifier of the schema located in the same data store.", alias="schemaId")
    struct_data: Optional[Dict[str, Any]] = Field(default=None, description="The structured JSON data for the document. It should conform to the registered Schema or an `INVALID_ARGUMENT` error is thrown.", alias="structData")
    __properties: ClassVar[List[str]] = ["content", "derivedStructData", "id", "indexTime", "jsonData", "name", "parentDocumentId", "schemaId", "structData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1betaDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "derived_struct_data",
            "index_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1betaDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": GoogleCloudDiscoveryengineV1betaDocumentContent.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "derivedStructData": obj.get("derivedStructData"),
            "id": obj.get("id"),
            "indexTime": obj.get("indexTime"),
            "jsonData": obj.get("jsonData"),
            "name": obj.get("name"),
            "parentDocumentId": obj.get("parentDocumentId"),
            "schemaId": obj.get("schemaId"),
            "structData": obj.get("structData")
        })
        return _obj



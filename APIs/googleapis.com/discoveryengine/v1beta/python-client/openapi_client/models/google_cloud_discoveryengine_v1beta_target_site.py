# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_discoveryengine_v1beta_site_verification_info import GoogleCloudDiscoveryengineV1betaSiteVerificationInfo
from openapi_client.models.google_cloud_discoveryengine_v1beta_target_site_failure_reason import GoogleCloudDiscoveryengineV1betaTargetSiteFailureReason
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDiscoveryengineV1betaTargetSite(BaseModel):
    """
    A target site for the SiteSearchEngine.
    """ # noqa: E501
    exact_match: Optional[StrictBool] = Field(default=None, description="Input only. If set to false, a uri_pattern is generated to include all pages whose address contains the provided_uri_pattern. If set to true, an uri_pattern is generated to try to be an exact match of the provided_uri_pattern or just the specific page if the provided_uri_pattern is a specific one. provided_uri_pattern is always normalized to generate the URI pattern to be used by the search engine.", alias="exactMatch")
    failure_reason: Optional[GoogleCloudDiscoveryengineV1betaTargetSiteFailureReason] = Field(default=None, alias="failureReason")
    generated_uri_pattern: Optional[StrictStr] = Field(default=None, description="Output only. This is system-generated based on the provided_uri_pattern.", alias="generatedUriPattern")
    indexing_status: Optional[StrictStr] = Field(default=None, description="Output only. Indexing status.", alias="indexingStatus")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The fully qualified resource name of the target site. `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}` The `target_site_id` is system-generated.")
    provided_uri_pattern: Optional[StrictStr] = Field(default=None, description="Required. Input only. The user provided URI pattern from which the `generated_uri_pattern` is generated.", alias="providedUriPattern")
    site_verification_info: Optional[GoogleCloudDiscoveryengineV1betaSiteVerificationInfo] = Field(default=None, alias="siteVerificationInfo")
    type: Optional[StrictStr] = Field(default=None, description="The type of the target site, e.g., whether the site is to be included or excluded.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The target site's last updated time.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["exactMatch", "failureReason", "generatedUriPattern", "indexingStatus", "name", "providedUriPattern", "siteVerificationInfo", "type", "updateTime"]

    @field_validator('indexing_status')
    def indexing_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INDEXING_STATUS_UNSPECIFIED', 'PENDING', 'FAILED', 'SUCCEEDED', 'DELETING']):
            raise ValueError("must be one of enum values ('INDEXING_STATUS_UNSPECIFIED', 'PENDING', 'FAILED', 'SUCCEEDED', 'DELETING')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'INCLUDE', 'EXCLUDE']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'INCLUDE', 'EXCLUDE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1betaTargetSite from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "generated_uri_pattern",
            "indexing_status",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of failure_reason
        if self.failure_reason:
            _dict['failureReason'] = self.failure_reason.to_dict()
        # override the default output from pydantic by calling `to_dict()` of site_verification_info
        if self.site_verification_info:
            _dict['siteVerificationInfo'] = self.site_verification_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1betaTargetSite from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exactMatch": obj.get("exactMatch"),
            "failureReason": GoogleCloudDiscoveryengineV1betaTargetSiteFailureReason.from_dict(obj["failureReason"]) if obj.get("failureReason") is not None else None,
            "generatedUriPattern": obj.get("generatedUriPattern"),
            "indexingStatus": obj.get("indexingStatus"),
            "name": obj.get("name"),
            "providedUriPattern": obj.get("providedUriPattern"),
            "siteVerificationInfo": GoogleCloudDiscoveryengineV1betaSiteVerificationInfo.from_dict(obj["siteVerificationInfo"]) if obj.get("siteVerificationInfo") is not None else None,
            "type": obj.get("type"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



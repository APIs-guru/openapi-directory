# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_discoveryengine_v1alpha_engine_media_recommendation_engine_config_optimization_objective_config import GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigOptimizationObjectiveConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfig(BaseModel):
    """
    Additional config specs for a Media Recommendation engine.
    """ # noqa: E501
    optimization_objective: Optional[StrictStr] = Field(default=None, description="The optimization objective. e.g., `cvr`. This field together with optimization_objective describe engine metadata to use to control engine training and serving. Currently supported values: `ctr`, `cvr`. If not specified, we choose default based on engine type. Default depends on type of recommendation: `recommended-for-you` => `ctr` `others-you-may-like` => `ctr`", alias="optimizationObjective")
    optimization_objective_config: Optional[GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigOptimizationObjectiveConfig] = Field(default=None, alias="optimizationObjectiveConfig")
    training_state: Optional[StrictStr] = Field(default=None, description="The training state that the engine is in (e.g. `TRAINING` or `PAUSED`). Since part of the cost of running the service is frequency of training - this can be used to determine when to train engine in order to control cost. If not specified: the default value for `CreateEngine` method is `TRAINING`. The default value for `UpdateEngine` method is to keep the state the same as before.", alias="trainingState")
    type: Optional[StrictStr] = Field(default=None, description="Required. The type of engine. e.g., `recommended-for-you`. This field together with optimization_objective describe engine metadata to use to control engine training and serving. Currently supported values: `recommended-for-you`, `others-you-may-like`, `more-like-this`, `most-popular-items`.")
    __properties: ClassVar[List[str]] = ["optimizationObjective", "optimizationObjectiveConfig", "trainingState", "type"]

    @field_validator('training_state')
    def training_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRAINING_STATE_UNSPECIFIED', 'PAUSED', 'TRAINING']):
            raise ValueError("must be one of enum values ('TRAINING_STATE_UNSPECIFIED', 'PAUSED', 'TRAINING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of optimization_objective_config
        if self.optimization_objective_config:
            _dict['optimizationObjectiveConfig'] = self.optimization_objective_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "optimizationObjective": obj.get("optimizationObjective"),
            "optimizationObjectiveConfig": GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigOptimizationObjectiveConfig.from_dict(obj["optimizationObjectiveConfig"]) if obj.get("optimizationObjectiveConfig") is not None else None,
            "trainingState": obj.get("trainingState"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_type_date import GoogleTypeDate
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDiscoveryengineV1alphaBigQuerySource(BaseModel):
    """
    BigQuery source import data from.
    """ # noqa: E501
    data_schema: Optional[StrictStr] = Field(default=None, description="The schema to use when parsing the data from the source. Supported values for user event imports: * `user_event` (default): One UserEvent per row. Supported values for document imports: * `document` (default): One Document format per row. Each document must have a valid Document.id and one of Document.json_data or Document.struct_data. * `custom`: One custom data per row in arbitrary format that conforms to the defined Schema of the data store. This can only be used by Gen App Builder.", alias="dataSchema")
    dataset_id: Optional[StrictStr] = Field(default=None, description="Required. The BigQuery data set to copy the data from with a length limit of 1,024 characters.", alias="datasetId")
    gcs_staging_dir: Optional[StrictStr] = Field(default=None, description="Intermediate Cloud Storage directory used for the import with a length limit of 2,000 characters. Can be specified if one wants to have the BigQuery export to a specific Cloud Storage directory.", alias="gcsStagingDir")
    partition_date: Optional[GoogleTypeDate] = Field(default=None, alias="partitionDate")
    project_id: Optional[StrictStr] = Field(default=None, description="The project ID (can be project # or ID) that the BigQuery source is in with a length limit of 128 characters. If not specified, inherits the project ID from the parent request.", alias="projectId")
    table_id: Optional[StrictStr] = Field(default=None, description="Required. The BigQuery table to copy the data from with a length limit of 1,024 characters.", alias="tableId")
    __properties: ClassVar[List[str]] = ["dataSchema", "datasetId", "gcsStagingDir", "partitionDate", "projectId", "tableId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaBigQuerySource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of partition_date
        if self.partition_date:
            _dict['partitionDate'] = self.partition_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaBigQuerySource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataSchema": obj.get("dataSchema"),
            "datasetId": obj.get("datasetId"),
            "gcsStagingDir": obj.get("gcsStagingDir"),
            "partitionDate": GoogleTypeDate.from_dict(obj["partitionDate"]) if obj.get("partitionDate") is not None else None,
            "projectId": obj.get("projectId"),
            "tableId": obj.get("tableId")
        })
        return _obj



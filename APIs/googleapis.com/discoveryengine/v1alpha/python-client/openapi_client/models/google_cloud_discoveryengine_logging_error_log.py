# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_discoveryengine_logging_error_context import GoogleCloudDiscoveryengineLoggingErrorContext
from openapi_client.models.google_cloud_discoveryengine_logging_import_error_context import GoogleCloudDiscoveryengineLoggingImportErrorContext
from openapi_client.models.google_cloud_discoveryengine_logging_service_context import GoogleCloudDiscoveryengineLoggingServiceContext
from openapi_client.models.google_rpc_status import GoogleRpcStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDiscoveryengineLoggingErrorLog(BaseModel):
    """
    An error log which is reported to the Error Reporting system.
    """ # noqa: E501
    context: Optional[GoogleCloudDiscoveryengineLoggingErrorContext] = None
    import_payload: Optional[GoogleCloudDiscoveryengineLoggingImportErrorContext] = Field(default=None, alias="importPayload")
    message: Optional[StrictStr] = Field(default=None, description="A message describing the error.")
    request_payload: Optional[Dict[str, Any]] = Field(default=None, description="The API request payload, represented as a protocol buffer. Most API request types are supportedâ€”for example: * `type.googleapis.com/google.cloud.discoveryengine.v1alpha.DocumentService.CreateDocumentRequest` * `type.googleapis.com/google.cloud.discoveryengine.v1alpha.UserEventService.WriteUserEventRequest`", alias="requestPayload")
    response_payload: Optional[Dict[str, Any]] = Field(default=None, description="The API response payload, represented as a protocol buffer. This is used to log some \"soft errors\", where the response is valid but we consider there are some quality issues like unjoined events. The following API responses are supported, and no PII is included: * `google.cloud.discoveryengine.v1alpha.RecommendationService.Recommend` * `google.cloud.discoveryengine.v1alpha.UserEventService.WriteUserEvent` * `google.cloud.discoveryengine.v1alpha.UserEventService.CollectUserEvent`", alias="responsePayload")
    service_context: Optional[GoogleCloudDiscoveryengineLoggingServiceContext] = Field(default=None, alias="serviceContext")
    status: Optional[GoogleRpcStatus] = None
    __properties: ClassVar[List[str]] = ["context", "importPayload", "message", "requestPayload", "responsePayload", "serviceContext", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineLoggingErrorLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of import_payload
        if self.import_payload:
            _dict['importPayload'] = self.import_payload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_context
        if self.service_context:
            _dict['serviceContext'] = self.service_context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineLoggingErrorLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "context": GoogleCloudDiscoveryengineLoggingErrorContext.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "importPayload": GoogleCloudDiscoveryengineLoggingImportErrorContext.from_dict(obj["importPayload"]) if obj.get("importPayload") is not None else None,
            "message": obj.get("message"),
            "requestPayload": obj.get("requestPayload"),
            "responsePayload": obj.get("responsePayload"),
            "serviceContext": GoogleCloudDiscoveryengineLoggingServiceContext.from_dict(obj["serviceContext"]) if obj.get("serviceContext") is not None else None,
            "status": GoogleRpcStatus.from_dict(obj["status"]) if obj.get("status") is not None else None
        })
        return _obj



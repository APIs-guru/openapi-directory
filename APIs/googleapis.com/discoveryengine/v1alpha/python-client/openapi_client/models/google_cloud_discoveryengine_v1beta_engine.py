# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_discoveryengine_v1beta_engine_chat_engine_config import GoogleCloudDiscoveryengineV1betaEngineChatEngineConfig
from openapi_client.models.google_cloud_discoveryengine_v1beta_engine_chat_engine_metadata import GoogleCloudDiscoveryengineV1betaEngineChatEngineMetadata
from openapi_client.models.google_cloud_discoveryengine_v1beta_engine_common_config import GoogleCloudDiscoveryengineV1betaEngineCommonConfig
from openapi_client.models.google_cloud_discoveryengine_v1beta_engine_search_engine_config import GoogleCloudDiscoveryengineV1betaEngineSearchEngineConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDiscoveryengineV1betaEngine(BaseModel):
    """
    Metadata that describes the training and serving parameters of an Engine.
    """ # noqa: E501
    chat_engine_config: Optional[GoogleCloudDiscoveryengineV1betaEngineChatEngineConfig] = Field(default=None, alias="chatEngineConfig")
    chat_engine_metadata: Optional[GoogleCloudDiscoveryengineV1betaEngineChatEngineMetadata] = Field(default=None, alias="chatEngineMetadata")
    common_config: Optional[GoogleCloudDiscoveryengineV1betaEngineCommonConfig] = Field(default=None, alias="commonConfig")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp the Recommendation Engine was created at.", alias="createTime")
    data_store_ids: Optional[List[StrictStr]] = Field(default=None, description="The data stores associated with this engine. For SOLUTION_TYPE_SEARCH and SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store. If solution_type is SOLUTION_TYPE_CHAT, multiple DataStores in the same Collection can be associated here. Note that when used in CreateEngineRequest, one DataStore id must be provided as the system will use it for necessary initializations.", alias="dataStoreIds")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.", alias="displayName")
    industry_vertical: Optional[StrictStr] = Field(default=None, description="The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to `GENERIC`. Vertical on Engine has to match vertical of the DataStore liniked to the engine.", alias="industryVertical")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The fully qualified resource name of the engine. This field must be a UTF-8 encoded string with a length limit of 1024 characters. Format: `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}` engine should be 1-63 characters, and valid characters are /a-z0-9*/. Otherwise, an INVALID_ARGUMENT error is returned.")
    search_engine_config: Optional[GoogleCloudDiscoveryengineV1betaEngineSearchEngineConfig] = Field(default=None, alias="searchEngineConfig")
    solution_type: Optional[StrictStr] = Field(default=None, description="Required. The solutions of the engine.", alias="solutionType")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp the Recommendation Engine was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["chatEngineConfig", "chatEngineMetadata", "commonConfig", "createTime", "dataStoreIds", "displayName", "industryVertical", "name", "searchEngineConfig", "solutionType", "updateTime"]

    @field_validator('industry_vertical')
    def industry_vertical_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INDUSTRY_VERTICAL_UNSPECIFIED', 'GENERIC', 'MEDIA']):
            raise ValueError("must be one of enum values ('INDUSTRY_VERTICAL_UNSPECIFIED', 'GENERIC', 'MEDIA')")
        return value

    @field_validator('solution_type')
    def solution_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SOLUTION_TYPE_UNSPECIFIED', 'SOLUTION_TYPE_RECOMMENDATION', 'SOLUTION_TYPE_SEARCH', 'SOLUTION_TYPE_CHAT']):
            raise ValueError("must be one of enum values ('SOLUTION_TYPE_UNSPECIFIED', 'SOLUTION_TYPE_RECOMMENDATION', 'SOLUTION_TYPE_SEARCH', 'SOLUTION_TYPE_CHAT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1betaEngine from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of chat_engine_config
        if self.chat_engine_config:
            _dict['chatEngineConfig'] = self.chat_engine_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of chat_engine_metadata
        if self.chat_engine_metadata:
            _dict['chatEngineMetadata'] = self.chat_engine_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of common_config
        if self.common_config:
            _dict['commonConfig'] = self.common_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of search_engine_config
        if self.search_engine_config:
            _dict['searchEngineConfig'] = self.search_engine_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1betaEngine from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chatEngineConfig": GoogleCloudDiscoveryengineV1betaEngineChatEngineConfig.from_dict(obj["chatEngineConfig"]) if obj.get("chatEngineConfig") is not None else None,
            "chatEngineMetadata": GoogleCloudDiscoveryengineV1betaEngineChatEngineMetadata.from_dict(obj["chatEngineMetadata"]) if obj.get("chatEngineMetadata") is not None else None,
            "commonConfig": GoogleCloudDiscoveryengineV1betaEngineCommonConfig.from_dict(obj["commonConfig"]) if obj.get("commonConfig") is not None else None,
            "createTime": obj.get("createTime"),
            "dataStoreIds": obj.get("dataStoreIds"),
            "displayName": obj.get("displayName"),
            "industryVertical": obj.get("industryVertical"),
            "name": obj.get("name"),
            "searchEngineConfig": GoogleCloudDiscoveryengineV1betaEngineSearchEngineConfig.from_dict(obj["searchEngineConfig"]) if obj.get("searchEngineConfig") is not None else None,
            "solutionType": obj.get("solutionType"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_discoveryengine_v1alpha_conversation import GoogleCloudDiscoveryengineV1alphaConversation
from openapi_client.models.google_cloud_discoveryengine_v1alpha_search_request_boost_spec import GoogleCloudDiscoveryengineV1alphaSearchRequestBoostSpec
from openapi_client.models.google_cloud_discoveryengine_v1alpha_search_request_content_search_spec_summary_spec import GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpec
from openapi_client.models.google_cloud_discoveryengine_v1alpha_text_input import GoogleCloudDiscoveryengineV1alphaTextInput
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDiscoveryengineV1alphaConverseConversationRequest(BaseModel):
    """
    Request message for ConversationalSearchService.ConverseConversation method.
    """ # noqa: E501
    boost_spec: Optional[GoogleCloudDiscoveryengineV1alphaSearchRequestBoostSpec] = Field(default=None, alias="boostSpec")
    conversation: Optional[GoogleCloudDiscoveryengineV1alphaConversation] = None
    filter: Optional[StrictStr] = Field(default=None, description="The filter syntax consists of an expression language for constructing a predicate from one or more fields of the documents being filtered. Filter expression is case-sensitive. This will be used to filter search results which may affect the summary response. If this field is unrecognizable, an `INVALID_ARGUMENT` is returned. Filtering in Vertex AI Search is done by mapping the LHS filter key to a key property defined in the Vertex AI Search backend -- this mapping is defined by the customer in their schema. For example a media customer might have a field 'name' in their schema. In this case the filter would look like this: filter --> name:'ANY(\"king kong\")' For more information about filtering including syntax and filter operators, see [Filter](https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata)")
    name: Optional[StrictStr] = Field(default=None, description="Required. The resource name of the Conversation to get. Format: `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`. Use `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/-` to activate auto session mode, which automatically creates a new conversation inside a ConverseConversation session.")
    query: Optional[GoogleCloudDiscoveryengineV1alphaTextInput] = None
    safe_search: Optional[StrictBool] = Field(default=None, description="Whether to turn on safe search.", alias="safeSearch")
    serving_config: Optional[StrictStr] = Field(default=None, description="The resource name of the Serving Config to use. Format: `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/servingConfigs/{serving_config_id}` If this is not set, the default serving config will be used.", alias="servingConfig")
    summary_spec: Optional[GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpec] = Field(default=None, alias="summarySpec")
    user_labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The user labels applied to a resource must meet the following requirements: * Each resource can have multiple labels, up to a maximum of 64. * Each label must be a key-value pair. * Keys have a minimum length of 1 character and a maximum length of 63 characters and cannot be empty. Values can be empty and have a maximum length of 63 characters. * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. All characters must use UTF-8 encoding, and international characters are allowed. * The key portion of a label must be unique. However, you can use the same key with multiple resources. * Keys must start with a lowercase letter or international character. See [Google Cloud Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements) for more details.", alias="userLabels")
    __properties: ClassVar[List[str]] = ["boostSpec", "conversation", "filter", "name", "query", "safeSearch", "servingConfig", "summarySpec", "userLabels"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaConverseConversationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of boost_spec
        if self.boost_spec:
            _dict['boostSpec'] = self.boost_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conversation
        if self.conversation:
            _dict['conversation'] = self.conversation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary_spec
        if self.summary_spec:
            _dict['summarySpec'] = self.summary_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaConverseConversationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boostSpec": GoogleCloudDiscoveryengineV1alphaSearchRequestBoostSpec.from_dict(obj["boostSpec"]) if obj.get("boostSpec") is not None else None,
            "conversation": GoogleCloudDiscoveryengineV1alphaConversation.from_dict(obj["conversation"]) if obj.get("conversation") is not None else None,
            "filter": obj.get("filter"),
            "name": obj.get("name"),
            "query": GoogleCloudDiscoveryengineV1alphaTextInput.from_dict(obj["query"]) if obj.get("query") is not None else None,
            "safeSearch": obj.get("safeSearch"),
            "servingConfig": obj.get("servingConfig"),
            "summarySpec": GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpec.from_dict(obj["summarySpec"]) if obj.get("summarySpec") is not None else None,
            "userLabels": obj.get("userLabels")
        })
        return _obj



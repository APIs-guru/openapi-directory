# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_discoveryengine_v1alpha_import_error_config import GoogleCloudDiscoveryengineV1alphaImportErrorConfig
from openapi_client.models.google_cloud_discoveryengine_v1alpha_train_custom_model_request_gcs_training_input import GoogleCloudDiscoveryengineV1alphaTrainCustomModelRequestGcsTrainingInput
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDiscoveryengineV1alphaTrainCustomModelRequest(BaseModel):
    """
    Request message for SearchTuningService.TrainCustomModel method.
    """ # noqa: E501
    error_config: Optional[GoogleCloudDiscoveryengineV1alphaImportErrorConfig] = Field(default=None, alias="errorConfig")
    gcs_training_input: Optional[GoogleCloudDiscoveryengineV1alphaTrainCustomModelRequestGcsTrainingInput] = Field(default=None, alias="gcsTrainingInput")
    model_type: Optional[StrictStr] = Field(default=None, description="Model to be trained. Supported values are: * **search-tuning**: Fine tuning the search system based on data provided.", alias="modelType")
    __properties: ClassVar[List[str]] = ["errorConfig", "gcsTrainingInput", "modelType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaTrainCustomModelRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error_config
        if self.error_config:
            _dict['errorConfig'] = self.error_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcs_training_input
        if self.gcs_training_input:
            _dict['gcsTrainingInput'] = self.gcs_training_input.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaTrainCustomModelRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorConfig": GoogleCloudDiscoveryengineV1alphaImportErrorConfig.from_dict(obj["errorConfig"]) if obj.get("errorConfig") is not None else None,
            "gcsTrainingInput": GoogleCloudDiscoveryengineV1alphaTrainCustomModelRequestGcsTrainingInput.from_dict(obj["gcsTrainingInput"]) if obj.get("gcsTrainingInput") is not None else None,
            "modelType": obj.get("modelType")
        })
        return _obj



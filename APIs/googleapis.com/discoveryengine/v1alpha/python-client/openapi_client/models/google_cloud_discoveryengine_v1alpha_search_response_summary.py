# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_discoveryengine_v1alpha_search_response_summary_safety_attributes import GoogleCloudDiscoveryengineV1alphaSearchResponseSummarySafetyAttributes
from openapi_client.models.google_cloud_discoveryengine_v1alpha_search_response_summary_summary_with_metadata import GoogleCloudDiscoveryengineV1alphaSearchResponseSummarySummaryWithMetadata
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDiscoveryengineV1alphaSearchResponseSummary(BaseModel):
    """
    Summary of the top N search result specified by the summary spec.
    """ # noqa: E501
    safety_attributes: Optional[GoogleCloudDiscoveryengineV1alphaSearchResponseSummarySafetyAttributes] = Field(default=None, alias="safetyAttributes")
    summary_skipped_reasons: Optional[List[StrictStr]] = Field(default=None, description="Additional summary-skipped reasons. This provides the reason for ignored cases. If nothing is skipped, this field is not set.", alias="summarySkippedReasons")
    summary_text: Optional[StrictStr] = Field(default=None, description="The summary content.", alias="summaryText")
    summary_with_metadata: Optional[GoogleCloudDiscoveryengineV1alphaSearchResponseSummarySummaryWithMetadata] = Field(default=None, alias="summaryWithMetadata")
    __properties: ClassVar[List[str]] = ["safetyAttributes", "summarySkippedReasons", "summaryText", "summaryWithMetadata"]

    @field_validator('summary_skipped_reasons')
    def summary_skipped_reasons_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['SUMMARY_SKIPPED_REASON_UNSPECIFIED', 'ADVERSARIAL_QUERY_IGNORED', 'NON_SUMMARY_SEEKING_QUERY_IGNORED', 'OUT_OF_DOMAIN_QUERY_IGNORED', 'POTENTIAL_POLICY_VIOLATION', 'LLM_ADDON_NOT_ENABLED']):
                raise ValueError("each list item must be one of ('SUMMARY_SKIPPED_REASON_UNSPECIFIED', 'ADVERSARIAL_QUERY_IGNORED', 'NON_SUMMARY_SEEKING_QUERY_IGNORED', 'OUT_OF_DOMAIN_QUERY_IGNORED', 'POTENTIAL_POLICY_VIOLATION', 'LLM_ADDON_NOT_ENABLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaSearchResponseSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of safety_attributes
        if self.safety_attributes:
            _dict['safetyAttributes'] = self.safety_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary_with_metadata
        if self.summary_with_metadata:
            _dict['summaryWithMetadata'] = self.summary_with_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaSearchResponseSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "safetyAttributes": GoogleCloudDiscoveryengineV1alphaSearchResponseSummarySafetyAttributes.from_dict(obj["safetyAttributes"]) if obj.get("safetyAttributes") is not None else None,
            "summarySkippedReasons": obj.get("summarySkippedReasons"),
            "summaryText": obj.get("summaryText"),
            "summaryWithMetadata": GoogleCloudDiscoveryengineV1alphaSearchResponseSummarySummaryWithMetadata.from_dict(obj["summaryWithMetadata"]) if obj.get("summaryWithMetadata") is not None else None
        })
        return _obj



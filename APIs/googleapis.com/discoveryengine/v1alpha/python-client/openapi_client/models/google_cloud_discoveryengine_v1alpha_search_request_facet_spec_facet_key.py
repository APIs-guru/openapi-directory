# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_discoveryengine_v1alpha_interval import GoogleCloudDiscoveryengineV1alphaInterval
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey(BaseModel):
    """
    Specifies how a facet is computed.
    """ # noqa: E501
    case_insensitive: Optional[StrictBool] = Field(default=None, description="True to make facet keys case insensitive when getting faceting values with prefixes or contains; false otherwise.", alias="caseInsensitive")
    contains: Optional[List[StrictStr]] = Field(default=None, description="Only get facet values that contains the given strings. For example, suppose \"category\" has three values \"Action > 2022\", \"Action > 2021\" and \"Sci-Fi > 2022\". If set \"contains\" to \"2022\", the \"category\" facet only contains \"Action > 2022\" and \"Sci-Fi > 2022\". Only supported on textual fields. Maximum is 10.")
    intervals: Optional[List[GoogleCloudDiscoveryengineV1alphaInterval]] = Field(default=None, description="Set only if values should be bucketed into intervals. Must be set for facets with numerical values. Must not be set for facet with text values. Maximum number of intervals is 30.")
    key: Optional[StrictStr] = Field(default=None, description="Required. Supported textual and numerical facet keys in Document object, over which the facet values are computed. Facet key is case-sensitive.")
    order_by: Optional[StrictStr] = Field(default=None, description="The order in which documents are returned. Allowed values are: * \"count desc\", which means order by SearchResponse.Facet.values.count descending. * \"value desc\", which means order by SearchResponse.Facet.values.value descending. Only applies to textual facets. If not set, textual values are sorted in [natural order](https://en.wikipedia.org/wiki/Natural_sort_order); numerical intervals are sorted in the order given by FacetSpec.FacetKey.intervals.", alias="orderBy")
    prefixes: Optional[List[StrictStr]] = Field(default=None, description="Only get facet values that start with the given string prefix. For example, suppose \"category\" has three values \"Action > 2022\", \"Action > 2021\" and \"Sci-Fi > 2022\". If set \"prefixes\" to \"Action\", the \"category\" facet only contains \"Action > 2022\" and \"Action > 2021\". Only supported on textual fields. Maximum is 10.")
    restricted_values: Optional[List[StrictStr]] = Field(default=None, description="Only get facet for the given restricted values. Only supported on textual fields. For example, suppose \"category\" has three values \"Action > 2022\", \"Action > 2021\" and \"Sci-Fi > 2022\". If set \"restricted_values\" to \"Action > 2022\", the \"category\" facet only contains \"Action > 2022\". Only supported on textual fields. Maximum is 10.", alias="restrictedValues")
    __properties: ClassVar[List[str]] = ["caseInsensitive", "contains", "intervals", "key", "orderBy", "prefixes", "restrictedValues"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in intervals (list)
        _items = []
        if self.intervals:
            for _item_intervals in self.intervals:
                if _item_intervals:
                    _items.append(_item_intervals.to_dict())
            _dict['intervals'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "caseInsensitive": obj.get("caseInsensitive"),
            "contains": obj.get("contains"),
            "intervals": [GoogleCloudDiscoveryengineV1alphaInterval.from_dict(_item) for _item in obj["intervals"]] if obj.get("intervals") is not None else None,
            "key": obj.get("key"),
            "orderBy": obj.get("orderBy"),
            "prefixes": obj.get("prefixes"),
            "restrictedValues": obj.get("restrictedValues")
        })
        return _obj



# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDiscoveryengineV1alphaServingConfigMediaConfig(BaseModel):
    """
    Specifies the configurations needed for Media Discovery. Currently we support: * `demote_content_watched`: Threshold for watched content demotion. Customers can specify if using watched content demotion or use viewed detail page. Using the content watched demotion, customers need to specify the watched minutes or percentage exceeds the threshold, the content will be demoted in the recommendation result. * `promote_fresh_content`: cutoff days for fresh content promotion. Customers can specify if using content freshness promotion. If the content was published within the cutoff days, the content will be promoted in the recommendation result. Can only be set if SolutionType is SOLUTION_TYPE_RECOMMENDATION.
    """ # noqa: E501
    content_freshness_cutoff_days: Optional[StrictInt] = Field(default=None, description="Specifies the content freshness used for recommendation result. Contents will be demoted if contents were published for more than content freshness cutoff days.", alias="contentFreshnessCutoffDays")
    content_watched_minutes_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Specifies the content watched minutes threshold for demotion.", alias="contentWatchedMinutesThreshold")
    content_watched_percentage_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Specifies the content watched percentage threshold for demotion. Threshold value must be between [0, 1.0] inclusive.", alias="contentWatchedPercentageThreshold")
    content_watched_seconds_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Specifies the content watched minutes threshold for demotion.", alias="contentWatchedSecondsThreshold")
    demotion_event_type: Optional[StrictStr] = Field(default=None, description="Specifies the event type used for demoting recommendation result. Currently supported values: * `view-item`: Item viewed. * `media-play`: Start/resume watching a video, playing a song, etc. * `media-complete`: Finished or stopped midway through a video, song, etc. If unset, watch history demotion will not be applied. Content freshness demotion will still be applied.", alias="demotionEventType")
    __properties: ClassVar[List[str]] = ["contentFreshnessCutoffDays", "contentWatchedMinutesThreshold", "contentWatchedPercentageThreshold", "contentWatchedSecondsThreshold", "demotionEventType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaServingConfigMediaConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaServingConfigMediaConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentFreshnessCutoffDays": obj.get("contentFreshnessCutoffDays"),
            "contentWatchedMinutesThreshold": obj.get("contentWatchedMinutesThreshold"),
            "contentWatchedPercentageThreshold": obj.get("contentWatchedPercentageThreshold"),
            "contentWatchedSecondsThreshold": obj.get("contentWatchedSecondsThreshold"),
            "demotionEventType": obj.get("demotionEventType")
        })
        return _obj



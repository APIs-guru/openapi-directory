# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_discoveryengine_v1beta_document_processing_config_parsing_config import GoogleCloudDiscoveryengineV1betaDocumentProcessingConfigParsingConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig(BaseModel):
    """
    A singleton resource of DataStore. It's empty when DataStore is created, which defaults to digital parser. The first call to DataStoreService.UpdateDocumentProcessingConfig method will initialize the config.
    """ # noqa: E501
    default_parsing_config: Optional[GoogleCloudDiscoveryengineV1betaDocumentProcessingConfigParsingConfig] = Field(default=None, alias="defaultParsingConfig")
    name: Optional[StrictStr] = Field(default=None, description="The full resource name of the Document Processing Config. Format: `projects/*/locations/*/collections/*/dataStores/*/documentProcessingConfig`.")
    parsing_config_overrides: Optional[Dict[str, GoogleCloudDiscoveryengineV1betaDocumentProcessingConfigParsingConfig]] = Field(default=None, description="Map from file type to override the default parsing configuration based on the file type. Supported keys: * `pdf`: Override parsing config for PDF files, either digital parsing, ocr parsing or layout parsing is supported. * `html`: Override parsing config for HTML files, only digital parsing and or layout parsing are supported. * `docx`: Override parsing config for DOCX files, only digital parsing and or layout parsing are supported.", alias="parsingConfigOverrides")
    __properties: ClassVar[List[str]] = ["defaultParsingConfig", "name", "parsingConfigOverrides"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_parsing_config
        if self.default_parsing_config:
            _dict['defaultParsingConfig'] = self.default_parsing_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in parsing_config_overrides (dict)
        _field_dict = {}
        if self.parsing_config_overrides:
            for _key_parsing_config_overrides in self.parsing_config_overrides:
                if self.parsing_config_overrides[_key_parsing_config_overrides]:
                    _field_dict[_key_parsing_config_overrides] = self.parsing_config_overrides[_key_parsing_config_overrides].to_dict()
            _dict['parsingConfigOverrides'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultParsingConfig": GoogleCloudDiscoveryengineV1betaDocumentProcessingConfigParsingConfig.from_dict(obj["defaultParsingConfig"]) if obj.get("defaultParsingConfig") is not None else None,
            "name": obj.get("name"),
            "parsingConfigOverrides": dict(
                (_k, GoogleCloudDiscoveryengineV1betaDocumentProcessingConfigParsingConfig.from_dict(_v))
                for _k, _v in obj["parsingConfigOverrides"].items()
            )
            if obj.get("parsingConfigOverrides") is not None
            else None
        })
        return _obj



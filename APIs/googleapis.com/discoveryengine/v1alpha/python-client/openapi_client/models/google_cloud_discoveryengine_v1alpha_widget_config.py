# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_discoveryengine_v1alpha_search_request_content_search_spec import GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpec
from openapi_client.models.google_cloud_discoveryengine_v1alpha_widget_config_facet_field import GoogleCloudDiscoveryengineV1alphaWidgetConfigFacetField
from openapi_client.models.google_cloud_discoveryengine_v1alpha_widget_config_ui_component_field import GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDiscoveryengineV1alphaWidgetConfig(BaseModel):
    """
    WidgetConfig captures configs at the Widget level.
    """ # noqa: E501
    allow_public_access: Optional[StrictBool] = Field(default=None, description="Whether allow no-auth integration with widget. If set true, public access to search or other solutions from widget is allowed without authenication token provided by customer hosted backend server.", alias="allowPublicAccess")
    allowlisted_domains: Optional[List[StrictStr]] = Field(default=None, description="Allowlisted domains that can load this widget.", alias="allowlistedDomains")
    config_id: Optional[StrictStr] = Field(default=None, description="Output only. Unique obfuscated identifier of a WidgetConfig.", alias="configId")
    content_search_spec: Optional[GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpec] = Field(default=None, alias="contentSearchSpec")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp the WidgetConfig was created.", alias="createTime")
    data_store_type: Optional[StrictStr] = Field(default=None, description="Output only. The type of the parent data store.", alias="dataStoreType")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The human readable widget config display name. Used in Discovery UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.", alias="displayName")
    enable_autocomplete: Optional[StrictBool] = Field(default=None, description="Whether or not to enable autocomplete.", alias="enableAutocomplete")
    enable_conversational_search: Optional[StrictBool] = Field(default=None, description="Whether to allow conversational search (LLM, multi-turn) or not (non-LLM, single-turn).", alias="enableConversationalSearch")
    enable_quality_feedback: Optional[StrictBool] = Field(default=None, description="Turn on or off collecting the search result quality feedback from end users.", alias="enableQualityFeedback")
    enable_result_score: Optional[StrictBool] = Field(default=None, description="Whether to show the result score.", alias="enableResultScore")
    enable_safe_search: Optional[StrictBool] = Field(default=None, description="Whether to enable safe search.", alias="enableSafeSearch")
    enable_snippet_result_summary: Optional[StrictBool] = Field(default=None, description="Turn on or off summary for each snippets result.", alias="enableSnippetResultSummary")
    enable_summarization: Optional[StrictBool] = Field(default=None, description="Turn on or off summarization for the search response.", alias="enableSummarization")
    enable_web_app: Optional[StrictBool] = Field(default=None, description="Whether to enable standalone web app.", alias="enableWebApp")
    facet_field: Optional[List[GoogleCloudDiscoveryengineV1alphaWidgetConfigFacetField]] = Field(default=None, description="The configuration and appearance of facets in the end user view.", alias="facetField")
    fields_ui_components_map: Optional[Dict[str, GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField]] = Field(default=None, description="The key is the UI component. Mock. Currently supported `title`, `thumbnail`, `url`, `custom1`, `custom2`, `custom3`. The value is the name of the field along with its device visibility. The 3 custom fields are optional and can be added or removed. `title`, `thumbnail`, `url` are required UI components that cannot be removed.", alias="fieldsUiComponentsMap")
    industry_vertical: Optional[StrictStr] = Field(default=None, description="Output only. The industry vertical that the WidgetConfig registers. The WidgetConfig industry vertical is based on the associated Engine.", alias="industryVertical")
    llm_enabled: Optional[StrictBool] = Field(default=None, description="Output only. Whether LLM is enabled in the corresponding data store.", alias="llmEnabled")
    minimum_data_term_accepted: Optional[StrictBool] = Field(default=None, description="Output only. Whether the customer accepted data use terms.", alias="minimumDataTermAccepted")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The full resource name of the widget config. Format: `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/widgetConfigs/{widget_config_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.")
    result_display_type: Optional[StrictStr] = Field(default=None, description="The type of snippet to display in UCS widget. - RESULT_DISPLAY_TYPE_UNSPECIFIED for existing users. - SNIPPET for new non-enterprise search users. - EXTRACTIVE_ANSWER for new enterprise search users.", alias="resultDisplayType")
    solution_type: Optional[StrictStr] = Field(default=None, description="Required. Immutable. Specifies the solution type that this WidgetConfig can be used for.", alias="solutionType")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp the WidgetConfig was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["allowPublicAccess", "allowlistedDomains", "configId", "contentSearchSpec", "createTime", "dataStoreType", "displayName", "enableAutocomplete", "enableConversationalSearch", "enableQualityFeedback", "enableResultScore", "enableSafeSearch", "enableSnippetResultSummary", "enableSummarization", "enableWebApp", "facetField", "fieldsUiComponentsMap", "industryVertical", "llmEnabled", "minimumDataTermAccepted", "name", "resultDisplayType", "solutionType", "updateTime"]

    @field_validator('data_store_type')
    def data_store_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_STORE_TYPE_UNSPECIFIED', 'SITE_SEARCH', 'STRUCTURED', 'UNSTRUCTURED', 'BLENDED']):
            raise ValueError("must be one of enum values ('DATA_STORE_TYPE_UNSPECIFIED', 'SITE_SEARCH', 'STRUCTURED', 'UNSTRUCTURED', 'BLENDED')")
        return value

    @field_validator('industry_vertical')
    def industry_vertical_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INDUSTRY_VERTICAL_UNSPECIFIED', 'GENERIC', 'MEDIA']):
            raise ValueError("must be one of enum values ('INDUSTRY_VERTICAL_UNSPECIFIED', 'GENERIC', 'MEDIA')")
        return value

    @field_validator('result_display_type')
    def result_display_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESULT_DISPLAY_TYPE_UNSPECIFIED', 'SNIPPET', 'EXTRACTIVE_ANSWER']):
            raise ValueError("must be one of enum values ('RESULT_DISPLAY_TYPE_UNSPECIFIED', 'SNIPPET', 'EXTRACTIVE_ANSWER')")
        return value

    @field_validator('solution_type')
    def solution_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SOLUTION_TYPE_UNSPECIFIED', 'SOLUTION_TYPE_RECOMMENDATION', 'SOLUTION_TYPE_SEARCH', 'SOLUTION_TYPE_CHAT']):
            raise ValueError("must be one of enum values ('SOLUTION_TYPE_UNSPECIFIED', 'SOLUTION_TYPE_RECOMMENDATION', 'SOLUTION_TYPE_SEARCH', 'SOLUTION_TYPE_CHAT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaWidgetConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "config_id",
            "create_time",
            "data_store_type",
            "industry_vertical",
            "llm_enabled",
            "minimum_data_term_accepted",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content_search_spec
        if self.content_search_spec:
            _dict['contentSearchSpec'] = self.content_search_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in facet_field (list)
        _items = []
        if self.facet_field:
            for _item_facet_field in self.facet_field:
                if _item_facet_field:
                    _items.append(_item_facet_field.to_dict())
            _dict['facetField'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in fields_ui_components_map (dict)
        _field_dict = {}
        if self.fields_ui_components_map:
            for _key_fields_ui_components_map in self.fields_ui_components_map:
                if self.fields_ui_components_map[_key_fields_ui_components_map]:
                    _field_dict[_key_fields_ui_components_map] = self.fields_ui_components_map[_key_fields_ui_components_map].to_dict()
            _dict['fieldsUiComponentsMap'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaWidgetConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowPublicAccess": obj.get("allowPublicAccess"),
            "allowlistedDomains": obj.get("allowlistedDomains"),
            "configId": obj.get("configId"),
            "contentSearchSpec": GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpec.from_dict(obj["contentSearchSpec"]) if obj.get("contentSearchSpec") is not None else None,
            "createTime": obj.get("createTime"),
            "dataStoreType": obj.get("dataStoreType"),
            "displayName": obj.get("displayName"),
            "enableAutocomplete": obj.get("enableAutocomplete"),
            "enableConversationalSearch": obj.get("enableConversationalSearch"),
            "enableQualityFeedback": obj.get("enableQualityFeedback"),
            "enableResultScore": obj.get("enableResultScore"),
            "enableSafeSearch": obj.get("enableSafeSearch"),
            "enableSnippetResultSummary": obj.get("enableSnippetResultSummary"),
            "enableSummarization": obj.get("enableSummarization"),
            "enableWebApp": obj.get("enableWebApp"),
            "facetField": [GoogleCloudDiscoveryengineV1alphaWidgetConfigFacetField.from_dict(_item) for _item in obj["facetField"]] if obj.get("facetField") is not None else None,
            "fieldsUiComponentsMap": dict(
                (_k, GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField.from_dict(_v))
                for _k, _v in obj["fieldsUiComponentsMap"].items()
            )
            if obj.get("fieldsUiComponentsMap") is not None
            else None,
            "industryVertical": obj.get("industryVertical"),
            "llmEnabled": obj.get("llmEnabled"),
            "minimumDataTermAccepted": obj.get("minimumDataTermAccepted"),
            "name": obj.get("name"),
            "resultDisplayType": obj.get("resultDisplayType"),
            "solutionType": obj.get("solutionType"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



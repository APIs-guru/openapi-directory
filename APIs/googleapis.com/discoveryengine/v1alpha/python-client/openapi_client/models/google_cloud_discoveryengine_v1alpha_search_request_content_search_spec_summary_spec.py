# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_discoveryengine_v1alpha_search_request_content_search_spec_summary_spec_model_prompt_spec import GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpecModelPromptSpec
from openapi_client.models.google_cloud_discoveryengine_v1alpha_search_request_content_search_spec_summary_spec_model_spec import GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpecModelSpec
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpec(BaseModel):
    """
    A specification for configuring a summary returned in a search response.
    """ # noqa: E501
    ignore_adversarial_query: Optional[StrictBool] = Field(default=None, description="Specifies whether to filter out adversarial queries. The default value is `false`. Google employs search-query classification to detect adversarial queries. No summary is returned if the search query is classified as an adversarial query. For example, a user might ask a question regarding negative comments about the company or submit a query designed to generate unsafe, policy-violating output. If this field is set to `true`, we skip generating summaries for adversarial queries and return fallback messages instead.", alias="ignoreAdversarialQuery")
    ignore_non_summary_seeking_query: Optional[StrictBool] = Field(default=None, description="Specifies whether to filter out queries that are not summary-seeking. The default value is `false`. Google employs search-query classification to detect summary-seeking queries. No summary is returned if the search query is classified as a non-summary seeking query. For example, `why is the sky blue` and `Who is the best soccer player in the world?` are summary-seeking queries, but `SFO airport` and `world cup 2026` are not. They are most likely navigational queries. If this field is set to `true`, we skip generating summaries for non-summary seeking queries and return fallback messages instead.", alias="ignoreNonSummarySeekingQuery")
    include_citations: Optional[StrictBool] = Field(default=None, description="Specifies whether to include citations in the summary. The default value is `false`. When this field is set to `true`, summaries include in-line citation numbers. Example summary including citations: BigQuery is Google Cloud's fully managed and completely serverless enterprise data warehouse [1]. BigQuery supports all data types, works across clouds, and has built-in machine learning and business intelligence, all within a unified platform [2, 3]. The citation numbers refer to the returned search results and are 1-indexed. For example, [1] means that the sentence is attributed to the first search result. [2, 3] means that the sentence is attributed to both the second and third search results.", alias="includeCitations")
    language_code: Optional[StrictStr] = Field(default=None, description="Language code for Summary. Use language tags defined by [BCP47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). Note: This is an experimental feature.", alias="languageCode")
    model_prompt_spec: Optional[GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpecModelPromptSpec] = Field(default=None, alias="modelPromptSpec")
    model_spec: Optional[GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpecModelSpec] = Field(default=None, alias="modelSpec")
    summary_result_count: Optional[StrictInt] = Field(default=None, description="The number of top results to generate the summary from. If the number of results returned is less than `summaryResultCount`, the summary is generated from all of the results. At most five results can be used to generate a summary.", alias="summaryResultCount")
    __properties: ClassVar[List[str]] = ["ignoreAdversarialQuery", "ignoreNonSummarySeekingQuery", "includeCitations", "languageCode", "modelPromptSpec", "modelSpec", "summaryResultCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model_prompt_spec
        if self.model_prompt_spec:
            _dict['modelPromptSpec'] = self.model_prompt_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model_spec
        if self.model_spec:
            _dict['modelSpec'] = self.model_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ignoreAdversarialQuery": obj.get("ignoreAdversarialQuery"),
            "ignoreNonSummarySeekingQuery": obj.get("ignoreNonSummarySeekingQuery"),
            "includeCitations": obj.get("includeCitations"),
            "languageCode": obj.get("languageCode"),
            "modelPromptSpec": GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpecModelPromptSpec.from_dict(obj["modelPromptSpec"]) if obj.get("modelPromptSpec") is not None else None,
            "modelSpec": GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpecModelSpec.from_dict(obj["modelSpec"]) if obj.get("modelSpec") is not None else None,
            "summaryResultCount": obj.get("summaryResultCount")
        })
        return _obj



# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_discoveryengine_v1alpha_reply import GoogleCloudDiscoveryengineV1alphaReply

class TestGoogleCloudDiscoveryengineV1alphaReply(unittest.TestCase):
    """GoogleCloudDiscoveryengineV1alphaReply unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDiscoveryengineV1alphaReply:
        """Test GoogleCloudDiscoveryengineV1alphaReply
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDiscoveryengineV1alphaReply`
        """
        model = GoogleCloudDiscoveryengineV1alphaReply()
        if include_optional:
            return GoogleCloudDiscoveryengineV1alphaReply(
                references = [
                    openapi_client.models.google_cloud_discoveryengine_v1alpha_reply_reference.GoogleCloudDiscoveryengineV1alphaReplyReference(
                        anchor_text = '', 
                        end = 56, 
                        start = 56, 
                        uri = '', )
                    ],
                reply = '',
                summary = openapi_client.models.google_cloud_discoveryengine_v1alpha_search_response_summary.GoogleCloudDiscoveryengineV1alphaSearchResponseSummary(
                    safety_attributes = openapi_client.models.google_cloud_discoveryengine_v1alpha_search_response_summary_safety_attributes.GoogleCloudDiscoveryengineV1alphaSearchResponseSummarySafetyAttributes(
                        categories = [
                            ''
                            ], 
                        scores = [
                            1.337
                            ], ), 
                    summary_skipped_reasons = [
                        'SUMMARY_SKIPPED_REASON_UNSPECIFIED'
                        ], 
                    summary_text = '', 
                    summary_with_metadata = openapi_client.models.google_cloud_discoveryengine_v1alpha_search_response_summary_summary_with_metadata.GoogleCloudDiscoveryengineV1alphaSearchResponseSummarySummaryWithMetadata(
                        citation_metadata = openapi_client.models.google_cloud_discoveryengine_v1alpha_search_response_summary_citation_metadata.GoogleCloudDiscoveryengineV1alphaSearchResponseSummaryCitationMetadata(
                            citations = [
                                openapi_client.models.google_cloud_discoveryengine_v1alpha_search_response_summary_citation.GoogleCloudDiscoveryengineV1alphaSearchResponseSummaryCitation(
                                    end_index = '', 
                                    sources = [
                                        openapi_client.models.google_cloud_discoveryengine_v1alpha_search_response_summary_citation_source.GoogleCloudDiscoveryengineV1alphaSearchResponseSummaryCitationSource(
                                            reference_index = '', )
                                        ], 
                                    start_index = '', )
                                ], ), 
                        references = [
                            openapi_client.models.google_cloud_discoveryengine_v1alpha_search_response_summary_reference.GoogleCloudDiscoveryengineV1alphaSearchResponseSummaryReference(
                                document = '', 
                                title = '', 
                                uri = '', )
                            ], ), )
            )
        else:
            return GoogleCloudDiscoveryengineV1alphaReply(
        )
        """

    def testGoogleCloudDiscoveryengineV1alphaReply(self):
        """Test GoogleCloudDiscoveryengineV1alphaReply"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

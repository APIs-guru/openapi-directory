# coding: utf-8

"""
    Discovery Engine API

    Discovery Engine API.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_discoveryengine_v1alpha_serving_config import GoogleCloudDiscoveryengineV1alphaServingConfig

class TestGoogleCloudDiscoveryengineV1alphaServingConfig(unittest.TestCase):
    """GoogleCloudDiscoveryengineV1alphaServingConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDiscoveryengineV1alphaServingConfig:
        """Test GoogleCloudDiscoveryengineV1alphaServingConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDiscoveryengineV1alphaServingConfig`
        """
        model = GoogleCloudDiscoveryengineV1alphaServingConfig()
        if include_optional:
            return GoogleCloudDiscoveryengineV1alphaServingConfig(
                boost_control_ids = [
                    ''
                    ],
                create_time = '',
                custom_fine_tuning_spec = openapi_client.models.google_cloud_discoveryengine_v1alpha_custom_fine_tuning_spec.GoogleCloudDiscoveryengineV1alphaCustomFineTuningSpec(
                    enable_search_adaptor = True, ),
                display_name = '',
                dissociate_control_ids = [
                    ''
                    ],
                diversity_level = '',
                embedding_config = openapi_client.models.google_cloud_discoveryengine_v1alpha_embedding_config.GoogleCloudDiscoveryengineV1alphaEmbeddingConfig(
                    field_path = '', ),
                filter_control_ids = [
                    ''
                    ],
                generic_config = openapi_client.models.google_cloud_discoveryengine_v1alpha_serving_config_generic_config.GoogleCloudDiscoveryengineV1alphaServingConfigGenericConfig(
                    content_search_spec = openapi_client.models.google_cloud_discoveryengine_v1alpha_search_request_content_search_spec.GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpec(
                        extractive_content_spec = openapi_client.models.google_cloud_discoveryengine_v1alpha_search_request_content_search_spec_extractive_content_spec.GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecExtractiveContentSpec(
                            max_extractive_answer_count = 56, 
                            max_extractive_segment_count = 56, 
                            num_next_segments = 56, 
                            num_previous_segments = 56, ), 
                        snippet_spec = openapi_client.models.google_cloud_discoveryengine_v1alpha_search_request_content_search_spec_snippet_spec.GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSnippetSpec(
                            max_snippet_count = 56, 
                            reference_only = True, 
                            return_snippet = True, ), 
                        summary_spec = openapi_client.models.google_cloud_discoveryengine_v1alpha_search_request_content_search_spec_summary_spec.GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpec(
                            ignore_adversarial_query = True, 
                            ignore_non_summary_seeking_query = True, 
                            include_citations = True, 
                            language_code = '', 
                            model_prompt_spec = openapi_client.models.google_cloud_discoveryengine_v1alpha_search_request_content_search_spec_summary_spec_model_prompt_spec.GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpecModelPromptSpec(
                                preamble = '', ), 
                            model_spec = openapi_client.models.google_cloud_discoveryengine_v1alpha_search_request_content_search_spec_summary_spec_model_spec.GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpecModelSpec(
                                version = '', ), 
                            summary_result_count = 56, ), ), ),
                guided_search_spec = openapi_client.models.google_cloud_discoveryengine_v1alpha_guided_search_spec.GoogleCloudDiscoveryengineV1alphaGuidedSearchSpec(
                    enable_refinement_attributes = True, 
                    enable_related_questions = True, 
                    max_related_questions = 56, ),
                ignore_control_ids = [
                    ''
                    ],
                media_config = openapi_client.models.google_cloud_discoveryengine_v1alpha_serving_config_media_config.GoogleCloudDiscoveryengineV1alphaServingConfigMediaConfig(
                    content_freshness_cutoff_days = 56, 
                    content_watched_minutes_threshold = 1.337, 
                    content_watched_percentage_threshold = 1.337, 
                    content_watched_seconds_threshold = 1.337, 
                    demotion_event_type = '', ),
                model_id = '',
                name = '',
                oneway_synonyms_control_ids = [
                    ''
                    ],
                ranking_expression = '',
                redirect_control_ids = [
                    ''
                    ],
                replacement_control_ids = [
                    ''
                    ],
                solution_type = 'SOLUTION_TYPE_UNSPECIFIED',
                synonyms_control_ids = [
                    ''
                    ],
                update_time = ''
            )
        else:
            return GoogleCloudDiscoveryengineV1alphaServingConfig(
        )
        """

    def testGoogleCloudDiscoveryengineV1alphaServingConfig(self):
        """Test GoogleCloudDiscoveryengineV1alphaServingConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

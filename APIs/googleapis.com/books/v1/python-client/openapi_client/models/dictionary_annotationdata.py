# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.dictlayerdata import Dictlayerdata
from typing import Optional, Set
from typing_extensions import Self

class DictionaryAnnotationdata(BaseModel):
    """
    DictionaryAnnotationdata
    """ # noqa: E501
    annotation_type: Optional[StrictStr] = Field(default=None, description="The type of annotation this data is for.", alias="annotationType")
    data: Optional[Dictlayerdata] = None
    encoded_data: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Base64 encoded data for this annotation data.", alias="encodedData")
    id: Optional[StrictStr] = Field(default=None, description="Unique id for this annotation data.")
    kind: Optional[StrictStr] = Field(default=None, description="Resource Type")
    layer_id: Optional[StrictStr] = Field(default=None, description="The Layer id for this data. *", alias="layerId")
    self_link: Optional[StrictStr] = Field(default=None, description="URL for this resource. *", alias="selfLink")
    updated: Optional[StrictStr] = Field(default=None, description="Timestamp for the last time this data was updated. (RFC 3339 UTC date-time format).")
    volume_id: Optional[StrictStr] = Field(default=None, description="The volume id for this data. *", alias="volumeId")
    __properties: ClassVar[List[str]] = ["annotationType", "data", "encodedData", "id", "kind", "layerId", "selfLink", "updated", "volumeId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DictionaryAnnotationdata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DictionaryAnnotationdata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotationType": obj.get("annotationType"),
            "data": Dictlayerdata.from_dict(obj["data"]) if obj.get("data") is not None else None,
            "encodedData": obj.get("encodedData"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "layerId": obj.get("layerId"),
            "selfLink": obj.get("selfLink"),
            "updated": obj.get("updated"),
            "volumeId": obj.get("volumeId")
        })
        return _obj



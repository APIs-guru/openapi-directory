# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dictlayerdata_dict_words_inner_derivatives_inner import DictlayerdataDictWordsInnerDerivativesInner
from openapi_client.models.dictlayerdata_dict_words_inner_derivatives_inner_source import DictlayerdataDictWordsInnerDerivativesInnerSource
from openapi_client.models.dictlayerdata_dict_words_inner_senses_inner_conjugations_inner import DictlayerdataDictWordsInnerSensesInnerConjugationsInner
from openapi_client.models.dictlayerdata_dict_words_inner_senses_inner_definitions_inner import DictlayerdataDictWordsInnerSensesInnerDefinitionsInner
from typing import Optional, Set
from typing_extensions import Self

class DictlayerdataDictWordsInnerSensesInner(BaseModel):
    """
    DictlayerdataDictWordsInnerSensesInner
    """ # noqa: E501
    conjugations: Optional[List[DictlayerdataDictWordsInnerSensesInnerConjugationsInner]] = None
    definitions: Optional[List[DictlayerdataDictWordsInnerSensesInnerDefinitionsInner]] = None
    part_of_speech: Optional[StrictStr] = Field(default=None, alias="partOfSpeech")
    pronunciation: Optional[StrictStr] = None
    pronunciation_url: Optional[StrictStr] = Field(default=None, alias="pronunciationUrl")
    source: Optional[DictlayerdataDictWordsInnerDerivativesInnerSource] = None
    syllabification: Optional[StrictStr] = None
    synonyms: Optional[List[DictlayerdataDictWordsInnerDerivativesInner]] = None
    __properties: ClassVar[List[str]] = ["conjugations", "definitions", "partOfSpeech", "pronunciation", "pronunciationUrl", "source", "syllabification", "synonyms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DictlayerdataDictWordsInnerSensesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conjugations (list)
        _items = []
        if self.conjugations:
            for _item_conjugations in self.conjugations:
                if _item_conjugations:
                    _items.append(_item_conjugations.to_dict())
            _dict['conjugations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in definitions (list)
        _items = []
        if self.definitions:
            for _item_definitions in self.definitions:
                if _item_definitions:
                    _items.append(_item_definitions.to_dict())
            _dict['definitions'] = _items
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in synonyms (list)
        _items = []
        if self.synonyms:
            for _item_synonyms in self.synonyms:
                if _item_synonyms:
                    _items.append(_item_synonyms.to_dict())
            _dict['synonyms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DictlayerdataDictWordsInnerSensesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conjugations": [DictlayerdataDictWordsInnerSensesInnerConjugationsInner.from_dict(_item) for _item in obj["conjugations"]] if obj.get("conjugations") is not None else None,
            "definitions": [DictlayerdataDictWordsInnerSensesInnerDefinitionsInner.from_dict(_item) for _item in obj["definitions"]] if obj.get("definitions") is not None else None,
            "partOfSpeech": obj.get("partOfSpeech"),
            "pronunciation": obj.get("pronunciation"),
            "pronunciationUrl": obj.get("pronunciationUrl"),
            "source": DictlayerdataDictWordsInnerDerivativesInnerSource.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "syllabification": obj.get("syllabification"),
            "synonyms": [DictlayerdataDictWordsInnerDerivativesInner.from_dict(_item) for _item in obj["synonyms"]] if obj.get("synonyms") is not None else None
        })
        return _obj



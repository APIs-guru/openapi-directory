# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.series_series_inner_series_subscription_release_info import SeriesSeriesInnerSeriesSubscriptionReleaseInfo
from typing import Optional, Set
from typing_extensions import Self

class SeriesSeriesInner(BaseModel):
    """
    SeriesSeriesInner
    """ # noqa: E501
    banner_image_url: Optional[StrictStr] = Field(default=None, alias="bannerImageUrl")
    eligible_for_subscription: Optional[StrictBool] = Field(default=None, alias="eligibleForSubscription")
    image_url: Optional[StrictStr] = Field(default=None, alias="imageUrl")
    is_complete: Optional[StrictBool] = Field(default=None, alias="isComplete")
    series_format_type: Optional[StrictStr] = Field(default=None, alias="seriesFormatType")
    series_id: Optional[StrictStr] = Field(default=None, alias="seriesId")
    series_subscription_release_info: Optional[SeriesSeriesInnerSeriesSubscriptionReleaseInfo] = Field(default=None, alias="seriesSubscriptionReleaseInfo")
    series_type: Optional[StrictStr] = Field(default=None, alias="seriesType")
    subscription_id: Optional[StrictStr] = Field(default=None, alias="subscriptionId")
    title: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["bannerImageUrl", "eligibleForSubscription", "imageUrl", "isComplete", "seriesFormatType", "seriesId", "seriesSubscriptionReleaseInfo", "seriesType", "subscriptionId", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SeriesSeriesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of series_subscription_release_info
        if self.series_subscription_release_info:
            _dict['seriesSubscriptionReleaseInfo'] = self.series_subscription_release_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SeriesSeriesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bannerImageUrl": obj.get("bannerImageUrl"),
            "eligibleForSubscription": obj.get("eligibleForSubscription"),
            "imageUrl": obj.get("imageUrl"),
            "isComplete": obj.get("isComplete"),
            "seriesFormatType": obj.get("seriesFormatType"),
            "seriesId": obj.get("seriesId"),
            "seriesSubscriptionReleaseInfo": SeriesSeriesInnerSeriesSubscriptionReleaseInfo.from_dict(obj["seriesSubscriptionReleaseInfo"]) if obj.get("seriesSubscriptionReleaseInfo") is not None else None,
            "seriesType": obj.get("seriesType"),
            "subscriptionId": obj.get("subscriptionId"),
            "title": obj.get("title")
        })
        return _obj



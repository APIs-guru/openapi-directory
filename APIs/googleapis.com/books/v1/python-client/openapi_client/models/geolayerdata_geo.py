# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.geolayerdata_geo_viewport import GeolayerdataGeoViewport
from typing import Optional, Set
from typing_extensions import Self

class GeolayerdataGeo(BaseModel):
    """
    GeolayerdataGeo
    """ # noqa: E501
    boundary: Optional[List[StrictStr]] = Field(default=None, description="The boundary of the location as a set of loops containing pairs of latitude, longitude coordinates.")
    cache_policy: Optional[StrictStr] = Field(default=None, description="The cache policy active for this data. EX: UNRESTRICTED, RESTRICTED, NEVER", alias="cachePolicy")
    country_code: Optional[StrictStr] = Field(default=None, description="The country code of the location.", alias="countryCode")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The latitude of the location.")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The longitude of the location.")
    map_type: Optional[StrictStr] = Field(default=None, description="The type of map that should be used for this location. EX: HYBRID, ROADMAP, SATELLITE, TERRAIN", alias="mapType")
    viewport: Optional[GeolayerdataGeoViewport] = None
    zoom: Optional[StrictInt] = Field(default=None, description="The Zoom level to use for the map. Zoom levels between 0 (the lowest zoom level, in which the entire world can be seen on one map) to 21+ (down to individual buildings). See: https: //developers.google.com/maps/documentation/staticmaps/#Zoomlevels")
    __properties: ClassVar[List[str]] = ["boundary", "cachePolicy", "countryCode", "latitude", "longitude", "mapType", "viewport", "zoom"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GeolayerdataGeo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of viewport
        if self.viewport:
            _dict['viewport'] = self.viewport.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GeolayerdataGeo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boundary": obj.get("boundary"),
            "cachePolicy": obj.get("cachePolicy"),
            "countryCode": obj.get("countryCode"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "mapType": obj.get("mapType"),
            "viewport": GeolayerdataGeoViewport.from_dict(obj["viewport"]) if obj.get("viewport") is not None else None,
            "zoom": obj.get("zoom")
        })
        return _obj



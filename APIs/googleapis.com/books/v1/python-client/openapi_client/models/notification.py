# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Notification(BaseModel):
    """
    Notification
    """ # noqa: E501
    body: Optional[StrictStr] = None
    crm_experiment_ids: Optional[List[StrictStr]] = Field(default=None, description="The list of crm experiment ids.", alias="crmExperimentIds")
    doc_id: Optional[StrictStr] = None
    doc_type: Optional[StrictStr] = None
    dont_show_notification: Optional[StrictBool] = None
    icon_url: Optional[StrictStr] = Field(default=None, alias="iconUrl")
    is_document_mature: Optional[StrictBool] = None
    kind: Optional[StrictStr] = Field(default=None, description="Resource type.")
    notification_group: Optional[StrictStr] = Field(default=None, alias="notificationGroup")
    notification_type: Optional[StrictStr] = None
    pcampaign_id: Optional[StrictStr] = None
    reason: Optional[StrictStr] = None
    show_notification_settings_action: Optional[StrictBool] = None
    target_url: Optional[StrictStr] = Field(default=None, alias="targetUrl")
    time_to_expire_ms: Optional[StrictStr] = Field(default=None, alias="timeToExpireMs")
    title: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["body", "crmExperimentIds", "doc_id", "doc_type", "dont_show_notification", "iconUrl", "is_document_mature", "kind", "notificationGroup", "notification_type", "pcampaign_id", "reason", "show_notification_settings_action", "targetUrl", "timeToExpireMs", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Notification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Notification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "body": obj.get("body"),
            "crmExperimentIds": obj.get("crmExperimentIds"),
            "doc_id": obj.get("doc_id"),
            "doc_type": obj.get("doc_type"),
            "dont_show_notification": obj.get("dont_show_notification"),
            "iconUrl": obj.get("iconUrl"),
            "is_document_mature": obj.get("is_document_mature"),
            "kind": obj.get("kind"),
            "notificationGroup": obj.get("notificationGroup"),
            "notification_type": obj.get("notification_type"),
            "pcampaign_id": obj.get("pcampaign_id"),
            "reason": obj.get("reason"),
            "show_notification_settings_action": obj.get("show_notification_settings_action"),
            "targetUrl": obj.get("targetUrl"),
            "timeToExpireMs": obj.get("timeToExpireMs"),
            "title": obj.get("title")
        })
        return _obj



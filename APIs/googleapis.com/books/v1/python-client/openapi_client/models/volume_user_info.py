# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.reading_position import ReadingPosition
from openapi_client.models.review import Review
from openapi_client.models.volume_user_info_copy import VolumeUserInfoCopy
from openapi_client.models.volume_user_info_family_sharing import VolumeUserInfoFamilySharing
from openapi_client.models.volume_user_info_rental_period import VolumeUserInfoRentalPeriod
from openapi_client.models.volume_user_info_user_uploaded_volume_info import VolumeUserInfoUserUploadedVolumeInfo
from typing import Optional, Set
from typing_extensions import Self

class VolumeUserInfo(BaseModel):
    """
    User specific information related to this volume. (e.g. page this user last read or whether they purchased this book)
    """ # noqa: E501
    acquired_time: Optional[StrictStr] = Field(default=None, description="Timestamp when this volume was acquired by the user. (RFC 3339 UTC date-time format) Acquiring includes purchase, user upload, receiving family sharing, etc.", alias="acquiredTime")
    acquisition_type: Optional[StrictInt] = Field(default=None, description="How this volume was acquired.", alias="acquisitionType")
    copy: Optional[VolumeUserInfoCopy] = None
    entitlement_type: Optional[StrictInt] = Field(default=None, description="Whether this volume is purchased, sample, pd download etc.", alias="entitlementType")
    family_sharing: Optional[VolumeUserInfoFamilySharing] = Field(default=None, alias="familySharing")
    is_family_shared_from_user: Optional[StrictBool] = Field(default=None, description="Whether or not the user shared this volume with the family.", alias="isFamilySharedFromUser")
    is_family_shared_to_user: Optional[StrictBool] = Field(default=None, description="Whether or not the user received this volume through family sharing.", alias="isFamilySharedToUser")
    is_family_sharing_allowed: Optional[StrictBool] = Field(default=None, description="Deprecated: Replaced by familySharing.", alias="isFamilySharingAllowed")
    is_family_sharing_disabled_by_fop: Optional[StrictBool] = Field(default=None, description="Deprecated: Replaced by familySharing.", alias="isFamilySharingDisabledByFop")
    is_in_my_books: Optional[StrictBool] = Field(default=None, description="Whether or not this volume is currently in \"my books.\"", alias="isInMyBooks")
    is_preordered: Optional[StrictBool] = Field(default=None, description="Whether or not this volume was pre-ordered by the authenticated user making the request. (In LITE projection.)", alias="isPreordered")
    is_purchased: Optional[StrictBool] = Field(default=None, description="Whether or not this volume was purchased by the authenticated user making the request. (In LITE projection.)", alias="isPurchased")
    is_uploaded: Optional[StrictBool] = Field(default=None, description="Whether or not this volume was user uploaded.", alias="isUploaded")
    reading_position: Optional[ReadingPosition] = Field(default=None, alias="readingPosition")
    rental_period: Optional[VolumeUserInfoRentalPeriod] = Field(default=None, alias="rentalPeriod")
    rental_state: Optional[StrictStr] = Field(default=None, description="Whether this book is an active or an expired rental.", alias="rentalState")
    review: Optional[Review] = None
    updated: Optional[StrictStr] = Field(default=None, description="Timestamp when this volume was last modified by a user action, such as a reading position update, volume purchase or writing a review. (RFC 3339 UTC date-time format).")
    user_uploaded_volume_info: Optional[VolumeUserInfoUserUploadedVolumeInfo] = Field(default=None, alias="userUploadedVolumeInfo")
    __properties: ClassVar[List[str]] = ["acquiredTime", "acquisitionType", "copy", "entitlementType", "familySharing", "isFamilySharedFromUser", "isFamilySharedToUser", "isFamilySharingAllowed", "isFamilySharingDisabledByFop", "isInMyBooks", "isPreordered", "isPurchased", "isUploaded", "readingPosition", "rentalPeriod", "rentalState", "review", "updated", "userUploadedVolumeInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VolumeUserInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of copy
        if self.copy:
            _dict['copy'] = self.copy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of family_sharing
        if self.family_sharing:
            _dict['familySharing'] = self.family_sharing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reading_position
        if self.reading_position:
            _dict['readingPosition'] = self.reading_position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rental_period
        if self.rental_period:
            _dict['rentalPeriod'] = self.rental_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of review
        if self.review:
            _dict['review'] = self.review.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_uploaded_volume_info
        if self.user_uploaded_volume_info:
            _dict['userUploadedVolumeInfo'] = self.user_uploaded_volume_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VolumeUserInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acquiredTime": obj.get("acquiredTime"),
            "acquisitionType": obj.get("acquisitionType"),
            "copy": VolumeUserInfoCopy.from_dict(obj["copy"]) if obj.get("copy") is not None else None,
            "entitlementType": obj.get("entitlementType"),
            "familySharing": VolumeUserInfoFamilySharing.from_dict(obj["familySharing"]) if obj.get("familySharing") is not None else None,
            "isFamilySharedFromUser": obj.get("isFamilySharedFromUser"),
            "isFamilySharedToUser": obj.get("isFamilySharedToUser"),
            "isFamilySharingAllowed": obj.get("isFamilySharingAllowed"),
            "isFamilySharingDisabledByFop": obj.get("isFamilySharingDisabledByFop"),
            "isInMyBooks": obj.get("isInMyBooks"),
            "isPreordered": obj.get("isPreordered"),
            "isPurchased": obj.get("isPurchased"),
            "isUploaded": obj.get("isUploaded"),
            "readingPosition": ReadingPosition.from_dict(obj["readingPosition"]) if obj.get("readingPosition") is not None else None,
            "rentalPeriod": VolumeUserInfoRentalPeriod.from_dict(obj["rentalPeriod"]) if obj.get("rentalPeriod") is not None else None,
            "rentalState": obj.get("rentalState"),
            "review": Review.from_dict(obj["review"]) if obj.get("review") is not None else None,
            "updated": obj.get("updated"),
            "userUploadedVolumeInfo": VolumeUserInfoUserUploadedVolumeInfo.from_dict(obj["userUploadedVolumeInfo"]) if obj.get("userUploadedVolumeInfo") is not None else None
        })
        return _obj



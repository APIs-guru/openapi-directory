# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.volume_volume_info_dimensions import VolumeVolumeInfoDimensions
from openapi_client.models.volume_volume_info_image_links import VolumeVolumeInfoImageLinks
from openapi_client.models.volume_volume_info_industry_identifiers_inner import VolumeVolumeInfoIndustryIdentifiersInner
from openapi_client.models.volume_volume_info_panelization_summary import VolumeVolumeInfoPanelizationSummary
from openapi_client.models.volume_volume_info_reading_modes import VolumeVolumeInfoReadingModes
from openapi_client.models.volumeseriesinfo import Volumeseriesinfo
from typing import Optional, Set
from typing_extensions import Self

class VolumeVolumeInfo(BaseModel):
    """
    General volume information.
    """ # noqa: E501
    allow_anon_logging: Optional[StrictBool] = Field(default=None, description="Whether anonymous logging should be allowed.", alias="allowAnonLogging")
    authors: Optional[List[StrictStr]] = Field(default=None, description="The names of the authors and/or editors for this volume. (In LITE projection)")
    average_rating: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The mean review rating for this volume. (min = 1.0, max = 5.0)", alias="averageRating")
    canonical_volume_link: Optional[StrictStr] = Field(default=None, description="Canonical URL for a volume. (In LITE projection.)", alias="canonicalVolumeLink")
    categories: Optional[List[StrictStr]] = Field(default=None, description="A list of subject categories, such as \"Fiction\", \"Suspense\", etc.")
    comics_content: Optional[StrictBool] = Field(default=None, description="Whether the volume has comics content.", alias="comicsContent")
    content_version: Optional[StrictStr] = Field(default=None, description="An identifier for the version of the volume content (text & images). (In LITE projection)", alias="contentVersion")
    description: Optional[StrictStr] = Field(default=None, description="A synopsis of the volume. The text of the description is formatted in HTML and includes simple formatting elements, such as b, i, and br tags. (In LITE projection.)")
    dimensions: Optional[VolumeVolumeInfoDimensions] = None
    image_links: Optional[VolumeVolumeInfoImageLinks] = Field(default=None, alias="imageLinks")
    industry_identifiers: Optional[List[VolumeVolumeInfoIndustryIdentifiersInner]] = Field(default=None, description="Industry standard identifiers for this volume.", alias="industryIdentifiers")
    info_link: Optional[StrictStr] = Field(default=None, description="URL to view information about this volume on the Google Books site. (In LITE projection)", alias="infoLink")
    language: Optional[StrictStr] = Field(default=None, description="Best language for this volume (based on content). It is the two-letter ISO 639-1 code such as 'fr', 'en', etc.")
    main_category: Optional[StrictStr] = Field(default=None, description="The main category to which this volume belongs. It will be the category from the categories list returned below that has the highest weight.", alias="mainCategory")
    maturity_rating: Optional[StrictStr] = Field(default=None, alias="maturityRating")
    page_count: Optional[StrictInt] = Field(default=None, description="Total number of pages as per publisher metadata.", alias="pageCount")
    panelization_summary: Optional[VolumeVolumeInfoPanelizationSummary] = Field(default=None, alias="panelizationSummary")
    preview_link: Optional[StrictStr] = Field(default=None, description="URL to preview this volume on the Google Books site.", alias="previewLink")
    print_type: Optional[StrictStr] = Field(default=None, description="Type of publication of this volume. Possible values are BOOK or MAGAZINE.", alias="printType")
    printed_page_count: Optional[StrictInt] = Field(default=None, description="Total number of printed pages in generated pdf representation.", alias="printedPageCount")
    published_date: Optional[StrictStr] = Field(default=None, description="Date of publication. (In LITE projection.)", alias="publishedDate")
    publisher: Optional[StrictStr] = Field(default=None, description="Publisher of this volume. (In LITE projection.)")
    ratings_count: Optional[StrictInt] = Field(default=None, description="The number of review ratings for this volume.", alias="ratingsCount")
    reading_modes: Optional[VolumeVolumeInfoReadingModes] = Field(default=None, alias="readingModes")
    sample_page_count: Optional[StrictInt] = Field(default=None, description="Total number of sample pages as per publisher metadata.", alias="samplePageCount")
    series_info: Optional[Volumeseriesinfo] = Field(default=None, alias="seriesInfo")
    subtitle: Optional[StrictStr] = Field(default=None, description="Volume subtitle. (In LITE projection.)")
    title: Optional[StrictStr] = Field(default=None, description="Volume title. (In LITE projection.)")
    __properties: ClassVar[List[str]] = ["allowAnonLogging", "authors", "averageRating", "canonicalVolumeLink", "categories", "comicsContent", "contentVersion", "description", "dimensions", "imageLinks", "industryIdentifiers", "infoLink", "language", "mainCategory", "maturityRating", "pageCount", "panelizationSummary", "previewLink", "printType", "printedPageCount", "publishedDate", "publisher", "ratingsCount", "readingModes", "samplePageCount", "seriesInfo", "subtitle", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VolumeVolumeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dimensions
        if self.dimensions:
            _dict['dimensions'] = self.dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_links
        if self.image_links:
            _dict['imageLinks'] = self.image_links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in industry_identifiers (list)
        _items = []
        if self.industry_identifiers:
            for _item_industry_identifiers in self.industry_identifiers:
                if _item_industry_identifiers:
                    _items.append(_item_industry_identifiers.to_dict())
            _dict['industryIdentifiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of panelization_summary
        if self.panelization_summary:
            _dict['panelizationSummary'] = self.panelization_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reading_modes
        if self.reading_modes:
            _dict['readingModes'] = self.reading_modes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of series_info
        if self.series_info:
            _dict['seriesInfo'] = self.series_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VolumeVolumeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowAnonLogging": obj.get("allowAnonLogging"),
            "authors": obj.get("authors"),
            "averageRating": obj.get("averageRating"),
            "canonicalVolumeLink": obj.get("canonicalVolumeLink"),
            "categories": obj.get("categories"),
            "comicsContent": obj.get("comicsContent"),
            "contentVersion": obj.get("contentVersion"),
            "description": obj.get("description"),
            "dimensions": VolumeVolumeInfoDimensions.from_dict(obj["dimensions"]) if obj.get("dimensions") is not None else None,
            "imageLinks": VolumeVolumeInfoImageLinks.from_dict(obj["imageLinks"]) if obj.get("imageLinks") is not None else None,
            "industryIdentifiers": [VolumeVolumeInfoIndustryIdentifiersInner.from_dict(_item) for _item in obj["industryIdentifiers"]] if obj.get("industryIdentifiers") is not None else None,
            "infoLink": obj.get("infoLink"),
            "language": obj.get("language"),
            "mainCategory": obj.get("mainCategory"),
            "maturityRating": obj.get("maturityRating"),
            "pageCount": obj.get("pageCount"),
            "panelizationSummary": VolumeVolumeInfoPanelizationSummary.from_dict(obj["panelizationSummary"]) if obj.get("panelizationSummary") is not None else None,
            "previewLink": obj.get("previewLink"),
            "printType": obj.get("printType"),
            "printedPageCount": obj.get("printedPageCount"),
            "publishedDate": obj.get("publishedDate"),
            "publisher": obj.get("publisher"),
            "ratingsCount": obj.get("ratingsCount"),
            "readingModes": VolumeVolumeInfoReadingModes.from_dict(obj["readingModes"]) if obj.get("readingModes") is not None else None,
            "samplePageCount": obj.get("samplePageCount"),
            "seriesInfo": Volumeseriesinfo.from_dict(obj["seriesInfo"]) if obj.get("seriesInfo") is not None else None,
            "subtitle": obj.get("subtitle"),
            "title": obj.get("title")
        })
        return _obj



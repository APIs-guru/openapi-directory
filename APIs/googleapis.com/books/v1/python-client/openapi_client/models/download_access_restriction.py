# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DownloadAccessRestriction(BaseModel):
    """
    DownloadAccessRestriction
    """ # noqa: E501
    device_allowed: Optional[StrictBool] = Field(default=None, description="If restricted, whether access is granted for this (user, device, volume).", alias="deviceAllowed")
    downloads_acquired: Optional[StrictInt] = Field(default=None, description="If restricted, the number of content download licenses already acquired (including the requesting client, if licensed).", alias="downloadsAcquired")
    just_acquired: Optional[StrictBool] = Field(default=None, description="If deviceAllowed, whether access was just acquired with this request.", alias="justAcquired")
    kind: Optional[StrictStr] = Field(default=None, description="Resource type.")
    max_download_devices: Optional[StrictInt] = Field(default=None, description="If restricted, the maximum number of content download licenses for this volume.", alias="maxDownloadDevices")
    message: Optional[StrictStr] = Field(default=None, description="Error/warning message.")
    nonce: Optional[StrictStr] = Field(default=None, description="Client nonce for verification. Download access and client-validation only.")
    reason_code: Optional[StrictStr] = Field(default=None, description="Error/warning reason code. Additional codes may be added in the future. 0 OK 100 ACCESS_DENIED_PUBLISHER_LIMIT 101 ACCESS_DENIED_LIMIT 200 WARNING_USED_LAST_ACCESS", alias="reasonCode")
    restricted: Optional[StrictBool] = Field(default=None, description="Whether this volume has any download access restrictions.")
    signature: Optional[StrictStr] = Field(default=None, description="Response signature.")
    source: Optional[StrictStr] = Field(default=None, description="Client app identifier for verification. Download access and client-validation only.")
    volume_id: Optional[StrictStr] = Field(default=None, description="Identifies the volume for which this entry applies.", alias="volumeId")
    __properties: ClassVar[List[str]] = ["deviceAllowed", "downloadsAcquired", "justAcquired", "kind", "maxDownloadDevices", "message", "nonce", "reasonCode", "restricted", "signature", "source", "volumeId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DownloadAccessRestriction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DownloadAccessRestriction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceAllowed": obj.get("deviceAllowed"),
            "downloadsAcquired": obj.get("downloadsAcquired"),
            "justAcquired": obj.get("justAcquired"),
            "kind": obj.get("kind"),
            "maxDownloadDevices": obj.get("maxDownloadDevices"),
            "message": obj.get("message"),
            "nonce": obj.get("nonce"),
            "reasonCode": obj.get("reasonCode"),
            "restricted": obj.get("restricted"),
            "signature": obj.get("signature"),
            "source": obj.get("source"),
            "volumeId": obj.get("volumeId")
        })
        return _obj



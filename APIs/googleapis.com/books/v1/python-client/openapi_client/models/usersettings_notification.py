# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.usersettings_notification_match_my_interests import UsersettingsNotificationMatchMyInterests
from typing import Optional, Set
from typing_extensions import Self

class UsersettingsNotification(BaseModel):
    """
    UsersettingsNotification
    """ # noqa: E501
    match_my_interests: Optional[UsersettingsNotificationMatchMyInterests] = Field(default=None, alias="matchMyInterests")
    more_from_authors: Optional[UsersettingsNotificationMatchMyInterests] = Field(default=None, alias="moreFromAuthors")
    more_from_series: Optional[UsersettingsNotificationMatchMyInterests] = Field(default=None, alias="moreFromSeries")
    price_drop: Optional[UsersettingsNotificationMatchMyInterests] = Field(default=None, alias="priceDrop")
    reward_expirations: Optional[UsersettingsNotificationMatchMyInterests] = Field(default=None, alias="rewardExpirations")
    __properties: ClassVar[List[str]] = ["matchMyInterests", "moreFromAuthors", "moreFromSeries", "priceDrop", "rewardExpirations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsersettingsNotification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of match_my_interests
        if self.match_my_interests:
            _dict['matchMyInterests'] = self.match_my_interests.to_dict()
        # override the default output from pydantic by calling `to_dict()` of more_from_authors
        if self.more_from_authors:
            _dict['moreFromAuthors'] = self.more_from_authors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of more_from_series
        if self.more_from_series:
            _dict['moreFromSeries'] = self.more_from_series.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_drop
        if self.price_drop:
            _dict['priceDrop'] = self.price_drop.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reward_expirations
        if self.reward_expirations:
            _dict['rewardExpirations'] = self.reward_expirations.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsersettingsNotification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "matchMyInterests": UsersettingsNotificationMatchMyInterests.from_dict(obj["matchMyInterests"]) if obj.get("matchMyInterests") is not None else None,
            "moreFromAuthors": UsersettingsNotificationMatchMyInterests.from_dict(obj["moreFromAuthors"]) if obj.get("moreFromAuthors") is not None else None,
            "moreFromSeries": UsersettingsNotificationMatchMyInterests.from_dict(obj["moreFromSeries"]) if obj.get("moreFromSeries") is not None else None,
            "priceDrop": UsersettingsNotificationMatchMyInterests.from_dict(obj["priceDrop"]) if obj.get("priceDrop") is not None else None,
            "rewardExpirations": UsersettingsNotificationMatchMyInterests.from_dict(obj["rewardExpirations"]) if obj.get("rewardExpirations") is not None else None
        })
        return _obj



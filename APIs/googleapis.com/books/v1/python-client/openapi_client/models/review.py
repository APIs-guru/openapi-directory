# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.review_author import ReviewAuthor
from openapi_client.models.review_source import ReviewSource
from typing import Optional, Set
from typing_extensions import Self

class Review(BaseModel):
    """
    Review
    """ # noqa: E501
    author: Optional[ReviewAuthor] = None
    content: Optional[StrictStr] = Field(default=None, description="Review text.")
    var_date: Optional[StrictStr] = Field(default=None, description="Date of this review.", alias="date")
    full_text_url: Optional[StrictStr] = Field(default=None, description="URL for the full review text, for reviews gathered from the web.", alias="fullTextUrl")
    kind: Optional[StrictStr] = Field(default=None, description="Resource type for a review.")
    rating: Optional[StrictStr] = Field(default=None, description="Star rating for this review. Possible values are ONE, TWO, THREE, FOUR, FIVE or NOT_RATED.")
    source: Optional[ReviewSource] = None
    title: Optional[StrictStr] = Field(default=None, description="Title for this review.")
    type: Optional[StrictStr] = Field(default=None, description="Source type for this review. Possible values are EDITORIAL, WEB_USER or GOOGLE_USER.")
    volume_id: Optional[StrictStr] = Field(default=None, description="Volume that this review is for.", alias="volumeId")
    __properties: ClassVar[List[str]] = ["author", "content", "date", "fullTextUrl", "kind", "rating", "source", "title", "type", "volumeId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Review from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Review from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": ReviewAuthor.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "content": obj.get("content"),
            "date": obj.get("date"),
            "fullTextUrl": obj.get("fullTextUrl"),
            "kind": obj.get("kind"),
            "rating": obj.get("rating"),
            "source": ReviewSource.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "title": obj.get("title"),
            "type": obj.get("type"),
            "volumeId": obj.get("volumeId")
        })
        return _obj



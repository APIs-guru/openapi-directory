# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.volume_access_info import VolumeAccessInfo
from openapi_client.models.volume_layer_info import VolumeLayerInfo
from openapi_client.models.volume_recommended_info import VolumeRecommendedInfo
from openapi_client.models.volume_sale_info import VolumeSaleInfo
from openapi_client.models.volume_search_info import VolumeSearchInfo
from openapi_client.models.volume_user_info import VolumeUserInfo
from openapi_client.models.volume_volume_info import VolumeVolumeInfo
from typing import Optional, Set
from typing_extensions import Self

class Volume(BaseModel):
    """
    Volume
    """ # noqa: E501
    access_info: Optional[VolumeAccessInfo] = Field(default=None, alias="accessInfo")
    etag: Optional[StrictStr] = Field(default=None, description="Opaque identifier for a specific version of a volume resource. (In LITE projection)")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for a volume. (In LITE projection.)")
    kind: Optional[StrictStr] = Field(default=None, description="Resource type for a volume. (In LITE projection.)")
    layer_info: Optional[VolumeLayerInfo] = Field(default=None, alias="layerInfo")
    recommended_info: Optional[VolumeRecommendedInfo] = Field(default=None, alias="recommendedInfo")
    sale_info: Optional[VolumeSaleInfo] = Field(default=None, alias="saleInfo")
    search_info: Optional[VolumeSearchInfo] = Field(default=None, alias="searchInfo")
    self_link: Optional[StrictStr] = Field(default=None, description="URL to this resource. (In LITE projection.)", alias="selfLink")
    user_info: Optional[VolumeUserInfo] = Field(default=None, alias="userInfo")
    volume_info: Optional[VolumeVolumeInfo] = Field(default=None, alias="volumeInfo")
    __properties: ClassVar[List[str]] = ["accessInfo", "etag", "id", "kind", "layerInfo", "recommendedInfo", "saleInfo", "searchInfo", "selfLink", "userInfo", "volumeInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Volume from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_info
        if self.access_info:
            _dict['accessInfo'] = self.access_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of layer_info
        if self.layer_info:
            _dict['layerInfo'] = self.layer_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recommended_info
        if self.recommended_info:
            _dict['recommendedInfo'] = self.recommended_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sale_info
        if self.sale_info:
            _dict['saleInfo'] = self.sale_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of search_info
        if self.search_info:
            _dict['searchInfo'] = self.search_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_info
        if self.user_info:
            _dict['userInfo'] = self.user_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of volume_info
        if self.volume_info:
            _dict['volumeInfo'] = self.volume_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Volume from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessInfo": VolumeAccessInfo.from_dict(obj["accessInfo"]) if obj.get("accessInfo") is not None else None,
            "etag": obj.get("etag"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "layerInfo": VolumeLayerInfo.from_dict(obj["layerInfo"]) if obj.get("layerInfo") is not None else None,
            "recommendedInfo": VolumeRecommendedInfo.from_dict(obj["recommendedInfo"]) if obj.get("recommendedInfo") is not None else None,
            "saleInfo": VolumeSaleInfo.from_dict(obj["saleInfo"]) if obj.get("saleInfo") is not None else None,
            "searchInfo": VolumeSearchInfo.from_dict(obj["searchInfo"]) if obj.get("searchInfo") is not None else None,
            "selfLink": obj.get("selfLink"),
            "userInfo": VolumeUserInfo.from_dict(obj["userInfo"]) if obj.get("userInfo") is not None else None,
            "volumeInfo": VolumeVolumeInfo.from_dict(obj["volumeInfo"]) if obj.get("volumeInfo") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.volume_sale_info_list_price import VolumeSaleInfoListPrice
from openapi_client.models.volume_sale_info_offers_inner import VolumeSaleInfoOffersInner
from openapi_client.models.volume_sale_info_retail_price import VolumeSaleInfoRetailPrice
from typing import Optional, Set
from typing_extensions import Self

class VolumeSaleInfo(BaseModel):
    """
    Any information about a volume related to the eBookstore and/or purchaseability. This information can depend on the country where the request originates from (i.e. books may not be for sale in certain countries).
    """ # noqa: E501
    buy_link: Optional[StrictStr] = Field(default=None, description="URL to purchase this volume on the Google Books site. (In LITE projection)", alias="buyLink")
    country: Optional[StrictStr] = Field(default=None, description="The two-letter ISO_3166-1 country code for which this sale information is valid. (In LITE projection.)")
    is_ebook: Optional[StrictBool] = Field(default=None, description="Whether or not this volume is an eBook (can be added to the My eBooks shelf).", alias="isEbook")
    list_price: Optional[VolumeSaleInfoListPrice] = Field(default=None, alias="listPrice")
    offers: Optional[List[VolumeSaleInfoOffersInner]] = Field(default=None, description="Offers available for this volume (sales and rentals).")
    on_sale_date: Optional[StrictStr] = Field(default=None, description="The date on which this book is available for sale.", alias="onSaleDate")
    retail_price: Optional[VolumeSaleInfoRetailPrice] = Field(default=None, alias="retailPrice")
    saleability: Optional[StrictStr] = Field(default=None, description="Whether or not this book is available for sale or offered for free in the Google eBookstore for the country listed above. Possible values are FOR_SALE, FOR_RENTAL_ONLY, FOR_SALE_AND_RENTAL, FREE, NOT_FOR_SALE, or FOR_PREORDER.")
    __properties: ClassVar[List[str]] = ["buyLink", "country", "isEbook", "listPrice", "offers", "onSaleDate", "retailPrice", "saleability"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VolumeSaleInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of list_price
        if self.list_price:
            _dict['listPrice'] = self.list_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in offers (list)
        _items = []
        if self.offers:
            for _item_offers in self.offers:
                if _item_offers:
                    _items.append(_item_offers.to_dict())
            _dict['offers'] = _items
        # override the default output from pydantic by calling `to_dict()` of retail_price
        if self.retail_price:
            _dict['retailPrice'] = self.retail_price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VolumeSaleInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buyLink": obj.get("buyLink"),
            "country": obj.get("country"),
            "isEbook": obj.get("isEbook"),
            "listPrice": VolumeSaleInfoListPrice.from_dict(obj["listPrice"]) if obj.get("listPrice") is not None else None,
            "offers": [VolumeSaleInfoOffersInner.from_dict(_item) for _item in obj["offers"]] if obj.get("offers") is not None else None,
            "onSaleDate": obj.get("onSaleDate"),
            "retailPrice": VolumeSaleInfoRetailPrice.from_dict(obj["retailPrice"]) if obj.get("retailPrice") is not None else None,
            "saleability": obj.get("saleability")
        })
        return _obj



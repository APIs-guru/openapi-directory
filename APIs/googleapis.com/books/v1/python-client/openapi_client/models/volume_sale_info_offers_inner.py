# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.volume_sale_info_offers_inner_list_price import VolumeSaleInfoOffersInnerListPrice
from openapi_client.models.volume_sale_info_offers_inner_rental_duration import VolumeSaleInfoOffersInnerRentalDuration
from openapi_client.models.volume_sale_info_offers_inner_retail_price import VolumeSaleInfoOffersInnerRetailPrice
from typing import Optional, Set
from typing_extensions import Self

class VolumeSaleInfoOffersInner(BaseModel):
    """
    VolumeSaleInfoOffersInner
    """ # noqa: E501
    finsky_offer_type: Optional[StrictInt] = Field(default=None, description="The finsky offer type (e.g., PURCHASE=0 RENTAL=3)", alias="finskyOfferType")
    giftable: Optional[StrictBool] = Field(default=None, description="Indicates whether the offer is giftable.")
    list_price: Optional[VolumeSaleInfoOffersInnerListPrice] = Field(default=None, alias="listPrice")
    rental_duration: Optional[VolumeSaleInfoOffersInnerRentalDuration] = Field(default=None, alias="rentalDuration")
    retail_price: Optional[VolumeSaleInfoOffersInnerRetailPrice] = Field(default=None, alias="retailPrice")
    __properties: ClassVar[List[str]] = ["finskyOfferType", "giftable", "listPrice", "rentalDuration", "retailPrice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VolumeSaleInfoOffersInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of list_price
        if self.list_price:
            _dict['listPrice'] = self.list_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rental_duration
        if self.rental_duration:
            _dict['rentalDuration'] = self.rental_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retail_price
        if self.retail_price:
            _dict['retailPrice'] = self.retail_price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VolumeSaleInfoOffersInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "finskyOfferType": obj.get("finskyOfferType"),
            "giftable": obj.get("giftable"),
            "listPrice": VolumeSaleInfoOffersInnerListPrice.from_dict(obj["listPrice"]) if obj.get("listPrice") is not None else None,
            "rentalDuration": VolumeSaleInfoOffersInnerRentalDuration.from_dict(obj["rentalDuration"]) if obj.get("rentalDuration") is not None else None,
            "retailPrice": VolumeSaleInfoOffersInnerRetailPrice.from_dict(obj["retailPrice"]) if obj.get("retailPrice") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.download_access_restriction import DownloadAccessRestriction
from openapi_client.models.volume_access_info_epub import VolumeAccessInfoEpub
from openapi_client.models.volume_access_info_pdf import VolumeAccessInfoPdf
from typing import Optional, Set
from typing_extensions import Self

class VolumeAccessInfo(BaseModel):
    """
    Any information about a volume related to reading or obtaining that volume text. This information can depend on country (books may be public domain in one country but not in another, e.g.).
    """ # noqa: E501
    access_view_status: Optional[StrictStr] = Field(default=None, description="Combines the access and viewability of this volume into a single status field for this user. Values can be FULL_PURCHASED, FULL_PUBLIC_DOMAIN, SAMPLE or NONE. (In LITE projection.)", alias="accessViewStatus")
    country: Optional[StrictStr] = Field(default=None, description="The two-letter ISO_3166-1 country code for which this access information is valid. (In LITE projection.)")
    download_access: Optional[DownloadAccessRestriction] = Field(default=None, alias="downloadAccess")
    drive_imported_content_link: Optional[StrictStr] = Field(default=None, description="URL to the Google Drive viewer if this volume is uploaded by the user by selecting the file from Google Drive.", alias="driveImportedContentLink")
    embeddable: Optional[StrictBool] = Field(default=None, description="Whether this volume can be embedded in a viewport using the Embedded Viewer API.")
    epub: Optional[VolumeAccessInfoEpub] = None
    explicit_offline_license_management: Optional[StrictBool] = Field(default=None, description="Whether this volume requires that the client explicitly request offline download license rather than have it done automatically when loading the content, if the client supports it.", alias="explicitOfflineLicenseManagement")
    pdf: Optional[VolumeAccessInfoPdf] = None
    public_domain: Optional[StrictBool] = Field(default=None, description="Whether or not this book is public domain in the country listed above.", alias="publicDomain")
    quote_sharing_allowed: Optional[StrictBool] = Field(default=None, description="Whether quote sharing is allowed for this volume.", alias="quoteSharingAllowed")
    text_to_speech_permission: Optional[StrictStr] = Field(default=None, description="Whether text-to-speech is permitted for this volume. Values can be ALLOWED, ALLOWED_FOR_ACCESSIBILITY, or NOT_ALLOWED.", alias="textToSpeechPermission")
    view_order_url: Optional[StrictStr] = Field(default=None, description="For ordered but not yet processed orders, we give a URL that can be used to go to the appropriate Google Wallet page.", alias="viewOrderUrl")
    viewability: Optional[StrictStr] = Field(default=None, description="The read access of a volume. Possible values are PARTIAL, ALL_PAGES, NO_PAGES or UNKNOWN. This value depends on the country listed above. A value of PARTIAL means that the publisher has allowed some portion of the volume to be viewed publicly, without purchase. This can apply to eBooks as well as non-eBooks. Public domain books will always have a value of ALL_PAGES.")
    web_reader_link: Optional[StrictStr] = Field(default=None, description="URL to read this volume on the Google Books site. Link will not allow users to read non-viewable volumes.", alias="webReaderLink")
    __properties: ClassVar[List[str]] = ["accessViewStatus", "country", "downloadAccess", "driveImportedContentLink", "embeddable", "epub", "explicitOfflineLicenseManagement", "pdf", "publicDomain", "quoteSharingAllowed", "textToSpeechPermission", "viewOrderUrl", "viewability", "webReaderLink"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VolumeAccessInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of download_access
        if self.download_access:
            _dict['downloadAccess'] = self.download_access.to_dict()
        # override the default output from pydantic by calling `to_dict()` of epub
        if self.epub:
            _dict['epub'] = self.epub.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pdf
        if self.pdf:
            _dict['pdf'] = self.pdf.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VolumeAccessInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessViewStatus": obj.get("accessViewStatus"),
            "country": obj.get("country"),
            "downloadAccess": DownloadAccessRestriction.from_dict(obj["downloadAccess"]) if obj.get("downloadAccess") is not None else None,
            "driveImportedContentLink": obj.get("driveImportedContentLink"),
            "embeddable": obj.get("embeddable"),
            "epub": VolumeAccessInfoEpub.from_dict(obj["epub"]) if obj.get("epub") is not None else None,
            "explicitOfflineLicenseManagement": obj.get("explicitOfflineLicenseManagement"),
            "pdf": VolumeAccessInfoPdf.from_dict(obj["pdf"]) if obj.get("pdf") is not None else None,
            "publicDomain": obj.get("publicDomain"),
            "quoteSharingAllowed": obj.get("quoteSharingAllowed"),
            "textToSpeechPermission": obj.get("textToSpeechPermission"),
            "viewOrderUrl": obj.get("viewOrderUrl"),
            "viewability": obj.get("viewability"),
            "webReaderLink": obj.get("webReaderLink")
        })
        return _obj



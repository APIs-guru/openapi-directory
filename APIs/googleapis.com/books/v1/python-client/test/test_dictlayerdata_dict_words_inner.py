# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.dictlayerdata_dict_words_inner import DictlayerdataDictWordsInner

class TestDictlayerdataDictWordsInner(unittest.TestCase):
    """DictlayerdataDictWordsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DictlayerdataDictWordsInner:
        """Test DictlayerdataDictWordsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DictlayerdataDictWordsInner`
        """
        model = DictlayerdataDictWordsInner()
        if include_optional:
            return DictlayerdataDictWordsInner(
                derivatives = [
                    openapi_client.models.dictlayerdata_dict_words_inner_derivatives_inner.Dictlayerdata_dict_words_inner_derivatives_inner(
                        source = openapi_client.models.dictlayerdata_dict_words_inner_derivatives_inner_source.Dictlayerdata_dict_words_inner_derivatives_inner_source(
                            attribution = '', 
                            url = '', ), 
                        text = '', )
                    ],
                examples = [
                    openapi_client.models.dictlayerdata_dict_words_inner_derivatives_inner.Dictlayerdata_dict_words_inner_derivatives_inner(
                        source = openapi_client.models.dictlayerdata_dict_words_inner_derivatives_inner_source.Dictlayerdata_dict_words_inner_derivatives_inner_source(
                            attribution = '', 
                            url = '', ), 
                        text = '', )
                    ],
                senses = [
                    openapi_client.models.dictlayerdata_dict_words_inner_senses_inner.Dictlayerdata_dict_words_inner_senses_inner(
                        conjugations = [
                            openapi_client.models.dictlayerdata_dict_words_inner_senses_inner_conjugations_inner.Dictlayerdata_dict_words_inner_senses_inner_conjugations_inner(
                                type = '', 
                                value = '', )
                            ], 
                        definitions = [
                            openapi_client.models.dictlayerdata_dict_words_inner_senses_inner_definitions_inner.Dictlayerdata_dict_words_inner_senses_inner_definitions_inner(
                                definition = '', 
                                examples = [
                                    openapi_client.models.dictlayerdata_dict_words_inner_derivatives_inner.Dictlayerdata_dict_words_inner_derivatives_inner(
                                        source = openapi_client.models.dictlayerdata_dict_words_inner_derivatives_inner_source.Dictlayerdata_dict_words_inner_derivatives_inner_source(
                                            attribution = '', 
                                            url = '', ), 
                                        text = '', )
                                    ], )
                            ], 
                        part_of_speech = '', 
                        pronunciation = '', 
                        pronunciation_url = '', 
                        source = openapi_client.models.dictlayerdata_dict_words_inner_derivatives_inner_source.Dictlayerdata_dict_words_inner_derivatives_inner_source(
                            attribution = '', 
                            url = '', ), 
                        syllabification = '', 
                        synonyms = [
                            openapi_client.models.dictlayerdata_dict_words_inner_derivatives_inner.Dictlayerdata_dict_words_inner_derivatives_inner(
                                text = '', )
                            ], )
                    ],
                source = openapi_client.models.dictlayerdata_dict_words_inner_source.Dictlayerdata_dict_words_inner_source(
                    attribution = '', 
                    url = '', )
            )
        else:
            return DictlayerdataDictWordsInner(
        )
        """

    def testDictlayerdataDictWordsInner(self):
        """Test DictlayerdataDictWordsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

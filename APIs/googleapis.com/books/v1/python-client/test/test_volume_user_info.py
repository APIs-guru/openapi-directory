# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.volume_user_info import VolumeUserInfo

class TestVolumeUserInfo(unittest.TestCase):
    """VolumeUserInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VolumeUserInfo:
        """Test VolumeUserInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VolumeUserInfo`
        """
        model = VolumeUserInfo()
        if include_optional:
            return VolumeUserInfo(
                acquired_time = '',
                acquisition_type = 56,
                copy = openapi_client.models.volume_user_info_copy.Volume_userInfo_copy(
                    allowed_character_count = 56, 
                    limit_type = '', 
                    remaining_character_count = 56, 
                    updated = '', ),
                entitlement_type = 56,
                family_sharing = openapi_client.models.volume_user_info_family_sharing.Volume_userInfo_familySharing(
                    family_role = '', 
                    is_sharing_allowed = True, 
                    is_sharing_disabled_by_fop = True, ),
                is_family_shared_from_user = True,
                is_family_shared_to_user = True,
                is_family_sharing_allowed = True,
                is_family_sharing_disabled_by_fop = True,
                is_in_my_books = True,
                is_preordered = True,
                is_purchased = True,
                is_uploaded = True,
                reading_position = openapi_client.models.reading_position.ReadingPosition(
                    epub_cfi_position = '', 
                    gb_image_position = '', 
                    gb_text_position = '', 
                    kind = '', 
                    pdf_position = '', 
                    updated = '', 
                    volume_id = '', ),
                rental_period = openapi_client.models.volume_user_info_rental_period.Volume_userInfo_rentalPeriod(
                    end_utc_sec = '', 
                    start_utc_sec = '', ),
                rental_state = '',
                review = openapi_client.models.review.Review(
                    author = openapi_client.models.review_author.Review_author(
                        display_name = '', ), 
                    content = '', 
                    date = '', 
                    full_text_url = '', 
                    kind = '', 
                    rating = '', 
                    source = openapi_client.models.review_source.Review_source(
                        description = '', 
                        extra_description = '', 
                        url = '', ), 
                    title = '', 
                    type = '', 
                    volume_id = '', ),
                updated = '',
                user_uploaded_volume_info = openapi_client.models.volume_user_info_user_uploaded_volume_info.Volume_userInfo_userUploadedVolumeInfo(
                    processing_state = '', )
            )
        else:
            return VolumeUserInfo(
        )
        """

    def testVolumeUserInfo(self):
        """Test VolumeUserInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

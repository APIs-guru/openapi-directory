# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.dictlayerdata import Dictlayerdata

class TestDictlayerdata(unittest.TestCase):
    """Dictlayerdata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Dictlayerdata:
        """Test Dictlayerdata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Dictlayerdata`
        """
        model = Dictlayerdata()
        if include_optional:
            return Dictlayerdata(
                common = openapi_client.models.dictlayerdata_common.Dictlayerdata_common(
                    title = '', ),
                dict = openapi_client.models.dictlayerdata_dict.Dictlayerdata_dict(
                    source = openapi_client.models.dictlayerdata_dict_source.Dictlayerdata_dict_source(
                        attribution = '', 
                        url = '', ), 
                    words = [
                        openapi_client.models.dictlayerdata_dict_words_inner.Dictlayerdata_dict_words_inner(
                            derivatives = [
                                openapi_client.models.dictlayerdata_dict_words_inner_derivatives_inner.Dictlayerdata_dict_words_inner_derivatives_inner(
                                    text = '', )
                                ], 
                            examples = [
                                openapi_client.models.dictlayerdata_dict_words_inner_derivatives_inner.Dictlayerdata_dict_words_inner_derivatives_inner(
                                    text = '', )
                                ], 
                            senses = [
                                openapi_client.models.dictlayerdata_dict_words_inner_senses_inner.Dictlayerdata_dict_words_inner_senses_inner(
                                    conjugations = [
                                        openapi_client.models.dictlayerdata_dict_words_inner_senses_inner_conjugations_inner.Dictlayerdata_dict_words_inner_senses_inner_conjugations_inner(
                                            type = '', 
                                            value = '', )
                                        ], 
                                    definitions = [
                                        openapi_client.models.dictlayerdata_dict_words_inner_senses_inner_definitions_inner.Dictlayerdata_dict_words_inner_senses_inner_definitions_inner(
                                            definition = '', )
                                        ], 
                                    part_of_speech = '', 
                                    pronunciation = '', 
                                    pronunciation_url = '', 
                                    syllabification = '', 
                                    synonyms = [
                                        
                                        ], )
                                ], )
                        ], ),
                kind = ''
            )
        else:
            return Dictlayerdata(
        )
        """

    def testDictlayerdata(self):
        """Test Dictlayerdata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

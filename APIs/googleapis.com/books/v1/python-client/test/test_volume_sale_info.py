# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.volume_sale_info import VolumeSaleInfo

class TestVolumeSaleInfo(unittest.TestCase):
    """VolumeSaleInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VolumeSaleInfo:
        """Test VolumeSaleInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VolumeSaleInfo`
        """
        model = VolumeSaleInfo()
        if include_optional:
            return VolumeSaleInfo(
                buy_link = '',
                country = '',
                is_ebook = True,
                list_price = openapi_client.models.volume_sale_info_list_price.Volume_saleInfo_listPrice(
                    amount = 1.337, 
                    currency_code = '', ),
                offers = [
                    openapi_client.models.volume_sale_info_offers_inner.Volume_saleInfo_offers_inner(
                        finsky_offer_type = 56, 
                        giftable = True, 
                        list_price = openapi_client.models.volume_sale_info_offers_inner_list_price.Volume_saleInfo_offers_inner_listPrice(
                            amount_in_micros = 1.337, 
                            currency_code = '', ), 
                        rental_duration = openapi_client.models.volume_sale_info_offers_inner_rental_duration.Volume_saleInfo_offers_inner_rentalDuration(
                            count = 1.337, 
                            unit = '', ), 
                        retail_price = openapi_client.models.volume_sale_info_offers_inner_retail_price.Volume_saleInfo_offers_inner_retailPrice(
                            amount_in_micros = 1.337, 
                            currency_code = '', ), )
                    ],
                on_sale_date = '',
                retail_price = openapi_client.models.volume_sale_info_retail_price.Volume_saleInfo_retailPrice(
                    amount = 1.337, 
                    currency_code = '', ),
                saleability = ''
            )
        else:
            return VolumeSaleInfo(
        )
        """

    def testVolumeSaleInfo(self):
        """Test VolumeSaleInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

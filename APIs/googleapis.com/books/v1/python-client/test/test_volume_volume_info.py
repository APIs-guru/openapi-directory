# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.volume_volume_info import VolumeVolumeInfo

class TestVolumeVolumeInfo(unittest.TestCase):
    """VolumeVolumeInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VolumeVolumeInfo:
        """Test VolumeVolumeInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VolumeVolumeInfo`
        """
        model = VolumeVolumeInfo()
        if include_optional:
            return VolumeVolumeInfo(
                allow_anon_logging = True,
                authors = [
                    ''
                    ],
                average_rating = 1.337,
                canonical_volume_link = '',
                categories = [
                    ''
                    ],
                comics_content = True,
                content_version = '',
                description = '',
                dimensions = openapi_client.models.volume_volume_info_dimensions.Volume_volumeInfo_dimensions(
                    height = '', 
                    thickness = '', 
                    width = '', ),
                image_links = openapi_client.models.volume_volume_info_image_links.Volume_volumeInfo_imageLinks(
                    extra_large = '', 
                    large = '', 
                    medium = '', 
                    small = '', 
                    small_thumbnail = '', 
                    thumbnail = '', ),
                industry_identifiers = [
                    openapi_client.models.volume_volume_info_industry_identifiers_inner.Volume_volumeInfo_industryIdentifiers_inner(
                        identifier = '', 
                        type = '', )
                    ],
                info_link = '',
                language = '',
                main_category = '',
                maturity_rating = '',
                page_count = 56,
                panelization_summary = openapi_client.models.volume_volume_info_panelization_summary.Volume_volumeInfo_panelizationSummary(
                    contains_epub_bubbles = True, 
                    contains_image_bubbles = True, 
                    epub_bubble_version = '', 
                    image_bubble_version = '', ),
                preview_link = '',
                print_type = '',
                printed_page_count = 56,
                published_date = '',
                publisher = '',
                ratings_count = 56,
                reading_modes = openapi_client.models.volume_volume_info_reading_modes.Volume_volumeInfo_readingModes(
                    image = True, 
                    text = True, ),
                sample_page_count = 56,
                series_info = openapi_client.models.volumeseriesinfo.Volumeseriesinfo(
                    book_display_number = '', 
                    kind = '', 
                    short_series_book_title = '', 
                    volume_series = [
                        openapi_client.models.volumeseriesinfo_volume_series_inner.Volumeseriesinfo_volumeSeries_inner(
                            issue = [
                                openapi_client.models.volumeseriesinfo_volume_series_inner_issue_inner.Volumeseriesinfo_volumeSeries_inner_issue_inner(
                                    issue_display_number = '', 
                                    issue_order_number = 56, )
                                ], 
                            order_number = 56, 
                            series_book_type = '', 
                            series_id = '', )
                        ], ),
                subtitle = '',
                title = ''
            )
        else:
            return VolumeVolumeInfo(
        )
        """

    def testVolumeVolumeInfo(self):
        """Test VolumeVolumeInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

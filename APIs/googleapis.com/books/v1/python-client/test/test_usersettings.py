# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.usersettings import Usersettings

class TestUsersettings(unittest.TestCase):
    """Usersettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Usersettings:
        """Test Usersettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Usersettings`
        """
        model = Usersettings()
        if include_optional:
            return Usersettings(
                kind = '',
                notes_export = openapi_client.models.usersettings_notes_export.Usersettings_notesExport(
                    folder_name = '', 
                    is_enabled = True, ),
                notification = openapi_client.models.usersettings_notification.Usersettings_notification(
                    match_my_interests = openapi_client.models.usersettings_notification_match_my_interests.Usersettings_notification_matchMyInterests(
                        opted_state = '', ), 
                    more_from_authors = openapi_client.models.usersettings_notification_match_my_interests.Usersettings_notification_matchMyInterests(
                        opted_state = '', ), 
                    more_from_series = , 
                    price_drop = , 
                    reward_expirations = , )
            )
        else:
            return Usersettings(
        )
        """

    def testUsersettings(self):
        """Test Usersettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

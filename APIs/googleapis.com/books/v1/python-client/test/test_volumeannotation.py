# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.volumeannotation import Volumeannotation

class TestVolumeannotation(unittest.TestCase):
    """Volumeannotation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Volumeannotation:
        """Test Volumeannotation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Volumeannotation`
        """
        model = Volumeannotation()
        if include_optional:
            return Volumeannotation(
                annotation_data_id = '',
                annotation_data_link = '',
                annotation_type = '',
                content_ranges = openapi_client.models.volumeannotation_content_ranges.Volumeannotation_contentRanges(
                    cfi_range = openapi_client.models.books_annotations_range.BooksAnnotationsRange(
                        end_offset = '', 
                        end_position = '', 
                        start_offset = '', 
                        start_position = '', ), 
                    content_version = '', 
                    gb_image_range = openapi_client.models.books_annotations_range.BooksAnnotationsRange(
                        end_offset = '', 
                        end_position = '', 
                        start_offset = '', 
                        start_position = '', ), 
                    gb_text_range = , ),
                data = '',
                deleted = True,
                id = '',
                kind = '',
                layer_id = '',
                page_ids = [
                    ''
                    ],
                selected_text = '',
                self_link = '',
                updated = '',
                volume_id = ''
            )
        else:
            return Volumeannotation(
        )
        """

    def testVolumeannotation(self):
        """Test Volumeannotation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

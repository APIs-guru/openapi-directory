# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.volume2 import Volume2

class TestVolume2(unittest.TestCase):
    """Volume2 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Volume2:
        """Test Volume2
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Volume2`
        """
        model = Volume2()
        if include_optional:
            return Volume2(
                items = [
                    openapi_client.models.volume.Volume(
                        access_info = openapi_client.models.volume_access_info.Volume_accessInfo(
                            access_view_status = '', 
                            country = '', 
                            download_access = openapi_client.models.download_access_restriction.DownloadAccessRestriction(
                                device_allowed = True, 
                                downloads_acquired = 56, 
                                just_acquired = True, 
                                kind = '', 
                                max_download_devices = 56, 
                                message = '', 
                                nonce = '', 
                                reason_code = '', 
                                restricted = True, 
                                signature = '', 
                                source = '', 
                                volume_id = '', ), 
                            drive_imported_content_link = '', 
                            embeddable = True, 
                            epub = openapi_client.models.volume_access_info_epub.Volume_accessInfo_epub(
                                acs_token_link = '', 
                                download_link = '', 
                                is_available = True, ), 
                            explicit_offline_license_management = True, 
                            pdf = openapi_client.models.volume_access_info_pdf.Volume_accessInfo_pdf(
                                acs_token_link = '', 
                                download_link = '', 
                                is_available = True, ), 
                            public_domain = True, 
                            quote_sharing_allowed = True, 
                            text_to_speech_permission = '', 
                            view_order_url = '', 
                            viewability = '', 
                            web_reader_link = '', ), 
                        etag = '', 
                        id = '', 
                        kind = '', 
                        layer_info = openapi_client.models.volume_layer_info.Volume_layerInfo(
                            layers = [
                                openapi_client.models.volume_layer_info_layers_inner.Volume_layerInfo_layers_inner(
                                    layer_id = '', 
                                    volume_annotations_version = '', )
                                ], ), 
                        recommended_info = openapi_client.models.volume_recommended_info.Volume_recommendedInfo(
                            explanation = '', ), 
                        sale_info = openapi_client.models.volume_sale_info.Volume_saleInfo(
                            buy_link = '', 
                            country = '', 
                            is_ebook = True, 
                            list_price = openapi_client.models.volume_sale_info_list_price.Volume_saleInfo_listPrice(
                                amount = 1.337, 
                                currency_code = '', ), 
                            offers = [
                                openapi_client.models.volume_sale_info_offers_inner.Volume_saleInfo_offers_inner(
                                    finsky_offer_type = 56, 
                                    giftable = True, 
                                    rental_duration = openapi_client.models.volume_sale_info_offers_inner_rental_duration.Volume_saleInfo_offers_inner_rentalDuration(
                                        count = 1.337, 
                                        unit = '', ), 
                                    retail_price = openapi_client.models.volume_sale_info_offers_inner_retail_price.Volume_saleInfo_offers_inner_retailPrice(
                                        amount_in_micros = 1.337, 
                                        currency_code = '', ), )
                                ], 
                            on_sale_date = '', 
                            retail_price = openapi_client.models.volume_sale_info_retail_price.Volume_saleInfo_retailPrice(
                                amount = 1.337, 
                                currency_code = '', ), 
                            saleability = '', ), 
                        search_info = openapi_client.models.volume_search_info.Volume_searchInfo(
                            text_snippet = '', ), 
                        self_link = '', 
                        user_info = openapi_client.models.volume_user_info.Volume_userInfo(
                            acquired_time = '', 
                            acquisition_type = 56, 
                            copy = openapi_client.models.volume_user_info_copy.Volume_userInfo_copy(
                                allowed_character_count = 56, 
                                limit_type = '', 
                                remaining_character_count = 56, 
                                updated = '', ), 
                            entitlement_type = 56, 
                            family_sharing = openapi_client.models.volume_user_info_family_sharing.Volume_userInfo_familySharing(
                                family_role = '', 
                                is_sharing_allowed = True, 
                                is_sharing_disabled_by_fop = True, ), 
                            is_family_shared_from_user = True, 
                            is_family_shared_to_user = True, 
                            is_family_sharing_allowed = True, 
                            is_family_sharing_disabled_by_fop = True, 
                            is_in_my_books = True, 
                            is_preordered = True, 
                            is_purchased = True, 
                            is_uploaded = True, 
                            reading_position = openapi_client.models.reading_position.ReadingPosition(
                                epub_cfi_position = '', 
                                gb_image_position = '', 
                                gb_text_position = '', 
                                kind = '', 
                                pdf_position = '', 
                                updated = '', 
                                volume_id = '', ), 
                            rental_period = openapi_client.models.volume_user_info_rental_period.Volume_userInfo_rentalPeriod(
                                end_utc_sec = '', 
                                start_utc_sec = '', ), 
                            rental_state = '', 
                            review = openapi_client.models.review.Review(
                                author = openapi_client.models.review_author.Review_author(
                                    display_name = '', ), 
                                content = '', 
                                date = '', 
                                full_text_url = '', 
                                kind = '', 
                                rating = '', 
                                source = openapi_client.models.review_source.Review_source(
                                    description = '', 
                                    extra_description = '', 
                                    url = '', ), 
                                title = '', 
                                type = '', 
                                volume_id = '', ), 
                            updated = '', 
                            user_uploaded_volume_info = openapi_client.models.volume_user_info_user_uploaded_volume_info.Volume_userInfo_userUploadedVolumeInfo(
                                processing_state = '', ), ), 
                        volume_info = openapi_client.models.volume_volume_info.Volume_volumeInfo(
                            allow_anon_logging = True, 
                            authors = [
                                ''
                                ], 
                            average_rating = 1.337, 
                            canonical_volume_link = '', 
                            categories = [
                                ''
                                ], 
                            comics_content = True, 
                            content_version = '', 
                            description = '', 
                            dimensions = openapi_client.models.volume_volume_info_dimensions.Volume_volumeInfo_dimensions(
                                height = '', 
                                thickness = '', 
                                width = '', ), 
                            image_links = openapi_client.models.volume_volume_info_image_links.Volume_volumeInfo_imageLinks(
                                extra_large = '', 
                                large = '', 
                                medium = '', 
                                small = '', 
                                small_thumbnail = '', 
                                thumbnail = '', ), 
                            industry_identifiers = [
                                openapi_client.models.volume_volume_info_industry_identifiers_inner.Volume_volumeInfo_industryIdentifiers_inner(
                                    identifier = '', 
                                    type = '', )
                                ], 
                            info_link = '', 
                            language = '', 
                            main_category = '', 
                            maturity_rating = '', 
                            page_count = 56, 
                            panelization_summary = openapi_client.models.volume_volume_info_panelization_summary.Volume_volumeInfo_panelizationSummary(
                                contains_epub_bubbles = True, 
                                contains_image_bubbles = True, 
                                epub_bubble_version = '', 
                                image_bubble_version = '', ), 
                            preview_link = '', 
                            print_type = '', 
                            printed_page_count = 56, 
                            published_date = '', 
                            publisher = '', 
                            ratings_count = 56, 
                            reading_modes = openapi_client.models.volume_volume_info_reading_modes.Volume_volumeInfo_readingModes(
                                image = True, 
                                text = True, ), 
                            sample_page_count = 56, 
                            series_info = openapi_client.models.volumeseriesinfo.Volumeseriesinfo(
                                book_display_number = '', 
                                kind = '', 
                                short_series_book_title = '', 
                                volume_series = [
                                    openapi_client.models.volumeseriesinfo_volume_series_inner.Volumeseriesinfo_volumeSeries_inner(
                                        issue = [
                                            openapi_client.models.volumeseriesinfo_volume_series_inner_issue_inner.Volumeseriesinfo_volumeSeries_inner_issue_inner(
                                                issue_display_number = '', 
                                                issue_order_number = 56, )
                                            ], 
                                        order_number = 56, 
                                        series_book_type = '', 
                                        series_id = '', )
                                    ], ), 
                            subtitle = '', 
                            title = '', ), )
                    ],
                kind = '',
                next_page_token = ''
            )
        else:
            return Volume2(
        )
        """

    def testVolume2(self):
        """Test Volume2"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

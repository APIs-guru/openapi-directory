# coding: utf-8

"""
    Books API

    The Google Books API allows clients to access the Google Books repository.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.usersettings_notification import UsersettingsNotification

class TestUsersettingsNotification(unittest.TestCase):
    """UsersettingsNotification unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UsersettingsNotification:
        """Test UsersettingsNotification
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UsersettingsNotification`
        """
        model = UsersettingsNotification()
        if include_optional:
            return UsersettingsNotification(
                match_my_interests = openapi_client.models.usersettings_notification_match_my_interests.Usersettings_notification_matchMyInterests(
                    opted_state = '', ),
                more_from_authors = openapi_client.models.usersettings_notification_match_my_interests.Usersettings_notification_matchMyInterests(
                    opted_state = '', ),
                more_from_series = openapi_client.models.usersettings_notification_match_my_interests.Usersettings_notification_matchMyInterests(
                    opted_state = '', ),
                price_drop = openapi_client.models.usersettings_notification_match_my_interests.Usersettings_notification_matchMyInterests(
                    opted_state = '', ),
                reward_expirations = openapi_client.models.usersettings_notification_match_my_interests.Usersettings_notification_matchMyInterests(
                    opted_state = '', )
            )
        else:
            return UsersettingsNotification(
        )
        """

    def testUsersettingsNotification(self):
        """Test UsersettingsNotification"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

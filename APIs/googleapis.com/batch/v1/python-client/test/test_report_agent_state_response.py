# coding: utf-8

"""
    Batch API

    An API to manage the running of batch resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.report_agent_state_response import ReportAgentStateResponse

class TestReportAgentStateResponse(unittest.TestCase):
    """ReportAgentStateResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReportAgentStateResponse:
        """Test ReportAgentStateResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReportAgentStateResponse`
        """
        model = ReportAgentStateResponse()
        if include_optional:
            return ReportAgentStateResponse(
                default_report_interval = '',
                min_report_interval = '',
                tasks = [
                    openapi_client.models.agent_task.AgentTask(
                        agent_task_spec = openapi_client.models.agent_task_spec.AgentTaskSpec(
                            environment = openapi_client.models.agent_environment.AgentEnvironment(
                                encrypted_variables = openapi_client.models.agent_kms_env_map.AgentKMSEnvMap(
                                    cipher_text = '', 
                                    key_name = '', ), 
                                secret_variables = {
                                    'key' : ''
                                    }, 
                                variables = {
                                    'key' : ''
                                    }, ), 
                            max_run_duration = '', 
                            runnables = [
                                openapi_client.models.agent_task_runnable.AgentTaskRunnable(
                                    always_run = True, 
                                    background = True, 
                                    container = openapi_client.models.agent_container.AgentContainer(
                                        commands = [
                                            ''
                                            ], 
                                        entrypoint = '', 
                                        image_uri = '', 
                                        options = '', 
                                        volumes = [
                                            ''
                                            ], ), 
                                    ignore_exit_status = True, 
                                    script = openapi_client.models.agent_script.AgentScript(
                                        path = '', 
                                        text = '', ), 
                                    timeout = '', )
                                ], 
                            user_account = openapi_client.models.agent_task_user_account.AgentTaskUserAccount(
                                gid = '', 
                                uid = '', ), ), 
                        intended_state = 'INTENDED_STATE_UNSPECIFIED', 
                        reached_barrier = '', 
                        spec = openapi_client.models.task_spec.TaskSpec(
                            compute_resource = openapi_client.models.compute_resource.ComputeResource(
                                boot_disk_mib = '', 
                                cpu_milli = '', 
                                memory_mib = '', ), 
                            environments = {
                                'key' : ''
                                }, 
                            lifecycle_policies = [
                                openapi_client.models.lifecycle_policy.LifecyclePolicy(
                                    action = 'ACTION_UNSPECIFIED', 
                                    action_condition = openapi_client.models.action_condition.ActionCondition(
                                        exit_codes = [
                                            56
                                            ], ), )
                                ], 
                            max_retry_count = 56, 
                            max_run_duration = '', ), 
                        status = openapi_client.models.task_status.TaskStatus(
                            state = 'STATE_UNSPECIFIED', 
                            status_events = [
                                openapi_client.models.status_event.StatusEvent(
                                    description = '', 
                                    event_time = '', 
                                    task_execution = openapi_client.models.task_execution.TaskExecution(
                                        exit_code = 56, ), 
                                    task_state = 'STATE_UNSPECIFIED', 
                                    type = '', )
                                ], ), 
                        task = '', 
                        task_source = 'TASK_SOURCE_UNSPECIFIED', )
                    ],
                use_batch_monitored_resource = True
            )
        else:
            return ReportAgentStateResponse(
        )
        """

    def testReportAgentStateResponse(self):
        """Test ReportAgentStateResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Batch API

    An API to manage the running of batch resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.job import Job

class TestJob(unittest.TestCase):
    """Job unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Job:
        """Test Job
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Job`
        """
        model = Job()
        if include_optional:
            return Job(
                allocation_policy = openapi_client.models.allocation_policy.AllocationPolicy(
                    instances = [
                        openapi_client.models.instance_policy_or_template.InstancePolicyOrTemplate(
                            install_gpu_drivers = True, 
                            instance_template = '', 
                            policy = openapi_client.models.instance_policy.InstancePolicy(
                                accelerators = [
                                    openapi_client.models.accelerator.Accelerator(
                                        count = '', 
                                        driver_version = '', 
                                        install_gpu_drivers = True, 
                                        type = '', )
                                    ], 
                                boot_disk = openapi_client.models.disk.Disk(
                                    disk_interface = '', 
                                    image = '', 
                                    size_gb = '', 
                                    snapshot = '', 
                                    type = '', ), 
                                disks = [
                                    openapi_client.models.attached_disk.AttachedDisk(
                                        device_name = '', 
                                        existing_disk = '', 
                                        new_disk = openapi_client.models.disk.Disk(
                                            disk_interface = '', 
                                            image = '', 
                                            size_gb = '', 
                                            snapshot = '', 
                                            type = '', ), )
                                    ], 
                                machine_type = '', 
                                min_cpu_platform = '', 
                                provisioning_model = 'PROVISIONING_MODEL_UNSPECIFIED', 
                                reservation = '', ), )
                        ], 
                    labels = {
                        'key' : ''
                        }, 
                    location = openapi_client.models.location_policy.LocationPolicy(
                        allowed_locations = [
                            ''
                            ], ), 
                    network = openapi_client.models.network_policy.NetworkPolicy(
                        network_interfaces = [
                            openapi_client.models.network_interface.NetworkInterface(
                                no_external_ip_address = True, 
                                subnetwork = '', )
                            ], ), 
                    placement = openapi_client.models.placement_policy.PlacementPolicy(
                        collocation = '', 
                        max_distance = '', ), 
                    service_account = openapi_client.models.service_account.ServiceAccount(
                        email = '', 
                        scopes = [
                            ''
                            ], ), 
                    tags = [
                        ''
                        ], ),
                create_time = '',
                labels = {
                    'key' : ''
                    },
                logs_policy = openapi_client.models.logs_policy.LogsPolicy(
                    cloud_logging_option = openapi_client.models.cloud_logging_option.CloudLoggingOption(
                        use_generic_task_monitored_resource = True, ), 
                    destination = 'DESTINATION_UNSPECIFIED', 
                    logs_path = '', ),
                name = '',
                notifications = [
                    openapi_client.models.job_notification.JobNotification(
                        message = openapi_client.models.message.Message(
                            new_job_state = 'STATE_UNSPECIFIED', 
                            new_task_state = 'STATE_UNSPECIFIED', 
                            type = 'TYPE_UNSPECIFIED', ), 
                        pubsub_topic = '', )
                    ],
                priority = '',
                status = openapi_client.models.job_status.JobStatus(
                    run_duration = '', 
                    state = 'STATE_UNSPECIFIED', 
                    status_events = [
                        openapi_client.models.status_event.StatusEvent(
                            description = '', 
                            event_time = '', 
                            task_execution = openapi_client.models.task_execution.TaskExecution(
                                exit_code = 56, ), 
                            task_state = 'STATE_UNSPECIFIED', 
                            type = '', )
                        ], 
                    task_groups = {
                        'key' : openapi_client.models.task_group_status.TaskGroupStatus(
                            counts = {
                                'key' : ''
                                }, 
                            instances = [
                                openapi_client.models.instance_status.InstanceStatus(
                                    boot_disk = openapi_client.models.disk.Disk(
                                        disk_interface = '', 
                                        image = '', 
                                        size_gb = '', 
                                        snapshot = '', 
                                        type = '', ), 
                                    machine_type = '', 
                                    provisioning_model = 'PROVISIONING_MODEL_UNSPECIFIED', 
                                    task_pack = '', )
                                ], )
                        }, ),
                task_groups = [
                    openapi_client.models.task_group.TaskGroup(
                        name = '', 
                        parallelism = '', 
                        permissive_ssh = True, 
                        require_hosts_file = True, 
                        run_as_non_root = True, 
                        scheduling_policy = 'SCHEDULING_POLICY_UNSPECIFIED', 
                        task_count = '', 
                        task_count_per_node = '', 
                        task_environments = [
                            openapi_client.models.environment.Environment(
                                encrypted_variables = openapi_client.models.kms_env_map.KMSEnvMap(
                                    cipher_text = '', 
                                    key_name = '', ), 
                                secret_variables = {
                                    'key' : ''
                                    }, 
                                variables = {
                                    'key' : ''
                                    }, )
                            ], 
                        task_spec = openapi_client.models.task_spec.TaskSpec(
                            compute_resource = openapi_client.models.compute_resource.ComputeResource(
                                boot_disk_mib = '', 
                                cpu_milli = '', 
                                memory_mib = '', ), 
                            environment = openapi_client.models.environment.Environment(), 
                            environments = {
                                'key' : ''
                                }, 
                            lifecycle_policies = [
                                openapi_client.models.lifecycle_policy.LifecyclePolicy(
                                    action = 'ACTION_UNSPECIFIED', 
                                    action_condition = openapi_client.models.action_condition.ActionCondition(
                                        exit_codes = [
                                            56
                                            ], ), )
                                ], 
                            max_retry_count = 56, 
                            max_run_duration = '', 
                            runnables = [
                                openapi_client.models.runnable.Runnable(
                                    always_run = True, 
                                    background = True, 
                                    barrier = openapi_client.models.barrier.Barrier(
                                        name = '', ), 
                                    container = openapi_client.models.container.Container(
                                        block_external_network = True, 
                                        commands = [
                                            ''
                                            ], 
                                        enable_image_streaming = True, 
                                        entrypoint = '', 
                                        image_uri = '', 
                                        options = '', 
                                        password = '', 
                                        username = '', 
                                        volumes = [
                                            ''
                                            ], ), 
                                    display_name = '', 
                                    ignore_exit_status = True, 
                                    labels = {
                                        'key' : ''
                                        }, 
                                    script = openapi_client.models.script.Script(
                                        path = '', 
                                        text = '', ), 
                                    timeout = '', )
                                ], 
                            volumes = [
                                openapi_client.models.volume.Volume(
                                    device_name = '', 
                                    gcs = openapi_client.models.gcs.GCS(
                                        remote_path = '', ), 
                                    mount_options = [
                                        ''
                                        ], 
                                    mount_path = '', 
                                    nfs = openapi_client.models.nfs.NFS(
                                        remote_path = '', 
                                        server = '', ), )
                                ], ), )
                    ],
                uid = '',
                update_time = ''
            )
        else:
            return Job(
        )
        """

    def testJob(self):
        """Test Job"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

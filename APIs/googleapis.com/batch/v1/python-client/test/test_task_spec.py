# coding: utf-8

"""
    Batch API

    An API to manage the running of batch resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.task_spec import TaskSpec

class TestTaskSpec(unittest.TestCase):
    """TaskSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TaskSpec:
        """Test TaskSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TaskSpec`
        """
        model = TaskSpec()
        if include_optional:
            return TaskSpec(
                compute_resource = openapi_client.models.compute_resource.ComputeResource(
                    boot_disk_mib = '', 
                    cpu_milli = '', 
                    memory_mib = '', ),
                environment = openapi_client.models.environment.Environment(
                    encrypted_variables = openapi_client.models.kms_env_map.KMSEnvMap(
                        cipher_text = '', 
                        key_name = '', ), 
                    secret_variables = {
                        'key' : ''
                        }, 
                    variables = {
                        'key' : ''
                        }, ),
                environments = {
                    'key' : ''
                    },
                lifecycle_policies = [
                    openapi_client.models.lifecycle_policy.LifecyclePolicy(
                        action = 'ACTION_UNSPECIFIED', 
                        action_condition = openapi_client.models.action_condition.ActionCondition(
                            exit_codes = [
                                56
                                ], ), )
                    ],
                max_retry_count = 56,
                max_run_duration = '',
                runnables = [
                    openapi_client.models.runnable.Runnable(
                        always_run = True, 
                        background = True, 
                        barrier = openapi_client.models.barrier.Barrier(
                            name = '', ), 
                        container = openapi_client.models.container.Container(
                            block_external_network = True, 
                            commands = [
                                ''
                                ], 
                            enable_image_streaming = True, 
                            entrypoint = '', 
                            image_uri = '', 
                            options = '', 
                            password = '', 
                            username = '', 
                            volumes = [
                                ''
                                ], ), 
                        display_name = '', 
                        environment = openapi_client.models.environment.Environment(
                            encrypted_variables = openapi_client.models.kms_env_map.KMSEnvMap(
                                cipher_text = '', 
                                key_name = '', ), 
                            secret_variables = {
                                'key' : ''
                                }, 
                            variables = {
                                'key' : ''
                                }, ), 
                        ignore_exit_status = True, 
                        labels = {
                            'key' : ''
                            }, 
                        script = openapi_client.models.script.Script(
                            path = '', 
                            text = '', ), 
                        timeout = '', )
                    ],
                volumes = [
                    openapi_client.models.volume.Volume(
                        device_name = '', 
                        gcs = openapi_client.models.gcs.GCS(
                            remote_path = '', ), 
                        mount_options = [
                            ''
                            ], 
                        mount_path = '', 
                        nfs = openapi_client.models.nfs.NFS(
                            remote_path = '', 
                            server = '', ), )
                    ]
            )
        else:
            return TaskSpec(
        )
        """

    def testTaskSpec(self):
        """Test TaskSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

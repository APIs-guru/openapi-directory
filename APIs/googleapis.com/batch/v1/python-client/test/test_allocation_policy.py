# coding: utf-8

"""
    Batch API

    An API to manage the running of batch resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.allocation_policy import AllocationPolicy

class TestAllocationPolicy(unittest.TestCase):
    """AllocationPolicy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AllocationPolicy:
        """Test AllocationPolicy
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AllocationPolicy`
        """
        model = AllocationPolicy()
        if include_optional:
            return AllocationPolicy(
                instances = [
                    openapi_client.models.instance_policy_or_template.InstancePolicyOrTemplate(
                        install_gpu_drivers = True, 
                        instance_template = '', 
                        policy = openapi_client.models.instance_policy.InstancePolicy(
                            accelerators = [
                                openapi_client.models.accelerator.Accelerator(
                                    count = '', 
                                    driver_version = '', 
                                    install_gpu_drivers = True, 
                                    type = '', )
                                ], 
                            boot_disk = openapi_client.models.disk.Disk(
                                disk_interface = '', 
                                image = '', 
                                size_gb = '', 
                                snapshot = '', 
                                type = '', ), 
                            disks = [
                                openapi_client.models.attached_disk.AttachedDisk(
                                    device_name = '', 
                                    existing_disk = '', 
                                    new_disk = openapi_client.models.disk.Disk(
                                        disk_interface = '', 
                                        image = '', 
                                        size_gb = '', 
                                        snapshot = '', 
                                        type = '', ), )
                                ], 
                            machine_type = '', 
                            min_cpu_platform = '', 
                            provisioning_model = 'PROVISIONING_MODEL_UNSPECIFIED', 
                            reservation = '', ), )
                    ],
                labels = {
                    'key' : ''
                    },
                location = openapi_client.models.location_policy.LocationPolicy(
                    allowed_locations = [
                        ''
                        ], ),
                network = openapi_client.models.network_policy.NetworkPolicy(
                    network_interfaces = [
                        openapi_client.models.network_interface.NetworkInterface(
                            network = '', 
                            no_external_ip_address = True, 
                            subnetwork = '', )
                        ], ),
                placement = openapi_client.models.placement_policy.PlacementPolicy(
                    collocation = '', 
                    max_distance = '', ),
                service_account = openapi_client.models.service_account.ServiceAccount(
                    email = '', 
                    scopes = [
                        ''
                        ], ),
                tags = [
                    ''
                    ]
            )
        else:
            return AllocationPolicy(
        )
        """

    def testAllocationPolicy(self):
        """Test AllocationPolicy"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

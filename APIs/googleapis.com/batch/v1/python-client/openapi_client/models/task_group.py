# coding: utf-8

"""
    Batch API

    An API to manage the running of batch resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.environment import Environment
from openapi_client.models.task_spec import TaskSpec
from typing import Optional, Set
from typing_extensions import Self

class TaskGroup(BaseModel):
    """
    A TaskGroup defines one or more Tasks that all share the same TaskSpec.
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Output only. TaskGroup name. The system generates this field based on parent Job name. For example: \"projects/123456/locations/us-west1/jobs/job01/taskGroups/group01\".")
    parallelism: Optional[StrictStr] = Field(default=None, description="Max number of tasks that can run in parallel. Default to min(task_count, parallel tasks per job limit). See: [Job Limits](https://cloud.google.com/batch/quotas#job_limits). Field parallelism must be 1 if the scheduling_policy is IN_ORDER.")
    permissive_ssh: Optional[StrictBool] = Field(default=None, description="When true, Batch will configure SSH to allow passwordless login between VMs running the Batch tasks in the same TaskGroup.", alias="permissiveSsh")
    require_hosts_file: Optional[StrictBool] = Field(default=None, description="When true, Batch will populate a file with a list of all VMs assigned to the TaskGroup and set the BATCH_HOSTS_FILE environment variable to the path of that file. Defaults to false. The host file supports up to 1000 VMs.", alias="requireHostsFile")
    run_as_non_root: Optional[StrictBool] = Field(default=None, description="Optional. If not set or set to false, Batch uses the root user to execute runnables. If set to true, Batch runs the runnables using a non-root user. Currently, the non-root user Batch used is generated by OS Login. For more information, see [About OS Login](https://cloud.google.com/compute/docs/oslogin).", alias="runAsNonRoot")
    scheduling_policy: Optional[StrictStr] = Field(default=None, description="Scheduling policy for Tasks in the TaskGroup. The default value is AS_SOON_AS_POSSIBLE.", alias="schedulingPolicy")
    task_count: Optional[StrictStr] = Field(default=None, description="Number of Tasks in the TaskGroup. Default is 1.", alias="taskCount")
    task_count_per_node: Optional[StrictStr] = Field(default=None, description="Max number of tasks that can be run on a VM at the same time. If not specified, the system will decide a value based on available compute resources on a VM and task requirements.", alias="taskCountPerNode")
    task_environments: Optional[List[Environment]] = Field(default=None, description="An array of environment variable mappings, which are passed to Tasks with matching indices. If task_environments is used then task_count should not be specified in the request (and will be ignored). Task count will be the length of task_environments. Tasks get a BATCH_TASK_INDEX and BATCH_TASK_COUNT environment variable, in addition to any environment variables set in task_environments, specifying the number of Tasks in the Task's parent TaskGroup, and the specific Task's index in the TaskGroup (0 through BATCH_TASK_COUNT - 1).", alias="taskEnvironments")
    task_spec: Optional[TaskSpec] = Field(default=None, alias="taskSpec")
    __properties: ClassVar[List[str]] = ["name", "parallelism", "permissiveSsh", "requireHostsFile", "runAsNonRoot", "schedulingPolicy", "taskCount", "taskCountPerNode", "taskEnvironments", "taskSpec"]

    @field_validator('scheduling_policy')
    def scheduling_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SCHEDULING_POLICY_UNSPECIFIED', 'AS_SOON_AS_POSSIBLE', 'IN_ORDER']):
            raise ValueError("must be one of enum values ('SCHEDULING_POLICY_UNSPECIFIED', 'AS_SOON_AS_POSSIBLE', 'IN_ORDER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in task_environments (list)
        _items = []
        if self.task_environments:
            for _item_task_environments in self.task_environments:
                if _item_task_environments:
                    _items.append(_item_task_environments.to_dict())
            _dict['taskEnvironments'] = _items
        # override the default output from pydantic by calling `to_dict()` of task_spec
        if self.task_spec:
            _dict['taskSpec'] = self.task_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "parallelism": obj.get("parallelism"),
            "permissiveSsh": obj.get("permissiveSsh"),
            "requireHostsFile": obj.get("requireHostsFile"),
            "runAsNonRoot": obj.get("runAsNonRoot"),
            "schedulingPolicy": obj.get("schedulingPolicy"),
            "taskCount": obj.get("taskCount"),
            "taskCountPerNode": obj.get("taskCountPerNode"),
            "taskEnvironments": [Environment.from_dict(_item) for _item in obj["taskEnvironments"]] if obj.get("taskEnvironments") is not None else None,
            "taskSpec": TaskSpec.from_dict(obj["taskSpec"]) if obj.get("taskSpec") is not None else None
        })
        return _obj



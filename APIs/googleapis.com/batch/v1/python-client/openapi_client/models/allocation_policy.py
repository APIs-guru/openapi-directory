# coding: utf-8

"""
    Batch API

    An API to manage the running of batch resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.instance_policy_or_template import InstancePolicyOrTemplate
from openapi_client.models.location_policy import LocationPolicy
from openapi_client.models.network_policy import NetworkPolicy
from openapi_client.models.placement_policy import PlacementPolicy
from openapi_client.models.service_account import ServiceAccount
from typing import Optional, Set
from typing_extensions import Self

class AllocationPolicy(BaseModel):
    """
    A Job's resource allocation policy describes when, where, and how compute resources should be allocated for the Job.
    """ # noqa: E501
    instances: Optional[List[InstancePolicyOrTemplate]] = Field(default=None, description="Describe instances that can be created by this AllocationPolicy. Only instances[0] is supported now.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels applied to all VM instances and other resources created by AllocationPolicy. Labels could be user provided or system generated. You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with \"goog-\" or \"google-\" are reserved.")
    location: Optional[LocationPolicy] = None
    network: Optional[NetworkPolicy] = None
    placement: Optional[PlacementPolicy] = None
    service_account: Optional[ServiceAccount] = Field(default=None, alias="serviceAccount")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Optional. Tags applied to the VM instances. The tags identify valid sources or targets for network firewalls. Each tag must be 1-63 characters long, and comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).")
    __properties: ClassVar[List[str]] = ["instances", "labels", "location", "network", "placement", "serviceAccount", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AllocationPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in instances (list)
        _items = []
        if self.instances:
            for _item_instances in self.instances:
                if _item_instances:
                    _items.append(_item_instances.to_dict())
            _dict['instances'] = _items
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network
        if self.network:
            _dict['network'] = self.network.to_dict()
        # override the default output from pydantic by calling `to_dict()` of placement
        if self.placement:
            _dict['placement'] = self.placement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_account
        if self.service_account:
            _dict['serviceAccount'] = self.service_account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AllocationPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "instances": [InstancePolicyOrTemplate.from_dict(_item) for _item in obj["instances"]] if obj.get("instances") is not None else None,
            "labels": obj.get("labels"),
            "location": LocationPolicy.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "network": NetworkPolicy.from_dict(obj["network"]) if obj.get("network") is not None else None,
            "placement": PlacementPolicy.from_dict(obj["placement"]) if obj.get("placement") is not None else None,
            "serviceAccount": ServiceAccount.from_dict(obj["serviceAccount"]) if obj.get("serviceAccount") is not None else None,
            "tags": obj.get("tags")
        })
        return _obj



# coding: utf-8

"""
    Batch API

    An API to manage the running of batch resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.status_event import StatusEvent
from openapi_client.models.task_group_status import TaskGroupStatus
from typing import Optional, Set
from typing_extensions import Self

class JobStatus(BaseModel):
    """
    Job status.
    """ # noqa: E501
    run_duration: Optional[StrictStr] = Field(default=None, description="The duration of time that the Job spent in status RUNNING.", alias="runDuration")
    state: Optional[StrictStr] = Field(default=None, description="Job state")
    status_events: Optional[List[StatusEvent]] = Field(default=None, description="Job status events", alias="statusEvents")
    task_groups: Optional[Dict[str, TaskGroupStatus]] = Field(default=None, description="Aggregated task status for each TaskGroup in the Job. The map key is TaskGroup ID.", alias="taskGroups")
    __properties: ClassVar[List[str]] = ["runDuration", "state", "statusEvents", "taskGroups"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'QUEUED', 'SCHEDULED', 'RUNNING', 'SUCCEEDED', 'FAILED', 'DELETION_IN_PROGRESS']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'QUEUED', 'SCHEDULED', 'RUNNING', 'SUCCEEDED', 'FAILED', 'DELETION_IN_PROGRESS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in status_events (list)
        _items = []
        if self.status_events:
            for _item_status_events in self.status_events:
                if _item_status_events:
                    _items.append(_item_status_events.to_dict())
            _dict['statusEvents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in task_groups (dict)
        _field_dict = {}
        if self.task_groups:
            for _key_task_groups in self.task_groups:
                if self.task_groups[_key_task_groups]:
                    _field_dict[_key_task_groups] = self.task_groups[_key_task_groups].to_dict()
            _dict['taskGroups'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "runDuration": obj.get("runDuration"),
            "state": obj.get("state"),
            "statusEvents": [StatusEvent.from_dict(_item) for _item in obj["statusEvents"]] if obj.get("statusEvents") is not None else None,
            "taskGroups": dict(
                (_k, TaskGroupStatus.from_dict(_v))
                for _k, _v in obj["taskGroups"].items()
            )
            if obj.get("taskGroups") is not None
            else None
        })
        return _obj



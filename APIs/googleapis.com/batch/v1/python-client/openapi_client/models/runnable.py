# coding: utf-8

"""
    Batch API

    An API to manage the running of batch resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.barrier import Barrier
from openapi_client.models.container import Container
from openapi_client.models.environment import Environment
from openapi_client.models.script import Script
from typing import Optional, Set
from typing_extensions import Self

class Runnable(BaseModel):
    """
    Runnable describes instructions for executing a specific script or container as part of a Task.
    """ # noqa: E501
    always_run: Optional[StrictBool] = Field(default=None, description="By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables.", alias="alwaysRun")
    background: Optional[StrictBool] = Field(default=None, description="This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).")
    barrier: Optional[Barrier] = None
    container: Optional[Container] = None
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. DisplayName is an optional field that can be provided by the caller. If provided, it will be used in logs and other outputs to identify the script, making it easier for users to understand the logs. If not provided the index of the runnable will be used for outputs.", alias="displayName")
    environment: Optional[Environment] = None
    ignore_exit_status: Optional[StrictBool] = Field(default=None, description="Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.", alias="ignoreExitStatus")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels for this Runnable.")
    script: Optional[Script] = None
    timeout: Optional[StrictStr] = Field(default=None, description="Timeout for this Runnable.")
    __properties: ClassVar[List[str]] = ["alwaysRun", "background", "barrier", "container", "displayName", "environment", "ignoreExitStatus", "labels", "script", "timeout"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Runnable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of barrier
        if self.barrier:
            _dict['barrier'] = self.barrier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of container
        if self.container:
            _dict['container'] = self.container.to_dict()
        # override the default output from pydantic by calling `to_dict()` of environment
        if self.environment:
            _dict['environment'] = self.environment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of script
        if self.script:
            _dict['script'] = self.script.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Runnable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alwaysRun": obj.get("alwaysRun"),
            "background": obj.get("background"),
            "barrier": Barrier.from_dict(obj["barrier"]) if obj.get("barrier") is not None else None,
            "container": Container.from_dict(obj["container"]) if obj.get("container") is not None else None,
            "displayName": obj.get("displayName"),
            "environment": Environment.from_dict(obj["environment"]) if obj.get("environment") is not None else None,
            "ignoreExitStatus": obj.get("ignoreExitStatus"),
            "labels": obj.get("labels"),
            "script": Script.from_dict(obj["script"]) if obj.get("script") is not None else None,
            "timeout": obj.get("timeout")
        })
        return _obj



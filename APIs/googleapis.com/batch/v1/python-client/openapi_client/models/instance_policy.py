# coding: utf-8

"""
    Batch API

    An API to manage the running of batch resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.accelerator import Accelerator
from openapi_client.models.attached_disk import AttachedDisk
from openapi_client.models.disk import Disk
from typing import Optional, Set
from typing_extensions import Self

class InstancePolicy(BaseModel):
    """
    InstancePolicy describes an instance type and resources attached to each VM created by this InstancePolicy.
    """ # noqa: E501
    accelerators: Optional[List[Accelerator]] = Field(default=None, description="The accelerators attached to each VM instance.")
    boot_disk: Optional[Disk] = Field(default=None, alias="bootDisk")
    disks: Optional[List[AttachedDisk]] = Field(default=None, description="Non-boot disks to be attached for each VM created by this InstancePolicy. New disks will be deleted when the VM is deleted. A non-boot disk is a disk that can be of a device with a file system or a raw storage drive that is not ready for data storage and accessing.")
    machine_type: Optional[StrictStr] = Field(default=None, description="The Compute Engine machine type.", alias="machineType")
    min_cpu_platform: Optional[StrictStr] = Field(default=None, description="The minimum CPU platform. See https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.", alias="minCpuPlatform")
    provisioning_model: Optional[StrictStr] = Field(default=None, description="The provisioning model.", alias="provisioningModel")
    reservation: Optional[StrictStr] = Field(default=None, description="Optional. If specified, VMs will consume only the specified reservation. If not specified (default), VMs will consume any applicable reservation.")
    __properties: ClassVar[List[str]] = ["accelerators", "bootDisk", "disks", "machineType", "minCpuPlatform", "provisioningModel", "reservation"]

    @field_validator('provisioning_model')
    def provisioning_model_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROVISIONING_MODEL_UNSPECIFIED', 'STANDARD', 'SPOT', 'PREEMPTIBLE']):
            raise ValueError("must be one of enum values ('PROVISIONING_MODEL_UNSPECIFIED', 'STANDARD', 'SPOT', 'PREEMPTIBLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstancePolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in accelerators (list)
        _items = []
        if self.accelerators:
            for _item_accelerators in self.accelerators:
                if _item_accelerators:
                    _items.append(_item_accelerators.to_dict())
            _dict['accelerators'] = _items
        # override the default output from pydantic by calling `to_dict()` of boot_disk
        if self.boot_disk:
            _dict['bootDisk'] = self.boot_disk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in disks (list)
        _items = []
        if self.disks:
            for _item_disks in self.disks:
                if _item_disks:
                    _items.append(_item_disks.to_dict())
            _dict['disks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstancePolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accelerators": [Accelerator.from_dict(_item) for _item in obj["accelerators"]] if obj.get("accelerators") is not None else None,
            "bootDisk": Disk.from_dict(obj["bootDisk"]) if obj.get("bootDisk") is not None else None,
            "disks": [AttachedDisk.from_dict(_item) for _item in obj["disks"]] if obj.get("disks") is not None else None,
            "machineType": obj.get("machineType"),
            "minCpuPlatform": obj.get("minCpuPlatform"),
            "provisioningModel": obj.get("provisioningModel"),
            "reservation": obj.get("reservation")
        })
        return _obj



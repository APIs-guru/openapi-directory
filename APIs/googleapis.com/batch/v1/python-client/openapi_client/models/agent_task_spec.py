# coding: utf-8

"""
    Batch API

    An API to manage the running of batch resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.agent_environment import AgentEnvironment
from openapi_client.models.agent_task_runnable import AgentTaskRunnable
from openapi_client.models.agent_task_user_account import AgentTaskUserAccount
from typing import Optional, Set
from typing_extensions import Self

class AgentTaskSpec(BaseModel):
    """
    AgentTaskSpec is the user's TaskSpec representation between Agent and CLH communication.
    """ # noqa: E501
    environment: Optional[AgentEnvironment] = None
    max_run_duration: Optional[StrictStr] = Field(default=None, description="Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.", alias="maxRunDuration")
    runnables: Optional[List[AgentTaskRunnable]] = Field(default=None, description="AgentTaskRunnable is runanbles that will be executed on the agent.")
    user_account: Optional[AgentTaskUserAccount] = Field(default=None, alias="userAccount")
    __properties: ClassVar[List[str]] = ["environment", "maxRunDuration", "runnables", "userAccount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentTaskSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of environment
        if self.environment:
            _dict['environment'] = self.environment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in runnables (list)
        _items = []
        if self.runnables:
            for _item_runnables in self.runnables:
                if _item_runnables:
                    _items.append(_item_runnables.to_dict())
            _dict['runnables'] = _items
        # override the default output from pydantic by calling `to_dict()` of user_account
        if self.user_account:
            _dict['userAccount'] = self.user_account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentTaskSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "environment": AgentEnvironment.from_dict(obj["environment"]) if obj.get("environment") is not None else None,
            "maxRunDuration": obj.get("maxRunDuration"),
            "runnables": [AgentTaskRunnable.from_dict(_item) for _item in obj["runnables"]] if obj.get("runnables") is not None else None,
            "userAccount": AgentTaskUserAccount.from_dict(obj["userAccount"]) if obj.get("userAccount") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Batch API

    An API to manage the running of batch resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.allocation_policy import AllocationPolicy
from openapi_client.models.job_notification import JobNotification
from openapi_client.models.job_status import JobStatus
from openapi_client.models.logs_policy import LogsPolicy
from openapi_client.models.task_group import TaskGroup
from typing import Optional, Set
from typing_extensions import Self

class Job(BaseModel):
    """
    The Cloud Batch Job description.
    """ # noqa: E501
    allocation_policy: Optional[AllocationPolicy] = Field(default=None, alias="allocationPolicy")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. When the Job was created.", alias="createTime")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels for the Job. Labels could be user provided or system generated. For example, \"labels\": { \"department\": \"finance\", \"environment\": \"test\" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with \"goog-\" or \"google-\" are reserved.")
    logs_policy: Optional[LogsPolicy] = Field(default=None, alias="logsPolicy")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Job name. For example: \"projects/123456/locations/us-central1/jobs/job01\".")
    notifications: Optional[List[JobNotification]] = Field(default=None, description="Notification configurations.")
    priority: Optional[StrictStr] = Field(default=None, description="Priority of the Job. The valid value range is [0, 100). Default value is 0. Higher value indicates higher priority. A job with higher priority value is more likely to run earlier if all other requirements are satisfied.")
    status: Optional[JobStatus] = None
    task_groups: Optional[List[TaskGroup]] = Field(default=None, description="Required. TaskGroups in the Job. Only one TaskGroup is supported now.", alias="taskGroups")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. A system generated unique ID for the Job.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last time the Job was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["allocationPolicy", "createTime", "labels", "logsPolicy", "name", "notifications", "priority", "status", "taskGroups", "uid", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of allocation_policy
        if self.allocation_policy:
            _dict['allocationPolicy'] = self.allocation_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logs_policy
        if self.logs_policy:
            _dict['logsPolicy'] = self.logs_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in notifications (list)
        _items = []
        if self.notifications:
            for _item_notifications in self.notifications:
                if _item_notifications:
                    _items.append(_item_notifications.to_dict())
            _dict['notifications'] = _items
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in task_groups (list)
        _items = []
        if self.task_groups:
            for _item_task_groups in self.task_groups:
                if _item_task_groups:
                    _items.append(_item_task_groups.to_dict())
            _dict['taskGroups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allocationPolicy": AllocationPolicy.from_dict(obj["allocationPolicy"]) if obj.get("allocationPolicy") is not None else None,
            "createTime": obj.get("createTime"),
            "labels": obj.get("labels"),
            "logsPolicy": LogsPolicy.from_dict(obj["logsPolicy"]) if obj.get("logsPolicy") is not None else None,
            "name": obj.get("name"),
            "notifications": [JobNotification.from_dict(_item) for _item in obj["notifications"]] if obj.get("notifications") is not None else None,
            "priority": obj.get("priority"),
            "status": JobStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "taskGroups": [TaskGroup.from_dict(_item) for _item in obj["taskGroups"]] if obj.get("taskGroups") is not None else None,
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



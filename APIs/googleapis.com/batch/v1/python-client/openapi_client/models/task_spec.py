# coding: utf-8

"""
    Batch API

    An API to manage the running of batch resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.compute_resource import ComputeResource
from openapi_client.models.environment import Environment
from openapi_client.models.lifecycle_policy import LifecyclePolicy
from openapi_client.models.runnable import Runnable
from openapi_client.models.volume import Volume
from typing import Optional, Set
from typing_extensions import Self

class TaskSpec(BaseModel):
    """
    Spec of a task
    """ # noqa: E501
    compute_resource: Optional[ComputeResource] = Field(default=None, alias="computeResource")
    environment: Optional[Environment] = None
    environments: Optional[Dict[str, StrictStr]] = Field(default=None, description="Deprecated: please use environment(non-plural) instead.")
    lifecycle_policies: Optional[List[LifecyclePolicy]] = Field(default=None, description="Lifecycle management schema when any task in a task group is failed. Currently we only support one lifecycle policy. When the lifecycle policy condition is met, the action in the policy will execute. If task execution result does not meet with the defined lifecycle policy, we consider it as the default policy. Default policy means if the exit code is 0, exit task. If task ends with non-zero exit code, retry the task with max_retry_count.", alias="lifecyclePolicies")
    max_retry_count: Optional[StrictInt] = Field(default=None, description="Maximum number of retries on failures. The default, 0, which means never retry. The valid value range is [0, 10].", alias="maxRetryCount")
    max_run_duration: Optional[StrictStr] = Field(default=None, description="Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.", alias="maxRunDuration")
    runnables: Optional[List[Runnable]] = Field(default=None, description="The sequence of scripts or containers to run for this Task. Each Task using this TaskSpec executes its list of runnables in order. The Task succeeds if all of its runnables either exit with a zero status or any that exit with a non-zero status have the ignore_exit_status flag. Background runnables are killed automatically (if they have not already exited) a short time after all foreground runnables have completed. Even though this is likely to result in a non-zero exit status for the background runnable, these automatic kills are not treated as Task failures.")
    volumes: Optional[List[Volume]] = Field(default=None, description="Volumes to mount before running Tasks using this TaskSpec.")
    __properties: ClassVar[List[str]] = ["computeResource", "environment", "environments", "lifecyclePolicies", "maxRetryCount", "maxRunDuration", "runnables", "volumes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of compute_resource
        if self.compute_resource:
            _dict['computeResource'] = self.compute_resource.to_dict()
        # override the default output from pydantic by calling `to_dict()` of environment
        if self.environment:
            _dict['environment'] = self.environment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in lifecycle_policies (list)
        _items = []
        if self.lifecycle_policies:
            for _item_lifecycle_policies in self.lifecycle_policies:
                if _item_lifecycle_policies:
                    _items.append(_item_lifecycle_policies.to_dict())
            _dict['lifecyclePolicies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in runnables (list)
        _items = []
        if self.runnables:
            for _item_runnables in self.runnables:
                if _item_runnables:
                    _items.append(_item_runnables.to_dict())
            _dict['runnables'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in volumes (list)
        _items = []
        if self.volumes:
            for _item_volumes in self.volumes:
                if _item_volumes:
                    _items.append(_item_volumes.to_dict())
            _dict['volumes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computeResource": ComputeResource.from_dict(obj["computeResource"]) if obj.get("computeResource") is not None else None,
            "environment": Environment.from_dict(obj["environment"]) if obj.get("environment") is not None else None,
            "environments": obj.get("environments"),
            "lifecyclePolicies": [LifecyclePolicy.from_dict(_item) for _item in obj["lifecyclePolicies"]] if obj.get("lifecyclePolicies") is not None else None,
            "maxRetryCount": obj.get("maxRetryCount"),
            "maxRunDuration": obj.get("maxRunDuration"),
            "runnables": [Runnable.from_dict(_item) for _item in obj["runnables"]] if obj.get("runnables") is not None else None,
            "volumes": [Volume.from_dict(_item) for _item in obj["volumes"]] if obj.get("volumes") is not None else None
        })
        return _obj



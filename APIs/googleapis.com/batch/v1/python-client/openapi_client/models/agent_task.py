# coding: utf-8

"""
    Batch API

    An API to manage the running of batch resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.agent_task_spec import AgentTaskSpec
from openapi_client.models.task_spec import TaskSpec
from openapi_client.models.task_status import TaskStatus
from typing import Optional, Set
from typing_extensions import Self

class AgentTask(BaseModel):
    """
    TODO(b/182501497) The message needs to be redefined when the Agent API server updates data in storage per the backend design.
    """ # noqa: E501
    agent_task_spec: Optional[AgentTaskSpec] = Field(default=None, alias="agentTaskSpec")
    intended_state: Optional[StrictStr] = Field(default=None, description="The intended state of the task.", alias="intendedState")
    reached_barrier: Optional[StrictStr] = Field(default=None, description="The highest barrier reached by all tasks in the task's TaskGroup.", alias="reachedBarrier")
    spec: Optional[TaskSpec] = None
    status: Optional[TaskStatus] = None
    task: Optional[StrictStr] = Field(default=None, description="Task name.")
    task_source: Optional[StrictStr] = Field(default=None, description="TaskSource represents the source of the task.", alias="taskSource")
    __properties: ClassVar[List[str]] = ["agentTaskSpec", "intendedState", "reachedBarrier", "spec", "status", "task", "taskSource"]

    @field_validator('intended_state')
    def intended_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INTENDED_STATE_UNSPECIFIED', 'ASSIGNED', 'CANCELLED', 'DELETED']):
            raise ValueError("must be one of enum values ('INTENDED_STATE_UNSPECIFIED', 'ASSIGNED', 'CANCELLED', 'DELETED')")
        return value

    @field_validator('task_source')
    def task_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TASK_SOURCE_UNSPECIFIED', 'BATCH_INTERNAL', 'USER']):
            raise ValueError("must be one of enum values ('TASK_SOURCE_UNSPECIFIED', 'BATCH_INTERNAL', 'USER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agent_task_spec
        if self.agent_task_spec:
            _dict['agentTaskSpec'] = self.agent_task_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spec
        if self.spec:
            _dict['spec'] = self.spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentTaskSpec": AgentTaskSpec.from_dict(obj["agentTaskSpec"]) if obj.get("agentTaskSpec") is not None else None,
            "intendedState": obj.get("intendedState"),
            "reachedBarrier": obj.get("reachedBarrier"),
            "spec": TaskSpec.from_dict(obj["spec"]) if obj.get("spec") is not None else None,
            "status": TaskStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "task": obj.get("task"),
            "taskSource": obj.get("taskSource")
        })
        return _obj



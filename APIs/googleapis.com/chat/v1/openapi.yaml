openapi: 3.0.0
servers:
  - url: https://chat.googleapis.com/
info:
  contact:
    name: Google
    url: https://google.com
    x-twitter: youtube
  description: The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: Google Chat API
  version: v1
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-apisguru-categories:
    - analytics
    - media
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
    - converter:
        url: https://github.com/mermade/oas-kit
        version: 7.0.4
      format: google
      url: https://chat.googleapis.com/$discovery/rest?version=v1
      version: v1
  x-providerName: googleapis.com
  x-serviceName: chat
externalDocs:
  url: https://developers.google.com/hangouts/chat
tags:
  - name: media
  - name: spaces
paths:
  /v1/media/{resourceName}:
    get:
      description: Downloads media. Download is supported on the URI `/v1/media/{+name}?alt=media`.
      operationId: chat.media.download
      parameters:
        - description: Name of the media that is being downloaded. See ReadRequest.resource_name.
          in: path
          name: resourceName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Media"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.readonly
      tags:
        - media
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
  /v1/spaces:
    get:
      description: Lists spaces the caller is a member of. Group chats and DMs aren't listed until the first message is sent. For an example, see [List spaces](https://developers.google.com/chat/api/guides/v1/spaces/list). Requires [authentication](https://developers.google.com/chat/api/guides/auth). Supports [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts) and [user authentication](https://developers.google.com/chat/api/guides/auth/users). Lists spaces visible to the caller or authenticated user. Group chats and DMs aren't listed until the first message is sent.
      operationId: chat.spaces.list
      parameters:
        - description: "Optional. A query filter. You can filter spaces by the space type ([`space_type`](https://developers.google.com/chat/api/reference/rest/v1/spaces#spacetype)). To filter by space type, you must specify valid enum value, such as `SPACE` or `GROUP_CHAT` (the `space_type` can't be `SPACE_TYPE_UNSPECIFIED`). To query for multiple space types, use the `OR` operator. For example, the following queries are valid: ``` space_type = \"SPACE\" spaceType = \"GROUP_CHAT\" OR spaceType = \"DIRECT_MESSAGE\" ``` Invalid queries are rejected by the server with an `INVALID_ARGUMENT` error."
          in: query
          name: filter
          schema:
            type: string
        - description: Optional. The maximum number of spaces to return. The service might return fewer than this value. If unspecified, at most 100 spaces are returned. The maximum value is 1,000. If you use a value more than 1,000, it's automatically changed to 1,000. Negative values return an `INVALID_ARGUMENT` error.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Optional. A page token, received from a previous list spaces call. Provide this parameter to retrieve the subsequent page. When paginating, the filter value should match the call that provided the page token. Passing a different value may lead to unexpected results.
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListSpacesResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
        - Oauth2:
            - https://www.googleapis.com/auth/chat.spaces
          Oauth2c:
            - https://www.googleapis.com/auth/chat.spaces
        - Oauth2:
            - https://www.googleapis.com/auth/chat.spaces.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/chat.spaces.readonly
      tags:
        - spaces
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Creates a named space. Spaces grouped by topics aren't supported. For an example, see [Create a space](https://developers.google.com/chat/api/guides/v1/spaces/create). If you receive the error message `ALREADY_EXISTS` when creating a space, try a different `displayName`. An existing space within the Google Workspace organization might already use this display name. Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users).
      operationId: chat.spaces.create
      parameters:
        - description: Optional. A unique identifier for this request. A random UUID is recommended. Specifying an existing request ID returns the space created with that ID instead of creating a new space. Specifying an existing request ID from the same Chat app with a different authenticated user returns an error.
          in: query
          name: requestId
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Space"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.spaces
          Oauth2c:
            - https://www.googleapis.com/auth/chat.spaces
        - Oauth2:
            - https://www.googleapis.com/auth/chat.spaces.create
          Oauth2c:
            - https://www.googleapis.com/auth/chat.spaces.create
      tags:
        - spaces
  /v1/spaces:findDirectMessage:
    get:
      description: Returns the existing direct message with the specified user. If no direct message space is found, returns a `404 NOT_FOUND` error. For an example, see [Find a direct message](/chat/api/guides/v1/spaces/find-direct-message). With [user authentication](https://developers.google.com/chat/api/guides/auth/users), returns the direct message space between the specified user and the authenticated user. With [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts), returns the direct message space between the specified user and the calling Chat app. Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users) or [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
      operationId: chat.spaces.findDirectMessage
      parameters:
        - description: "Required. Resource name of the user to find direct message with. Format: `users/{user}`, where `{user}` is either the `id` for the [person](https://developers.google.com/people/api/rest/v1/people) from the People API, or the `id` for the [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users) in the Directory API. For example, if the People API profile ID is `123456789`, you can find a direct message with that person by using `users/123456789` as the `name`. When [authenticated as a user](https://developers.google.com/chat/api/guides/auth/users), you can use the email as an alias for `{user}`. For example, `users/example@gmail.com` where `example@gmail.com` is the email of the Google Chat user."
          in: query
          name: name
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
        - Oauth2:
            - https://www.googleapis.com/auth/chat.spaces
          Oauth2c:
            - https://www.googleapis.com/auth/chat.spaces
        - Oauth2:
            - https://www.googleapis.com/auth/chat.spaces.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/chat.spaces.readonly
      tags:
        - spaces
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
  /v1/spaces:setup:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Creates a space and adds specified users to it. The calling user is automatically added to the space, and shouldn't be specified as a membership in the request. For an example, see [Set up a space](https://developers.google.com/chat/api/guides/v1/spaces/set-up). To specify the human members to add, add memberships with the appropriate `member.name` in the `SetUpSpaceRequest`. To add a human user, use `users/{user}`, where `{user}` can be the email address for the user. For users in the same Workspace organization `{user}` can also be the `id` for the person from the People API, or the `id` for the user in the Directory API. For example, if the People API Person profile ID for `user@example.com` is `123456789`, you can add the user to the space by setting the `membership.member.name` to `users/user@example.com` or `users/123456789`. For a space or group chat, if the caller blocks or is blocked by some members, then those members aren't added to the created space. To create a direct message (DM) between the calling user and another human user, specify exactly one membership to represent the human user. If one user blocks the other, the request fails and the DM isn't created. To create a DM between the calling user and the calling app, set `Space.singleUserBotDm` to `true` and don't specify any memberships. You can only use this method to set up a DM with the calling app. To add the calling app as a member of a space or an existing DM between two human users, see [create a membership](https://developers.google.com/chat/api/guides/v1/members/create). If a DM already exists between two users, even when one user blocks the other at the time a request is made, then the existing DM is returned. Spaces with threaded replies aren't supported. If you receive the error message `ALREADY_EXISTS` when setting up a space, try a different `displayName`. An existing space within the Google Workspace organization might already use this display name. Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users).
      operationId: chat.spaces.setup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetUpSpaceRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.spaces
          Oauth2c:
            - https://www.googleapis.com/auth/chat.spaces
        - Oauth2:
            - https://www.googleapis.com/auth/chat.spaces.create
          Oauth2c:
            - https://www.googleapis.com/auth/chat.spaces.create
      tags:
        - spaces
  /v1/{name}:
    delete:
      description: Deletes a reaction to a message. For an example, see [Delete a reaction](https://developers.google.com/chat/api/guides/v1/reactions/delete). Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users).
      operationId: chat.spaces.messages.reactions.delete
      parameters:
        - description: "Required. Name of the reaction to delete. Format: `spaces/{space}/messages/{message}/reactions/{reaction}`"
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: When `true`, deleting a message also deletes its threaded replies. When `false`, if a message has threaded replies, deletion fails. Only applies when [authenticating as a user](https://developers.google.com/chat/api/guides/auth/users). Has no effect when [authenticating as a Chat app] (https://developers.google.com/chat/api/guides/auth/service-accounts).
          in: query
          name: force
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.reactions
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.reactions
      tags:
        - spaces
    get:
      description: Gets the metadata of a message attachment. The attachment data is fetched using the [media API](https://developers.google.com/chat/api/reference/rest/v1/media/download). For an example, see [Get a message attachment](https://developers.google.com/chat/api/guides/v1/media-and-attachments/get). Requires [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
      operationId: chat.spaces.messages.attachments.get
      parameters:
        - description: Required. Resource name of the attachment, in the form `spaces/*/messages/*/attachments/*`.
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachment"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.readonly
      tags:
        - spaces
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    patch:
      description: Updates a message. There's a difference between the `patch` and `update` methods. The `patch` method uses a `patch` request while the `update` method uses a `put` request. We recommend using the `patch` method. For an example, see [Update a message](https://developers.google.com/chat/api/guides/v1/messages/update). Requires [authentication](https://developers.google.com/chat/api/guides/auth). Supports [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts) and [user authentication](https://developers.google.com/chat/api/guides/auth/users). When using app authentication, requests can only update messages created by the calling Chat app.
      operationId: chat.spaces.messages.patch
      parameters:
        - description: "Resource name of the message. Format: `spaces/{space}/messages/{message}` Where `{space}` is the ID of the space where the message is posted and `{message}` is a system-assigned ID for the message. For example, `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`. If you set a custom ID when you create a message, you can use this ID to specify the message in a request by replacing `{message}` with the value from the `clientAssignedMessageId` field. For example, `spaces/AAAAAAAAAAA/messages/client-custom-name`. For details, see [Name a message](https://developers.google.com/chat/api/guides/v1/messages/create#name_a_created_message)."
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: Optional. If `true` and the message isn't found, a new message is created and `updateMask` is ignored. The specified message ID must be [client-assigned](https://developers.google.com/chat/api/guides/v1/messages/create#name_a_created_message) or the request fails.
          in: query
          name: allowMissing
          schema:
            type: boolean
        - description: "Required. The field paths to update. Separate multiple values with commas or use `*` to update all field paths. Currently supported field paths: - `text` - `attachment` - `cards` (Requires [app authentication](/chat/api/guides/auth/service-accounts).) - `cards_v2` (Requires [app authentication](/chat/api/guides/auth/service-accounts).) - Developer Preview: `accessory_widgets` (Requires [app authentication](/chat/api/guides/auth/service-accounts).)"
          in: query
          name: updateMask
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
      tags:
        - spaces
    put:
      description: Updates a message. There's a difference between the `patch` and `update` methods. The `patch` method uses a `patch` request while the `update` method uses a `put` request. We recommend using the `patch` method. For an example, see [Update a message](https://developers.google.com/chat/api/guides/v1/messages/update). Requires [authentication](https://developers.google.com/chat/api/guides/auth). Supports [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts) and [user authentication](https://developers.google.com/chat/api/guides/auth/users). When using app authentication, requests can only update messages created by the calling Chat app.
      operationId: chat.spaces.messages.update
      parameters:
        - description: "Resource name of the message. Format: `spaces/{space}/messages/{message}` Where `{space}` is the ID of the space where the message is posted and `{message}` is a system-assigned ID for the message. For example, `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`. If you set a custom ID when you create a message, you can use this ID to specify the message in a request by replacing `{message}` with the value from the `clientAssignedMessageId` field. For example, `spaces/AAAAAAAAAAA/messages/client-custom-name`. For details, see [Name a message](https://developers.google.com/chat/api/guides/v1/messages/create#name_a_created_message)."
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: Optional. If `true` and the message isn't found, a new message is created and `updateMask` is ignored. The specified message ID must be [client-assigned](https://developers.google.com/chat/api/guides/v1/messages/create#name_a_created_message) or the request fails.
          in: query
          name: allowMissing
          schema:
            type: boolean
        - description: "Required. The field paths to update. Separate multiple values with commas or use `*` to update all field paths. Currently supported field paths: - `text` - `attachment` - `cards` (Requires [app authentication](/chat/api/guides/auth/service-accounts).) - `cards_v2` (Requires [app authentication](/chat/api/guides/auth/service-accounts).) - Developer Preview: `accessory_widgets` (Requires [app authentication](/chat/api/guides/auth/service-accounts).)"
          in: query
          name: updateMask
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
      tags:
        - spaces
  /v1/{name}:completeImport:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Completes the [import process](https://developers.google.com/chat/api/guides/import-data) for the specified space and makes it visible to users. Requires app authentication and domain-wide delegation. For more information, see [Authorize Google Chat apps to import data](https://developers.google.com/chat/api/guides/authorize-import).
      operationId: chat.spaces.completeImport
      parameters:
        - description: "Required. Resource name of the import mode space. Format: `spaces/{space}`"
          in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompleteImportSpaceRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompleteImportSpaceResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
      tags:
        - spaces
  /v1/{parent}/attachments:upload:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Uploads an attachment. For an example, see [Upload media as a file attachment](https://developers.google.com/chat/api/guides/v1/media-and-attachments/upload). Requires user [authentication](https://developers.google.com/chat/api/guides/auth/users). You can upload attachments up to 200 MB. Certain file types aren't supported. For details, see [File types blocked by Google Chat](https://support.google.com/chat/answer/7651457?&co=GENIE.Platform%3DDesktop#File%20types%20blocked%20in%20Google%20Chat).
      operationId: chat.media.upload
      parameters:
        - description: Required. Resource name of the Chat space in which the attachment is uploaded. Format "spaces/{space}".
          in: path
          name: parent
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: "#/components/schemas/UploadAttachmentRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadAttachmentResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.create
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.create
      tags:
        - media
  /v1/{parent}/members:
    get:
      description: Lists memberships in a space. For an example, see [List memberships](https://developers.google.com/chat/api/guides/v1/members/list). Listing memberships with [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts) lists memberships in spaces that the Chat app has access to, but excludes Chat app memberships, including its own. Listing memberships with [User authentication](https://developers.google.com/chat/api/guides/auth/users) lists memberships in spaces that the authenticated user has access to. Requires [authentication](https://developers.google.com/chat/api/guides/auth). Supports [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts) and [user authentication](https://developers.google.com/chat/api/guides/auth/users).
      operationId: chat.spaces.members.list
      parameters:
        - description: "Required. The resource name of the space for which to fetch a membership list. Format: spaces/{space}"
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: "Optional. A query filter. You can filter memberships by a member's role ([`role`](https://developers.google.com/chat/api/reference/rest/v1/spaces.members#membershiprole)) and type ([`member.type`](https://developers.google.com/chat/api/reference/rest/v1/User#type)). To filter by role, set `role` to `ROLE_MEMBER` or `ROLE_MANAGER`. To filter by type, set `member.type` to `HUMAN` or `BOT`. To filter by both role and type, use the `AND` operator. To filter by either role or type, use the `OR` operator. For example, the following queries are valid: ``` role = \"ROLE_MANAGER\" OR role = \"ROLE_MEMBER\" member.type = \"HUMAN\" AND role = \"ROLE_MANAGER\" ``` The following queries are invalid: ``` member.type = \"HUMAN\" AND member.type = \"BOT\" role = \"ROLE_MANAGER\" AND role = \"ROLE_MEMBER\" ``` Invalid queries are rejected by the server with an `INVALID_ARGUMENT` error."
          in: query
          name: filter
          schema:
            type: string
        - description: Optional. The maximum number of memberships to return. The service might return fewer than this value. If unspecified, at most 100 memberships are returned. The maximum value is 1,000. If you use a value more than 1,000, it's automatically changed to 1,000. Negative values return an `INVALID_ARGUMENT` error.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Optional. A page token, received from a previous call to list memberships. Provide this parameter to retrieve the subsequent page. When paginating, all other parameters provided should match the call that provided the page token. Passing different values to the other parameters might lead to unexpected results.
          in: query
          name: pageToken
          schema:
            type: string
        - description: Optional. When `true`, also returns memberships associated with a Google Group, in addition to other types of memberships. If a filter is set, Google Group memberships that don't match the filter criteria aren't returned.
          in: query
          name: showGroups
          schema:
            type: boolean
        - description: Optional. When `true`, also returns memberships associated with invited members, in addition to other types of memberships. If a filter is set, invited memberships that don't match the filter criteria aren't returned. Currently requires [user authentication](https://developers.google.com/chat/api/guides/auth/users).
          in: query
          name: showInvited
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListMembershipsResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.memberships
          Oauth2c:
            - https://www.googleapis.com/auth/chat.memberships
        - Oauth2:
            - https://www.googleapis.com/auth/chat.memberships.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/chat.memberships.readonly
      tags:
        - spaces
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: "Creates a human membership or app membership for the calling app. Creating memberships for other apps isn't supported. For an example, see [ Create a membership](https://developers.google.com/chat/api/guides/v1/members/create). When creating a membership, if the specified member has their auto-accept policy turned off, then they're invited, and must accept the space invitation before joining. Otherwise, creating a membership adds the member directly to the specified space. Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users). To specify the member to add, set the `membership.member.name` in the `CreateMembershipRequest`: - To add the calling app to a space or a direct message between two human users, use `users/app`. Unable to add other apps to the space. - To add a human user, use `users/{user}`, where `{user}` can be the email address for the user. For users in the same Workspace organization `{user}` can also be the `id` for the person from the People API, or the `id` for the user in the Directory API. For example, if the People API Person profile ID for `user@example.com` is `123456789`, you can add the user to the space by setting the `membership.member.name` to `users/user@example.com` or `users/123456789`."
      operationId: chat.spaces.members.create
      parameters:
        - description: "Required. The resource name of the space for which to create the membership. Format: spaces/{space}"
          in: path
          name: parent
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Membership"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Membership"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.memberships
          Oauth2c:
            - https://www.googleapis.com/auth/chat.memberships
        - Oauth2:
            - https://www.googleapis.com/auth/chat.memberships.app
          Oauth2c:
            - https://www.googleapis.com/auth/chat.memberships.app
      tags:
        - spaces
  /v1/{parent}/messages:
    get:
      description: Lists messages in a space that the caller is a member of, including messages from blocked members and spaces. For an example, see [List messages](/chat/api/guides/v1/messages/list). Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users).
      operationId: chat.spaces.messages.list
      parameters:
        - description: "Required. The resource name of the space to list messages from. Format: `spaces/{space}`"
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: 'A query filter. You can filter messages by date (`create_time`) and thread (`thread.name`). To filter messages by the date they were created, specify the `create_time` with a timestamp in [RFC-3339](https://www.rfc-editor.org/rfc/rfc3339) format and double quotation marks. For example, `"2023-04-21T11:30:00-04:00"`. You can use the greater than operator `>` to list messages that were created after a timestamp, or the less than operator `<` to list messages that were created before a timestamp. To filter messages within a time interval, use the `AND` operator between two timestamps. To filter by thread, specify the `thread.name`, formatted as `spaces/{space}/threads/{thread}`. You can only specify one `thread.name` per query. To filter by both thread and date, use the `AND` operator in your query. For example, the following queries are valid: ``` create_time > "2012-04-21T11:30:00-04:00" create_time > "2012-04-21T11:30:00-04:00" AND thread.name = spaces/AAAAAAAAAAA/threads/123 create_time > "2012-04-21T11:30:00+00:00" AND create_time < "2013-01-01T00:00:00+00:00" AND thread.name = spaces/AAAAAAAAAAA/threads/123 thread.name = spaces/AAAAAAAAAAA/threads/123 ``` Invalid queries are rejected by the server with an `INVALID_ARGUMENT` error.'
          in: query
          name: filter
          schema:
            type: string
        - description: "Optional, if resuming from a previous query. How the list of messages is ordered. Specify a value to order by an ordering operation. Valid ordering operation values are as follows: - `ASC` for ascending. - `DESC` for descending. The default ordering is `create_time ASC`."
          in: query
          name: orderBy
          schema:
            type: string
        - description: The maximum number of messages returned. The service might return fewer messages than this value. If unspecified, at most 25 are returned. The maximum value is 1,000. If you use a value more than 1,000, it's automatically changed to 1,000. Negative values return an `INVALID_ARGUMENT` error.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Optional, if resuming from a previous query. A page token received from a previous list messages call. Provide this parameter to retrieve the subsequent page. When paginating, all other parameters provided should match the call that provided the page token. Passing different values to the other parameters might lead to unexpected results.
          in: query
          name: pageToken
          schema:
            type: string
        - description: Whether to include deleted messages. Deleted messages include deleted time and metadata about their deletion, but message content is unavailable.
          in: query
          name: showDeleted
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListMessagesResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.readonly
      tags:
        - spaces
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: "Creates a message in a Google Chat space. For an example, see [Create a message](https://developers.google.com/chat/api/guides/v1/messages/create). Calling this method requires [authentication](https://developers.google.com/chat/api/guides/auth) and supports the following authentication types: - For text messages, user authentication or app authentication are supported. - For card messages, only app authentication is supported. (Only Chat apps can create card messages.)"
      operationId: chat.spaces.messages.create
      parameters:
        - description: "Required. The resource name of the space in which to create a message. Format: `spaces/{space}`"
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: "Optional. A custom ID for a message. Lets Chat apps get, update, or delete a message without needing to store the system-assigned ID in the message's resource name (represented in the message `name` field). The value for this field must meet the following requirements: * Begins with `client-`. For example, `client-custom-name` is a valid custom ID, but `custom-name` is not. * Contains up to 63 characters and only lowercase letters, numbers, and hyphens. * Is unique within a space. A Chat app can't use the same custom ID for different messages. For details, see [Name a message](https://developers.google.com/chat/api/guides/v1/messages/create#name_a_created_message)."
          in: query
          name: messageId
          schema:
            type: string
        - description: Optional. Specifies whether a message starts a thread or replies to one. Only supported in named spaces.
          in: query
          name: messageReplyOption
          schema:
            enum:
              - MESSAGE_REPLY_OPTION_UNSPECIFIED
              - REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD
              - REPLY_MESSAGE_OR_FAIL
            type: string
        - description: Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message.
          in: query
          name: requestId
          schema:
            type: string
        - description: "Optional. Deprecated: Use thread.thread_key instead. ID for the thread. Supports up to 4000 characters. To start or add to a thread, create a message and specify a `threadKey` or the thread.name. For example usage, see [Start or reply to a message thread](https://developers.google.com/chat/api/guides/v1/messages/create#create-message-thread)."
          in: query
          name: threadKey
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.create
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.create
      tags:
        - spaces
  /v1/{parent}/reactions:
    get:
      description: Lists reactions to a message. For an example, see [List reactions](https://developers.google.com/chat/api/guides/v1/reactions/list). Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users).
      operationId: chat.spaces.messages.reactions.list
      parameters:
        - description: "Required. The message users reacted to. Format: `spaces/{space}/messages/{message}`"
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: 'Optional. A query filter. You can filter reactions by [emoji](https://developers.google.com/chat/api/reference/rest/v1/Emoji) (either `emoji.unicode` or `emoji.custom_emoji.uid`) and [user](https://developers.google.com/chat/api/reference/rest/v1/User) (`user.name`). To filter reactions for multiple emojis or users, join similar fields with the `OR` operator, such as `emoji.unicode = "🙂" OR emoji.unicode = "👍"` and `user.name = "users/AAAAAA" OR user.name = "users/BBBBBB"`. To filter reactions by emoji and user, use the `AND` operator, such as `emoji.unicode = "🙂" AND user.name = "users/AAAAAA"`. If your query uses both `AND` and `OR`, group them with parentheses. For example, the following queries are valid: ``` user.name = "users/{user}" emoji.unicode = "🙂" emoji.custom_emoji.uid = "{uid}" emoji.unicode = "🙂" OR emoji.unicode = "👍" emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}" emoji.unicode = "🙂" AND user.name = "users/{user}" (emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}") AND user.name = "users/{user}" ``` The following queries are invalid: ``` emoji.unicode = "🙂" AND emoji.unicode = "👍" emoji.unicode = "🙂" AND emoji.custom_emoji.uid = "{uid}" emoji.unicode = "🙂" OR user.name = "users/{user}" emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}" OR user.name = "users/{user}" emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}" AND user.name = "users/{user}" ``` Invalid queries are rejected by the server with an `INVALID_ARGUMENT` error.'
          in: query
          name: filter
          schema:
            type: string
        - description: Optional. The maximum number of reactions returned. The service can return fewer reactions than this value. If unspecified, the default value is 25. The maximum value is 200; values above 200 are changed to 200.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Optional. (If resuming from a previous query.) A page token received from a previous list reactions call. Provide this to retrieve the subsequent page. When paginating, the filter value should match the call that provided the page token. Passing a different value might lead to unexpected results.
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListReactionsResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.reactions
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.reactions
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.reactions.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.reactions.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.readonly
      tags:
        - spaces
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Creates a reaction and adds it to a message. For an example, see [Create a reaction](https://developers.google.com/chat/api/guides/v1/reactions/create). Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users). Only unicode emoji are supported.
      operationId: chat.spaces.messages.reactions.create
      parameters:
        - description: "Required. The message where the reaction is created. Format: `spaces/{space}/messages/{message}`"
          in: path
          name: parent
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reaction"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reaction"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.reactions
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.reactions
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.reactions.create
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.reactions.create
      tags:
        - spaces
components:
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        enum:
          - "1"
          - "2"
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        enum:
          - json
          - media
          - proto
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
  schemas:
    ActionParameter:
      description: "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze one day, snooze next week. You might use `action method = snooze()`, passing the snooze type and snooze time in the list of string parameters."
      properties:
        key:
          description: The name of the parameter for the action script.
          type: string
        value:
          description: The value of the parameter.
          type: string
      type: object
    ActionResponse:
      description: Parameters that a Chat app can use to configure how its response is posted.
      properties:
        dialogAction:
          $ref: "#/components/schemas/DialogAction"
          description: Input only. A response to an interaction event related to a [dialog](https://developers.google.com/chat/how-tos/dialogs). Must be accompanied by `ResponseType.Dialog`.
        type:
          description: Input only. The type of Chat app response.
          enum:
            - TYPE_UNSPECIFIED
            - NEW_MESSAGE
            - UPDATE_MESSAGE
            - UPDATE_USER_MESSAGE_CARDS
            - REQUEST_CONFIG
            - DIALOG
            - UPDATE_WIDGET
          type: string
        updatedWidget:
          $ref: "#/components/schemas/UpdatedWidget"
          description: Input only. The response of the updated widget.
        url:
          description: Input only. URL for users to authenticate or configure. (Only for `REQUEST_CONFIG` response types.)
          type: string
      type: object
    ActionStatus:
      description: Represents the status for a request to either invoke or submit a [dialog](https://developers.google.com/chat/how-tos/dialogs).
      properties:
        statusCode:
          description: The status code.
          enum:
            - OK
            - CANCELLED
            - UNKNOWN
            - INVALID_ARGUMENT
            - DEADLINE_EXCEEDED
            - NOT_FOUND
            - ALREADY_EXISTS
            - PERMISSION_DENIED
            - UNAUTHENTICATED
            - RESOURCE_EXHAUSTED
            - FAILED_PRECONDITION
            - ABORTED
            - OUT_OF_RANGE
            - UNIMPLEMENTED
            - INTERNAL
            - UNAVAILABLE
            - DATA_LOSS
          type: string
        userFacingMessage:
          description: The message to send users about the status of their request. If unset, a generic message based on the `status_code` is sent.
          type: string
      type: object
    Annotation:
      description: 'Output only. Annotations associated with the plain-text body of the message. To add basic formatting to a text message, see [Format text messages](https://developers.google.com/chat/format-messages). Example plain-text message body: ``` Hello @FooBot how are you!" ``` The corresponding annotations metadata: ``` "annotations":[{ "type":"USER_MENTION", "startIndex":6, "length":7, "userMention": { "user": { "name":"users/{user}", "displayName":"FooBot", "avatarUrl":"https://goo.gl/aeDtrS", "type":"BOT" }, "type":"MENTION" } }] ```'
      properties:
        length:
          description: Length of the substring in the plain-text message body this annotation corresponds to.
          format: int32
          type: integer
        slashCommand:
          $ref: "#/components/schemas/SlashCommandMetadata"
          description: The metadata for a slash command.
        startIndex:
          description: Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to.
          format: int32
          type: integer
        type:
          description: The type of this annotation.
          enum:
            - ANNOTATION_TYPE_UNSPECIFIED
            - USER_MENTION
            - SLASH_COMMAND
          type: string
        userMention:
          $ref: "#/components/schemas/UserMentionMetadata"
          description: The metadata of user mention.
      type: object
    AttachedGif:
      description: A GIF image that's specified by a URL.
      properties:
        uri:
          description: Output only. The URL that hosts the GIF image.
          readOnly: true
          type: string
      type: object
    Attachment:
      description: An attachment in Google Chat.
      properties:
        attachmentDataRef:
          $ref: "#/components/schemas/AttachmentDataRef"
          description: A reference to the attachment data. This field is used with the media API to download the attachment data.
        contentName:
          description: Output only. The original file name for the content, not the full path.
          readOnly: true
          type: string
        contentType:
          description: Output only. The content type (MIME type) of the file.
          readOnly: true
          type: string
        downloadUri:
          description: Output only. The download URL which should be used to allow a human user to download the attachment. Chat apps shouldn't use this URL to download attachment content.
          readOnly: true
          type: string
        driveDataRef:
          $ref: "#/components/schemas/DriveDataRef"
          description: Output only. A reference to the Google Drive attachment. This field is used with the Google Drive API.
          readOnly: true
        name:
          description: Resource name of the attachment, in the form `spaces/*/messages/*/attachments/*`.
          type: string
        source:
          description: Output only. The source of the attachment.
          enum:
            - SOURCE_UNSPECIFIED
            - DRIVE_FILE
            - UPLOADED_CONTENT
          readOnly: true
          type: string
        thumbnailUri:
          description: Output only. The thumbnail URL which should be used to preview the attachment to a human user. Chat apps shouldn't use this URL to download attachment content.
          readOnly: true
          type: string
      type: object
    AttachmentDataRef:
      properties:
        attachmentUploadToken:
          description: Opaque token containing a reference to an uploaded attachment. Treated by clients as an opaque string and used to create or update Chat messages with attachments.
          type: string
        resourceName:
          description: The resource name of the attachment data. This field is used with the media API to download the attachment data.
          type: string
      type: object
    Button:
      description: A button. Can be a text button or an image button.
      properties:
        imageButton:
          $ref: "#/components/schemas/ImageButton"
          description: A button with image and `onclick` action.
        textButton:
          $ref: "#/components/schemas/TextButton"
          description: A button with text and `onclick` action.
      type: object
    Card:
      description: A card is a UI element that can contain UI widgets such as text and images.
      properties:
        cardActions:
          description: The actions of this card.
          items:
            $ref: "#/components/schemas/CardAction"
          type: array
        header:
          $ref: "#/components/schemas/CardHeader"
          description: The header of the card. A header usually contains a title and an image.
        name:
          description: Name of the card.
          type: string
        sections:
          description: Sections are separated by a line divider.
          items:
            $ref: "#/components/schemas/Section"
          type: array
      type: object
    CardAction:
      description: "A card action is the action associated with the card. For an invoice card, a typical action would be: delete invoice, email invoice or open the invoice in browser. Not supported by Google Chat apps."
      properties:
        actionLabel:
          description: The label used to be displayed in the action menu item.
          type: string
        onClick:
          $ref: "#/components/schemas/OnClick"
          description: The onclick action for this action item.
      type: object
    CardHeader:
      properties:
        imageStyle:
          description: The image's type (for example, square border or circular border).
          enum:
            - IMAGE_STYLE_UNSPECIFIED
            - IMAGE
            - AVATAR
          type: string
        imageUrl:
          description: The URL of the image in the card header.
          type: string
        subtitle:
          description: The subtitle of the card header.
          type: string
        title:
          description: "The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each takes up one line. If only the title is specified, it takes up both lines."
          type: string
      type: object
    CardWithId:
      description: A [card](https://developers.google.com/chat/api/reference/rest/v1/cards) in a Google Chat message. Only Chat apps can create cards. If your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users), the message can't contain cards. [Card builder](https://addons.gsuite.google.com/uikit/builder)
      properties:
        card:
          $ref: "#/components/schemas/GoogleAppsCardV1Card"
          description: A card. Maximum size is 32 KB.
        cardId:
          description: Required if the message contains multiple cards. A unique identifier for a card in a message.
          type: string
      type: object
    ChatAppLogEntry:
      description: JSON payload of error messages. If the Cloud Logging API is enabled, these error messages are logged to [Google Cloud Logging](https://cloud.google.com/logging/docs).
      properties:
        deployment:
          description: The deployment that caused the error. For Chat apps built in Apps Script, this is the deployment ID defined by Apps Script.
          type: string
        deploymentFunction:
          description: The unencrypted `callback_method` name that was running when the error was encountered.
          type: string
        error:
          $ref: "#/components/schemas/Status"
          description: The error code and message.
      type: object
    ChatClientDataSourceMarkup:
      description: "For a `SelectionInput` widget that uses a multiselect menu, a data source from Google Chat. The data source populates selection items for the multiselect menu. For example, a user can select Google Chat spaces that they're a member of. [Google Chat apps](https://developers.google.com/chat):"
      properties:
        spaceDataSource:
          $ref: "#/components/schemas/SpaceDataSource"
          description: Google Chat spaces that the user is a member of.
      type: object
    Color:
      description: "Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ..."
      properties:
        alpha:
          description: "The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0)."
          format: float
          type: number
        blue:
          description: The amount of blue in the color as a value in the interval [0, 1].
          format: float
          type: number
        green:
          description: The amount of green in the color as a value in the interval [0, 1].
          format: float
          type: number
        red:
          description: The amount of red in the color as a value in the interval [0, 1].
          format: float
          type: number
      type: object
    CommonEventObject:
      description: Represents information about the user's client, such as locale, host app, and platform. For Chat apps, `CommonEventObject` includes data submitted by users interacting with cards, like data entered in [dialogs](https://developers.google.com/chat/how-tos/dialogs).
      properties:
        formInputs:
          additionalProperties:
            $ref: "#/components/schemas/Inputs"
          description: A map containing the values that a user inputs in a widget from a card or dialog. The map keys are the string IDs assigned to each widget, and the values represent inputs to the widget. For details, see [Process information inputted by users](https://developers.google.com/chat/ui/read-form-data).
          type: object
        hostApp:
          description: The hostApp enum which indicates the app the add-on is invoked from. Always `CHAT` for Chat apps.
          enum:
            - UNSPECIFIED_HOST_APP
            - GMAIL
            - CALENDAR
            - DRIVE
            - DEMO
            - DOCS
            - MEET
            - SHEETS
            - SLIDES
            - DRAWINGS
            - CHAT
            - CHAT_IN_GMAIL
          type: string
        invokedFunction:
          description: Name of the invoked function associated with the widget. Only set for Chat apps.
          type: string
        parameters:
          additionalProperties:
            type: string
          description: Custom [parameters](/chat/api/reference/rest/v1/cards#ActionParameter) passed to the invoked function. Both keys and values must be strings.
          type: object
        platform:
          description: The platform enum which indicates the platform where the event originates (`WEB`, `IOS`, or `ANDROID`). Not supported by Chat apps.
          enum:
            - UNKNOWN_PLATFORM
            - WEB
            - IOS
            - ANDROID
          type: string
        timeZone:
          $ref: "#/components/schemas/TimeZone"
          description: The timezone ID and offset from Coordinated Universal Time (UTC). Only supported for the event types [`CARD_CLICKED`](https://developers.google.com/chat/api/reference/rest/v1/EventType#ENUM_VALUES.CARD_CLICKED) and [`SUBMIT_DIALOG`](https://developers.google.com/chat/api/reference/rest/v1/DialogEventType#ENUM_VALUES.SUBMIT_DIALOG).
        userLocale:
          description: The full `locale.displayName` in the format of [ISO 639 language code]-[ISO 3166 country/region code] such as "en-US".
          type: string
      type: object
    CompleteImportSpaceRequest:
      description: Request message for completing the import process for a space.
      properties: {}
      type: object
    CompleteImportSpaceResponse:
      properties:
        space:
          $ref: "#/components/schemas/Space"
          description: The import mode space.
      type: object
    CustomEmoji:
      description: Represents a custom emoji.
      properties:
        uid:
          description: Unique key for the custom emoji resource.
          type: string
      type: object
    DateInput:
      description: Date input values.
      properties:
        msSinceEpoch:
          description: Time since epoch time, in milliseconds.
          format: int64
          type: string
      type: object
    DateTimeInput:
      description: Date and time input values.
      properties:
        hasDate:
          description: Whether the `datetime` input includes a calendar date.
          type: boolean
        hasTime:
          description: Whether the `datetime` input includes a timestamp.
          type: boolean
        msSinceEpoch:
          description: Time since epoch time, in milliseconds.
          format: int64
          type: string
      type: object
    DeletionMetadata:
      description: Information about a deleted message. A message is deleted when `delete_time` is set.
      properties:
        deletionType:
          description: Indicates who deleted the message.
          enum:
            - DELETION_TYPE_UNSPECIFIED
            - CREATOR
            - SPACE_OWNER
            - ADMIN
            - APP_MESSAGE_EXPIRY
            - CREATOR_VIA_APP
            - SPACE_OWNER_VIA_APP
          type: string
      type: object
    DeprecatedEvent:
      description: A Google Chat app interaction event. To learn about interaction events, see [Receive and respond to interactions with your Google Chat app](https://developers.google.com/chat/api/guides/message-formats). To learn about event types and for example event payloads, see [Types of Google Chat app interaction events](https://developers.google.com/chat/api/guides/message-formats/events).
      properties:
        action:
          $ref: "#/components/schemas/FormAction"
          description: For `CARD_CLICKED` interaction events, the form action data associated when a user clicks a card or dialog. To learn more, see [Read form data input by users on cards](https://developers.google.com/chat/ui/read-form-data).
        common:
          $ref: "#/components/schemas/CommonEventObject"
          description: Represents information about the user's client, such as locale, host app, and platform. For Chat apps, `CommonEventObject` includes information submitted by users interacting with [dialogs](https://developers.google.com/chat/how-tos/dialogs), like data entered on a card.
        configCompleteRedirectUrl:
          description: The URL the Chat app should redirect the user to after they have completed an authorization or configuration flow outside of Google Chat. For more information, see [Connect a Chat app with other services & tools](https://developers.google.com/chat/how-tos/connect-web-services-tools).
          type: string
        dialogEventType:
          description: The type of [dialog](https://developers.google.com/chat/how-tos/dialogs) interaction event received.
          enum:
            - TYPE_UNSPECIFIED
            - REQUEST_DIALOG
            - SUBMIT_DIALOG
            - CANCEL_DIALOG
          type: string
        eventTime:
          description: The timestamp indicating when the interaction event occurred.
          format: google-datetime
          type: string
        isDialogEvent:
          description: For `CARD_CLICKED` interaction events, whether the user interacted with a [dialog](https://developers.google.com/chat/how-tos/dialogs).
          type: boolean
        message:
          $ref: "#/components/schemas/Message"
          description: The message that triggered the interaction event, if applicable.
        space:
          $ref: "#/components/schemas/Space"
          description: The space in which the interaction event occurred.
        threadKey:
          description: The Chat app-defined key for the thread related to the interaction event. See [`spaces.messages.thread.threadKey`](/chat/api/reference/rest/v1/spaces.messages#Thread.FIELDS.thread_key) for more information.
          type: string
        token:
          description: A secret value that legacy Chat apps can use to verify if a request is from Google. Google randomly generates the token, and its value remains static. You can obtain, revoke, or regenerate the token from the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat) in the Google Cloud Console. Modern Chat apps don't use this field. It is absent from API responses and the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat).
          type: string
        type:
          description: The type of interaction event. For details, see [Types of Google Chat app interaction events](https://developers.google.com/chat/api/guides/message-formats/events).
          enum:
            - UNSPECIFIED
            - MESSAGE
            - ADDED_TO_SPACE
            - REMOVED_FROM_SPACE
            - CARD_CLICKED
            - WIDGET_UPDATED
          type: string
        user:
          $ref: "#/components/schemas/User"
          description: The user that triggered the interaction event.
      type: object
    Dialog:
      description: Wrapper around the card body of the dialog.
      properties:
        body:
          $ref: "#/components/schemas/GoogleAppsCardV1Card"
          description: "Input only. Body of the dialog, which is rendered in a modal. Google Chat apps don't support the following card entities: `DateTimePicker`, `OnChangeAction`."
      type: object
    DialogAction:
      description: Contains a [dialog](https://developers.google.com/chat/how-tos/dialogs) and request status code.
      properties:
        actionStatus:
          $ref: "#/components/schemas/ActionStatus"
          description: Input only. Status for a request to either invoke or submit a [dialog](https://developers.google.com/chat/how-tos/dialogs). Displays a status and message to users, if necessary. For example, in case of an error or success.
        dialog:
          $ref: "#/components/schemas/Dialog"
          description: Input only. [Dialog](https://developers.google.com/chat/how-tos/dialogs) for the request.
      type: object
    DriveDataRef:
      description: A reference to the data of a drive attachment.
      properties:
        driveFileId:
          description: The ID for the drive file. Use with the Drive API.
          type: string
      type: object
    Emoji:
      description: An emoji that is used as a reaction to a message.
      properties:
        customEmoji:
          $ref: "#/components/schemas/CustomEmoji"
          description: Output only. A custom emoji.
          readOnly: true
        unicode:
          description: A basic emoji represented by a unicode string.
          type: string
      type: object
    EmojiReactionSummary:
      description: The number of people who reacted to a message with a specific emoji.
      properties:
        emoji:
          $ref: "#/components/schemas/Emoji"
          description: Emoji associated with the reactions.
        reactionCount:
          description: The total number of reactions using the associated emoji.
          format: int32
          type: integer
      type: object
    Empty:
      description: "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }"
      properties: {}
      type: object
    FormAction:
      description: A form action describes the behavior when the form is submitted. For example, you can invoke Apps Script to handle the form.
      properties:
        actionMethodName:
          description: The method name is used to identify which part of the form triggered the form submission. This information is echoed back to the Chat app as part of the card click event. You can use the same method name for several elements that trigger a common behavior.
          type: string
        parameters:
          description: List of action parameters.
          items:
            $ref: "#/components/schemas/ActionParameter"
          type: array
      type: object
    GoogleAppsCardV1Action:
      description: "An action that describes the behavior when the form is submitted. For example, you can invoke an Apps Script script to handle the form. If the action is triggered, the form values are sent to the server. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        function:
          description: A custom function to invoke when the containing element is clicked or othrwise activated. For example usage, see [Create interactive cards](https://developers.google.com/chat/how-tos/cards-onclick).
          type: string
        interaction:
          description: "Optional. Required when opening a [dialog](https://developers.google.com/chat/how-tos/dialogs). What to do in response to an interaction with a user, such as a user clicking a button in a card message. If unspecified, the app responds by executing an `action`—like opening a link or running a function—as normal. By specifying an `interaction`, the app can respond in special interactive ways. For example, by setting `interaction` to `OPEN_DIALOG`, the app can open a [dialog](https://developers.google.com/chat/how-tos/dialogs). When specified, a loading indicator isn't shown. If specified for an add-on, the entire card is stripped and nothing is shown in the client. [Google Chat apps](https://developers.google.com/chat):"
          enum:
            - INTERACTION_UNSPECIFIED
            - OPEN_DIALOG
          type: string
        loadIndicator:
          description: Specifies the loading indicator that the action displays while making the call to the action.
          enum:
            - SPINNER
            - NONE
          type: string
        parameters:
          description: List of action parameters.
          items:
            $ref: "#/components/schemas/GoogleAppsCardV1ActionParameter"
          type: array
        persistValues:
          description: Indicates whether form values persist after the action. The default value is `false`. If `true`, form values remain after the action is triggered. To let the user make changes while the action is being processed, set [`LoadIndicator`](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) to `NONE`. For [card messages](https://developers.google.com/chat/api/guides/v1/messages/create#create) in Chat apps, you must also set the action's [`ResponseType`](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages#responsetype) to `UPDATE_MESSAGE` and use the same [`card_id`](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages#CardWithId) from the card that contained the action. If `false`, the form values are cleared when the action is triggered. To prevent the user from making changes while the action is being processed, set [`LoadIndicator`](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) to `SPINNER`.
          type: boolean
      type: object
    GoogleAppsCardV1ActionParameter:
      description: "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze one day, or snooze next week. You might use `action method = snooze()`, passing the snooze type and snooze time in the list of string parameters. To learn more, see [`CommonEventObject`](https://developers.google.com/chat/api/reference/rest/v1/Event#commoneventobject). [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        key:
          description: The name of the parameter for the action script.
          type: string
        value:
          description: The value of the parameter.
          type: string
      type: object
    GoogleAppsCardV1BorderStyle:
      description: "The style options for the border of a card or widget, including the border type and color. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        cornerRadius:
          description: The corner radius for the border.
          format: int32
          type: integer
        strokeColor:
          $ref: "#/components/schemas/Color"
          description: The colors to use when the type is `BORDER_TYPE_STROKE`.
        type:
          description: The border type.
          enum:
            - BORDER_TYPE_UNSPECIFIED
            - NO_BORDER
            - STROKE
          type: string
      type: object
    GoogleAppsCardV1Button:
      description: "A text, icon, or text and icon button that users can click. For an example in Google Chat apps, see [Button list](https://developers.google.com/chat/ui/widgets/button-list). To make an image a clickable button, specify an `Image` (not an `ImageComponent`) and set an `onClick` action. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        altText:
          description: "The alternative text that's used for accessibility. Set descriptive text that lets users know what the button does. For example, if a button opens a hyperlink, you might write: \"Opens a new browser tab and navigates to the Google Chat developer documentation at https://developers.google.com/chat\"."
          type: string
        color:
          $ref: "#/components/schemas/Color"
          description: 'If set, the button is filled with a solid background color and the font color changes to maintain contrast with the background color. For example, setting a blue background likely results in white text. If unset, the image background is white and the font color is blue. For red, green, and blue, the value of each field is a `float` number that you can express in either of two ways: as a number between 0 and 255 divided by 255 (153/255), or as a value between 0 and 1 (0.6). 0 represents the absence of a color and 1 or 255/255 represent the full presence of that color on the RGB scale. Optionally set `alpha`, which sets a level of transparency using this equation: ``` pixel color = alpha * (this color) + (1.0 - alpha) * (background color) ``` For `alpha`, a value of `1` corresponds with a solid color, and a value of `0` corresponds with a completely transparent color. For example, the following color represents a half transparent red: ``` "color": { "red": 1, "green": 0, "blue": 0, "alpha": 0.5 } ```'
        disabled:
          description: If `true`, the button is displayed in an inactive state and doesn't respond to user actions.
          type: boolean
        icon:
          $ref: "#/components/schemas/GoogleAppsCardV1Icon"
          description: The icon image. If both `icon` and `text` are set, then the icon appears before the text.
        onClick:
          $ref: "#/components/schemas/GoogleAppsCardV1OnClick"
          description: Required. The action to perform when a user clicks the button, such as opening a hyperlink or running a custom function.
        text:
          description: The text displayed inside the button.
          type: string
      type: object
    GoogleAppsCardV1ButtonList:
      description: "A list of buttons layed out horizontally. For an example in Google Chat apps, see [Button list](https://developers.google.com/chat/ui/widgets/button-list). [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        buttons:
          description: An array of buttons.
          items:
            $ref: "#/components/schemas/GoogleAppsCardV1Button"
          type: array
      type: object
    GoogleAppsCardV1Card:
      description: 'A card interface displayed in a Google Chat message or Google Workspace Add-on. Cards support a defined layout, interactive UI elements like buttons, and rich media like images. Use cards to present detailed information, gather information from users, and guide users to take a next step. [Card builder](https://addons.gsuite.google.com/uikit/builder) To learn how to build cards, see the following documentation: * For Google Chat apps, see [Design dynamic, interactive, and consistent UIs with cards](https://developers.google.com/chat/ui). * For Google Workspace Add-ons, see [Card-based interfaces](https://developers.google.com/apps-script/add-ons/concepts/cards). **Example: Card message for a Google Chat app** ![Example contact card](https://developers.google.com/chat/images/card_api_reference.png) To create the sample card message in Google Chat, use the following JSON: ``` { "cardsV2": [ { "cardId": "unique-card-id", "card": { "header": { "title": "Sasha", "subtitle": "Software Engineer", "imageUrl": "https://developers.google.com/chat/images/quickstart-app-avatar.png", "imageType": "CIRCLE", "imageAltText": "Avatar for Sasha", }, "sections": [ { "header": "Contact Info", "collapsible": true, "uncollapsibleWidgetsCount": 1, "widgets": [ { "decoratedText": { "startIcon": { "knownIcon": "EMAIL", }, "text": "sasha@example.com", } }, { "decoratedText": { "startIcon": { "knownIcon": "PERSON", }, "text": "Online", }, }, { "decoratedText": { "startIcon": { "knownIcon": "PHONE", }, "text": "+1 (555) 555-1234", } }, { "buttonList": { "buttons": [ { "text": "Share", "onClick": { "openLink": { "url": "https://example.com/share", } } }, { "text": "Edit", "onClick": { "action": { "function": "goToView", "parameters": [ { "key": "viewType", "value": "EDIT", } ], } } }, ], } }, ], }, ], }, } ], } ```'
      properties:
        cardActions:
          description: "The card's actions. Actions are added to the card's toolbar menu. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons): For example, the following JSON constructs a card action menu with `Settings` and `Send Feedback` options: ``` \"card_actions\": [ { \"actionLabel\": \"Settings\", \"onClick\": { \"action\": { \"functionName\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"SETTING\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } }, { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ] ```"
          items:
            $ref: "#/components/schemas/GoogleAppsCardV1CardAction"
          type: array
        displayStyle:
          description: "In Google Workspace Add-ons, sets the display properties of the `peekCardHeader`. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons):"
          enum:
            - DISPLAY_STYLE_UNSPECIFIED
            - PEEK
            - REPLACE
          type: string
        fixedFooter:
          $ref: "#/components/schemas/GoogleAppsCardV1CardFixedFooter"
          description: "The fixed footer shown at the bottom of this card. Setting `fixedFooter` without specifying a `primaryButton` or a `secondaryButton` causes an error. For Chat apps, you can use fixed footers in [dialogs](https://developers.google.com/chat/how-tos/dialogs), but not [card messages](https://developers.google.com/chat/api/guides/v1/messages/create#create). [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
        header:
          $ref: "#/components/schemas/GoogleAppsCardV1CardHeader"
          description: The header of the card. A header usually contains a leading image and a title. Headers always appear at the top of a card.
        name:
          description: "Name of the card. Used as a card identifier in card navigation. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons):"
          type: string
        peekCardHeader:
          $ref: "#/components/schemas/GoogleAppsCardV1CardHeader"
          description: "When displaying contextual content, the peek card header acts as a placeholder so that the user can navigate forward between the homepage cards and the contextual cards. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons):"
        sectionDividerStyle:
          description: The divider style between sections.
          enum:
            - DIVIDER_STYLE_UNSPECIFIED
            - SOLID_DIVIDER
            - NO_DIVIDER
          type: string
        sections:
          description: Contains a collection of widgets. Each section has its own, optional header. Sections are visually separated by a line divider. For an example in Google Chat apps, see [Card section](https://developers.google.com/chat/ui/widgets/card-section).
          items:
            $ref: "#/components/schemas/GoogleAppsCardV1Section"
          type: array
      type: object
    GoogleAppsCardV1CardAction:
      description: "A card action is the action associated with the card. For example, an invoice card might include actions such as delete invoice, email invoice, or open the invoice in a browser. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons):"
      properties:
        actionLabel:
          description: The label that displays as the action menu item.
          type: string
        onClick:
          $ref: "#/components/schemas/GoogleAppsCardV1OnClick"
          description: The `onClick` action for this action item.
      type: object
    GoogleAppsCardV1CardFixedFooter:
      description: "A persistent (sticky) footer that that appears at the bottom of the card. Setting `fixedFooter` without specifying a `primaryButton` or a `secondaryButton` causes an error. For Chat apps, you can use fixed footers in [dialogs](https://developers.google.com/chat/how-tos/dialogs), but not [card messages](https://developers.google.com/chat/api/guides/v1/messages/create#create). For an example in Google Chat apps, see [Card footer](https://developers.google.com/chat/ui/widgets/card-fixed-footer). [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        primaryButton:
          $ref: "#/components/schemas/GoogleAppsCardV1Button"
          description: The primary button of the fixed footer. The button must be a text button with text and color set.
        secondaryButton:
          $ref: "#/components/schemas/GoogleAppsCardV1Button"
          description: The secondary button of the fixed footer. The button must be a text button with text and color set. If `secondaryButton` is set, you must also set `primaryButton`.
      type: object
    GoogleAppsCardV1CardHeader:
      description: "Represents a card header. For an example in Google Chat apps, see [Card header](https://developers.google.com/chat/ui/widgets/card-header). [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        imageAltText:
          description: The alternative text of this image that's used for accessibility.
          type: string
        imageType:
          description: "The shape used to crop the image. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
          enum:
            - SQUARE
            - CIRCLE
          type: string
        imageUrl:
          description: The HTTPS URL of the image in the card header.
          type: string
        subtitle:
          description: The subtitle of the card header. If specified, appears on its own line below the `title`.
          type: string
        title:
          description: "Required. The title of the card header. The header has a fixed height: if both a title and subtitle are specified, each takes up one line. If only the title is specified, it takes up both lines."
          type: string
      type: object
    GoogleAppsCardV1Column:
      description: "A column. [Google Chat apps](https://developers.google.com/chat):"
      properties:
        horizontalAlignment:
          description: Specifies whether widgets align to the left, right, or center of a column.
          enum:
            - HORIZONTAL_ALIGNMENT_UNSPECIFIED
            - START
            - CENTER
            - END
          type: string
        horizontalSizeStyle:
          description: "Specifies how a column fills the width of the card. [Google Chat apps](https://developers.google.com/chat):"
          enum:
            - HORIZONTAL_SIZE_STYLE_UNSPECIFIED
            - FILL_AVAILABLE_SPACE
            - FILL_MINIMUM_SPACE
          type: string
        verticalAlignment:
          description: "Specifies whether widgets align to the top, bottom, or center of a column. [Google Chat apps](https://developers.google.com/chat):"
          enum:
            - VERTICAL_ALIGNMENT_UNSPECIFIED
            - CENTER
            - TOP
            - BOTTOM
          type: string
        widgets:
          description: An array of widgets included in a column. Widgets appear in the order that they are specified.
          items:
            $ref: "#/components/schemas/GoogleAppsCardV1Widgets"
          type: array
      type: object
    GoogleAppsCardV1Columns:
      description: "The `Columns` widget displays up to 2 columns in a card or dialog. You can add widgets to each column; the widgets appear in the order that they are specified. For an example in Google Chat apps, see [Columns](https://developers.google.com/chat/ui/widgets/columns). The height of each column is determined by the taller column. For example, if the first column is taller than the second column, both columns have the height of the first column. Because each column can contain a different number of widgets, you can't define rows or align widgets between the columns. Columns are displayed side-by-side. You can customize the width of each column using the `HorizontalSizeStyle` field. If the user's screen width is too narrow, the second column wraps below the first: * On web, the second column wraps if the screen width is less than or equal to 480 pixels. * On iOS devices, the second column wraps if the screen width is less than or equal to 300 pt. * On Android devices, the second column wraps if the screen width is less than or equal to 320 dp. To include more than 2 columns, or to use rows, use the `Grid` widget. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend): Columns for Google Workspace Add-ons are in [Developer Preview](https://developers.google.com/workspace/preview)."
      properties:
        columnItems:
          description: An array of columns. You can include up to 2 columns in a card or dialog.
          items:
            $ref: "#/components/schemas/GoogleAppsCardV1Column"
          type: array
      type: object
    GoogleAppsCardV1DateTimePicker:
      description: "Lets users input a date, a time, or both a date and a time. For an example in Google Chat apps, see [Date time picker](https://developers.google.com/chat/ui/widgets/date-time-picker). Users can input text or use the picker to select dates and times. If users input an invalid date or time, the picker shows an error that prompts users to input the information correctly. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        label:
          description: The text that prompts users to input a date, a time, or a date and time. For example, if users are scheduling an appointment, use a label such as `Appointment date` or `Appointment date and time`.
          type: string
        name:
          description: The name by which the `DateTimePicker` is identified in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
          type: string
        onChangeAction:
          $ref: "#/components/schemas/GoogleAppsCardV1Action"
          description: Triggered when the user clicks **Save** or **Clear** from the `DateTimePicker` interface.
        timezoneOffsetDate:
          description: The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch` is displayed in the specified time zone. If unset, the value defaults to the user's time zone setting.
          format: int32
          type: integer
        type:
          description: Whether the widget supports inputting a date, a time, or the date and time.
          enum:
            - DATE_AND_TIME
            - DATE_ONLY
            - TIME_ONLY
          type: string
        valueMsEpoch:
          description: "The default value displayed in the widget, in milliseconds since [Unix epoch time](https://en.wikipedia.org/wiki/Unix_time). Specify the value based on the type of picker (`DateTimePickerType`): * `DATE_AND_TIME`: a calendar date and time in UTC. For example, to represent January 1, 2023 at 12:00 PM UTC, use `1672574400000`. * `DATE_ONLY`: a calendar date at 00:00:00 UTC. For example, to represent January 1, 2023, use `1672531200000`. * `TIME_ONLY`: a time in UTC. For example, to represent 12:00 PM, use `43200000` (or `12 * 60 * 60 * 1000`)."
          format: int64
          type: string
      type: object
    GoogleAppsCardV1DecoratedText:
      description: "A widget that displays text with optional decorations such as a label above or below the text, an icon in front of the text, a selection widget, or a button after the text. For an example in Google Chat apps, see [Decorated text](https://developers.google.com/chat/ui/widgets/decorated-text). [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        bottomLabel:
          description: The text that appears below `text`. Always wraps.
          type: string
        button:
          $ref: "#/components/schemas/GoogleAppsCardV1Button"
          description: A button that a user can click to trigger an action.
        endIcon:
          $ref: "#/components/schemas/GoogleAppsCardV1Icon"
          description: An icon displayed after the text. Supports [built-in](https://developers.google.com/chat/format-messages#builtinicons) and [custom](https://developers.google.com/chat/format-messages#customicons) icons.
        icon:
          $ref: "#/components/schemas/GoogleAppsCardV1Icon"
          deprecated: true
          description: Deprecated in favor of `startIcon`.
        onClick:
          $ref: "#/components/schemas/GoogleAppsCardV1OnClick"
          description: This action is triggered when users click `topLabel` or `bottomLabel`.
        startIcon:
          $ref: "#/components/schemas/GoogleAppsCardV1Icon"
          description: The icon displayed in front of the text.
        switchControl:
          $ref: "#/components/schemas/GoogleAppsCardV1SwitchControl"
          description: A switch widget that a user can click to change its state and trigger an action.
        text:
          description: Required. The primary text. Supports simple formatting. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
          type: string
        topLabel:
          description: The text that appears above `text`. Always truncates.
          type: string
        wrapText:
          description: The wrap text setting. If `true`, the text wraps and displays on multiple lines. Otherwise, the text is truncated. Only applies to `text`, not `topLabel` and `bottomLabel`.
          type: boolean
      type: object
    GoogleAppsCardV1Divider:
      description: 'Displays a divider between widgets as a horizontal line. For an example in Google Chat apps, see [Divider](https://developers.google.com/chat/ui/widgets/divider). [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend): For example, the following JSON creates a divider: ``` "divider": {} ```'
      properties: {}
      type: object
    GoogleAppsCardV1Grid:
      description: 'Displays a grid with a collection of items. Items can only include text or images. For responsive columns, or to include more than text or images, use `Columns`. For an example in Google Chat apps, see [Grid](https://developers.google.com/chat/ui/widgets/grid). A grid supports any number of columns and items. The number of rows is determined by items divided by columns. A grid with 10 items and 2 columns has 5 rows. A grid with 11 items and 2 columns has 6 rows. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend): For example, the following JSON creates a 2 column grid with a single item: ``` "grid": { "title": "A fine collection of items", "columnCount": 2, "borderStyle": { "type": "STROKE", "cornerRadius": 4 }, "items": [ { "image": { "imageUri": "https://www.example.com/image.png", "cropStyle": { "type": "SQUARE" }, "borderStyle": { "type": "STROKE" } }, "title": "An item", "textAlignment": "CENTER" } ], "onClick": { "openLink": { "url": "https://www.example.com" } } } ```'
      properties:
        borderStyle:
          $ref: "#/components/schemas/GoogleAppsCardV1BorderStyle"
          description: The border style to apply to each grid item.
        columnCount:
          description: The number of columns to display in the grid. A default value is used if this field isn't specified, and that default value is different depending on where the grid is shown (dialog versus companion).
          format: int32
          type: integer
        items:
          description: The items to display in the grid.
          items:
            $ref: "#/components/schemas/GoogleAppsCardV1GridItem"
          type: array
        onClick:
          $ref: "#/components/schemas/GoogleAppsCardV1OnClick"
          description: This callback is reused by each individual grid item, but with the item's identifier and index in the items list added to the callback's parameters.
        title:
          description: The text that displays in the grid header.
          type: string
      type: object
    GoogleAppsCardV1GridItem:
      description: "Represents an item in a grid layout. Items can contain text, an image, or both text and an image. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        id:
          description: A user-specified identifier for this grid item. This identifier is returned in the parent grid's `onClick` callback parameters.
          type: string
        image:
          $ref: "#/components/schemas/GoogleAppsCardV1ImageComponent"
          description: The image that displays in the grid item.
        layout:
          description: The layout to use for the grid item.
          enum:
            - GRID_ITEM_LAYOUT_UNSPECIFIED
            - TEXT_BELOW
            - TEXT_ABOVE
          type: string
        subtitle:
          description: The grid item's subtitle.
          type: string
        title:
          description: The grid item's title.
          type: string
      type: object
    GoogleAppsCardV1Icon:
      description: "An icon displayed in a widget on a card. For an example in Google Chat apps, see [Icon](https://developers.google.com/chat/ui/widgets/icon). Supports [built-in](https://developers.google.com/chat/format-messages#builtinicons) and [custom](https://developers.google.com/chat/format-messages#customicons) icons. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        altText:
          description: Optional. A description of the icon used for accessibility. If unspecified, the default value `Button` is provided. As a best practice, you should set a helpful description for what the icon displays, and if applicable, what it does. For example, `A user's account portrait`, or `Opens a new browser tab and navigates to the Google Chat developer documentation at https://developers.google.com/chat`. If the icon is set in a `Button`, the `altText` appears as helper text when the user hovers over the button. However, if the button also sets `text`, the icon's `altText` is ignored.
          type: string
        iconUrl:
          description: 'Display a custom icon hosted at an HTTPS URL. For example: ``` "iconUrl": "https://developers.google.com/chat/images/quickstart-app-avatar.png" ``` Supported file types include `.png` and `.jpg`.'
          type: string
        imageType:
          description: The crop style applied to the image. In some cases, applying a `CIRCLE` crop causes the image to be drawn larger than a built-in icon.
          enum:
            - SQUARE
            - CIRCLE
          type: string
        knownIcon:
          description: Display one of the built-in icons provided by Google Workspace. For example, to display an airplane icon, specify `AIRPLANE`. For a bus, specify `BUS`. For a full list of supported icons, see [built-in icons](https://developers.google.com/chat/format-messages#builtinicons).
          type: string
      type: object
    GoogleAppsCardV1Image:
      description: "An image that is specified by a URL and can have an `onClick` action. For an example, see [Image](https://developers.google.com/chat/ui/widgets/image). [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        altText:
          description: The alternative text of this image that's used for accessibility.
          type: string
        imageUrl:
          description: "The HTTPS URL that hosts the image. For example: ``` https://developers.google.com/chat/images/quickstart-app-avatar.png ```"
          type: string
        onClick:
          $ref: "#/components/schemas/GoogleAppsCardV1OnClick"
          description: When a user clicks the image, the click triggers this action.
      type: object
    GoogleAppsCardV1ImageComponent:
      description: "Represents an image. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        altText:
          description: The accessibility label for the image.
          type: string
        borderStyle:
          $ref: "#/components/schemas/GoogleAppsCardV1BorderStyle"
          description: The border style to apply to the image.
        cropStyle:
          $ref: "#/components/schemas/GoogleAppsCardV1ImageCropStyle"
          description: The crop style to apply to the image.
        imageUri:
          description: The image URL.
          type: string
      type: object
    GoogleAppsCardV1ImageCropStyle:
      description: "Represents the crop style applied to an image. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend): For example, here's how to apply a 16:9 aspect ratio: ``` cropStyle { \"type\": \"RECTANGLE_CUSTOM\", \"aspectRatio\": 16/9 } ```"
      properties:
        aspectRatio:
          description: "The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`. For example, here's how to apply a 16:9 aspect ratio: ``` cropStyle { \"type\": \"RECTANGLE_CUSTOM\", \"aspectRatio\": 16/9 } ```"
          format: double
          type: number
        type:
          description: The crop type.
          enum:
            - IMAGE_CROP_TYPE_UNSPECIFIED
            - SQUARE
            - CIRCLE
            - RECTANGLE_CUSTOM
            - RECTANGLE_4_3
          type: string
      type: object
    GoogleAppsCardV1OnClick:
      description: "Represents how to respond when users click an interactive element on a card, such as a button. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        action:
          $ref: "#/components/schemas/GoogleAppsCardV1Action"
          description: If specified, an action is triggered by this `onClick`.
        card:
          $ref: "#/components/schemas/GoogleAppsCardV1Card"
          description: "A new card is pushed to the card stack after clicking if specified. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons):"
        openDynamicLinkAction:
          $ref: "#/components/schemas/GoogleAppsCardV1Action"
          description: "An add-on triggers this action when the action needs to open a link. This differs from the `open_link` above in that this needs to talk to server to get the link. Thus some preparation work is required for web client to do before the open link action response comes back. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons):"
        openLink:
          $ref: "#/components/schemas/GoogleAppsCardV1OpenLink"
          description: If specified, this `onClick` triggers an open link action.
      type: object
    GoogleAppsCardV1OpenLink:
      description: "Represents an `onClick` event that opens a hyperlink. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        onClose:
          description: "Whether the client forgets about a link after opening it, or observes it until the window closes. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons):"
          enum:
            - NOTHING
            - RELOAD
          type: string
        openAs:
          description: "How to open a link. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons):"
          enum:
            - FULL_SIZE
            - OVERLAY
          type: string
        url:
          description: The URL to open.
          type: string
      type: object
    GoogleAppsCardV1PlatformDataSource:
      description: "For a `SelectionInput` widget that uses a multiselect menu, a data source from Google Workspace. Used to populate items in a multiselect menu. [Google Chat apps](https://developers.google.com/chat):"
      properties:
        commonDataSource:
          description: A data source shared by all Google Workspace applications, such as users in a Google Workspace organization.
          enum:
            - UNKNOWN
            - USER
          type: string
        hostAppDataSource:
          $ref: "#/components/schemas/HostAppDataSourceMarkup"
          description: A data source that's unique to a Google Workspace host application, such spaces in Google Chat.
      type: object
    GoogleAppsCardV1Section:
      description: "A section contains a collection of widgets that are rendered vertically in the order that they're specified. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        collapsible:
          description: Indicates whether this section is collapsible. Collapsible sections hide some or all widgets, but users can expand the section to reveal the hidden widgets by clicking **Show more**. Users can hide the widgets again by clicking **Show less**. To determine which widgets are hidden, specify `uncollapsibleWidgetsCount`.
          type: boolean
        header:
          description: Text that appears at the top of a section. Supports simple HTML formatted text. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
          type: string
        uncollapsibleWidgetsCount:
          description: The number of uncollapsible widgets which remain visible even when a section is collapsed. For example, when a section contains five widgets and the `uncollapsibleWidgetsCount` is set to `2`, the first two widgets are always shown and the last three are collapsed by default. The `uncollapsibleWidgetsCount` is taken into account only when `collapsible` is `true`.
          format: int32
          type: integer
        widgets:
          description: All the widgets in the section. Must contain at least one widget.
          items:
            $ref: "#/components/schemas/GoogleAppsCardV1Widget"
          type: array
      type: object
    GoogleAppsCardV1SelectionInput:
      description: "A widget that creates one or more UI items that users can select. For example, a dropdown menu or checkboxes. You can use this widget to collect data that can be predicted or enumerated. For an example in Google Chat apps, see [Selection input](https://developers.google.com/chat/ui/widgets/selection-input). Chat apps can process the value of items that users select or input. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data). To collect undefined or abstract data from users, use the TextInput widget. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        externalDataSource:
          $ref: "#/components/schemas/GoogleAppsCardV1Action"
          description: An external data source, such as a relational data base.
        items:
          description: An array of selectable items. For example, an array of radio buttons or checkboxes. Supports up to 100 items.
          items:
            $ref: "#/components/schemas/GoogleAppsCardV1SelectionItem"
          type: array
        label:
          description: The text that appears above the selection input field in the user interface. Specify text that helps the user enter the information your app needs. For example, if users are selecting the urgency of a work ticket from a drop-down menu, the label might be "Urgency" or "Select urgency".
          type: string
        multiSelectMaxSelectedItems:
          description: For multiselect menus, the maximum number of items that a user can select. Minimum value is 1 item. If unspecified, defaults to 3 items.
          format: int32
          type: integer
        multiSelectMinQueryLength:
          description: For multiselect menus, the number of text characters that a user inputs before the Chat app queries autocomplete and displays suggested items in the menu. If unspecified, defaults to 0 characters for static data sources and 3 characters for external data sources.
          format: int32
          type: integer
        name:
          description: The name that identifies the selection input in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
          type: string
        onChangeAction:
          $ref: "#/components/schemas/GoogleAppsCardV1Action"
          description: If specified, the form is submitted when the selection changes. If not specified, you must specify a separate button that submits the form. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
        platformDataSource:
          $ref: "#/components/schemas/GoogleAppsCardV1PlatformDataSource"
          description: A data source from Google Workspace.
        type:
          description: The type of items that are displayed to users in a `SelectionInput` widget. Selection types support different types of interactions. For example, users can select one or more checkboxes, but they can only select one value from a dropdown menu.
          enum:
            - CHECK_BOX
            - RADIO_BUTTON
            - SWITCH
            - DROPDOWN
            - MULTI_SELECT
          type: string
      type: object
    GoogleAppsCardV1SelectionItem:
      description: "An item that users can select in a selection input, such as a checkbox or switch. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        bottomText:
          description: For multiselect menus, a text description or label that's displayed below the item's `text` field.
          type: string
        selected:
          description: Whether the item is selected by default. If the selection input only accepts one value (such as for radio buttons or a dropdown menu), only set this field for one item.
          type: boolean
        startIconUri:
          description: For multiselect menus, the URL for the icon displayed next to the item's `text` field. Supports PNG and JPEG files. Must be an `HTTPS` URL. For example, `https://developers.google.com/chat/images/quickstart-app-avatar.png`.
          type: string
        text:
          description: The text that identifies or describes the item to users.
          type: string
        value:
          description: The value associated with this item. The client should use this as a form input value. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
          type: string
      type: object
    GoogleAppsCardV1SuggestionItem:
      description: "One suggested value that users can enter in a text input field. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        text:
          description: The value of a suggested input to a text input field. This is equivalent to what users enter themselves.
          type: string
      type: object
    GoogleAppsCardV1Suggestions:
      description: "Suggested values that users can enter. These values appear when users click inside the text input field. As users type, the suggested values dynamically filter to match what the users have typed. For example, a text input field for programming language might suggest Java, JavaScript, Python, and C++. When users start typing `Jav`, the list of suggestions filters to show `Java` and `JavaScript`. Suggested values help guide users to enter values that your app can make sense of. When referring to JavaScript, some users might enter `javascript` and others `java script`. Suggesting `JavaScript` can standardize how users interact with your app. When specified, `TextInput.type` is always `SINGLE_LINE`, even if it's set to `MULTIPLE_LINE`. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        items:
          description: A list of suggestions used for autocomplete recommendations in text input fields.
          items:
            $ref: "#/components/schemas/GoogleAppsCardV1SuggestionItem"
          type: array
      type: object
    GoogleAppsCardV1SwitchControl:
      description: "Either a toggle-style switch or a checkbox inside a `decoratedText` widget. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend): Only supported in the `decoratedText` widget."
      properties:
        controlType:
          description: "How the switch appears in the user interface. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
          enum:
            - SWITCH
            - CHECKBOX
            - CHECK_BOX
          type: string
        name:
          description: The name by which the switch widget is identified in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
          type: string
        onChangeAction:
          $ref: "#/components/schemas/GoogleAppsCardV1Action"
          description: The action to perform when the switch state is changed, such as what function to run.
        selected:
          description: When `true`, the switch is selected.
          type: boolean
        value:
          description: The value entered by a user, returned as part of a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
          type: string
      type: object
    GoogleAppsCardV1TextInput:
      description: "A field in which users can enter text. Supports suggestions and on-change actions. For an example in Google Chat apps, see [Text input](https://developers.google.com/chat/ui/widgets/text-input). Chat apps receive and can process the value of entered text during form input events. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data). When you need to collect undefined or abstract data from users, use a text input. To collect defined or enumerated data from users, use the SelectionInput widget. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        autoCompleteAction:
          $ref: "#/components/schemas/GoogleAppsCardV1Action"
          description: "Optional. Specify what action to take when the text input field provides suggestions to users who interact with it. If unspecified, the suggestions are set by `initialSuggestions` and are processed by the client. If specified, the app takes the action specified here, such as running a custom function. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons):"
        hintText:
          description: Text that appears below the text input field meant to assist users by prompting them to enter a certain value. This text is always visible. Required if `label` is unspecified. Otherwise, optional.
          type: string
        initialSuggestions:
          $ref: "#/components/schemas/GoogleAppsCardV1Suggestions"
          description: "Suggested values that users can enter. These values appear when users click inside the text input field. As users type, the suggested values dynamically filter to match what the users have typed. For example, a text input field for programming language might suggest Java, JavaScript, Python, and C++. When users start typing `Jav`, the list of suggestions filters to show just `Java` and `JavaScript`. Suggested values help guide users to enter values that your app can make sense of. When referring to JavaScript, some users might enter `javascript` and others `java script`. Suggesting `JavaScript` can standardize how users interact with your app. When specified, `TextInput.type` is always `SINGLE_LINE`, even if it's set to `MULTIPLE_LINE`. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
        label:
          description: The text that appears above the text input field in the user interface. Specify text that helps the user enter the information your app needs. For example, if you are asking someone's name, but specifically need their surname, write `surname` instead of `name`. Required if `hintText` is unspecified. Otherwise, optional.
          type: string
        name:
          description: The name by which the text input is identified in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
          type: string
        onChangeAction:
          $ref: "#/components/schemas/GoogleAppsCardV1Action"
          description: What to do when a change occurs in the text input field. For example, a user adding to the field or deleting text. Examples of actions to take include running a custom function or opening a [dialog](https://developers.google.com/chat/how-tos/dialogs) in Google Chat.
        placeholderText:
          description: "Text that appears in the text input field when the field is empty. Use this text to prompt users to enter a value. For example, `Enter a number from 0 to 100`. [Google Chat apps](https://developers.google.com/chat):"
          type: string
        type:
          description: How a text input field appears in the user interface. For example, whether the field is single or multi-line.
          enum:
            - SINGLE_LINE
            - MULTIPLE_LINE
          type: string
        value:
          description: The value entered by a user, returned as part of a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
          type: string
      type: object
    GoogleAppsCardV1TextParagraph:
      description: "A paragraph of text that supports formatting. For an example in Google Chat apps, see [Text paragraph](https://developers.google.com/chat/ui/widgets/text-paragraph). For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting). [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):"
      properties:
        text:
          description: The text that's shown in the widget.
          type: string
      type: object
    GoogleAppsCardV1Widget:
      description: Each card is made up of widgets. A widget is a composite object that can represent one of text, images, buttons, and other object types.
      properties:
        buttonList:
          $ref: "#/components/schemas/GoogleAppsCardV1ButtonList"
          description: 'A list of buttons. For example, the following JSON creates two buttons. The first is a blue text button and the second is an image button that opens a link: ``` "buttonList": { "buttons": [ { "text": "Edit", "color": { "red": 0, "green": 0, "blue": 1, "alpha": 1 }, "disabled": true, }, { "icon": { "knownIcon": "INVITE", "altText": "check calendar" }, "onClick": { "openLink": { "url": "https://example.com/calendar" } } } ] } ```'
        columns:
          $ref: "#/components/schemas/GoogleAppsCardV1Columns"
          description: 'Displays up to 2 columns. To include more than 2 columns, or to use rows, use the `Grid` widget. For example, the following JSON creates 2 columns that each contain text paragraphs: ``` "columns": { "columnItems": [ { "horizontalSizeStyle": "FILL_AVAILABLE_SPACE", "horizontalAlignment": "CENTER", "verticalAlignment": "CENTER", "widgets": [ { "textParagraph": { "text": "First column text paragraph" } } ] }, { "horizontalSizeStyle": "FILL_AVAILABLE_SPACE", "horizontalAlignment": "CENTER", "verticalAlignment": "CENTER", "widgets": [ { "textParagraph": { "text": "Second column text paragraph" } } ] } ] } ```'
        dateTimePicker:
          $ref: "#/components/schemas/GoogleAppsCardV1DateTimePicker"
          description: 'Displays a widget that lets users input a date, time, or date and time. For example, the following JSON creates a date time picker to schedule an appointment: ``` "dateTimePicker": { "name": "appointment_time", "label": "Book your appointment at:", "type": "DATE_AND_TIME", "valueMsEpoch": "796435200000" } ```'
        decoratedText:
          $ref: "#/components/schemas/GoogleAppsCardV1DecoratedText"
          description: 'Displays a decorated text item. For example, the following JSON creates a decorated text widget showing email address: ``` "decoratedText": { "icon": { "knownIcon": "EMAIL" }, "topLabel": "Email Address", "text": "sasha@example.com", "bottomLabel": "This is a new Email address!", "switchControl": { "name": "has_send_welcome_email_to_sasha", "selected": false, "controlType": "CHECKBOX" } } ```'
        divider:
          $ref: "#/components/schemas/GoogleAppsCardV1Divider"
          description: 'Displays a horizontal line divider between widgets. For example, the following JSON creates a divider: ``` "divider": { } ```'
        grid:
          $ref: "#/components/schemas/GoogleAppsCardV1Grid"
          description: 'Displays a grid with a collection of items. A grid supports any number of columns and items. The number of rows is determined by the upper bounds of the number items divided by the number of columns. A grid with 10 items and 2 columns has 5 rows. A grid with 11 items and 2 columns has 6 rows. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend): For example, the following JSON creates a 2 column grid with a single item: ``` "grid": { "title": "A fine collection of items", "columnCount": 2, "borderStyle": { "type": "STROKE", "cornerRadius": 4 }, "items": [ { "image": { "imageUri": "https://www.example.com/image.png", "cropStyle": { "type": "SQUARE" }, "borderStyle": { "type": "STROKE" } }, "title": "An item", "textAlignment": "CENTER" } ], "onClick": { "openLink": { "url": "https://www.example.com" } } } ```'
        horizontalAlignment:
          description: Specifies whether widgets align to the left, right, or center of a column.
          enum:
            - HORIZONTAL_ALIGNMENT_UNSPECIFIED
            - START
            - CENTER
            - END
          type: string
        image:
          $ref: "#/components/schemas/GoogleAppsCardV1Image"
          description: 'Displays an image. For example, the following JSON creates an image with alternative text: ``` "image": { "imageUrl": "https://developers.google.com/chat/images/quickstart-app-avatar.png", "altText": "Chat app avatar" } ```'
        selectionInput:
          $ref: "#/components/schemas/GoogleAppsCardV1SelectionInput"
          description: 'Displays a selection control that lets users select items. Selection controls can be checkboxes, radio buttons, switches, or dropdown menus. For example, the following JSON creates a dropdown menu that lets users choose a size: ``` "selectionInput": { "name": "size", "label": "Size" "type": "DROPDOWN", "items": [ { "text": "S", "value": "small", "selected": false }, { "text": "M", "value": "medium", "selected": true }, { "text": "L", "value": "large", "selected": false }, { "text": "XL", "value": "extra_large", "selected": false } ] } ```'
        textInput:
          $ref: "#/components/schemas/GoogleAppsCardV1TextInput"
          description: 'Displays a text box that users can type into. For example, the following JSON creates a text input for an email address: ``` "textInput": { "name": "mailing_address", "label": "Mailing Address" } ``` As another example, the following JSON creates a text input for a programming language with static suggestions: ``` "textInput": { "name": "preferred_programing_language", "label": "Preferred Language", "initialSuggestions": { "items": [ { "text": "C++" }, { "text": "Java" }, { "text": "JavaScript" }, { "text": "Python" } ] } } ```'
        textParagraph:
          $ref: "#/components/schemas/GoogleAppsCardV1TextParagraph"
          description: 'Displays a text paragraph. Supports simple HTML formatted text. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting). For example, the following JSON creates a bolded text: ``` "textParagraph": { "text": " *bold text*" } ```'
      type: object
    GoogleAppsCardV1Widgets:
      description: "The supported widgets that you can include in a column. [Google Chat apps](https://developers.google.com/chat):"
      properties:
        buttonList:
          $ref: "#/components/schemas/GoogleAppsCardV1ButtonList"
          description: ButtonList widget.
        dateTimePicker:
          $ref: "#/components/schemas/GoogleAppsCardV1DateTimePicker"
          description: DateTimePicker widget.
        decoratedText:
          $ref: "#/components/schemas/GoogleAppsCardV1DecoratedText"
          description: DecoratedText widget.
        image:
          $ref: "#/components/schemas/GoogleAppsCardV1Image"
          description: Image widget.
        selectionInput:
          $ref: "#/components/schemas/GoogleAppsCardV1SelectionInput"
          description: SelectionInput widget.
        textInput:
          $ref: "#/components/schemas/GoogleAppsCardV1TextInput"
          description: TextInput widget.
        textParagraph:
          $ref: "#/components/schemas/GoogleAppsCardV1TextParagraph"
          description: TextParagraph widget.
      type: object
    Group:
      description: A Google Group in Google Chat.
      properties:
        name:
          description: "Resource name for a Google Group. Represents a [group](https://cloud.google.com/identity/docs/reference/rest/v1/groups) in Cloud Identity Groups API. Format: groups/{group}"
          type: string
      type: object
    HostAppDataSourceMarkup:
      description: "For a `SelectionInput` widget that uses a multiselect menu, a data source from a Google Workspace application. The data source populates selection items for the multiselect menu. [Google Chat apps](https://developers.google.com/chat):"
      properties:
        chatDataSource:
          $ref: "#/components/schemas/ChatClientDataSourceMarkup"
          description: A data source from Google Chat.
      type: object
    Image:
      description: An image that's specified by a URL and can have an `onclick` action.
      properties:
        aspectRatio:
          description: The aspect ratio of this image (width and height). This field lets you reserve the right height for the image while waiting for it to load. It's not meant to override the built-in aspect ratio of the image. If unset, the server fills it by prefetching the image.
          format: double
          type: number
        imageUrl:
          description: The URL of the image.
          type: string
        onClick:
          $ref: "#/components/schemas/OnClick"
          description: The `onclick` action.
      type: object
    ImageButton:
      description: An image button with an `onclick` action.
      properties:
        icon:
          description: The icon specified by an `enum` that indices to an icon provided by Chat API.
          enum:
            - ICON_UNSPECIFIED
            - AIRPLANE
            - BOOKMARK
            - BUS
            - CAR
            - CLOCK
            - CONFIRMATION_NUMBER_ICON
            - DOLLAR
            - DESCRIPTION
            - EMAIL
            - EVENT_PERFORMER
            - EVENT_SEAT
            - FLIGHT_ARRIVAL
            - FLIGHT_DEPARTURE
            - HOTEL
            - HOTEL_ROOM_TYPE
            - INVITE
            - MAP_PIN
            - MEMBERSHIP
            - MULTIPLE_PEOPLE
            - OFFER
            - PERSON
            - PHONE
            - RESTAURANT_ICON
            - SHOPPING_CART
            - STAR
            - STORE
            - TICKET
            - TRAIN
            - VIDEO_CAMERA
            - VIDEO_PLAY
          type: string
        iconUrl:
          description: The icon specified by a URL.
          type: string
        name:
          description: The name of this `image_button` that's used for accessibility. Default value is provided if this name isn't specified.
          type: string
        onClick:
          $ref: "#/components/schemas/OnClick"
          description: The `onclick` action.
      type: object
    Inputs:
      description: Types of data that users can [input on cards or dialogs](https://developers.google.com/chat/ui/read-form-data). The input type depends on the type of values that the widget accepts.
      properties:
        dateInput:
          $ref: "#/components/schemas/DateInput"
          description: Date input values from a [`DateTimePicker`](https://developers.google.com/chat/api/reference/rest/v1/cards#DateTimePicker) widget that only accepts date values.
        dateTimeInput:
          $ref: "#/components/schemas/DateTimeInput"
          description: Date and time input values from a [`DateTimePicker`](https://developers.google.com/chat/api/reference/rest/v1/cards#DateTimePicker) widget that accepts both a date and time.
        stringInputs:
          $ref: "#/components/schemas/StringInputs"
          description: A list of strings that represent the values that the user inputs in a widget. If the widget only accepts one value, such as a [`TextInput`](https://developers.google.com/chat/api/reference/rest/v1/cards#TextInput) widget, the list contains one string object. If the widget accepts multiple values, such as a [`SelectionInput`](https://developers.google.com/chat/api/reference/rest/v1/cards#selectioninput) widget of checkboxes, the list contains a string object for each value that the user inputs or selects.
        timeInput:
          $ref: "#/components/schemas/TimeInput"
          description: Time input values from a [`DateTimePicker`](https://developers.google.com/chat/api/reference/rest/v1/cards#DateTimePicker) widget that only accepts time values.
      type: object
    KeyValue:
      description: A UI element contains a key (label) and a value (content). This element can also contain some actions such as `onclick` button.
      properties:
        bottomLabel:
          description: The text of the bottom label. Formatted text supported. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
          type: string
        button:
          $ref: "#/components/schemas/Button"
          description: A button that can be clicked to trigger an action.
        content:
          description: The text of the content. Formatted text supported and always required. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
          type: string
        contentMultiline:
          description: If the content should be multiline.
          type: boolean
        icon:
          description: An enum value that's replaced by the Chat API with the corresponding icon image.
          enum:
            - ICON_UNSPECIFIED
            - AIRPLANE
            - BOOKMARK
            - BUS
            - CAR
            - CLOCK
            - CONFIRMATION_NUMBER_ICON
            - DOLLAR
            - DESCRIPTION
            - EMAIL
            - EVENT_PERFORMER
            - EVENT_SEAT
            - FLIGHT_ARRIVAL
            - FLIGHT_DEPARTURE
            - HOTEL
            - HOTEL_ROOM_TYPE
            - INVITE
            - MAP_PIN
            - MEMBERSHIP
            - MULTIPLE_PEOPLE
            - OFFER
            - PERSON
            - PHONE
            - RESTAURANT_ICON
            - SHOPPING_CART
            - STAR
            - STORE
            - TICKET
            - TRAIN
            - VIDEO_CAMERA
            - VIDEO_PLAY
          type: string
        iconUrl:
          description: The icon specified by a URL.
          type: string
        onClick:
          $ref: "#/components/schemas/OnClick"
          description: The `onclick` action. Only the top label, bottom label, and content region are clickable.
        topLabel:
          description: The text of the top label. Formatted text supported. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
          type: string
      type: object
    ListMembershipsResponse:
      properties:
        memberships:
          description: Unordered list. List of memberships in the requested (or first) page.
          items:
            $ref: "#/components/schemas/Membership"
          type: array
        nextPageToken:
          description: A token that you can send as `pageToken` to retrieve the next page of results. If empty, there are no subsequent pages.
          type: string
      type: object
    ListMessagesResponse:
      properties:
        messages:
          description: List of messages.
          items:
            $ref: "#/components/schemas/Message"
          type: array
        nextPageToken:
          description: You can send a token as `pageToken` to retrieve the next page of results. If empty, there are no subsequent pages.
          type: string
      type: object
    ListReactionsResponse:
      properties:
        nextPageToken:
          description: Continuation token to retrieve the next page of results. It's empty for the last page of results.
          type: string
        reactions:
          description: List of reactions in the requested (or first) page.
          items:
            $ref: "#/components/schemas/Reaction"
          type: array
      type: object
    ListSpacesResponse:
      properties:
        nextPageToken:
          description: You can send a token as `pageToken` to retrieve the next page of results. If empty, there are no subsequent pages.
          type: string
        spaces:
          description: List of spaces in the requested (or first) page.
          items:
            $ref: "#/components/schemas/Space"
          type: array
      type: object
    MatchedUrl:
      description: A matched URL in a Chat message. Chat apps can preview matched URLs. For more information, see [Preview links](https://developers.google.com/chat/how-tos/preview-links).
      properties:
        url:
          description: Output only. The URL that was matched.
          readOnly: true
          type: string
      type: object
    Media:
      description: Media resource.
      properties:
        resourceName:
          description: Name of the media resource.
          type: string
      type: object
    Membership:
      description: Represents a membership relation in Google Chat, such as whether a user or Chat app is invited to, part of, or absent from a space.
      properties:
        createTime:
          description: Optional. Immutable. The creation time of the membership, such as when a member joined or was invited to join a space. This field is output only, except when used to import historical memberships in import mode spaces.
          format: google-datetime
          type: string
        deleteTime:
          description: Optional. Immutable. The deletion time of the membership, such as when a member left or was removed from a space. This field is output only, except when used to import historical memberships in import mode spaces.
          format: google-datetime
          type: string
        groupMember:
          $ref: "#/components/schemas/Group"
          description: The Google Group the membership corresponds to. Only supports read operations. Other operations, like creating or updating a membership, aren't currently supported.
        member:
          $ref: "#/components/schemas/User"
          description: The Google Chat user or app the membership corresponds to. If your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users), the output populates the [user](https://developers.google.com/chat/api/reference/rest/v1/User) `name` and `type`.
        name:
          description: "Resource name of the membership, assigned by the server. Format: `spaces/{space}/members/{member}`"
          type: string
        role:
          description: "Optional. User's role within a Chat space, which determines their permitted actions in the space. [Developer Preview](https://developers.google.com/workspace/preview): This field can only be used as input in `UpdateMembership`."
          enum:
            - MEMBERSHIP_ROLE_UNSPECIFIED
            - ROLE_MEMBER
            - ROLE_MANAGER
          type: string
        state:
          description: Output only. State of the membership.
          enum:
            - MEMBERSHIP_STATE_UNSPECIFIED
            - JOINED
            - INVITED
            - NOT_A_MEMBER
          readOnly: true
          type: string
      type: object
    Message:
      description: A message in a Google Chat space.
      properties:
        actionResponse:
          $ref: "#/components/schemas/ActionResponse"
          description: Input only. Parameters that a Chat app can use to configure how its response is posted.
        annotations:
          description: Output only. Annotations associated with the `text` in this message.
          items:
            $ref: "#/components/schemas/Annotation"
          readOnly: true
          type: array
        argumentText:
          description: Output only. Plain-text body of the message with all Chat app mentions stripped out.
          readOnly: true
          type: string
        attachedGifs:
          description: Output only. GIF images that are attached to the message.
          items:
            $ref: "#/components/schemas/AttachedGif"
          readOnly: true
          type: array
        attachment:
          description: User-uploaded attachment.
          items:
            $ref: "#/components/schemas/Attachment"
          type: array
        cards:
          deprecated: true
          description: "Deprecated: Use `cards_v2` instead. Rich, formatted, and interactive cards that you can use to display UI elements such as: formatted texts, buttons, and clickable images. Cards are normally displayed below the plain-text body of the message. `cards` and `cards_v2` can have a maximum size of 32 KB."
          items:
            $ref: "#/components/schemas/Card"
          type: array
        cardsV2:
          description: An array of [cards](https://developers.google.com/chat/api/reference/rest/v1/cards). Only Chat apps can create cards. If your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users), the messages can't contain cards. To learn about cards and how to create them, see [Design dynamic, interactive, and consistent UIs with cards](https://developers.google.com/chat/ui). [Card builder](https://addons.gsuite.google.com/uikit/builder)
          items:
            $ref: "#/components/schemas/CardWithId"
          type: array
        clientAssignedMessageId:
          description: Optional. A custom ID for the message. You can use field to identify a message, or to get, delete, or update a message. To set a custom ID, specify the [`messageId`](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages/create#body.QUERY_PARAMETERS.message_id) field when you create the message. For details, see [Name a message](https://developers.google.com/chat/api/guides/v1/messages/create#name_a_created_message).
          type: string
        createTime:
          description: Optional. Immutable. For spaces created in Chat, the time at which the message was created. This field is output only, except when used in import mode spaces. For import mode spaces, set this field to the historical timestamp at which the message was created in the source in order to preserve the original creation time.
          format: google-datetime
          type: string
        deleteTime:
          description: Output only. The time at which the message was deleted in Google Chat. If the message is never deleted, this field is empty.
          format: google-datetime
          readOnly: true
          type: string
        deletionMetadata:
          $ref: "#/components/schemas/DeletionMetadata"
          description: Output only. Information about a deleted message. A message is deleted when `delete_time` is set.
          readOnly: true
        emojiReactionSummaries:
          description: Output only. The list of emoji reaction summaries on the message.
          items:
            $ref: "#/components/schemas/EmojiReactionSummary"
          readOnly: true
          type: array
        fallbackText:
          description: A plain-text description of the message's cards, used when the actual cards can't be displayed—for example, mobile notifications.
          type: string
        formattedText:
          description: "Output only. Contains the message `text` with markups added to communicate formatting. This field might not capture all formatting visible in the UI, but includes the following: * [Markup syntax](https://developers.google.com/chat/format-messages) for bold, italic, strikethrough, monospace, and monospace block. * [User mentions](https://developers.google.com/chat/format-messages#messages-@mention) using the format ``. * Custom hyperlinks using the format `<{url}|{rendered_text}>` where the first string is the URL and the second is the rendered text—for example, ``. * Custom emoji using the format `:{emoji_name}:`—for example, `:smile:`. This doesn't apply to Unicode emoji, such as `U+1F600` for a grinning face emoji. For more information, see [View text formatting sent in a message](https://developers.google.com/chat/format-messages#view_text_formatting_sent_in_a_message)"
          readOnly: true
          type: string
        lastUpdateTime:
          description: Output only. The time at which the message was last edited by a user. If the message has never been edited, this field is empty.
          format: google-datetime
          readOnly: true
          type: string
        matchedUrl:
          $ref: "#/components/schemas/MatchedUrl"
          description: Output only. A URL in `spaces.messages.text` that matches a link preview pattern. For more information, see [Preview links](https://developers.google.com/chat/how-tos/preview-links).
          readOnly: true
        name:
          description: "Resource name of the message. Format: `spaces/{space}/messages/{message}` Where `{space}` is the ID of the space where the message is posted and `{message}` is a system-assigned ID for the message. For example, `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`. If you set a custom ID when you create a message, you can use this ID to specify the message in a request by replacing `{message}` with the value from the `clientAssignedMessageId` field. For example, `spaces/AAAAAAAAAAA/messages/client-custom-name`. For details, see [Name a message](https://developers.google.com/chat/api/guides/v1/messages/create#name_a_created_message)."
          type: string
        privateMessageViewer:
          $ref: "#/components/schemas/User"
          description: Immutable. Input for creating a message, otherwise output only. The user that can view the message. When set, the message is private and only visible to the specified user and the Chat app. Link previews and attachments aren't supported for private messages. Only Chat apps can send private messages. If your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users) to send a message, the message can't be private and must omit this field. For details, see [Send private messages to Google Chat users](https://developers.google.com/chat/api/guides/v1/messages/private).
        quotedMessageMetadata:
          $ref: "#/components/schemas/QuotedMessageMetadata"
          description: Output only. Information about a message that's quoted by a Google Chat user in a space. Google Chat users can quote a message to reply to it.
          readOnly: true
        sender:
          $ref: "#/components/schemas/User"
          description: Output only. The user who created the message. If your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users), the output populates the [user](https://developers.google.com/chat/api/reference/rest/v1/User) `name` and `type`.
          readOnly: true
        slashCommand:
          $ref: "#/components/schemas/SlashCommand"
          description: Output only. Slash command information, if applicable.
          readOnly: true
        space:
          $ref: "#/components/schemas/Space"
          description: If your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users), the output populates the [space](https://developers.google.com/chat/api/reference/rest/v1/spaces) `name`.
        text:
          description: Plain-text body of the message. The first link to an image, video, or web page generates a [preview chip](https://developers.google.com/chat/how-tos/preview-links). You can also [@mention a Google Chat user](https://developers.google.com/chat/format-messages#messages-@mention), or everyone in the space. To learn about creating text messages, see [Send a text message](https://developers.google.com/chat/api/guides/v1/messages/create#create-text-messages).
          type: string
        thread:
          $ref: "#/components/schemas/Thread"
          description: The thread the message belongs to. For example usage, see [Start or reply to a message thread](https://developers.google.com/chat/api/guides/v1/messages/create#create-message-thread).
        threadReply:
          description: Output only. When `true`, the message is a response in a reply thread. When `false`, the message is visible in the space's top-level conversation as either the first message of a thread or a message with no threaded replies. If the space doesn't support reply in threads, this field is always `false`.
          readOnly: true
          type: boolean
      type: object
    OnClick:
      description: An `onclick` action (for example, open a link).
      properties:
        action:
          $ref: "#/components/schemas/FormAction"
          description: A form action is triggered by this `onclick` action if specified.
        openLink:
          $ref: "#/components/schemas/OpenLink"
          description: This `onclick` action triggers an open link action if specified.
      type: object
    OpenLink:
      description: A link that opens a new window.
      properties:
        url:
          description: The URL to open.
          type: string
      type: object
    QuotedMessageMetadata:
      description: Information about a quoted message.
      properties:
        lastUpdateTime:
          description: Output only. The timestamp when the quoted message was created or when the quoted message was last updated.
          format: google-datetime
          readOnly: true
          type: string
        name:
          description: "Output only. Resource name of the quoted message. Format: `spaces/{space}/messages/{message}`"
          readOnly: true
          type: string
      type: object
    Reaction:
      description: A reaction to a message.
      properties:
        emoji:
          $ref: "#/components/schemas/Emoji"
          description: The emoji used in the reaction.
        name:
          description: "The resource name of the reaction. Format: `spaces/{space}/messages/{message}/reactions/{reaction}`"
          type: string
        user:
          $ref: "#/components/schemas/User"
          description: Output only. The user who created the reaction.
          readOnly: true
      type: object
    Section:
      description: A section contains a collection of widgets that are rendered (vertically) in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there's currently no need for layout properties (for example, float).
      properties:
        header:
          description: The header of the section. Formatted text is supported. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
          type: string
        widgets:
          description: A section must contain at least one widget.
          items:
            $ref: "#/components/schemas/WidgetMarkup"
          type: array
      type: object
    SelectionItems:
      description: List of widget autocomplete results.
      properties:
        items:
          description: An array of the SelectionItem objects.
          items:
            $ref: "#/components/schemas/GoogleAppsCardV1SelectionItem"
          type: array
      type: object
    SetUpSpaceRequest:
      properties:
        memberships:
          description: "Optional. The Google Chat users to invite to join the space. Omit the calling user, as they are added automatically. The set currently allows up to 20 memberships (in addition to the caller). The `Membership.member` field must contain a `user` with `name` populated (format: `users/{user}`) and `type` set to `User.Type.HUMAN`. You can only add human users when setting up a space (adding Chat apps is only supported for direct message setup with the calling app). You can also add members using the user's email as an alias for {user}. For example, the `user.name` can be `users/example@gmail.com`.\" To invite Gmail users or users from external Google Workspace domains, user's email must be used for `{user}`. Optional when setting `Space.spaceType` to `SPACE`. Required when setting `Space.spaceType` to `GROUP_CHAT`, along with at least two memberships. Required when setting `Space.spaceType` to `DIRECT_MESSAGE` with a human user, along with exactly one membership. Must be empty when creating a 1:1 conversation between a human and the calling Chat app (when setting `Space.spaceType` to `DIRECT_MESSAGE` and `Space.singleUserBotDm` to `true`)."
          items:
            $ref: "#/components/schemas/Membership"
          type: array
        requestId:
          description: Optional. A unique identifier for this request. A random UUID is recommended. Specifying an existing request ID returns the space created with that ID instead of creating a new space. Specifying an existing request ID from the same Chat app with a different authenticated user returns an error.
          type: string
        space:
          $ref: "#/components/schemas/Space"
          description: Required. The `Space.spaceType` field is required. To create a space, set `Space.spaceType` to `SPACE` and set `Space.displayName`. If you receive the error message `ALREADY_EXISTS` when setting up a space, try a different `displayName`. An existing space within the Google Workspace organization might already use this display name. To create a group chat, set `Space.spaceType` to `GROUP_CHAT`. Don't set `Space.displayName`. To create a 1:1 conversation between humans, set `Space.spaceType` to `DIRECT_MESSAGE` and set `Space.singleUserBotDm` to `false`. Don't set `Space.displayName` or `Space.spaceDetails`. To create an 1:1 conversation between a human and the calling Chat app, set `Space.spaceType` to `DIRECT_MESSAGE` and `Space.singleUserBotDm` to `true`. Don't set `Space.displayName` or `Space.spaceDetails`. If a `DIRECT_MESSAGE` space already exists, that space is returned instead of creating a new space.
      type: object
    SlashCommand:
      description: A [slash command](https://developers.google.com/chat/how-tos/slash-commands) in Google Chat.
      properties:
        commandId:
          description: The ID of the slash command invoked.
          format: int64
          type: string
      type: object
    SlashCommandMetadata:
      description: Annotation metadata for slash commands (/).
      properties:
        bot:
          $ref: "#/components/schemas/User"
          description: The Chat app whose command was invoked.
        commandId:
          description: The command ID of the invoked slash command.
          format: int64
          type: string
        commandName:
          description: The name of the invoked slash command.
          type: string
        triggersDialog:
          description: Indicates whether the slash command is for a dialog.
          type: boolean
        type:
          description: The type of slash command.
          enum:
            - TYPE_UNSPECIFIED
            - ADD
            - INVOKE
          type: string
      type: object
    Space:
      description: A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app.
      properties:
        adminInstalled:
          description: Output only. Whether the Chat app was installed by a Google Workspace administrator. Administrators can install a Chat app for their domain, organizational unit, or a group of users. Administrators can only install Chat apps for direct messaging between users and the app. To support admin install, your app must feature direct messaging.
          readOnly: true
          type: boolean
        createTime:
          description: Optional. Immutable. For spaces created in Chat, the time the space was created. This field is output only, except when used in import mode spaces. For import mode spaces, set this field to the historical timestamp at which the space was created in the source in order to preserve the original creation time. Only populated in the output when `spaceType` is `GROUP_CHAT` or `SPACE`.
          format: google-datetime
          type: string
        displayName:
          description: The space's display name. Required when [creating a space](https://developers.google.com/chat/api/reference/rest/v1/spaces/create). If you receive the error message `ALREADY_EXISTS` when creating a space or updating the `displayName`, try a different `displayName`. An existing space within the Google Workspace organization might already use this display name. For direct messages, this field might be empty. Supports up to 128 characters.
          type: string
        externalUserAllowed:
          description: "Immutable. Whether this space permits any Google Chat user as a member. Input when creating a space in a Google Workspace organization. Omit this field when creating spaces in the following conditions: * The authenticated user uses a Google Account. By default, the space permits any Google Chat user. * The space is used to [import data to Google Chat] (https://developers.google.com/chat/api/guides/import-data-overview). Import mode spaces must only permit members from the same Google Workspace organization. For existing spaces, this field is output only."
          type: boolean
        importMode:
          description: Optional. Whether this space is created in `Import Mode` as part of a data migration into Google Workspace. While spaces are being imported, they aren't visible to users until the import is complete.
          type: boolean
        name:
          description: "Resource name of the space. Format: `spaces/{space}`"
          type: string
        singleUserBotDm:
          description: Optional. Whether the space is a DM between a Chat app and a single human.
          type: boolean
        spaceDetails:
          $ref: "#/components/schemas/SpaceDetails"
          description: Details about the space including description and rules.
        spaceHistoryState:
          description: The message history state for messages and threads in this space.
          enum:
            - HISTORY_STATE_UNSPECIFIED
            - HISTORY_OFF
            - HISTORY_ON
          type: string
        spaceThreadingState:
          description: Output only. The threading state in the Chat space.
          enum:
            - SPACE_THREADING_STATE_UNSPECIFIED
            - THREADED_MESSAGES
            - GROUPED_MESSAGES
            - UNTHREADED_MESSAGES
          readOnly: true
          type: string
        spaceType:
          description: The type of space. Required when creating a space or updating the space type of a space. Output only for other usage.
          enum:
            - SPACE_TYPE_UNSPECIFIED
            - SPACE
            - GROUP_CHAT
            - DIRECT_MESSAGE
          type: string
        threaded:
          deprecated: true
          description: "Output only. Deprecated: Use `spaceThreadingState` instead. Whether messages are threaded in this space."
          readOnly: true
          type: boolean
        type:
          deprecated: true
          description: "Output only. Deprecated: Use `space_type` instead. The type of a space."
          enum:
            - TYPE_UNSPECIFIED
            - ROOM
            - DM
          readOnly: true
          type: string
      type: object
    SpaceDataSource:
      description: "A data source that populates Google Chat spaces as selection items for a multiselect menu. Only populates spaces that the user is a member of. [Google Chat apps](https://developers.google.com/chat):"
      properties:
        defaultToCurrentSpace:
          description: If set to `true`, the multiselect menu selects the current Google Chat space as an item by default.
          type: boolean
      type: object
    SpaceDetails:
      description: Details about the space including description and rules.
      properties:
        description:
          description: Optional. A description of the space. For example, describe the space's discussion topic, functional purpose, or participants. Supports up to 150 characters.
          type: string
        guidelines:
          description: Optional. The space's rules, expectations, and etiquette. Supports up to 5,000 characters.
          type: string
      type: object
    Status:
      description: "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
          type: integer
        details:
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        message:
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
          type: string
      type: object
    StringInputs:
      description: Input parameter for regular widgets. For single-valued widgets, it is a single value list. For multi-valued widgets, such as checkbox, all the values are presented.
      properties:
        value:
          description: An list of strings entered by the user.
          items:
            type: string
          type: array
      type: object
    TextButton:
      description: A button with text and `onclick` action.
      properties:
        onClick:
          $ref: "#/components/schemas/OnClick"
          description: The `onclick` action of the button.
        text:
          description: The text of the button.
          type: string
      type: object
    TextParagraph:
      description: A paragraph of text. Formatted text supported. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
      properties:
        text:
          type: string
      type: object
    Thread:
      description: A thread in a Google Chat space. For example usage, see [Start or reply to a message thread](https://developers.google.com/chat/api/guides/v1/messages/create#create-message-thread). If you specify a thread when creating a message, you can set the [`messageReplyOption`](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages/create#messagereplyoption) field to determine what happens if no matching thread is found.
      properties:
        name:
          description: "Output only. Resource name of the thread. Example: `spaces/{space}/threads/{thread}`"
          type: string
        threadKey:
          description: Optional. Input for creating or updating a thread. Otherwise, output only. ID for the thread. Supports up to 4000 characters. This ID is unique to the Chat app that sets it. For example, if multiple Chat apps create a message using the same thread key, the messages are posted in different threads. To reply in a thread created by a person or another Chat app, specify the thread `name` field instead.
          type: string
      type: object
    TimeInput:
      description: Time input values.
      properties:
        hours:
          description: The hour on a 24-hour clock.
          format: int32
          type: integer
        minutes:
          description: The number of minutes past the hour. Valid values are 0 to 59.
          format: int32
          type: integer
      type: object
    TimeZone:
      description: The timezone ID and offset from Coordinated Universal Time (UTC). Only supported for the event types [`CARD_CLICKED`](https://developers.google.com/chat/api/reference/rest/v1/EventType#ENUM_VALUES.CARD_CLICKED) and [`SUBMIT_DIALOG`](https://developers.google.com/chat/api/reference/rest/v1/DialogEventType#ENUM_VALUES.SUBMIT_DIALOG).
      properties:
        id:
          description: The [IANA TZ](https://www.iana.org/time-zones) time zone database code, such as "America/Toronto".
          type: string
        offset:
          description: The user timezone offset, in milliseconds, from Coordinated Universal Time (UTC).
          format: int32
          type: integer
      type: object
    UpdatedWidget:
      description: The response of the updated widget. Used to provide autocomplete options for a widget.
      properties:
        suggestions:
          $ref: "#/components/schemas/SelectionItems"
          description: List of widget autocomplete results
        widget:
          description: The ID of the updated widget. The ID must match the one for the widget that triggered the update request.
          type: string
      type: object
    UploadAttachmentRequest:
      properties:
        filename:
          description: Required. The filename of the attachment, including the file extension.
          type: string
      type: object
    UploadAttachmentResponse:
      properties:
        attachmentDataRef:
          $ref: "#/components/schemas/AttachmentDataRef"
          description: Reference to the uploaded attachment.
      type: object
    User:
      description: A user in Google Chat. When returned as an output from a request, if your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users), the output for a `User` resource only populates the user's `name` and `type`.
      properties:
        displayName:
          description: Output only. The user's display name.
          readOnly: true
          type: string
        domainId:
          description: Unique identifier of the user's Google Workspace domain.
          type: string
        isAnonymous:
          description: Output only. When `true`, the user is deleted or their profile is not visible.
          readOnly: true
          type: boolean
        name:
          description: "Resource name for a Google Chat user. Format: `users/{user}`. `users/app` can be used as an alias for the calling app bot user. For human users, `{user}` is the same user identifier as: - the `id` for the [Person](https://developers.google.com/people/api/rest/v1/people) in the People API. For example, `users/123456789` in Chat API represents the same person as the `123456789` Person profile ID in People API. - the `id` for a [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users) in the Admin SDK Directory API. - the user's email address can be used as an alias for `{user}` in API requests. For example, if the People API Person profile ID for `user@example.com` is `123456789`, you can use `users/user@example.com` as an alias to reference `users/123456789`. Only the canonical resource name (for example `users/123456789`) will be returned from the API."
          type: string
        type:
          description: User type.
          enum:
            - TYPE_UNSPECIFIED
            - HUMAN
            - BOT
          type: string
      type: object
    UserMentionMetadata:
      description: Annotation metadata for user mentions (@).
      properties:
        type:
          description: The type of user mention.
          enum:
            - TYPE_UNSPECIFIED
            - ADD
            - MENTION
          type: string
        user:
          $ref: "#/components/schemas/User"
          description: The user mentioned.
      type: object
    WidgetMarkup:
      description: A widget is a UI element that presents text and images.
      properties:
        buttons:
          description: A list of buttons. Buttons is also `oneof data` and only one of these fields should be set.
          items:
            $ref: "#/components/schemas/Button"
          type: array
        image:
          $ref: "#/components/schemas/Image"
          description: Display an image in this widget.
        keyValue:
          $ref: "#/components/schemas/KeyValue"
          description: Display a key value item in this widget.
        textParagraph:
          $ref: "#/components/schemas/TextParagraph"
          description: Display a text paragraph in this widget.
      type: object
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/chat.bot: "Private Service: https://www.googleapis.com/auth/chat.bot"
            https://www.googleapis.com/auth/chat.delete: Delete conversations and spaces & remove access to associated files in Google Chat
            https://www.googleapis.com/auth/chat.import: Import spaces, messages, and memberships into Google Chat.
            https://www.googleapis.com/auth/chat.memberships: View, add, and remove members from conversations in Google Chat
            https://www.googleapis.com/auth/chat.memberships.app: Add and remove itself from conversations in Google Chat
            https://www.googleapis.com/auth/chat.memberships.readonly: View members in Google Chat conversations.
            https://www.googleapis.com/auth/chat.messages: View, compose, send, update, and delete messages, and add, view, and delete reactions to messages.
            https://www.googleapis.com/auth/chat.messages.create: Compose and send messages in Google Chat
            https://www.googleapis.com/auth/chat.messages.reactions: View, add, and delete reactions to messages in Google Chat
            https://www.googleapis.com/auth/chat.messages.reactions.create: Add reactions to messages in Google Chat
            https://www.googleapis.com/auth/chat.messages.reactions.readonly: View reactions to messages in Google Chat
            https://www.googleapis.com/auth/chat.messages.readonly: View messages and reactions in Google Chat
            https://www.googleapis.com/auth/chat.spaces: Create conversations and spaces and see or edit metadata (including history settings and access settings) in Google Chat
            https://www.googleapis.com/auth/chat.spaces.create: Create new conversations in Google Chat
            https://www.googleapis.com/auth/chat.spaces.readonly: View chat and spaces in Google Chat
      type: oauth2
    Oauth2c:
      description: Oauth 2.0 authorizationCode authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/chat.bot: "Private Service: https://www.googleapis.com/auth/chat.bot"
            https://www.googleapis.com/auth/chat.delete: Delete conversations and spaces & remove access to associated files in Google Chat
            https://www.googleapis.com/auth/chat.import: Import spaces, messages, and memberships into Google Chat.
            https://www.googleapis.com/auth/chat.memberships: View, add, and remove members from conversations in Google Chat
            https://www.googleapis.com/auth/chat.memberships.app: Add and remove itself from conversations in Google Chat
            https://www.googleapis.com/auth/chat.memberships.readonly: View members in Google Chat conversations.
            https://www.googleapis.com/auth/chat.messages: View, compose, send, update, and delete messages, and add, view, and delete reactions to messages.
            https://www.googleapis.com/auth/chat.messages.create: Compose and send messages in Google Chat
            https://www.googleapis.com/auth/chat.messages.reactions: View, add, and delete reactions to messages in Google Chat
            https://www.googleapis.com/auth/chat.messages.reactions.create: Add reactions to messages in Google Chat
            https://www.googleapis.com/auth/chat.messages.reactions.readonly: View reactions to messages in Google Chat
            https://www.googleapis.com/auth/chat.messages.readonly: View messages and reactions in Google Chat
            https://www.googleapis.com/auth/chat.spaces: Create conversations and spaces and see or edit metadata (including history settings and access settings) in Google Chat
            https://www.googleapis.com/auth/chat.spaces.create: Create new conversations in Google Chat
            https://www.googleapis.com/auth/chat.spaces.readonly: View chat and spaces in Google Chat
          tokenUrl: https://accounts.google.com/o/oauth2/token
      type: oauth2

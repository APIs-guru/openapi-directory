# coding: utf-8

"""
    Google Chat API

    The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.date_input import DateInput
from openapi_client.models.date_time_input import DateTimeInput
from openapi_client.models.string_inputs import StringInputs
from openapi_client.models.time_input import TimeInput
from typing import Optional, Set
from typing_extensions import Self

class Inputs(BaseModel):
    """
    Types of data that users can [input on cards or dialogs](https://developers.google.com/chat/ui/read-form-data). The input type depends on the type of values that the widget accepts.
    """ # noqa: E501
    date_input: Optional[DateInput] = Field(default=None, alias="dateInput")
    date_time_input: Optional[DateTimeInput] = Field(default=None, alias="dateTimeInput")
    string_inputs: Optional[StringInputs] = Field(default=None, alias="stringInputs")
    time_input: Optional[TimeInput] = Field(default=None, alias="timeInput")
    __properties: ClassVar[List[str]] = ["dateInput", "dateTimeInput", "stringInputs", "timeInput"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Inputs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_input
        if self.date_input:
            _dict['dateInput'] = self.date_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_time_input
        if self.date_time_input:
            _dict['dateTimeInput'] = self.date_time_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of string_inputs
        if self.string_inputs:
            _dict['stringInputs'] = self.string_inputs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_input
        if self.time_input:
            _dict['timeInput'] = self.time_input.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Inputs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dateInput": DateInput.from_dict(obj["dateInput"]) if obj.get("dateInput") is not None else None,
            "dateTimeInput": DateTimeInput.from_dict(obj["dateTimeInput"]) if obj.get("dateTimeInput") is not None else None,
            "stringInputs": StringInputs.from_dict(obj["stringInputs"]) if obj.get("stringInputs") is not None else None,
            "timeInput": TimeInput.from_dict(obj["timeInput"]) if obj.get("timeInput") is not None else None
        })
        return _obj



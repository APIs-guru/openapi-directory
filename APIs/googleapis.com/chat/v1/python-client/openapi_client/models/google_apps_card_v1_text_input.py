# coding: utf-8

"""
    Google Chat API

    The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_card_v1_action import GoogleAppsCardV1Action
from openapi_client.models.google_apps_card_v1_suggestions import GoogleAppsCardV1Suggestions
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsCardV1TextInput(BaseModel):
    """
    A field in which users can enter text. Supports suggestions and on-change actions. For an example in Google Chat apps, see [Text input](https://developers.google.com/chat/ui/widgets/text-input). Chat apps receive and can process the value of entered text during form input events. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data). When you need to collect undefined or abstract data from users, use a text input. To collect defined or enumerated data from users, use the SelectionInput widget. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):
    """ # noqa: E501
    auto_complete_action: Optional[GoogleAppsCardV1Action] = Field(default=None, alias="autoCompleteAction")
    hint_text: Optional[StrictStr] = Field(default=None, description="Text that appears below the text input field meant to assist users by prompting them to enter a certain value. This text is always visible. Required if `label` is unspecified. Otherwise, optional.", alias="hintText")
    initial_suggestions: Optional[GoogleAppsCardV1Suggestions] = Field(default=None, alias="initialSuggestions")
    label: Optional[StrictStr] = Field(default=None, description="The text that appears above the text input field in the user interface. Specify text that helps the user enter the information your app needs. For example, if you are asking someone's name, but specifically need their surname, write `surname` instead of `name`. Required if `hintText` is unspecified. Otherwise, optional.")
    name: Optional[StrictStr] = Field(default=None, description="The name by which the text input is identified in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).")
    on_change_action: Optional[GoogleAppsCardV1Action] = Field(default=None, alias="onChangeAction")
    placeholder_text: Optional[StrictStr] = Field(default=None, description="Text that appears in the text input field when the field is empty. Use this text to prompt users to enter a value. For example, `Enter a number from 0 to 100`. [Google Chat apps](https://developers.google.com/chat):", alias="placeholderText")
    type: Optional[StrictStr] = Field(default=None, description="How a text input field appears in the user interface. For example, whether the field is single or multi-line.")
    value: Optional[StrictStr] = Field(default=None, description="The value entered by a user, returned as part of a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).")
    __properties: ClassVar[List[str]] = ["autoCompleteAction", "hintText", "initialSuggestions", "label", "name", "onChangeAction", "placeholderText", "type", "value"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SINGLE_LINE', 'MULTIPLE_LINE']):
            raise ValueError("must be one of enum values ('SINGLE_LINE', 'MULTIPLE_LINE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsCardV1TextInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auto_complete_action
        if self.auto_complete_action:
            _dict['autoCompleteAction'] = self.auto_complete_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initial_suggestions
        if self.initial_suggestions:
            _dict['initialSuggestions'] = self.initial_suggestions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of on_change_action
        if self.on_change_action:
            _dict['onChangeAction'] = self.on_change_action.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsCardV1TextInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoCompleteAction": GoogleAppsCardV1Action.from_dict(obj["autoCompleteAction"]) if obj.get("autoCompleteAction") is not None else None,
            "hintText": obj.get("hintText"),
            "initialSuggestions": GoogleAppsCardV1Suggestions.from_dict(obj["initialSuggestions"]) if obj.get("initialSuggestions") is not None else None,
            "label": obj.get("label"),
            "name": obj.get("name"),
            "onChangeAction": GoogleAppsCardV1Action.from_dict(obj["onChangeAction"]) if obj.get("onChangeAction") is not None else None,
            "placeholderText": obj.get("placeholderText"),
            "type": obj.get("type"),
            "value": obj.get("value")
        })
        return _obj



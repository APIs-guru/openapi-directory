# coding: utf-8

"""
    Google Chat API

    The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_card_v1_action import GoogleAppsCardV1Action
from openapi_client.models.google_apps_card_v1_platform_data_source import GoogleAppsCardV1PlatformDataSource
from openapi_client.models.google_apps_card_v1_selection_item import GoogleAppsCardV1SelectionItem
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsCardV1SelectionInput(BaseModel):
    """
    A widget that creates one or more UI items that users can select. For example, a dropdown menu or checkboxes. You can use this widget to collect data that can be predicted or enumerated. For an example in Google Chat apps, see [Selection input](https://developers.google.com/chat/ui/widgets/selection-input). Chat apps can process the value of items that users select or input. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data). To collect undefined or abstract data from users, use the TextInput widget. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):
    """ # noqa: E501
    external_data_source: Optional[GoogleAppsCardV1Action] = Field(default=None, alias="externalDataSource")
    items: Optional[List[GoogleAppsCardV1SelectionItem]] = Field(default=None, description="An array of selectable items. For example, an array of radio buttons or checkboxes. Supports up to 100 items.")
    label: Optional[StrictStr] = Field(default=None, description="The text that appears above the selection input field in the user interface. Specify text that helps the user enter the information your app needs. For example, if users are selecting the urgency of a work ticket from a drop-down menu, the label might be \"Urgency\" or \"Select urgency\".")
    multi_select_max_selected_items: Optional[StrictInt] = Field(default=None, description="For multiselect menus, the maximum number of items that a user can select. Minimum value is 1 item. If unspecified, defaults to 3 items.", alias="multiSelectMaxSelectedItems")
    multi_select_min_query_length: Optional[StrictInt] = Field(default=None, description="For multiselect menus, the number of text characters that a user inputs before the Chat app queries autocomplete and displays suggested items in the menu. If unspecified, defaults to 0 characters for static data sources and 3 characters for external data sources.", alias="multiSelectMinQueryLength")
    name: Optional[StrictStr] = Field(default=None, description="The name that identifies the selection input in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).")
    on_change_action: Optional[GoogleAppsCardV1Action] = Field(default=None, alias="onChangeAction")
    platform_data_source: Optional[GoogleAppsCardV1PlatformDataSource] = Field(default=None, alias="platformDataSource")
    type: Optional[StrictStr] = Field(default=None, description="The type of items that are displayed to users in a `SelectionInput` widget. Selection types support different types of interactions. For example, users can select one or more checkboxes, but they can only select one value from a dropdown menu.")
    __properties: ClassVar[List[str]] = ["externalDataSource", "items", "label", "multiSelectMaxSelectedItems", "multiSelectMinQueryLength", "name", "onChangeAction", "platformDataSource", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHECK_BOX', 'RADIO_BUTTON', 'SWITCH', 'DROPDOWN', 'MULTI_SELECT']):
            raise ValueError("must be one of enum values ('CHECK_BOX', 'RADIO_BUTTON', 'SWITCH', 'DROPDOWN', 'MULTI_SELECT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsCardV1SelectionInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of external_data_source
        if self.external_data_source:
            _dict['externalDataSource'] = self.external_data_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of on_change_action
        if self.on_change_action:
            _dict['onChangeAction'] = self.on_change_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of platform_data_source
        if self.platform_data_source:
            _dict['platformDataSource'] = self.platform_data_source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsCardV1SelectionInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "externalDataSource": GoogleAppsCardV1Action.from_dict(obj["externalDataSource"]) if obj.get("externalDataSource") is not None else None,
            "items": [GoogleAppsCardV1SelectionItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "label": obj.get("label"),
            "multiSelectMaxSelectedItems": obj.get("multiSelectMaxSelectedItems"),
            "multiSelectMinQueryLength": obj.get("multiSelectMinQueryLength"),
            "name": obj.get("name"),
            "onChangeAction": GoogleAppsCardV1Action.from_dict(obj["onChangeAction"]) if obj.get("onChangeAction") is not None else None,
            "platformDataSource": GoogleAppsCardV1PlatformDataSource.from_dict(obj["platformDataSource"]) if obj.get("platformDataSource") is not None else None,
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Google Chat API

    The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.color import Color
from openapi_client.models.google_apps_card_v1_icon import GoogleAppsCardV1Icon
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsCardV1Button(BaseModel):
    """
    A text, icon, or text and icon button that users can click. For an example in Google Chat apps, see [Button list](https://developers.google.com/chat/ui/widgets/button-list). To make an image a clickable button, specify an `Image` (not an `ImageComponent`) and set an `onClick` action. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):
    """ # noqa: E501
    alt_text: Optional[StrictStr] = Field(default=None, description="The alternative text that's used for accessibility. Set descriptive text that lets users know what the button does. For example, if a button opens a hyperlink, you might write: \"Opens a new browser tab and navigates to the Google Chat developer documentation at https://developers.google.com/chat\".", alias="altText")
    color: Optional[Color] = None
    disabled: Optional[StrictBool] = Field(default=None, description="If `true`, the button is displayed in an inactive state and doesn't respond to user actions.")
    icon: Optional[GoogleAppsCardV1Icon] = None
    on_click: Optional[GoogleAppsCardV1OnClick] = Field(default=None, alias="onClick")
    text: Optional[StrictStr] = Field(default=None, description="The text displayed inside the button.")
    __properties: ClassVar[List[str]] = ["altText", "color", "disabled", "icon", "onClick", "text"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsCardV1Button from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of color
        if self.color:
            _dict['color'] = self.color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of icon
        if self.icon:
            _dict['icon'] = self.icon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of on_click
        if self.on_click:
            _dict['onClick'] = self.on_click.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsCardV1Button from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "altText": obj.get("altText"),
            "color": Color.from_dict(obj["color"]) if obj.get("color") is not None else None,
            "disabled": obj.get("disabled"),
            "icon": GoogleAppsCardV1Icon.from_dict(obj["icon"]) if obj.get("icon") is not None else None,
            "onClick": GoogleAppsCardV1OnClick.from_dict(obj["onClick"]) if obj.get("onClick") is not None else None,
            "text": obj.get("text")
        })
        return _obj

from openapi_client.models.google_apps_card_v1_on_click import GoogleAppsCardV1OnClick
# TODO: Rewrite to not use raise_errors
GoogleAppsCardV1Button.model_rebuild(raise_errors=False)


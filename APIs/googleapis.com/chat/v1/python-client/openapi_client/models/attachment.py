# coding: utf-8

"""
    Google Chat API

    The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attachment_data_ref import AttachmentDataRef
from openapi_client.models.drive_data_ref import DriveDataRef
from typing import Optional, Set
from typing_extensions import Self

class Attachment(BaseModel):
    """
    An attachment in Google Chat.
    """ # noqa: E501
    attachment_data_ref: Optional[AttachmentDataRef] = Field(default=None, alias="attachmentDataRef")
    content_name: Optional[StrictStr] = Field(default=None, description="Output only. The original file name for the content, not the full path.", alias="contentName")
    content_type: Optional[StrictStr] = Field(default=None, description="Output only. The content type (MIME type) of the file.", alias="contentType")
    download_uri: Optional[StrictStr] = Field(default=None, description="Output only. The download URL which should be used to allow a human user to download the attachment. Chat apps shouldn't use this URL to download attachment content.", alias="downloadUri")
    drive_data_ref: Optional[DriveDataRef] = Field(default=None, alias="driveDataRef")
    name: Optional[StrictStr] = Field(default=None, description="Resource name of the attachment, in the form `spaces/*/messages/*/attachments/*`.")
    source: Optional[StrictStr] = Field(default=None, description="Output only. The source of the attachment.")
    thumbnail_uri: Optional[StrictStr] = Field(default=None, description="Output only. The thumbnail URL which should be used to preview the attachment to a human user. Chat apps shouldn't use this URL to download attachment content.", alias="thumbnailUri")
    __properties: ClassVar[List[str]] = ["attachmentDataRef", "contentName", "contentType", "downloadUri", "driveDataRef", "name", "source", "thumbnailUri"]

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SOURCE_UNSPECIFIED', 'DRIVE_FILE', 'UPLOADED_CONTENT']):
            raise ValueError("must be one of enum values ('SOURCE_UNSPECIFIED', 'DRIVE_FILE', 'UPLOADED_CONTENT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Attachment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "content_name",
            "content_type",
            "download_uri",
            "source",
            "thumbnail_uri",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attachment_data_ref
        if self.attachment_data_ref:
            _dict['attachmentDataRef'] = self.attachment_data_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of drive_data_ref
        if self.drive_data_ref:
            _dict['driveDataRef'] = self.drive_data_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Attachment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachmentDataRef": AttachmentDataRef.from_dict(obj["attachmentDataRef"]) if obj.get("attachmentDataRef") is not None else None,
            "contentName": obj.get("contentName"),
            "contentType": obj.get("contentType"),
            "downloadUri": obj.get("downloadUri"),
            "driveDataRef": DriveDataRef.from_dict(obj["driveDataRef"]) if obj.get("driveDataRef") is not None else None,
            "name": obj.get("name"),
            "source": obj.get("source"),
            "thumbnailUri": obj.get("thumbnailUri")
        })
        return _obj



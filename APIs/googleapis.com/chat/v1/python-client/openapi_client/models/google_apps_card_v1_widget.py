# coding: utf-8

"""
    Google Chat API

    The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_card_v1_date_time_picker import GoogleAppsCardV1DateTimePicker
from openapi_client.models.google_apps_card_v1_selection_input import GoogleAppsCardV1SelectionInput
from openapi_client.models.google_apps_card_v1_text_input import GoogleAppsCardV1TextInput
from openapi_client.models.google_apps_card_v1_text_paragraph import GoogleAppsCardV1TextParagraph
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsCardV1Widget(BaseModel):
    """
    Each card is made up of widgets. A widget is a composite object that can represent one of text, images, buttons, and other object types.
    """ # noqa: E501
    button_list: Optional[GoogleAppsCardV1ButtonList] = Field(default=None, alias="buttonList")
    columns: Optional[GoogleAppsCardV1Columns] = None
    date_time_picker: Optional[GoogleAppsCardV1DateTimePicker] = Field(default=None, alias="dateTimePicker")
    decorated_text: Optional[GoogleAppsCardV1DecoratedText] = Field(default=None, alias="decoratedText")
    divider: Optional[Dict[str, Any]] = Field(default=None, description="Displays a divider between widgets as a horizontal line. For an example in Google Chat apps, see [Divider](https://developers.google.com/chat/ui/widgets/divider). [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend): For example, the following JSON creates a divider: ``` \"divider\": {} ```")
    grid: Optional[GoogleAppsCardV1Grid] = None
    horizontal_alignment: Optional[StrictStr] = Field(default=None, description="Specifies whether widgets align to the left, right, or center of a column.", alias="horizontalAlignment")
    image: Optional[GoogleAppsCardV1Image] = None
    selection_input: Optional[GoogleAppsCardV1SelectionInput] = Field(default=None, alias="selectionInput")
    text_input: Optional[GoogleAppsCardV1TextInput] = Field(default=None, alias="textInput")
    text_paragraph: Optional[GoogleAppsCardV1TextParagraph] = Field(default=None, alias="textParagraph")
    __properties: ClassVar[List[str]] = ["buttonList", "columns", "dateTimePicker", "decoratedText", "divider", "grid", "horizontalAlignment", "image", "selectionInput", "textInput", "textParagraph"]

    @field_validator('horizontal_alignment')
    def horizontal_alignment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HORIZONTAL_ALIGNMENT_UNSPECIFIED', 'START', 'CENTER', 'END']):
            raise ValueError("must be one of enum values ('HORIZONTAL_ALIGNMENT_UNSPECIFIED', 'START', 'CENTER', 'END')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsCardV1Widget from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of button_list
        if self.button_list:
            _dict['buttonList'] = self.button_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of columns
        if self.columns:
            _dict['columns'] = self.columns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_time_picker
        if self.date_time_picker:
            _dict['dateTimePicker'] = self.date_time_picker.to_dict()
        # override the default output from pydantic by calling `to_dict()` of decorated_text
        if self.decorated_text:
            _dict['decoratedText'] = self.decorated_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of grid
        if self.grid:
            _dict['grid'] = self.grid.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selection_input
        if self.selection_input:
            _dict['selectionInput'] = self.selection_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_input
        if self.text_input:
            _dict['textInput'] = self.text_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_paragraph
        if self.text_paragraph:
            _dict['textParagraph'] = self.text_paragraph.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsCardV1Widget from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buttonList": GoogleAppsCardV1ButtonList.from_dict(obj["buttonList"]) if obj.get("buttonList") is not None else None,
            "columns": GoogleAppsCardV1Columns.from_dict(obj["columns"]) if obj.get("columns") is not None else None,
            "dateTimePicker": GoogleAppsCardV1DateTimePicker.from_dict(obj["dateTimePicker"]) if obj.get("dateTimePicker") is not None else None,
            "decoratedText": GoogleAppsCardV1DecoratedText.from_dict(obj["decoratedText"]) if obj.get("decoratedText") is not None else None,
            "divider": obj.get("divider"),
            "grid": GoogleAppsCardV1Grid.from_dict(obj["grid"]) if obj.get("grid") is not None else None,
            "horizontalAlignment": obj.get("horizontalAlignment"),
            "image": GoogleAppsCardV1Image.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "selectionInput": GoogleAppsCardV1SelectionInput.from_dict(obj["selectionInput"]) if obj.get("selectionInput") is not None else None,
            "textInput": GoogleAppsCardV1TextInput.from_dict(obj["textInput"]) if obj.get("textInput") is not None else None,
            "textParagraph": GoogleAppsCardV1TextParagraph.from_dict(obj["textParagraph"]) if obj.get("textParagraph") is not None else None
        })
        return _obj

from openapi_client.models.google_apps_card_v1_button_list import GoogleAppsCardV1ButtonList
from openapi_client.models.google_apps_card_v1_columns import GoogleAppsCardV1Columns
from openapi_client.models.google_apps_card_v1_decorated_text import GoogleAppsCardV1DecoratedText
from openapi_client.models.google_apps_card_v1_grid import GoogleAppsCardV1Grid
from openapi_client.models.google_apps_card_v1_image import GoogleAppsCardV1Image
# TODO: Rewrite to not use raise_errors
GoogleAppsCardV1Widget.model_rebuild(raise_errors=False)


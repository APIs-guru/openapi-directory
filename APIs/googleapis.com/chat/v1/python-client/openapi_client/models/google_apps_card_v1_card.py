# coding: utf-8

"""
    Google Chat API

    The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_card_v1_card_header import GoogleAppsCardV1CardHeader
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsCardV1Card(BaseModel):
    """
    A card interface displayed in a Google Chat message or Google Workspace Add-on. Cards support a defined layout, interactive UI elements like buttons, and rich media like images. Use cards to present detailed information, gather information from users, and guide users to take a next step. [Card builder](https://addons.gsuite.google.com/uikit/builder) To learn how to build cards, see the following documentation: * For Google Chat apps, see [Design dynamic, interactive, and consistent UIs with cards](https://developers.google.com/chat/ui). * For Google Workspace Add-ons, see [Card-based interfaces](https://developers.google.com/apps-script/add-ons/concepts/cards). **Example: Card message for a Google Chat app** ![Example contact card](https://developers.google.com/chat/images/card_api_reference.png) To create the sample card message in Google Chat, use the following JSON: ``` { \"cardsV2\": [ { \"cardId\": \"unique-card-id\", \"card\": { \"header\": { \"title\": \"Sasha\", \"subtitle\": \"Software Engineer\", \"imageUrl\": \"https://developers.google.com/chat/images/quickstart-app-avatar.png\", \"imageType\": \"CIRCLE\", \"imageAltText\": \"Avatar for Sasha\", }, \"sections\": [ { \"header\": \"Contact Info\", \"collapsible\": true, \"uncollapsibleWidgetsCount\": 1, \"widgets\": [ { \"decoratedText\": { \"startIcon\": { \"knownIcon\": \"EMAIL\", }, \"text\": \"sasha@example.com\", } }, { \"decoratedText\": { \"startIcon\": { \"knownIcon\": \"PERSON\", }, \"text\": \"Online\", }, }, { \"decoratedText\": { \"startIcon\": { \"knownIcon\": \"PHONE\", }, \"text\": \"+1 (555) 555-1234\", } }, { \"buttonList\": { \"buttons\": [ { \"text\": \"Share\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/share\", } } }, { \"text\": \"Edit\", \"onClick\": { \"action\": { \"function\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"EDIT\", } ], } } }, ], } }, ], }, ], }, } ], } ```
    """ # noqa: E501
    card_actions: Optional[List[GoogleAppsCardV1CardAction]] = Field(default=None, description="The card's actions. Actions are added to the card's toolbar menu. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons): For example, the following JSON constructs a card action menu with `Settings` and `Send Feedback` options: ``` \"card_actions\": [ { \"actionLabel\": \"Settings\", \"onClick\": { \"action\": { \"functionName\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"SETTING\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } }, { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ] ```", alias="cardActions")
    display_style: Optional[StrictStr] = Field(default=None, description="In Google Workspace Add-ons, sets the display properties of the `peekCardHeader`. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons):", alias="displayStyle")
    fixed_footer: Optional[GoogleAppsCardV1CardFixedFooter] = Field(default=None, alias="fixedFooter")
    header: Optional[GoogleAppsCardV1CardHeader] = None
    name: Optional[StrictStr] = Field(default=None, description="Name of the card. Used as a card identifier in card navigation. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons):")
    peek_card_header: Optional[GoogleAppsCardV1CardHeader] = Field(default=None, alias="peekCardHeader")
    section_divider_style: Optional[StrictStr] = Field(default=None, description="The divider style between sections.", alias="sectionDividerStyle")
    sections: Optional[List[GoogleAppsCardV1Section]] = Field(default=None, description="Contains a collection of widgets. Each section has its own, optional header. Sections are visually separated by a line divider. For an example in Google Chat apps, see [Card section](https://developers.google.com/chat/ui/widgets/card-section).")
    __properties: ClassVar[List[str]] = ["cardActions", "displayStyle", "fixedFooter", "header", "name", "peekCardHeader", "sectionDividerStyle", "sections"]

    @field_validator('display_style')
    def display_style_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DISPLAY_STYLE_UNSPECIFIED', 'PEEK', 'REPLACE']):
            raise ValueError("must be one of enum values ('DISPLAY_STYLE_UNSPECIFIED', 'PEEK', 'REPLACE')")
        return value

    @field_validator('section_divider_style')
    def section_divider_style_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DIVIDER_STYLE_UNSPECIFIED', 'SOLID_DIVIDER', 'NO_DIVIDER']):
            raise ValueError("must be one of enum values ('DIVIDER_STYLE_UNSPECIFIED', 'SOLID_DIVIDER', 'NO_DIVIDER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsCardV1Card from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in card_actions (list)
        _items = []
        if self.card_actions:
            for _item_card_actions in self.card_actions:
                if _item_card_actions:
                    _items.append(_item_card_actions.to_dict())
            _dict['cardActions'] = _items
        # override the default output from pydantic by calling `to_dict()` of fixed_footer
        if self.fixed_footer:
            _dict['fixedFooter'] = self.fixed_footer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of header
        if self.header:
            _dict['header'] = self.header.to_dict()
        # override the default output from pydantic by calling `to_dict()` of peek_card_header
        if self.peek_card_header:
            _dict['peekCardHeader'] = self.peek_card_header.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sections (list)
        _items = []
        if self.sections:
            for _item_sections in self.sections:
                if _item_sections:
                    _items.append(_item_sections.to_dict())
            _dict['sections'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsCardV1Card from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cardActions": [GoogleAppsCardV1CardAction.from_dict(_item) for _item in obj["cardActions"]] if obj.get("cardActions") is not None else None,
            "displayStyle": obj.get("displayStyle"),
            "fixedFooter": GoogleAppsCardV1CardFixedFooter.from_dict(obj["fixedFooter"]) if obj.get("fixedFooter") is not None else None,
            "header": GoogleAppsCardV1CardHeader.from_dict(obj["header"]) if obj.get("header") is not None else None,
            "name": obj.get("name"),
            "peekCardHeader": GoogleAppsCardV1CardHeader.from_dict(obj["peekCardHeader"]) if obj.get("peekCardHeader") is not None else None,
            "sectionDividerStyle": obj.get("sectionDividerStyle"),
            "sections": [GoogleAppsCardV1Section.from_dict(_item) for _item in obj["sections"]] if obj.get("sections") is not None else None
        })
        return _obj

from openapi_client.models.google_apps_card_v1_card_action import GoogleAppsCardV1CardAction
from openapi_client.models.google_apps_card_v1_card_fixed_footer import GoogleAppsCardV1CardFixedFooter
from openapi_client.models.google_apps_card_v1_section import GoogleAppsCardV1Section
# TODO: Rewrite to not use raise_errors
GoogleAppsCardV1Card.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    Google Chat API

    The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.button import Button
from openapi_client.models.on_click import OnClick
from typing import Optional, Set
from typing_extensions import Self

class KeyValue(BaseModel):
    """
    A UI element contains a key (label) and a value (content). This element can also contain some actions such as `onclick` button.
    """ # noqa: E501
    bottom_label: Optional[StrictStr] = Field(default=None, description="The text of the bottom label. Formatted text supported. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).", alias="bottomLabel")
    button: Optional[Button] = None
    content: Optional[StrictStr] = Field(default=None, description="The text of the content. Formatted text supported and always required. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).")
    content_multiline: Optional[StrictBool] = Field(default=None, description="If the content should be multiline.", alias="contentMultiline")
    icon: Optional[StrictStr] = Field(default=None, description="An enum value that's replaced by the Chat API with the corresponding icon image.")
    icon_url: Optional[StrictStr] = Field(default=None, description="The icon specified by a URL.", alias="iconUrl")
    on_click: Optional[OnClick] = Field(default=None, alias="onClick")
    top_label: Optional[StrictStr] = Field(default=None, description="The text of the top label. Formatted text supported. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).", alias="topLabel")
    __properties: ClassVar[List[str]] = ["bottomLabel", "button", "content", "contentMultiline", "icon", "iconUrl", "onClick", "topLabel"]

    @field_validator('icon')
    def icon_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ICON_UNSPECIFIED', 'AIRPLANE', 'BOOKMARK', 'BUS', 'CAR', 'CLOCK', 'CONFIRMATION_NUMBER_ICON', 'DOLLAR', 'DESCRIPTION', 'EMAIL', 'EVENT_PERFORMER', 'EVENT_SEAT', 'FLIGHT_ARRIVAL', 'FLIGHT_DEPARTURE', 'HOTEL', 'HOTEL_ROOM_TYPE', 'INVITE', 'MAP_PIN', 'MEMBERSHIP', 'MULTIPLE_PEOPLE', 'OFFER', 'PERSON', 'PHONE', 'RESTAURANT_ICON', 'SHOPPING_CART', 'STAR', 'STORE', 'TICKET', 'TRAIN', 'VIDEO_CAMERA', 'VIDEO_PLAY']):
            raise ValueError("must be one of enum values ('ICON_UNSPECIFIED', 'AIRPLANE', 'BOOKMARK', 'BUS', 'CAR', 'CLOCK', 'CONFIRMATION_NUMBER_ICON', 'DOLLAR', 'DESCRIPTION', 'EMAIL', 'EVENT_PERFORMER', 'EVENT_SEAT', 'FLIGHT_ARRIVAL', 'FLIGHT_DEPARTURE', 'HOTEL', 'HOTEL_ROOM_TYPE', 'INVITE', 'MAP_PIN', 'MEMBERSHIP', 'MULTIPLE_PEOPLE', 'OFFER', 'PERSON', 'PHONE', 'RESTAURANT_ICON', 'SHOPPING_CART', 'STAR', 'STORE', 'TICKET', 'TRAIN', 'VIDEO_CAMERA', 'VIDEO_PLAY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KeyValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of button
        if self.button:
            _dict['button'] = self.button.to_dict()
        # override the default output from pydantic by calling `to_dict()` of on_click
        if self.on_click:
            _dict['onClick'] = self.on_click.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KeyValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bottomLabel": obj.get("bottomLabel"),
            "button": Button.from_dict(obj["button"]) if obj.get("button") is not None else None,
            "content": obj.get("content"),
            "contentMultiline": obj.get("contentMultiline"),
            "icon": obj.get("icon"),
            "iconUrl": obj.get("iconUrl"),
            "onClick": OnClick.from_dict(obj["onClick"]) if obj.get("onClick") is not None else None,
            "topLabel": obj.get("topLabel")
        })
        return _obj



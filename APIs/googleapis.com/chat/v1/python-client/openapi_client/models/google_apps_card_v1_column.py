# coding: utf-8

"""
    Google Chat API

    The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsCardV1Column(BaseModel):
    """
    A column. [Google Chat apps](https://developers.google.com/chat):
    """ # noqa: E501
    horizontal_alignment: Optional[StrictStr] = Field(default=None, description="Specifies whether widgets align to the left, right, or center of a column.", alias="horizontalAlignment")
    horizontal_size_style: Optional[StrictStr] = Field(default=None, description="Specifies how a column fills the width of the card. [Google Chat apps](https://developers.google.com/chat):", alias="horizontalSizeStyle")
    vertical_alignment: Optional[StrictStr] = Field(default=None, description="Specifies whether widgets align to the top, bottom, or center of a column. [Google Chat apps](https://developers.google.com/chat):", alias="verticalAlignment")
    widgets: Optional[List[GoogleAppsCardV1Widgets]] = Field(default=None, description="An array of widgets included in a column. Widgets appear in the order that they are specified.")
    __properties: ClassVar[List[str]] = ["horizontalAlignment", "horizontalSizeStyle", "verticalAlignment", "widgets"]

    @field_validator('horizontal_alignment')
    def horizontal_alignment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HORIZONTAL_ALIGNMENT_UNSPECIFIED', 'START', 'CENTER', 'END']):
            raise ValueError("must be one of enum values ('HORIZONTAL_ALIGNMENT_UNSPECIFIED', 'START', 'CENTER', 'END')")
        return value

    @field_validator('horizontal_size_style')
    def horizontal_size_style_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HORIZONTAL_SIZE_STYLE_UNSPECIFIED', 'FILL_AVAILABLE_SPACE', 'FILL_MINIMUM_SPACE']):
            raise ValueError("must be one of enum values ('HORIZONTAL_SIZE_STYLE_UNSPECIFIED', 'FILL_AVAILABLE_SPACE', 'FILL_MINIMUM_SPACE')")
        return value

    @field_validator('vertical_alignment')
    def vertical_alignment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VERTICAL_ALIGNMENT_UNSPECIFIED', 'CENTER', 'TOP', 'BOTTOM']):
            raise ValueError("must be one of enum values ('VERTICAL_ALIGNMENT_UNSPECIFIED', 'CENTER', 'TOP', 'BOTTOM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsCardV1Column from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in widgets (list)
        _items = []
        if self.widgets:
            for _item_widgets in self.widgets:
                if _item_widgets:
                    _items.append(_item_widgets.to_dict())
            _dict['widgets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsCardV1Column from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "horizontalAlignment": obj.get("horizontalAlignment"),
            "horizontalSizeStyle": obj.get("horizontalSizeStyle"),
            "verticalAlignment": obj.get("verticalAlignment"),
            "widgets": [GoogleAppsCardV1Widgets.from_dict(_item) for _item in obj["widgets"]] if obj.get("widgets") is not None else None
        })
        return _obj

from openapi_client.models.google_apps_card_v1_widgets import GoogleAppsCardV1Widgets
# TODO: Rewrite to not use raise_errors
GoogleAppsCardV1Column.model_rebuild(raise_errors=False)


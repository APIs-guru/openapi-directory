# coding: utf-8

"""
    Google Chat API

    The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.button import Button
from openapi_client.models.image import Image
from openapi_client.models.key_value import KeyValue
from openapi_client.models.text_paragraph import TextParagraph
from typing import Optional, Set
from typing_extensions import Self

class WidgetMarkup(BaseModel):
    """
    A widget is a UI element that presents text and images.
    """ # noqa: E501
    buttons: Optional[List[Button]] = Field(default=None, description="A list of buttons. Buttons is also `oneof data` and only one of these fields should be set.")
    image: Optional[Image] = None
    key_value: Optional[KeyValue] = Field(default=None, alias="keyValue")
    text_paragraph: Optional[TextParagraph] = Field(default=None, alias="textParagraph")
    __properties: ClassVar[List[str]] = ["buttons", "image", "keyValue", "textParagraph"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WidgetMarkup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in buttons (list)
        _items = []
        if self.buttons:
            for _item_buttons in self.buttons:
                if _item_buttons:
                    _items.append(_item_buttons.to_dict())
            _dict['buttons'] = _items
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of key_value
        if self.key_value:
            _dict['keyValue'] = self.key_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_paragraph
        if self.text_paragraph:
            _dict['textParagraph'] = self.text_paragraph.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WidgetMarkup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buttons": [Button.from_dict(_item) for _item in obj["buttons"]] if obj.get("buttons") is not None else None,
            "image": Image.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "keyValue": KeyValue.from_dict(obj["keyValue"]) if obj.get("keyValue") is not None else None,
            "textParagraph": TextParagraph.from_dict(obj["textParagraph"]) if obj.get("textParagraph") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Chat API

    The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_card_v1_action import GoogleAppsCardV1Action
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsCardV1SwitchControl(BaseModel):
    """
    Either a toggle-style switch or a checkbox inside a `decoratedText` widget. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend): Only supported in the `decoratedText` widget.
    """ # noqa: E501
    control_type: Optional[StrictStr] = Field(default=None, description="How the switch appears in the user interface. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):", alias="controlType")
    name: Optional[StrictStr] = Field(default=None, description="The name by which the switch widget is identified in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).")
    on_change_action: Optional[GoogleAppsCardV1Action] = Field(default=None, alias="onChangeAction")
    selected: Optional[StrictBool] = Field(default=None, description="When `true`, the switch is selected.")
    value: Optional[StrictStr] = Field(default=None, description="The value entered by a user, returned as part of a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).")
    __properties: ClassVar[List[str]] = ["controlType", "name", "onChangeAction", "selected", "value"]

    @field_validator('control_type')
    def control_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SWITCH', 'CHECKBOX', 'CHECK_BOX']):
            raise ValueError("must be one of enum values ('SWITCH', 'CHECKBOX', 'CHECK_BOX')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsCardV1SwitchControl from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of on_change_action
        if self.on_change_action:
            _dict['onChangeAction'] = self.on_change_action.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsCardV1SwitchControl from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "controlType": obj.get("controlType"),
            "name": obj.get("name"),
            "onChangeAction": GoogleAppsCardV1Action.from_dict(obj["onChangeAction"]) if obj.get("onChangeAction") is not None else None,
            "selected": obj.get("selected"),
            "value": obj.get("value")
        })
        return _obj



# coding: utf-8

"""
    Google Chat API

    The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.group import Group
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class Membership(BaseModel):
    """
    Represents a membership relation in Google Chat, such as whether a user or Chat app is invited to, part of, or absent from a space.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Optional. Immutable. The creation time of the membership, such as when a member joined or was invited to join a space. This field is output only, except when used to import historical memberships in import mode spaces.", alias="createTime")
    delete_time: Optional[StrictStr] = Field(default=None, description="Optional. Immutable. The deletion time of the membership, such as when a member left or was removed from a space. This field is output only, except when used to import historical memberships in import mode spaces.", alias="deleteTime")
    group_member: Optional[Group] = Field(default=None, alias="groupMember")
    member: Optional[User] = None
    name: Optional[StrictStr] = Field(default=None, description="Resource name of the membership, assigned by the server. Format: `spaces/{space}/members/{member}`")
    role: Optional[StrictStr] = Field(default=None, description="Optional. User's role within a Chat space, which determines their permitted actions in the space. [Developer Preview](https://developers.google.com/workspace/preview): This field can only be used as input in `UpdateMembership`.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the membership.")
    __properties: ClassVar[List[str]] = ["createTime", "deleteTime", "groupMember", "member", "name", "role", "state"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MEMBERSHIP_ROLE_UNSPECIFIED', 'ROLE_MEMBER', 'ROLE_MANAGER']):
            raise ValueError("must be one of enum values ('MEMBERSHIP_ROLE_UNSPECIFIED', 'ROLE_MEMBER', 'ROLE_MANAGER')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MEMBERSHIP_STATE_UNSPECIFIED', 'JOINED', 'INVITED', 'NOT_A_MEMBER']):
            raise ValueError("must be one of enum values ('MEMBERSHIP_STATE_UNSPECIFIED', 'JOINED', 'INVITED', 'NOT_A_MEMBER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Membership from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of group_member
        if self.group_member:
            _dict['groupMember'] = self.group_member.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member
        if self.member:
            _dict['member'] = self.member.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Membership from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "deleteTime": obj.get("deleteTime"),
            "groupMember": Group.from_dict(obj["groupMember"]) if obj.get("groupMember") is not None else None,
            "member": User.from_dict(obj["member"]) if obj.get("member") is not None else None,
            "name": obj.get("name"),
            "role": obj.get("role"),
            "state": obj.get("state")
        })
        return _obj



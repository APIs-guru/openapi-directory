# coding: utf-8

"""
    Google Chat API

    The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.common_event_object import CommonEventObject
from openapi_client.models.form_action import FormAction
from openapi_client.models.message import Message
from openapi_client.models.space import Space
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class DeprecatedEvent(BaseModel):
    """
    A Google Chat app interaction event. To learn about interaction events, see [Receive and respond to interactions with your Google Chat app](https://developers.google.com/chat/api/guides/message-formats). To learn about event types and for example event payloads, see [Types of Google Chat app interaction events](https://developers.google.com/chat/api/guides/message-formats/events).
    """ # noqa: E501
    action: Optional[FormAction] = None
    common: Optional[CommonEventObject] = None
    config_complete_redirect_url: Optional[StrictStr] = Field(default=None, description="The URL the Chat app should redirect the user to after they have completed an authorization or configuration flow outside of Google Chat. For more information, see [Connect a Chat app with other services & tools](https://developers.google.com/chat/how-tos/connect-web-services-tools).", alias="configCompleteRedirectUrl")
    dialog_event_type: Optional[StrictStr] = Field(default=None, description="The type of [dialog](https://developers.google.com/chat/how-tos/dialogs) interaction event received.", alias="dialogEventType")
    event_time: Optional[StrictStr] = Field(default=None, description="The timestamp indicating when the interaction event occurred.", alias="eventTime")
    is_dialog_event: Optional[StrictBool] = Field(default=None, description="For `CARD_CLICKED` interaction events, whether the user interacted with a [dialog](https://developers.google.com/chat/how-tos/dialogs).", alias="isDialogEvent")
    message: Optional[Message] = None
    space: Optional[Space] = None
    thread_key: Optional[StrictStr] = Field(default=None, description="The Chat app-defined key for the thread related to the interaction event. See [`spaces.messages.thread.threadKey`](/chat/api/reference/rest/v1/spaces.messages#Thread.FIELDS.thread_key) for more information.", alias="threadKey")
    token: Optional[StrictStr] = Field(default=None, description="A secret value that legacy Chat apps can use to verify if a request is from Google. Google randomly generates the token, and its value remains static. You can obtain, revoke, or regenerate the token from the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat) in the Google Cloud Console. Modern Chat apps don't use this field. It is absent from API responses and the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat).")
    type: Optional[StrictStr] = Field(default=None, description="The type of interaction event. For details, see [Types of Google Chat app interaction events](https://developers.google.com/chat/api/guides/message-formats/events).")
    user: Optional[User] = None
    __properties: ClassVar[List[str]] = ["action", "common", "configCompleteRedirectUrl", "dialogEventType", "eventTime", "isDialogEvent", "message", "space", "threadKey", "token", "type", "user"]

    @field_validator('dialog_event_type')
    def dialog_event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'REQUEST_DIALOG', 'SUBMIT_DIALOG', 'CANCEL_DIALOG']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'REQUEST_DIALOG', 'SUBMIT_DIALOG', 'CANCEL_DIALOG')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'MESSAGE', 'ADDED_TO_SPACE', 'REMOVED_FROM_SPACE', 'CARD_CLICKED', 'WIDGET_UPDATED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'MESSAGE', 'ADDED_TO_SPACE', 'REMOVED_FROM_SPACE', 'CARD_CLICKED', 'WIDGET_UPDATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeprecatedEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of action
        if self.action:
            _dict['action'] = self.action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of common
        if self.common:
            _dict['common'] = self.common.to_dict()
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of space
        if self.space:
            _dict['space'] = self.space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeprecatedEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": FormAction.from_dict(obj["action"]) if obj.get("action") is not None else None,
            "common": CommonEventObject.from_dict(obj["common"]) if obj.get("common") is not None else None,
            "configCompleteRedirectUrl": obj.get("configCompleteRedirectUrl"),
            "dialogEventType": obj.get("dialogEventType"),
            "eventTime": obj.get("eventTime"),
            "isDialogEvent": obj.get("isDialogEvent"),
            "message": Message.from_dict(obj["message"]) if obj.get("message") is not None else None,
            "space": Space.from_dict(obj["space"]) if obj.get("space") is not None else None,
            "threadKey": obj.get("threadKey"),
            "token": obj.get("token"),
            "type": obj.get("type"),
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj



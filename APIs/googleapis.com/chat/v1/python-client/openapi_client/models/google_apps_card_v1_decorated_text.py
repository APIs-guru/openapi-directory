# coding: utf-8

"""
    Google Chat API

    The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_card_v1_icon import GoogleAppsCardV1Icon
from openapi_client.models.google_apps_card_v1_switch_control import GoogleAppsCardV1SwitchControl
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsCardV1DecoratedText(BaseModel):
    """
    A widget that displays text with optional decorations such as a label above or below the text, an icon in front of the text, a selection widget, or a button after the text. For an example in Google Chat apps, see [Decorated text](https://developers.google.com/chat/ui/widgets/decorated-text). [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):
    """ # noqa: E501
    bottom_label: Optional[StrictStr] = Field(default=None, description="The text that appears below `text`. Always wraps.", alias="bottomLabel")
    button: Optional[GoogleAppsCardV1Button] = None
    end_icon: Optional[GoogleAppsCardV1Icon] = Field(default=None, alias="endIcon")
    icon: Optional[GoogleAppsCardV1Icon] = None
    on_click: Optional[GoogleAppsCardV1OnClick] = Field(default=None, alias="onClick")
    start_icon: Optional[GoogleAppsCardV1Icon] = Field(default=None, alias="startIcon")
    switch_control: Optional[GoogleAppsCardV1SwitchControl] = Field(default=None, alias="switchControl")
    text: Optional[StrictStr] = Field(default=None, description="Required. The primary text. Supports simple formatting. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).")
    top_label: Optional[StrictStr] = Field(default=None, description="The text that appears above `text`. Always truncates.", alias="topLabel")
    wrap_text: Optional[StrictBool] = Field(default=None, description="The wrap text setting. If `true`, the text wraps and displays on multiple lines. Otherwise, the text is truncated. Only applies to `text`, not `topLabel` and `bottomLabel`.", alias="wrapText")
    __properties: ClassVar[List[str]] = ["bottomLabel", "button", "endIcon", "icon", "onClick", "startIcon", "switchControl", "text", "topLabel", "wrapText"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsCardV1DecoratedText from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of button
        if self.button:
            _dict['button'] = self.button.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_icon
        if self.end_icon:
            _dict['endIcon'] = self.end_icon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of icon
        if self.icon:
            _dict['icon'] = self.icon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of on_click
        if self.on_click:
            _dict['onClick'] = self.on_click.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_icon
        if self.start_icon:
            _dict['startIcon'] = self.start_icon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of switch_control
        if self.switch_control:
            _dict['switchControl'] = self.switch_control.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsCardV1DecoratedText from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bottomLabel": obj.get("bottomLabel"),
            "button": GoogleAppsCardV1Button.from_dict(obj["button"]) if obj.get("button") is not None else None,
            "endIcon": GoogleAppsCardV1Icon.from_dict(obj["endIcon"]) if obj.get("endIcon") is not None else None,
            "icon": GoogleAppsCardV1Icon.from_dict(obj["icon"]) if obj.get("icon") is not None else None,
            "onClick": GoogleAppsCardV1OnClick.from_dict(obj["onClick"]) if obj.get("onClick") is not None else None,
            "startIcon": GoogleAppsCardV1Icon.from_dict(obj["startIcon"]) if obj.get("startIcon") is not None else None,
            "switchControl": GoogleAppsCardV1SwitchControl.from_dict(obj["switchControl"]) if obj.get("switchControl") is not None else None,
            "text": obj.get("text"),
            "topLabel": obj.get("topLabel"),
            "wrapText": obj.get("wrapText")
        })
        return _obj

from openapi_client.models.google_apps_card_v1_button import GoogleAppsCardV1Button
from openapi_client.models.google_apps_card_v1_on_click import GoogleAppsCardV1OnClick
# TODO: Rewrite to not use raise_errors
GoogleAppsCardV1DecoratedText.model_rebuild(raise_errors=False)


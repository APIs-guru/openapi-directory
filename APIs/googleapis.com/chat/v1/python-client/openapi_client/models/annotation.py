# coding: utf-8

"""
    Google Chat API

    The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.slash_command_metadata import SlashCommandMetadata
from openapi_client.models.user_mention_metadata import UserMentionMetadata
from typing import Optional, Set
from typing_extensions import Self

class Annotation(BaseModel):
    """
    Output only. Annotations associated with the plain-text body of the message. To add basic formatting to a text message, see [Format text messages](https://developers.google.com/chat/format-messages). Example plain-text message body: ``` Hello @FooBot how are you!\" ``` The corresponding annotations metadata: ``` \"annotations\":[{ \"type\":\"USER_MENTION\", \"startIndex\":6, \"length\":7, \"userMention\": { \"user\": { \"name\":\"users/{user}\", \"displayName\":\"FooBot\", \"avatarUrl\":\"https://goo.gl/aeDtrS\", \"type\":\"BOT\" }, \"type\":\"MENTION\" } }] ```
    """ # noqa: E501
    length: Optional[StrictInt] = Field(default=None, description="Length of the substring in the plain-text message body this annotation corresponds to.")
    slash_command: Optional[SlashCommandMetadata] = Field(default=None, alias="slashCommand")
    start_index: Optional[StrictInt] = Field(default=None, description="Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to.", alias="startIndex")
    type: Optional[StrictStr] = Field(default=None, description="The type of this annotation.")
    user_mention: Optional[UserMentionMetadata] = Field(default=None, alias="userMention")
    __properties: ClassVar[List[str]] = ["length", "slashCommand", "startIndex", "type", "userMention"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ANNOTATION_TYPE_UNSPECIFIED', 'USER_MENTION', 'SLASH_COMMAND']):
            raise ValueError("must be one of enum values ('ANNOTATION_TYPE_UNSPECIFIED', 'USER_MENTION', 'SLASH_COMMAND')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Annotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of slash_command
        if self.slash_command:
            _dict['slashCommand'] = self.slash_command.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_mention
        if self.user_mention:
            _dict['userMention'] = self.user_mention.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Annotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "length": obj.get("length"),
            "slashCommand": SlashCommandMetadata.from_dict(obj["slashCommand"]) if obj.get("slashCommand") is not None else None,
            "startIndex": obj.get("startIndex"),
            "type": obj.get("type"),
            "userMention": UserMentionMetadata.from_dict(obj["userMention"]) if obj.get("userMention") is not None else None
        })
        return _obj



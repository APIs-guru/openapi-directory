# coding: utf-8

"""
    Google Chat API

    The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_card_v1_border_style import GoogleAppsCardV1BorderStyle
from openapi_client.models.google_apps_card_v1_grid_item import GoogleAppsCardV1GridItem
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsCardV1Grid(BaseModel):
    """
    Displays a grid with a collection of items. Items can only include text or images. For responsive columns, or to include more than text or images, use `Columns`. For an example in Google Chat apps, see [Grid](https://developers.google.com/chat/ui/widgets/grid). A grid supports any number of columns and items. The number of rows is determined by items divided by columns. A grid with 10 items and 2 columns has 5 rows. A grid with 11 items and 2 columns has 6 rows. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend): For example, the following JSON creates a 2 column grid with a single item: ``` \"grid\": { \"title\": \"A fine collection of items\", \"columnCount\": 2, \"borderStyle\": { \"type\": \"STROKE\", \"cornerRadius\": 4 }, \"items\": [ { \"image\": { \"imageUri\": \"https://www.example.com/image.png\", \"cropStyle\": { \"type\": \"SQUARE\" }, \"borderStyle\": { \"type\": \"STROKE\" } }, \"title\": \"An item\", \"textAlignment\": \"CENTER\" } ], \"onClick\": { \"openLink\": { \"url\": \"https://www.example.com\" } } } ```
    """ # noqa: E501
    border_style: Optional[GoogleAppsCardV1BorderStyle] = Field(default=None, alias="borderStyle")
    column_count: Optional[StrictInt] = Field(default=None, description="The number of columns to display in the grid. A default value is used if this field isn't specified, and that default value is different depending on where the grid is shown (dialog versus companion).", alias="columnCount")
    items: Optional[List[GoogleAppsCardV1GridItem]] = Field(default=None, description="The items to display in the grid.")
    on_click: Optional[GoogleAppsCardV1OnClick] = Field(default=None, alias="onClick")
    title: Optional[StrictStr] = Field(default=None, description="The text that displays in the grid header.")
    __properties: ClassVar[List[str]] = ["borderStyle", "columnCount", "items", "onClick", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsCardV1Grid from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of border_style
        if self.border_style:
            _dict['borderStyle'] = self.border_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of on_click
        if self.on_click:
            _dict['onClick'] = self.on_click.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsCardV1Grid from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "borderStyle": GoogleAppsCardV1BorderStyle.from_dict(obj["borderStyle"]) if obj.get("borderStyle") is not None else None,
            "columnCount": obj.get("columnCount"),
            "items": [GoogleAppsCardV1GridItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "onClick": GoogleAppsCardV1OnClick.from_dict(obj["onClick"]) if obj.get("onClick") is not None else None,
            "title": obj.get("title")
        })
        return _obj

from openapi_client.models.google_apps_card_v1_on_click import GoogleAppsCardV1OnClick
# TODO: Rewrite to not use raise_errors
GoogleAppsCardV1Grid.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    Transcoder API

    This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.drm_systems import DrmSystems
from openapi_client.models.mpeg_common_encryption import MpegCommonEncryption
from openapi_client.models.secret_manager_source import SecretManagerSource
from typing import Optional, Set
from typing_extensions import Self

class Encryption(BaseModel):
    """
    Encryption settings.
    """ # noqa: E501
    aes128: Optional[Dict[str, Any]] = Field(default=None, description="Configuration for AES-128 encryption.")
    drm_systems: Optional[DrmSystems] = Field(default=None, alias="drmSystems")
    id: Optional[StrictStr] = Field(default=None, description="Required. Identifier for this set of encryption options.")
    mpeg_cenc: Optional[MpegCommonEncryption] = Field(default=None, alias="mpegCenc")
    sample_aes: Optional[Dict[str, Any]] = Field(default=None, description="Configuration for SAMPLE-AES encryption.", alias="sampleAes")
    secret_manager_key_source: Optional[SecretManagerSource] = Field(default=None, alias="secretManagerKeySource")
    __properties: ClassVar[List[str]] = ["aes128", "drmSystems", "id", "mpegCenc", "sampleAes", "secretManagerKeySource"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Encryption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of drm_systems
        if self.drm_systems:
            _dict['drmSystems'] = self.drm_systems.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mpeg_cenc
        if self.mpeg_cenc:
            _dict['mpegCenc'] = self.mpeg_cenc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secret_manager_key_source
        if self.secret_manager_key_source:
            _dict['secretManagerKeySource'] = self.secret_manager_key_source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Encryption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aes128": obj.get("aes128"),
            "drmSystems": DrmSystems.from_dict(obj["drmSystems"]) if obj.get("drmSystems") is not None else None,
            "id": obj.get("id"),
            "mpegCenc": MpegCommonEncryption.from_dict(obj["mpegCenc"]) if obj.get("mpegCenc") is not None else None,
            "sampleAes": obj.get("sampleAes"),
            "secretManagerKeySource": SecretManagerSource.from_dict(obj["secretManagerKeySource"]) if obj.get("secretManagerKeySource") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Transcoder API

    This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.job_config import JobConfig
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class Job(BaseModel):
    """
    Transcoding job resource.
    """ # noqa: E501
    batch_mode_priority: Optional[StrictInt] = Field(default=None, description="The processing priority of a batch job. This field can only be set for batch mode jobs. The default value is 0. This value cannot be negative. Higher values correspond to higher priorities for the job.", alias="batchModePriority")
    config: Optional[JobConfig] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the job was created.", alias="createTime")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the transcoding finished.", alias="endTime")
    error: Optional[Status] = None
    input_uri: Optional[StrictStr] = Field(default=None, description="Input only. Specify the `input_uri` to populate empty `uri` fields in each element of `Job.config.inputs` or `JobTemplate.config.inputs` when using template. URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).", alias="inputUri")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels associated with this job. You can use these to organize and group your jobs.")
    mode: Optional[StrictStr] = Field(default=None, description="The processing mode of the job. The default is `PROCESSING_MODE_INTERACTIVE`.")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the job. Format: `projects/{project_number}/locations/{location}/jobs/{job}`")
    optimization: Optional[StrictStr] = Field(default=None, description="Optional. The optimization strategy of the job. The default is `AUTODETECT`.")
    output_uri: Optional[StrictStr] = Field(default=None, description="Input only. Specify the `output_uri` to populate an empty `Job.config.output.uri` or `JobTemplate.config.output.uri` when using template. URI for the output file(s). For example, `gs://my-bucket/outputs/`. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).", alias="outputUri")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the transcoding started.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the job.")
    template_id: Optional[StrictStr] = Field(default=None, description="Input only. Specify the `template_id` to use for populating `Job.config`. The default is `preset/web-hd`, which is the only supported preset. User defined JobTemplate: `{job_template_id}`", alias="templateId")
    ttl_after_completion_days: Optional[StrictInt] = Field(default=None, description="Job time to live value in days, which will be effective after job completion. Job should be deleted automatically after the given TTL. Enter a value between 1 and 90. The default is 30.", alias="ttlAfterCompletionDays")
    __properties: ClassVar[List[str]] = ["batchModePriority", "config", "createTime", "endTime", "error", "inputUri", "labels", "mode", "name", "optimization", "outputUri", "startTime", "state", "templateId", "ttlAfterCompletionDays"]

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROCESSING_MODE_UNSPECIFIED', 'PROCESSING_MODE_INTERACTIVE', 'PROCESSING_MODE_BATCH']):
            raise ValueError("must be one of enum values ('PROCESSING_MODE_UNSPECIFIED', 'PROCESSING_MODE_INTERACTIVE', 'PROCESSING_MODE_BATCH')")
        return value

    @field_validator('optimization')
    def optimization_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OPTIMIZATION_STRATEGY_UNSPECIFIED', 'AUTODETECT', 'DISABLED']):
            raise ValueError("must be one of enum values ('OPTIMIZATION_STRATEGY_UNSPECIFIED', 'AUTODETECT', 'DISABLED')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROCESSING_STATE_UNSPECIFIED', 'PENDING', 'RUNNING', 'SUCCEEDED', 'FAILED']):
            raise ValueError("must be one of enum values ('PROCESSING_STATE_UNSPECIFIED', 'PENDING', 'RUNNING', 'SUCCEEDED', 'FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "end_time",
            "start_time",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "batchModePriority": obj.get("batchModePriority"),
            "config": JobConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "createTime": obj.get("createTime"),
            "endTime": obj.get("endTime"),
            "error": Status.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "inputUri": obj.get("inputUri"),
            "labels": obj.get("labels"),
            "mode": obj.get("mode"),
            "name": obj.get("name"),
            "optimization": obj.get("optimization"),
            "outputUri": obj.get("outputUri"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "templateId": obj.get("templateId"),
            "ttlAfterCompletionDays": obj.get("ttlAfterCompletionDays")
        })
        return _obj



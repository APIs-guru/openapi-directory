# coding: utf-8

"""
    Transcoder API

    This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AudioMapping(BaseModel):
    """
    The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.
    """ # noqa: E501
    atom_key: Optional[StrictStr] = Field(default=None, description="Required. The EditAtom.key that references the atom with audio inputs in the JobConfig.edit_list.", alias="atomKey")
    gain_db: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.", alias="gainDb")
    input_channel: Optional[StrictInt] = Field(default=None, description="Required. The zero-based index of the channel in the input audio stream.", alias="inputChannel")
    input_key: Optional[StrictStr] = Field(default=None, description="Required. The Input.key that identifies the input file.", alias="inputKey")
    input_track: Optional[StrictInt] = Field(default=None, description="Required. The zero-based index of the track in the input file.", alias="inputTrack")
    output_channel: Optional[StrictInt] = Field(default=None, description="Required. The zero-based index of the channel in the output audio stream.", alias="outputChannel")
    __properties: ClassVar[List[str]] = ["atomKey", "gainDb", "inputChannel", "inputKey", "inputTrack", "outputChannel"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AudioMapping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AudioMapping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "atomKey": obj.get("atomKey"),
            "gainDb": obj.get("gainDb"),
            "inputChannel": obj.get("inputChannel"),
            "inputKey": obj.get("inputKey"),
            "inputTrack": obj.get("inputTrack"),
            "outputChannel": obj.get("outputChannel")
        })
        return _obj



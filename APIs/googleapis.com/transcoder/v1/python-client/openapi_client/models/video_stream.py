# coding: utf-8

"""
    Transcoder API

    This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.h264_codec_settings import H264CodecSettings
from openapi_client.models.h265_codec_settings import H265CodecSettings
from openapi_client.models.vp9_codec_settings import Vp9CodecSettings
from typing import Optional, Set
from typing_extensions import Self

class VideoStream(BaseModel):
    """
    Video stream resource.
    """ # noqa: E501
    h264: Optional[H264CodecSettings] = None
    h265: Optional[H265CodecSettings] = None
    vp9: Optional[Vp9CodecSettings] = None
    __properties: ClassVar[List[str]] = ["h264", "h265", "vp9"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VideoStream from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of h264
        if self.h264:
            _dict['h264'] = self.h264.to_dict()
        # override the default output from pydantic by calling `to_dict()` of h265
        if self.h265:
            _dict['h265'] = self.h265.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vp9
        if self.vp9:
            _dict['vp9'] = self.vp9.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VideoStream from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "h264": H264CodecSettings.from_dict(obj["h264"]) if obj.get("h264") is not None else None,
            "h265": H265CodecSettings.from_dict(obj["h265"]) if obj.get("h265") is not None else None,
            "vp9": Vp9CodecSettings.from_dict(obj["vp9"]) if obj.get("vp9") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Transcoder API

    This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.job import Job

class TestJob(unittest.TestCase):
    """Job unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Job:
        """Test Job
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Job`
        """
        model = Job()
        if include_optional:
            return Job(
                batch_mode_priority = 56,
                config = openapi_client.models.job_config.JobConfig(
                    ad_breaks = [
                        openapi_client.models.ad_break.AdBreak(
                            start_time_offset = '', )
                        ], 
                    edit_list = [
                        openapi_client.models.edit_atom.EditAtom(
                            end_time_offset = '', 
                            inputs = [
                                ''
                                ], 
                            key = '', 
                            start_time_offset = '', )
                        ], 
                    elementary_streams = [
                        openapi_client.models.elementary_stream.ElementaryStream(
                            audio_stream = openapi_client.models.audio_stream.AudioStream(
                                bitrate_bps = 56, 
                                channel_count = 56, 
                                channel_layout = [
                                    ''
                                    ], 
                                codec = '', 
                                display_name = '', 
                                language_code = '', 
                                mapping = [
                                    openapi_client.models.audio_mapping.AudioMapping(
                                        atom_key = '', 
                                        gain_db = 1.337, 
                                        input_channel = 56, 
                                        input_key = '', 
                                        input_track = 56, 
                                        output_channel = 56, )
                                    ], 
                                sample_rate_hertz = 56, ), 
                            key = '', 
                            text_stream = openapi_client.models.text_stream.TextStream(
                                codec = '', 
                                display_name = '', 
                                language_code = '', ), 
                            video_stream = openapi_client.models.video_stream.VideoStream(
                                h264 = openapi_client.models.h264_codec_settings.H264CodecSettings(
                                    allow_open_gop = True, 
                                    aq_strength = 1.337, 
                                    b_frame_count = 56, 
                                    b_pyramid = True, 
                                    bitrate_bps = 56, 
                                    crf_level = 56, 
                                    enable_two_pass = True, 
                                    entropy_coder = '', 
                                    frame_rate = 1.337, 
                                    frame_rate_conversion_strategy = 'FRAME_RATE_CONVERSION_STRATEGY_UNSPECIFIED', 
                                    gop_duration = '', 
                                    gop_frame_count = 56, 
                                    height_pixels = 56, 
                                    hlg = openapi_client.models.h264_color_format_hlg.H264ColorFormatHLG(), 
                                    pixel_format = '', 
                                    preset = '', 
                                    profile = '', 
                                    rate_control_mode = '', 
                                    sdr = openapi_client.models.h264_color_format_sdr.H264ColorFormatSDR(), 
                                    tune = '', 
                                    vbv_fullness_bits = 56, 
                                    vbv_size_bits = 56, 
                                    width_pixels = 56, ), 
                                h265 = openapi_client.models.h265_codec_settings.H265CodecSettings(
                                    allow_open_gop = True, 
                                    aq_strength = 1.337, 
                                    b_frame_count = 56, 
                                    b_pyramid = True, 
                                    bitrate_bps = 56, 
                                    crf_level = 56, 
                                    enable_two_pass = True, 
                                    frame_rate = 1.337, 
                                    frame_rate_conversion_strategy = 'FRAME_RATE_CONVERSION_STRATEGY_UNSPECIFIED', 
                                    gop_duration = '', 
                                    gop_frame_count = 56, 
                                    hdr10 = openapi_client.models.h265_color_format_hdr10.H265ColorFormatHDR10(), 
                                    height_pixels = 56, 
                                    hlg = openapi_client.models.hlg.hlg(), 
                                    pixel_format = '', 
                                    preset = '', 
                                    profile = '', 
                                    rate_control_mode = '', 
                                    sdr = openapi_client.models.sdr.sdr(), 
                                    tune = '', 
                                    vbv_fullness_bits = 56, 
                                    vbv_size_bits = 56, 
                                    width_pixels = 56, ), 
                                vp9 = openapi_client.models.vp9_codec_settings.Vp9CodecSettings(
                                    bitrate_bps = 56, 
                                    crf_level = 56, 
                                    frame_rate = 1.337, 
                                    frame_rate_conversion_strategy = 'FRAME_RATE_CONVERSION_STRATEGY_UNSPECIFIED', 
                                    gop_duration = '', 
                                    gop_frame_count = 56, 
                                    height_pixels = 56, 
                                    hlg = openapi_client.models.vp9_color_format_hlg.Vp9ColorFormatHLG(), 
                                    pixel_format = '', 
                                    profile = '', 
                                    rate_control_mode = '', 
                                    sdr = openapi_client.models.vp9_color_format_sdr.Vp9ColorFormatSDR(), 
                                    width_pixels = 56, ), ), )
                        ], 
                    encryptions = [
                        openapi_client.models.encryption.Encryption(
                            aes128 = openapi_client.models.aes128.aes128(), 
                            drm_systems = openapi_client.models.drm_systems.DrmSystems(
                                clearkey = openapi_client.models.clearkey.clearkey(), 
                                fairplay = openapi_client.models.fairplay.fairplay(), 
                                playready = openapi_client.models.playready.playready(), 
                                widevine = openapi_client.models.widevine.widevine(), ), 
                            id = '', 
                            mpeg_cenc = openapi_client.models.mpeg_common_encryption.MpegCommonEncryption(
                                scheme = '', ), 
                            sample_aes = openapi_client.models.sample_aes.sampleAes(), 
                            secret_manager_key_source = openapi_client.models.secret_manager_source.SecretManagerSource(
                                secret_version = '', ), )
                        ], 
                    inputs = [
                        openapi_client.models.input.Input(
                            key = '', 
                            preprocessing_config = openapi_client.models.preprocessing_config.PreprocessingConfig(
                                audio = openapi_client.models.audio.Audio(
                                    high_boost = True, 
                                    low_boost = True, 
                                    lufs = 1.337, ), 
                                color = openapi_client.models.color.Color(
                                    brightness = 1.337, 
                                    contrast = 1.337, 
                                    saturation = 1.337, ), 
                                crop = openapi_client.models.crop.Crop(
                                    bottom_pixels = 56, 
                                    left_pixels = 56, 
                                    right_pixels = 56, 
                                    top_pixels = 56, ), 
                                deblock = openapi_client.models.deblock.Deblock(
                                    enabled = True, 
                                    strength = 1.337, ), 
                                deinterlace = openapi_client.models.deinterlace.Deinterlace(
                                    bwdif = openapi_client.models.bwdif_config.BwdifConfig(
                                        deinterlace_all_frames = True, 
                                        mode = '', 
                                        parity = '', ), 
                                    yadif = openapi_client.models.yadif_config.YadifConfig(
                                        deinterlace_all_frames = True, 
                                        disable_spatial_interlacing = True, 
                                        mode = '', 
                                        parity = '', ), ), 
                                denoise = openapi_client.models.denoise.Denoise(
                                    strength = 1.337, 
                                    tune = '', ), 
                                pad = openapi_client.models.pad.Pad(
                                    bottom_pixels = 56, 
                                    left_pixels = 56, 
                                    right_pixels = 56, 
                                    top_pixels = 56, ), ), 
                            uri = '', )
                        ], 
                    manifests = [
                        openapi_client.models.manifest.Manifest(
                            dash = openapi_client.models.dash_config.DashConfig(
                                segment_reference_scheme = 'SEGMENT_REFERENCE_SCHEME_UNSPECIFIED', ), 
                            file_name = '', 
                            mux_streams = [
                                ''
                                ], 
                            type = 'MANIFEST_TYPE_UNSPECIFIED', )
                        ], 
                    mux_streams = [
                        openapi_client.models.mux_stream.MuxStream(
                            container = '', 
                            encryption_id = '', 
                            file_name = '', 
                            fmp4 = openapi_client.models.fmp4_config.Fmp4Config(
                                codec_tag = '', ), 
                            key = '', 
                            segment_settings = openapi_client.models.segment_settings.SegmentSettings(
                                individual_segments = True, 
                                segment_duration = '', ), )
                        ], 
                    output = openapi_client.models.output.Output(
                        uri = '', ), 
                    overlays = [
                        openapi_client.models.overlay.Overlay(
                            animations = [
                                openapi_client.models.animation.Animation(
                                    animation_end = openapi_client.models.animation_end.AnimationEnd(
                                        start_time_offset = '', ), 
                                    animation_fade = openapi_client.models.animation_fade.AnimationFade(
                                        end_time_offset = '', 
                                        fade_type = 'FADE_TYPE_UNSPECIFIED', 
                                        start_time_offset = '', 
                                        xy = openapi_client.models.normalized_coordinate.NormalizedCoordinate(
                                            x = 1.337, 
                                            y = 1.337, ), ), 
                                    animation_static = openapi_client.models.animation_static.AnimationStatic(
                                        start_time_offset = '', ), )
                                ], 
                            image = openapi_client.models.image.Image(
                                alpha = 1.337, 
                                resolution = openapi_client.models.normalized_coordinate.NormalizedCoordinate(
                                    x = 1.337, 
                                    y = 1.337, ), 
                                uri = '', ), )
                        ], 
                    pubsub_destination = openapi_client.models.pubsub_destination.PubsubDestination(
                        topic = '', ), 
                    sprite_sheets = [
                        openapi_client.models.sprite_sheet.SpriteSheet(
                            column_count = 56, 
                            end_time_offset = '', 
                            file_prefix = '', 
                            format = '', 
                            interval = '', 
                            quality = 56, 
                            row_count = 56, 
                            sprite_height_pixels = 56, 
                            sprite_width_pixels = 56, 
                            start_time_offset = '', 
                            total_count = 56, )
                        ], ),
                create_time = '',
                end_time = '',
                error = openapi_client.models.status.Status(
                    code = 56, 
                    details = [
                        {
                            'key' : null
                            }
                        ], 
                    message = '', ),
                input_uri = '',
                labels = {
                    'key' : ''
                    },
                mode = 'PROCESSING_MODE_UNSPECIFIED',
                name = '',
                optimization = 'OPTIMIZATION_STRATEGY_UNSPECIFIED',
                output_uri = '',
                start_time = '',
                state = 'PROCESSING_STATE_UNSPECIFIED',
                template_id = '',
                ttl_after_completion_days = 56
            )
        else:
            return Job(
        )
        """

    def testJob(self):
        """Test Job"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

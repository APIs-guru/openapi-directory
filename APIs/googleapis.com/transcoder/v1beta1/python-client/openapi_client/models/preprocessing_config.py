# coding: utf-8

"""
    Transcoder API

    This API converts video files into formats suitable for consumer distribution. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.audio import Audio
from openapi_client.models.color import Color
from openapi_client.models.crop import Crop
from openapi_client.models.deblock import Deblock
from openapi_client.models.denoise import Denoise
from openapi_client.models.pad import Pad
from typing import Optional, Set
from typing_extensions import Self

class PreprocessingConfig(BaseModel):
    """
    Preprocessing configurations.
    """ # noqa: E501
    audio: Optional[Audio] = None
    color: Optional[Color] = None
    crop: Optional[Crop] = None
    deblock: Optional[Deblock] = None
    denoise: Optional[Denoise] = None
    pad: Optional[Pad] = None
    __properties: ClassVar[List[str]] = ["audio", "color", "crop", "deblock", "denoise", "pad"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PreprocessingConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audio
        if self.audio:
            _dict['audio'] = self.audio.to_dict()
        # override the default output from pydantic by calling `to_dict()` of color
        if self.color:
            _dict['color'] = self.color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of crop
        if self.crop:
            _dict['crop'] = self.crop.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deblock
        if self.deblock:
            _dict['deblock'] = self.deblock.to_dict()
        # override the default output from pydantic by calling `to_dict()` of denoise
        if self.denoise:
            _dict['denoise'] = self.denoise.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pad
        if self.pad:
            _dict['pad'] = self.pad.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PreprocessingConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audio": Audio.from_dict(obj["audio"]) if obj.get("audio") is not None else None,
            "color": Color.from_dict(obj["color"]) if obj.get("color") is not None else None,
            "crop": Crop.from_dict(obj["crop"]) if obj.get("crop") is not None else None,
            "deblock": Deblock.from_dict(obj["deblock"]) if obj.get("deblock") is not None else None,
            "denoise": Denoise.from_dict(obj["denoise"]) if obj.get("denoise") is not None else None,
            "pad": Pad.from_dict(obj["pad"]) if obj.get("pad") is not None else None
        })
        return _obj



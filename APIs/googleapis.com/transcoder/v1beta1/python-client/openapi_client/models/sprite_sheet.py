# coding: utf-8

"""
    Transcoder API

    This API converts video files into formats suitable for consumer distribution. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SpriteSheet(BaseModel):
    """
    Sprite sheet configuration.
    """ # noqa: E501
    column_count: Optional[StrictInt] = Field(default=None, description="The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.", alias="columnCount")
    end_time_offset: Optional[StrictStr] = Field(default=None, description="End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.", alias="endTimeOffset")
    file_prefix: Optional[StrictStr] = Field(default=None, description="Required. File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `\"sprite_sheet0000000123.jpeg\"`.", alias="filePrefix")
    format: Optional[StrictStr] = Field(default=None, description="Format type. The default is `\"jpeg\"`. Supported formats: - 'jpeg'")
    interval: Optional[StrictStr] = Field(default=None, description="Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.")
    quality: Optional[StrictInt] = Field(default=None, description="The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.")
    row_count: Optional[StrictInt] = Field(default=None, description="The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.", alias="rowCount")
    sprite_height_pixels: Optional[StrictInt] = Field(default=None, description="Required. The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field).", alias="spriteHeightPixels")
    sprite_width_pixels: Optional[StrictInt] = Field(default=None, description="Required. The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field).", alias="spriteWidthPixels")
    start_time_offset: Optional[StrictStr] = Field(default=None, description="Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.", alias="startTimeOffset")
    total_count: Optional[StrictInt] = Field(default=None, description="Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.", alias="totalCount")
    __properties: ClassVar[List[str]] = ["columnCount", "endTimeOffset", "filePrefix", "format", "interval", "quality", "rowCount", "spriteHeightPixels", "spriteWidthPixels", "startTimeOffset", "totalCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpriteSheet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpriteSheet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "columnCount": obj.get("columnCount"),
            "endTimeOffset": obj.get("endTimeOffset"),
            "filePrefix": obj.get("filePrefix"),
            "format": obj.get("format"),
            "interval": obj.get("interval"),
            "quality": obj.get("quality"),
            "rowCount": obj.get("rowCount"),
            "spriteHeightPixels": obj.get("spriteHeightPixels"),
            "spriteWidthPixels": obj.get("spriteWidthPixels"),
            "startTimeOffset": obj.get("startTimeOffset"),
            "totalCount": obj.get("totalCount")
        })
        return _obj



# coding: utf-8

"""
    Transcoder API

    This API converts video files into formats suitable for consumer distribution. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.failure_detail import FailureDetail
from openapi_client.models.job_config import JobConfig
from openapi_client.models.origin_uri import OriginUri
from openapi_client.models.progress import Progress
from typing import Optional, Set
from typing_extensions import Self

class Job(BaseModel):
    """
    Transcoding job resource.
    """ # noqa: E501
    config: Optional[JobConfig] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the job was created.", alias="createTime")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the transcoding finished.", alias="endTime")
    failure_details: Optional[List[FailureDetail]] = Field(default=None, description="Output only. List of failure details. This property may contain additional information about the failure when `failure_reason` is present. *Note*: This feature is not yet available.", alias="failureDetails")
    failure_reason: Optional[StrictStr] = Field(default=None, description="Output only. A description of the reason for the failure. This property is always present when `state` is `FAILED`.", alias="failureReason")
    input_uri: Optional[StrictStr] = Field(default=None, description="Input only. Specify the `input_uri` to populate empty `uri` fields in each element of `Job.config.inputs` or `JobTemplate.config.inputs` when using template. URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`).", alias="inputUri")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the job. Format: `projects/{project}/locations/{location}/jobs/{job}`")
    origin_uri: Optional[OriginUri] = Field(default=None, alias="originUri")
    output_uri: Optional[StrictStr] = Field(default=None, description="Input only. Specify the `output_uri` to populate an empty `Job.config.output.uri` or `JobTemplate.config.output.uri` when using template. URI for the output file(s). For example, `gs://my-bucket/outputs/`.", alias="outputUri")
    priority: Optional[StrictInt] = Field(default=None, description="Specify the priority of the job. Enter a value between 0 and 100, where 0 is the lowest priority and 100 is the highest priority. The default is 0.")
    progress: Optional[Progress] = None
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the transcoding started.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the job.")
    template_id: Optional[StrictStr] = Field(default=None, description="Input only. Specify the `template_id` to use for populating `Job.config`. The default is `preset/web-hd`. Preset Transcoder templates: - `preset/{preset_id}` - User defined JobTemplate: `{job_template_id}`", alias="templateId")
    ttl_after_completion_days: Optional[StrictInt] = Field(default=None, description="Job time to live value in days, which will be effective after job completion. Job should be deleted automatically after the given TTL. Enter a value between 1 and 90. The default is 30.", alias="ttlAfterCompletionDays")
    __properties: ClassVar[List[str]] = ["config", "createTime", "endTime", "failureDetails", "failureReason", "inputUri", "name", "originUri", "outputUri", "priority", "progress", "startTime", "state", "templateId", "ttlAfterCompletionDays"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROCESSING_STATE_UNSPECIFIED', 'PENDING', 'RUNNING', 'SUCCEEDED', 'FAILED']):
            raise ValueError("must be one of enum values ('PROCESSING_STATE_UNSPECIFIED', 'PENDING', 'RUNNING', 'SUCCEEDED', 'FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "end_time",
            "failure_details",
            "failure_reason",
            "start_time",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in failure_details (list)
        _items = []
        if self.failure_details:
            for _item_failure_details in self.failure_details:
                if _item_failure_details:
                    _items.append(_item_failure_details.to_dict())
            _dict['failureDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of origin_uri
        if self.origin_uri:
            _dict['originUri'] = self.origin_uri.to_dict()
        # override the default output from pydantic by calling `to_dict()` of progress
        if self.progress:
            _dict['progress'] = self.progress.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "config": JobConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "createTime": obj.get("createTime"),
            "endTime": obj.get("endTime"),
            "failureDetails": [FailureDetail.from_dict(_item) for _item in obj["failureDetails"]] if obj.get("failureDetails") is not None else None,
            "failureReason": obj.get("failureReason"),
            "inputUri": obj.get("inputUri"),
            "name": obj.get("name"),
            "originUri": OriginUri.from_dict(obj["originUri"]) if obj.get("originUri") is not None else None,
            "outputUri": obj.get("outputUri"),
            "priority": obj.get("priority"),
            "progress": Progress.from_dict(obj["progress"]) if obj.get("progress") is not None else None,
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "templateId": obj.get("templateId"),
            "ttlAfterCompletionDays": obj.get("ttlAfterCompletionDays")
        })
        return _obj



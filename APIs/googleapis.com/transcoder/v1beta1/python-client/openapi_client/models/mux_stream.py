# coding: utf-8

"""
    Transcoder API

    This API converts video files into formats suitable for consumer distribution. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption import Encryption
from openapi_client.models.segment_settings import SegmentSettings
from typing import Optional, Set
from typing_extensions import Self

class MuxStream(BaseModel):
    """
    Multiplexing settings for output stream.
    """ # noqa: E501
    container: Optional[StrictStr] = Field(default=None, description="The container format. The default is `\"mp4\"` Supported container formats: - 'ts' - 'fmp4'- the corresponding file extension is `\".m4s\"` - 'mp4' - 'vtt'")
    elementary_streams: Optional[List[StrictStr]] = Field(default=None, description="List of `ElementaryStream.key`s multiplexed in this stream.", alias="elementaryStreams")
    encryption: Optional[Encryption] = None
    file_name: Optional[StrictStr] = Field(default=None, description="The name of the generated file. The default is `MuxStream.key` with the extension suffix corresponding to the `MuxStream.container`. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `\"mux_stream0000000123.ts\"`.", alias="fileName")
    key: Optional[StrictStr] = Field(default=None, description="A unique key for this multiplexed stream. HLS media manifests will be named `MuxStream.key` with the `\".m3u8\"` extension suffix.")
    segment_settings: Optional[SegmentSettings] = Field(default=None, alias="segmentSettings")
    __properties: ClassVar[List[str]] = ["container", "elementaryStreams", "encryption", "fileName", "key", "segmentSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MuxStream from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption
        if self.encryption:
            _dict['encryption'] = self.encryption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of segment_settings
        if self.segment_settings:
            _dict['segmentSettings'] = self.segment_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MuxStream from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "container": obj.get("container"),
            "elementaryStreams": obj.get("elementaryStreams"),
            "encryption": Encryption.from_dict(obj["encryption"]) if obj.get("encryption") is not None else None,
            "fileName": obj.get("fileName"),
            "key": obj.get("key"),
            "segmentSettings": SegmentSettings.from_dict(obj["segmentSettings"]) if obj.get("segmentSettings") is not None else None
        })
        return _obj



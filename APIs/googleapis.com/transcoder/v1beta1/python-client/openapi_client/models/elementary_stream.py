# coding: utf-8

"""
    Transcoder API

    This API converts video files into formats suitable for consumer distribution. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.audio_stream import AudioStream
from openapi_client.models.text_stream import TextStream
from openapi_client.models.video_stream import VideoStream
from typing import Optional, Set
from typing_extensions import Self

class ElementaryStream(BaseModel):
    """
    Encoding of an input file such as an audio, video, or text track. Elementary streams must be packaged before mapping and sharing between different output formats.
    """ # noqa: E501
    audio_stream: Optional[AudioStream] = Field(default=None, alias="audioStream")
    key: Optional[StrictStr] = Field(default=None, description="A unique key for this elementary stream.")
    text_stream: Optional[TextStream] = Field(default=None, alias="textStream")
    video_stream: Optional[VideoStream] = Field(default=None, alias="videoStream")
    __properties: ClassVar[List[str]] = ["audioStream", "key", "textStream", "videoStream"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ElementaryStream from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audio_stream
        if self.audio_stream:
            _dict['audioStream'] = self.audio_stream.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_stream
        if self.text_stream:
            _dict['textStream'] = self.text_stream.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_stream
        if self.video_stream:
            _dict['videoStream'] = self.video_stream.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ElementaryStream from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audioStream": AudioStream.from_dict(obj["audioStream"]) if obj.get("audioStream") is not None else None,
            "key": obj.get("key"),
            "textStream": TextStream.from_dict(obj["textStream"]) if obj.get("textStream") is not None else None,
            "videoStream": VideoStream.from_dict(obj["videoStream"]) if obj.get("videoStream") is not None else None
        })
        return _obj



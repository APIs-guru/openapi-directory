# coding: utf-8

"""
    Cloud Profiler API

    Manages continuous profiling information.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.deployment import Deployment
from typing import Optional, Set
from typing_extensions import Self

class Profile(BaseModel):
    """
    Profile resource.
    """ # noqa: E501
    deployment: Optional[Deployment] = None
    duration: Optional[StrictStr] = Field(default=None, description="Duration of the profiling session. Input (for the offline mode) or output (for the online mode). The field represents requested profiling duration. It may slightly differ from the effective profiling duration, which is recorded in the profile data, in case the profiling can't be stopped immediately (e.g. in case stopping the profiling is handled asynchronously).")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Input only. Labels associated to this specific profile. These labels will get merged with the deployment labels for the final data set. See documentation on deployment labels for validation rules and limits.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Opaque, server-assigned, unique ID for this profile.")
    profile_bytes: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Input only. Profile bytes, as a gzip compressed serialized proto, the format is https://github.com/google/pprof/blob/master/proto/profile.proto.", alias="profileBytes")
    profile_type: Optional[StrictStr] = Field(default=None, description="Type of profile. For offline mode, this must be specified when creating the profile. For online mode it is assigned and returned by the server.", alias="profileType")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. Start time for the profile. This output is only present in response from the ListProfiles method.", alias="startTime")
    __properties: ClassVar[List[str]] = ["deployment", "duration", "labels", "name", "profileBytes", "profileType", "startTime"]

    @field_validator('profile_type')
    def profile_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROFILE_TYPE_UNSPECIFIED', 'CPU', 'WALL', 'HEAP', 'THREADS', 'CONTENTION', 'PEAK_HEAP', 'HEAP_ALLOC']):
            raise ValueError("must be one of enum values ('PROFILE_TYPE_UNSPECIFIED', 'CPU', 'WALL', 'HEAP', 'THREADS', 'CONTENTION', 'PEAK_HEAP', 'HEAP_ALLOC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Profile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "start_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of deployment
        if self.deployment:
            _dict['deployment'] = self.deployment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Profile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deployment": Deployment.from_dict(obj["deployment"]) if obj.get("deployment") is not None else None,
            "duration": obj.get("duration"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "profileBytes": obj.get("profileBytes"),
            "profileType": obj.get("profileType"),
            "startTime": obj.get("startTime")
        })
        return _obj



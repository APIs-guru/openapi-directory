# coding: utf-8

"""
    Firebase Hosting API

    The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dns_record_set import DnsRecordSet
from typing import Optional, Set
from typing_extensions import Self

class DnsUpdates(BaseModel):
    """
    A set of DNS record updates that you should make to allow Hosting to serve secure content in response to requests against your domain name. These updates present the current state of your domain name's DNS records when Hosting last queried them, and the desired set of records that Hosting needs to see before your custom domain can be fully active.
    """ # noqa: E501
    check_time: Optional[StrictStr] = Field(default=None, description="The last time Hosting checked your custom domain's DNS records.", alias="checkTime")
    desired: Optional[List[DnsRecordSet]] = Field(default=None, description="The set of DNS records Hosting needs to serve secure content on the domain.")
    discovered: Optional[List[DnsRecordSet]] = Field(default=None, description="The set of DNS records Hosting discovered when inspecting a domain.")
    __properties: ClassVar[List[str]] = ["checkTime", "desired", "discovered"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DnsUpdates from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in desired (list)
        _items = []
        if self.desired:
            for _item_desired in self.desired:
                if _item_desired:
                    _items.append(_item_desired.to_dict())
            _dict['desired'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in discovered (list)
        _items = []
        if self.discovered:
            for _item_discovered in self.discovered:
                if _item_discovered:
                    _items.append(_item_discovered.to_dict())
            _dict['discovered'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DnsUpdates from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checkTime": obj.get("checkTime"),
            "desired": [DnsRecordSet.from_dict(_item) for _item in obj["desired"]] if obj.get("desired") is not None else None,
            "discovered": [DnsRecordSet.from_dict(_item) for _item in obj["discovered"]] if obj.get("discovered") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Firebase Hosting API

    The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cert_verification import CertVerification
from openapi_client.models.dns_updates import DnsUpdates
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class LiveMigrationStep(BaseModel):
    """
    A set of updates including ACME challenges and DNS records that allow Hosting to create an SSL certificate and establish project ownership for your domain name before you direct traffic to Hosting servers. Use these updates to facilitate zero downtime migrations to Hosting from other services. After you've made the recommended updates, check your custom domain's `ownershipState` and `certState`. To avoid downtime, they should be `OWNERSHIP_ACTIVE` and `CERT_ACTIVE`, respectively, before you update your `A` and `AAAA` records.
    """ # noqa: E501
    cert_verification: Optional[CertVerification] = Field(default=None, alias="certVerification")
    dns_updates: Optional[DnsUpdates] = Field(default=None, alias="dnsUpdates")
    issues: Optional[List[Status]] = Field(default=None, description="Output only. Issues that prevent the current step from completing.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the live migration step, indicates whether you should work to complete the step now, in the future, or have already completed it.")
    __properties: ClassVar[List[str]] = ["certVerification", "dnsUpdates", "issues", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PREPARING', 'PENDING', 'INCOMPLETE', 'PROCESSING', 'COMPLETE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PREPARING', 'PENDING', 'INCOMPLETE', 'PROCESSING', 'COMPLETE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LiveMigrationStep from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "issues",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cert_verification
        if self.cert_verification:
            _dict['certVerification'] = self.cert_verification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dns_updates
        if self.dns_updates:
            _dict['dnsUpdates'] = self.dns_updates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in issues (list)
        _items = []
        if self.issues:
            for _item_issues in self.issues:
                if _item_issues:
                    _items.append(_item_issues.to_dict())
            _dict['issues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LiveMigrationStep from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certVerification": CertVerification.from_dict(obj["certVerification"]) if obj.get("certVerification") is not None else None,
            "dnsUpdates": DnsUpdates.from_dict(obj["dnsUpdates"]) if obj.get("dnsUpdates") is not None else None,
            "issues": [Status.from_dict(_item) for _item in obj["issues"]] if obj.get("issues") is not None else None,
            "state": obj.get("state")
        })
        return _obj



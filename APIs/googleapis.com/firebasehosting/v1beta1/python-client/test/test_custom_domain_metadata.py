# coding: utf-8

"""
    Firebase Hosting API

    The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.custom_domain_metadata import CustomDomainMetadata

class TestCustomDomainMetadata(unittest.TestCase):
    """CustomDomainMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CustomDomainMetadata:
        """Test CustomDomainMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CustomDomainMetadata`
        """
        model = CustomDomainMetadata()
        if include_optional:
            return CustomDomainMetadata(
                cert_state = 'CERT_STATE_UNSPECIFIED',
                host_state = 'HOST_STATE_UNSPECIFIED',
                issues = [
                    openapi_client.models.status.Status(
                        code = 56, 
                        details = [
                            {
                                'key' : null
                                }
                            ], 
                        message = '', )
                    ],
                live_migration_steps = [
                    openapi_client.models.live_migration_step.LiveMigrationStep(
                        cert_verification = openapi_client.models.cert_verification.CertVerification(
                            dns = openapi_client.models.dns_updates.DnsUpdates(
                                check_time = '', 
                                desired = [
                                    openapi_client.models.dns_record_set.DnsRecordSet(
                                        check_error = openapi_client.models.status.Status(
                                            code = 56, 
                                            details = [
                                                {
                                                    'key' : null
                                                    }
                                                ], 
                                            message = '', ), 
                                        domain_name = '', 
                                        records = [
                                            openapi_client.models.dns_record.DnsRecord(
                                                domain_name = '', 
                                                rdata = '', 
                                                required_action = 'NONE', 
                                                type = 'TYPE_UNSPECIFIED', )
                                            ], )
                                    ], 
                                discovered = [
                                    openapi_client.models.dns_record_set.DnsRecordSet(
                                        domain_name = '', )
                                    ], ), 
                            http = openapi_client.models.http_update.HttpUpdate(
                                last_check_time = '', 
                                path = '', ), ), 
                        dns_updates = openapi_client.models.dns_updates.DnsUpdates(
                            check_time = '', ), 
                        issues = [
                            openapi_client.models.status.Status(
                                code = 56, 
                                message = '', )
                            ], 
                        state = 'STATE_UNSPECIFIED', )
                    ],
                ownership_state = 'OWNERSHIP_STATE_UNSPECIFIED',
                quick_setup_updates = openapi_client.models.dns_updates.DnsUpdates(
                    check_time = '', 
                    desired = [
                        openapi_client.models.dns_record_set.DnsRecordSet(
                            check_error = openapi_client.models.status.Status(
                                code = 56, 
                                details = [
                                    {
                                        'key' : null
                                        }
                                    ], 
                                message = '', ), 
                            domain_name = '', 
                            records = [
                                openapi_client.models.dns_record.DnsRecord(
                                    domain_name = '', 
                                    rdata = '', 
                                    required_action = 'NONE', 
                                    type = 'TYPE_UNSPECIFIED', )
                                ], )
                        ], 
                    discovered = [
                        openapi_client.models.dns_record_set.DnsRecordSet(
                            domain_name = '', )
                        ], )
            )
        else:
            return CustomDomainMetadata(
        )
        """

    def testCustomDomainMetadata(self):
        """Test CustomDomainMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

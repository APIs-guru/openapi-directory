# coding: utf-8

"""
    Firebase Hosting API

    The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cert_verification import CertVerification
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class Certificate(BaseModel):
    """
    An SSL certificate used to provide end-to-end encryption for requests against your domain name. A `Certificate` can be an actual SSL certificate or, for newly-created custom domains, Hosting's intent to create one.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The certificate's creation time. For `TEMPORARY` certs this is the time Hosting first generated challenges for your domain name. For all other cert types, it's the time the actual cert was created.", alias="createTime")
    expire_time: Optional[StrictStr] = Field(default=None, description="Output only. The certificate's expiration time. After this time, the cert can no longer be used to provide secure communication between Hosting and your site's visitors.", alias="expireTime")
    issues: Optional[List[Status]] = Field(default=None, description="Output only. A set of errors Hosting encountered when attempting to create a cert for your domain name. Resolve these issues to ensure Hosting is able to provide secure communication with your site's visitors.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the certificate. Only the `CERT_ACTIVE` and `CERT_EXPIRING_SOON` states provide SSL coverage for a domain name. If the state is `PROPAGATING` and Hosting had an active cert for the domain name before, that formerly-active cert provides SSL coverage for the domain name until the current cert propagates.")
    type: Optional[StrictStr] = Field(default=None, description="Output only. The certificate's type.")
    verification: Optional[CertVerification] = None
    __properties: ClassVar[List[str]] = ["createTime", "expireTime", "issues", "state", "type", "verification"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CERT_STATE_UNSPECIFIED', 'CERT_PREPARING', 'CERT_VALIDATING', 'CERT_PROPAGATING', 'CERT_ACTIVE', 'CERT_EXPIRING_SOON', 'CERT_EXPIRED']):
            raise ValueError("must be one of enum values ('CERT_STATE_UNSPECIFIED', 'CERT_PREPARING', 'CERT_VALIDATING', 'CERT_PROPAGATING', 'CERT_ACTIVE', 'CERT_EXPIRING_SOON', 'CERT_EXPIRED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'TEMPORARY', 'GROUPED', 'PROJECT_GROUPED', 'DEDICATED']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'TEMPORARY', 'GROUPED', 'PROJECT_GROUPED', 'DEDICATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Certificate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "expire_time",
            "issues",
            "state",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in issues (list)
        _items = []
        if self.issues:
            for _item_issues in self.issues:
                if _item_issues:
                    _items.append(_item_issues.to_dict())
            _dict['issues'] = _items
        # override the default output from pydantic by calling `to_dict()` of verification
        if self.verification:
            _dict['verification'] = self.verification.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Certificate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "expireTime": obj.get("expireTime"),
            "issues": [Status.from_dict(_item) for _item in obj["issues"]] if obj.get("issues") is not None else None,
            "state": obj.get("state"),
            "type": obj.get("type"),
            "verification": CertVerification.from_dict(obj["verification"]) if obj.get("verification") is not None else None
        })
        return _obj



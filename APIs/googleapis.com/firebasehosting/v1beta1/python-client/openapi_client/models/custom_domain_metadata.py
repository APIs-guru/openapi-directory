# coding: utf-8

"""
    Firebase Hosting API

    The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dns_updates import DnsUpdates
from openapi_client.models.live_migration_step import LiveMigrationStep
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class CustomDomainMetadata(BaseModel):
    """
    Metadata associated with a`CustomDomain` operation.
    """ # noqa: E501
    cert_state: Optional[StrictStr] = Field(default=None, description="The `CertState` of the domain name's SSL certificate.", alias="certState")
    host_state: Optional[StrictStr] = Field(default=None, description="The `HostState` of the domain name this `CustomDomain` refers to.", alias="hostState")
    issues: Optional[List[Status]] = Field(default=None, description="A list of issues that are currently preventing Hosting from completing the operation. These are generally DNS-related issues that Hosting encounters when querying a domain name's records or attempting to mint an SSL certificate.")
    live_migration_steps: Optional[List[LiveMigrationStep]] = Field(default=None, description="A set of DNS record updates and ACME challenges that allow you to transition domain names to Firebase Hosting with zero downtime. These updates allow Hosting to create an SSL certificate and establish ownership for your custom domain before Hosting begins serving traffic on it. If your domain name is already in active use with another provider, add one of the challenges and make the recommended DNS updates. After adding challenges and adjusting DNS records as necessary, wait for the `ownershipState` to be `OWNERSHIP_ACTIVE` and the `certState` to be `CERT_ACTIVE` before sending traffic to Hosting.", alias="liveMigrationSteps")
    ownership_state: Optional[StrictStr] = Field(default=None, description="The `OwnershipState` of the domain name this `CustomDomain` refers to.", alias="ownershipState")
    quick_setup_updates: Optional[DnsUpdates] = Field(default=None, alias="quickSetupUpdates")
    __properties: ClassVar[List[str]] = ["certState", "hostState", "issues", "liveMigrationSteps", "ownershipState", "quickSetupUpdates"]

    @field_validator('cert_state')
    def cert_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CERT_STATE_UNSPECIFIED', 'CERT_PREPARING', 'CERT_VALIDATING', 'CERT_PROPAGATING', 'CERT_ACTIVE', 'CERT_EXPIRING_SOON', 'CERT_EXPIRED']):
            raise ValueError("must be one of enum values ('CERT_STATE_UNSPECIFIED', 'CERT_PREPARING', 'CERT_VALIDATING', 'CERT_PROPAGATING', 'CERT_ACTIVE', 'CERT_EXPIRING_SOON', 'CERT_EXPIRED')")
        return value

    @field_validator('host_state')
    def host_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HOST_STATE_UNSPECIFIED', 'HOST_UNHOSTED', 'HOST_UNREACHABLE', 'HOST_MISMATCH', 'HOST_CONFLICT', 'HOST_ACTIVE']):
            raise ValueError("must be one of enum values ('HOST_STATE_UNSPECIFIED', 'HOST_UNHOSTED', 'HOST_UNREACHABLE', 'HOST_MISMATCH', 'HOST_CONFLICT', 'HOST_ACTIVE')")
        return value

    @field_validator('ownership_state')
    def ownership_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OWNERSHIP_STATE_UNSPECIFIED', 'OWNERSHIP_MISSING', 'OWNERSHIP_UNREACHABLE', 'OWNERSHIP_MISMATCH', 'OWNERSHIP_CONFLICT', 'OWNERSHIP_PENDING', 'OWNERSHIP_ACTIVE']):
            raise ValueError("must be one of enum values ('OWNERSHIP_STATE_UNSPECIFIED', 'OWNERSHIP_MISSING', 'OWNERSHIP_UNREACHABLE', 'OWNERSHIP_MISMATCH', 'OWNERSHIP_CONFLICT', 'OWNERSHIP_PENDING', 'OWNERSHIP_ACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomDomainMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in issues (list)
        _items = []
        if self.issues:
            for _item_issues in self.issues:
                if _item_issues:
                    _items.append(_item_issues.to_dict())
            _dict['issues'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in live_migration_steps (list)
        _items = []
        if self.live_migration_steps:
            for _item_live_migration_steps in self.live_migration_steps:
                if _item_live_migration_steps:
                    _items.append(_item_live_migration_steps.to_dict())
            _dict['liveMigrationSteps'] = _items
        # override the default output from pydantic by calling `to_dict()` of quick_setup_updates
        if self.quick_setup_updates:
            _dict['quickSetupUpdates'] = self.quick_setup_updates.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomDomainMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certState": obj.get("certState"),
            "hostState": obj.get("hostState"),
            "issues": [Status.from_dict(_item) for _item in obj["issues"]] if obj.get("issues") is not None else None,
            "liveMigrationSteps": [LiveMigrationStep.from_dict(_item) for _item in obj["liveMigrationSteps"]] if obj.get("liveMigrationSteps") is not None else None,
            "ownershipState": obj.get("ownershipState"),
            "quickSetupUpdates": DnsUpdates.from_dict(obj["quickSetupUpdates"]) if obj.get("quickSetupUpdates") is not None else None
        })
        return _obj



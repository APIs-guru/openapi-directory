# coding: utf-8

"""
    Firebase Hosting API

    The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.domain_provisioning import DomainProvisioning
from openapi_client.models.domain_redirect import DomainRedirect
from typing import Optional, Set
from typing_extensions import Self

class Domain(BaseModel):
    """
    The intended behavior and status information of a domain.
    """ # noqa: E501
    domain_name: Optional[StrictStr] = Field(default=None, description="Required. The domain name of the association.", alias="domainName")
    domain_redirect: Optional[DomainRedirect] = Field(default=None, alias="domainRedirect")
    provisioning: Optional[DomainProvisioning] = None
    site: Optional[StrictStr] = Field(default=None, description="Required. The site name of the association.")
    status: Optional[StrictStr] = Field(default=None, description="Output only. Additional status of the domain association.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the domain was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["domainName", "domainRedirect", "provisioning", "site", "status", "updateTime"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DOMAIN_STATUS_UNSPECIFIED', 'DOMAIN_CHANGE_PENDING', 'DOMAIN_ACTIVE', 'DOMAIN_VERIFICATION_REQUIRED', 'DOMAIN_VERIFICATION_LOST']):
            raise ValueError("must be one of enum values ('DOMAIN_STATUS_UNSPECIFIED', 'DOMAIN_CHANGE_PENDING', 'DOMAIN_ACTIVE', 'DOMAIN_VERIFICATION_REQUIRED', 'DOMAIN_VERIFICATION_LOST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Domain from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of domain_redirect
        if self.domain_redirect:
            _dict['domainRedirect'] = self.domain_redirect.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provisioning
        if self.provisioning:
            _dict['provisioning'] = self.provisioning.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Domain from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domainName": obj.get("domainName"),
            "domainRedirect": DomainRedirect.from_dict(obj["domainRedirect"]) if obj.get("domainRedirect") is not None else None,
            "provisioning": DomainProvisioning.from_dict(obj["provisioning"]) if obj.get("provisioning") is not None else None,
            "site": obj.get("site"),
            "status": obj.get("status"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Firebase Hosting API

    The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cert_dns_challenge import CertDnsChallenge
from openapi_client.models.cert_http_challenge import CertHttpChallenge
from typing import Optional, Set
from typing_extensions import Self

class DomainProvisioning(BaseModel):
    """
    The current certificate provisioning status information for a domain.
    """ # noqa: E501
    cert_challenge_discovered_txt: Optional[List[StrictStr]] = Field(default=None, description="The TXT records (for the certificate challenge) that were found at the last DNS fetch.", alias="certChallengeDiscoveredTxt")
    cert_challenge_dns: Optional[CertDnsChallenge] = Field(default=None, alias="certChallengeDns")
    cert_challenge_http: Optional[CertHttpChallenge] = Field(default=None, alias="certChallengeHttp")
    cert_status: Optional[StrictStr] = Field(default=None, description="The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.", alias="certStatus")
    discovered_ips: Optional[List[StrictStr]] = Field(default=None, description="The IPs found at the last DNS fetch.", alias="discoveredIps")
    dns_fetch_time: Optional[StrictStr] = Field(default=None, description="The time at which the last DNS fetch occurred.", alias="dnsFetchTime")
    dns_status: Optional[StrictStr] = Field(default=None, description="The DNS record match status as of the last DNS fetch.", alias="dnsStatus")
    expected_ips: Optional[List[StrictStr]] = Field(default=None, description="The list of IPs to which the domain is expected to resolve.", alias="expectedIps")
    __properties: ClassVar[List[str]] = ["certChallengeDiscoveredTxt", "certChallengeDns", "certChallengeHttp", "certStatus", "discoveredIps", "dnsFetchTime", "dnsStatus", "expectedIps"]

    @field_validator('cert_status')
    def cert_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CERT_STATUS_UNSPECIFIED', 'CERT_PENDING', 'CERT_MISSING', 'CERT_PROCESSING', 'CERT_PROPAGATING', 'CERT_ACTIVE', 'CERT_ERROR']):
            raise ValueError("must be one of enum values ('CERT_STATUS_UNSPECIFIED', 'CERT_PENDING', 'CERT_MISSING', 'CERT_PROCESSING', 'CERT_PROPAGATING', 'CERT_ACTIVE', 'CERT_ERROR')")
        return value

    @field_validator('dns_status')
    def dns_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DNS_STATUS_UNSPECIFIED', 'DNS_PENDING', 'DNS_MISSING', 'DNS_PARTIAL_MATCH', 'DNS_MATCH', 'DNS_EXTRANEOUS_MATCH']):
            raise ValueError("must be one of enum values ('DNS_STATUS_UNSPECIFIED', 'DNS_PENDING', 'DNS_MISSING', 'DNS_PARTIAL_MATCH', 'DNS_MATCH', 'DNS_EXTRANEOUS_MATCH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DomainProvisioning from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cert_challenge_dns
        if self.cert_challenge_dns:
            _dict['certChallengeDns'] = self.cert_challenge_dns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cert_challenge_http
        if self.cert_challenge_http:
            _dict['certChallengeHttp'] = self.cert_challenge_http.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DomainProvisioning from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certChallengeDiscoveredTxt": obj.get("certChallengeDiscoveredTxt"),
            "certChallengeDns": CertDnsChallenge.from_dict(obj["certChallengeDns"]) if obj.get("certChallengeDns") is not None else None,
            "certChallengeHttp": CertHttpChallenge.from_dict(obj["certChallengeHttp"]) if obj.get("certChallengeHttp") is not None else None,
            "certStatus": obj.get("certStatus"),
            "discoveredIps": obj.get("discoveredIps"),
            "dnsFetchTime": obj.get("dnsFetchTime"),
            "dnsStatus": obj.get("dnsStatus"),
            "expectedIps": obj.get("expectedIps")
        })
        return _obj



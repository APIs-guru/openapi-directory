# coding: utf-8

"""
    Firebase Hosting API

    The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.release import Release
from typing import Optional, Set
from typing_extensions import Self

class Channel(BaseModel):
    """
    A `Channel` represents a stream of releases for a site. All sites have a default `live` channel that serves content to the Firebase-provided subdomains and any connected custom domains.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the channel was created.", alias="createTime")
    expire_time: Optional[StrictStr] = Field(default=None, description="The time at which the channel will be automatically deleted. If null, the channel will not be automatically deleted. This field is present in the output whether it's set directly or via the `ttl` field.", alias="expireTime")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Text labels used for extra metadata and/or filtering.")
    name: Optional[StrictStr] = Field(default=None, description="The fully-qualified resource name for the channel, in the format: sites/ SITE_ID/channels/CHANNEL_ID")
    release: Optional[Release] = None
    retained_release_count: Optional[StrictInt] = Field(default=None, description="The number of previous releases to retain on the channel for rollback or other purposes. Must be a number between 1-100. Defaults to 10 for new channels.", alias="retainedReleaseCount")
    ttl: Optional[StrictStr] = Field(default=None, description="Input only. A time-to-live for this channel. Sets `expire_time` to the provided duration past the time of the request.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the channel was last updated.", alias="updateTime")
    url: Optional[StrictStr] = Field(default=None, description="Output only. The URL at which the content of this channel's current release can be viewed. This URL is a Firebase-provided subdomain of `web.app`. The content of this channel's current release can also be viewed at the Firebase-provided subdomain of `firebaseapp.com`. If this channel is the `live` channel for the Hosting site, then the content of this channel's current release can also be viewed at any connected custom domains.")
    __properties: ClassVar[List[str]] = ["createTime", "expireTime", "labels", "name", "release", "retainedReleaseCount", "ttl", "updateTime", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Channel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "update_time",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of release
        if self.release:
            _dict['release'] = self.release.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Channel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "expireTime": obj.get("expireTime"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "release": Release.from_dict(obj["release"]) if obj.get("release") is not None else None,
            "retainedReleaseCount": obj.get("retainedReleaseCount"),
            "ttl": obj.get("ttl"),
            "updateTime": obj.get("updateTime"),
            "url": obj.get("url")
        })
        return _obj



# coding: utf-8

"""
    Firebase Hosting API

    The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.path_filter import PathFilter
from typing import Optional, Set
from typing_extensions import Self

class CloneVersionRequest(BaseModel):
    """
    CloneVersionRequest
    """ # noqa: E501
    exclude: Optional[PathFilter] = None
    finalize: Optional[StrictBool] = Field(default=None, description="If true, the call to `CloneVersion` immediately finalizes the version after cloning is complete. If false, the cloned version will have a status of `CREATED`. Use [`UpdateVersion`](patch) to set the status of the version to `FINALIZED`.")
    include: Optional[PathFilter] = None
    source_version: Optional[StrictStr] = Field(default=None, description="Required. The unique identifier for the version to be cloned, in the format: sites/SITE_ID/versions/VERSION_ID", alias="sourceVersion")
    __properties: ClassVar[List[str]] = ["exclude", "finalize", "include", "sourceVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloneVersionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of exclude
        if self.exclude:
            _dict['exclude'] = self.exclude.to_dict()
        # override the default output from pydantic by calling `to_dict()` of include
        if self.include:
            _dict['include'] = self.include.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloneVersionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exclude": PathFilter.from_dict(obj["exclude"]) if obj.get("exclude") is not None else None,
            "finalize": obj.get("finalize"),
            "include": PathFilter.from_dict(obj["include"]) if obj.get("include") is not None else None,
            "sourceVersion": obj.get("sourceVersion")
        })
        return _obj



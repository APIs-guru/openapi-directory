# coding: utf-8

"""
    Firebase Hosting API

    The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.certificate import Certificate
from openapi_client.models.dns_updates import DnsUpdates
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class CustomDomain(BaseModel):
    """
    A `CustomDomain` is an entity that links a domain name to a Firebase Hosting site. Add a `CustomDomain` to your site to allow Hosting to serve the site's content in response to requests against your domain name.
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Annotations you can add to leave both human- and machine-readable metadata about your `CustomDomain`.")
    cert: Optional[Certificate] = None
    cert_preference: Optional[StrictStr] = Field(default=None, description="A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan custom domains only have access to the `GROUPED` cert type, while Blaze plan domains can select any option.", alias="certPreference")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The custom domain's create time.", alias="createTime")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the `CustomDomain` was deleted; null for custom domains that haven't been deleted. Deleted custom domains persist for approximately 30 days, after which time Hosting removes them completely. To restore a deleted custom domain, make an `UndeleteCustomDomain` request.", alias="deleteTime")
    etag: Optional[StrictStr] = Field(default=None, description="Output only. A string that represents the current state of the `CustomDomain` and allows you to confirm its initial state in requests that would modify it. Use the tag to ensure consistency when making `UpdateCustomDomain`, `DeleteCustomDomain`, and `UndeleteCustomDomain` requests.")
    expire_time: Optional[StrictStr] = Field(default=None, description="Output only. The minimum time before a soft-deleted `CustomDomain` is completely removed from Hosting; null for custom domains that haven't been deleted.", alias="expireTime")
    host_state: Optional[StrictStr] = Field(default=None, description="Output only. The `HostState` of the domain name this `CustomDomain` refers to.", alias="hostState")
    issues: Optional[List[Status]] = Field(default=None, description="Output only. A set of errors Hosting systems encountered when trying to establish Hosting's ability to serve secure content for your domain name. Resolve these issues to ensure your `CustomDomain` behaves properly.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels used for extra metadata and/or filtering.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The fully-qualified name of the `CustomDomain`.")
    ownership_state: Optional[StrictStr] = Field(default=None, description="Output only. The `OwnershipState` of the domain name this `CustomDomain` refers to.", alias="ownershipState")
    reconciling: Optional[StrictBool] = Field(default=None, description="Output only. A field that, if true, indicates that Hosting's systems are attmepting to make the custom domain's state match your preferred state. This is most frequently `true` when initially provisioning a `CustomDomain` after a `CreateCustomDomain` request or when creating a new SSL certificate to match an updated `cert_preference` after an `UpdateCustomDomain` request.")
    redirect_target: Optional[StrictStr] = Field(default=None, description="A domain name that this `CustomDomain` should direct traffic towards. If specified, Hosting will respond to requests against this custom domain with an HTTP 301 code, and route traffic to the specified `redirect_target` instead.", alias="redirectTarget")
    required_dns_updates: Optional[DnsUpdates] = Field(default=None, alias="requiredDnsUpdates")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last time the `CustomDomain` was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["annotations", "cert", "certPreference", "createTime", "deleteTime", "etag", "expireTime", "hostState", "issues", "labels", "name", "ownershipState", "reconciling", "redirectTarget", "requiredDnsUpdates", "updateTime"]

    @field_validator('cert_preference')
    def cert_preference_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'TEMPORARY', 'GROUPED', 'PROJECT_GROUPED', 'DEDICATED']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'TEMPORARY', 'GROUPED', 'PROJECT_GROUPED', 'DEDICATED')")
        return value

    @field_validator('host_state')
    def host_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HOST_STATE_UNSPECIFIED', 'HOST_UNHOSTED', 'HOST_UNREACHABLE', 'HOST_MISMATCH', 'HOST_CONFLICT', 'HOST_ACTIVE']):
            raise ValueError("must be one of enum values ('HOST_STATE_UNSPECIFIED', 'HOST_UNHOSTED', 'HOST_UNREACHABLE', 'HOST_MISMATCH', 'HOST_CONFLICT', 'HOST_ACTIVE')")
        return value

    @field_validator('ownership_state')
    def ownership_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OWNERSHIP_STATE_UNSPECIFIED', 'OWNERSHIP_MISSING', 'OWNERSHIP_UNREACHABLE', 'OWNERSHIP_MISMATCH', 'OWNERSHIP_CONFLICT', 'OWNERSHIP_PENDING', 'OWNERSHIP_ACTIVE']):
            raise ValueError("must be one of enum values ('OWNERSHIP_STATE_UNSPECIFIED', 'OWNERSHIP_MISSING', 'OWNERSHIP_UNREACHABLE', 'OWNERSHIP_MISMATCH', 'OWNERSHIP_CONFLICT', 'OWNERSHIP_PENDING', 'OWNERSHIP_ACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomDomain from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "delete_time",
            "etag",
            "expire_time",
            "host_state",
            "issues",
            "name",
            "ownership_state",
            "reconciling",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cert
        if self.cert:
            _dict['cert'] = self.cert.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in issues (list)
        _items = []
        if self.issues:
            for _item_issues in self.issues:
                if _item_issues:
                    _items.append(_item_issues.to_dict())
            _dict['issues'] = _items
        # override the default output from pydantic by calling `to_dict()` of required_dns_updates
        if self.required_dns_updates:
            _dict['requiredDnsUpdates'] = self.required_dns_updates.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomDomain from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "cert": Certificate.from_dict(obj["cert"]) if obj.get("cert") is not None else None,
            "certPreference": obj.get("certPreference"),
            "createTime": obj.get("createTime"),
            "deleteTime": obj.get("deleteTime"),
            "etag": obj.get("etag"),
            "expireTime": obj.get("expireTime"),
            "hostState": obj.get("hostState"),
            "issues": [Status.from_dict(_item) for _item in obj["issues"]] if obj.get("issues") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "ownershipState": obj.get("ownershipState"),
            "reconciling": obj.get("reconciling"),
            "redirectTarget": obj.get("redirectTarget"),
            "requiredDnsUpdates": DnsUpdates.from_dict(obj["requiredDnsUpdates"]) if obj.get("requiredDnsUpdates") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



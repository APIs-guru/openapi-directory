# coding: utf-8

"""
    Firebase Hosting API

    The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.acting_user import ActingUser
from openapi_client.models.serving_config import ServingConfig
from typing import Optional, Set
from typing_extensions import Self

class Version(BaseModel):
    """
    A `Version` is a configuration and a collection of static files which determine how a site is displayed.
    """ # noqa: E501
    config: Optional[ServingConfig] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the version was created.", alias="createTime")
    create_user: Optional[ActingUser] = Field(default=None, alias="createUser")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the version was `DELETED`.", alias="deleteTime")
    delete_user: Optional[ActingUser] = Field(default=None, alias="deleteUser")
    file_count: Optional[StrictStr] = Field(default=None, description="Output only. The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.", alias="fileCount")
    finalize_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the version was `FINALIZED`.", alias="finalizeTime")
    finalize_user: Optional[ActingUser] = Field(default=None, alias="finalizeUser")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels used for extra metadata and/or filtering.")
    name: Optional[StrictStr] = Field(default=None, description="The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).")
    status: Optional[StrictStr] = Field(default=None, description="The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).")
    version_bytes: Optional[StrictStr] = Field(default=None, description="Output only. The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.", alias="versionBytes")
    __properties: ClassVar[List[str]] = ["config", "createTime", "createUser", "deleteTime", "deleteUser", "fileCount", "finalizeTime", "finalizeUser", "labels", "name", "status", "versionBytes"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VERSION_STATUS_UNSPECIFIED', 'CREATED', 'FINALIZED', 'DELETED', 'ABANDONED', 'EXPIRED', 'CLONING']):
            raise ValueError("must be one of enum values ('VERSION_STATUS_UNSPECIFIED', 'CREATED', 'FINALIZED', 'DELETED', 'ABANDONED', 'EXPIRED', 'CLONING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Version from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_user
        if self.create_user:
            _dict['createUser'] = self.create_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_user
        if self.delete_user:
            _dict['deleteUser'] = self.delete_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of finalize_user
        if self.finalize_user:
            _dict['finalizeUser'] = self.finalize_user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Version from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "config": ServingConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "createTime": obj.get("createTime"),
            "createUser": ActingUser.from_dict(obj["createUser"]) if obj.get("createUser") is not None else None,
            "deleteTime": obj.get("deleteTime"),
            "deleteUser": ActingUser.from_dict(obj["deleteUser"]) if obj.get("deleteUser") is not None else None,
            "fileCount": obj.get("fileCount"),
            "finalizeTime": obj.get("finalizeTime"),
            "finalizeUser": ActingUser.from_dict(obj["finalizeUser"]) if obj.get("finalizeUser") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "versionBytes": obj.get("versionBytes")
        })
        return _obj



# coding: utf-8

"""
    Firebase Hosting API

    The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.header import Header
from openapi_client.models.i18n_config import I18nConfig
from openapi_client.models.redirect import Redirect
from openapi_client.models.rewrite import Rewrite
from typing import Optional, Set
from typing_extensions import Self

class ServingConfig(BaseModel):
    """
    The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).
    """ # noqa: E501
    app_association: Optional[StrictStr] = Field(default=None, description="How to handle well known App Association files.", alias="appAssociation")
    clean_urls: Optional[StrictBool] = Field(default=None, description="Defines whether to drop the file extension from uploaded files.", alias="cleanUrls")
    headers: Optional[List[Header]] = Field(default=None, description="An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.")
    i18n: Optional[I18nConfig] = None
    redirects: Optional[List[Redirect]] = Field(default=None, description="An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.")
    rewrites: Optional[List[Rewrite]] = Field(default=None, description="An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.")
    trailing_slash_behavior: Optional[StrictStr] = Field(default=None, description="Defines how to handle a trailing slash in the URL path.", alias="trailingSlashBehavior")
    __properties: ClassVar[List[str]] = ["appAssociation", "cleanUrls", "headers", "i18n", "redirects", "rewrites", "trailingSlashBehavior"]

    @field_validator('app_association')
    def app_association_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUTO', 'NONE']):
            raise ValueError("must be one of enum values ('AUTO', 'NONE')")
        return value

    @field_validator('trailing_slash_behavior')
    def trailing_slash_behavior_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRAILING_SLASH_BEHAVIOR_UNSPECIFIED', 'ADD', 'REMOVE']):
            raise ValueError("must be one of enum values ('TRAILING_SLASH_BEHAVIOR_UNSPECIFIED', 'ADD', 'REMOVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServingConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in headers (list)
        _items = []
        if self.headers:
            for _item_headers in self.headers:
                if _item_headers:
                    _items.append(_item_headers.to_dict())
            _dict['headers'] = _items
        # override the default output from pydantic by calling `to_dict()` of i18n
        if self.i18n:
            _dict['i18n'] = self.i18n.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in redirects (list)
        _items = []
        if self.redirects:
            for _item_redirects in self.redirects:
                if _item_redirects:
                    _items.append(_item_redirects.to_dict())
            _dict['redirects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rewrites (list)
        _items = []
        if self.rewrites:
            for _item_rewrites in self.rewrites:
                if _item_rewrites:
                    _items.append(_item_rewrites.to_dict())
            _dict['rewrites'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServingConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appAssociation": obj.get("appAssociation"),
            "cleanUrls": obj.get("cleanUrls"),
            "headers": [Header.from_dict(_item) for _item in obj["headers"]] if obj.get("headers") is not None else None,
            "i18n": I18nConfig.from_dict(obj["i18n"]) if obj.get("i18n") is not None else None,
            "redirects": [Redirect.from_dict(_item) for _item in obj["redirects"]] if obj.get("redirects") is not None else None,
            "rewrites": [Rewrite.from_dict(_item) for _item in obj["rewrites"]] if obj.get("rewrites") is not None else None,
            "trailingSlashBehavior": obj.get("trailingSlashBehavior")
        })
        return _obj



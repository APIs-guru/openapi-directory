# coding: utf-8

"""
    Bare Metal Solution API

    Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.instance import Instance

class TestInstance(unittest.TestCase):
    """Instance unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Instance:
        """Test Instance
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Instance`
        """
        model = Instance()
        if include_optional:
            return Instance(
                create_time = '',
                firmware_version = '',
                hyperthreading_enabled = True,
                id = '',
                interactive_serial_console_enabled = True,
                kms_key_version = '',
                labels = {
                    'key' : ''
                    },
                logical_interfaces = [
                    openapi_client.models.google_cloud_baremetalsolution_v2_logical_interface.GoogleCloudBaremetalsolutionV2LogicalInterface(
                        interface_index = 56, 
                        logical_network_interfaces = [
                            openapi_client.models.logical_network_interface.LogicalNetworkInterface(
                                default_gateway = True, 
                                id = '', 
                                ip_address = '', 
                                network = '', 
                                network_type = 'TYPE_UNSPECIFIED', )
                            ], 
                        name = '', )
                    ],
                login_info = '',
                luns = [
                    openapi_client.models.lun.Lun(
                        boot_lun = True, 
                        expire_time = '', 
                        id = '', 
                        instances = [
                            ''
                            ], 
                        multiprotocol_type = 'MULTIPROTOCOL_TYPE_UNSPECIFIED', 
                        name = '', 
                        shareable = True, 
                        size_gb = '', 
                        state = 'STATE_UNSPECIFIED', 
                        storage_type = 'STORAGE_TYPE_UNSPECIFIED', 
                        storage_volume = '', 
                        wwid = '', )
                    ],
                machine_type = '',
                name = '',
                network_template = '',
                networks = [
                    openapi_client.models.network.Network(
                        cidr = '', 
                        gateway_ip = '', 
                        id = '', 
                        ip_address = '', 
                        jumbo_frames_enabled = True, 
                        labels = {
                            'key' : ''
                            }, 
                        mac_address = [
                            ''
                            ], 
                        mount_points = [
                            openapi_client.models.network_mount_point.NetworkMountPoint(
                                default_gateway = True, 
                                instance = '', 
                                ip_address = '', 
                                logical_interface = '', )
                            ], 
                        name = '', 
                        pod = '', 
                        reservations = [
                            openapi_client.models.network_address_reservation.NetworkAddressReservation(
                                end_address = '', 
                                note = '', 
                                start_address = '', )
                            ], 
                        services_cidr = '', 
                        state = 'STATE_UNSPECIFIED', 
                        type = 'TYPE_UNSPECIFIED', 
                        vlan_id = '', 
                        vrf = openapi_client.models.vrf.VRF(
                            name = '', 
                            qos_policy = openapi_client.models.qos_policy.QosPolicy(
                                bandwidth_gbps = 1.337, ), 
                            state = 'STATE_UNSPECIFIED', 
                            vlan_attachments = [
                                openapi_client.models.vlan_attachment.VlanAttachment(
                                    id = '', 
                                    interconnect_attachment = '', 
                                    pairing_key = '', 
                                    peer_ip = '', 
                                    peer_vlan_id = '', 
                                    router_ip = '', )
                                ], ), 
                        vrf_attachment = '', )
                    ],
                os_image = '',
                pod = '',
                ssh_keys = [
                    ''
                    ],
                state = 'STATE_UNSPECIFIED',
                update_time = '',
                volumes = [
                    openapi_client.models.volume.Volume(
                        attached = True, 
                        auto_grown_size_gib = '', 
                        boot_volume = True, 
                        current_size_gib = '', 
                        emergency_size_gib = '', 
                        expire_time = '', 
                        id = '', 
                        instances = [
                            ''
                            ], 
                        labels = {
                            'key' : ''
                            }, 
                        max_size_gib = '', 
                        name = '', 
                        notes = '', 
                        originally_requested_size_gib = '', 
                        performance_tier = 'VOLUME_PERFORMANCE_TIER_UNSPECIFIED', 
                        pod = '', 
                        protocol = 'PROTOCOL_UNSPECIFIED', 
                        remaining_space_gib = '', 
                        requested_size_gib = '', 
                        snapshot_auto_delete_behavior = 'SNAPSHOT_AUTO_DELETE_BEHAVIOR_UNSPECIFIED', 
                        snapshot_enabled = True, 
                        snapshot_reservation_detail = openapi_client.models.snapshot_reservation_detail.SnapshotReservationDetail(
                            reserved_space_gib = '', 
                            reserved_space_percent = 56, 
                            reserved_space_remaining_gib = '', 
                            reserved_space_used_percent = 56, ), 
                        state = 'STATE_UNSPECIFIED', 
                        storage_type = 'STORAGE_TYPE_UNSPECIFIED', 
                        workload_profile = 'WORKLOAD_PROFILE_UNSPECIFIED', )
                    ],
                workload_profile = 'WORKLOAD_PROFILE_UNSPECIFIED'
            )
        else:
            return Instance(
        )
        """

    def testInstance(self):
        """Test Instance"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

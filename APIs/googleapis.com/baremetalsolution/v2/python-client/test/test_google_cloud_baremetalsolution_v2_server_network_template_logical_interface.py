# coding: utf-8

"""
    Bare Metal Solution API

    Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_baremetalsolution_v2_server_network_template_logical_interface import GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface

class TestGoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface(unittest.TestCase):
    """GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface:
        """Test GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface`
        """
        model = GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface()
        if include_optional:
            return GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface(
                name = '',
                required = True,
                type = 'INTERFACE_TYPE_UNSPECIFIED'
            )
        else:
            return GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface(
        )
        """

    def testGoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface(self):
        """Test GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Bare Metal Solution API

    Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.submit_provisioning_config_request import SubmitProvisioningConfigRequest

class TestSubmitProvisioningConfigRequest(unittest.TestCase):
    """SubmitProvisioningConfigRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SubmitProvisioningConfigRequest:
        """Test SubmitProvisioningConfigRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SubmitProvisioningConfigRequest`
        """
        model = SubmitProvisioningConfigRequest()
        if include_optional:
            return SubmitProvisioningConfigRequest(
                email = '',
                provisioning_config = openapi_client.models.provisioning_config.ProvisioningConfig(
                    cloud_console_uri = '', 
                    custom_id = '', 
                    email = '', 
                    handover_service_account = '', 
                    instances = [
                        openapi_client.models.instance_config.InstanceConfig(
                            account_networks_enabled = True, 
                            client_network = openapi_client.models.network_address.NetworkAddress(
                                address = '', 
                                existing_network_id = '', 
                                network_id = '', ), 
                            hyperthreading = True, 
                            id = '', 
                            instance_type = '', 
                            kms_key_version = '', 
                            logical_interfaces = [
                                openapi_client.models.google_cloud_baremetalsolution_v2_logical_interface.GoogleCloudBaremetalsolutionV2LogicalInterface(
                                    interface_index = 56, 
                                    logical_network_interfaces = [
                                        openapi_client.models.logical_network_interface.LogicalNetworkInterface(
                                            default_gateway = True, 
                                            id = '', 
                                            ip_address = '', 
                                            network = '', 
                                            network_type = 'TYPE_UNSPECIFIED', )
                                        ], 
                                    name = '', )
                                ], 
                            name = '', 
                            network_config = 'NETWORKCONFIG_UNSPECIFIED', 
                            network_template = '', 
                            os_image = '', 
                            private_network = openapi_client.models.network_address.NetworkAddress(
                                address = '', 
                                existing_network_id = '', 
                                network_id = '', ), 
                            ssh_key_names = [
                                ''
                                ], 
                            user_note = '', )
                        ], 
                    location = '', 
                    name = '', 
                    networks = [
                        openapi_client.models.network_config.NetworkConfig(
                            bandwidth = 'BANDWIDTH_UNSPECIFIED', 
                            cidr = '', 
                            gcp_service = '', 
                            id = '', 
                            jumbo_frames_enabled = True, 
                            name = '', 
                            service_cidr = 'SERVICE_CIDR_UNSPECIFIED', 
                            type = 'TYPE_UNSPECIFIED', 
                            user_note = '', 
                            vlan_attachments = [
                                openapi_client.models.intake_vlan_attachment.IntakeVlanAttachment(
                                    id = '', 
                                    pairing_key = '', )
                                ], 
                            vlan_same_project = True, )
                        ], 
                    pod = '', 
                    state = 'STATE_UNSPECIFIED', 
                    status_message = '', 
                    ticket_id = '', 
                    update_time = '', 
                    volumes = [
                        openapi_client.models.volume_config.VolumeConfig(
                            gcp_service = '', 
                            id = '', 
                            lun_ranges = [
                                openapi_client.models.lun_range.LunRange(
                                    quantity = 56, 
                                    size_gb = 56, )
                                ], 
                            machine_ids = [
                                ''
                                ], 
                            name = '', 
                            nfs_exports = [
                                openapi_client.models.nfs_export.NfsExport(
                                    allow_dev = True, 
                                    allow_suid = True, 
                                    cidr = '', 
                                    machine_id = '', 
                                    network_id = '', 
                                    no_root_squash = True, 
                                    permissions = 'PERMISSIONS_UNSPECIFIED', )
                                ], 
                            performance_tier = 'VOLUME_PERFORMANCE_TIER_UNSPECIFIED', 
                            protocol = 'PROTOCOL_UNSPECIFIED', 
                            size_gb = 56, 
                            snapshots_enabled = True, 
                            type = 'TYPE_UNSPECIFIED', 
                            user_note = '', )
                        ], 
                    vpc_sc_enabled = True, )
            )
        else:
            return SubmitProvisioningConfigRequest(
        )
        """

    def testSubmitProvisioningConfigRequest(self):
        """Test SubmitProvisioningConfigRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

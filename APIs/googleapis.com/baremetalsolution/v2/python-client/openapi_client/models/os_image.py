# coding: utf-8

"""
    Bare Metal Solution API

    Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OSImage(BaseModel):
    """
    Operation System image.
    """ # noqa: E501
    applicable_instance_types: Optional[List[StrictStr]] = Field(default=None, description="Instance types this image is applicable to. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)", alias="applicableInstanceTypes")
    code: Optional[StrictStr] = Field(default=None, description="OS Image code.")
    description: Optional[StrictStr] = Field(default=None, description="OS Image description.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. OS Image's unique name.")
    supported_network_templates: Optional[List[StrictStr]] = Field(default=None, description="Network templates that can be used with this OS Image.", alias="supportedNetworkTemplates")
    __properties: ClassVar[List[str]] = ["applicableInstanceTypes", "code", "description", "name", "supportedNetworkTemplates"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OSImage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OSImage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicableInstanceTypes": obj.get("applicableInstanceTypes"),
            "code": obj.get("code"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "supportedNetworkTemplates": obj.get("supportedNetworkTemplates")
        })
        return _obj



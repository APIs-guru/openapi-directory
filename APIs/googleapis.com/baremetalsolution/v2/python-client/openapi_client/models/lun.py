# coding: utf-8

"""
    Bare Metal Solution API

    Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Lun(BaseModel):
    """
    A storage volume logical unit number (LUN).
    """ # noqa: E501
    boot_lun: Optional[StrictBool] = Field(default=None, description="Display if this LUN is a boot LUN.", alias="bootLun")
    expire_time: Optional[StrictStr] = Field(default=None, description="Output only. Time after which LUN will be fully deleted. It is filled only for LUNs in COOL_OFF state.", alias="expireTime")
    id: Optional[StrictStr] = Field(default=None, description="An identifier for the LUN, generated by the backend.")
    instances: Optional[List[StrictStr]] = Field(default=None, description="Output only. Instances this Lun is attached to.")
    multiprotocol_type: Optional[StrictStr] = Field(default=None, description="The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.", alias="multiprotocolType")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of the LUN.")
    shareable: Optional[StrictBool] = Field(default=None, description="Display if this LUN can be shared between multiple physical servers.")
    size_gb: Optional[StrictStr] = Field(default=None, description="The size of this LUN, in GiB.", alias="sizeGb")
    state: Optional[StrictStr] = Field(default=None, description="The state of this storage volume.")
    storage_type: Optional[StrictStr] = Field(default=None, description="The storage type for this LUN.", alias="storageType")
    storage_volume: Optional[StrictStr] = Field(default=None, description="Display the storage volume for this LUN.", alias="storageVolume")
    wwid: Optional[StrictStr] = Field(default=None, description="The WWID for this LUN.")
    __properties: ClassVar[List[str]] = ["bootLun", "expireTime", "id", "instances", "multiprotocolType", "name", "shareable", "sizeGb", "state", "storageType", "storageVolume", "wwid"]

    @field_validator('multiprotocol_type')
    def multiprotocol_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MULTIPROTOCOL_TYPE_UNSPECIFIED', 'LINUX']):
            raise ValueError("must be one of enum values ('MULTIPROTOCOL_TYPE_UNSPECIFIED', 'LINUX')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'UPDATING', 'READY', 'DELETING', 'COOL_OFF']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'UPDATING', 'READY', 'DELETING', 'COOL_OFF')")
        return value

    @field_validator('storage_type')
    def storage_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STORAGE_TYPE_UNSPECIFIED', 'SSD', 'HDD']):
            raise ValueError("must be one of enum values ('STORAGE_TYPE_UNSPECIFIED', 'SSD', 'HDD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Lun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "expire_time",
            "instances",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Lun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bootLun": obj.get("bootLun"),
            "expireTime": obj.get("expireTime"),
            "id": obj.get("id"),
            "instances": obj.get("instances"),
            "multiprotocolType": obj.get("multiprotocolType"),
            "name": obj.get("name"),
            "shareable": obj.get("shareable"),
            "sizeGb": obj.get("sizeGb"),
            "state": obj.get("state"),
            "storageType": obj.get("storageType"),
            "storageVolume": obj.get("storageVolume"),
            "wwid": obj.get("wwid")
        })
        return _obj



# coding: utf-8

"""
    Bare Metal Solution API

    Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.network_address_reservation import NetworkAddressReservation
from openapi_client.models.network_mount_point import NetworkMountPoint
from openapi_client.models.vrf import VRF
from typing import Optional, Set
from typing_extensions import Self

class Network(BaseModel):
    """
    A Network.
    """ # noqa: E501
    cidr: Optional[StrictStr] = Field(default=None, description="The cidr of the Network.")
    gateway_ip: Optional[StrictStr] = Field(default=None, description="Output only. Gateway ip address.", alias="gatewayIp")
    id: Optional[StrictStr] = Field(default=None, description="An identifier for the `Network`, generated by the backend.")
    ip_address: Optional[StrictStr] = Field(default=None, description="IP address configured.", alias="ipAddress")
    jumbo_frames_enabled: Optional[StrictBool] = Field(default=None, description="Whether network uses standard frames or jumbo ones.", alias="jumboFramesEnabled")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels as key value pairs.")
    mac_address: Optional[List[StrictStr]] = Field(default=None, description="List of physical interfaces.", alias="macAddress")
    mount_points: Optional[List[NetworkMountPoint]] = Field(default=None, description="Input only. List of mount points to attach the network to.", alias="mountPoints")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of this `Network`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/networks/{network}`")
    pod: Optional[StrictStr] = Field(default=None, description="Immutable. Pod name. Pod is an independent part of infrastructure. Network can only be connected to the assets (instances, nfsshares) allocated in the same pod.")
    reservations: Optional[List[NetworkAddressReservation]] = Field(default=None, description="List of IP address reservations in this network. When updating this field, an error will be generated if a reservation conflicts with an IP address already allocated to a physical server.")
    services_cidr: Optional[StrictStr] = Field(default=None, description="IP range for reserved for services (e.g. NFS).", alias="servicesCidr")
    state: Optional[StrictStr] = Field(default=None, description="The Network state.")
    type: Optional[StrictStr] = Field(default=None, description="The type of this network.")
    vlan_id: Optional[StrictStr] = Field(default=None, description="The vlan id of the Network.", alias="vlanId")
    vrf: Optional[VRF] = None
    vrf_attachment: Optional[StrictStr] = Field(default=None, description="Optional. The name of a pre-existing Vrf that the network should be attached to. Format is `vrfs/{vrf}`.", alias="vrfAttachment")
    __properties: ClassVar[List[str]] = ["cidr", "gatewayIp", "id", "ipAddress", "jumboFramesEnabled", "labels", "macAddress", "mountPoints", "name", "pod", "reservations", "servicesCidr", "state", "type", "vlanId", "vrf", "vrfAttachment"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PROVISIONING', 'PROVISIONED', 'DEPROVISIONING', 'UPDATING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PROVISIONING', 'PROVISIONED', 'DEPROVISIONING', 'UPDATING')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'CLIENT', 'PRIVATE']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'CLIENT', 'PRIVATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Network from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "gateway_ip",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in mount_points (list)
        _items = []
        if self.mount_points:
            for _item_mount_points in self.mount_points:
                if _item_mount_points:
                    _items.append(_item_mount_points.to_dict())
            _dict['mountPoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reservations (list)
        _items = []
        if self.reservations:
            for _item_reservations in self.reservations:
                if _item_reservations:
                    _items.append(_item_reservations.to_dict())
            _dict['reservations'] = _items
        # override the default output from pydantic by calling `to_dict()` of vrf
        if self.vrf:
            _dict['vrf'] = self.vrf.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Network from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cidr": obj.get("cidr"),
            "gatewayIp": obj.get("gatewayIp"),
            "id": obj.get("id"),
            "ipAddress": obj.get("ipAddress"),
            "jumboFramesEnabled": obj.get("jumboFramesEnabled"),
            "labels": obj.get("labels"),
            "macAddress": obj.get("macAddress"),
            "mountPoints": [NetworkMountPoint.from_dict(_item) for _item in obj["mountPoints"]] if obj.get("mountPoints") is not None else None,
            "name": obj.get("name"),
            "pod": obj.get("pod"),
            "reservations": [NetworkAddressReservation.from_dict(_item) for _item in obj["reservations"]] if obj.get("reservations") is not None else None,
            "servicesCidr": obj.get("servicesCidr"),
            "state": obj.get("state"),
            "type": obj.get("type"),
            "vlanId": obj.get("vlanId"),
            "vrf": VRF.from_dict(obj["vrf"]) if obj.get("vrf") is not None else None,
            "vrfAttachment": obj.get("vrfAttachment")
        })
        return _obj



# coding: utf-8

"""
    Bare Metal Solution API

    Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.snapshot_reservation_detail import SnapshotReservationDetail
from typing import Optional, Set
from typing_extensions import Self

class Volume(BaseModel):
    """
    A storage volume.
    """ # noqa: E501
    attached: Optional[StrictBool] = Field(default=None, description="Output only. Is the Volume attached at at least one instance. This field is a lightweight counterpart of `instances` field. It is filled in List responses as well.")
    auto_grown_size_gib: Optional[StrictStr] = Field(default=None, description="The size, in GiB, that this storage volume has expanded as a result of an auto grow policy. In the absence of auto-grow, the value is 0.", alias="autoGrownSizeGib")
    boot_volume: Optional[StrictBool] = Field(default=None, description="Output only. Whether this volume is a boot volume. A boot volume is one which contains a boot LUN.", alias="bootVolume")
    current_size_gib: Optional[StrictStr] = Field(default=None, description="The current size of this storage volume, in GiB, including space reserved for snapshots. This size might be different than the requested size if the storage volume has been configured with auto grow or auto shrink.", alias="currentSizeGib")
    emergency_size_gib: Optional[StrictStr] = Field(default=None, description="Additional emergency size that was requested for this Volume, in GiB. current_size_gib includes this value.", alias="emergencySizeGib")
    expire_time: Optional[StrictStr] = Field(default=None, description="Output only. Time after which volume will be fully deleted. It is filled only for volumes in COOLOFF state.", alias="expireTime")
    id: Optional[StrictStr] = Field(default=None, description="An identifier for the `Volume`, generated by the backend.")
    instances: Optional[List[StrictStr]] = Field(default=None, description="Output only. Instances this Volume is attached to. This field is set only in Get requests.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels as key value pairs.")
    max_size_gib: Optional[StrictStr] = Field(default=None, description="Maximum size volume can be expanded to in case of evergency, in GiB.", alias="maxSizeGib")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of this `Volume`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/volumes/{volume}`")
    notes: Optional[StrictStr] = Field(default=None, description="Input only. User-specified notes for new Volume. Used to provision Volumes that require manual intervention.")
    originally_requested_size_gib: Optional[StrictStr] = Field(default=None, description="Originally requested size, in GiB.", alias="originallyRequestedSizeGib")
    performance_tier: Optional[StrictStr] = Field(default=None, description="Immutable. Performance tier of the Volume. Default is SHARED.", alias="performanceTier")
    pod: Optional[StrictStr] = Field(default=None, description="Immutable. Pod name. Pod is an independent part of infrastructure. Volume can only be connected to the instances allocated in the same pod.")
    protocol: Optional[StrictStr] = Field(default=None, description="Output only. Storage protocol for the Volume.")
    remaining_space_gib: Optional[StrictStr] = Field(default=None, description="The space remaining in the storage volume for new LUNs, in GiB, excluding space reserved for snapshots.", alias="remainingSpaceGib")
    requested_size_gib: Optional[StrictStr] = Field(default=None, description="The requested size of this storage volume, in GiB.", alias="requestedSizeGib")
    snapshot_auto_delete_behavior: Optional[StrictStr] = Field(default=None, description="The behavior to use when snapshot reserved space is full.", alias="snapshotAutoDeleteBehavior")
    snapshot_enabled: Optional[StrictBool] = Field(default=None, description="Whether snapshots are enabled.", alias="snapshotEnabled")
    snapshot_reservation_detail: Optional[SnapshotReservationDetail] = Field(default=None, alias="snapshotReservationDetail")
    state: Optional[StrictStr] = Field(default=None, description="The state of this storage volume.")
    storage_type: Optional[StrictStr] = Field(default=None, description="The storage type for this volume.", alias="storageType")
    workload_profile: Optional[StrictStr] = Field(default=None, description="The workload profile for the volume.", alias="workloadProfile")
    __properties: ClassVar[List[str]] = ["attached", "autoGrownSizeGib", "bootVolume", "currentSizeGib", "emergencySizeGib", "expireTime", "id", "instances", "labels", "maxSizeGib", "name", "notes", "originallyRequestedSizeGib", "performanceTier", "pod", "protocol", "remainingSpaceGib", "requestedSizeGib", "snapshotAutoDeleteBehavior", "snapshotEnabled", "snapshotReservationDetail", "state", "storageType", "workloadProfile"]

    @field_validator('performance_tier')
    def performance_tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VOLUME_PERFORMANCE_TIER_UNSPECIFIED', 'VOLUME_PERFORMANCE_TIER_SHARED', 'VOLUME_PERFORMANCE_TIER_ASSIGNED', 'VOLUME_PERFORMANCE_TIER_HT', 'VOLUME_PERFORMANCE_TIER_QOS2_PERFORMANCE']):
            raise ValueError("must be one of enum values ('VOLUME_PERFORMANCE_TIER_UNSPECIFIED', 'VOLUME_PERFORMANCE_TIER_SHARED', 'VOLUME_PERFORMANCE_TIER_ASSIGNED', 'VOLUME_PERFORMANCE_TIER_HT', 'VOLUME_PERFORMANCE_TIER_QOS2_PERFORMANCE')")
        return value

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROTOCOL_UNSPECIFIED', 'FIBRE_CHANNEL', 'NFS']):
            raise ValueError("must be one of enum values ('PROTOCOL_UNSPECIFIED', 'FIBRE_CHANNEL', 'NFS')")
        return value

    @field_validator('snapshot_auto_delete_behavior')
    def snapshot_auto_delete_behavior_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SNAPSHOT_AUTO_DELETE_BEHAVIOR_UNSPECIFIED', 'DISABLED', 'OLDEST_FIRST', 'NEWEST_FIRST']):
            raise ValueError("must be one of enum values ('SNAPSHOT_AUTO_DELETE_BEHAVIOR_UNSPECIFIED', 'DISABLED', 'OLDEST_FIRST', 'NEWEST_FIRST')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'READY', 'DELETING', 'UPDATING', 'COOL_OFF']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'READY', 'DELETING', 'UPDATING', 'COOL_OFF')")
        return value

    @field_validator('storage_type')
    def storage_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STORAGE_TYPE_UNSPECIFIED', 'SSD', 'HDD']):
            raise ValueError("must be one of enum values ('STORAGE_TYPE_UNSPECIFIED', 'SSD', 'HDD')")
        return value

    @field_validator('workload_profile')
    def workload_profile_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WORKLOAD_PROFILE_UNSPECIFIED', 'GENERIC', 'HANA']):
            raise ValueError("must be one of enum values ('WORKLOAD_PROFILE_UNSPECIFIED', 'GENERIC', 'HANA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Volume from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "attached",
            "boot_volume",
            "expire_time",
            "instances",
            "name",
            "protocol",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of snapshot_reservation_detail
        if self.snapshot_reservation_detail:
            _dict['snapshotReservationDetail'] = self.snapshot_reservation_detail.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Volume from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attached": obj.get("attached"),
            "autoGrownSizeGib": obj.get("autoGrownSizeGib"),
            "bootVolume": obj.get("bootVolume"),
            "currentSizeGib": obj.get("currentSizeGib"),
            "emergencySizeGib": obj.get("emergencySizeGib"),
            "expireTime": obj.get("expireTime"),
            "id": obj.get("id"),
            "instances": obj.get("instances"),
            "labels": obj.get("labels"),
            "maxSizeGib": obj.get("maxSizeGib"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "originallyRequestedSizeGib": obj.get("originallyRequestedSizeGib"),
            "performanceTier": obj.get("performanceTier"),
            "pod": obj.get("pod"),
            "protocol": obj.get("protocol"),
            "remainingSpaceGib": obj.get("remainingSpaceGib"),
            "requestedSizeGib": obj.get("requestedSizeGib"),
            "snapshotAutoDeleteBehavior": obj.get("snapshotAutoDeleteBehavior"),
            "snapshotEnabled": obj.get("snapshotEnabled"),
            "snapshotReservationDetail": SnapshotReservationDetail.from_dict(obj["snapshotReservationDetail"]) if obj.get("snapshotReservationDetail") is not None else None,
            "state": obj.get("state"),
            "storageType": obj.get("storageType"),
            "workloadProfile": obj.get("workloadProfile")
        })
        return _obj



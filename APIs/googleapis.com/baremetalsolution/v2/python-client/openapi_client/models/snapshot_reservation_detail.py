# coding: utf-8

"""
    Bare Metal Solution API

    Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SnapshotReservationDetail(BaseModel):
    """
    Details about snapshot space reservation and usage on the storage volume.
    """ # noqa: E501
    reserved_space_gib: Optional[StrictStr] = Field(default=None, description="The space on this storage volume reserved for snapshots, shown in GiB.", alias="reservedSpaceGib")
    reserved_space_percent: Optional[StrictInt] = Field(default=None, description="Percent of the total Volume size reserved for snapshot copies. Enabling snapshots requires reserving 20% or more of the storage volume space for snapshots. Maximum reserved space for snapshots is 40%. Setting this field will effectively set snapshot_enabled to true.", alias="reservedSpacePercent")
    reserved_space_remaining_gib: Optional[StrictStr] = Field(default=None, description="The amount, in GiB, of available space in this storage volume's reserved snapshot space.", alias="reservedSpaceRemainingGib")
    reserved_space_used_percent: Optional[StrictInt] = Field(default=None, description="The percent of snapshot space on this storage volume actually being used by the snapshot copies. This value might be higher than 100% if the snapshot copies have overflowed into the data portion of the storage volume.", alias="reservedSpaceUsedPercent")
    __properties: ClassVar[List[str]] = ["reservedSpaceGib", "reservedSpacePercent", "reservedSpaceRemainingGib", "reservedSpaceUsedPercent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SnapshotReservationDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SnapshotReservationDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reservedSpaceGib": obj.get("reservedSpaceGib"),
            "reservedSpacePercent": obj.get("reservedSpacePercent"),
            "reservedSpaceRemainingGib": obj.get("reservedSpaceRemainingGib"),
            "reservedSpaceUsedPercent": obj.get("reservedSpaceUsedPercent")
        })
        return _obj



# coding: utf-8

"""
    Bare Metal Solution API

    Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.instance_config import InstanceConfig
from openapi_client.models.network_config import NetworkConfig
from openapi_client.models.volume_config import VolumeConfig
from typing import Optional, Set
from typing_extensions import Self

class ProvisioningConfig(BaseModel):
    """
    A provisioning configuration.
    """ # noqa: E501
    cloud_console_uri: Optional[StrictStr] = Field(default=None, description="Output only. URI to Cloud Console UI view of this provisioning config.", alias="cloudConsoleUri")
    custom_id: Optional[StrictStr] = Field(default=None, description="Optional. The user-defined identifier of the provisioning config.", alias="customId")
    email: Optional[StrictStr] = Field(default=None, description="Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.")
    handover_service_account: Optional[StrictStr] = Field(default=None, description="A service account to enable customers to access instance credentials upon handover.", alias="handoverServiceAccount")
    instances: Optional[List[InstanceConfig]] = Field(default=None, description="Instances to be created.")
    location: Optional[StrictStr] = Field(default=None, description="Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The system-generated name of the provisioning config. This follows the UUID format.")
    networks: Optional[List[NetworkConfig]] = Field(default=None, description="Networks to be created.")
    pod: Optional[StrictStr] = Field(default=None, description="Optional. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes, nfsshares) allocated in the same pod only.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of ProvisioningConfig.")
    status_message: Optional[StrictStr] = Field(default=None, description="Optional status messages associated with the FAILED state.", alias="statusMessage")
    ticket_id: Optional[StrictStr] = Field(default=None, description="A generated ticket id to track provisioning request.", alias="ticketId")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Last update timestamp.", alias="updateTime")
    volumes: Optional[List[VolumeConfig]] = Field(default=None, description="Volumes to be created.")
    vpc_sc_enabled: Optional[StrictBool] = Field(default=None, description="If true, VPC SC is enabled for the cluster.", alias="vpcScEnabled")
    __properties: ClassVar[List[str]] = ["cloudConsoleUri", "customId", "email", "handoverServiceAccount", "instances", "location", "name", "networks", "pod", "state", "statusMessage", "ticketId", "updateTime", "volumes", "vpcScEnabled"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'DRAFT', 'SUBMITTED', 'PROVISIONING', 'PROVISIONED', 'VALIDATED', 'CANCELLED', 'FAILED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'DRAFT', 'SUBMITTED', 'PROVISIONING', 'PROVISIONED', 'VALIDATED', 'CANCELLED', 'FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProvisioningConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cloud_console_uri",
            "name",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in instances (list)
        _items = []
        if self.instances:
            for _item_instances in self.instances:
                if _item_instances:
                    _items.append(_item_instances.to_dict())
            _dict['instances'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in networks (list)
        _items = []
        if self.networks:
            for _item_networks in self.networks:
                if _item_networks:
                    _items.append(_item_networks.to_dict())
            _dict['networks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in volumes (list)
        _items = []
        if self.volumes:
            for _item_volumes in self.volumes:
                if _item_volumes:
                    _items.append(_item_volumes.to_dict())
            _dict['volumes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProvisioningConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudConsoleUri": obj.get("cloudConsoleUri"),
            "customId": obj.get("customId"),
            "email": obj.get("email"),
            "handoverServiceAccount": obj.get("handoverServiceAccount"),
            "instances": [InstanceConfig.from_dict(_item) for _item in obj["instances"]] if obj.get("instances") is not None else None,
            "location": obj.get("location"),
            "name": obj.get("name"),
            "networks": [NetworkConfig.from_dict(_item) for _item in obj["networks"]] if obj.get("networks") is not None else None,
            "pod": obj.get("pod"),
            "state": obj.get("state"),
            "statusMessage": obj.get("statusMessage"),
            "ticketId": obj.get("ticketId"),
            "updateTime": obj.get("updateTime"),
            "volumes": [VolumeConfig.from_dict(_item) for _item in obj["volumes"]] if obj.get("volumes") is not None else None,
            "vpcScEnabled": obj.get("vpcScEnabled")
        })
        return _obj



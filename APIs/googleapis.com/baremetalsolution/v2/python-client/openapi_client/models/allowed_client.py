# coding: utf-8

"""
    Bare Metal Solution API

    Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AllowedClient(BaseModel):
    """
    Represents an 'access point' for the share.
    """ # noqa: E501
    allow_dev: Optional[StrictBool] = Field(default=None, description="Allow dev flag. Which controls whether to allow creation of devices.", alias="allowDev")
    allow_suid: Optional[StrictBool] = Field(default=None, description="Allow the setuid flag.", alias="allowSuid")
    allowed_clients_cidr: Optional[StrictStr] = Field(default=None, description="The subnet of IP addresses permitted to access the share.", alias="allowedClientsCidr")
    mount_permissions: Optional[StrictStr] = Field(default=None, description="Mount permissions.", alias="mountPermissions")
    network: Optional[StrictStr] = Field(default=None, description="The network the access point sits on.")
    nfs_path: Optional[StrictStr] = Field(default=None, description="Output only. The path to access NFS, in format shareIP:/InstanceID InstanceID is the generated ID instead of customer provided name. example like \"10.0.0.0:/g123456789-nfs001\"", alias="nfsPath")
    no_root_squash: Optional[StrictBool] = Field(default=None, description="Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.", alias="noRootSquash")
    share_ip: Optional[StrictStr] = Field(default=None, description="Output only. The IP address of the share on this network. Assigned automatically during provisioning based on the network's services_cidr.", alias="shareIp")
    __properties: ClassVar[List[str]] = ["allowDev", "allowSuid", "allowedClientsCidr", "mountPermissions", "network", "nfsPath", "noRootSquash", "shareIp"]

    @field_validator('mount_permissions')
    def mount_permissions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MOUNT_PERMISSIONS_UNSPECIFIED', 'READ', 'READ_WRITE']):
            raise ValueError("must be one of enum values ('MOUNT_PERMISSIONS_UNSPECIFIED', 'READ', 'READ_WRITE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AllowedClient from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "nfs_path",
            "share_ip",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AllowedClient from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowDev": obj.get("allowDev"),
            "allowSuid": obj.get("allowSuid"),
            "allowedClientsCidr": obj.get("allowedClientsCidr"),
            "mountPermissions": obj.get("mountPermissions"),
            "network": obj.get("network"),
            "nfsPath": obj.get("nfsPath"),
            "noRootSquash": obj.get("noRootSquash"),
            "shareIp": obj.get("shareIp")
        })
        return _obj



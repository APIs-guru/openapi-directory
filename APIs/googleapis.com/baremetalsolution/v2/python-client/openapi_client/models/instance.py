# coding: utf-8

"""
    Bare Metal Solution API

    Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_baremetalsolution_v2_logical_interface import GoogleCloudBaremetalsolutionV2LogicalInterface
from openapi_client.models.lun import Lun
from openapi_client.models.network import Network
from openapi_client.models.volume import Volume
from typing import Optional, Set
from typing_extensions import Self

class Instance(BaseModel):
    """
    A server.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Create a time stamp.", alias="createTime")
    firmware_version: Optional[StrictStr] = Field(default=None, description="Output only. The firmware version for the instance.", alias="firmwareVersion")
    hyperthreading_enabled: Optional[StrictBool] = Field(default=None, description="True if you enable hyperthreading for the server, otherwise false. The default value is false.", alias="hyperthreadingEnabled")
    id: Optional[StrictStr] = Field(default=None, description="Output only. An identifier for the `Instance`, generated by the backend.")
    interactive_serial_console_enabled: Optional[StrictBool] = Field(default=None, description="Output only. True if the interactive serial console feature is enabled for the instance, false otherwise. The default value is false.", alias="interactiveSerialConsoleEnabled")
    kms_key_version: Optional[StrictStr] = Field(default=None, description="Optional. Name of the KMS crypto key version used to encrypt the initial passwords. The key has to have ASYMMETRIC_DECRYPT purpose. Format is `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`.", alias="kmsKeyVersion")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels as key value pairs.")
    logical_interfaces: Optional[List[GoogleCloudBaremetalsolutionV2LogicalInterface]] = Field(default=None, description="List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. For the non-multivlan configurations (for eg, existing servers) that use existing default network template (bondaa-bondaa), both the Instance.networks field and the Instance.logical_interfaces fields will be filled to ensure backward compatibility. For the others, only Instance.logical_interfaces will be filled.", alias="logicalInterfaces")
    login_info: Optional[StrictStr] = Field(default=None, description="Output only. Text field about info for logging in.", alias="loginInfo")
    luns: Optional[List[Lun]] = Field(default=None, description="Immutable. List of LUNs associated with this server.")
    machine_type: Optional[StrictStr] = Field(default=None, description="Immutable. The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)", alias="machineType")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of this `Instance`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/instances/{instance}`")
    network_template: Optional[StrictStr] = Field(default=None, description="Instance network template name. For eg, bondaa-bondaa, bondab-nic, etc. Generally, the template name follows the syntax of \"bond\" or \"nic\".", alias="networkTemplate")
    networks: Optional[List[Network]] = Field(default=None, description="Output only. List of networks associated with this server.")
    os_image: Optional[StrictStr] = Field(default=None, description="The OS image currently installed on the server.", alias="osImage")
    pod: Optional[StrictStr] = Field(default=None, description="Immutable. Pod name. Pod is an independent part of infrastructure. Instance can only be connected to the assets (networks, volumes) allocated in the same pod.")
    ssh_keys: Optional[List[StrictStr]] = Field(default=None, description="Optional. List of SSH Keys used during instance provisioning.", alias="sshKeys")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the server.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Update a time stamp.", alias="updateTime")
    volumes: Optional[List[Volume]] = Field(default=None, description="Input only. List of Volumes to attach to this Instance on creation. This field won't be populated in Get/List responses.")
    workload_profile: Optional[StrictStr] = Field(default=None, description="The workload profile for the instance.", alias="workloadProfile")
    __properties: ClassVar[List[str]] = ["createTime", "firmwareVersion", "hyperthreadingEnabled", "id", "interactiveSerialConsoleEnabled", "kmsKeyVersion", "labels", "logicalInterfaces", "loginInfo", "luns", "machineType", "name", "networkTemplate", "networks", "osImage", "pod", "sshKeys", "state", "updateTime", "volumes", "workloadProfile"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PROVISIONING', 'RUNNING', 'DELETED', 'UPDATING', 'STARTING', 'STOPPING', 'SHUTDOWN']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PROVISIONING', 'RUNNING', 'DELETED', 'UPDATING', 'STARTING', 'STOPPING', 'SHUTDOWN')")
        return value

    @field_validator('workload_profile')
    def workload_profile_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WORKLOAD_PROFILE_UNSPECIFIED', 'WORKLOAD_PROFILE_GENERIC', 'WORKLOAD_PROFILE_HANA']):
            raise ValueError("must be one of enum values ('WORKLOAD_PROFILE_UNSPECIFIED', 'WORKLOAD_PROFILE_GENERIC', 'WORKLOAD_PROFILE_HANA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Instance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "firmware_version",
            "id",
            "interactive_serial_console_enabled",
            "login_info",
            "networks",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in logical_interfaces (list)
        _items = []
        if self.logical_interfaces:
            for _item_logical_interfaces in self.logical_interfaces:
                if _item_logical_interfaces:
                    _items.append(_item_logical_interfaces.to_dict())
            _dict['logicalInterfaces'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in luns (list)
        _items = []
        if self.luns:
            for _item_luns in self.luns:
                if _item_luns:
                    _items.append(_item_luns.to_dict())
            _dict['luns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in networks (list)
        _items = []
        if self.networks:
            for _item_networks in self.networks:
                if _item_networks:
                    _items.append(_item_networks.to_dict())
            _dict['networks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in volumes (list)
        _items = []
        if self.volumes:
            for _item_volumes in self.volumes:
                if _item_volumes:
                    _items.append(_item_volumes.to_dict())
            _dict['volumes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Instance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "firmwareVersion": obj.get("firmwareVersion"),
            "hyperthreadingEnabled": obj.get("hyperthreadingEnabled"),
            "id": obj.get("id"),
            "interactiveSerialConsoleEnabled": obj.get("interactiveSerialConsoleEnabled"),
            "kmsKeyVersion": obj.get("kmsKeyVersion"),
            "labels": obj.get("labels"),
            "logicalInterfaces": [GoogleCloudBaremetalsolutionV2LogicalInterface.from_dict(_item) for _item in obj["logicalInterfaces"]] if obj.get("logicalInterfaces") is not None else None,
            "loginInfo": obj.get("loginInfo"),
            "luns": [Lun.from_dict(_item) for _item in obj["luns"]] if obj.get("luns") is not None else None,
            "machineType": obj.get("machineType"),
            "name": obj.get("name"),
            "networkTemplate": obj.get("networkTemplate"),
            "networks": [Network.from_dict(_item) for _item in obj["networks"]] if obj.get("networks") is not None else None,
            "osImage": obj.get("osImage"),
            "pod": obj.get("pod"),
            "sshKeys": obj.get("sshKeys"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime"),
            "volumes": [Volume.from_dict(_item) for _item in obj["volumes"]] if obj.get("volumes") is not None else None,
            "workloadProfile": obj.get("workloadProfile")
        })
        return _obj



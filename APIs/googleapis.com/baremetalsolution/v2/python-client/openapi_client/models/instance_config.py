# coding: utf-8

"""
    Bare Metal Solution API

    Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_baremetalsolution_v2_logical_interface import GoogleCloudBaremetalsolutionV2LogicalInterface
from openapi_client.models.network_address import NetworkAddress
from typing import Optional, Set
from typing_extensions import Self

class InstanceConfig(BaseModel):
    """
    Configuration parameters for a new instance.
    """ # noqa: E501
    account_networks_enabled: Optional[StrictBool] = Field(default=None, description="If true networks can be from different projects of the same vendor account.", alias="accountNetworksEnabled")
    client_network: Optional[NetworkAddress] = Field(default=None, alias="clientNetwork")
    hyperthreading: Optional[StrictBool] = Field(default=None, description="Whether the instance should be provisioned with Hyperthreading enabled.")
    id: Optional[StrictStr] = Field(default=None, description="A transient unique identifier to idenfity an instance within an ProvisioningConfig request.")
    instance_type: Optional[StrictStr] = Field(default=None, description="Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)", alias="instanceType")
    kms_key_version: Optional[StrictStr] = Field(default=None, description="Name of the KMS crypto key version used to encrypt the initial passwords. The key has to have ASYMMETRIC_DECRYPT purpose.", alias="kmsKeyVersion")
    logical_interfaces: Optional[List[GoogleCloudBaremetalsolutionV2LogicalInterface]] = Field(default=None, description="List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true.", alias="logicalInterfaces")
    name: Optional[StrictStr] = Field(default=None, description="The name of the instance config.")
    network_config: Optional[StrictStr] = Field(default=None, description="The type of network configuration on the instance.", alias="networkConfig")
    network_template: Optional[StrictStr] = Field(default=None, description="Server network template name. Filled if InstanceConfig.multivlan_config is true.", alias="networkTemplate")
    os_image: Optional[StrictStr] = Field(default=None, description="OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)", alias="osImage")
    private_network: Optional[NetworkAddress] = Field(default=None, alias="privateNetwork")
    ssh_key_names: Optional[List[StrictStr]] = Field(default=None, description="Optional. List of names of ssh keys used to provision the instance.", alias="sshKeyNames")
    user_note: Optional[StrictStr] = Field(default=None, description="User note field, it can be used by customers to add additional information for the BMS Ops team .", alias="userNote")
    __properties: ClassVar[List[str]] = ["accountNetworksEnabled", "clientNetwork", "hyperthreading", "id", "instanceType", "kmsKeyVersion", "logicalInterfaces", "name", "networkConfig", "networkTemplate", "osImage", "privateNetwork", "sshKeyNames", "userNote"]

    @field_validator('network_config')
    def network_config_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NETWORKCONFIG_UNSPECIFIED', 'SINGLE_VLAN', 'MULTI_VLAN']):
            raise ValueError("must be one of enum values ('NETWORKCONFIG_UNSPECIFIED', 'SINGLE_VLAN', 'MULTI_VLAN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstanceConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_network
        if self.client_network:
            _dict['clientNetwork'] = self.client_network.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in logical_interfaces (list)
        _items = []
        if self.logical_interfaces:
            for _item_logical_interfaces in self.logical_interfaces:
                if _item_logical_interfaces:
                    _items.append(_item_logical_interfaces.to_dict())
            _dict['logicalInterfaces'] = _items
        # override the default output from pydantic by calling `to_dict()` of private_network
        if self.private_network:
            _dict['privateNetwork'] = self.private_network.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstanceConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountNetworksEnabled": obj.get("accountNetworksEnabled"),
            "clientNetwork": NetworkAddress.from_dict(obj["clientNetwork"]) if obj.get("clientNetwork") is not None else None,
            "hyperthreading": obj.get("hyperthreading"),
            "id": obj.get("id"),
            "instanceType": obj.get("instanceType"),
            "kmsKeyVersion": obj.get("kmsKeyVersion"),
            "logicalInterfaces": [GoogleCloudBaremetalsolutionV2LogicalInterface.from_dict(_item) for _item in obj["logicalInterfaces"]] if obj.get("logicalInterfaces") is not None else None,
            "name": obj.get("name"),
            "networkConfig": obj.get("networkConfig"),
            "networkTemplate": obj.get("networkTemplate"),
            "osImage": obj.get("osImage"),
            "privateNetwork": NetworkAddress.from_dict(obj["privateNetwork"]) if obj.get("privateNetwork") is not None else None,
            "sshKeyNames": obj.get("sshKeyNames"),
            "userNote": obj.get("userNote")
        })
        return _obj



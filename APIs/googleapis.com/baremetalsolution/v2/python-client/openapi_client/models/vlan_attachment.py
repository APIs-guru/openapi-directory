# coding: utf-8

"""
    Bare Metal Solution API

    Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.qos_policy import QosPolicy
from typing import Optional, Set
from typing_extensions import Self

class VlanAttachment(BaseModel):
    """
    VLAN attachment details.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Immutable. The identifier of the attachment within vrf.")
    interconnect_attachment: Optional[StrictStr] = Field(default=None, description="Optional. The name of the vlan attachment within vrf. This is of the form projects/{project_number}/regions/{region}/interconnectAttachments/{interconnect_attachment}", alias="interconnectAttachment")
    pairing_key: Optional[StrictStr] = Field(default=None, description="Input only. Pairing key.", alias="pairingKey")
    peer_ip: Optional[StrictStr] = Field(default=None, description="The peer IP of the attachment.", alias="peerIp")
    peer_vlan_id: Optional[StrictStr] = Field(default=None, description="The peer vlan ID of the attachment.", alias="peerVlanId")
    qos_policy: Optional[QosPolicy] = Field(default=None, alias="qosPolicy")
    router_ip: Optional[StrictStr] = Field(default=None, description="The router IP of the attachment.", alias="routerIp")
    __properties: ClassVar[List[str]] = ["id", "interconnectAttachment", "pairingKey", "peerIp", "peerVlanId", "qosPolicy", "routerIp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VlanAttachment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of qos_policy
        if self.qos_policy:
            _dict['qosPolicy'] = self.qos_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VlanAttachment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "interconnectAttachment": obj.get("interconnectAttachment"),
            "pairingKey": obj.get("pairingKey"),
            "peerIp": obj.get("peerIp"),
            "peerVlanId": obj.get("peerVlanId"),
            "qosPolicy": QosPolicy.from_dict(obj["qosPolicy"]) if obj.get("qosPolicy") is not None else None,
            "routerIp": obj.get("routerIp")
        })
        return _obj



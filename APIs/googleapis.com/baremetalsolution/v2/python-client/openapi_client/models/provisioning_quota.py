# coding: utf-8

"""
    Bare Metal Solution API

    Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.instance_quota import InstanceQuota
from typing import Optional, Set
from typing_extensions import Self

class ProvisioningQuota(BaseModel):
    """
    A provisioning quota for a given project.
    """ # noqa: E501
    asset_type: Optional[StrictStr] = Field(default=None, description="The asset type of this provisioning quota.", alias="assetType")
    available_count: Optional[StrictInt] = Field(default=None, description="The available count of the provisioning quota.", alias="availableCount")
    gcp_service: Optional[StrictStr] = Field(default=None, description="The gcp service of the provisioning quota.", alias="gcpService")
    instance_quota: Optional[InstanceQuota] = Field(default=None, alias="instanceQuota")
    location: Optional[StrictStr] = Field(default=None, description="The specific location of the provisioining quota.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of the provisioning quota.")
    network_bandwidth: Optional[StrictStr] = Field(default=None, description="Network bandwidth, Gbps", alias="networkBandwidth")
    server_count: Optional[StrictStr] = Field(default=None, description="Server count.", alias="serverCount")
    storage_gib: Optional[StrictStr] = Field(default=None, description="Storage size (GB).", alias="storageGib")
    __properties: ClassVar[List[str]] = ["assetType", "availableCount", "gcpService", "instanceQuota", "location", "name", "networkBandwidth", "serverCount", "storageGib"]

    @field_validator('asset_type')
    def asset_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ASSET_TYPE_UNSPECIFIED', 'ASSET_TYPE_SERVER', 'ASSET_TYPE_STORAGE', 'ASSET_TYPE_NETWORK']):
            raise ValueError("must be one of enum values ('ASSET_TYPE_UNSPECIFIED', 'ASSET_TYPE_SERVER', 'ASSET_TYPE_STORAGE', 'ASSET_TYPE_NETWORK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProvisioningQuota from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of instance_quota
        if self.instance_quota:
            _dict['instanceQuota'] = self.instance_quota.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProvisioningQuota from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetType": obj.get("assetType"),
            "availableCount": obj.get("availableCount"),
            "gcpService": obj.get("gcpService"),
            "instanceQuota": InstanceQuota.from_dict(obj["instanceQuota"]) if obj.get("instanceQuota") is not None else None,
            "location": obj.get("location"),
            "name": obj.get("name"),
            "networkBandwidth": obj.get("networkBandwidth"),
            "serverCount": obj.get("serverCount"),
            "storageGib": obj.get("storageGib")
        })
        return _obj



# coding: utf-8

"""
    Bare Metal Solution API

    Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.allowed_client import AllowedClient
from typing import Optional, Set
from typing_extensions import Self

class NfsShare(BaseModel):
    """
    An NFS share.
    """ # noqa: E501
    allowed_clients: Optional[List[AllowedClient]] = Field(default=None, description="List of allowed access points.", alias="allowedClients")
    id: Optional[StrictStr] = Field(default=None, description="Output only. An identifier for the NFS share, generated by the backend. This is the same value as nfs_share_id and will replace it in the future.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels as key value pairs.")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The name of the NFS share.")
    nfs_share_id: Optional[StrictStr] = Field(default=None, description="Output only. An identifier for the NFS share, generated by the backend. This field will be deprecated in the future, use `id` instead.", alias="nfsShareId")
    pod: Optional[StrictStr] = Field(default=None, description="Immutable. Pod name. Pod is an independent part of infrastructure. NFSShare can only be connected to the assets (networks, instances) allocated in the same pod.")
    requested_size_gib: Optional[StrictStr] = Field(default=None, description="The requested size, in GiB.", alias="requestedSizeGib")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the NFS share.")
    storage_type: Optional[StrictStr] = Field(default=None, description="Immutable. The storage type of the underlying volume.", alias="storageType")
    volume: Optional[StrictStr] = Field(default=None, description="Output only. The underlying volume of the share. Created automatically during provisioning.")
    __properties: ClassVar[List[str]] = ["allowedClients", "id", "labels", "name", "nfsShareId", "pod", "requestedSizeGib", "state", "storageType", "volume"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PROVISIONED', 'CREATING', 'UPDATING', 'DELETING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PROVISIONED', 'CREATING', 'UPDATING', 'DELETING')")
        return value

    @field_validator('storage_type')
    def storage_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STORAGE_TYPE_UNSPECIFIED', 'SSD', 'HDD']):
            raise ValueError("must be one of enum values ('STORAGE_TYPE_UNSPECIFIED', 'SSD', 'HDD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NfsShare from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "nfs_share_id",
            "state",
            "volume",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_clients (list)
        _items = []
        if self.allowed_clients:
            for _item_allowed_clients in self.allowed_clients:
                if _item_allowed_clients:
                    _items.append(_item_allowed_clients.to_dict())
            _dict['allowedClients'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NfsShare from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedClients": [AllowedClient.from_dict(_item) for _item in obj["allowedClients"]] if obj.get("allowedClients") is not None else None,
            "id": obj.get("id"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "nfsShareId": obj.get("nfsShareId"),
            "pod": obj.get("pod"),
            "requestedSizeGib": obj.get("requestedSizeGib"),
            "state": obj.get("state"),
            "storageType": obj.get("storageType"),
            "volume": obj.get("volume")
        })
        return _obj



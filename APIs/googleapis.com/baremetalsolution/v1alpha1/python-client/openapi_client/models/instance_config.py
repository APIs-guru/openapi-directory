# coding: utf-8

"""
    Bare Metal Solution API

    Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.network_address import NetworkAddress
from typing import Optional, Set
from typing_extensions import Self

class InstanceConfig(BaseModel):
    """
    Configuration parameters for a new instance.
    """ # noqa: E501
    client_network: Optional[NetworkAddress] = Field(default=None, alias="clientNetwork")
    hyperthreading: Optional[StrictBool] = Field(default=None, description="Whether the instance should be provisioned with Hyperthreading enabled.")
    id: Optional[StrictStr] = Field(default=None, description="A transient unique identifier to idenfity an instance within an ProvisioningConfig request.")
    instance_type: Optional[StrictStr] = Field(default=None, description="Instance type.", alias="instanceType")
    location: Optional[StrictStr] = Field(default=None, description="Location where to deploy the instance.")
    os_image: Optional[StrictStr] = Field(default=None, description="OS image to initialize the instance.", alias="osImage")
    private_network: Optional[NetworkAddress] = Field(default=None, alias="privateNetwork")
    user_note: Optional[StrictStr] = Field(default=None, description="User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617).", alias="userNote")
    __properties: ClassVar[List[str]] = ["clientNetwork", "hyperthreading", "id", "instanceType", "location", "osImage", "privateNetwork", "userNote"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstanceConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_network
        if self.client_network:
            _dict['clientNetwork'] = self.client_network.to_dict()
        # override the default output from pydantic by calling `to_dict()` of private_network
        if self.private_network:
            _dict['privateNetwork'] = self.private_network.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstanceConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientNetwork": NetworkAddress.from_dict(obj["clientNetwork"]) if obj.get("clientNetwork") is not None else None,
            "hyperthreading": obj.get("hyperthreading"),
            "id": obj.get("id"),
            "instanceType": obj.get("instanceType"),
            "location": obj.get("location"),
            "osImage": obj.get("osImage"),
            "privateNetwork": NetworkAddress.from_dict(obj["privateNetwork"]) if obj.get("privateNetwork") is not None else None,
            "userNote": obj.get("userNote")
        })
        return _obj



# coding: utf-8

"""
    Bare Metal Solution API

    Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NfsExport(BaseModel):
    """
    A NFS export entry.
    """ # noqa: E501
    allow_dev: Optional[StrictBool] = Field(default=None, description="Allow dev.", alias="allowDev")
    allow_suid: Optional[StrictBool] = Field(default=None, description="Allow the setuid flag.", alias="allowSuid")
    cidr: Optional[StrictStr] = Field(default=None, description="A CIDR range.")
    machine_id: Optional[StrictStr] = Field(default=None, description="Either a single machine, identified by an ID, or a comma-separated list of machine IDs.", alias="machineId")
    network_id: Optional[StrictStr] = Field(default=None, description="Network to use to publish the export.", alias="networkId")
    no_root_squash: Optional[StrictBool] = Field(default=None, description="Disable root squashing.", alias="noRootSquash")
    permissions: Optional[StrictStr] = Field(default=None, description="Export permissions.")
    __properties: ClassVar[List[str]] = ["allowDev", "allowSuid", "cidr", "machineId", "networkId", "noRootSquash", "permissions"]

    @field_validator('permissions')
    def permissions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PERMISSIONS_UNSPECIFIED', 'READ_ONLY', 'READ_WRITE']):
            raise ValueError("must be one of enum values ('PERMISSIONS_UNSPECIFIED', 'READ_ONLY', 'READ_WRITE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NfsExport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NfsExport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowDev": obj.get("allowDev"),
            "allowSuid": obj.get("allowSuid"),
            "cidr": obj.get("cidr"),
            "machineId": obj.get("machineId"),
            "networkId": obj.get("networkId"),
            "noRootSquash": obj.get("noRootSquash"),
            "permissions": obj.get("permissions")
        })
        return _obj



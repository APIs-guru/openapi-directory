# coding: utf-8

"""
    Bare Metal Solution API

    Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.vlan_attachment import VlanAttachment
from typing import Optional, Set
from typing_extensions import Self

class NetworkConfig(BaseModel):
    """
    Configuration parameters for a new network.
    """ # noqa: E501
    bandwidth: Optional[StrictStr] = Field(default=None, description="Interconnect bandwidth. Set only when type is CLIENT.")
    cidr: Optional[StrictStr] = Field(default=None, description="CIDR range of the network.")
    id: Optional[StrictStr] = Field(default=None, description="A transient unique identifier to identify a volume within an ProvisioningConfig request.")
    location: Optional[StrictStr] = Field(default=None, description="Location where to deploy the network.")
    service_cidr: Optional[StrictStr] = Field(default=None, description="Service CIDR, if any.", alias="serviceCidr")
    type: Optional[StrictStr] = Field(default=None, description="The type of this network.")
    user_note: Optional[StrictStr] = Field(default=None, description="User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617).", alias="userNote")
    vlan_attachments: Optional[List[VlanAttachment]] = Field(default=None, description="List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).", alias="vlanAttachments")
    __properties: ClassVar[List[str]] = ["bandwidth", "cidr", "id", "location", "serviceCidr", "type", "userNote", "vlanAttachments"]

    @field_validator('bandwidth')
    def bandwidth_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BANDWIDTH_UNSPECIFIED', 'BW_1_GBPS', 'BW_2_GBPS', 'BW_5_GBPS', 'BW_10_GBPS']):
            raise ValueError("must be one of enum values ('BANDWIDTH_UNSPECIFIED', 'BW_1_GBPS', 'BW_2_GBPS', 'BW_5_GBPS', 'BW_10_GBPS')")
        return value

    @field_validator('service_cidr')
    def service_cidr_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SERVICE_CIDR_UNSPECIFIED', 'DISABLED', 'HIGH_26', 'HIGH_27', 'HIGH_28']):
            raise ValueError("must be one of enum values ('SERVICE_CIDR_UNSPECIFIED', 'DISABLED', 'HIGH_26', 'HIGH_27', 'HIGH_28')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'CLIENT', 'PRIVATE']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'CLIENT', 'PRIVATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in vlan_attachments (list)
        _items = []
        if self.vlan_attachments:
            for _item_vlan_attachments in self.vlan_attachments:
                if _item_vlan_attachments:
                    _items.append(_item_vlan_attachments.to_dict())
            _dict['vlanAttachments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bandwidth": obj.get("bandwidth"),
            "cidr": obj.get("cidr"),
            "id": obj.get("id"),
            "location": obj.get("location"),
            "serviceCidr": obj.get("serviceCidr"),
            "type": obj.get("type"),
            "userNote": obj.get("userNote"),
            "vlanAttachments": [VlanAttachment.from_dict(_item) for _item in obj["vlanAttachments"]] if obj.get("vlanAttachments") is not None else None
        })
        return _obj



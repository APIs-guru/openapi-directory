# coding: utf-8

"""
    Bare Metal Solution API

    Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.lun_range import LunRange
from openapi_client.models.nfs_export import NfsExport
from typing import Optional, Set
from typing_extensions import Self

class VolumeConfig(BaseModel):
    """
    Configuration parameters for a new volume.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A transient unique identifier to identify a volume within an ProvisioningConfig request.")
    location: Optional[StrictStr] = Field(default=None, description="Location where to deploy the volume.")
    lun_ranges: Optional[List[LunRange]] = Field(default=None, description="LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.", alias="lunRanges")
    machine_ids: Optional[List[StrictStr]] = Field(default=None, description="Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.", alias="machineIds")
    nfs_exports: Optional[List[NfsExport]] = Field(default=None, description="NFS exports. Set only when protocol is PROTOCOL_NFS.", alias="nfsExports")
    protocol: Optional[StrictStr] = Field(default=None, description="Volume protocol.")
    size_gb: Optional[StrictInt] = Field(default=None, description="The requested size of this volume, in GB. This will be updated in a later iteration with a generic size field.", alias="sizeGb")
    snapshots_enabled: Optional[StrictBool] = Field(default=None, description="Whether snapshots should be enabled.", alias="snapshotsEnabled")
    type: Optional[StrictStr] = Field(default=None, description="The type of this Volume.")
    user_note: Optional[StrictStr] = Field(default=None, description="User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617).", alias="userNote")
    __properties: ClassVar[List[str]] = ["id", "location", "lunRanges", "machineIds", "nfsExports", "protocol", "sizeGb", "snapshotsEnabled", "type", "userNote"]

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROTOCOL_UNSPECIFIED', 'PROTOCOL_FC', 'PROTOCOL_NFS']):
            raise ValueError("must be one of enum values ('PROTOCOL_UNSPECIFIED', 'PROTOCOL_FC', 'PROTOCOL_NFS')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'FLASH', 'DISK']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'FLASH', 'DISK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VolumeConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in lun_ranges (list)
        _items = []
        if self.lun_ranges:
            for _item_lun_ranges in self.lun_ranges:
                if _item_lun_ranges:
                    _items.append(_item_lun_ranges.to_dict())
            _dict['lunRanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nfs_exports (list)
        _items = []
        if self.nfs_exports:
            for _item_nfs_exports in self.nfs_exports:
                if _item_nfs_exports:
                    _items.append(_item_nfs_exports.to_dict())
            _dict['nfsExports'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VolumeConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "location": obj.get("location"),
            "lunRanges": [LunRange.from_dict(_item) for _item in obj["lunRanges"]] if obj.get("lunRanges") is not None else None,
            "machineIds": obj.get("machineIds"),
            "nfsExports": [NfsExport.from_dict(_item) for _item in obj["nfsExports"]] if obj.get("nfsExports") is not None else None,
            "protocol": obj.get("protocol"),
            "sizeGb": obj.get("sizeGb"),
            "snapshotsEnabled": obj.get("snapshotsEnabled"),
            "type": obj.get("type"),
            "userNote": obj.get("userNote")
        })
        return _obj



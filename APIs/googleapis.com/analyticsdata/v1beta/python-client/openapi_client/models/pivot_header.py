# coding: utf-8

"""
    Google Analytics Data API

    Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pivot_dimension_header import PivotDimensionHeader
from typing import Optional, Set
from typing_extensions import Self

class PivotHeader(BaseModel):
    """
    Dimensions' values in a single pivot.
    """ # noqa: E501
    pivot_dimension_headers: Optional[List[PivotDimensionHeader]] = Field(default=None, description="The size is the same as the cardinality of the corresponding dimension combinations.", alias="pivotDimensionHeaders")
    row_count: Optional[StrictInt] = Field(default=None, description="The cardinality of the pivot. The total number of rows for this pivot's fields regardless of how the parameters `offset` and `limit` are specified in the request.", alias="rowCount")
    __properties: ClassVar[List[str]] = ["pivotDimensionHeaders", "rowCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PivotHeader from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in pivot_dimension_headers (list)
        _items = []
        if self.pivot_dimension_headers:
            for _item_pivot_dimension_headers in self.pivot_dimension_headers:
                if _item_pivot_dimension_headers:
                    _items.append(_item_pivot_dimension_headers.to_dict())
            _dict['pivotDimensionHeaders'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PivotHeader from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pivotDimensionHeaders": [PivotDimensionHeader.from_dict(_item) for _item in obj["pivotDimensionHeaders"]] if obj.get("pivotDimensionHeaders") is not None else None,
            "rowCount": obj.get("rowCount")
        })
        return _obj



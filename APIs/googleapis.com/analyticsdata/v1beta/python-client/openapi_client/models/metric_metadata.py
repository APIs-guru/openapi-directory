# coding: utf-8

"""
    Google Analytics Data API

    Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MetricMetadata(BaseModel):
    """
    Explains a metric.
    """ # noqa: E501
    api_name: Optional[StrictStr] = Field(default=None, description="A metric name. Useable in [Metric](#Metric)'s `name`. For example, `eventCount`.", alias="apiName")
    blocked_reasons: Optional[List[StrictStr]] = Field(default=None, description="If reasons are specified, your access is blocked to this metric for this property. API requests from you to this property for this metric will succeed; however, the report will contain only zeros for this metric. API requests with metric filters on blocked metrics will fail. If reasons are empty, you have access to this metric. To learn more, see [Access and data-restriction management](https://support.google.com/analytics/answer/10851388).", alias="blockedReasons")
    category: Optional[StrictStr] = Field(default=None, description="The display name of the category that this metrics belongs to. Similar dimensions and metrics are categorized together.")
    custom_definition: Optional[StrictBool] = Field(default=None, description="True if the metric is a custom metric for this property.", alias="customDefinition")
    deprecated_api_names: Optional[List[StrictStr]] = Field(default=None, description="Still usable but deprecated names for this metric. If populated, this metric is available by either `apiName` or one of `deprecatedApiNames` for a period of time. After the deprecation period, the metric will be available only by `apiName`.", alias="deprecatedApiNames")
    description: Optional[StrictStr] = Field(default=None, description="Description of how this metric is used and calculated.")
    expression: Optional[StrictStr] = Field(default=None, description="The mathematical expression for this derived metric. Can be used in [Metric](#Metric)'s `expression` field for equivalent reports. Most metrics are not expressions, and for non-expressions, this field is empty.")
    type: Optional[StrictStr] = Field(default=None, description="The type of this metric.")
    ui_name: Optional[StrictStr] = Field(default=None, description="This metric's name within the Google Analytics user interface. For example, `Event count`.", alias="uiName")
    __properties: ClassVar[List[str]] = ["apiName", "blockedReasons", "category", "customDefinition", "deprecatedApiNames", "description", "expression", "type", "uiName"]

    @field_validator('blocked_reasons')
    def blocked_reasons_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['BLOCKED_REASON_UNSPECIFIED', 'NO_REVENUE_METRICS', 'NO_COST_METRICS']):
                raise ValueError("each list item must be one of ('BLOCKED_REASON_UNSPECIFIED', 'NO_REVENUE_METRICS', 'NO_COST_METRICS')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['METRIC_TYPE_UNSPECIFIED', 'TYPE_INTEGER', 'TYPE_FLOAT', 'TYPE_SECONDS', 'TYPE_MILLISECONDS', 'TYPE_MINUTES', 'TYPE_HOURS', 'TYPE_STANDARD', 'TYPE_CURRENCY', 'TYPE_FEET', 'TYPE_MILES', 'TYPE_METERS', 'TYPE_KILOMETERS']):
            raise ValueError("must be one of enum values ('METRIC_TYPE_UNSPECIFIED', 'TYPE_INTEGER', 'TYPE_FLOAT', 'TYPE_SECONDS', 'TYPE_MILLISECONDS', 'TYPE_MINUTES', 'TYPE_HOURS', 'TYPE_STANDARD', 'TYPE_CURRENCY', 'TYPE_FEET', 'TYPE_MILES', 'TYPE_METERS', 'TYPE_KILOMETERS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetricMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetricMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiName": obj.get("apiName"),
            "blockedReasons": obj.get("blockedReasons"),
            "category": obj.get("category"),
            "customDefinition": obj.get("customDefinition"),
            "deprecatedApiNames": obj.get("deprecatedApiNames"),
            "description": obj.get("description"),
            "expression": obj.get("expression"),
            "type": obj.get("type"),
            "uiName": obj.get("uiName")
        })
        return _obj



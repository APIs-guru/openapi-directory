# coding: utf-8

"""
    Google Analytics Data API

    Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cohort_spec import CohortSpec
from openapi_client.models.date_range import DateRange
from openapi_client.models.dimension import Dimension
from openapi_client.models.filter_expression import FilterExpression
from openapi_client.models.metric import Metric
from openapi_client.models.pivot import Pivot
from typing import Optional, Set
from typing_extensions import Self

class RunPivotReportRequest(BaseModel):
    """
    The request to generate a pivot report.
    """ # noqa: E501
    cohort_spec: Optional[CohortSpec] = Field(default=None, alias="cohortSpec")
    currency_code: Optional[StrictStr] = Field(default=None, description="A currency code in ISO4217 format, such as \"AED\", \"USD\", \"JPY\". If the field is empty, the report uses the property's default currency.", alias="currencyCode")
    date_ranges: Optional[List[DateRange]] = Field(default=None, description="The date range to retrieve event data for the report. If multiple date ranges are specified, event data from each date range is used in the report. A special dimension with field name \"dateRange\" can be included in a Pivot's field names; if included, the report compares between date ranges. In a cohort request, this `dateRanges` must be unspecified.", alias="dateRanges")
    dimension_filter: Optional[FilterExpression] = Field(default=None, alias="dimensionFilter")
    dimensions: Optional[List[Dimension]] = Field(default=None, description="The dimensions requested. All defined dimensions must be used by one of the following: dimension_expression, dimension_filter, pivots, order_bys.")
    keep_empty_rows: Optional[StrictBool] = Field(default=None, description="If false or unspecified, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter. Regardless of this `keep_empty_rows` setting, only data recorded by the Google Analytics (GA4) property can be displayed in a report. For example if a property never logs a `purchase` event, then a query for the `eventName` dimension and `eventCount` metric will not have a row eventName: \"purchase\" and eventCount: 0.", alias="keepEmptyRows")
    metric_filter: Optional[FilterExpression] = Field(default=None, alias="metricFilter")
    metrics: Optional[List[Metric]] = Field(default=None, description="The metrics requested, at least one metric needs to be specified. All defined metrics must be used by one of the following: metric_expression, metric_filter, order_bys.")
    pivots: Optional[List[Pivot]] = Field(default=None, description="Describes the visual format of the report's dimensions in columns or rows. The union of the fieldNames (dimension names) in all pivots must be a subset of dimension names defined in Dimensions. No two pivots can share a dimension. A dimension is only visible if it appears in a pivot.")
    var_property: Optional[StrictStr] = Field(default=None, description="A Google Analytics GA4 property identifier whose events are tracked. Specified in the URL path and not the body. To learn more, see [where to find your Property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). Within a batch request, this property should either be unspecified or consistent with the batch-level property. Example: properties/1234", alias="property")
    return_property_quota: Optional[StrictBool] = Field(default=None, description="Toggles whether to return the current state of this Analytics Property's quota. Quota is returned in [PropertyQuota](#PropertyQuota).", alias="returnPropertyQuota")
    __properties: ClassVar[List[str]] = ["cohortSpec", "currencyCode", "dateRanges", "dimensionFilter", "dimensions", "keepEmptyRows", "metricFilter", "metrics", "pivots", "property", "returnPropertyQuota"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunPivotReportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cohort_spec
        if self.cohort_spec:
            _dict['cohortSpec'] = self.cohort_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in date_ranges (list)
        _items = []
        if self.date_ranges:
            for _item_date_ranges in self.date_ranges:
                if _item_date_ranges:
                    _items.append(_item_date_ranges.to_dict())
            _dict['dateRanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of dimension_filter
        if self.dimension_filter:
            _dict['dimensionFilter'] = self.dimension_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dimensions (list)
        _items = []
        if self.dimensions:
            for _item_dimensions in self.dimensions:
                if _item_dimensions:
                    _items.append(_item_dimensions.to_dict())
            _dict['dimensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of metric_filter
        if self.metric_filter:
            _dict['metricFilter'] = self.metric_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['metrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pivots (list)
        _items = []
        if self.pivots:
            for _item_pivots in self.pivots:
                if _item_pivots:
                    _items.append(_item_pivots.to_dict())
            _dict['pivots'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunPivotReportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cohortSpec": CohortSpec.from_dict(obj["cohortSpec"]) if obj.get("cohortSpec") is not None else None,
            "currencyCode": obj.get("currencyCode"),
            "dateRanges": [DateRange.from_dict(_item) for _item in obj["dateRanges"]] if obj.get("dateRanges") is not None else None,
            "dimensionFilter": FilterExpression.from_dict(obj["dimensionFilter"]) if obj.get("dimensionFilter") is not None else None,
            "dimensions": [Dimension.from_dict(_item) for _item in obj["dimensions"]] if obj.get("dimensions") is not None else None,
            "keepEmptyRows": obj.get("keepEmptyRows"),
            "metricFilter": FilterExpression.from_dict(obj["metricFilter"]) if obj.get("metricFilter") is not None else None,
            "metrics": [Metric.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None,
            "pivots": [Pivot.from_dict(_item) for _item in obj["pivots"]] if obj.get("pivots") is not None else None,
            "property": obj.get("property"),
            "returnPropertyQuota": obj.get("returnPropertyQuota")
        })
        return _obj



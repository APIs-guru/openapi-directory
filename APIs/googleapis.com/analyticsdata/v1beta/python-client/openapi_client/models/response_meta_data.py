# coding: utf-8

"""
    Google Analytics Data API

    Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sampling_metadata import SamplingMetadata
from openapi_client.models.schema_restriction_response import SchemaRestrictionResponse
from typing import Optional, Set
from typing_extensions import Self

class ResponseMetaData(BaseModel):
    """
    Response's metadata carrying additional information about the report content.
    """ # noqa: E501
    currency_code: Optional[StrictStr] = Field(default=None, description="The currency code used in this report. Intended to be used in formatting currency metrics like `purchaseRevenue` for visualization. If currency_code was specified in the request, this response parameter will echo the request parameter; otherwise, this response parameter is the property's current currency_code. Currency codes are string encodings of currency types from the ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217); for example \"USD\", \"EUR\", \"JPY\". To learn more, see https://support.google.com/analytics/answer/9796179.", alias="currencyCode")
    data_loss_from_other_row: Optional[StrictBool] = Field(default=None, description="If true, indicates some buckets of dimension combinations are rolled into \"(other)\" row. This can happen for high cardinality reports. The metadata parameter dataLossFromOtherRow is populated based on the aggregated data table used in the report. The parameter will be accurately populated regardless of the filters and limits in the report. For example, the (other) row could be dropped from the report because the request contains a filter on sessionSource = google. This parameter will still be populated if data loss from other row was present in the input aggregate data used to generate this report. To learn more, see [About the (other) row and data sampling](https://support.google.com/analytics/answer/13208658#reports).", alias="dataLossFromOtherRow")
    empty_reason: Optional[StrictStr] = Field(default=None, description="If empty reason is specified, the report is empty for this reason.", alias="emptyReason")
    sampling_metadatas: Optional[List[SamplingMetadata]] = Field(default=None, description="If this report results is [sampled](https://support.google.com/analytics/answer/13331292), this describes the percentage of events used in this report. One `samplingMetadatas` is populated for each date range. Each `samplingMetadatas` corresponds to a date range in order that date ranges were specified in the request. However if the results are not sampled, this field will not be defined.", alias="samplingMetadatas")
    schema_restriction_response: Optional[SchemaRestrictionResponse] = Field(default=None, alias="schemaRestrictionResponse")
    subject_to_thresholding: Optional[StrictBool] = Field(default=None, description="If `subjectToThresholding` is true, this report is subject to thresholding and only returns data that meets the minimum aggregation thresholds. It is possible for a request to be subject to thresholding thresholding and no data is absent from the report, and this happens when all data is above the thresholds. To learn more, see [Data thresholds](https://support.google.com/analytics/answer/9383630).", alias="subjectToThresholding")
    time_zone: Optional[StrictStr] = Field(default=None, description="The property's current timezone. Intended to be used to interpret time-based dimensions like `hour` and `minute`. Formatted as strings from the IANA Time Zone database (https://www.iana.org/time-zones); for example \"America/New_York\" or \"Asia/Tokyo\".", alias="timeZone")
    __properties: ClassVar[List[str]] = ["currencyCode", "dataLossFromOtherRow", "emptyReason", "samplingMetadatas", "schemaRestrictionResponse", "subjectToThresholding", "timeZone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponseMetaData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sampling_metadatas (list)
        _items = []
        if self.sampling_metadatas:
            for _item_sampling_metadatas in self.sampling_metadatas:
                if _item_sampling_metadatas:
                    _items.append(_item_sampling_metadatas.to_dict())
            _dict['samplingMetadatas'] = _items
        # override the default output from pydantic by calling `to_dict()` of schema_restriction_response
        if self.schema_restriction_response:
            _dict['schemaRestrictionResponse'] = self.schema_restriction_response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponseMetaData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currencyCode": obj.get("currencyCode"),
            "dataLossFromOtherRow": obj.get("dataLossFromOtherRow"),
            "emptyReason": obj.get("emptyReason"),
            "samplingMetadatas": [SamplingMetadata.from_dict(_item) for _item in obj["samplingMetadatas"]] if obj.get("samplingMetadatas") is not None else None,
            "schemaRestrictionResponse": SchemaRestrictionResponse.from_dict(obj["schemaRestrictionResponse"]) if obj.get("schemaRestrictionResponse") is not None else None,
            "subjectToThresholding": obj.get("subjectToThresholding"),
            "timeZone": obj.get("timeZone")
        })
        return _obj



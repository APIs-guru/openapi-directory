# coding: utf-8

"""
    Google Analytics Data API

    Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.audience_export import AudienceExport
from openapi_client.models.v1beta_audience_row import V1betaAudienceRow
from typing import Optional, Set
from typing_extensions import Self

class QueryAudienceExportResponse(BaseModel):
    """
    A list of users in an audience export.
    """ # noqa: E501
    audience_export: Optional[AudienceExport] = Field(default=None, alias="audienceExport")
    audience_rows: Optional[List[V1betaAudienceRow]] = Field(default=None, description="Rows for each user in an audience export. The number of rows in this response will be less than or equal to request's page size.", alias="audienceRows")
    row_count: Optional[StrictInt] = Field(default=None, description="The total number of rows in the AudienceExport result. `rowCount` is independent of the number of rows returned in the response, the `limit` request parameter, and the `offset` request parameter. For example if a query returns 175 rows and includes `limit` of 50 in the API request, the response will contain `rowCount` of 175 but only 50 rows. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).", alias="rowCount")
    __properties: ClassVar[List[str]] = ["audienceExport", "audienceRows", "rowCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryAudienceExportResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audience_export
        if self.audience_export:
            _dict['audienceExport'] = self.audience_export.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in audience_rows (list)
        _items = []
        if self.audience_rows:
            for _item_audience_rows in self.audience_rows:
                if _item_audience_rows:
                    _items.append(_item_audience_rows.to_dict())
            _dict['audienceRows'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryAudienceExportResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audienceExport": AudienceExport.from_dict(obj["audienceExport"]) if obj.get("audienceExport") is not None else None,
            "audienceRows": [V1betaAudienceRow.from_dict(_item) for _item in obj["audienceRows"]] if obj.get("audienceRows") is not None else None,
            "rowCount": obj.get("rowCount")
        })
        return _obj



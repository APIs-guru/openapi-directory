# coding: utf-8

"""
    Google Analytics Data API

    Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimension import Dimension
from openapi_client.models.filter_expression import FilterExpression
from openapi_client.models.metric import Metric
from openapi_client.models.minute_range import MinuteRange
from openapi_client.models.order_by import OrderBy
from typing import Optional, Set
from typing_extensions import Self

class RunRealtimeReportRequest(BaseModel):
    """
    The request to generate a realtime report.
    """ # noqa: E501
    dimension_filter: Optional[FilterExpression] = Field(default=None, alias="dimensionFilter")
    dimensions: Optional[List[Dimension]] = Field(default=None, description="The dimensions requested and displayed.")
    limit: Optional[StrictStr] = Field(default=None, description="The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a maximum of 250,000 rows per request, no matter how many you ask for. `limit` must be positive. The API can also return fewer rows than the requested `limit`, if there aren't as many dimension values as the `limit`. For instance, there are fewer than 300 possible values for the dimension `country`, so when reporting on only `country`, you can't get more than 300 rows, even if you set `limit` to a higher value.")
    metric_aggregations: Optional[List[StrictStr]] = Field(default=None, description="Aggregation of metrics. Aggregated metric values will be shown in rows where the dimension_values are set to \"RESERVED_(MetricAggregation)\".", alias="metricAggregations")
    metric_filter: Optional[FilterExpression] = Field(default=None, alias="metricFilter")
    metrics: Optional[List[Metric]] = Field(default=None, description="The metrics requested and displayed.")
    minute_ranges: Optional[List[MinuteRange]] = Field(default=None, description="The minute ranges of event data to read. If unspecified, one minute range for the last 30 minutes will be used. If multiple minute ranges are requested, each response row will contain a zero based minute range index. If two minute ranges overlap, the event data for the overlapping minutes is included in the response rows for both minute ranges.", alias="minuteRanges")
    order_bys: Optional[List[OrderBy]] = Field(default=None, description="Specifies how rows are ordered in the response.", alias="orderBys")
    return_property_quota: Optional[StrictBool] = Field(default=None, description="Toggles whether to return the current state of this Analytics Property's Realtime quota. Quota is returned in [PropertyQuota](#PropertyQuota).", alias="returnPropertyQuota")
    __properties: ClassVar[List[str]] = ["dimensionFilter", "dimensions", "limit", "metricAggregations", "metricFilter", "metrics", "minuteRanges", "orderBys", "returnPropertyQuota"]

    @field_validator('metric_aggregations')
    def metric_aggregations_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['METRIC_AGGREGATION_UNSPECIFIED', 'TOTAL', 'MINIMUM', 'MAXIMUM', 'COUNT']):
                raise ValueError("each list item must be one of ('METRIC_AGGREGATION_UNSPECIFIED', 'TOTAL', 'MINIMUM', 'MAXIMUM', 'COUNT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunRealtimeReportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dimension_filter
        if self.dimension_filter:
            _dict['dimensionFilter'] = self.dimension_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dimensions (list)
        _items = []
        if self.dimensions:
            for _item_dimensions in self.dimensions:
                if _item_dimensions:
                    _items.append(_item_dimensions.to_dict())
            _dict['dimensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of metric_filter
        if self.metric_filter:
            _dict['metricFilter'] = self.metric_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['metrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in minute_ranges (list)
        _items = []
        if self.minute_ranges:
            for _item_minute_ranges in self.minute_ranges:
                if _item_minute_ranges:
                    _items.append(_item_minute_ranges.to_dict())
            _dict['minuteRanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_bys (list)
        _items = []
        if self.order_bys:
            for _item_order_bys in self.order_bys:
                if _item_order_bys:
                    _items.append(_item_order_bys.to_dict())
            _dict['orderBys'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunRealtimeReportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dimensionFilter": FilterExpression.from_dict(obj["dimensionFilter"]) if obj.get("dimensionFilter") is not None else None,
            "dimensions": [Dimension.from_dict(_item) for _item in obj["dimensions"]] if obj.get("dimensions") is not None else None,
            "limit": obj.get("limit"),
            "metricAggregations": obj.get("metricAggregations"),
            "metricFilter": FilterExpression.from_dict(obj["metricFilter"]) if obj.get("metricFilter") is not None else None,
            "metrics": [Metric.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None,
            "minuteRanges": [MinuteRange.from_dict(_item) for _item in obj["minuteRanges"]] if obj.get("minuteRanges") is not None else None,
            "orderBys": [OrderBy.from_dict(_item) for _item in obj["orderBys"]] if obj.get("orderBys") is not None else None,
            "returnPropertyQuota": obj.get("returnPropertyQuota")
        })
        return _obj



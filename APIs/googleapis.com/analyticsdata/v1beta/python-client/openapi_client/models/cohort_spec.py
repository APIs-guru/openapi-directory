# coding: utf-8

"""
    Google Analytics Data API

    Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cohort import Cohort
from openapi_client.models.cohort_report_settings import CohortReportSettings
from openapi_client.models.cohorts_range import CohortsRange
from typing import Optional, Set
from typing_extensions import Self

class CohortSpec(BaseModel):
    """
    The specification of cohorts for a cohort report. Cohort reports create a time series of user retention for the cohort. For example, you could select the cohort of users that were acquired in the first week of September and follow that cohort for the next six weeks. Selecting the users acquired in the first week of September cohort is specified in the `cohort` object. Following that cohort for the next six weeks is specified in the `cohortsRange` object. For examples, see [Cohort Report Examples](https://developers.google.com/analytics/devguides/reporting/data/v1/advanced#cohort_report_examples). The report response could show a weekly time series where say your app has retained 60% of this cohort after three weeks and 25% of this cohort after six weeks. These two percentages can be calculated by the metric `cohortActiveUsers/cohortTotalUsers` and will be separate rows in the report.
    """ # noqa: E501
    cohort_report_settings: Optional[CohortReportSettings] = Field(default=None, alias="cohortReportSettings")
    cohorts: Optional[List[Cohort]] = Field(default=None, description="Defines the selection criteria to group users into cohorts. Most cohort reports define only a single cohort. If multiple cohorts are specified, each cohort can be recognized in the report by their name.")
    cohorts_range: Optional[CohortsRange] = Field(default=None, alias="cohortsRange")
    __properties: ClassVar[List[str]] = ["cohortReportSettings", "cohorts", "cohortsRange"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CohortSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cohort_report_settings
        if self.cohort_report_settings:
            _dict['cohortReportSettings'] = self.cohort_report_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in cohorts (list)
        _items = []
        if self.cohorts:
            for _item_cohorts in self.cohorts:
                if _item_cohorts:
                    _items.append(_item_cohorts.to_dict())
            _dict['cohorts'] = _items
        # override the default output from pydantic by calling `to_dict()` of cohorts_range
        if self.cohorts_range:
            _dict['cohortsRange'] = self.cohorts_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CohortSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cohortReportSettings": CohortReportSettings.from_dict(obj["cohortReportSettings"]) if obj.get("cohortReportSettings") is not None else None,
            "cohorts": [Cohort.from_dict(_item) for _item in obj["cohorts"]] if obj.get("cohorts") is not None else None,
            "cohortsRange": CohortsRange.from_dict(obj["cohortsRange"]) if obj.get("cohortsRange") is not None else None
        })
        return _obj



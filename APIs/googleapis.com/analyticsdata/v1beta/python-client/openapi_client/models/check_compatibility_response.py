# coding: utf-8

"""
    Google Analytics Data API

    Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimension_compatibility import DimensionCompatibility
from openapi_client.models.metric_compatibility import MetricCompatibility
from typing import Optional, Set
from typing_extensions import Self

class CheckCompatibilityResponse(BaseModel):
    """
    The compatibility response with the compatibility of each dimension & metric.
    """ # noqa: E501
    dimension_compatibilities: Optional[List[DimensionCompatibility]] = Field(default=None, description="The compatibility of each dimension.", alias="dimensionCompatibilities")
    metric_compatibilities: Optional[List[MetricCompatibility]] = Field(default=None, description="The compatibility of each metric.", alias="metricCompatibilities")
    __properties: ClassVar[List[str]] = ["dimensionCompatibilities", "metricCompatibilities"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckCompatibilityResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dimension_compatibilities (list)
        _items = []
        if self.dimension_compatibilities:
            for _item_dimension_compatibilities in self.dimension_compatibilities:
                if _item_dimension_compatibilities:
                    _items.append(_item_dimension_compatibilities.to_dict())
            _dict['dimensionCompatibilities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metric_compatibilities (list)
        _items = []
        if self.metric_compatibilities:
            for _item_metric_compatibilities in self.metric_compatibilities:
                if _item_metric_compatibilities:
                    _items.append(_item_metric_compatibilities.to_dict())
            _dict['metricCompatibilities'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckCompatibilityResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dimensionCompatibilities": [DimensionCompatibility.from_dict(_item) for _item in obj["dimensionCompatibilities"]] if obj.get("dimensionCompatibilities") is not None else None,
            "metricCompatibilities": [MetricCompatibility.from_dict(_item) for _item in obj["metricCompatibilities"]] if obj.get("metricCompatibilities") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Analytics Data API

    Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.v1beta_audience_dimension import V1betaAudienceDimension
from typing import Optional, Set
from typing_extensions import Self

class AudienceExport(BaseModel):
    """
    An audience export is a list of users in an audience at the time of the list's creation. One audience may have multiple audience exports created for different days.
    """ # noqa: E501
    audience: Optional[StrictStr] = Field(default=None, description="Required. The audience resource name. This resource name identifies the audience being listed and is shared between the Analytics Data & Admin APIs. Format: `properties/{property}/audiences/{audience}`")
    audience_display_name: Optional[StrictStr] = Field(default=None, description="Output only. The descriptive display name for this audience. For example, \"Purchasers\".", alias="audienceDisplayName")
    begin_creating_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when CreateAudienceExport was called and the AudienceExport began the `CREATING` state.", alias="beginCreatingTime")
    creation_quota_tokens_charged: Optional[StrictInt] = Field(default=None, description="Output only. The total quota tokens charged during creation of the AudienceExport. Because this token count is based on activity from the `CREATING` state, this tokens charged will be fixed once an AudienceExport enters the `ACTIVE` or `FAILED` states.", alias="creationQuotaTokensCharged")
    dimensions: Optional[List[V1betaAudienceDimension]] = Field(default=None, description="Required. The dimensions requested and displayed in the query response.")
    error_message: Optional[StrictStr] = Field(default=None, description="Output only. Error message is populated when an audience export fails during creation. A common reason for such a failure is quota exhaustion.", alias="errorMessage")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Identifier. The audience export resource name assigned during creation. This resource name identifies this `AudienceExport`. Format: `properties/{property}/audienceExports/{audience_export}`")
    percentage_completed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. The percentage completed for this audience export ranging between 0 to 100.", alias="percentageCompleted")
    row_count: Optional[StrictInt] = Field(default=None, description="Output only. The total number of rows in the AudienceExport result.", alias="rowCount")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state for this AudienceExport.")
    __properties: ClassVar[List[str]] = ["audience", "audienceDisplayName", "beginCreatingTime", "creationQuotaTokensCharged", "dimensions", "errorMessage", "name", "percentageCompleted", "rowCount", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'FAILED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AudienceExport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "audience_display_name",
            "begin_creating_time",
            "creation_quota_tokens_charged",
            "error_message",
            "name",
            "percentage_completed",
            "row_count",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dimensions (list)
        _items = []
        if self.dimensions:
            for _item_dimensions in self.dimensions:
                if _item_dimensions:
                    _items.append(_item_dimensions.to_dict())
            _dict['dimensions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AudienceExport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audience": obj.get("audience"),
            "audienceDisplayName": obj.get("audienceDisplayName"),
            "beginCreatingTime": obj.get("beginCreatingTime"),
            "creationQuotaTokensCharged": obj.get("creationQuotaTokensCharged"),
            "dimensions": [V1betaAudienceDimension.from_dict(_item) for _item in obj["dimensions"]] if obj.get("dimensions") is not None else None,
            "errorMessage": obj.get("errorMessage"),
            "name": obj.get("name"),
            "percentageCompleted": obj.get("percentageCompleted"),
            "rowCount": obj.get("rowCount"),
            "state": obj.get("state")
        })
        return _obj



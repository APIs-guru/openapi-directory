# coding: utf-8

"""
    Google Analytics Data API

    Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DimensionMetadata(BaseModel):
    """
    Explains a dimension.
    """ # noqa: E501
    api_name: Optional[StrictStr] = Field(default=None, description="This dimension's name. Useable in [Dimension](#Dimension)'s `name`. For example, `eventName`.", alias="apiName")
    category: Optional[StrictStr] = Field(default=None, description="The display name of the category that this dimension belongs to. Similar dimensions and metrics are categorized together.")
    custom_definition: Optional[StrictBool] = Field(default=None, description="True if the dimension is custom to this property. This includes user, event, & item scoped custom dimensions; to learn more about custom dimensions, see https://support.google.com/analytics/answer/14240153. This also include custom channel groups; to learn more about custom channel groups, see https://support.google.com/analytics/answer/13051316.", alias="customDefinition")
    deprecated_api_names: Optional[List[StrictStr]] = Field(default=None, description="Still usable but deprecated names for this dimension. If populated, this dimension is available by either `apiName` or one of `deprecatedApiNames` for a period of time. After the deprecation period, the dimension will be available only by `apiName`.", alias="deprecatedApiNames")
    description: Optional[StrictStr] = Field(default=None, description="Description of how this dimension is used and calculated.")
    ui_name: Optional[StrictStr] = Field(default=None, description="This dimension's name within the Google Analytics user interface. For example, `Event name`.", alias="uiName")
    __properties: ClassVar[List[str]] = ["apiName", "category", "customDefinition", "deprecatedApiNames", "description", "uiName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DimensionMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DimensionMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiName": obj.get("apiName"),
            "category": obj.get("category"),
            "customDefinition": obj.get("customDefinition"),
            "deprecatedApiNames": obj.get("deprecatedApiNames"),
            "description": obj.get("description"),
            "uiName": obj.get("uiName")
        })
        return _obj



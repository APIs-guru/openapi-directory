# coding: utf-8

"""
    Google Play Game Services

    The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.snapshot_image import SnapshotImage
from typing import Optional, Set
from typing_extensions import Self

class Snapshot(BaseModel):
    """
    An snapshot object.
    """ # noqa: E501
    cover_image: Optional[SnapshotImage] = Field(default=None, alias="coverImage")
    description: Optional[StrictStr] = Field(default=None, description="The description of this snapshot.")
    drive_id: Optional[StrictStr] = Field(default=None, description="The ID of the file underlying this snapshot in the Drive API. Only present if the snapshot is a view on a Drive file and the file is owned by the caller.", alias="driveId")
    duration_millis: Optional[StrictStr] = Field(default=None, description="The duration associated with this snapshot, in millis.", alias="durationMillis")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the snapshot.")
    kind: Optional[StrictStr] = Field(default=None, description="Uniquely identifies the type of this resource. Value is always the fixed string `games#snapshot`.")
    last_modified_millis: Optional[StrictStr] = Field(default=None, description="The timestamp (in millis since Unix epoch) of the last modification to this snapshot.", alias="lastModifiedMillis")
    progress_value: Optional[StrictStr] = Field(default=None, description="The progress value (64-bit integer set by developer) associated with this snapshot.", alias="progressValue")
    title: Optional[StrictStr] = Field(default=None, description="The title of this snapshot.")
    type: Optional[StrictStr] = Field(default=None, description="The type of this snapshot.")
    unique_name: Optional[StrictStr] = Field(default=None, description="The unique name provided when the snapshot was created.", alias="uniqueName")
    __properties: ClassVar[List[str]] = ["coverImage", "description", "driveId", "durationMillis", "id", "kind", "lastModifiedMillis", "progressValue", "title", "type", "uniqueName"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SAVE_GAME']):
            raise ValueError("must be one of enum values ('SAVE_GAME')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Snapshot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cover_image
        if self.cover_image:
            _dict['coverImage'] = self.cover_image.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Snapshot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coverImage": SnapshotImage.from_dict(obj["coverImage"]) if obj.get("coverImage") is not None else None,
            "description": obj.get("description"),
            "driveId": obj.get("driveId"),
            "durationMillis": obj.get("durationMillis"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "lastModifiedMillis": obj.get("lastModifiedMillis"),
            "progressValue": obj.get("progressValue"),
            "title": obj.get("title"),
            "type": obj.get("type"),
            "uniqueName": obj.get("uniqueName")
        })
        return _obj



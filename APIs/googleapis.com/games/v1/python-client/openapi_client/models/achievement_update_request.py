# coding: utf-8

"""
    Google Play Game Services

    The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.games_achievement_increment import GamesAchievementIncrement
from openapi_client.models.games_achievement_set_steps_at_least import GamesAchievementSetStepsAtLeast
from typing import Optional, Set
from typing_extensions import Self

class AchievementUpdateRequest(BaseModel):
    """
    A request to update an achievement.
    """ # noqa: E501
    achievement_id: Optional[StrictStr] = Field(default=None, description="The achievement this update is being applied to.", alias="achievementId")
    increment_payload: Optional[GamesAchievementIncrement] = Field(default=None, alias="incrementPayload")
    kind: Optional[StrictStr] = Field(default=None, description="Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateRequest`.")
    set_steps_at_least_payload: Optional[GamesAchievementSetStepsAtLeast] = Field(default=None, alias="setStepsAtLeastPayload")
    update_type: Optional[StrictStr] = Field(default=None, description="The type of update being applied.", alias="updateType")
    __properties: ClassVar[List[str]] = ["achievementId", "incrementPayload", "kind", "setStepsAtLeastPayload", "updateType"]

    @field_validator('update_type')
    def update_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REVEAL', 'UNLOCK', 'INCREMENT', 'SET_STEPS_AT_LEAST']):
            raise ValueError("must be one of enum values ('REVEAL', 'UNLOCK', 'INCREMENT', 'SET_STEPS_AT_LEAST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AchievementUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of increment_payload
        if self.increment_payload:
            _dict['incrementPayload'] = self.increment_payload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of set_steps_at_least_payload
        if self.set_steps_at_least_payload:
            _dict['setStepsAtLeastPayload'] = self.set_steps_at_least_payload.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AchievementUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "achievementId": obj.get("achievementId"),
            "incrementPayload": GamesAchievementIncrement.from_dict(obj["incrementPayload"]) if obj.get("incrementPayload") is not None else None,
            "kind": obj.get("kind"),
            "setStepsAtLeastPayload": GamesAchievementSetStepsAtLeast.from_dict(obj["setStepsAtLeastPayload"]) if obj.get("setStepsAtLeastPayload") is not None else None,
            "updateType": obj.get("updateType")
        })
        return _obj



# coding: utf-8

"""
    Google Play Game Services

    The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.instance_android_details import InstanceAndroidDetails
from openapi_client.models.instance_ios_details import InstanceIosDetails
from openapi_client.models.instance_web_details import InstanceWebDetails
from typing import Optional, Set
from typing_extensions import Self

class Instance(BaseModel):
    """
    The Instance resource.
    """ # noqa: E501
    acquisition_uri: Optional[StrictStr] = Field(default=None, description="URI which shows where a user can acquire this instance.", alias="acquisitionUri")
    android_instance: Optional[InstanceAndroidDetails] = Field(default=None, alias="androidInstance")
    ios_instance: Optional[InstanceIosDetails] = Field(default=None, alias="iosInstance")
    kind: Optional[StrictStr] = Field(default=None, description="Uniquely identifies the type of this resource. Value is always the fixed string `games#instance`.")
    name: Optional[StrictStr] = Field(default=None, description="Localized display name.")
    platform_type: Optional[StrictStr] = Field(default=None, description="The platform type.", alias="platformType")
    realtime_play: Optional[StrictBool] = Field(default=None, description="Flag to show if this game instance supports realtime play.", alias="realtimePlay")
    turn_based_play: Optional[StrictBool] = Field(default=None, description="Flag to show if this game instance supports turn based play.", alias="turnBasedPlay")
    web_instance: Optional[InstanceWebDetails] = Field(default=None, alias="webInstance")
    __properties: ClassVar[List[str]] = ["acquisitionUri", "androidInstance", "iosInstance", "kind", "name", "platformType", "realtimePlay", "turnBasedPlay", "webInstance"]

    @field_validator('platform_type')
    def platform_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ANDROID', 'IOS', 'WEB_APP']):
            raise ValueError("must be one of enum values ('ANDROID', 'IOS', 'WEB_APP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Instance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of android_instance
        if self.android_instance:
            _dict['androidInstance'] = self.android_instance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ios_instance
        if self.ios_instance:
            _dict['iosInstance'] = self.ios_instance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web_instance
        if self.web_instance:
            _dict['webInstance'] = self.web_instance.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Instance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acquisitionUri": obj.get("acquisitionUri"),
            "androidInstance": InstanceAndroidDetails.from_dict(obj["androidInstance"]) if obj.get("androidInstance") is not None else None,
            "iosInstance": InstanceIosDetails.from_dict(obj["iosInstance"]) if obj.get("iosInstance") is not None else None,
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "platformType": obj.get("platformType"),
            "realtimePlay": obj.get("realtimePlay"),
            "turnBasedPlay": obj.get("turnBasedPlay"),
            "webInstance": InstanceWebDetails.from_dict(obj["webInstance"]) if obj.get("webInstance") is not None else None
        })
        return _obj



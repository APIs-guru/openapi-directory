# coding: utf-8

"""
    Google Play Game Services

    The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AchievementDefinition(BaseModel):
    """
    An achievement definition object.
    """ # noqa: E501
    achievement_type: Optional[StrictStr] = Field(default=None, description="The type of the achievement.", alias="achievementType")
    description: Optional[StrictStr] = Field(default=None, description="The description of the achievement.")
    experience_points: Optional[StrictStr] = Field(default=None, description="Experience points which will be earned when unlocking this achievement.", alias="experiencePoints")
    formatted_total_steps: Optional[StrictStr] = Field(default=None, description="The total steps for an incremental achievement as a string.", alias="formattedTotalSteps")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the achievement.")
    initial_state: Optional[StrictStr] = Field(default=None, description="The initial state of the achievement.", alias="initialState")
    is_revealed_icon_url_default: Optional[StrictBool] = Field(default=None, description="Indicates whether the revealed icon image being returned is a default image, or is provided by the game.", alias="isRevealedIconUrlDefault")
    is_unlocked_icon_url_default: Optional[StrictBool] = Field(default=None, description="Indicates whether the unlocked icon image being returned is a default image, or is game-provided.", alias="isUnlockedIconUrlDefault")
    kind: Optional[StrictStr] = Field(default=None, description="Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementDefinition`.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the achievement.")
    revealed_icon_url: Optional[StrictStr] = Field(default=None, description="The image URL for the revealed achievement icon.", alias="revealedIconUrl")
    total_steps: Optional[StrictInt] = Field(default=None, description="The total steps for an incremental achievement.", alias="totalSteps")
    unlocked_icon_url: Optional[StrictStr] = Field(default=None, description="The image URL for the unlocked achievement icon.", alias="unlockedIconUrl")
    __properties: ClassVar[List[str]] = ["achievementType", "description", "experiencePoints", "formattedTotalSteps", "id", "initialState", "isRevealedIconUrlDefault", "isUnlockedIconUrlDefault", "kind", "name", "revealedIconUrl", "totalSteps", "unlockedIconUrl"]

    @field_validator('achievement_type')
    def achievement_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STANDARD', 'INCREMENTAL']):
            raise ValueError("must be one of enum values ('STANDARD', 'INCREMENTAL')")
        return value

    @field_validator('initial_state')
    def initial_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HIDDEN', 'REVEALED', 'UNLOCKED']):
            raise ValueError("must be one of enum values ('HIDDEN', 'REVEALED', 'UNLOCKED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AchievementDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AchievementDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "achievementType": obj.get("achievementType"),
            "description": obj.get("description"),
            "experiencePoints": obj.get("experiencePoints"),
            "formattedTotalSteps": obj.get("formattedTotalSteps"),
            "id": obj.get("id"),
            "initialState": obj.get("initialState"),
            "isRevealedIconUrlDefault": obj.get("isRevealedIconUrlDefault"),
            "isUnlockedIconUrlDefault": obj.get("isUnlockedIconUrlDefault"),
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "revealedIconUrl": obj.get("revealedIconUrl"),
            "totalSteps": obj.get("totalSteps"),
            "unlockedIconUrl": obj.get("unlockedIconUrl")
        })
        return _obj



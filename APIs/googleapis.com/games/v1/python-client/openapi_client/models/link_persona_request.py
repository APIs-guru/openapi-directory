# coding: utf-8

"""
    Google Play Game Services

    The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LinkPersonaRequest(BaseModel):
    """
    Request to link an in-game account with a PGS principal (encoded in the session id).
    """ # noqa: E501
    cardinality_constraint: Optional[StrictStr] = Field(default=None, description="Required. Cardinality constraint to observe when linking a persona to a player in the scope of a game.", alias="cardinalityConstraint")
    conflicting_links_resolution_policy: Optional[StrictStr] = Field(default=None, description="Required. Resolution policy to apply when the linking of a persona to a player would result in violating the specified cardinality constraint.", alias="conflictingLinksResolutionPolicy")
    expire_time: Optional[StrictStr] = Field(default=None, description="Input only. Optional expiration time.", alias="expireTime")
    persona: Optional[StrictStr] = Field(default=None, description="Required. Stable identifier of the in-game account. Please refrain from re-using the same persona for different games.")
    session_id: Optional[StrictStr] = Field(default=None, description="Required. Opaque server-generated string that encodes all the necessary information to identify the PGS player / Google user and application.", alias="sessionId")
    token: Optional[StrictStr] = Field(default=None, description="Required. Value of the token to create. Opaque to Play Games and assumed to be non-stable (encrypted with key rotation).")
    ttl: Optional[StrictStr] = Field(default=None, description="Input only. Optional time-to-live.")
    __properties: ClassVar[List[str]] = ["cardinalityConstraint", "conflictingLinksResolutionPolicy", "expireTime", "persona", "sessionId", "token", "ttl"]

    @field_validator('cardinality_constraint')
    def cardinality_constraint_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ONE_PERSONA_TO_ONE_PLAYER']):
            raise ValueError("must be one of enum values ('ONE_PERSONA_TO_ONE_PLAYER')")
        return value

    @field_validator('conflicting_links_resolution_policy')
    def conflicting_links_resolution_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KEEP_EXISTING_LINKS', 'CREATE_NEW_LINK']):
            raise ValueError("must be one of enum values ('KEEP_EXISTING_LINKS', 'CREATE_NEW_LINK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LinkPersonaRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LinkPersonaRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cardinalityConstraint": obj.get("cardinalityConstraint"),
            "conflictingLinksResolutionPolicy": obj.get("conflictingLinksResolutionPolicy"),
            "expireTime": obj.get("expireTime"),
            "persona": obj.get("persona"),
            "sessionId": obj.get("sessionId"),
            "token": obj.get("token"),
            "ttl": obj.get("ttl")
        })
        return _obj



# coding: utf-8

"""
    Google Play Game Services

    The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.event_child import EventChild
from typing import Optional, Set
from typing_extensions import Self

class EventDefinition(BaseModel):
    """
    An event definition resource.
    """ # noqa: E501
    child_events: Optional[List[EventChild]] = Field(default=None, description="A list of events that are a child of this event.", alias="childEvents")
    description: Optional[StrictStr] = Field(default=None, description="Description of what this event represents.")
    display_name: Optional[StrictStr] = Field(default=None, description="The name to display for the event.", alias="displayName")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the event.")
    image_url: Optional[StrictStr] = Field(default=None, description="The base URL for the image that represents the event.", alias="imageUrl")
    is_default_image_url: Optional[StrictBool] = Field(default=None, description="Indicates whether the icon image being returned is a default image, or is game-provided.", alias="isDefaultImageUrl")
    kind: Optional[StrictStr] = Field(default=None, description="Uniquely identifies the type of this resource. Value is always the fixed string `games#eventDefinition`.")
    visibility: Optional[StrictStr] = Field(default=None, description="The visibility of event being tracked in this definition.")
    __properties: ClassVar[List[str]] = ["childEvents", "description", "displayName", "id", "imageUrl", "isDefaultImageUrl", "kind", "visibility"]

    @field_validator('visibility')
    def visibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REVEALED', 'HIDDEN']):
            raise ValueError("must be one of enum values ('REVEALED', 'HIDDEN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in child_events (list)
        _items = []
        if self.child_events:
            for _item_child_events in self.child_events:
                if _item_child_events:
                    _items.append(_item_child_events.to_dict())
            _dict['childEvents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "childEvents": [EventChild.from_dict(_item) for _item in obj["childEvents"]] if obj.get("childEvents") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "id": obj.get("id"),
            "imageUrl": obj.get("imageUrl"),
            "isDefaultImageUrl": obj.get("isDefaultImageUrl"),
            "kind": obj.get("kind"),
            "visibility": obj.get("visibility")
        })
        return _obj



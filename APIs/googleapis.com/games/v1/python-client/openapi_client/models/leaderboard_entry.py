# coding: utf-8

"""
    Google Play Game Services

    The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.player import Player
from typing import Optional, Set
from typing_extensions import Self

class LeaderboardEntry(BaseModel):
    """
    The Leaderboard Entry resource.
    """ # noqa: E501
    formatted_score: Optional[StrictStr] = Field(default=None, description="The localized string for the numerical value of this score.", alias="formattedScore")
    formatted_score_rank: Optional[StrictStr] = Field(default=None, description="The localized string for the rank of this score for this leaderboard.", alias="formattedScoreRank")
    kind: Optional[StrictStr] = Field(default=None, description="Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardEntry`.")
    player: Optional[Player] = None
    score_rank: Optional[StrictStr] = Field(default=None, description="The rank of this score for this leaderboard.", alias="scoreRank")
    score_tag: Optional[StrictStr] = Field(default=None, description="Additional information about the score. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.", alias="scoreTag")
    score_value: Optional[StrictStr] = Field(default=None, description="The numerical value of this score.", alias="scoreValue")
    time_span: Optional[StrictStr] = Field(default=None, description="The time span of this high score.", alias="timeSpan")
    write_timestamp_millis: Optional[StrictStr] = Field(default=None, description="The timestamp at which this score was recorded, in milliseconds since the epoch in UTC.", alias="writeTimestampMillis")
    __properties: ClassVar[List[str]] = ["formattedScore", "formattedScoreRank", "kind", "player", "scoreRank", "scoreTag", "scoreValue", "timeSpan", "writeTimestampMillis"]

    @field_validator('time_span')
    def time_span_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALL_TIME', 'WEEKLY', 'DAILY']):
            raise ValueError("must be one of enum values ('ALL_TIME', 'WEEKLY', 'DAILY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LeaderboardEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of player
        if self.player:
            _dict['player'] = self.player.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LeaderboardEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "formattedScore": obj.get("formattedScore"),
            "formattedScoreRank": obj.get("formattedScoreRank"),
            "kind": obj.get("kind"),
            "player": Player.from_dict(obj["player"]) if obj.get("player") is not None else None,
            "scoreRank": obj.get("scoreRank"),
            "scoreTag": obj.get("scoreTag"),
            "scoreValue": obj.get("scoreValue"),
            "timeSpan": obj.get("timeSpan"),
            "writeTimestampMillis": obj.get("writeTimestampMillis")
        })
        return _obj



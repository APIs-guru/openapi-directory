# coding: utf-8

"""
    Google Play Game Services

    The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class StatsResponse(BaseModel):
    """
    A third party stats resource.
    """ # noqa: E501
    avg_session_length_minutes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average session length in minutes of the player. E.g., 1, 30, 60, ... . Not populated if there is not enough information.")
    churn_probability: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The probability of the player not returning to play the game in the next day. E.g., 0, 0.1, 0.5, ..., 1.0. Not populated if there is not enough information.")
    days_since_last_played: Optional[StrictInt] = Field(default=None, description="Number of days since the player last played this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.")
    high_spender_probability: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The probability of the player going to spend beyond a threshold amount of money. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information.")
    kind: Optional[StrictStr] = Field(default=None, description="Uniquely identifies the type of this resource. Value is always the fixed string `games#statsResponse`.")
    num_purchases: Optional[StrictInt] = Field(default=None, description="Number of in-app purchases made by the player in this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.")
    num_sessions: Optional[StrictInt] = Field(default=None, description="The approximate number of sessions of the player within the last 28 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.")
    num_sessions_percentile: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The approximation of the sessions percentile of the player within the last 30 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information.")
    spend_percentile: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The approximate spend percentile of the player in this game. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information.")
    spend_probability: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The probability of the player going to spend the game in the next seven days. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information.")
    total_spend_next_28_days: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The predicted amount of money that the player going to spend in the next 28 days. E.g., 1, 30, 60, ... . Not populated if there is not enough information.")
    __properties: ClassVar[List[str]] = ["avg_session_length_minutes", "churn_probability", "days_since_last_played", "high_spender_probability", "kind", "num_purchases", "num_sessions", "num_sessions_percentile", "spend_percentile", "spend_probability", "total_spend_next_28_days"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avg_session_length_minutes": obj.get("avg_session_length_minutes"),
            "churn_probability": obj.get("churn_probability"),
            "days_since_last_played": obj.get("days_since_last_played"),
            "high_spender_probability": obj.get("high_spender_probability"),
            "kind": obj.get("kind"),
            "num_purchases": obj.get("num_purchases"),
            "num_sessions": obj.get("num_sessions"),
            "num_sessions_percentile": obj.get("num_sessions_percentile"),
            "spend_percentile": obj.get("spend_percentile"),
            "spend_probability": obj.get("spend_probability"),
            "total_spend_next_28_days": obj.get("total_spend_next_28_days")
        })
        return _obj



# coding: utf-8

"""
    Google Play Game Services

    The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.player_level import PlayerLevel
from typing import Optional, Set
from typing_extensions import Self

class PlayerExperienceInfo(BaseModel):
    """
    1P/3P metadata about the player's experience.
    """ # noqa: E501
    current_experience_points: Optional[StrictStr] = Field(default=None, description="The current number of experience points for the player.", alias="currentExperiencePoints")
    current_level: Optional[PlayerLevel] = Field(default=None, alias="currentLevel")
    kind: Optional[StrictStr] = Field(default=None, description="Uniquely identifies the type of this resource. Value is always the fixed string `games#playerExperienceInfo`.")
    last_level_up_timestamp_millis: Optional[StrictStr] = Field(default=None, description="The timestamp when the player was leveled up, in millis since Unix epoch UTC.", alias="lastLevelUpTimestampMillis")
    next_level: Optional[PlayerLevel] = Field(default=None, alias="nextLevel")
    __properties: ClassVar[List[str]] = ["currentExperiencePoints", "currentLevel", "kind", "lastLevelUpTimestampMillis", "nextLevel"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlayerExperienceInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_level
        if self.current_level:
            _dict['currentLevel'] = self.current_level.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next_level
        if self.next_level:
            _dict['nextLevel'] = self.next_level.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlayerExperienceInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentExperiencePoints": obj.get("currentExperiencePoints"),
            "currentLevel": PlayerLevel.from_dict(obj["currentLevel"]) if obj.get("currentLevel") is not None else None,
            "kind": obj.get("kind"),
            "lastLevelUpTimestampMillis": obj.get("lastLevelUpTimestampMillis"),
            "nextLevel": PlayerLevel.from_dict(obj["nextLevel"]) if obj.get("nextLevel") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Play Game Services

    The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_player_id import ApplicationPlayerId
from typing import Optional, Set
from typing_extensions import Self

class GetMultipleApplicationPlayerIdsResponse(BaseModel):
    """
    Response message for GetMultipleApplicationPlayerIds rpc.
    """ # noqa: E501
    player_ids: Optional[List[ApplicationPlayerId]] = Field(default=None, description="Output only. The requested applications along with the scoped ids for tha player, if that player has an id for the application. If not, the application is not included in the response.", alias="playerIds")
    __properties: ClassVar[List[str]] = ["playerIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetMultipleApplicationPlayerIdsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "player_ids",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in player_ids (list)
        _items = []
        if self.player_ids:
            for _item_player_ids in self.player_ids:
                if _item_player_ids:
                    _items.append(_item_player_ids.to_dict())
            _dict['playerIds'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetMultipleApplicationPlayerIdsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "playerIds": [ApplicationPlayerId.from_dict(_item) for _item in obj["playerIds"]] if obj.get("playerIds") is not None else None
        })
        return _obj



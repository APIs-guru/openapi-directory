# coding: utf-8

"""
    Google Play Game Services

    The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_category import ApplicationCategory
from openapi_client.models.image_asset import ImageAsset
from openapi_client.models.instance import Instance
from typing import Optional, Set
from typing_extensions import Self

class Application(BaseModel):
    """
    The Application resource.
    """ # noqa: E501
    achievement_count: Optional[StrictInt] = Field(default=None, description="The number of achievements visible to the currently authenticated player.")
    assets: Optional[List[ImageAsset]] = Field(default=None, description="The assets of the application.")
    author: Optional[StrictStr] = Field(default=None, description="The author of the application.")
    category: Optional[ApplicationCategory] = None
    description: Optional[StrictStr] = Field(default=None, description="The description of the application.")
    enabled_features: Optional[List[StrictStr]] = Field(default=None, description="A list of features that have been enabled for the application.", alias="enabledFeatures")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the application.")
    instances: Optional[List[Instance]] = Field(default=None, description="The instances of the application.")
    kind: Optional[StrictStr] = Field(default=None, description="Uniquely identifies the type of this resource. Value is always the fixed string `games#application`.")
    last_updated_timestamp: Optional[StrictStr] = Field(default=None, description="The last updated timestamp of the application.", alias="lastUpdatedTimestamp")
    leaderboard_count: Optional[StrictInt] = Field(default=None, description="The number of leaderboards visible to the currently authenticated player.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the application.")
    theme_color: Optional[StrictStr] = Field(default=None, description="A hint to the client UI for what color to use as an app-themed color. The color is given as an RGB triplet (e.g. \"E0E0E0\").", alias="themeColor")
    __properties: ClassVar[List[str]] = ["achievement_count", "assets", "author", "category", "description", "enabledFeatures", "id", "instances", "kind", "lastUpdatedTimestamp", "leaderboard_count", "name", "themeColor"]

    @field_validator('enabled_features')
    def enabled_features_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['SNAPSHOTS']):
                raise ValueError("each list item must be one of ('SNAPSHOTS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Application from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assets (list)
        _items = []
        if self.assets:
            for _item_assets in self.assets:
                if _item_assets:
                    _items.append(_item_assets.to_dict())
            _dict['assets'] = _items
        # override the default output from pydantic by calling `to_dict()` of category
        if self.category:
            _dict['category'] = self.category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in instances (list)
        _items = []
        if self.instances:
            for _item_instances in self.instances:
                if _item_instances:
                    _items.append(_item_instances.to_dict())
            _dict['instances'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Application from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "achievement_count": obj.get("achievement_count"),
            "assets": [ImageAsset.from_dict(_item) for _item in obj["assets"]] if obj.get("assets") is not None else None,
            "author": obj.get("author"),
            "category": ApplicationCategory.from_dict(obj["category"]) if obj.get("category") is not None else None,
            "description": obj.get("description"),
            "enabledFeatures": obj.get("enabledFeatures"),
            "id": obj.get("id"),
            "instances": [Instance.from_dict(_item) for _item in obj["instances"]] if obj.get("instances") is not None else None,
            "kind": obj.get("kind"),
            "lastUpdatedTimestamp": obj.get("lastUpdatedTimestamp"),
            "leaderboard_count": obj.get("leaderboard_count"),
            "name": obj.get("name"),
            "themeColor": obj.get("themeColor")
        })
        return _obj



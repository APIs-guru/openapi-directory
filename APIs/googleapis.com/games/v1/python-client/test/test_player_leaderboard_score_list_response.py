# coding: utf-8

"""
    Google Play Game Services

    The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.player_leaderboard_score_list_response import PlayerLeaderboardScoreListResponse

class TestPlayerLeaderboardScoreListResponse(unittest.TestCase):
    """PlayerLeaderboardScoreListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PlayerLeaderboardScoreListResponse:
        """Test PlayerLeaderboardScoreListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PlayerLeaderboardScoreListResponse`
        """
        model = PlayerLeaderboardScoreListResponse()
        if include_optional:
            return PlayerLeaderboardScoreListResponse(
                items = [
                    openapi_client.models.player_leaderboard_score.PlayerLeaderboardScore(
                        friends_rank = openapi_client.models.leaderboard_score_rank.LeaderboardScoreRank(
                            formatted_num_scores = '', 
                            formatted_rank = '', 
                            kind = '', 
                            num_scores = '', 
                            rank = '', ), 
                        kind = '', 
                        leaderboard_id = '', 
                        public_rank = openapi_client.models.leaderboard_score_rank.LeaderboardScoreRank(
                            formatted_num_scores = '', 
                            formatted_rank = '', 
                            kind = '', 
                            num_scores = '', 
                            rank = '', ), 
                        score_string = '', 
                        score_tag = '', 
                        score_value = '', 
                        social_rank = , 
                        time_span = 'ALL_TIME', 
                        write_timestamp = '', )
                    ],
                kind = '',
                next_page_token = '',
                player = openapi_client.models.player.Player(
                    avatar_image_url = '', 
                    banner_url_landscape = '', 
                    banner_url_portrait = '', 
                    display_name = '', 
                    experience_info = openapi_client.models.player_experience_info.PlayerExperienceInfo(
                        current_experience_points = '', 
                        current_level = openapi_client.models.player_level.PlayerLevel(
                            kind = '', 
                            level = 56, 
                            max_experience_points = '', 
                            min_experience_points = '', ), 
                        kind = '', 
                        last_level_up_timestamp_millis = '', 
                        next_level = openapi_client.models.player_level.PlayerLevel(
                            kind = '', 
                            level = 56, 
                            max_experience_points = '', 
                            min_experience_points = '', ), ), 
                    friend_status = 'NO_RELATIONSHIP', 
                    game_player_id = '', 
                    kind = '', 
                    name = openapi_client.models.player_name.Player_name(
                        family_name = '', 
                        given_name = '', ), 
                    original_player_id = '', 
                    player_id = '', 
                    profile_settings = openapi_client.models.profile_settings.ProfileSettings(
                        friends_list_visibility = 'VISIBLE', 
                        kind = '', 
                        profile_visible = True, ), 
                    title = '', )
            )
        else:
            return PlayerLeaderboardScoreListResponse(
        )
        """

    def testPlayerLeaderboardScoreListResponse(self):
        """Test PlayerLeaderboardScoreListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

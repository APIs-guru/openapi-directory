# coding: utf-8

"""
    Google Play Game Services

    The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.player_leaderboard_score import PlayerLeaderboardScore

class TestPlayerLeaderboardScore(unittest.TestCase):
    """PlayerLeaderboardScore unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PlayerLeaderboardScore:
        """Test PlayerLeaderboardScore
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PlayerLeaderboardScore`
        """
        model = PlayerLeaderboardScore()
        if include_optional:
            return PlayerLeaderboardScore(
                friends_rank = openapi_client.models.leaderboard_score_rank.LeaderboardScoreRank(
                    formatted_num_scores = '', 
                    formatted_rank = '', 
                    kind = '', 
                    num_scores = '', 
                    rank = '', ),
                kind = '',
                leaderboard_id = '',
                public_rank = openapi_client.models.leaderboard_score_rank.LeaderboardScoreRank(
                    formatted_num_scores = '', 
                    formatted_rank = '', 
                    kind = '', 
                    num_scores = '', 
                    rank = '', ),
                score_string = '',
                score_tag = '',
                score_value = '',
                social_rank = openapi_client.models.leaderboard_score_rank.LeaderboardScoreRank(
                    formatted_num_scores = '', 
                    formatted_rank = '', 
                    kind = '', 
                    num_scores = '', 
                    rank = '', ),
                time_span = 'ALL_TIME',
                write_timestamp = ''
            )
        else:
            return PlayerLeaderboardScore(
        )
        """

    def testPlayerLeaderboardScore(self):
        """Test PlayerLeaderboardScore"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

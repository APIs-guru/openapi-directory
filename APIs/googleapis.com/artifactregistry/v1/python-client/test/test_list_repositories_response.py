# coding: utf-8

"""
    Artifact Registry API

    Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_repositories_response import ListRepositoriesResponse

class TestListRepositoriesResponse(unittest.TestCase):
    """ListRepositoriesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListRepositoriesResponse:
        """Test ListRepositoriesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListRepositoriesResponse`
        """
        model = ListRepositoriesResponse()
        if include_optional:
            return ListRepositoriesResponse(
                next_page_token = '',
                repositories = [
                    openapi_client.models.repository.Repository(
                        cleanup_policies = {
                            'key' : openapi_client.models.cleanup_policy.CleanupPolicy(
                                action = 'ACTION_UNSPECIFIED', 
                                condition = openapi_client.models.cleanup_policy_condition.CleanupPolicyCondition(
                                    newer_than = '', 
                                    older_than = '', 
                                    package_name_prefixes = [
                                        ''
                                        ], 
                                    tag_prefixes = [
                                        ''
                                        ], 
                                    tag_state = 'TAG_STATE_UNSPECIFIED', 
                                    version_name_prefixes = [
                                        ''
                                        ], ), 
                                id = '', 
                                most_recent_versions = openapi_client.models.cleanup_policy_most_recent_versions.CleanupPolicyMostRecentVersions(
                                    keep_count = 56, ), )
                            }, 
                        cleanup_policy_dry_run = True, 
                        create_time = '', 
                        description = '', 
                        disallow_unspecified_mode = True, 
                        docker_config = openapi_client.models.docker_repository_config.DockerRepositoryConfig(
                            immutable_tags = True, ), 
                        format = 'FORMAT_UNSPECIFIED', 
                        kms_key_name = '', 
                        labels = {
                            'key' : ''
                            }, 
                        maven_config = openapi_client.models.maven_repository_config.MavenRepositoryConfig(
                            allow_snapshot_overwrites = True, 
                            version_policy = 'VERSION_POLICY_UNSPECIFIED', ), 
                        mode = 'MODE_UNSPECIFIED', 
                        name = '', 
                        remote_repository_config = openapi_client.models.remote_repository_config.RemoteRepositoryConfig(
                            apt_repository = openapi_client.models.apt_repository.AptRepository(
                                public_repository = openapi_client.models.google_devtools_artifactregistry_v1_remote_repository_config_apt_repository_public_repository.GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository(
                                    repository_base = 'REPOSITORY_BASE_UNSPECIFIED', 
                                    repository_path = '', ), ), 
                            description = '', 
                            docker_repository = openapi_client.models.docker_repository.DockerRepository(), 
                            maven_repository = openapi_client.models.maven_repository.MavenRepository(), 
                            npm_repository = openapi_client.models.npm_repository.NpmRepository(), 
                            python_repository = openapi_client.models.python_repository.PythonRepository(), 
                            upstream_credentials = openapi_client.models.upstream_credentials.UpstreamCredentials(
                                username_password_credentials = openapi_client.models.username_password_credentials.UsernamePasswordCredentials(
                                    password_secret_version = '', 
                                    username = '', ), ), 
                            yum_repository = openapi_client.models.yum_repository.YumRepository(), ), 
                        satisfies_pzs = True, 
                        size_bytes = '', 
                        update_time = '', 
                        virtual_repository_config = openapi_client.models.virtual_repository_config.VirtualRepositoryConfig(
                            upstream_policies = [
                                openapi_client.models.upstream_policy.UpstreamPolicy(
                                    id = '', 
                                    priority = 56, 
                                    repository = '', )
                                ], ), )
                    ]
            )
        else:
            return ListRepositoriesResponse(
        )
        """

    def testListRepositoriesResponse(self):
        """Test ListRepositoriesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

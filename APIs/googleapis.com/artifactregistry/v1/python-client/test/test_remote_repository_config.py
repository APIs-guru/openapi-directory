# coding: utf-8

"""
    Artifact Registry API

    Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.remote_repository_config import RemoteRepositoryConfig

class TestRemoteRepositoryConfig(unittest.TestCase):
    """RemoteRepositoryConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RemoteRepositoryConfig:
        """Test RemoteRepositoryConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RemoteRepositoryConfig`
        """
        model = RemoteRepositoryConfig()
        if include_optional:
            return RemoteRepositoryConfig(
                apt_repository = openapi_client.models.apt_repository.AptRepository(
                    public_repository = openapi_client.models.google_devtools_artifactregistry_v1_remote_repository_config_apt_repository_public_repository.GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository(
                        repository_base = 'REPOSITORY_BASE_UNSPECIFIED', 
                        repository_path = '', ), ),
                description = '',
                docker_repository = openapi_client.models.docker_repository.DockerRepository(
                    public_repository = 'PUBLIC_REPOSITORY_UNSPECIFIED', ),
                maven_repository = openapi_client.models.maven_repository.MavenRepository(
                    public_repository = 'PUBLIC_REPOSITORY_UNSPECIFIED', ),
                npm_repository = openapi_client.models.npm_repository.NpmRepository(
                    public_repository = 'PUBLIC_REPOSITORY_UNSPECIFIED', ),
                python_repository = openapi_client.models.python_repository.PythonRepository(
                    public_repository = 'PUBLIC_REPOSITORY_UNSPECIFIED', ),
                upstream_credentials = openapi_client.models.upstream_credentials.UpstreamCredentials(
                    username_password_credentials = openapi_client.models.username_password_credentials.UsernamePasswordCredentials(
                        password_secret_version = '', 
                        username = '', ), ),
                yum_repository = openapi_client.models.yum_repository.YumRepository(
                    public_repository = openapi_client.models.google_devtools_artifactregistry_v1_remote_repository_config_yum_repository_public_repository.GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository(
                        repository_base = 'REPOSITORY_BASE_UNSPECIFIED', 
                        repository_path = '', ), )
            )
        else:
            return RemoteRepositoryConfig(
        )
        """

    def testRemoteRepositoryConfig(self):
        """Test RemoteRepositoryConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

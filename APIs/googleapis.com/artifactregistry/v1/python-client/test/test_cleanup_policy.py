# coding: utf-8

"""
    Artifact Registry API

    Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cleanup_policy import CleanupPolicy

class TestCleanupPolicy(unittest.TestCase):
    """CleanupPolicy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CleanupPolicy:
        """Test CleanupPolicy
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CleanupPolicy`
        """
        model = CleanupPolicy()
        if include_optional:
            return CleanupPolicy(
                action = 'ACTION_UNSPECIFIED',
                condition = openapi_client.models.cleanup_policy_condition.CleanupPolicyCondition(
                    newer_than = '', 
                    older_than = '', 
                    package_name_prefixes = [
                        ''
                        ], 
                    tag_prefixes = [
                        ''
                        ], 
                    tag_state = 'TAG_STATE_UNSPECIFIED', 
                    version_name_prefixes = [
                        ''
                        ], ),
                id = '',
                most_recent_versions = openapi_client.models.cleanup_policy_most_recent_versions.CleanupPolicyMostRecentVersions(
                    keep_count = 56, 
                    package_name_prefixes = [
                        ''
                        ], )
            )
        else:
            return CleanupPolicy(
        )
        """

    def testCleanupPolicy(self):
        """Test CleanupPolicy"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

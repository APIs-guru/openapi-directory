# coding: utf-8

"""
    Artifact Registry API

    Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AptArtifact(BaseModel):
    """
    A detailed representation of an Apt artifact. Information in the record is derived from the archive's control file. See https://www.debian.org/doc/debian-policy/ch-controlfields.html
    """ # noqa: E501
    architecture: Optional[StrictStr] = Field(default=None, description="Output only. Operating system architecture of the artifact.")
    component: Optional[StrictStr] = Field(default=None, description="Output only. Repository component of the artifact.")
    control_file: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Output only. Contents of the artifact's control metadata file.", alias="controlFile")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The Artifact Registry resource name of the artifact.")
    package_name: Optional[StrictStr] = Field(default=None, description="Output only. The Apt package name of the artifact.", alias="packageName")
    package_type: Optional[StrictStr] = Field(default=None, description="Output only. An artifact is a binary or source package.", alias="packageType")
    __properties: ClassVar[List[str]] = ["architecture", "component", "controlFile", "name", "packageName", "packageType"]

    @field_validator('package_type')
    def package_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PACKAGE_TYPE_UNSPECIFIED', 'BINARY', 'SOURCE']):
            raise ValueError("must be one of enum values ('PACKAGE_TYPE_UNSPECIFIED', 'BINARY', 'SOURCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AptArtifact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "architecture",
            "component",
            "control_file",
            "name",
            "package_name",
            "package_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AptArtifact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "architecture": obj.get("architecture"),
            "component": obj.get("component"),
            "controlFile": obj.get("controlFile"),
            "name": obj.get("name"),
            "packageName": obj.get("packageName"),
            "packageType": obj.get("packageType")
        })
        return _obj



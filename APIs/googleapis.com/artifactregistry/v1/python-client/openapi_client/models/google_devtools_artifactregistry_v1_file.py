# coding: utf-8

"""
    Artifact Registry API

    Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.hash import Hash
from typing import Optional, Set
from typing_extensions import Self

class GoogleDevtoolsArtifactregistryV1File(BaseModel):
    """
    Files store content that is potentially associated with Packages or Versions.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the File was created.", alias="createTime")
    fetch_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the last attempt to refresh the file's data was made. Only set when the repository is remote.", alias="fetchTime")
    hashes: Optional[List[Hash]] = Field(default=None, description="The hashes of the file content.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the file, for example: \"projects/p1/locations/us-central1/repositories/repo1/files/a%2Fb%2Fc.txt\". If the file ID part contains slashes, they are escaped.")
    owner: Optional[StrictStr] = Field(default=None, description="The name of the Package or Version that owns this file, if any.")
    size_bytes: Optional[StrictStr] = Field(default=None, description="The size of the File in bytes.", alias="sizeBytes")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the File was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "fetchTime", "hashes", "name", "owner", "sizeBytes", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsArtifactregistryV1File from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "fetch_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in hashes (list)
        _items = []
        if self.hashes:
            for _item_hashes in self.hashes:
                if _item_hashes:
                    _items.append(_item_hashes.to_dict())
            _dict['hashes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsArtifactregistryV1File from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "fetchTime": obj.get("fetchTime"),
            "hashes": [Hash.from_dict(_item) for _item in obj["hashes"]] if obj.get("hashes") is not None else None,
            "name": obj.get("name"),
            "owner": obj.get("owner"),
            "sizeBytes": obj.get("sizeBytes"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



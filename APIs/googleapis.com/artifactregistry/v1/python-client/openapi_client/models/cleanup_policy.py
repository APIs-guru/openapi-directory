# coding: utf-8

"""
    Artifact Registry API

    Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cleanup_policy_condition import CleanupPolicyCondition
from openapi_client.models.cleanup_policy_most_recent_versions import CleanupPolicyMostRecentVersions
from typing import Optional, Set
from typing_extensions import Self

class CleanupPolicy(BaseModel):
    """
    Artifact policy configuration for repository cleanup policies.
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="Policy action.")
    condition: Optional[CleanupPolicyCondition] = None
    id: Optional[StrictStr] = Field(default=None, description="The user-provided ID of the cleanup policy.")
    most_recent_versions: Optional[CleanupPolicyMostRecentVersions] = Field(default=None, alias="mostRecentVersions")
    __properties: ClassVar[List[str]] = ["action", "condition", "id", "mostRecentVersions"]

    @field_validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTION_UNSPECIFIED', 'DELETE', 'KEEP']):
            raise ValueError("must be one of enum values ('ACTION_UNSPECIFIED', 'DELETE', 'KEEP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CleanupPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of condition
        if self.condition:
            _dict['condition'] = self.condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of most_recent_versions
        if self.most_recent_versions:
            _dict['mostRecentVersions'] = self.most_recent_versions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CleanupPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "condition": CleanupPolicyCondition.from_dict(obj["condition"]) if obj.get("condition") is not None else None,
            "id": obj.get("id"),
            "mostRecentVersions": CleanupPolicyMostRecentVersions.from_dict(obj["mostRecentVersions"]) if obj.get("mostRecentVersions") is not None else None
        })
        return _obj



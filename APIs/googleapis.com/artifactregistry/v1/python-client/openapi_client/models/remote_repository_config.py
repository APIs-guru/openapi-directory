# coding: utf-8

"""
    Artifact Registry API

    Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.apt_repository import AptRepository
from openapi_client.models.docker_repository import DockerRepository
from openapi_client.models.maven_repository import MavenRepository
from openapi_client.models.npm_repository import NpmRepository
from openapi_client.models.python_repository import PythonRepository
from openapi_client.models.upstream_credentials import UpstreamCredentials
from openapi_client.models.yum_repository import YumRepository
from typing import Optional, Set
from typing_extensions import Self

class RemoteRepositoryConfig(BaseModel):
    """
    Remote repository configuration.
    """ # noqa: E501
    apt_repository: Optional[AptRepository] = Field(default=None, alias="aptRepository")
    description: Optional[StrictStr] = Field(default=None, description="The description of the remote source.")
    docker_repository: Optional[DockerRepository] = Field(default=None, alias="dockerRepository")
    maven_repository: Optional[MavenRepository] = Field(default=None, alias="mavenRepository")
    npm_repository: Optional[NpmRepository] = Field(default=None, alias="npmRepository")
    python_repository: Optional[PythonRepository] = Field(default=None, alias="pythonRepository")
    upstream_credentials: Optional[UpstreamCredentials] = Field(default=None, alias="upstreamCredentials")
    yum_repository: Optional[YumRepository] = Field(default=None, alias="yumRepository")
    __properties: ClassVar[List[str]] = ["aptRepository", "description", "dockerRepository", "mavenRepository", "npmRepository", "pythonRepository", "upstreamCredentials", "yumRepository"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RemoteRepositoryConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of apt_repository
        if self.apt_repository:
            _dict['aptRepository'] = self.apt_repository.to_dict()
        # override the default output from pydantic by calling `to_dict()` of docker_repository
        if self.docker_repository:
            _dict['dockerRepository'] = self.docker_repository.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maven_repository
        if self.maven_repository:
            _dict['mavenRepository'] = self.maven_repository.to_dict()
        # override the default output from pydantic by calling `to_dict()` of npm_repository
        if self.npm_repository:
            _dict['npmRepository'] = self.npm_repository.to_dict()
        # override the default output from pydantic by calling `to_dict()` of python_repository
        if self.python_repository:
            _dict['pythonRepository'] = self.python_repository.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upstream_credentials
        if self.upstream_credentials:
            _dict['upstreamCredentials'] = self.upstream_credentials.to_dict()
        # override the default output from pydantic by calling `to_dict()` of yum_repository
        if self.yum_repository:
            _dict['yumRepository'] = self.yum_repository.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RemoteRepositoryConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aptRepository": AptRepository.from_dict(obj["aptRepository"]) if obj.get("aptRepository") is not None else None,
            "description": obj.get("description"),
            "dockerRepository": DockerRepository.from_dict(obj["dockerRepository"]) if obj.get("dockerRepository") is not None else None,
            "mavenRepository": MavenRepository.from_dict(obj["mavenRepository"]) if obj.get("mavenRepository") is not None else None,
            "npmRepository": NpmRepository.from_dict(obj["npmRepository"]) if obj.get("npmRepository") is not None else None,
            "pythonRepository": PythonRepository.from_dict(obj["pythonRepository"]) if obj.get("pythonRepository") is not None else None,
            "upstreamCredentials": UpstreamCredentials.from_dict(obj["upstreamCredentials"]) if obj.get("upstreamCredentials") is not None else None,
            "yumRepository": YumRepository.from_dict(obj["yumRepository"]) if obj.get("yumRepository") is not None else None
        })
        return _obj



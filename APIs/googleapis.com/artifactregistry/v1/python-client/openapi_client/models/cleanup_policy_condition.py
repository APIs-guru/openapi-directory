# coding: utf-8

"""
    Artifact Registry API

    Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CleanupPolicyCondition(BaseModel):
    """
    CleanupPolicyCondition is a set of conditions attached to a CleanupPolicy. If multiple entries are set, all must be satisfied for the condition to be satisfied.
    """ # noqa: E501
    newer_than: Optional[StrictStr] = Field(default=None, description="Match versions newer than a duration.", alias="newerThan")
    older_than: Optional[StrictStr] = Field(default=None, description="Match versions older than a duration.", alias="olderThan")
    package_name_prefixes: Optional[List[StrictStr]] = Field(default=None, description="Match versions by package prefix. Applied on any prefix match.", alias="packageNamePrefixes")
    tag_prefixes: Optional[List[StrictStr]] = Field(default=None, description="Match versions by tag prefix. Applied on any prefix match.", alias="tagPrefixes")
    tag_state: Optional[StrictStr] = Field(default=None, description="Match versions by tag status.", alias="tagState")
    version_name_prefixes: Optional[List[StrictStr]] = Field(default=None, description="Match versions by version name prefix. Applied on any prefix match.", alias="versionNamePrefixes")
    __properties: ClassVar[List[str]] = ["newerThan", "olderThan", "packageNamePrefixes", "tagPrefixes", "tagState", "versionNamePrefixes"]

    @field_validator('tag_state')
    def tag_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TAG_STATE_UNSPECIFIED', 'TAGGED', 'UNTAGGED', 'ANY']):
            raise ValueError("must be one of enum values ('TAG_STATE_UNSPECIFIED', 'TAGGED', 'UNTAGGED', 'ANY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CleanupPolicyCondition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CleanupPolicyCondition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "newerThan": obj.get("newerThan"),
            "olderThan": obj.get("olderThan"),
            "packageNamePrefixes": obj.get("packageNamePrefixes"),
            "tagPrefixes": obj.get("tagPrefixes"),
            "tagState": obj.get("tagState"),
            "versionNamePrefixes": obj.get("versionNamePrefixes")
        })
        return _obj



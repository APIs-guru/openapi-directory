# coding: utf-8

"""
    Artifact Registry API

    Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.upload_yum_artifact_media_response import UploadYumArtifactMediaResponse

class TestUploadYumArtifactMediaResponse(unittest.TestCase):
    """UploadYumArtifactMediaResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UploadYumArtifactMediaResponse:
        """Test UploadYumArtifactMediaResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UploadYumArtifactMediaResponse`
        """
        model = UploadYumArtifactMediaResponse()
        if include_optional:
            return UploadYumArtifactMediaResponse(
                operation = openapi_client.models.operation.Operation(
                    done = True, 
                    error = openapi_client.models.status.Status(
                        code = 56, 
                        details = [
                            {
                                'key' : null
                                }
                            ], 
                        message = '', ), 
                    metadata = {
                        'key' : null
                        }, 
                    name = '', 
                    response = {
                        'key' : null
                        }, )
            )
        else:
            return UploadYumArtifactMediaResponse(
        )
        """

    def testUploadYumArtifactMediaResponse(self):
        """Test UploadYumArtifactMediaResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

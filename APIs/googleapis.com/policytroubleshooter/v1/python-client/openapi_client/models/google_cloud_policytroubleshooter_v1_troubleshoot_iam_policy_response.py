# coding: utf-8

"""
    Policy Troubleshooter API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_policytroubleshooter_v1_explained_policy import GoogleCloudPolicytroubleshooterV1ExplainedPolicy
from openapi_client.models.google_rpc_status import GoogleRpcStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPolicytroubleshooterV1TroubleshootIamPolicyResponse(BaseModel):
    """
    Response for TroubleshootIamPolicy.
    """ # noqa: E501
    access: Optional[StrictStr] = Field(default=None, description="Indicates whether the principal has the specified permission for the specified resource, based on evaluating all of the applicable IAM policies.")
    errors: Optional[List[GoogleRpcStatus]] = Field(default=None, description="The general errors contained in the troubleshooting response.")
    explained_policies: Optional[List[GoogleCloudPolicytroubleshooterV1ExplainedPolicy]] = Field(default=None, description="List of IAM policies that were evaluated to check the principal's permissions, with annotations to indicate how each policy contributed to the final result. The list of policies can include the policy for the resource itself. It can also include policies that are inherited from higher levels of the resource hierarchy, including the organization, the folder, and the project. To learn more about the resource hierarchy, see https://cloud.google.com/iam/help/resource-hierarchy.", alias="explainedPolicies")
    __properties: ClassVar[List[str]] = ["access", "errors", "explainedPolicies"]

    @field_validator('access')
    def access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCESS_STATE_UNSPECIFIED', 'GRANTED', 'NOT_GRANTED', 'UNKNOWN_CONDITIONAL', 'UNKNOWN_INFO_DENIED']):
            raise ValueError("must be one of enum values ('ACCESS_STATE_UNSPECIFIED', 'GRANTED', 'NOT_GRANTED', 'UNKNOWN_CONDITIONAL', 'UNKNOWN_INFO_DENIED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicytroubleshooterV1TroubleshootIamPolicyResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in explained_policies (list)
        _items = []
        if self.explained_policies:
            for _item_explained_policies in self.explained_policies:
                if _item_explained_policies:
                    _items.append(_item_explained_policies.to_dict())
            _dict['explainedPolicies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicytroubleshooterV1TroubleshootIamPolicyResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access": obj.get("access"),
            "errors": [GoogleRpcStatus.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "explainedPolicies": [GoogleCloudPolicytroubleshooterV1ExplainedPolicy.from_dict(_item) for _item in obj["explainedPolicies"]] if obj.get("explainedPolicies") is not None else None
        })
        return _obj



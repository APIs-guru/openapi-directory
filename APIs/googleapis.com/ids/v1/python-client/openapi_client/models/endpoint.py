# coding: utf-8

"""
    Cloud IDS API

    Cloud IDS (Cloud Intrusion Detection System) detects malware, spyware, command-and-control attacks, and other network-based threats. Its security efficacy is industry leading, built with Palo Alto Networks technologies. When you use this product, your organization name and consumption levels will be shared with Palo Alto Networks.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Endpoint(BaseModel):
    """
    Endpoint describes a single IDS endpoint. It defines a forwarding rule to which packets can be sent for IDS inspection.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The create time timestamp.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="User-provided description of the endpoint")
    endpoint_forwarding_rule: Optional[StrictStr] = Field(default=None, description="Output only. The fully qualified URL of the endpoint's ILB Forwarding Rule.", alias="endpointForwardingRule")
    endpoint_ip: Optional[StrictStr] = Field(default=None, description="Output only. The IP address of the IDS Endpoint's ILB.", alias="endpointIp")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels of the endpoint.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of the endpoint.")
    network: Optional[StrictStr] = Field(default=None, description="Required. The fully qualified URL of the network to which the IDS Endpoint is attached.")
    severity: Optional[StrictStr] = Field(default=None, description="Required. Lowest threat severity that this endpoint will alert on.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Current state of the endpoint.")
    threat_exceptions: Optional[List[StrictStr]] = Field(default=None, description="List of threat IDs to be excepted from generating alerts.", alias="threatExceptions")
    traffic_logs: Optional[StrictBool] = Field(default=None, description="Whether the endpoint should report traffic logs in addition to threat logs.", alias="trafficLogs")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The update time timestamp.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "endpointForwardingRule", "endpointIp", "labels", "name", "network", "severity", "state", "threatExceptions", "trafficLogs", "updateTime"]

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEVERITY_UNSPECIFIED', 'INFORMATIONAL', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL']):
            raise ValueError("must be one of enum values ('SEVERITY_UNSPECIFIED', 'INFORMATIONAL', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'READY', 'DELETING', 'UPDATING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'READY', 'DELETING', 'UPDATING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Endpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "endpoint_forwarding_rule",
            "endpoint_ip",
            "name",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Endpoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "endpointForwardingRule": obj.get("endpointForwardingRule"),
            "endpointIp": obj.get("endpointIp"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "network": obj.get("network"),
            "severity": obj.get("severity"),
            "state": obj.get("state"),
            "threatExceptions": obj.get("threatExceptions"),
            "trafficLogs": obj.get("trafficLogs"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



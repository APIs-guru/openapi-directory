# coding: utf-8

"""
    Street View Publish API

    Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.photo_sequence import PhotoSequence

class TestPhotoSequence(unittest.TestCase):
    """PhotoSequence unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PhotoSequence:
        """Test PhotoSequence
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PhotoSequence`
        """
        model = PhotoSequence()
        if include_optional:
            return PhotoSequence(
                capture_time_override = '',
                distance_meters = 1.337,
                failure_details = openapi_client.models.processing_failure_details.ProcessingFailureDetails(
                    gps_data_gap_details = openapi_client.models.gps_data_gap_failure_details.GpsDataGapFailureDetails(
                        gap_duration = '', 
                        gap_start_time = '', ), 
                    imu_data_gap_details = openapi_client.models.imu_data_gap_failure_details.ImuDataGapFailureDetails(
                        gap_duration = '', 
                        gap_start_time = '', ), 
                    insufficient_gps_details = openapi_client.models.insufficient_gps_failure_details.InsufficientGpsFailureDetails(
                        gps_points_found = 56, ), 
                    no_overlap_gps_details = openapi_client.models.no_overlap_gps_failure_details.NoOverlapGpsFailureDetails(
                        gps_end_time = '', 
                        gps_start_time = '', 
                        video_end_time = '', 
                        video_start_time = '', ), 
                    not_outdoors_details = openapi_client.models.not_outdoors_failure_details.NotOutdoorsFailureDetails(
                        start_time = '', ), ),
                failure_reason = 'PROCESSING_FAILURE_REASON_UNSPECIFIED',
                filename = '',
                gps_source = 'PHOTO_SEQUENCE',
                id = '',
                imu = openapi_client.models.imu.Imu(
                    accel_mpsps = [
                        openapi_client.models.measurement3d.Measurement3d(
                            capture_time = '', 
                            x = 1.337, 
                            y = 1.337, 
                            z = 1.337, )
                        ], 
                    gyro_rps = [
                        openapi_client.models.measurement3d.Measurement3d(
                            capture_time = '', 
                            x = 1.337, 
                            y = 1.337, 
                            z = 1.337, )
                        ], 
                    mag_ut = [
                        
                        ], ),
                photos = [
                    openapi_client.models.photo.Photo(
                        capture_time = '', 
                        connections = [
                            openapi_client.models.connection.Connection(
                                target = openapi_client.models.photo_id.PhotoId(
                                    id = '', ), )
                            ], 
                        download_url = '', 
                        maps_publish_status = 'UNSPECIFIED_MAPS_PUBLISH_STATUS', 
                        photo_id = openapi_client.models.photo_id.PhotoId(
                            id = '', ), 
                        places = [
                            openapi_client.models.place.Place(
                                language_code = '', 
                                name = '', 
                                place_id = '', )
                            ], 
                        pose = openapi_client.models.pose.Pose(
                            accuracy_meters = 1.337, 
                            altitude = 1.337, 
                            gps_record_timestamp_unix_epoch = '', 
                            heading = 1.337, 
                            lat_lng_pair = openapi_client.models.lat_lng.LatLng(
                                latitude = 1.337, 
                                longitude = 1.337, ), 
                            level = openapi_client.models.level.Level(
                                name = '', 
                                number = 1.337, ), 
                            pitch = 1.337, 
                            roll = 1.337, ), 
                        share_link = '', 
                        thumbnail_url = '', 
                        transfer_status = 'TRANSFER_STATUS_UNKNOWN', 
                        upload_reference = openapi_client.models.upload_ref.UploadRef(
                            upload_url = '', ), 
                        upload_time = '', 
                        view_count = '', )
                    ],
                processing_state = 'PROCESSING_STATE_UNSPECIFIED',
                raw_gps_timeline = [
                    openapi_client.models.pose.Pose(
                        accuracy_meters = 1.337, 
                        altitude = 1.337, 
                        gps_record_timestamp_unix_epoch = '', 
                        heading = 1.337, 
                        lat_lng_pair = openapi_client.models.lat_lng.LatLng(
                            latitude = 1.337, 
                            longitude = 1.337, ), 
                        level = openapi_client.models.level.Level(
                            name = '', 
                            number = 1.337, ), 
                        pitch = 1.337, 
                        roll = 1.337, )
                    ],
                sequence_bounds = openapi_client.models.lat_lng_bounds.LatLngBounds(
                    northeast = openapi_client.models.lat_lng.LatLng(
                        latitude = 1.337, 
                        longitude = 1.337, ), 
                    southwest = openapi_client.models.lat_lng.LatLng(
                        latitude = 1.337, 
                        longitude = 1.337, ), ),
                upload_reference = openapi_client.models.upload_ref.UploadRef(
                    upload_url = '', ),
                upload_time = '',
                view_count = ''
            )
        else:
            return PhotoSequence(
        )
        """

    def testPhotoSequence(self):
        """Test PhotoSequence"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

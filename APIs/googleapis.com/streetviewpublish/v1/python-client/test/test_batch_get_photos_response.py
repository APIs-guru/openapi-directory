# coding: utf-8

"""
    Street View Publish API

    Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.batch_get_photos_response import BatchGetPhotosResponse

class TestBatchGetPhotosResponse(unittest.TestCase):
    """BatchGetPhotosResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BatchGetPhotosResponse:
        """Test BatchGetPhotosResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BatchGetPhotosResponse`
        """
        model = BatchGetPhotosResponse()
        if include_optional:
            return BatchGetPhotosResponse(
                results = [
                    openapi_client.models.photo_response.PhotoResponse(
                        photo = openapi_client.models.photo.Photo(
                            capture_time = '', 
                            connections = [
                                openapi_client.models.connection.Connection(
                                    target = openapi_client.models.photo_id.PhotoId(
                                        id = '', ), )
                                ], 
                            download_url = '', 
                            maps_publish_status = 'UNSPECIFIED_MAPS_PUBLISH_STATUS', 
                            photo_id = openapi_client.models.photo_id.PhotoId(
                                id = '', ), 
                            places = [
                                openapi_client.models.place.Place(
                                    language_code = '', 
                                    name = '', 
                                    place_id = '', )
                                ], 
                            pose = openapi_client.models.pose.Pose(
                                accuracy_meters = 1.337, 
                                altitude = 1.337, 
                                gps_record_timestamp_unix_epoch = '', 
                                heading = 1.337, 
                                lat_lng_pair = openapi_client.models.lat_lng.LatLng(
                                    latitude = 1.337, 
                                    longitude = 1.337, ), 
                                level = openapi_client.models.level.Level(
                                    name = '', 
                                    number = 1.337, ), 
                                pitch = 1.337, 
                                roll = 1.337, ), 
                            share_link = '', 
                            thumbnail_url = '', 
                            transfer_status = 'TRANSFER_STATUS_UNKNOWN', 
                            upload_reference = openapi_client.models.upload_ref.UploadRef(
                                upload_url = '', ), 
                            upload_time = '', 
                            view_count = '', ), 
                        status = openapi_client.models.status.Status(
                            code = 56, 
                            details = [
                                {
                                    'key' : null
                                    }
                                ], 
                            message = '', ), )
                    ]
            )
        else:
            return BatchGetPhotosResponse(
        )
        """

    def testBatchGetPhotosResponse(self):
        """Test BatchGetPhotosResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

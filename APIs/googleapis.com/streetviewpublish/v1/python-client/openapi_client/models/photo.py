# coding: utf-8

"""
    Street View Publish API

    Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.connection import Connection
from openapi_client.models.photo_id import PhotoId
from openapi_client.models.place import Place
from openapi_client.models.pose import Pose
from openapi_client.models.upload_ref import UploadRef
from typing import Optional, Set
from typing_extensions import Self

class Photo(BaseModel):
    """
    Photo is used to store 360 photos along with photo metadata.
    """ # noqa: E501
    capture_time: Optional[StrictStr] = Field(default=None, description="Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.", alias="captureTime")
    connections: Optional[List[Connection]] = Field(default=None, description="Optional. Connections to other photos. A connection represents the link from this photo to another photo.")
    download_url: Optional[StrictStr] = Field(default=None, description="Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.", alias="downloadUrl")
    maps_publish_status: Optional[StrictStr] = Field(default=None, description="Output only. Status in Google Maps, whether this photo was published or rejected.", alias="mapsPublishStatus")
    photo_id: Optional[PhotoId] = Field(default=None, alias="photoId")
    places: Optional[List[Place]] = Field(default=None, description="Optional. Places where this photo belongs.")
    pose: Optional[Pose] = None
    share_link: Optional[StrictStr] = Field(default=None, description="Output only. The share link for the photo.", alias="shareLink")
    thumbnail_url: Optional[StrictStr] = Field(default=None, description="Output only. The thumbnail URL for showing a preview of the given photo.", alias="thumbnailUrl")
    transfer_status: Optional[StrictStr] = Field(default=None, description="Output only. Status of rights transfer on this photo.", alias="transferStatus")
    upload_reference: Optional[UploadRef] = Field(default=None, alias="uploadReference")
    upload_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the image was uploaded.", alias="uploadTime")
    view_count: Optional[StrictStr] = Field(default=None, description="Output only. View count of the photo.", alias="viewCount")
    __properties: ClassVar[List[str]] = ["captureTime", "connections", "downloadUrl", "mapsPublishStatus", "photoId", "places", "pose", "shareLink", "thumbnailUrl", "transferStatus", "uploadReference", "uploadTime", "viewCount"]

    @field_validator('maps_publish_status')
    def maps_publish_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED_MAPS_PUBLISH_STATUS', 'PUBLISHED', 'REJECTED_UNKNOWN']):
            raise ValueError("must be one of enum values ('UNSPECIFIED_MAPS_PUBLISH_STATUS', 'PUBLISHED', 'REJECTED_UNKNOWN')")
        return value

    @field_validator('transfer_status')
    def transfer_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRANSFER_STATUS_UNKNOWN', 'NEVER_TRANSFERRED', 'PENDING', 'COMPLETED', 'REJECTED', 'EXPIRED', 'CANCELLED', 'RECEIVED_VIA_TRANSFER']):
            raise ValueError("must be one of enum values ('TRANSFER_STATUS_UNKNOWN', 'NEVER_TRANSFERRED', 'PENDING', 'COMPLETED', 'REJECTED', 'EXPIRED', 'CANCELLED', 'RECEIVED_VIA_TRANSFER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Photo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "download_url",
            "maps_publish_status",
            "share_link",
            "thumbnail_url",
            "transfer_status",
            "upload_time",
            "view_count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in connections (list)
        _items = []
        if self.connections:
            for _item_connections in self.connections:
                if _item_connections:
                    _items.append(_item_connections.to_dict())
            _dict['connections'] = _items
        # override the default output from pydantic by calling `to_dict()` of photo_id
        if self.photo_id:
            _dict['photoId'] = self.photo_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in places (list)
        _items = []
        if self.places:
            for _item_places in self.places:
                if _item_places:
                    _items.append(_item_places.to_dict())
            _dict['places'] = _items
        # override the default output from pydantic by calling `to_dict()` of pose
        if self.pose:
            _dict['pose'] = self.pose.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upload_reference
        if self.upload_reference:
            _dict['uploadReference'] = self.upload_reference.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Photo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "captureTime": obj.get("captureTime"),
            "connections": [Connection.from_dict(_item) for _item in obj["connections"]] if obj.get("connections") is not None else None,
            "downloadUrl": obj.get("downloadUrl"),
            "mapsPublishStatus": obj.get("mapsPublishStatus"),
            "photoId": PhotoId.from_dict(obj["photoId"]) if obj.get("photoId") is not None else None,
            "places": [Place.from_dict(_item) for _item in obj["places"]] if obj.get("places") is not None else None,
            "pose": Pose.from_dict(obj["pose"]) if obj.get("pose") is not None else None,
            "shareLink": obj.get("shareLink"),
            "thumbnailUrl": obj.get("thumbnailUrl"),
            "transferStatus": obj.get("transferStatus"),
            "uploadReference": UploadRef.from_dict(obj["uploadReference"]) if obj.get("uploadReference") is not None else None,
            "uploadTime": obj.get("uploadTime"),
            "viewCount": obj.get("viewCount")
        })
        return _obj



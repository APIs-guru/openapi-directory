# coding: utf-8

"""
    Street View Publish API

    Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.measurement3d import Measurement3d
from typing import Optional, Set
from typing_extensions import Self

class Imu(BaseModel):
    """
    IMU data from the device sensors.
    """ # noqa: E501
    accel_mpsps: Optional[List[Measurement3d]] = Field(default=None, description="The accelerometer measurements in meters/sec^2 with increasing timestamps from devices.", alias="accelMpsps")
    gyro_rps: Optional[List[Measurement3d]] = Field(default=None, description="The gyroscope measurements in radians/sec with increasing timestamps from devices.", alias="gyroRps")
    mag_ut: Optional[List[Measurement3d]] = Field(default=None, description="The magnetometer measurements of the magnetic field in microtesla (uT) with increasing timestamps from devices.", alias="magUt")
    __properties: ClassVar[List[str]] = ["accelMpsps", "gyroRps", "magUt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Imu from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in accel_mpsps (list)
        _items = []
        if self.accel_mpsps:
            for _item_accel_mpsps in self.accel_mpsps:
                if _item_accel_mpsps:
                    _items.append(_item_accel_mpsps.to_dict())
            _dict['accelMpsps'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in gyro_rps (list)
        _items = []
        if self.gyro_rps:
            for _item_gyro_rps in self.gyro_rps:
                if _item_gyro_rps:
                    _items.append(_item_gyro_rps.to_dict())
            _dict['gyroRps'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mag_ut (list)
        _items = []
        if self.mag_ut:
            for _item_mag_ut in self.mag_ut:
                if _item_mag_ut:
                    _items.append(_item_mag_ut.to_dict())
            _dict['magUt'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Imu from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accelMpsps": [Measurement3d.from_dict(_item) for _item in obj["accelMpsps"]] if obj.get("accelMpsps") is not None else None,
            "gyroRps": [Measurement3d.from_dict(_item) for _item in obj["gyroRps"]] if obj.get("gyroRps") is not None else None,
            "magUt": [Measurement3d.from_dict(_item) for _item in obj["magUt"]] if obj.get("magUt") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Street View Publish API

    Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.lat_lng import LatLng
from openapi_client.models.level import Level
from typing import Optional, Set
from typing_extensions import Self

class Pose(BaseModel):
    """
    Raw pose measurement for an entity.
    """ # noqa: E501
    accuracy_meters: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The estimated horizontal accuracy of this pose in meters with 68% confidence (one standard deviation). For example, on Android, this value is available from this method: https://developer.android.com/reference/android/location/Location#getAccuracy(). Other platforms have different methods of obtaining similar accuracy estimations.", alias="accuracyMeters")
    altitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Altitude of the pose in meters above WGS84 ellipsoid. NaN indicates an unmeasured quantity.")
    gps_record_timestamp_unix_epoch: Optional[StrictStr] = Field(default=None, description="Time of the GPS record since UTC epoch.", alias="gpsRecordTimestampUnixEpoch")
    heading: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The following pose parameters pertain to the center of the photo. They match https://developers.google.com/streetview/spherical-metadata. Compass heading, measured at the center of the photo in degrees clockwise from North. Value must be >=0 and <360. NaN indicates an unmeasured quantity.")
    lat_lng_pair: Optional[LatLng] = Field(default=None, alias="latLngPair")
    level: Optional[Level] = None
    pitch: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Pitch, measured at the center of the photo in degrees. Value must be >=-90 and <= 90. A value of -90 means looking directly down, and a value of 90 means looking directly up. NaN indicates an unmeasured quantity.")
    roll: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Roll, measured in degrees. Value must be >= 0 and <360. A value of 0 means level with the horizon. NaN indicates an unmeasured quantity.")
    __properties: ClassVar[List[str]] = ["accuracyMeters", "altitude", "gpsRecordTimestampUnixEpoch", "heading", "latLngPair", "level", "pitch", "roll"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Pose from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of lat_lng_pair
        if self.lat_lng_pair:
            _dict['latLngPair'] = self.lat_lng_pair.to_dict()
        # override the default output from pydantic by calling `to_dict()` of level
        if self.level:
            _dict['level'] = self.level.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Pose from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accuracyMeters": obj.get("accuracyMeters"),
            "altitude": obj.get("altitude"),
            "gpsRecordTimestampUnixEpoch": obj.get("gpsRecordTimestampUnixEpoch"),
            "heading": obj.get("heading"),
            "latLngPair": LatLng.from_dict(obj["latLngPair"]) if obj.get("latLngPair") is not None else None,
            "level": Level.from_dict(obj["level"]) if obj.get("level") is not None else None,
            "pitch": obj.get("pitch"),
            "roll": obj.get("roll")
        })
        return _obj



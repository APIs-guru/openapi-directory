# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Jwk(BaseModel):
    """
    Jwk is a JSON Web Key as specified in RFC 7517
    """ # noqa: E501
    alg: Optional[StrictStr] = Field(default=None, description="Algorithm.")
    crv: Optional[StrictStr] = Field(default=None, description="Used for ECDSA keys.")
    e: Optional[StrictStr] = Field(default=None, description="Used for RSA keys.")
    kid: Optional[StrictStr] = Field(default=None, description="Key ID.")
    kty: Optional[StrictStr] = Field(default=None, description="Key Type.")
    n: Optional[StrictStr] = Field(default=None, description="Used for RSA keys.")
    use: Optional[StrictStr] = Field(default=None, description="Permitted uses for the public keys.")
    x: Optional[StrictStr] = Field(default=None, description="Used for ECDSA keys.")
    y: Optional[StrictStr] = Field(default=None, description="Used for ECDSA keys.")
    __properties: ClassVar[List[str]] = ["alg", "crv", "e", "kid", "kty", "n", "use", "x", "y"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Jwk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Jwk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alg": obj.get("alg"),
            "crv": obj.get("crv"),
            "e": obj.get("e"),
            "kid": obj.get("kid"),
            "kty": obj.get("kty"),
            "n": obj.get("n"),
            "use": obj.get("use"),
            "x": obj.get("x"),
            "y": obj.get("y")
        })
        return _obj



# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.operation_progress import OperationProgress
from openapi_client.models.status import Status
from openapi_client.models.status_condition import StatusCondition
from typing import Optional, Set
from typing_extensions import Self

class Operation(BaseModel):
    """
    This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only.
    """ # noqa: E501
    cluster_conditions: Optional[List[StatusCondition]] = Field(default=None, description="Which conditions caused the current cluster state. Deprecated. Use field error instead.", alias="clusterConditions")
    detail: Optional[StrictStr] = Field(default=None, description="Detailed operation progress, if available.")
    end_time: Optional[StrictStr] = Field(default=None, description="[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.", alias="endTime")
    error: Optional[Status] = None
    location: Optional[StrictStr] = Field(default=None, description="[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides.")
    name: Optional[StrictStr] = Field(default=None, description="The server-assigned ID for the operation.")
    nodepool_conditions: Optional[List[StatusCondition]] = Field(default=None, description="Which conditions caused the current node pool state. Deprecated. Use field error instead.", alias="nodepoolConditions")
    operation_type: Optional[StrictStr] = Field(default=None, description="The operation type.", alias="operationType")
    progress: Optional[OperationProgress] = None
    self_link: Optional[StrictStr] = Field(default=None, description="Server-defined URI for the operation. Example: `https://container.googleapis.com/v1alpha1/projects/123/locations/us-central1/operations/operation-123`.", alias="selfLink")
    start_time: Optional[StrictStr] = Field(default=None, description="[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.", alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="The current status of the operation.")
    status_message: Optional[StrictStr] = Field(default=None, description="Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead.", alias="statusMessage")
    target_link: Optional[StrictStr] = Field(default=None, description="Server-defined URI for the target of the operation. The format of this is a URI to the resource being modified (such as a cluster, node pool, or node). For node pool repairs, there may be multiple nodes being repaired, but only one will be the target. Examples: - ## `https://container.googleapis.com/v1/projects/123/locations/us-central1/clusters/my-cluster` ## `https://container.googleapis.com/v1/projects/123/zones/us-central1-c/clusters/my-cluster/nodePools/my-np` `https://container.googleapis.com/v1/projects/123/zones/us-central1-c/clusters/my-cluster/nodePools/my-np/node/my-node`", alias="targetLink")
    zone: Optional[StrictStr] = Field(default=None, description="The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead.")
    __properties: ClassVar[List[str]] = ["clusterConditions", "detail", "endTime", "error", "location", "name", "nodepoolConditions", "operationType", "progress", "selfLink", "startTime", "status", "statusMessage", "targetLink", "zone"]

    @field_validator('operation_type')
    def operation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'CREATE_CLUSTER', 'DELETE_CLUSTER', 'UPGRADE_MASTER', 'UPGRADE_NODES', 'REPAIR_CLUSTER', 'UPDATE_CLUSTER', 'CREATE_NODE_POOL', 'DELETE_NODE_POOL', 'SET_NODE_POOL_MANAGEMENT', 'AUTO_REPAIR_NODES', 'AUTO_UPGRADE_NODES', 'SET_LABELS', 'SET_MASTER_AUTH', 'SET_NODE_POOL_SIZE', 'SET_NETWORK_POLICY', 'SET_MAINTENANCE_POLICY', 'RESIZE_CLUSTER', 'FLEET_FEATURE_UPGRADE']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'CREATE_CLUSTER', 'DELETE_CLUSTER', 'UPGRADE_MASTER', 'UPGRADE_NODES', 'REPAIR_CLUSTER', 'UPDATE_CLUSTER', 'CREATE_NODE_POOL', 'DELETE_NODE_POOL', 'SET_NODE_POOL_MANAGEMENT', 'AUTO_REPAIR_NODES', 'AUTO_UPGRADE_NODES', 'SET_LABELS', 'SET_MASTER_AUTH', 'SET_NODE_POOL_SIZE', 'SET_NETWORK_POLICY', 'SET_MAINTENANCE_POLICY', 'RESIZE_CLUSTER', 'FLEET_FEATURE_UPGRADE')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATUS_UNSPECIFIED', 'PENDING', 'RUNNING', 'DONE', 'ABORTING']):
            raise ValueError("must be one of enum values ('STATUS_UNSPECIFIED', 'PENDING', 'RUNNING', 'DONE', 'ABORTING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Operation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "status_message",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cluster_conditions (list)
        _items = []
        if self.cluster_conditions:
            for _item_cluster_conditions in self.cluster_conditions:
                if _item_cluster_conditions:
                    _items.append(_item_cluster_conditions.to_dict())
            _dict['clusterConditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in nodepool_conditions (list)
        _items = []
        if self.nodepool_conditions:
            for _item_nodepool_conditions in self.nodepool_conditions:
                if _item_nodepool_conditions:
                    _items.append(_item_nodepool_conditions.to_dict())
            _dict['nodepoolConditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of progress
        if self.progress:
            _dict['progress'] = self.progress.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Operation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterConditions": [StatusCondition.from_dict(_item) for _item in obj["clusterConditions"]] if obj.get("clusterConditions") is not None else None,
            "detail": obj.get("detail"),
            "endTime": obj.get("endTime"),
            "error": Status.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "location": obj.get("location"),
            "name": obj.get("name"),
            "nodepoolConditions": [StatusCondition.from_dict(_item) for _item in obj["nodepoolConditions"]] if obj.get("nodepoolConditions") is not None else None,
            "operationType": obj.get("operationType"),
            "progress": OperationProgress.from_dict(obj["progress"]) if obj.get("progress") is not None else None,
            "selfLink": obj.get("selfLink"),
            "startTime": obj.get("startTime"),
            "status": obj.get("status"),
            "statusMessage": obj.get("statusMessage"),
            "targetLink": obj.get("targetLink"),
            "zone": obj.get("zone")
        })
        return _obj



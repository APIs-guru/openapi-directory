# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.best_effort_provisioning import BestEffortProvisioning
from openapi_client.models.max_pods_constraint import MaxPodsConstraint
from openapi_client.models.node_config import NodeConfig
from openapi_client.models.node_management import NodeManagement
from openapi_client.models.node_network_config import NodeNetworkConfig
from openapi_client.models.node_pool_autoscaling import NodePoolAutoscaling
from openapi_client.models.placement_policy import PlacementPolicy
from openapi_client.models.queued_provisioning import QueuedProvisioning
from openapi_client.models.status_condition import StatusCondition
from openapi_client.models.update_info import UpdateInfo
from openapi_client.models.upgrade_settings import UpgradeSettings
from typing import Optional, Set
from typing_extensions import Self

class NodePool(BaseModel):
    """
    NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
    """ # noqa: E501
    autoscaling: Optional[NodePoolAutoscaling] = None
    best_effort_provisioning: Optional[BestEffortProvisioning] = Field(default=None, alias="bestEffortProvisioning")
    conditions: Optional[List[StatusCondition]] = Field(default=None, description="Which conditions caused the current node pool state.")
    config: Optional[NodeConfig] = None
    etag: Optional[StrictStr] = Field(default=None, description="This checksum is computed by the server based on the value of node pool fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.")
    initial_node_count: Optional[StrictInt] = Field(default=None, description="The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.", alias="initialNodeCount")
    instance_group_urls: Optional[List[StrictStr]] = Field(default=None, description="[Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool. During the node pool blue-green upgrade operation, the URLs contain both blue and green resources.", alias="instanceGroupUrls")
    locations: Optional[List[StrictStr]] = Field(default=None, description="The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.")
    management: Optional[NodeManagement] = None
    max_pods_constraint: Optional[MaxPodsConstraint] = Field(default=None, alias="maxPodsConstraint")
    name: Optional[StrictStr] = Field(default=None, description="The name of the node pool.")
    network_config: Optional[NodeNetworkConfig] = Field(default=None, alias="networkConfig")
    placement_policy: Optional[PlacementPolicy] = Field(default=None, alias="placementPolicy")
    pod_ipv4_cidr_size: Optional[StrictInt] = Field(default=None, description="[Output only] The pod CIDR block size per node in this node pool.", alias="podIpv4CidrSize")
    queued_provisioning: Optional[QueuedProvisioning] = Field(default=None, alias="queuedProvisioning")
    self_link: Optional[StrictStr] = Field(default=None, description="[Output only] Server-defined URL for the resource.", alias="selfLink")
    status: Optional[StrictStr] = Field(default=None, description="[Output only] The status of the nodes in this pool instance.")
    status_message: Optional[StrictStr] = Field(default=None, description="[Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available.", alias="statusMessage")
    update_info: Optional[UpdateInfo] = Field(default=None, alias="updateInfo")
    upgrade_settings: Optional[UpgradeSettings] = Field(default=None, alias="upgradeSettings")
    version: Optional[StrictStr] = Field(default=None, description="The version of Kubernetes running on this NodePool's nodes. If unspecified, it defaults as described [here](https://cloud.google.com/kubernetes-engine/versioning#specifying_node_version).")
    __properties: ClassVar[List[str]] = ["autoscaling", "bestEffortProvisioning", "conditions", "config", "etag", "initialNodeCount", "instanceGroupUrls", "locations", "management", "maxPodsConstraint", "name", "networkConfig", "placementPolicy", "podIpv4CidrSize", "queuedProvisioning", "selfLink", "status", "statusMessage", "updateInfo", "upgradeSettings", "version"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATUS_UNSPECIFIED', 'PROVISIONING', 'RUNNING', 'RUNNING_WITH_ERROR', 'RECONCILING', 'STOPPING', 'ERROR']):
            raise ValueError("must be one of enum values ('STATUS_UNSPECIFIED', 'PROVISIONING', 'RUNNING', 'RUNNING_WITH_ERROR', 'RECONCILING', 'STOPPING', 'ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NodePool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of autoscaling
        if self.autoscaling:
            _dict['autoscaling'] = self.autoscaling.to_dict()
        # override the default output from pydantic by calling `to_dict()` of best_effort_provisioning
        if self.best_effort_provisioning:
            _dict['bestEffortProvisioning'] = self.best_effort_provisioning.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of management
        if self.management:
            _dict['management'] = self.management.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_pods_constraint
        if self.max_pods_constraint:
            _dict['maxPodsConstraint'] = self.max_pods_constraint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_config
        if self.network_config:
            _dict['networkConfig'] = self.network_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of placement_policy
        if self.placement_policy:
            _dict['placementPolicy'] = self.placement_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of queued_provisioning
        if self.queued_provisioning:
            _dict['queuedProvisioning'] = self.queued_provisioning.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_info
        if self.update_info:
            _dict['updateInfo'] = self.update_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upgrade_settings
        if self.upgrade_settings:
            _dict['upgradeSettings'] = self.upgrade_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NodePool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoscaling": NodePoolAutoscaling.from_dict(obj["autoscaling"]) if obj.get("autoscaling") is not None else None,
            "bestEffortProvisioning": BestEffortProvisioning.from_dict(obj["bestEffortProvisioning"]) if obj.get("bestEffortProvisioning") is not None else None,
            "conditions": [StatusCondition.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None,
            "config": NodeConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "etag": obj.get("etag"),
            "initialNodeCount": obj.get("initialNodeCount"),
            "instanceGroupUrls": obj.get("instanceGroupUrls"),
            "locations": obj.get("locations"),
            "management": NodeManagement.from_dict(obj["management"]) if obj.get("management") is not None else None,
            "maxPodsConstraint": MaxPodsConstraint.from_dict(obj["maxPodsConstraint"]) if obj.get("maxPodsConstraint") is not None else None,
            "name": obj.get("name"),
            "networkConfig": NodeNetworkConfig.from_dict(obj["networkConfig"]) if obj.get("networkConfig") is not None else None,
            "placementPolicy": PlacementPolicy.from_dict(obj["placementPolicy"]) if obj.get("placementPolicy") is not None else None,
            "podIpv4CidrSize": obj.get("podIpv4CidrSize"),
            "queuedProvisioning": QueuedProvisioning.from_dict(obj["queuedProvisioning"]) if obj.get("queuedProvisioning") is not None else None,
            "selfLink": obj.get("selfLink"),
            "status": obj.get("status"),
            "statusMessage": obj.get("statusMessage"),
            "updateInfo": UpdateInfo.from_dict(obj["updateInfo"]) if obj.get("updateInfo") is not None else None,
            "upgradeSettings": UpgradeSettings.from_dict(obj["upgradeSettings"]) if obj.get("upgradeSettings") is not None else None,
            "version": obj.get("version")
        })
        return _obj



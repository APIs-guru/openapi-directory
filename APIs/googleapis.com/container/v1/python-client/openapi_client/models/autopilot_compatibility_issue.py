# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AutopilotCompatibilityIssue(BaseModel):
    """
    AutopilotCompatibilityIssue contains information about a specific compatibility issue with Autopilot mode.
    """ # noqa: E501
    constraint_type: Optional[StrictStr] = Field(default=None, description="The constraint type of the issue.", alias="constraintType")
    description: Optional[StrictStr] = Field(default=None, description="The description of the issue.")
    documentation_url: Optional[StrictStr] = Field(default=None, description="A URL to a public documnetation, which addresses resolving this issue.", alias="documentationUrl")
    incompatibility_type: Optional[StrictStr] = Field(default=None, description="The incompatibility type of this issue.", alias="incompatibilityType")
    last_observation: Optional[StrictStr] = Field(default=None, description="The last time when this issue was observed.", alias="lastObservation")
    subjects: Optional[List[StrictStr]] = Field(default=None, description="The name of the resources which are subject to this issue.")
    __properties: ClassVar[List[str]] = ["constraintType", "description", "documentationUrl", "incompatibilityType", "lastObservation", "subjects"]

    @field_validator('incompatibility_type')
    def incompatibility_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'INCOMPATIBILITY', 'ADDITIONAL_CONFIG_REQUIRED', 'PASSED_WITH_OPTIONAL_CONFIG']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'INCOMPATIBILITY', 'ADDITIONAL_CONFIG_REQUIRED', 'PASSED_WITH_OPTIONAL_CONFIG')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutopilotCompatibilityIssue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutopilotCompatibilityIssue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "constraintType": obj.get("constraintType"),
            "description": obj.get("description"),
            "documentationUrl": obj.get("documentationUrl"),
            "incompatibilityType": obj.get("incompatibilityType"),
            "lastObservation": obj.get("lastObservation"),
            "subjects": obj.get("subjects")
        })
        return _obj



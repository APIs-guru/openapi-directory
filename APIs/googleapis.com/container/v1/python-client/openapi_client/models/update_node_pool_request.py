# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.confidential_nodes import ConfidentialNodes
from openapi_client.models.fast_socket import FastSocket
from openapi_client.models.gcfs_config import GcfsConfig
from openapi_client.models.linux_node_config import LinuxNodeConfig
from openapi_client.models.network_tags import NetworkTags
from openapi_client.models.node_kubelet_config import NodeKubeletConfig
from openapi_client.models.node_labels import NodeLabels
from openapi_client.models.node_network_config import NodeNetworkConfig
from openapi_client.models.node_pool_logging_config import NodePoolLoggingConfig
from openapi_client.models.node_taints import NodeTaints
from openapi_client.models.queued_provisioning import QueuedProvisioning
from openapi_client.models.resource_labels import ResourceLabels
from openapi_client.models.resource_manager_tags import ResourceManagerTags
from openapi_client.models.upgrade_settings import UpgradeSettings
from openapi_client.models.virtual_nic import VirtualNIC
from openapi_client.models.windows_node_config import WindowsNodeConfig
from openapi_client.models.workload_metadata_config import WorkloadMetadataConfig
from typing import Optional, Set
from typing_extensions import Self

class UpdateNodePoolRequest(BaseModel):
    """
    UpdateNodePoolRequests update a node pool's image and/or version.
    """ # noqa: E501
    cluster_id: Optional[StrictStr] = Field(default=None, description="Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.", alias="clusterId")
    confidential_nodes: Optional[ConfidentialNodes] = Field(default=None, alias="confidentialNodes")
    disk_size_gb: Optional[StrictStr] = Field(default=None, description="Optional. The desired disk size for nodes in the node pool specified in GB. The smallest allowed disk size is 10GB. Initiates an upgrade operation that migrates the nodes in the node pool to the specified disk size.", alias="diskSizeGb")
    disk_type: Optional[StrictStr] = Field(default=None, description="Optional. The desired disk type (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified disk type.", alias="diskType")
    etag: Optional[StrictStr] = Field(default=None, description="The current etag of the node pool. If an etag is provided and does not match the current etag of the node pool, update will be blocked and an ABORTED error will be returned.")
    fast_socket: Optional[FastSocket] = Field(default=None, alias="fastSocket")
    gcfs_config: Optional[GcfsConfig] = Field(default=None, alias="gcfsConfig")
    gvnic: Optional[VirtualNIC] = None
    image_type: Optional[StrictStr] = Field(default=None, description="Required. The desired image type for the node pool. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.", alias="imageType")
    kubelet_config: Optional[NodeKubeletConfig] = Field(default=None, alias="kubeletConfig")
    labels: Optional[NodeLabels] = None
    linux_node_config: Optional[LinuxNodeConfig] = Field(default=None, alias="linuxNodeConfig")
    locations: Optional[List[StrictStr]] = Field(default=None, description="The desired list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the node pool's nodes should be located. Changing the locations for a node pool will result in nodes being either created or removed from the node pool, depending on whether locations are being added or removed.")
    logging_config: Optional[NodePoolLoggingConfig] = Field(default=None, alias="loggingConfig")
    machine_type: Optional[StrictStr] = Field(default=None, description="Optional. The desired [Google Compute Engine machine type](https://cloud.google.com/compute/docs/machine-types) for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified machine type.", alias="machineType")
    name: Optional[StrictStr] = Field(default=None, description="The name (project, location, cluster, node pool) of the node pool to update. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`.")
    node_network_config: Optional[NodeNetworkConfig] = Field(default=None, alias="nodeNetworkConfig")
    node_pool_id: Optional[StrictStr] = Field(default=None, description="Deprecated. The name of the node pool to upgrade. This field has been deprecated and replaced by the name field.", alias="nodePoolId")
    node_version: Optional[StrictStr] = Field(default=None, description="Required. The Kubernetes version to change the nodes to (typically an upgrade). Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - \"latest\": picks the highest valid Kubernetes version - \"1.X\": picks the highest valid patch+gke.N patch in the 1.X version - \"1.X.Y\": picks the highest valid gke.N patch in the 1.X.Y version - \"1.X.Y-gke.N\": picks an explicit Kubernetes version - \"-\": picks the Kubernetes master version", alias="nodeVersion")
    project_id: Optional[StrictStr] = Field(default=None, description="Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.", alias="projectId")
    queued_provisioning: Optional[QueuedProvisioning] = Field(default=None, alias="queuedProvisioning")
    resource_labels: Optional[ResourceLabels] = Field(default=None, alias="resourceLabels")
    resource_manager_tags: Optional[ResourceManagerTags] = Field(default=None, alias="resourceManagerTags")
    tags: Optional[NetworkTags] = None
    taints: Optional[NodeTaints] = None
    upgrade_settings: Optional[UpgradeSettings] = Field(default=None, alias="upgradeSettings")
    windows_node_config: Optional[WindowsNodeConfig] = Field(default=None, alias="windowsNodeConfig")
    workload_metadata_config: Optional[WorkloadMetadataConfig] = Field(default=None, alias="workloadMetadataConfig")
    zone: Optional[StrictStr] = Field(default=None, description="Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.")
    __properties: ClassVar[List[str]] = ["clusterId", "confidentialNodes", "diskSizeGb", "diskType", "etag", "fastSocket", "gcfsConfig", "gvnic", "imageType", "kubeletConfig", "labels", "linuxNodeConfig", "locations", "loggingConfig", "machineType", "name", "nodeNetworkConfig", "nodePoolId", "nodeVersion", "projectId", "queuedProvisioning", "resourceLabels", "resourceManagerTags", "tags", "taints", "upgradeSettings", "windowsNodeConfig", "workloadMetadataConfig", "zone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateNodePoolRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of confidential_nodes
        if self.confidential_nodes:
            _dict['confidentialNodes'] = self.confidential_nodes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fast_socket
        if self.fast_socket:
            _dict['fastSocket'] = self.fast_socket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcfs_config
        if self.gcfs_config:
            _dict['gcfsConfig'] = self.gcfs_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gvnic
        if self.gvnic:
            _dict['gvnic'] = self.gvnic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kubelet_config
        if self.kubelet_config:
            _dict['kubeletConfig'] = self.kubelet_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of labels
        if self.labels:
            _dict['labels'] = self.labels.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linux_node_config
        if self.linux_node_config:
            _dict['linuxNodeConfig'] = self.linux_node_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logging_config
        if self.logging_config:
            _dict['loggingConfig'] = self.logging_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_network_config
        if self.node_network_config:
            _dict['nodeNetworkConfig'] = self.node_network_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of queued_provisioning
        if self.queued_provisioning:
            _dict['queuedProvisioning'] = self.queued_provisioning.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_labels
        if self.resource_labels:
            _dict['resourceLabels'] = self.resource_labels.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_manager_tags
        if self.resource_manager_tags:
            _dict['resourceManagerTags'] = self.resource_manager_tags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tags
        if self.tags:
            _dict['tags'] = self.tags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of taints
        if self.taints:
            _dict['taints'] = self.taints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upgrade_settings
        if self.upgrade_settings:
            _dict['upgradeSettings'] = self.upgrade_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of windows_node_config
        if self.windows_node_config:
            _dict['windowsNodeConfig'] = self.windows_node_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workload_metadata_config
        if self.workload_metadata_config:
            _dict['workloadMetadataConfig'] = self.workload_metadata_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateNodePoolRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterId": obj.get("clusterId"),
            "confidentialNodes": ConfidentialNodes.from_dict(obj["confidentialNodes"]) if obj.get("confidentialNodes") is not None else None,
            "diskSizeGb": obj.get("diskSizeGb"),
            "diskType": obj.get("diskType"),
            "etag": obj.get("etag"),
            "fastSocket": FastSocket.from_dict(obj["fastSocket"]) if obj.get("fastSocket") is not None else None,
            "gcfsConfig": GcfsConfig.from_dict(obj["gcfsConfig"]) if obj.get("gcfsConfig") is not None else None,
            "gvnic": VirtualNIC.from_dict(obj["gvnic"]) if obj.get("gvnic") is not None else None,
            "imageType": obj.get("imageType"),
            "kubeletConfig": NodeKubeletConfig.from_dict(obj["kubeletConfig"]) if obj.get("kubeletConfig") is not None else None,
            "labels": NodeLabels.from_dict(obj["labels"]) if obj.get("labels") is not None else None,
            "linuxNodeConfig": LinuxNodeConfig.from_dict(obj["linuxNodeConfig"]) if obj.get("linuxNodeConfig") is not None else None,
            "locations": obj.get("locations"),
            "loggingConfig": NodePoolLoggingConfig.from_dict(obj["loggingConfig"]) if obj.get("loggingConfig") is not None else None,
            "machineType": obj.get("machineType"),
            "name": obj.get("name"),
            "nodeNetworkConfig": NodeNetworkConfig.from_dict(obj["nodeNetworkConfig"]) if obj.get("nodeNetworkConfig") is not None else None,
            "nodePoolId": obj.get("nodePoolId"),
            "nodeVersion": obj.get("nodeVersion"),
            "projectId": obj.get("projectId"),
            "queuedProvisioning": QueuedProvisioning.from_dict(obj["queuedProvisioning"]) if obj.get("queuedProvisioning") is not None else None,
            "resourceLabels": ResourceLabels.from_dict(obj["resourceLabels"]) if obj.get("resourceLabels") is not None else None,
            "resourceManagerTags": ResourceManagerTags.from_dict(obj["resourceManagerTags"]) if obj.get("resourceManagerTags") is not None else None,
            "tags": NetworkTags.from_dict(obj["tags"]) if obj.get("tags") is not None else None,
            "taints": NodeTaints.from_dict(obj["taints"]) if obj.get("taints") is not None else None,
            "upgradeSettings": UpgradeSettings.from_dict(obj["upgradeSettings"]) if obj.get("upgradeSettings") is not None else None,
            "windowsNodeConfig": WindowsNodeConfig.from_dict(obj["windowsNodeConfig"]) if obj.get("windowsNodeConfig") is not None else None,
            "workloadMetadataConfig": WorkloadMetadataConfig.from_dict(obj["workloadMetadataConfig"]) if obj.get("workloadMetadataConfig") is not None else None,
            "zone": obj.get("zone")
        })
        return _obj



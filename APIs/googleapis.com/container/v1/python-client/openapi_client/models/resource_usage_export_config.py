# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.big_query_destination import BigQueryDestination
from openapi_client.models.consumption_metering_config import ConsumptionMeteringConfig
from typing import Optional, Set
from typing_extensions import Self

class ResourceUsageExportConfig(BaseModel):
    """
    Configuration for exporting cluster resource usages.
    """ # noqa: E501
    bigquery_destination: Optional[BigQueryDestination] = Field(default=None, alias="bigqueryDestination")
    consumption_metering_config: Optional[ConsumptionMeteringConfig] = Field(default=None, alias="consumptionMeteringConfig")
    enable_network_egress_metering: Optional[StrictBool] = Field(default=None, description="Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.", alias="enableNetworkEgressMetering")
    __properties: ClassVar[List[str]] = ["bigqueryDestination", "consumptionMeteringConfig", "enableNetworkEgressMetering"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceUsageExportConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bigquery_destination
        if self.bigquery_destination:
            _dict['bigqueryDestination'] = self.bigquery_destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of consumption_metering_config
        if self.consumption_metering_config:
            _dict['consumptionMeteringConfig'] = self.consumption_metering_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceUsageExportConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bigqueryDestination": BigQueryDestination.from_dict(obj["bigqueryDestination"]) if obj.get("bigqueryDestination") is not None else None,
            "consumptionMeteringConfig": ConsumptionMeteringConfig.from_dict(obj["consumptionMeteringConfig"]) if obj.get("consumptionMeteringConfig") is not None else None,
            "enableNetworkEgressMetering": obj.get("enableNetworkEgressMetering")
        })
        return _obj



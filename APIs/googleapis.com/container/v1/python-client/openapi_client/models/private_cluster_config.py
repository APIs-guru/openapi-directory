# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.private_cluster_master_global_access_config import PrivateClusterMasterGlobalAccessConfig
from typing import Optional, Set
from typing_extensions import Self

class PrivateClusterConfig(BaseModel):
    """
    Configuration options for private clusters.
    """ # noqa: E501
    enable_private_endpoint: Optional[StrictBool] = Field(default=None, description="Whether the master's internal IP address is used as the cluster endpoint.", alias="enablePrivateEndpoint")
    enable_private_nodes: Optional[StrictBool] = Field(default=None, description="Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.", alias="enablePrivateNodes")
    master_global_access_config: Optional[PrivateClusterMasterGlobalAccessConfig] = Field(default=None, alias="masterGlobalAccessConfig")
    master_ipv4_cidr_block: Optional[StrictStr] = Field(default=None, description="The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.", alias="masterIpv4CidrBlock")
    peering_name: Optional[StrictStr] = Field(default=None, description="Output only. The peering name in the customer VPC used by this cluster.", alias="peeringName")
    private_endpoint: Optional[StrictStr] = Field(default=None, description="Output only. The internal IP address of this cluster's master endpoint.", alias="privateEndpoint")
    private_endpoint_subnetwork: Optional[StrictStr] = Field(default=None, description="Subnet to provision the master's private endpoint during cluster creation. Specified in projects/*/regions/*/subnetworks/* format.", alias="privateEndpointSubnetwork")
    public_endpoint: Optional[StrictStr] = Field(default=None, description="Output only. The external IP address of this cluster's master endpoint.", alias="publicEndpoint")
    __properties: ClassVar[List[str]] = ["enablePrivateEndpoint", "enablePrivateNodes", "masterGlobalAccessConfig", "masterIpv4CidrBlock", "peeringName", "privateEndpoint", "privateEndpointSubnetwork", "publicEndpoint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrivateClusterConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of master_global_access_config
        if self.master_global_access_config:
            _dict['masterGlobalAccessConfig'] = self.master_global_access_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrivateClusterConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enablePrivateEndpoint": obj.get("enablePrivateEndpoint"),
            "enablePrivateNodes": obj.get("enablePrivateNodes"),
            "masterGlobalAccessConfig": PrivateClusterMasterGlobalAccessConfig.from_dict(obj["masterGlobalAccessConfig"]) if obj.get("masterGlobalAccessConfig") is not None else None,
            "masterIpv4CidrBlock": obj.get("masterIpv4CidrBlock"),
            "peeringName": obj.get("peeringName"),
            "privateEndpoint": obj.get("privateEndpoint"),
            "privateEndpointSubnetwork": obj.get("privateEndpointSubnetwork"),
            "publicEndpoint": obj.get("publicEndpoint")
        })
        return _obj



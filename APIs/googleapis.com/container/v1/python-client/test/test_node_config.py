# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.node_config import NodeConfig

class TestNodeConfig(unittest.TestCase):
    """NodeConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NodeConfig:
        """Test NodeConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NodeConfig`
        """
        model = NodeConfig()
        if include_optional:
            return NodeConfig(
                accelerators = [
                    openapi_client.models.accelerator_config.AcceleratorConfig(
                        accelerator_count = '', 
                        accelerator_type = '', 
                        gpu_driver_installation_config = openapi_client.models.gpu_driver_installation_config.GPUDriverInstallationConfig(
                            gpu_driver_version = 'GPU_DRIVER_VERSION_UNSPECIFIED', ), 
                        gpu_partition_size = '', 
                        gpu_sharing_config = openapi_client.models.gpu_sharing_config.GPUSharingConfig(
                            gpu_sharing_strategy = 'GPU_SHARING_STRATEGY_UNSPECIFIED', 
                            max_shared_clients_per_gpu = '', ), )
                    ],
                advanced_machine_features = openapi_client.models.advanced_machine_features.AdvancedMachineFeatures(
                    threads_per_core = '', ),
                boot_disk_kms_key = '',
                confidential_nodes = openapi_client.models.confidential_nodes.ConfidentialNodes(
                    enabled = True, ),
                disk_size_gb = 56,
                disk_type = '',
                enable_confidential_storage = True,
                ephemeral_storage_local_ssd_config = openapi_client.models.ephemeral_storage_local_ssd_config.EphemeralStorageLocalSsdConfig(
                    local_ssd_count = 56, ),
                fast_socket = openapi_client.models.fast_socket.FastSocket(
                    enabled = True, ),
                gcfs_config = openapi_client.models.gcfs_config.GcfsConfig(
                    enabled = True, ),
                gvnic = openapi_client.models.virtual_nic.VirtualNIC(
                    enabled = True, ),
                image_type = '',
                kubelet_config = openapi_client.models.node_kubelet_config.NodeKubeletConfig(
                    cpu_cfs_quota = True, 
                    cpu_cfs_quota_period = '', 
                    cpu_manager_policy = '', 
                    insecure_kubelet_readonly_port_enabled = True, 
                    pod_pids_limit = '', ),
                labels = {
                    'key' : ''
                    },
                linux_node_config = openapi_client.models.linux_node_config.LinuxNodeConfig(
                    cgroup_mode = 'CGROUP_MODE_UNSPECIFIED', 
                    sysctls = {
                        'key' : ''
                        }, ),
                local_nvme_ssd_block_config = openapi_client.models.local_nvme_ssd_block_config.LocalNvmeSsdBlockConfig(
                    local_ssd_count = 56, ),
                local_ssd_count = 56,
                logging_config = openapi_client.models.node_pool_logging_config.NodePoolLoggingConfig(
                    variant_config = openapi_client.models.logging_variant_config.LoggingVariantConfig(
                        variant = 'VARIANT_UNSPECIFIED', ), ),
                machine_type = '',
                metadata = {
                    'key' : ''
                    },
                min_cpu_platform = '',
                node_group = '',
                oauth_scopes = [
                    ''
                    ],
                preemptible = True,
                reservation_affinity = openapi_client.models.reservation_affinity.ReservationAffinity(
                    consume_reservation_type = 'UNSPECIFIED', 
                    key = '', 
                    values = [
                        ''
                        ], ),
                resource_labels = {
                    'key' : ''
                    },
                resource_manager_tags = openapi_client.models.resource_manager_tags.ResourceManagerTags(
                    tags = {
                        'key' : ''
                        }, ),
                sandbox_config = openapi_client.models.sandbox_config.SandboxConfig(
                    type = 'UNSPECIFIED', ),
                secondary_boot_disks = [
                    openapi_client.models.secondary_boot_disk.SecondaryBootDisk(
                        disk_image = '', 
                        mode = 'MODE_UNSPECIFIED', )
                    ],
                service_account = '',
                shielded_instance_config = openapi_client.models.shielded_instance_config.ShieldedInstanceConfig(
                    enable_integrity_monitoring = True, 
                    enable_secure_boot = True, ),
                sole_tenant_config = openapi_client.models.sole_tenant_config.SoleTenantConfig(
                    node_affinities = [
                        openapi_client.models.node_affinity.NodeAffinity(
                            key = '', 
                            operator = 'OPERATOR_UNSPECIFIED', 
                            values = [
                                ''
                                ], )
                        ], ),
                spot = True,
                tags = [
                    ''
                    ],
                taints = [
                    openapi_client.models.node_taint.NodeTaint(
                        effect = 'EFFECT_UNSPECIFIED', 
                        key = '', 
                        value = '', )
                    ],
                windows_node_config = openapi_client.models.windows_node_config.WindowsNodeConfig(
                    os_version = 'OS_VERSION_UNSPECIFIED', ),
                workload_metadata_config = openapi_client.models.workload_metadata_config.WorkloadMetadataConfig(
                    mode = 'MODE_UNSPECIFIED', )
            )
        else:
            return NodeConfig(
        )
        """

    def testNodeConfig(self):
        """Test NodeConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

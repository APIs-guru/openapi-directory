# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_node_pools_response import ListNodePoolsResponse

class TestListNodePoolsResponse(unittest.TestCase):
    """ListNodePoolsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListNodePoolsResponse:
        """Test ListNodePoolsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListNodePoolsResponse`
        """
        model = ListNodePoolsResponse()
        if include_optional:
            return ListNodePoolsResponse(
                node_pools = [
                    openapi_client.models.node_pool.NodePool(
                        autoscaling = openapi_client.models.node_pool_autoscaling.NodePoolAutoscaling(
                            autoprovisioned = True, 
                            enabled = True, 
                            location_policy = 'LOCATION_POLICY_UNSPECIFIED', 
                            max_node_count = 56, 
                            min_node_count = 56, 
                            total_max_node_count = 56, 
                            total_min_node_count = 56, ), 
                        best_effort_provisioning = openapi_client.models.best_effort_provisioning.BestEffortProvisioning(
                            enabled = True, 
                            min_provision_nodes = 56, ), 
                        conditions = [
                            openapi_client.models.status_condition.StatusCondition(
                                canonical_code = 'OK', 
                                code = 'UNKNOWN', 
                                message = '', )
                            ], 
                        config = openapi_client.models.node_config.NodeConfig(
                            accelerators = [
                                openapi_client.models.accelerator_config.AcceleratorConfig(
                                    accelerator_count = '', 
                                    accelerator_type = '', 
                                    gpu_driver_installation_config = openapi_client.models.gpu_driver_installation_config.GPUDriverInstallationConfig(
                                        gpu_driver_version = 'GPU_DRIVER_VERSION_UNSPECIFIED', ), 
                                    gpu_partition_size = '', 
                                    gpu_sharing_config = openapi_client.models.gpu_sharing_config.GPUSharingConfig(
                                        gpu_sharing_strategy = 'GPU_SHARING_STRATEGY_UNSPECIFIED', 
                                        max_shared_clients_per_gpu = '', ), )
                                ], 
                            advanced_machine_features = openapi_client.models.advanced_machine_features.AdvancedMachineFeatures(
                                threads_per_core = '', ), 
                            boot_disk_kms_key = '', 
                            confidential_nodes = openapi_client.models.confidential_nodes.ConfidentialNodes(
                                enabled = True, ), 
                            disk_size_gb = 56, 
                            disk_type = '', 
                            enable_confidential_storage = True, 
                            ephemeral_storage_local_ssd_config = openapi_client.models.ephemeral_storage_local_ssd_config.EphemeralStorageLocalSsdConfig(
                                local_ssd_count = 56, ), 
                            fast_socket = openapi_client.models.fast_socket.FastSocket(
                                enabled = True, ), 
                            gcfs_config = openapi_client.models.gcfs_config.GcfsConfig(
                                enabled = True, ), 
                            gvnic = openapi_client.models.virtual_nic.VirtualNIC(
                                enabled = True, ), 
                            image_type = '', 
                            kubelet_config = openapi_client.models.node_kubelet_config.NodeKubeletConfig(
                                cpu_cfs_quota = True, 
                                cpu_cfs_quota_period = '', 
                                cpu_manager_policy = '', 
                                insecure_kubelet_readonly_port_enabled = True, 
                                pod_pids_limit = '', ), 
                            labels = {
                                'key' : ''
                                }, 
                            linux_node_config = openapi_client.models.linux_node_config.LinuxNodeConfig(
                                cgroup_mode = 'CGROUP_MODE_UNSPECIFIED', 
                                sysctls = {
                                    'key' : ''
                                    }, ), 
                            local_nvme_ssd_block_config = openapi_client.models.local_nvme_ssd_block_config.LocalNvmeSsdBlockConfig(
                                local_ssd_count = 56, ), 
                            local_ssd_count = 56, 
                            logging_config = openapi_client.models.node_pool_logging_config.NodePoolLoggingConfig(
                                variant_config = openapi_client.models.logging_variant_config.LoggingVariantConfig(
                                    variant = 'VARIANT_UNSPECIFIED', ), ), 
                            machine_type = '', 
                            metadata = {
                                'key' : ''
                                }, 
                            min_cpu_platform = '', 
                            node_group = '', 
                            oauth_scopes = [
                                ''
                                ], 
                            preemptible = True, 
                            reservation_affinity = openapi_client.models.reservation_affinity.ReservationAffinity(
                                consume_reservation_type = 'UNSPECIFIED', 
                                key = '', 
                                values = [
                                    ''
                                    ], ), 
                            resource_labels = {
                                'key' : ''
                                }, 
                            resource_manager_tags = openapi_client.models.resource_manager_tags.ResourceManagerTags(
                                tags = {
                                    'key' : ''
                                    }, ), 
                            sandbox_config = openapi_client.models.sandbox_config.SandboxConfig(
                                type = 'UNSPECIFIED', ), 
                            secondary_boot_disks = [
                                openapi_client.models.secondary_boot_disk.SecondaryBootDisk(
                                    disk_image = '', 
                                    mode = 'MODE_UNSPECIFIED', )
                                ], 
                            service_account = '', 
                            shielded_instance_config = openapi_client.models.shielded_instance_config.ShieldedInstanceConfig(
                                enable_integrity_monitoring = True, 
                                enable_secure_boot = True, ), 
                            sole_tenant_config = openapi_client.models.sole_tenant_config.SoleTenantConfig(
                                node_affinities = [
                                    openapi_client.models.node_affinity.NodeAffinity(
                                        key = '', 
                                        operator = 'OPERATOR_UNSPECIFIED', )
                                    ], ), 
                            spot = True, 
                            tags = [
                                ''
                                ], 
                            taints = [
                                openapi_client.models.node_taint.NodeTaint(
                                    effect = 'EFFECT_UNSPECIFIED', 
                                    key = '', 
                                    value = '', )
                                ], 
                            windows_node_config = openapi_client.models.windows_node_config.WindowsNodeConfig(
                                os_version = 'OS_VERSION_UNSPECIFIED', ), 
                            workload_metadata_config = openapi_client.models.workload_metadata_config.WorkloadMetadataConfig(
                                mode = 'MODE_UNSPECIFIED', ), ), 
                        etag = '', 
                        initial_node_count = 56, 
                        instance_group_urls = [
                            ''
                            ], 
                        locations = [
                            ''
                            ], 
                        management = openapi_client.models.node_management.NodeManagement(
                            auto_repair = True, 
                            auto_upgrade = True, 
                            upgrade_options = openapi_client.models.auto_upgrade_options.AutoUpgradeOptions(
                                auto_upgrade_start_time = '', 
                                description = '', ), ), 
                        max_pods_constraint = openapi_client.models.max_pods_constraint.MaxPodsConstraint(
                            max_pods_per_node = '', ), 
                        name = '', 
                        network_config = openapi_client.models.node_network_config.NodeNetworkConfig(
                            additional_node_network_configs = [
                                openapi_client.models.additional_node_network_config.AdditionalNodeNetworkConfig(
                                    network = '', 
                                    subnetwork = '', )
                                ], 
                            additional_pod_network_configs = [
                                openapi_client.models.additional_pod_network_config.AdditionalPodNetworkConfig(
                                    max_pods_per_node = openapi_client.models.max_pods_constraint.MaxPodsConstraint(), 
                                    secondary_pod_range = '', 
                                    subnetwork = '', )
                                ], 
                            create_pod_range = True, 
                            enable_private_nodes = True, 
                            network_performance_config = openapi_client.models.network_performance_config.NetworkPerformanceConfig(
                                total_egress_bandwidth_tier = 'TIER_UNSPECIFIED', ), 
                            pod_cidr_overprovision_config = openapi_client.models.pod_cidr_overprovision_config.PodCIDROverprovisionConfig(
                                disable = True, ), 
                            pod_ipv4_cidr_block = '', 
                            pod_ipv4_range_utilization = 1.337, 
                            pod_range = '', ), 
                        placement_policy = openapi_client.models.placement_policy.PlacementPolicy(
                            policy_name = '', 
                            tpu_topology = '', 
                            type = 'TYPE_UNSPECIFIED', ), 
                        pod_ipv4_cidr_size = 56, 
                        queued_provisioning = openapi_client.models.queued_provisioning.QueuedProvisioning(
                            enabled = True, ), 
                        self_link = '', 
                        status = 'STATUS_UNSPECIFIED', 
                        status_message = '', 
                        update_info = openapi_client.models.update_info.UpdateInfo(
                            blue_green_info = openapi_client.models.blue_green_info.BlueGreenInfo(
                                blue_instance_group_urls = [
                                    ''
                                    ], 
                                blue_pool_deletion_start_time = '', 
                                green_instance_group_urls = [
                                    ''
                                    ], 
                                green_pool_version = '', 
                                phase = 'PHASE_UNSPECIFIED', ), ), 
                        upgrade_settings = openapi_client.models.upgrade_settings.UpgradeSettings(
                            blue_green_settings = openapi_client.models.blue_green_settings.BlueGreenSettings(
                                node_pool_soak_duration = '', 
                                standard_rollout_policy = openapi_client.models.standard_rollout_policy.StandardRolloutPolicy(
                                    batch_node_count = 56, 
                                    batch_percentage = 1.337, 
                                    batch_soak_duration = '', ), ), 
                            max_surge = 56, 
                            max_unavailable = 56, 
                            strategy = 'NODE_POOL_UPDATE_STRATEGY_UNSPECIFIED', ), 
                        version = '', )
                    ]
            )
        else:
            return ListNodePoolsResponse(
        )
        """

    def testListNodePoolsResponse(self):
        """Test ListNodePoolsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

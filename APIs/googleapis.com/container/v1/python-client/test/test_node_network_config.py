# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.node_network_config import NodeNetworkConfig

class TestNodeNetworkConfig(unittest.TestCase):
    """NodeNetworkConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NodeNetworkConfig:
        """Test NodeNetworkConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NodeNetworkConfig`
        """
        model = NodeNetworkConfig()
        if include_optional:
            return NodeNetworkConfig(
                additional_node_network_configs = [
                    openapi_client.models.additional_node_network_config.AdditionalNodeNetworkConfig(
                        network = '', 
                        subnetwork = '', )
                    ],
                additional_pod_network_configs = [
                    openapi_client.models.additional_pod_network_config.AdditionalPodNetworkConfig(
                        max_pods_per_node = openapi_client.models.max_pods_constraint.MaxPodsConstraint(), 
                        secondary_pod_range = '', 
                        subnetwork = '', )
                    ],
                create_pod_range = True,
                enable_private_nodes = True,
                network_performance_config = openapi_client.models.network_performance_config.NetworkPerformanceConfig(
                    total_egress_bandwidth_tier = 'TIER_UNSPECIFIED', ),
                pod_cidr_overprovision_config = openapi_client.models.pod_cidr_overprovision_config.PodCIDROverprovisionConfig(
                    disable = True, ),
                pod_ipv4_cidr_block = '',
                pod_ipv4_range_utilization = 1.337,
                pod_range = ''
            )
        else:
            return NodeNetworkConfig(
        )
        """

    def testNodeNetworkConfig(self):
        """Test NodeNetworkConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

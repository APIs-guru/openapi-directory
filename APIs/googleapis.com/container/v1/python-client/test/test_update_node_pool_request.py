# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.update_node_pool_request import UpdateNodePoolRequest

class TestUpdateNodePoolRequest(unittest.TestCase):
    """UpdateNodePoolRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateNodePoolRequest:
        """Test UpdateNodePoolRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateNodePoolRequest`
        """
        model = UpdateNodePoolRequest()
        if include_optional:
            return UpdateNodePoolRequest(
                cluster_id = '',
                confidential_nodes = openapi_client.models.confidential_nodes.ConfidentialNodes(
                    enabled = True, ),
                disk_size_gb = '',
                disk_type = '',
                etag = '',
                fast_socket = openapi_client.models.fast_socket.FastSocket(
                    enabled = True, ),
                gcfs_config = openapi_client.models.gcfs_config.GcfsConfig(
                    enabled = True, ),
                gvnic = openapi_client.models.virtual_nic.VirtualNIC(
                    enabled = True, ),
                image_type = '',
                kubelet_config = openapi_client.models.node_kubelet_config.NodeKubeletConfig(
                    cpu_cfs_quota = True, 
                    cpu_cfs_quota_period = '', 
                    cpu_manager_policy = '', 
                    insecure_kubelet_readonly_port_enabled = True, 
                    pod_pids_limit = '', ),
                labels = openapi_client.models.node_labels.NodeLabels(
                    labels = {
                        'key' : ''
                        }, ),
                linux_node_config = openapi_client.models.linux_node_config.LinuxNodeConfig(
                    cgroup_mode = 'CGROUP_MODE_UNSPECIFIED', 
                    sysctls = {
                        'key' : ''
                        }, ),
                locations = [
                    ''
                    ],
                logging_config = openapi_client.models.node_pool_logging_config.NodePoolLoggingConfig(
                    variant_config = openapi_client.models.logging_variant_config.LoggingVariantConfig(
                        variant = 'VARIANT_UNSPECIFIED', ), ),
                machine_type = '',
                name = '',
                node_network_config = openapi_client.models.node_network_config.NodeNetworkConfig(
                    additional_node_network_configs = [
                        openapi_client.models.additional_node_network_config.AdditionalNodeNetworkConfig(
                            network = '', 
                            subnetwork = '', )
                        ], 
                    additional_pod_network_configs = [
                        openapi_client.models.additional_pod_network_config.AdditionalPodNetworkConfig(
                            max_pods_per_node = openapi_client.models.max_pods_constraint.MaxPodsConstraint(), 
                            secondary_pod_range = '', 
                            subnetwork = '', )
                        ], 
                    create_pod_range = True, 
                    enable_private_nodes = True, 
                    network_performance_config = openapi_client.models.network_performance_config.NetworkPerformanceConfig(
                        total_egress_bandwidth_tier = 'TIER_UNSPECIFIED', ), 
                    pod_cidr_overprovision_config = openapi_client.models.pod_cidr_overprovision_config.PodCIDROverprovisionConfig(
                        disable = True, ), 
                    pod_ipv4_cidr_block = '', 
                    pod_ipv4_range_utilization = 1.337, 
                    pod_range = '', ),
                node_pool_id = '',
                node_version = '',
                project_id = '',
                queued_provisioning = openapi_client.models.queued_provisioning.QueuedProvisioning(
                    enabled = True, ),
                resource_labels = openapi_client.models.resource_labels.ResourceLabels(
                    labels = {
                        'key' : ''
                        }, ),
                resource_manager_tags = openapi_client.models.resource_manager_tags.ResourceManagerTags(
                    tags = {
                        'key' : ''
                        }, ),
                tags = openapi_client.models.network_tags.NetworkTags(
                    tags = [
                        ''
                        ], ),
                taints = openapi_client.models.node_taints.NodeTaints(
                    taints = [
                        openapi_client.models.node_taint.NodeTaint(
                            effect = 'EFFECT_UNSPECIFIED', 
                            key = '', 
                            value = '', )
                        ], ),
                upgrade_settings = openapi_client.models.upgrade_settings.UpgradeSettings(
                    blue_green_settings = openapi_client.models.blue_green_settings.BlueGreenSettings(
                        node_pool_soak_duration = '', 
                        standard_rollout_policy = openapi_client.models.standard_rollout_policy.StandardRolloutPolicy(
                            batch_node_count = 56, 
                            batch_percentage = 1.337, 
                            batch_soak_duration = '', ), ), 
                    max_surge = 56, 
                    max_unavailable = 56, 
                    strategy = 'NODE_POOL_UPDATE_STRATEGY_UNSPECIFIED', ),
                windows_node_config = openapi_client.models.windows_node_config.WindowsNodeConfig(
                    os_version = 'OS_VERSION_UNSPECIFIED', ),
                workload_metadata_config = openapi_client.models.workload_metadata_config.WorkloadMetadataConfig(
                    mode = 'MODE_UNSPECIFIED', ),
                zone = ''
            )
        else:
            return UpdateNodePoolRequest(
        )
        """

    def testUpdateNodePoolRequest(self):
        """Test UpdateNodePoolRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

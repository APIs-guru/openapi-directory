# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SecurityBulletinEvent(BaseModel):
    """
    SecurityBulletinEvent is a notification sent to customers when a security bulletin has been posted that they are vulnerable to.
    """ # noqa: E501
    affected_supported_minors: Optional[List[StrictStr]] = Field(default=None, description="The GKE minor versions affected by this vulnerability.", alias="affectedSupportedMinors")
    brief_description: Optional[StrictStr] = Field(default=None, description="A brief description of the bulletin. See the bulletin pointed to by the bulletin_uri field for an expanded description.", alias="briefDescription")
    bulletin_id: Optional[StrictStr] = Field(default=None, description="The ID of the bulletin corresponding to the vulnerability.", alias="bulletinId")
    bulletin_uri: Optional[StrictStr] = Field(default=None, description="The URI link to the bulletin on the website for more information.", alias="bulletinUri")
    cve_ids: Optional[List[StrictStr]] = Field(default=None, description="The CVEs associated with this bulletin.", alias="cveIds")
    manual_steps_required: Optional[StrictBool] = Field(default=None, description="If this field is specified, it means there are manual steps that the user must take to make their clusters safe.", alias="manualStepsRequired")
    patched_versions: Optional[List[StrictStr]] = Field(default=None, description="The GKE versions where this vulnerability is patched.", alias="patchedVersions")
    resource_type_affected: Optional[StrictStr] = Field(default=None, description="The resource type (node/control plane) that has the vulnerability. Multiple notifications (1 notification per resource type) will be sent for a vulnerability that affects > 1 resource type.", alias="resourceTypeAffected")
    severity: Optional[StrictStr] = Field(default=None, description="The severity of this bulletin as it relates to GKE.")
    suggested_upgrade_target: Optional[StrictStr] = Field(default=None, description="This represents a version selected from the patched_versions field that the cluster receiving this notification should most likely want to upgrade to based on its current version. Note that if this notification is being received by a given cluster, it means that this version is currently available as an upgrade target in that cluster's location.", alias="suggestedUpgradeTarget")
    __properties: ClassVar[List[str]] = ["affectedSupportedMinors", "briefDescription", "bulletinId", "bulletinUri", "cveIds", "manualStepsRequired", "patchedVersions", "resourceTypeAffected", "severity", "suggestedUpgradeTarget"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecurityBulletinEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecurityBulletinEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affectedSupportedMinors": obj.get("affectedSupportedMinors"),
            "briefDescription": obj.get("briefDescription"),
            "bulletinId": obj.get("bulletinId"),
            "bulletinUri": obj.get("bulletinUri"),
            "cveIds": obj.get("cveIds"),
            "manualStepsRequired": obj.get("manualStepsRequired"),
            "patchedVersions": obj.get("patchedVersions"),
            "resourceTypeAffected": obj.get("resourceTypeAffected"),
            "severity": obj.get("severity"),
            "suggestedUpgradeTarget": obj.get("suggestedUpgradeTarget")
        })
        return _obj



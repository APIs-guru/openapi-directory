# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.autoprovisioning_node_pool_defaults import AutoprovisioningNodePoolDefaults
from openapi_client.models.resource_limit import ResourceLimit
from typing import Optional, Set
from typing_extensions import Self

class ClusterAutoscaling(BaseModel):
    """
    ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
    """ # noqa: E501
    autoprovisioning_locations: Optional[List[StrictStr]] = Field(default=None, description="The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.", alias="autoprovisioningLocations")
    autoprovisioning_node_pool_defaults: Optional[AutoprovisioningNodePoolDefaults] = Field(default=None, alias="autoprovisioningNodePoolDefaults")
    autoscaling_profile: Optional[StrictStr] = Field(default=None, description="Defines autoscaling behaviour.", alias="autoscalingProfile")
    enable_node_autoprovisioning: Optional[StrictBool] = Field(default=None, description="Enables automatic node pool creation and deletion.", alias="enableNodeAutoprovisioning")
    resource_limits: Optional[List[ResourceLimit]] = Field(default=None, description="Contains global constraints regarding minimum and maximum amount of resources in the cluster.", alias="resourceLimits")
    __properties: ClassVar[List[str]] = ["autoprovisioningLocations", "autoprovisioningNodePoolDefaults", "autoscalingProfile", "enableNodeAutoprovisioning", "resourceLimits"]

    @field_validator('autoscaling_profile')
    def autoscaling_profile_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROFILE_UNSPECIFIED', 'OPTIMIZE_UTILIZATION', 'BALANCED']):
            raise ValueError("must be one of enum values ('PROFILE_UNSPECIFIED', 'OPTIMIZE_UTILIZATION', 'BALANCED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterAutoscaling from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of autoprovisioning_node_pool_defaults
        if self.autoprovisioning_node_pool_defaults:
            _dict['autoprovisioningNodePoolDefaults'] = self.autoprovisioning_node_pool_defaults.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in resource_limits (list)
        _items = []
        if self.resource_limits:
            for _item_resource_limits in self.resource_limits:
                if _item_resource_limits:
                    _items.append(_item_resource_limits.to_dict())
            _dict['resourceLimits'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterAutoscaling from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoprovisioningLocations": obj.get("autoprovisioningLocations"),
            "autoprovisioningNodePoolDefaults": AutoprovisioningNodePoolDefaults.from_dict(obj["autoprovisioningNodePoolDefaults"]) if obj.get("autoprovisioningNodePoolDefaults") is not None else None,
            "autoscalingProfile": obj.get("autoscalingProfile"),
            "enableNodeAutoprovisioning": obj.get("enableNodeAutoprovisioning"),
            "resourceLimits": [ResourceLimit.from_dict(_item) for _item in obj["resourceLimits"]] if obj.get("resourceLimits") is not None else None
        })
        return _obj



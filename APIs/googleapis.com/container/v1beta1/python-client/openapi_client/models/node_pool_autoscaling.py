# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NodePoolAutoscaling(BaseModel):
    """
    NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
    """ # noqa: E501
    autoprovisioned: Optional[StrictBool] = Field(default=None, description="Can this node pool be deleted automatically.")
    enabled: Optional[StrictBool] = Field(default=None, description="Is autoscaling enabled for this node pool.")
    location_policy: Optional[StrictStr] = Field(default=None, description="Location policy used when scaling up a nodepool.", alias="locationPolicy")
    max_node_count: Optional[StrictInt] = Field(default=None, description="Maximum number of nodes for one location in the NodePool. Must be >= min_node_count. There has to be enough quota to scale up the cluster.", alias="maxNodeCount")
    min_node_count: Optional[StrictInt] = Field(default=None, description="Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= max_node_count.", alias="minNodeCount")
    total_max_node_count: Optional[StrictInt] = Field(default=None, description="Maximum number of nodes in the node pool. Must be greater than total_min_node_count. There has to be enough quota to scale up the cluster. The total_*_node_count fields are mutually exclusive with the *_node_count fields.", alias="totalMaxNodeCount")
    total_min_node_count: Optional[StrictInt] = Field(default=None, description="Minimum number of nodes in the node pool. Must be greater than 1 less than total_max_node_count. The total_*_node_count fields are mutually exclusive with the *_node_count fields.", alias="totalMinNodeCount")
    __properties: ClassVar[List[str]] = ["autoprovisioned", "enabled", "locationPolicy", "maxNodeCount", "minNodeCount", "totalMaxNodeCount", "totalMinNodeCount"]

    @field_validator('location_policy')
    def location_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LOCATION_POLICY_UNSPECIFIED', 'BALANCED', 'ANY']):
            raise ValueError("must be one of enum values ('LOCATION_POLICY_UNSPECIFIED', 'BALANCED', 'ANY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NodePoolAutoscaling from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NodePoolAutoscaling from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoprovisioned": obj.get("autoprovisioned"),
            "enabled": obj.get("enabled"),
            "locationPolicy": obj.get("locationPolicy"),
            "maxNodeCount": obj.get("maxNodeCount"),
            "minNodeCount": obj.get("minNodeCount"),
            "totalMaxNodeCount": obj.get("totalMaxNodeCount"),
            "totalMinNodeCount": obj.get("totalMinNodeCount")
        })
        return _obj



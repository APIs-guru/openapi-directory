# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cidr_block import CidrBlock
from typing import Optional, Set
from typing_extensions import Self

class MasterAuthorizedNetworksConfig(BaseModel):
    """
    Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
    """ # noqa: E501
    cidr_blocks: Optional[List[CidrBlock]] = Field(default=None, description="cidr_blocks define up to 10 external networks that could access Kubernetes master through HTTPS.", alias="cidrBlocks")
    enabled: Optional[StrictBool] = Field(default=None, description="Whether or not master authorized networks is enabled.")
    gcp_public_cidrs_access_enabled: Optional[StrictBool] = Field(default=None, description="Whether master is accessbile via Google Compute Engine Public IP addresses.", alias="gcpPublicCidrsAccessEnabled")
    __properties: ClassVar[List[str]] = ["cidrBlocks", "enabled", "gcpPublicCidrsAccessEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MasterAuthorizedNetworksConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cidr_blocks (list)
        _items = []
        if self.cidr_blocks:
            for _item_cidr_blocks in self.cidr_blocks:
                if _item_cidr_blocks:
                    _items.append(_item_cidr_blocks.to_dict())
            _dict['cidrBlocks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MasterAuthorizedNetworksConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cidrBlocks": [CidrBlock.from_dict(_item) for _item in obj["cidrBlocks"]] if obj.get("cidrBlocks") is not None else None,
            "enabled": obj.get("enabled"),
            "gcpPublicCidrsAccessEnabled": obj.get("gcpPublicCidrsAccessEnabled")
        })
        return _obj



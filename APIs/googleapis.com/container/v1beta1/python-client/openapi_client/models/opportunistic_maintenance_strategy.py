# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OpportunisticMaintenanceStrategy(BaseModel):
    """
    Strategy that will trigger maintenance on behalf of the customer.
    """ # noqa: E501
    maintenance_availability_window: Optional[StrictStr] = Field(default=None, description="The window of time that opportunistic maintenance can run. Example: A setting of 14 days implies that opportunistic maintenance can only be ran in the 2 weeks leading up to the scheduled maintenance date. Setting 28 days allows opportunistic maintenance to run at any time in the scheduled maintenance window (all `PERIODIC` maintenance is set 28 days in advance).", alias="maintenanceAvailabilityWindow")
    min_nodes_per_pool: Optional[StrictStr] = Field(default=None, description="The minimum nodes required to be available in a pool. Blocks maintenance if it would cause the number of running nodes to dip below this value.", alias="minNodesPerPool")
    node_idle_time_window: Optional[StrictStr] = Field(default=None, description="The amount of time that a node can remain idle (no customer owned workloads running), before triggering maintenance.", alias="nodeIdleTimeWindow")
    __properties: ClassVar[List[str]] = ["maintenanceAvailabilityWindow", "minNodesPerPool", "nodeIdleTimeWindow"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpportunisticMaintenanceStrategy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpportunisticMaintenanceStrategy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maintenanceAvailabilityWindow": obj.get("maintenanceAvailabilityWindow"),
            "minNodesPerPool": obj.get("minNodesPerPool"),
            "nodeIdleTimeWindow": obj.get("nodeIdleTimeWindow")
        })
        return _obj



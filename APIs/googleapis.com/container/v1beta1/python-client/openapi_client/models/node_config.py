# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.accelerator_config import AcceleratorConfig
from openapi_client.models.advanced_machine_features import AdvancedMachineFeatures
from openapi_client.models.confidential_nodes import ConfidentialNodes
from openapi_client.models.ephemeral_storage_config import EphemeralStorageConfig
from openapi_client.models.ephemeral_storage_local_ssd_config import EphemeralStorageLocalSsdConfig
from openapi_client.models.fast_socket import FastSocket
from openapi_client.models.gcfs_config import GcfsConfig
from openapi_client.models.host_maintenance_policy import HostMaintenancePolicy
from openapi_client.models.linux_node_config import LinuxNodeConfig
from openapi_client.models.local_nvme_ssd_block_config import LocalNvmeSsdBlockConfig
from openapi_client.models.node_kubelet_config import NodeKubeletConfig
from openapi_client.models.node_pool_logging_config import NodePoolLoggingConfig
from openapi_client.models.node_taint import NodeTaint
from openapi_client.models.reservation_affinity import ReservationAffinity
from openapi_client.models.resource_manager_tags import ResourceManagerTags
from openapi_client.models.sandbox_config import SandboxConfig
from openapi_client.models.secondary_boot_disk import SecondaryBootDisk
from openapi_client.models.shielded_instance_config import ShieldedInstanceConfig
from openapi_client.models.sole_tenant_config import SoleTenantConfig
from openapi_client.models.virtual_nic import VirtualNIC
from openapi_client.models.windows_node_config import WindowsNodeConfig
from openapi_client.models.workload_metadata_config import WorkloadMetadataConfig
from typing import Optional, Set
from typing_extensions import Self

class NodeConfig(BaseModel):
    """
    Parameters that describe the nodes in a cluster. GKE Autopilot clusters do not recognize parameters in `NodeConfig`. Use AutoprovisioningNodePoolDefaults instead.
    """ # noqa: E501
    accelerators: Optional[List[AcceleratorConfig]] = Field(default=None, description="A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.")
    advanced_machine_features: Optional[AdvancedMachineFeatures] = Field(default=None, alias="advancedMachineFeatures")
    boot_disk_kms_key: Optional[StrictStr] = Field(default=None, description=" The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption", alias="bootDiskKmsKey")
    confidential_nodes: Optional[ConfidentialNodes] = Field(default=None, alias="confidentialNodes")
    disk_size_gb: Optional[StrictInt] = Field(default=None, description="Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.", alias="diskSizeGb")
    disk_type: Optional[StrictStr] = Field(default=None, description="Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'", alias="diskType")
    enable_confidential_storage: Optional[StrictBool] = Field(default=None, description="Optional. Reserved for future use.", alias="enableConfidentialStorage")
    ephemeral_storage_config: Optional[EphemeralStorageConfig] = Field(default=None, alias="ephemeralStorageConfig")
    ephemeral_storage_local_ssd_config: Optional[EphemeralStorageLocalSsdConfig] = Field(default=None, alias="ephemeralStorageLocalSsdConfig")
    fast_socket: Optional[FastSocket] = Field(default=None, alias="fastSocket")
    gcfs_config: Optional[GcfsConfig] = Field(default=None, alias="gcfsConfig")
    gvnic: Optional[VirtualNIC] = None
    host_maintenance_policy: Optional[HostMaintenancePolicy] = Field(default=None, alias="hostMaintenancePolicy")
    image_type: Optional[StrictStr] = Field(default=None, description="The image type to use for this node. Note that for a given image type, the latest version of it will be used. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.", alias="imageType")
    kubelet_config: Optional[NodeKubeletConfig] = Field(default=None, alias="kubeletConfig")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/")
    linux_node_config: Optional[LinuxNodeConfig] = Field(default=None, alias="linuxNodeConfig")
    local_nvme_ssd_block_config: Optional[LocalNvmeSsdBlockConfig] = Field(default=None, alias="localNvmeSsdBlockConfig")
    local_ssd_count: Optional[StrictInt] = Field(default=None, description="The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.", alias="localSsdCount")
    logging_config: Optional[NodePoolLoggingConfig] = Field(default=None, alias="loggingConfig")
    machine_type: Optional[StrictStr] = Field(default=None, description="The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types). If unspecified, the default machine type is `e2-medium`.", alias="machineType")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - \"cluster-location\" - \"cluster-name\" - \"cluster-uid\" - \"configure-sh\" - \"containerd-configure-sh\" - \"enable-oslogin\" - \"gci-ensure-gke-docker\" - \"gci-metrics-enabled\" - \"gci-update-strategy\" - \"instance-template\" - \"kube-env\" - \"startup-script\" - \"user-data\" - \"disable-address-manager\" - \"windows-startup-script-ps1\" - \"common-psm1\" - \"k8s-node-setup-psm1\" - \"install-ssh-psm1\" - \"user-profile-psm1\" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.")
    min_cpu_platform: Optional[StrictStr] = Field(default=None, description="Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: \"Intel Haswell\"` or `minCpuPlatform: \"Intel Sandy Bridge\"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform).", alias="minCpuPlatform")
    node_group: Optional[StrictStr] = Field(default=None, description="Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).", alias="nodeGroup")
    oauth_scopes: Optional[List[StrictStr]] = Field(default=None, description="The set of Google API scopes to be made available on all of the node VMs under the \"default\" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.", alias="oauthScopes")
    preemptible: Optional[StrictBool] = Field(default=None, description="Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.")
    reservation_affinity: Optional[ReservationAffinity] = Field(default=None, alias="reservationAffinity")
    resource_labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The resource labels for the node pool to use to annotate any related Google Compute Engine resources.", alias="resourceLabels")
    resource_manager_tags: Optional[ResourceManagerTags] = Field(default=None, alias="resourceManagerTags")
    sandbox_config: Optional[SandboxConfig] = Field(default=None, alias="sandboxConfig")
    secondary_boot_disks: Optional[List[SecondaryBootDisk]] = Field(default=None, description="List of secondary boot disks attached to the nodes.", alias="secondaryBootDisks")
    service_account: Optional[StrictStr] = Field(default=None, description="The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the \"default\" service account is used.", alias="serviceAccount")
    shielded_instance_config: Optional[ShieldedInstanceConfig] = Field(default=None, alias="shieldedInstanceConfig")
    sole_tenant_config: Optional[SoleTenantConfig] = Field(default=None, alias="soleTenantConfig")
    spot: Optional[StrictBool] = Field(default=None, description="Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.")
    tags: Optional[List[StrictStr]] = Field(default=None, description="The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.")
    taints: Optional[List[NodeTaint]] = Field(default=None, description="List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/")
    windows_node_config: Optional[WindowsNodeConfig] = Field(default=None, alias="windowsNodeConfig")
    workload_metadata_config: Optional[WorkloadMetadataConfig] = Field(default=None, alias="workloadMetadataConfig")
    __properties: ClassVar[List[str]] = ["accelerators", "advancedMachineFeatures", "bootDiskKmsKey", "confidentialNodes", "diskSizeGb", "diskType", "enableConfidentialStorage", "ephemeralStorageConfig", "ephemeralStorageLocalSsdConfig", "fastSocket", "gcfsConfig", "gvnic", "hostMaintenancePolicy", "imageType", "kubeletConfig", "labels", "linuxNodeConfig", "localNvmeSsdBlockConfig", "localSsdCount", "loggingConfig", "machineType", "metadata", "minCpuPlatform", "nodeGroup", "oauthScopes", "preemptible", "reservationAffinity", "resourceLabels", "resourceManagerTags", "sandboxConfig", "secondaryBootDisks", "serviceAccount", "shieldedInstanceConfig", "soleTenantConfig", "spot", "tags", "taints", "windowsNodeConfig", "workloadMetadataConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NodeConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in accelerators (list)
        _items = []
        if self.accelerators:
            for _item_accelerators in self.accelerators:
                if _item_accelerators:
                    _items.append(_item_accelerators.to_dict())
            _dict['accelerators'] = _items
        # override the default output from pydantic by calling `to_dict()` of advanced_machine_features
        if self.advanced_machine_features:
            _dict['advancedMachineFeatures'] = self.advanced_machine_features.to_dict()
        # override the default output from pydantic by calling `to_dict()` of confidential_nodes
        if self.confidential_nodes:
            _dict['confidentialNodes'] = self.confidential_nodes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ephemeral_storage_config
        if self.ephemeral_storage_config:
            _dict['ephemeralStorageConfig'] = self.ephemeral_storage_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ephemeral_storage_local_ssd_config
        if self.ephemeral_storage_local_ssd_config:
            _dict['ephemeralStorageLocalSsdConfig'] = self.ephemeral_storage_local_ssd_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fast_socket
        if self.fast_socket:
            _dict['fastSocket'] = self.fast_socket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcfs_config
        if self.gcfs_config:
            _dict['gcfsConfig'] = self.gcfs_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gvnic
        if self.gvnic:
            _dict['gvnic'] = self.gvnic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of host_maintenance_policy
        if self.host_maintenance_policy:
            _dict['hostMaintenancePolicy'] = self.host_maintenance_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kubelet_config
        if self.kubelet_config:
            _dict['kubeletConfig'] = self.kubelet_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linux_node_config
        if self.linux_node_config:
            _dict['linuxNodeConfig'] = self.linux_node_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of local_nvme_ssd_block_config
        if self.local_nvme_ssd_block_config:
            _dict['localNvmeSsdBlockConfig'] = self.local_nvme_ssd_block_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logging_config
        if self.logging_config:
            _dict['loggingConfig'] = self.logging_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reservation_affinity
        if self.reservation_affinity:
            _dict['reservationAffinity'] = self.reservation_affinity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_manager_tags
        if self.resource_manager_tags:
            _dict['resourceManagerTags'] = self.resource_manager_tags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sandbox_config
        if self.sandbox_config:
            _dict['sandboxConfig'] = self.sandbox_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in secondary_boot_disks (list)
        _items = []
        if self.secondary_boot_disks:
            for _item_secondary_boot_disks in self.secondary_boot_disks:
                if _item_secondary_boot_disks:
                    _items.append(_item_secondary_boot_disks.to_dict())
            _dict['secondaryBootDisks'] = _items
        # override the default output from pydantic by calling `to_dict()` of shielded_instance_config
        if self.shielded_instance_config:
            _dict['shieldedInstanceConfig'] = self.shielded_instance_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sole_tenant_config
        if self.sole_tenant_config:
            _dict['soleTenantConfig'] = self.sole_tenant_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in taints (list)
        _items = []
        if self.taints:
            for _item_taints in self.taints:
                if _item_taints:
                    _items.append(_item_taints.to_dict())
            _dict['taints'] = _items
        # override the default output from pydantic by calling `to_dict()` of windows_node_config
        if self.windows_node_config:
            _dict['windowsNodeConfig'] = self.windows_node_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workload_metadata_config
        if self.workload_metadata_config:
            _dict['workloadMetadataConfig'] = self.workload_metadata_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NodeConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accelerators": [AcceleratorConfig.from_dict(_item) for _item in obj["accelerators"]] if obj.get("accelerators") is not None else None,
            "advancedMachineFeatures": AdvancedMachineFeatures.from_dict(obj["advancedMachineFeatures"]) if obj.get("advancedMachineFeatures") is not None else None,
            "bootDiskKmsKey": obj.get("bootDiskKmsKey"),
            "confidentialNodes": ConfidentialNodes.from_dict(obj["confidentialNodes"]) if obj.get("confidentialNodes") is not None else None,
            "diskSizeGb": obj.get("diskSizeGb"),
            "diskType": obj.get("diskType"),
            "enableConfidentialStorage": obj.get("enableConfidentialStorage"),
            "ephemeralStorageConfig": EphemeralStorageConfig.from_dict(obj["ephemeralStorageConfig"]) if obj.get("ephemeralStorageConfig") is not None else None,
            "ephemeralStorageLocalSsdConfig": EphemeralStorageLocalSsdConfig.from_dict(obj["ephemeralStorageLocalSsdConfig"]) if obj.get("ephemeralStorageLocalSsdConfig") is not None else None,
            "fastSocket": FastSocket.from_dict(obj["fastSocket"]) if obj.get("fastSocket") is not None else None,
            "gcfsConfig": GcfsConfig.from_dict(obj["gcfsConfig"]) if obj.get("gcfsConfig") is not None else None,
            "gvnic": VirtualNIC.from_dict(obj["gvnic"]) if obj.get("gvnic") is not None else None,
            "hostMaintenancePolicy": HostMaintenancePolicy.from_dict(obj["hostMaintenancePolicy"]) if obj.get("hostMaintenancePolicy") is not None else None,
            "imageType": obj.get("imageType"),
            "kubeletConfig": NodeKubeletConfig.from_dict(obj["kubeletConfig"]) if obj.get("kubeletConfig") is not None else None,
            "labels": obj.get("labels"),
            "linuxNodeConfig": LinuxNodeConfig.from_dict(obj["linuxNodeConfig"]) if obj.get("linuxNodeConfig") is not None else None,
            "localNvmeSsdBlockConfig": LocalNvmeSsdBlockConfig.from_dict(obj["localNvmeSsdBlockConfig"]) if obj.get("localNvmeSsdBlockConfig") is not None else None,
            "localSsdCount": obj.get("localSsdCount"),
            "loggingConfig": NodePoolLoggingConfig.from_dict(obj["loggingConfig"]) if obj.get("loggingConfig") is not None else None,
            "machineType": obj.get("machineType"),
            "metadata": obj.get("metadata"),
            "minCpuPlatform": obj.get("minCpuPlatform"),
            "nodeGroup": obj.get("nodeGroup"),
            "oauthScopes": obj.get("oauthScopes"),
            "preemptible": obj.get("preemptible"),
            "reservationAffinity": ReservationAffinity.from_dict(obj["reservationAffinity"]) if obj.get("reservationAffinity") is not None else None,
            "resourceLabels": obj.get("resourceLabels"),
            "resourceManagerTags": ResourceManagerTags.from_dict(obj["resourceManagerTags"]) if obj.get("resourceManagerTags") is not None else None,
            "sandboxConfig": SandboxConfig.from_dict(obj["sandboxConfig"]) if obj.get("sandboxConfig") is not None else None,
            "secondaryBootDisks": [SecondaryBootDisk.from_dict(_item) for _item in obj["secondaryBootDisks"]] if obj.get("secondaryBootDisks") is not None else None,
            "serviceAccount": obj.get("serviceAccount"),
            "shieldedInstanceConfig": ShieldedInstanceConfig.from_dict(obj["shieldedInstanceConfig"]) if obj.get("shieldedInstanceConfig") is not None else None,
            "soleTenantConfig": SoleTenantConfig.from_dict(obj["soleTenantConfig"]) if obj.get("soleTenantConfig") is not None else None,
            "spot": obj.get("spot"),
            "tags": obj.get("tags"),
            "taints": [NodeTaint.from_dict(_item) for _item in obj["taints"]] if obj.get("taints") is not None else None,
            "windowsNodeConfig": WindowsNodeConfig.from_dict(obj["windowsNodeConfig"]) if obj.get("windowsNodeConfig") is not None else None,
            "workloadMetadataConfig": WorkloadMetadataConfig.from_dict(obj["workloadMetadataConfig"]) if obj.get("workloadMetadataConfig") is not None else None
        })
        return _obj



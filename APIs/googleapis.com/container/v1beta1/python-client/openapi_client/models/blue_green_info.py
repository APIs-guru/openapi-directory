# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BlueGreenInfo(BaseModel):
    """
    Information relevant to blue-green upgrade.
    """ # noqa: E501
    blue_instance_group_urls: Optional[List[StrictStr]] = Field(default=None, description="The resource URLs of the [managed instance groups] (/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with blue pool.", alias="blueInstanceGroupUrls")
    blue_pool_deletion_start_time: Optional[StrictStr] = Field(default=None, description="Time to start deleting blue pool to complete blue-green upgrade, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.", alias="bluePoolDeletionStartTime")
    green_instance_group_urls: Optional[List[StrictStr]] = Field(default=None, description="The resource URLs of the [managed instance groups] (/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with green pool.", alias="greenInstanceGroupUrls")
    green_pool_version: Optional[StrictStr] = Field(default=None, description="Version of green pool.", alias="greenPoolVersion")
    phase: Optional[StrictStr] = Field(default=None, description="Current blue-green upgrade phase.")
    __properties: ClassVar[List[str]] = ["blueInstanceGroupUrls", "bluePoolDeletionStartTime", "greenInstanceGroupUrls", "greenPoolVersion", "phase"]

    @field_validator('phase')
    def phase_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PHASE_UNSPECIFIED', 'UPDATE_STARTED', 'CREATING_GREEN_POOL', 'CORDONING_BLUE_POOL', 'WAITING_TO_DRAIN_BLUE_POOL', 'DRAINING_BLUE_POOL', 'NODE_POOL_SOAKING', 'DELETING_BLUE_POOL', 'ROLLBACK_STARTED']):
            raise ValueError("must be one of enum values ('PHASE_UNSPECIFIED', 'UPDATE_STARTED', 'CREATING_GREEN_POOL', 'CORDONING_BLUE_POOL', 'WAITING_TO_DRAIN_BLUE_POOL', 'DRAINING_BLUE_POOL', 'NODE_POOL_SOAKING', 'DELETING_BLUE_POOL', 'ROLLBACK_STARTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BlueGreenInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BlueGreenInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blueInstanceGroupUrls": obj.get("blueInstanceGroupUrls"),
            "bluePoolDeletionStartTime": obj.get("bluePoolDeletionStartTime"),
            "greenInstanceGroupUrls": obj.get("greenInstanceGroupUrls"),
            "greenPoolVersion": obj.get("greenPoolVersion"),
            "phase": obj.get("phase")
        })
        return _obj



# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cloud_run_config import CloudRunConfig
from openapi_client.models.config_connector_config import ConfigConnectorConfig
from openapi_client.models.dns_cache_config import DnsCacheConfig
from openapi_client.models.gce_persistent_disk_csi_driver_config import GcePersistentDiskCsiDriverConfig
from openapi_client.models.gcp_filestore_csi_driver_config import GcpFilestoreCsiDriverConfig
from openapi_client.models.gcs_fuse_csi_driver_config import GcsFuseCsiDriverConfig
from openapi_client.models.gke_backup_agent_config import GkeBackupAgentConfig
from openapi_client.models.horizontal_pod_autoscaling import HorizontalPodAutoscaling
from openapi_client.models.http_load_balancing import HttpLoadBalancing
from openapi_client.models.istio_config import IstioConfig
from openapi_client.models.kalm_config import KalmConfig
from openapi_client.models.kubernetes_dashboard import KubernetesDashboard
from openapi_client.models.network_policy_config import NetworkPolicyConfig
from openapi_client.models.stateful_ha_config import StatefulHAConfig
from typing import Optional, Set
from typing_extensions import Self

class AddonsConfig(BaseModel):
    """
    Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
    """ # noqa: E501
    cloud_run_config: Optional[CloudRunConfig] = Field(default=None, alias="cloudRunConfig")
    config_connector_config: Optional[ConfigConnectorConfig] = Field(default=None, alias="configConnectorConfig")
    dns_cache_config: Optional[DnsCacheConfig] = Field(default=None, alias="dnsCacheConfig")
    gce_persistent_disk_csi_driver_config: Optional[GcePersistentDiskCsiDriverConfig] = Field(default=None, alias="gcePersistentDiskCsiDriverConfig")
    gcp_filestore_csi_driver_config: Optional[GcpFilestoreCsiDriverConfig] = Field(default=None, alias="gcpFilestoreCsiDriverConfig")
    gcs_fuse_csi_driver_config: Optional[GcsFuseCsiDriverConfig] = Field(default=None, alias="gcsFuseCsiDriverConfig")
    gke_backup_agent_config: Optional[GkeBackupAgentConfig] = Field(default=None, alias="gkeBackupAgentConfig")
    horizontal_pod_autoscaling: Optional[HorizontalPodAutoscaling] = Field(default=None, alias="horizontalPodAutoscaling")
    http_load_balancing: Optional[HttpLoadBalancing] = Field(default=None, alias="httpLoadBalancing")
    istio_config: Optional[IstioConfig] = Field(default=None, alias="istioConfig")
    kalm_config: Optional[KalmConfig] = Field(default=None, alias="kalmConfig")
    kubernetes_dashboard: Optional[KubernetesDashboard] = Field(default=None, alias="kubernetesDashboard")
    network_policy_config: Optional[NetworkPolicyConfig] = Field(default=None, alias="networkPolicyConfig")
    stateful_ha_config: Optional[StatefulHAConfig] = Field(default=None, alias="statefulHaConfig")
    __properties: ClassVar[List[str]] = ["cloudRunConfig", "configConnectorConfig", "dnsCacheConfig", "gcePersistentDiskCsiDriverConfig", "gcpFilestoreCsiDriverConfig", "gcsFuseCsiDriverConfig", "gkeBackupAgentConfig", "horizontalPodAutoscaling", "httpLoadBalancing", "istioConfig", "kalmConfig", "kubernetesDashboard", "networkPolicyConfig", "statefulHaConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddonsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cloud_run_config
        if self.cloud_run_config:
            _dict['cloudRunConfig'] = self.cloud_run_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config_connector_config
        if self.config_connector_config:
            _dict['configConnectorConfig'] = self.config_connector_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dns_cache_config
        if self.dns_cache_config:
            _dict['dnsCacheConfig'] = self.dns_cache_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gce_persistent_disk_csi_driver_config
        if self.gce_persistent_disk_csi_driver_config:
            _dict['gcePersistentDiskCsiDriverConfig'] = self.gce_persistent_disk_csi_driver_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcp_filestore_csi_driver_config
        if self.gcp_filestore_csi_driver_config:
            _dict['gcpFilestoreCsiDriverConfig'] = self.gcp_filestore_csi_driver_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcs_fuse_csi_driver_config
        if self.gcs_fuse_csi_driver_config:
            _dict['gcsFuseCsiDriverConfig'] = self.gcs_fuse_csi_driver_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gke_backup_agent_config
        if self.gke_backup_agent_config:
            _dict['gkeBackupAgentConfig'] = self.gke_backup_agent_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of horizontal_pod_autoscaling
        if self.horizontal_pod_autoscaling:
            _dict['horizontalPodAutoscaling'] = self.horizontal_pod_autoscaling.to_dict()
        # override the default output from pydantic by calling `to_dict()` of http_load_balancing
        if self.http_load_balancing:
            _dict['httpLoadBalancing'] = self.http_load_balancing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of istio_config
        if self.istio_config:
            _dict['istioConfig'] = self.istio_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kalm_config
        if self.kalm_config:
            _dict['kalmConfig'] = self.kalm_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kubernetes_dashboard
        if self.kubernetes_dashboard:
            _dict['kubernetesDashboard'] = self.kubernetes_dashboard.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_policy_config
        if self.network_policy_config:
            _dict['networkPolicyConfig'] = self.network_policy_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stateful_ha_config
        if self.stateful_ha_config:
            _dict['statefulHaConfig'] = self.stateful_ha_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddonsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudRunConfig": CloudRunConfig.from_dict(obj["cloudRunConfig"]) if obj.get("cloudRunConfig") is not None else None,
            "configConnectorConfig": ConfigConnectorConfig.from_dict(obj["configConnectorConfig"]) if obj.get("configConnectorConfig") is not None else None,
            "dnsCacheConfig": DnsCacheConfig.from_dict(obj["dnsCacheConfig"]) if obj.get("dnsCacheConfig") is not None else None,
            "gcePersistentDiskCsiDriverConfig": GcePersistentDiskCsiDriverConfig.from_dict(obj["gcePersistentDiskCsiDriverConfig"]) if obj.get("gcePersistentDiskCsiDriverConfig") is not None else None,
            "gcpFilestoreCsiDriverConfig": GcpFilestoreCsiDriverConfig.from_dict(obj["gcpFilestoreCsiDriverConfig"]) if obj.get("gcpFilestoreCsiDriverConfig") is not None else None,
            "gcsFuseCsiDriverConfig": GcsFuseCsiDriverConfig.from_dict(obj["gcsFuseCsiDriverConfig"]) if obj.get("gcsFuseCsiDriverConfig") is not None else None,
            "gkeBackupAgentConfig": GkeBackupAgentConfig.from_dict(obj["gkeBackupAgentConfig"]) if obj.get("gkeBackupAgentConfig") is not None else None,
            "horizontalPodAutoscaling": HorizontalPodAutoscaling.from_dict(obj["horizontalPodAutoscaling"]) if obj.get("horizontalPodAutoscaling") is not None else None,
            "httpLoadBalancing": HttpLoadBalancing.from_dict(obj["httpLoadBalancing"]) if obj.get("httpLoadBalancing") is not None else None,
            "istioConfig": IstioConfig.from_dict(obj["istioConfig"]) if obj.get("istioConfig") is not None else None,
            "kalmConfig": KalmConfig.from_dict(obj["kalmConfig"]) if obj.get("kalmConfig") is not None else None,
            "kubernetesDashboard": KubernetesDashboard.from_dict(obj["kubernetesDashboard"]) if obj.get("kubernetesDashboard") is not None else None,
            "networkPolicyConfig": NetworkPolicyConfig.from_dict(obj["networkPolicyConfig"]) if obj.get("networkPolicyConfig") is not None else None,
            "statefulHaConfig": StatefulHAConfig.from_dict(obj["statefulHaConfig"]) if obj.get("statefulHaConfig") is not None else None
        })
        return _obj



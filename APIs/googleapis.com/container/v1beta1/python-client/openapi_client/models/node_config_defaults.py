# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.gcfs_config import GcfsConfig
from openapi_client.models.host_maintenance_policy import HostMaintenancePolicy
from openapi_client.models.node_pool_logging_config import NodePoolLoggingConfig
from typing import Optional, Set
from typing_extensions import Self

class NodeConfigDefaults(BaseModel):
    """
    Subset of NodeConfig message that has defaults.
    """ # noqa: E501
    gcfs_config: Optional[GcfsConfig] = Field(default=None, alias="gcfsConfig")
    host_maintenance_policy: Optional[HostMaintenancePolicy] = Field(default=None, alias="hostMaintenancePolicy")
    logging_config: Optional[NodePoolLoggingConfig] = Field(default=None, alias="loggingConfig")
    __properties: ClassVar[List[str]] = ["gcfsConfig", "hostMaintenancePolicy", "loggingConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NodeConfigDefaults from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gcfs_config
        if self.gcfs_config:
            _dict['gcfsConfig'] = self.gcfs_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of host_maintenance_policy
        if self.host_maintenance_policy:
            _dict['hostMaintenancePolicy'] = self.host_maintenance_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logging_config
        if self.logging_config:
            _dict['loggingConfig'] = self.logging_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NodeConfigDefaults from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gcfsConfig": GcfsConfig.from_dict(obj["gcfsConfig"]) if obj.get("gcfsConfig") is not None else None,
            "hostMaintenancePolicy": HostMaintenancePolicy.from_dict(obj["hostMaintenancePolicy"]) if obj.get("hostMaintenancePolicy") is not None else None,
            "loggingConfig": NodePoolLoggingConfig.from_dict(obj["loggingConfig"]) if obj.get("loggingConfig") is not None else None
        })
        return _obj



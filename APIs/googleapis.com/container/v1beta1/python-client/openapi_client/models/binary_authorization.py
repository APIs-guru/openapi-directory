# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.policy_binding import PolicyBinding
from typing import Optional, Set
from typing_extensions import Self

class BinaryAuthorization(BaseModel):
    """
    Configuration for Binary Authorization.
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=None, description="This field is deprecated. Leave this unset and instead configure BinaryAuthorization using evaluation_mode. If evaluation_mode is set to anything other than EVALUATION_MODE_UNSPECIFIED, this field is ignored.")
    evaluation_mode: Optional[StrictStr] = Field(default=None, description="Mode of operation for binauthz policy evaluation. If unspecified, defaults to DISABLED.", alias="evaluationMode")
    policy_bindings: Optional[List[PolicyBinding]] = Field(default=None, description="Optional. Binauthz policies that apply to this cluster.", alias="policyBindings")
    __properties: ClassVar[List[str]] = ["enabled", "evaluationMode", "policyBindings"]

    @field_validator('evaluation_mode')
    def evaluation_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EVALUATION_MODE_UNSPECIFIED', 'DISABLED', 'PROJECT_SINGLETON_POLICY_ENFORCE', 'POLICY_BINDINGS', 'POLICY_BINDINGS_AND_PROJECT_SINGLETON_POLICY_ENFORCE']):
            raise ValueError("must be one of enum values ('EVALUATION_MODE_UNSPECIFIED', 'DISABLED', 'PROJECT_SINGLETON_POLICY_ENFORCE', 'POLICY_BINDINGS', 'POLICY_BINDINGS_AND_PROJECT_SINGLETON_POLICY_ENFORCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BinaryAuthorization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in policy_bindings (list)
        _items = []
        if self.policy_bindings:
            for _item_policy_bindings in self.policy_bindings:
                if _item_policy_bindings:
                    _items.append(_item_policy_bindings.to_dict())
            _dict['policyBindings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BinaryAuthorization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "evaluationMode": obj.get("evaluationMode"),
            "policyBindings": [PolicyBinding.from_dict(_item) for _item in obj["policyBindings"]] if obj.get("policyBindings") is not None else None
        })
        return _obj



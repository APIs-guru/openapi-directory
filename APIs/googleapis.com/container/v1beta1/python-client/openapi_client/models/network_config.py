# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cluster_network_performance_config import ClusterNetworkPerformanceConfig
from openapi_client.models.default_snat_status import DefaultSnatStatus
from openapi_client.models.dns_config import DNSConfig
from openapi_client.models.gateway_api_config import GatewayAPIConfig
from openapi_client.models.service_external_ips_config import ServiceExternalIPsConfig
from typing import Optional, Set
from typing_extensions import Self

class NetworkConfig(BaseModel):
    """
    NetworkConfig reports the relative names of network & subnetwork.
    """ # noqa: E501
    datapath_provider: Optional[StrictStr] = Field(default=None, description="The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.", alias="datapathProvider")
    default_snat_status: Optional[DefaultSnatStatus] = Field(default=None, alias="defaultSnatStatus")
    dns_config: Optional[DNSConfig] = Field(default=None, alias="dnsConfig")
    enable_fqdn_network_policy: Optional[StrictBool] = Field(default=None, description="Whether FQDN Network Policy is enabled on this cluster.", alias="enableFqdnNetworkPolicy")
    enable_intra_node_visibility: Optional[StrictBool] = Field(default=None, description="Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.", alias="enableIntraNodeVisibility")
    enable_l4ilb_subsetting: Optional[StrictBool] = Field(default=None, description="Whether L4ILB Subsetting is enabled for this cluster.", alias="enableL4ilbSubsetting")
    enable_multi_networking: Optional[StrictBool] = Field(default=None, description="Whether multi-networking is enabled for this cluster.", alias="enableMultiNetworking")
    gateway_api_config: Optional[GatewayAPIConfig] = Field(default=None, alias="gatewayApiConfig")
    in_transit_encryption_config: Optional[StrictStr] = Field(default=None, description="Specify the details of in-transit encryption.", alias="inTransitEncryptionConfig")
    network: Optional[StrictStr] = Field(default=None, description="Output only. The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network")
    network_performance_config: Optional[ClusterNetworkPerformanceConfig] = Field(default=None, alias="networkPerformanceConfig")
    private_ipv6_google_access: Optional[StrictStr] = Field(default=None, description="The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)", alias="privateIpv6GoogleAccess")
    service_external_ips_config: Optional[ServiceExternalIPsConfig] = Field(default=None, alias="serviceExternalIpsConfig")
    subnetwork: Optional[StrictStr] = Field(default=None, description="Output only. The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet")
    __properties: ClassVar[List[str]] = ["datapathProvider", "defaultSnatStatus", "dnsConfig", "enableFqdnNetworkPolicy", "enableIntraNodeVisibility", "enableL4ilbSubsetting", "enableMultiNetworking", "gatewayApiConfig", "inTransitEncryptionConfig", "network", "networkPerformanceConfig", "privateIpv6GoogleAccess", "serviceExternalIpsConfig", "subnetwork"]

    @field_validator('datapath_provider')
    def datapath_provider_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATAPATH_PROVIDER_UNSPECIFIED', 'LEGACY_DATAPATH', 'ADVANCED_DATAPATH']):
            raise ValueError("must be one of enum values ('DATAPATH_PROVIDER_UNSPECIFIED', 'LEGACY_DATAPATH', 'ADVANCED_DATAPATH')")
        return value

    @field_validator('in_transit_encryption_config')
    def in_transit_encryption_config_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IN_TRANSIT_ENCRYPTION_CONFIG_UNSPECIFIED', 'IN_TRANSIT_ENCRYPTION_DISABLED', 'IN_TRANSIT_ENCRYPTION_INTER_NODE_TRANSPARENT']):
            raise ValueError("must be one of enum values ('IN_TRANSIT_ENCRYPTION_CONFIG_UNSPECIFIED', 'IN_TRANSIT_ENCRYPTION_DISABLED', 'IN_TRANSIT_ENCRYPTION_INTER_NODE_TRANSPARENT')")
        return value

    @field_validator('private_ipv6_google_access')
    def private_ipv6_google_access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED', 'PRIVATE_IPV6_GOOGLE_ACCESS_DISABLED', 'PRIVATE_IPV6_GOOGLE_ACCESS_TO_GOOGLE', 'PRIVATE_IPV6_GOOGLE_ACCESS_BIDIRECTIONAL']):
            raise ValueError("must be one of enum values ('PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED', 'PRIVATE_IPV6_GOOGLE_ACCESS_DISABLED', 'PRIVATE_IPV6_GOOGLE_ACCESS_TO_GOOGLE', 'PRIVATE_IPV6_GOOGLE_ACCESS_BIDIRECTIONAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_snat_status
        if self.default_snat_status:
            _dict['defaultSnatStatus'] = self.default_snat_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dns_config
        if self.dns_config:
            _dict['dnsConfig'] = self.dns_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gateway_api_config
        if self.gateway_api_config:
            _dict['gatewayApiConfig'] = self.gateway_api_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_performance_config
        if self.network_performance_config:
            _dict['networkPerformanceConfig'] = self.network_performance_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_external_ips_config
        if self.service_external_ips_config:
            _dict['serviceExternalIpsConfig'] = self.service_external_ips_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datapathProvider": obj.get("datapathProvider"),
            "defaultSnatStatus": DefaultSnatStatus.from_dict(obj["defaultSnatStatus"]) if obj.get("defaultSnatStatus") is not None else None,
            "dnsConfig": DNSConfig.from_dict(obj["dnsConfig"]) if obj.get("dnsConfig") is not None else None,
            "enableFqdnNetworkPolicy": obj.get("enableFqdnNetworkPolicy"),
            "enableIntraNodeVisibility": obj.get("enableIntraNodeVisibility"),
            "enableL4ilbSubsetting": obj.get("enableL4ilbSubsetting"),
            "enableMultiNetworking": obj.get("enableMultiNetworking"),
            "gatewayApiConfig": GatewayAPIConfig.from_dict(obj["gatewayApiConfig"]) if obj.get("gatewayApiConfig") is not None else None,
            "inTransitEncryptionConfig": obj.get("inTransitEncryptionConfig"),
            "network": obj.get("network"),
            "networkPerformanceConfig": ClusterNetworkPerformanceConfig.from_dict(obj["networkPerformanceConfig"]) if obj.get("networkPerformanceConfig") is not None else None,
            "privateIpv6GoogleAccess": obj.get("privateIpv6GoogleAccess"),
            "serviceExternalIpsConfig": ServiceExternalIPsConfig.from_dict(obj["serviceExternalIpsConfig"]) if obj.get("serviceExternalIpsConfig") is not None else None,
            "subnetwork": obj.get("subnetwork")
        })
        return _obj



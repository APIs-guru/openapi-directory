# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.additional_node_network_config import AdditionalNodeNetworkConfig
from openapi_client.models.additional_pod_network_config import AdditionalPodNetworkConfig
from openapi_client.models.network_performance_config import NetworkPerformanceConfig
from openapi_client.models.pod_cidr_overprovision_config import PodCIDROverprovisionConfig
from typing import Optional, Set
from typing_extensions import Self

class NodeNetworkConfig(BaseModel):
    """
    Parameters for node pool-level network config.
    """ # noqa: E501
    additional_node_network_configs: Optional[List[AdditionalNodeNetworkConfig]] = Field(default=None, description="We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface", alias="additionalNodeNetworkConfigs")
    additional_pod_network_configs: Optional[List[AdditionalPodNetworkConfig]] = Field(default=None, description="We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node", alias="additionalPodNetworkConfigs")
    create_pod_range: Optional[StrictBool] = Field(default=None, description="Input only. Whether to create a new range for pod IPs in this node pool. Defaults are provided for `pod_range` and `pod_ipv4_cidr_block` if they are not specified. If neither `create_pod_range` or `pod_range` are specified, the cluster-level default (`ip_allocation_policy.cluster_ipv4_cidr_block`) is used. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.", alias="createPodRange")
    enable_private_nodes: Optional[StrictBool] = Field(default=None, description="Whether nodes have internal IP addresses only. If enable_private_nodes is not specified, then the value is derived from cluster.privateClusterConfig.enablePrivateNodes", alias="enablePrivateNodes")
    network_performance_config: Optional[NetworkPerformanceConfig] = Field(default=None, alias="networkPerformanceConfig")
    pod_cidr_overprovision_config: Optional[PodCIDROverprovisionConfig] = Field(default=None, alias="podCidrOverprovisionConfig")
    pod_ipv4_cidr_block: Optional[StrictStr] = Field(default=None, description="The IP address range for pod IPs in this node pool. Only applicable if `create_pod_range` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) to pick a specific range to use. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.", alias="podIpv4CidrBlock")
    pod_ipv4_range_utilization: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. [Output only] The utilization of the IPv4 range for the pod. The ratio is Usage/[Total number of IPs in the secondary range], Usage=numNodes*numZones*podIPsPerNode.", alias="podIpv4RangeUtilization")
    pod_range: Optional[StrictStr] = Field(default=None, description="The ID of the secondary range for pod IPs. If `create_pod_range` is true, this ID is used for the new range. If `create_pod_range` is false, uses an existing secondary range with this ID. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.", alias="podRange")
    __properties: ClassVar[List[str]] = ["additionalNodeNetworkConfigs", "additionalPodNetworkConfigs", "createPodRange", "enablePrivateNodes", "networkPerformanceConfig", "podCidrOverprovisionConfig", "podIpv4CidrBlock", "podIpv4RangeUtilization", "podRange"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NodeNetworkConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "pod_ipv4_range_utilization",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_node_network_configs (list)
        _items = []
        if self.additional_node_network_configs:
            for _item_additional_node_network_configs in self.additional_node_network_configs:
                if _item_additional_node_network_configs:
                    _items.append(_item_additional_node_network_configs.to_dict())
            _dict['additionalNodeNetworkConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in additional_pod_network_configs (list)
        _items = []
        if self.additional_pod_network_configs:
            for _item_additional_pod_network_configs in self.additional_pod_network_configs:
                if _item_additional_pod_network_configs:
                    _items.append(_item_additional_pod_network_configs.to_dict())
            _dict['additionalPodNetworkConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of network_performance_config
        if self.network_performance_config:
            _dict['networkPerformanceConfig'] = self.network_performance_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pod_cidr_overprovision_config
        if self.pod_cidr_overprovision_config:
            _dict['podCidrOverprovisionConfig'] = self.pod_cidr_overprovision_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NodeNetworkConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalNodeNetworkConfigs": [AdditionalNodeNetworkConfig.from_dict(_item) for _item in obj["additionalNodeNetworkConfigs"]] if obj.get("additionalNodeNetworkConfigs") is not None else None,
            "additionalPodNetworkConfigs": [AdditionalPodNetworkConfig.from_dict(_item) for _item in obj["additionalPodNetworkConfigs"]] if obj.get("additionalPodNetworkConfigs") is not None else None,
            "createPodRange": obj.get("createPodRange"),
            "enablePrivateNodes": obj.get("enablePrivateNodes"),
            "networkPerformanceConfig": NetworkPerformanceConfig.from_dict(obj["networkPerformanceConfig"]) if obj.get("networkPerformanceConfig") is not None else None,
            "podCidrOverprovisionConfig": PodCIDROverprovisionConfig.from_dict(obj["podCidrOverprovisionConfig"]) if obj.get("podCidrOverprovisionConfig") is not None else None,
            "podIpv4CidrBlock": obj.get("podIpv4CidrBlock"),
            "podIpv4RangeUtilization": obj.get("podIpv4RangeUtilization"),
            "podRange": obj.get("podRange")
        })
        return _obj



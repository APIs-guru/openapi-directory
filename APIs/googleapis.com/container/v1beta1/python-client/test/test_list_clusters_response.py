# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_clusters_response import ListClustersResponse

class TestListClustersResponse(unittest.TestCase):
    """ListClustersResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListClustersResponse:
        """Test ListClustersResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListClustersResponse`
        """
        model = ListClustersResponse()
        if include_optional:
            return ListClustersResponse(
                clusters = [
                    openapi_client.models.cluster.Cluster(
                        addons_config = openapi_client.models.addons_config.AddonsConfig(
                            cloud_run_config = openapi_client.models.cloud_run_config.CloudRunConfig(
                                disabled = True, 
                                load_balancer_type = 'LOAD_BALANCER_TYPE_UNSPECIFIED', ), 
                            config_connector_config = openapi_client.models.config_connector_config.ConfigConnectorConfig(
                                enabled = True, ), 
                            dns_cache_config = openapi_client.models.dns_cache_config.DnsCacheConfig(
                                enabled = True, ), 
                            gce_persistent_disk_csi_driver_config = openapi_client.models.gce_persistent_disk_csi_driver_config.GcePersistentDiskCsiDriverConfig(
                                enabled = True, ), 
                            gcp_filestore_csi_driver_config = openapi_client.models.gcp_filestore_csi_driver_config.GcpFilestoreCsiDriverConfig(
                                enabled = True, ), 
                            gcs_fuse_csi_driver_config = openapi_client.models.gcs_fuse_csi_driver_config.GcsFuseCsiDriverConfig(
                                enabled = True, ), 
                            gke_backup_agent_config = openapi_client.models.gke_backup_agent_config.GkeBackupAgentConfig(
                                enabled = True, ), 
                            horizontal_pod_autoscaling = openapi_client.models.horizontal_pod_autoscaling.HorizontalPodAutoscaling(
                                disabled = True, ), 
                            http_load_balancing = openapi_client.models.http_load_balancing.HttpLoadBalancing(
                                disabled = True, ), 
                            istio_config = openapi_client.models.istio_config.IstioConfig(
                                auth = 'AUTH_NONE', 
                                disabled = True, ), 
                            kalm_config = openapi_client.models.kalm_config.KalmConfig(
                                enabled = True, ), 
                            kubernetes_dashboard = openapi_client.models.kubernetes_dashboard.KubernetesDashboard(
                                disabled = True, ), 
                            network_policy_config = openapi_client.models.network_policy_config.NetworkPolicyConfig(
                                disabled = True, ), 
                            stateful_ha_config = openapi_client.models.stateful_ha_config.StatefulHAConfig(
                                enabled = True, ), ), 
                        authenticator_groups_config = openapi_client.models.authenticator_groups_config.AuthenticatorGroupsConfig(
                            enabled = True, 
                            security_group = '', ), 
                        autopilot = openapi_client.models.autopilot.Autopilot(
                            conversion_status = openapi_client.models.autopilot_conversion_status.AutopilotConversionStatus(
                                state = 'STATE_UNSPECIFIED', ), 
                            enabled = True, 
                            workload_policy_config = openapi_client.models.workload_policy_config.WorkloadPolicyConfig(
                                allow_net_admin = True, ), ), 
                        autoscaling = openapi_client.models.cluster_autoscaling.ClusterAutoscaling(
                            autoprovisioning_locations = [
                                ''
                                ], 
                            autoprovisioning_node_pool_defaults = openapi_client.models.autoprovisioning_node_pool_defaults.AutoprovisioningNodePoolDefaults(
                                boot_disk_kms_key = '', 
                                disk_size_gb = 56, 
                                disk_type = '', 
                                image_type = '', 
                                insecure_kubelet_readonly_port_enabled = True, 
                                management = openapi_client.models.node_management.NodeManagement(
                                    auto_repair = True, 
                                    auto_upgrade = True, 
                                    upgrade_options = openapi_client.models.auto_upgrade_options.AutoUpgradeOptions(
                                        auto_upgrade_start_time = '', 
                                        description = '', ), ), 
                                min_cpu_platform = '', 
                                oauth_scopes = [
                                    ''
                                    ], 
                                service_account = '', 
                                shielded_instance_config = openapi_client.models.shielded_instance_config.ShieldedInstanceConfig(
                                    enable_integrity_monitoring = True, 
                                    enable_secure_boot = True, ), 
                                upgrade_settings = openapi_client.models.upgrade_settings.UpgradeSettings(
                                    blue_green_settings = openapi_client.models.blue_green_settings.BlueGreenSettings(
                                        autoscaled_rollout_policy = openapi_client.models.autoscaled_rollout_policy.AutoscaledRolloutPolicy(), 
                                        node_pool_soak_duration = '', 
                                        standard_rollout_policy = openapi_client.models.standard_rollout_policy.StandardRolloutPolicy(
                                            batch_node_count = 56, 
                                            batch_percentage = 1.337, 
                                            batch_soak_duration = '', ), ), 
                                    max_surge = 56, 
                                    max_unavailable = 56, 
                                    strategy = 'NODE_POOL_UPDATE_STRATEGY_UNSPECIFIED', ), ), 
                            autoscaling_profile = 'PROFILE_UNSPECIFIED', 
                            enable_node_autoprovisioning = True, 
                            resource_limits = [
                                openapi_client.models.resource_limit.ResourceLimit(
                                    maximum = '', 
                                    minimum = '', 
                                    resource_type = '', )
                                ], ), 
                        binary_authorization = openapi_client.models.binary_authorization.BinaryAuthorization(
                            enabled = True, 
                            evaluation_mode = 'EVALUATION_MODE_UNSPECIFIED', 
                            policy_bindings = [
                                openapi_client.models.policy_binding.PolicyBinding(
                                    name = '', )
                                ], ), 
                        cluster_ipv4_cidr = '', 
                        cluster_telemetry = openapi_client.models.cluster_telemetry.ClusterTelemetry(
                            type = 'UNSPECIFIED', ), 
                        conditions = [
                            openapi_client.models.status_condition.StatusCondition(
                                canonical_code = 'OK', 
                                code = 'UNKNOWN', 
                                message = '', )
                            ], 
                        confidential_nodes = openapi_client.models.confidential_nodes.ConfidentialNodes(
                            enabled = True, ), 
                        cost_management_config = openapi_client.models.cost_management_config.CostManagementConfig(
                            enabled = True, ), 
                        create_time = '', 
                        current_master_version = '', 
                        current_node_count = 56, 
                        current_node_version = '', 
                        database_encryption = openapi_client.models.database_encryption.DatabaseEncryption(
                            key_name = '', 
                            state = 'UNKNOWN', ), 
                        default_max_pods_constraint = openapi_client.models.max_pods_constraint.MaxPodsConstraint(
                            max_pods_per_node = '', ), 
                        description = '', 
                        enable_k8s_beta_apis = openapi_client.models.k8s_beta_api_config.K8sBetaAPIConfig(
                            enabled_apis = [
                                ''
                                ], ), 
                        enable_kubernetes_alpha = True, 
                        enable_tpu = True, 
                        endpoint = '', 
                        enterprise_config = openapi_client.models.enterprise_config.EnterpriseConfig(
                            cluster_tier = 'CLUSTER_TIER_UNSPECIFIED', ), 
                        etag = '', 
                        expire_time = '', 
                        fleet = openapi_client.models.fleet.Fleet(
                            membership = '', 
                            pre_registered = True, 
                            project = '', ), 
                        id = '', 
                        identity_service_config = openapi_client.models.identity_service_config.IdentityServiceConfig(
                            enabled = True, ), 
                        initial_cluster_version = '', 
                        initial_node_count = 56, 
                        instance_group_urls = [
                            ''
                            ], 
                        ip_allocation_policy = openapi_client.models.ip_allocation_policy.IPAllocationPolicy(
                            additional_pod_ranges_config = openapi_client.models.additional_pod_ranges_config.AdditionalPodRangesConfig(
                                pod_range_info = [
                                    openapi_client.models.range_info.RangeInfo(
                                        range_name = '', 
                                        utilization = 1.337, )
                                    ], 
                                pod_range_names = [
                                    ''
                                    ], ), 
                            allow_route_overlap = True, 
                            cluster_ipv4_cidr = '', 
                            cluster_ipv4_cidr_block = '', 
                            cluster_secondary_range_name = '', 
                            create_subnetwork = True, 
                            default_pod_ipv4_range_utilization = 1.337, 
                            ipv6_access_type = 'IPV6_ACCESS_TYPE_UNSPECIFIED', 
                            node_ipv4_cidr = '', 
                            node_ipv4_cidr_block = '', 
                            pod_cidr_overprovision_config = openapi_client.models.pod_cidr_overprovision_config.PodCIDROverprovisionConfig(
                                disable = True, ), 
                            services_ipv4_cidr = '', 
                            services_ipv4_cidr_block = '', 
                            services_ipv6_cidr_block = '', 
                            services_secondary_range_name = '', 
                            stack_type = 'STACK_TYPE_UNSPECIFIED', 
                            subnet_ipv6_cidr_block = '', 
                            subnetwork_name = '', 
                            tpu_ipv4_cidr_block = '', 
                            use_ip_aliases = True, 
                            use_routes = True, ), 
                        label_fingerprint = '', 
                        legacy_abac = openapi_client.models.legacy_abac.LegacyAbac(
                            enabled = True, ), 
                        location = '', 
                        locations = [
                            ''
                            ], 
                        logging_config = openapi_client.models.logging_config.LoggingConfig(
                            component_config = openapi_client.models.logging_component_config.LoggingComponentConfig(
                                enable_components = [
                                    'COMPONENT_UNSPECIFIED'
                                    ], ), ), 
                        logging_service = '', 
                        maintenance_policy = openapi_client.models.maintenance_policy.MaintenancePolicy(
                            resource_version = '', 
                            window = openapi_client.models.maintenance_window.MaintenanceWindow(
                                daily_maintenance_window = openapi_client.models.daily_maintenance_window.DailyMaintenanceWindow(
                                    duration = '', 
                                    start_time = '', ), 
                                maintenance_exclusions = {
                                    'key' : openapi_client.models.time_window.TimeWindow(
                                        end_time = '', 
                                        maintenance_exclusion_options = openapi_client.models.maintenance_exclusion_options.MaintenanceExclusionOptions(
                                            scope = 'NO_UPGRADES', ), 
                                        start_time = '', )
                                    }, 
                                recurring_window = openapi_client.models.recurring_time_window.RecurringTimeWindow(
                                    recurrence = '', ), ), ), 
                        master = openapi_client.models.master.master(), 
                        master_auth = openapi_client.models.master_auth.MasterAuth(
                            client_certificate = '', 
                            client_certificate_config = openapi_client.models.client_certificate_config.ClientCertificateConfig(
                                issue_client_certificate = True, ), 
                            client_key = '', 
                            cluster_ca_certificate = '', 
                            password = '', 
                            username = '', ), 
                        master_authorized_networks_config = openapi_client.models.master_authorized_networks_config.MasterAuthorizedNetworksConfig(
                            cidr_blocks = [
                                openapi_client.models.cidr_block.CidrBlock(
                                    cidr_block = '', 
                                    display_name = '', )
                                ], 
                            enabled = True, 
                            gcp_public_cidrs_access_enabled = True, ), 
                        master_ipv4_cidr_block = '', 
                        mesh_certificates = openapi_client.models.mesh_certificates.MeshCertificates(
                            enable_certificates = True, ), 
                        monitoring_config = openapi_client.models.monitoring_config.MonitoringConfig(
                            advanced_datapath_observability_config = openapi_client.models.advanced_datapath_observability_config.AdvancedDatapathObservabilityConfig(
                                enable_metrics = True, 
                                enable_relay = True, 
                                relay_mode = 'RELAY_MODE_UNSPECIFIED', ), 
                            managed_prometheus_config = openapi_client.models.managed_prometheus_config.ManagedPrometheusConfig(
                                enabled = True, ), ), 
                        monitoring_service = '', 
                        name = '', 
                        network = '', 
                        network_config = openapi_client.models.network_config.NetworkConfig(
                            datapath_provider = 'DATAPATH_PROVIDER_UNSPECIFIED', 
                            default_snat_status = openapi_client.models.default_snat_status.DefaultSnatStatus(
                                disabled = True, ), 
                            dns_config = openapi_client.models.dns_config.DNSConfig(
                                cluster_dns = 'PROVIDER_UNSPECIFIED', 
                                cluster_dns_domain = '', 
                                cluster_dns_scope = 'DNS_SCOPE_UNSPECIFIED', ), 
                            enable_fqdn_network_policy = True, 
                            enable_intra_node_visibility = True, 
                            enable_l4ilb_subsetting = True, 
                            enable_multi_networking = True, 
                            gateway_api_config = openapi_client.models.gateway_api_config.GatewayAPIConfig(
                                channel = 'CHANNEL_UNSPECIFIED', ), 
                            in_transit_encryption_config = 'IN_TRANSIT_ENCRYPTION_CONFIG_UNSPECIFIED', 
                            network = '', 
                            network_performance_config = openapi_client.models.cluster_network_performance_config.ClusterNetworkPerformanceConfig(
                                total_egress_bandwidth_tier = 'TIER_UNSPECIFIED', ), 
                            private_ipv6_google_access = 'PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED', 
                            service_external_ips_config = openapi_client.models.service_external_ips_config.ServiceExternalIPsConfig(
                                enabled = True, ), 
                            subnetwork = '', ), 
                        network_policy = openapi_client.models.network_policy.NetworkPolicy(
                            enabled = True, 
                            provider = 'PROVIDER_UNSPECIFIED', ), 
                        node_config = openapi_client.models.node_config.NodeConfig(
                            accelerators = [
                                openapi_client.models.accelerator_config.AcceleratorConfig(
                                    accelerator_count = '', 
                                    accelerator_type = '', 
                                    gpu_driver_installation_config = openapi_client.models.gpu_driver_installation_config.GPUDriverInstallationConfig(
                                        gpu_driver_version = 'GPU_DRIVER_VERSION_UNSPECIFIED', ), 
                                    gpu_partition_size = '', 
                                    gpu_sharing_config = openapi_client.models.gpu_sharing_config.GPUSharingConfig(
                                        gpu_sharing_strategy = 'GPU_SHARING_STRATEGY_UNSPECIFIED', 
                                        max_shared_clients_per_gpu = '', ), 
                                    max_time_shared_clients_per_gpu = '', )
                                ], 
                            advanced_machine_features = openapi_client.models.advanced_machine_features.AdvancedMachineFeatures(
                                threads_per_core = '', ), 
                            boot_disk_kms_key = '', 
                            disk_size_gb = 56, 
                            disk_type = '', 
                            enable_confidential_storage = True, 
                            ephemeral_storage_config = openapi_client.models.ephemeral_storage_config.EphemeralStorageConfig(
                                local_ssd_count = 56, ), 
                            ephemeral_storage_local_ssd_config = openapi_client.models.ephemeral_storage_local_ssd_config.EphemeralStorageLocalSsdConfig(
                                local_ssd_count = 56, ), 
                            fast_socket = openapi_client.models.fast_socket.FastSocket(
                                enabled = True, ), 
                            gcfs_config = openapi_client.models.gcfs_config.GcfsConfig(
                                enabled = True, ), 
                            gvnic = openapi_client.models.virtual_nic.VirtualNIC(
                                enabled = True, ), 
                            host_maintenance_policy = openapi_client.models.host_maintenance_policy.HostMaintenancePolicy(
                                maintenance_interval = 'MAINTENANCE_INTERVAL_UNSPECIFIED', 
                                opportunistic_maintenance_strategy = openapi_client.models.opportunistic_maintenance_strategy.OpportunisticMaintenanceStrategy(
                                    maintenance_availability_window = '', 
                                    min_nodes_per_pool = '', 
                                    node_idle_time_window = '', ), ), 
                            image_type = '', 
                            kubelet_config = openapi_client.models.node_kubelet_config.NodeKubeletConfig(
                                cpu_cfs_quota = True, 
                                cpu_cfs_quota_period = '', 
                                cpu_manager_policy = '', 
                                insecure_kubelet_readonly_port_enabled = True, 
                                pod_pids_limit = '', ), 
                            labels = {
                                'key' : ''
                                }, 
                            linux_node_config = openapi_client.models.linux_node_config.LinuxNodeConfig(
                                cgroup_mode = 'CGROUP_MODE_UNSPECIFIED', 
                                sysctls = {
                                    'key' : ''
                                    }, ), 
                            local_nvme_ssd_block_config = openapi_client.models.local_nvme_ssd_block_config.LocalNvmeSsdBlockConfig(
                                local_ssd_count = 56, ), 
                            local_ssd_count = 56, 
                            machine_type = '', 
                            metadata = {
                                'key' : ''
                                }, 
                            min_cpu_platform = '', 
                            node_group = '', 
                            preemptible = True, 
                            reservation_affinity = openapi_client.models.reservation_affinity.ReservationAffinity(
                                consume_reservation_type = 'UNSPECIFIED', 
                                key = '', 
                                values = [
                                    ''
                                    ], ), 
                            resource_labels = {
                                'key' : ''
                                }, 
                            resource_manager_tags = openapi_client.models.resource_manager_tags.ResourceManagerTags(
                                tags = {
                                    'key' : ''
                                    }, ), 
                            sandbox_config = openapi_client.models.sandbox_config.SandboxConfig(
                                sandbox_type = '', 
                                type = 'UNSPECIFIED', ), 
                            secondary_boot_disks = [
                                openapi_client.models.secondary_boot_disk.SecondaryBootDisk(
                                    disk_image = '', 
                                    mode = 'MODE_UNSPECIFIED', )
                                ], 
                            service_account = '', 
                            sole_tenant_config = openapi_client.models.sole_tenant_config.SoleTenantConfig(
                                node_affinities = [
                                    openapi_client.models.node_affinity.NodeAffinity(
                                        key = '', 
                                        operator = 'OPERATOR_UNSPECIFIED', )
                                    ], ), 
                            spot = True, 
                            tags = [
                                ''
                                ], 
                            taints = [
                                openapi_client.models.node_taint.NodeTaint(
                                    effect = 'EFFECT_UNSPECIFIED', 
                                    key = '', 
                                    value = '', )
                                ], 
                            windows_node_config = openapi_client.models.windows_node_config.WindowsNodeConfig(
                                os_version = 'OS_VERSION_UNSPECIFIED', ), 
                            workload_metadata_config = openapi_client.models.workload_metadata_config.WorkloadMetadataConfig(
                                mode = 'MODE_UNSPECIFIED', 
                                node_metadata = 'UNSPECIFIED', ), ), 
                        node_ipv4_cidr_size = 56, 
                        node_pool_auto_config = openapi_client.models.node_pool_auto_config.NodePoolAutoConfig(
                            network_tags = openapi_client.models.network_tags.NetworkTags(), ), 
                        node_pool_defaults = openapi_client.models.node_pool_defaults.NodePoolDefaults(
                            node_config_defaults = openapi_client.models.node_config_defaults.NodeConfigDefaults(), ), 
                        node_pools = [
                            openapi_client.models.node_pool.NodePool(
                                best_effort_provisioning = openapi_client.models.best_effort_provisioning.BestEffortProvisioning(
                                    enabled = True, 
                                    min_provision_nodes = 56, ), 
                                config = openapi_client.models.node_config.NodeConfig(
                                    boot_disk_kms_key = '', 
                                    disk_size_gb = 56, 
                                    disk_type = '', 
                                    enable_confidential_storage = True, 
                                    image_type = '', 
                                    local_ssd_count = 56, 
                                    machine_type = '', 
                                    min_cpu_platform = '', 
                                    node_group = '', 
                                    preemptible = True, 
                                    service_account = '', 
                                    spot = True, ), 
                                etag = '', 
                                initial_node_count = 56, 
                                max_pods_constraint = openapi_client.models.max_pods_constraint.MaxPodsConstraint(
                                    max_pods_per_node = '', ), 
                                name = '', 
                                placement_policy = openapi_client.models.placement_policy.PlacementPolicy(
                                    policy_name = '', 
                                    tpu_topology = '', 
                                    type = 'TYPE_UNSPECIFIED', ), 
                                pod_ipv4_cidr_size = 56, 
                                queued_provisioning = openapi_client.models.queued_provisioning.QueuedProvisioning(
                                    enabled = True, ), 
                                self_link = '', 
                                status = 'STATUS_UNSPECIFIED', 
                                status_message = '', 
                                update_info = openapi_client.models.update_info.UpdateInfo(
                                    blue_green_info = openapi_client.models.blue_green_info.BlueGreenInfo(
                                        blue_instance_group_urls = [
                                            ''
                                            ], 
                                        blue_pool_deletion_start_time = '', 
                                        green_instance_group_urls = [
                                            ''
                                            ], 
                                        green_pool_version = '', 
                                        phase = 'PHASE_UNSPECIFIED', ), ), 
                                version = '', )
                            ], 
                        notification_config = openapi_client.models.notification_config.NotificationConfig(
                            pubsub = openapi_client.models.pub_sub.PubSub(
                                enabled = True, 
                                filter = openapi_client.models.filter.Filter(
                                    event_type = [
                                        'EVENT_TYPE_UNSPECIFIED'
                                        ], ), 
                                topic = '', ), ), 
                        parent_product_config = openapi_client.models.parent_product_config.ParentProductConfig(
                            product_name = '', ), 
                        pod_security_policy_config = openapi_client.models.pod_security_policy_config.PodSecurityPolicyConfig(
                            enabled = True, ), 
                        private_cluster = True, 
                        private_cluster_config = openapi_client.models.private_cluster_config.PrivateClusterConfig(
                            enable_private_endpoint = True, 
                            enable_private_nodes = True, 
                            master_global_access_config = openapi_client.models.private_cluster_master_global_access_config.PrivateClusterMasterGlobalAccessConfig(
                                enabled = True, ), 
                            master_ipv4_cidr_block = '', 
                            peering_name = '', 
                            private_endpoint = '', 
                            private_endpoint_subnetwork = '', 
                            public_endpoint = '', ), 
                        protect_config = openapi_client.models.protect_config.ProtectConfig(
                            workload_config = openapi_client.models.workload_config.WorkloadConfig(
                                audit_mode = 'MODE_UNSPECIFIED', ), 
                            workload_vulnerability_mode = 'WORKLOAD_VULNERABILITY_MODE_UNSPECIFIED', ), 
                        release_channel = openapi_client.models.release_channel.ReleaseChannel(
                            channel = 'UNSPECIFIED', ), 
                        resource_labels = {
                            'key' : ''
                            }, 
                        resource_usage_export_config = openapi_client.models.resource_usage_export_config.ResourceUsageExportConfig(
                            bigquery_destination = openapi_client.models.big_query_destination.BigQueryDestination(
                                dataset_id = '', ), 
                            consumption_metering_config = openapi_client.models.consumption_metering_config.ConsumptionMeteringConfig(
                                enabled = True, ), 
                            enable_network_egress_metering = True, ), 
                        security_posture_config = openapi_client.models.security_posture_config.SecurityPostureConfig(
                            mode = 'MODE_UNSPECIFIED', 
                            vulnerability_mode = 'VULNERABILITY_MODE_UNSPECIFIED', ), 
                        self_link = '', 
                        services_ipv4_cidr = '', 
                        shielded_nodes = openapi_client.models.shielded_nodes.ShieldedNodes(
                            enabled = True, ), 
                        status = 'STATUS_UNSPECIFIED', 
                        status_message = '', 
                        subnetwork = '', 
                        tpu_config = openapi_client.models.tpu_config.TpuConfig(
                            enabled = True, 
                            ipv4_cidr_block = '', 
                            use_service_networking = True, ), 
                        tpu_ipv4_cidr_block = '', 
                        vertical_pod_autoscaling = openapi_client.models.vertical_pod_autoscaling.VerticalPodAutoscaling(
                            enabled = True, ), 
                        workload_alts_config = openapi_client.models.workload_alts_config.WorkloadALTSConfig(
                            enable_alts = True, ), 
                        workload_certificates = openapi_client.models.workload_certificates.WorkloadCertificates(
                            enable_certificates = True, ), 
                        workload_identity_config = openapi_client.models.workload_identity_config.WorkloadIdentityConfig(
                            identity_namespace = '', 
                            identity_provider = '', 
                            workload_pool = '', ), 
                        zone = '', )
                    ],
                missing_zones = [
                    ''
                    ]
            )
        else:
            return ListClustersResponse(
        )
        """

    def testListClustersResponse(self):
        """Test ListClustersResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.set_node_pool_autoscaling_request import SetNodePoolAutoscalingRequest

class TestSetNodePoolAutoscalingRequest(unittest.TestCase):
    """SetNodePoolAutoscalingRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SetNodePoolAutoscalingRequest:
        """Test SetNodePoolAutoscalingRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SetNodePoolAutoscalingRequest`
        """
        model = SetNodePoolAutoscalingRequest()
        if include_optional:
            return SetNodePoolAutoscalingRequest(
                autoscaling = openapi_client.models.node_pool_autoscaling.NodePoolAutoscaling(
                    autoprovisioned = True, 
                    enabled = True, 
                    location_policy = 'LOCATION_POLICY_UNSPECIFIED', 
                    max_node_count = 56, 
                    min_node_count = 56, 
                    total_max_node_count = 56, 
                    total_min_node_count = 56, ),
                cluster_id = '',
                name = '',
                node_pool_id = '',
                project_id = '',
                zone = ''
            )
        else:
            return SetNodePoolAutoscalingRequest(
        )
        """

    def testSetNodePoolAutoscalingRequest(self):
        """Test SetNodePoolAutoscalingRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

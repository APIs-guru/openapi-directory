# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.network_config import NetworkConfig

class TestNetworkConfig(unittest.TestCase):
    """NetworkConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NetworkConfig:
        """Test NetworkConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NetworkConfig`
        """
        model = NetworkConfig()
        if include_optional:
            return NetworkConfig(
                datapath_provider = 'DATAPATH_PROVIDER_UNSPECIFIED',
                default_snat_status = openapi_client.models.default_snat_status.DefaultSnatStatus(
                    disabled = True, ),
                dns_config = openapi_client.models.dns_config.DNSConfig(
                    cluster_dns = 'PROVIDER_UNSPECIFIED', 
                    cluster_dns_domain = '', 
                    cluster_dns_scope = 'DNS_SCOPE_UNSPECIFIED', ),
                enable_fqdn_network_policy = True,
                enable_intra_node_visibility = True,
                enable_l4ilb_subsetting = True,
                enable_multi_networking = True,
                gateway_api_config = openapi_client.models.gateway_api_config.GatewayAPIConfig(
                    channel = 'CHANNEL_UNSPECIFIED', ),
                in_transit_encryption_config = 'IN_TRANSIT_ENCRYPTION_CONFIG_UNSPECIFIED',
                network = '',
                network_performance_config = openapi_client.models.cluster_network_performance_config.ClusterNetworkPerformanceConfig(
                    total_egress_bandwidth_tier = 'TIER_UNSPECIFIED', ),
                private_ipv6_google_access = 'PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED',
                service_external_ips_config = openapi_client.models.service_external_ips_config.ServiceExternalIPsConfig(
                    enabled = True, ),
                subnetwork = ''
            )
        else:
            return NetworkConfig(
        )
        """

    def testNetworkConfig(self):
        """Test NetworkConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

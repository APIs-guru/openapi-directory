# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.update_cluster_request import UpdateClusterRequest

class TestUpdateClusterRequest(unittest.TestCase):
    """UpdateClusterRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateClusterRequest:
        """Test UpdateClusterRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateClusterRequest`
        """
        model = UpdateClusterRequest()
        if include_optional:
            return UpdateClusterRequest(
                cluster_id = '',
                name = '',
                project_id = '',
                update = openapi_client.models.cluster_update.ClusterUpdate(
                    additional_pod_ranges_config = openapi_client.models.additional_pod_ranges_config.AdditionalPodRangesConfig(
                        pod_range_info = [
                            openapi_client.models.range_info.RangeInfo(
                                range_name = '', 
                                utilization = 1.337, )
                            ], 
                        pod_range_names = [
                            ''
                            ], ), 
                    desired_addons_config = openapi_client.models.addons_config.AddonsConfig(
                        cloud_run_config = openapi_client.models.cloud_run_config.CloudRunConfig(
                            disabled = True, 
                            load_balancer_type = 'LOAD_BALANCER_TYPE_UNSPECIFIED', ), 
                        config_connector_config = openapi_client.models.config_connector_config.ConfigConnectorConfig(
                            enabled = True, ), 
                        dns_cache_config = openapi_client.models.dns_cache_config.DnsCacheConfig(
                            enabled = True, ), 
                        gce_persistent_disk_csi_driver_config = openapi_client.models.gce_persistent_disk_csi_driver_config.GcePersistentDiskCsiDriverConfig(
                            enabled = True, ), 
                        gcp_filestore_csi_driver_config = openapi_client.models.gcp_filestore_csi_driver_config.GcpFilestoreCsiDriverConfig(
                            enabled = True, ), 
                        gcs_fuse_csi_driver_config = openapi_client.models.gcs_fuse_csi_driver_config.GcsFuseCsiDriverConfig(
                            enabled = True, ), 
                        gke_backup_agent_config = openapi_client.models.gke_backup_agent_config.GkeBackupAgentConfig(
                            enabled = True, ), 
                        horizontal_pod_autoscaling = openapi_client.models.horizontal_pod_autoscaling.HorizontalPodAutoscaling(
                            disabled = True, ), 
                        http_load_balancing = openapi_client.models.http_load_balancing.HttpLoadBalancing(
                            disabled = True, ), 
                        istio_config = openapi_client.models.istio_config.IstioConfig(
                            auth = 'AUTH_NONE', 
                            disabled = True, ), 
                        kalm_config = openapi_client.models.kalm_config.KalmConfig(
                            enabled = True, ), 
                        kubernetes_dashboard = openapi_client.models.kubernetes_dashboard.KubernetesDashboard(
                            disabled = True, ), 
                        network_policy_config = openapi_client.models.network_policy_config.NetworkPolicyConfig(
                            disabled = True, ), 
                        stateful_ha_config = openapi_client.models.stateful_ha_config.StatefulHAConfig(
                            enabled = True, ), ), 
                    desired_authenticator_groups_config = openapi_client.models.authenticator_groups_config.AuthenticatorGroupsConfig(
                        enabled = True, 
                        security_group = '', ), 
                    desired_autopilot_workload_policy_config = openapi_client.models.workload_policy_config.WorkloadPolicyConfig(
                        allow_net_admin = True, ), 
                    desired_binary_authorization = openapi_client.models.binary_authorization.BinaryAuthorization(
                        enabled = True, 
                        evaluation_mode = 'EVALUATION_MODE_UNSPECIFIED', 
                        policy_bindings = [
                            openapi_client.models.policy_binding.PolicyBinding(
                                name = '', )
                            ], ), 
                    desired_cluster_autoscaling = openapi_client.models.cluster_autoscaling.ClusterAutoscaling(
                        autoprovisioning_locations = [
                            ''
                            ], 
                        autoprovisioning_node_pool_defaults = openapi_client.models.autoprovisioning_node_pool_defaults.AutoprovisioningNodePoolDefaults(
                            boot_disk_kms_key = '', 
                            disk_size_gb = 56, 
                            disk_type = '', 
                            image_type = '', 
                            insecure_kubelet_readonly_port_enabled = True, 
                            management = openapi_client.models.node_management.NodeManagement(
                                auto_repair = True, 
                                auto_upgrade = True, 
                                upgrade_options = openapi_client.models.auto_upgrade_options.AutoUpgradeOptions(
                                    auto_upgrade_start_time = '', 
                                    description = '', ), ), 
                            min_cpu_platform = '', 
                            oauth_scopes = [
                                ''
                                ], 
                            service_account = '', 
                            shielded_instance_config = openapi_client.models.shielded_instance_config.ShieldedInstanceConfig(
                                enable_integrity_monitoring = True, 
                                enable_secure_boot = True, ), 
                            upgrade_settings = openapi_client.models.upgrade_settings.UpgradeSettings(
                                blue_green_settings = openapi_client.models.blue_green_settings.BlueGreenSettings(
                                    autoscaled_rollout_policy = openapi_client.models.autoscaled_rollout_policy.AutoscaledRolloutPolicy(), 
                                    node_pool_soak_duration = '', 
                                    standard_rollout_policy = openapi_client.models.standard_rollout_policy.StandardRolloutPolicy(
                                        batch_node_count = 56, 
                                        batch_percentage = 1.337, 
                                        batch_soak_duration = '', ), ), 
                                max_surge = 56, 
                                max_unavailable = 56, 
                                strategy = 'NODE_POOL_UPDATE_STRATEGY_UNSPECIFIED', ), ), 
                        autoscaling_profile = 'PROFILE_UNSPECIFIED', 
                        enable_node_autoprovisioning = True, 
                        resource_limits = [
                            openapi_client.models.resource_limit.ResourceLimit(
                                maximum = '', 
                                minimum = '', 
                                resource_type = '', )
                            ], ), 
                    desired_cluster_telemetry = openapi_client.models.cluster_telemetry.ClusterTelemetry(
                        type = 'UNSPECIFIED', ), 
                    desired_cost_management_config = openapi_client.models.cost_management_config.CostManagementConfig(
                        enabled = True, ), 
                    desired_database_encryption = openapi_client.models.database_encryption.DatabaseEncryption(
                        key_name = '', 
                        state = 'UNKNOWN', ), 
                    desired_datapath_provider = 'DATAPATH_PROVIDER_UNSPECIFIED', 
                    desired_default_snat_status = openapi_client.models.default_snat_status.DefaultSnatStatus(
                        disabled = True, ), 
                    desired_dns_config = openapi_client.models.dns_config.DNSConfig(
                        cluster_dns = 'PROVIDER_UNSPECIFIED', 
                        cluster_dns_domain = '', 
                        cluster_dns_scope = 'DNS_SCOPE_UNSPECIFIED', ), 
                    desired_enable_fqdn_network_policy = True, 
                    desired_enable_private_endpoint = True, 
                    desired_fleet = openapi_client.models.fleet.Fleet(
                        membership = '', 
                        pre_registered = True, 
                        project = '', ), 
                    desired_gateway_api_config = openapi_client.models.gateway_api_config.GatewayAPIConfig(
                        channel = 'CHANNEL_UNSPECIFIED', ), 
                    desired_gcfs_config = openapi_client.models.gcfs_config.GcfsConfig(
                        enabled = True, ), 
                    desired_host_maintenance_policy = openapi_client.models.host_maintenance_policy.HostMaintenancePolicy(
                        maintenance_interval = 'MAINTENANCE_INTERVAL_UNSPECIFIED', 
                        opportunistic_maintenance_strategy = openapi_client.models.opportunistic_maintenance_strategy.OpportunisticMaintenanceStrategy(
                            maintenance_availability_window = '', 
                            min_nodes_per_pool = '', 
                            node_idle_time_window = '', ), ), 
                    desired_identity_service_config = openapi_client.models.identity_service_config.IdentityServiceConfig(
                        enabled = True, ), 
                    desired_image_type = '', 
                    desired_in_transit_encryption_config = 'IN_TRANSIT_ENCRYPTION_CONFIG_UNSPECIFIED', 
                    desired_intra_node_visibility_config = openapi_client.models.intra_node_visibility_config.IntraNodeVisibilityConfig(
                        enabled = True, ), 
                    desired_k8s_beta_apis = openapi_client.models.k8s_beta_api_config.K8sBetaAPIConfig(
                        enabled_apis = [
                            ''
                            ], ), 
                    desired_l4ilb_subsetting_config = openapi_client.models.ilb_subsetting_config.ILBSubsettingConfig(
                        enabled = True, ), 
                    desired_locations = [
                        ''
                        ], 
                    desired_logging_config = openapi_client.models.logging_config.LoggingConfig(
                        component_config = openapi_client.models.logging_component_config.LoggingComponentConfig(
                            enable_components = [
                                'COMPONENT_UNSPECIFIED'
                                ], ), ), 
                    desired_logging_service = '', 
                    desired_master = openapi_client.models.master.master(), 
                    desired_master_authorized_networks_config = openapi_client.models.master_authorized_networks_config.MasterAuthorizedNetworksConfig(
                        cidr_blocks = [
                            openapi_client.models.cidr_block.CidrBlock(
                                cidr_block = '', 
                                display_name = '', )
                            ], 
                        enabled = True, 
                        gcp_public_cidrs_access_enabled = True, ), 
                    desired_master_version = '', 
                    desired_mesh_certificates = openapi_client.models.mesh_certificates.MeshCertificates(
                        enable_certificates = True, ), 
                    desired_monitoring_config = openapi_client.models.monitoring_config.MonitoringConfig(
                        advanced_datapath_observability_config = openapi_client.models.advanced_datapath_observability_config.AdvancedDatapathObservabilityConfig(
                            enable_metrics = True, 
                            enable_relay = True, 
                            relay_mode = 'RELAY_MODE_UNSPECIFIED', ), 
                        managed_prometheus_config = openapi_client.models.managed_prometheus_config.ManagedPrometheusConfig(
                            enabled = True, ), ), 
                    desired_monitoring_service = '', 
                    desired_network_performance_config = openapi_client.models.cluster_network_performance_config.ClusterNetworkPerformanceConfig(
                        total_egress_bandwidth_tier = 'TIER_UNSPECIFIED', ), 
                    desired_node_pool_auto_config_network_tags = openapi_client.models.network_tags.NetworkTags(
                        tags = [
                            ''
                            ], ), 
                    desired_node_pool_auto_config_resource_manager_tags = openapi_client.models.resource_manager_tags.ResourceManagerTags(), 
                    desired_node_pool_autoscaling = openapi_client.models.node_pool_autoscaling.NodePoolAutoscaling(
                        autoprovisioned = True, 
                        enabled = True, 
                        location_policy = 'LOCATION_POLICY_UNSPECIFIED', 
                        max_node_count = 56, 
                        min_node_count = 56, 
                        total_max_node_count = 56, 
                        total_min_node_count = 56, ), 
                    desired_node_pool_id = '', 
                    desired_node_pool_logging_config = openapi_client.models.node_pool_logging_config.NodePoolLoggingConfig(
                        variant_config = openapi_client.models.logging_variant_config.LoggingVariantConfig(
                            variant = 'VARIANT_UNSPECIFIED', ), ), 
                    desired_node_version = '', 
                    desired_notification_config = openapi_client.models.notification_config.NotificationConfig(
                        pubsub = openapi_client.models.pub_sub.PubSub(
                            enabled = True, 
                            filter = openapi_client.models.filter.Filter(
                                event_type = [
                                    'EVENT_TYPE_UNSPECIFIED'
                                    ], ), 
                            topic = '', ), ), 
                    desired_parent_product_config = openapi_client.models.parent_product_config.ParentProductConfig(
                        labels = {
                            'key' : ''
                            }, 
                        product_name = '', ), 
                    desired_pod_security_policy_config = openapi_client.models.pod_security_policy_config.PodSecurityPolicyConfig(
                        enabled = True, ), 
                    desired_private_cluster_config = openapi_client.models.private_cluster_config.PrivateClusterConfig(
                        enable_private_endpoint = True, 
                        enable_private_nodes = True, 
                        master_global_access_config = openapi_client.models.private_cluster_master_global_access_config.PrivateClusterMasterGlobalAccessConfig(
                            enabled = True, ), 
                        master_ipv4_cidr_block = '', 
                        peering_name = '', 
                        private_endpoint = '', 
                        private_endpoint_subnetwork = '', 
                        public_endpoint = '', ), 
                    desired_private_ipv6_google_access = 'PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED', 
                    desired_protect_config = openapi_client.models.protect_config.ProtectConfig(
                        workload_config = openapi_client.models.workload_config.WorkloadConfig(
                            audit_mode = 'MODE_UNSPECIFIED', ), 
                        workload_vulnerability_mode = 'WORKLOAD_VULNERABILITY_MODE_UNSPECIFIED', ), 
                    desired_release_channel = openapi_client.models.release_channel.ReleaseChannel(
                        channel = 'UNSPECIFIED', ), 
                    desired_resource_usage_export_config = openapi_client.models.resource_usage_export_config.ResourceUsageExportConfig(
                        bigquery_destination = openapi_client.models.big_query_destination.BigQueryDestination(
                            dataset_id = '', ), 
                        consumption_metering_config = openapi_client.models.consumption_metering_config.ConsumptionMeteringConfig(
                            enabled = True, ), 
                        enable_network_egress_metering = True, ), 
                    desired_security_posture_config = openapi_client.models.security_posture_config.SecurityPostureConfig(
                        mode = 'MODE_UNSPECIFIED', 
                        vulnerability_mode = 'VULNERABILITY_MODE_UNSPECIFIED', ), 
                    desired_service_external_ips_config = openapi_client.models.service_external_ips_config.ServiceExternalIPsConfig(
                        enabled = True, ), 
                    desired_shielded_nodes = openapi_client.models.shielded_nodes.ShieldedNodes(
                        enabled = True, ), 
                    desired_stack_type = 'STACK_TYPE_UNSPECIFIED', 
                    desired_tpu_config = openapi_client.models.tpu_config.TpuConfig(
                        enabled = True, 
                        ipv4_cidr_block = '', 
                        use_service_networking = True, ), 
                    desired_vertical_pod_autoscaling = openapi_client.models.vertical_pod_autoscaling.VerticalPodAutoscaling(
                        enabled = True, ), 
                    desired_workload_alts_config = openapi_client.models.workload_alts_config.WorkloadALTSConfig(
                        enable_alts = True, ), 
                    desired_workload_certificates = openapi_client.models.workload_certificates.WorkloadCertificates(
                        enable_certificates = True, ), 
                    desired_workload_identity_config = openapi_client.models.workload_identity_config.WorkloadIdentityConfig(
                        identity_namespace = '', 
                        identity_provider = '', 
                        workload_pool = '', ), 
                    enable_k8s_beta_apis = openapi_client.models.k8s_beta_api_config.K8sBetaAPIConfig(), 
                    etag = '', 
                    removed_additional_pod_ranges_config = openapi_client.models.additional_pod_ranges_config.AdditionalPodRangesConfig(), ),
                zone = ''
            )
        else:
            return UpdateClusterRequest(
        )
        """

    def testUpdateClusterRequest(self):
        """Test UpdateClusterRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

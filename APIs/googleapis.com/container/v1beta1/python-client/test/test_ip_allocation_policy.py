# coding: utf-8

"""
    Kubernetes Engine API

    Builds and manages container-based applications, powered by the open source Kubernetes technology.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.ip_allocation_policy import IPAllocationPolicy

class TestIPAllocationPolicy(unittest.TestCase):
    """IPAllocationPolicy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IPAllocationPolicy:
        """Test IPAllocationPolicy
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IPAllocationPolicy`
        """
        model = IPAllocationPolicy()
        if include_optional:
            return IPAllocationPolicy(
                additional_pod_ranges_config = openapi_client.models.additional_pod_ranges_config.AdditionalPodRangesConfig(
                    pod_range_info = [
                        openapi_client.models.range_info.RangeInfo(
                            range_name = '', 
                            utilization = 1.337, )
                        ], 
                    pod_range_names = [
                        ''
                        ], ),
                allow_route_overlap = True,
                cluster_ipv4_cidr = '',
                cluster_ipv4_cidr_block = '',
                cluster_secondary_range_name = '',
                create_subnetwork = True,
                default_pod_ipv4_range_utilization = 1.337,
                ipv6_access_type = 'IPV6_ACCESS_TYPE_UNSPECIFIED',
                node_ipv4_cidr = '',
                node_ipv4_cidr_block = '',
                pod_cidr_overprovision_config = openapi_client.models.pod_cidr_overprovision_config.PodCIDROverprovisionConfig(
                    disable = True, ),
                services_ipv4_cidr = '',
                services_ipv4_cidr_block = '',
                services_ipv6_cidr_block = '',
                services_secondary_range_name = '',
                stack_type = 'STACK_TYPE_UNSPECIFIED',
                subnet_ipv6_cidr_block = '',
                subnetwork_name = '',
                tpu_ipv4_cidr_block = '',
                use_ip_aliases = True,
                use_routes = True
            )
        else:
            return IPAllocationPolicy(
        )
        """

    def testIPAllocationPolicy(self):
        """Test IPAllocationPolicy"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

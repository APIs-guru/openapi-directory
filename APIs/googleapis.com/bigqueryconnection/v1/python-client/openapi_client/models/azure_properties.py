# coding: utf-8

"""
    BigQuery Connection API

    Allows users to manage BigQuery connections to external data sources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AzureProperties(BaseModel):
    """
    Container for connection properties specific to Azure.
    """ # noqa: E501
    application: Optional[StrictStr] = Field(default=None, description="Output only. The name of the Azure Active Directory Application.")
    client_id: Optional[StrictStr] = Field(default=None, description="Output only. The client id of the Azure Active Directory Application.", alias="clientId")
    customer_tenant_id: Optional[StrictStr] = Field(default=None, description="The id of customer's directory that host the data.", alias="customerTenantId")
    federated_application_client_id: Optional[StrictStr] = Field(default=None, description="The client ID of the user's Azure Active Directory Application used for a federated connection.", alias="federatedApplicationClientId")
    identity: Optional[StrictStr] = Field(default=None, description="Output only. A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's Azure Active Directory Application.")
    object_id: Optional[StrictStr] = Field(default=None, description="Output only. The object id of the Azure Active Directory Application.", alias="objectId")
    redirect_uri: Optional[StrictStr] = Field(default=None, description="The URL user will be redirected to after granting consent during connection setup.", alias="redirectUri")
    __properties: ClassVar[List[str]] = ["application", "clientId", "customerTenantId", "federatedApplicationClientId", "identity", "objectId", "redirectUri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzureProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "application",
            "client_id",
            "identity",
            "object_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzureProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "application": obj.get("application"),
            "clientId": obj.get("clientId"),
            "customerTenantId": obj.get("customerTenantId"),
            "federatedApplicationClientId": obj.get("federatedApplicationClientId"),
            "identity": obj.get("identity"),
            "objectId": obj.get("objectId"),
            "redirectUri": obj.get("redirectUri")
        })
        return _obj



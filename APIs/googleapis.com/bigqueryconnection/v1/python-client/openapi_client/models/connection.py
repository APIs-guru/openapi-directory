# coding: utf-8

"""
    BigQuery Connection API

    Allows users to manage BigQuery connections to external data sources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aws_properties import AwsProperties
from openapi_client.models.azure_properties import AzureProperties
from openapi_client.models.cloud_resource_properties import CloudResourceProperties
from openapi_client.models.cloud_spanner_properties import CloudSpannerProperties
from openapi_client.models.cloud_sql_properties import CloudSqlProperties
from openapi_client.models.connector_configuration import ConnectorConfiguration
from openapi_client.models.salesforce_data_cloud_properties import SalesforceDataCloudProperties
from openapi_client.models.spark_properties import SparkProperties
from typing import Optional, Set
from typing_extensions import Self

class Connection(BaseModel):
    """
    Configuration parameters to establish connection with an external data source, except the credential attributes.
    """ # noqa: E501
    aws: Optional[AwsProperties] = None
    azure: Optional[AzureProperties] = None
    cloud_resource: Optional[CloudResourceProperties] = Field(default=None, alias="cloudResource")
    cloud_spanner: Optional[CloudSpannerProperties] = Field(default=None, alias="cloudSpanner")
    cloud_sql: Optional[CloudSqlProperties] = Field(default=None, alias="cloudSql")
    configuration: Optional[ConnectorConfiguration] = None
    creation_time: Optional[StrictStr] = Field(default=None, description="Output only. The creation timestamp of the connection.", alias="creationTime")
    description: Optional[StrictStr] = Field(default=None, description="User provided description.")
    friendly_name: Optional[StrictStr] = Field(default=None, description="User provided display name for the connection.", alias="friendlyName")
    has_credential: Optional[StrictBool] = Field(default=None, description="Output only. True, if credential is configured for this connection.", alias="hasCredential")
    kms_key_name: Optional[StrictStr] = Field(default=None, description="Optional. The Cloud KMS key that is used for encryption. Example: `projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]`", alias="kmsKeyName")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Output only. The last update timestamp of the connection.", alias="lastModifiedTime")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the connection in the form of: `projects/{project_id}/locations/{location_id}/connections/{connection_id}`")
    salesforce_data_cloud: Optional[SalesforceDataCloudProperties] = Field(default=None, alias="salesforceDataCloud")
    spark: Optional[SparkProperties] = None
    __properties: ClassVar[List[str]] = ["aws", "azure", "cloudResource", "cloudSpanner", "cloudSql", "configuration", "creationTime", "description", "friendlyName", "hasCredential", "kmsKeyName", "lastModifiedTime", "name", "salesforceDataCloud", "spark"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Connection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "has_credential",
            "last_modified_time",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aws
        if self.aws:
            _dict['aws'] = self.aws.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure
        if self.azure:
            _dict['azure'] = self.azure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cloud_resource
        if self.cloud_resource:
            _dict['cloudResource'] = self.cloud_resource.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cloud_spanner
        if self.cloud_spanner:
            _dict['cloudSpanner'] = self.cloud_spanner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cloud_sql
        if self.cloud_sql:
            _dict['cloudSql'] = self.cloud_sql.to_dict()
        # override the default output from pydantic by calling `to_dict()` of configuration
        if self.configuration:
            _dict['configuration'] = self.configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of salesforce_data_cloud
        if self.salesforce_data_cloud:
            _dict['salesforceDataCloud'] = self.salesforce_data_cloud.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spark
        if self.spark:
            _dict['spark'] = self.spark.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Connection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aws": AwsProperties.from_dict(obj["aws"]) if obj.get("aws") is not None else None,
            "azure": AzureProperties.from_dict(obj["azure"]) if obj.get("azure") is not None else None,
            "cloudResource": CloudResourceProperties.from_dict(obj["cloudResource"]) if obj.get("cloudResource") is not None else None,
            "cloudSpanner": CloudSpannerProperties.from_dict(obj["cloudSpanner"]) if obj.get("cloudSpanner") is not None else None,
            "cloudSql": CloudSqlProperties.from_dict(obj["cloudSql"]) if obj.get("cloudSql") is not None else None,
            "configuration": ConnectorConfiguration.from_dict(obj["configuration"]) if obj.get("configuration") is not None else None,
            "creationTime": obj.get("creationTime"),
            "description": obj.get("description"),
            "friendlyName": obj.get("friendlyName"),
            "hasCredential": obj.get("hasCredential"),
            "kmsKeyName": obj.get("kmsKeyName"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "name": obj.get("name"),
            "salesforceDataCloud": SalesforceDataCloudProperties.from_dict(obj["salesforceDataCloud"]) if obj.get("salesforceDataCloud") is not None else None,
            "spark": SparkProperties.from_dict(obj["spark"]) if obj.get("spark") is not None else None
        })
        return _obj



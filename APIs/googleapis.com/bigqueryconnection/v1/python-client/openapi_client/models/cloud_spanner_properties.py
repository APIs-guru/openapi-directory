# coding: utf-8

"""
    BigQuery Connection API

    Allows users to manage BigQuery connections to external data sources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CloudSpannerProperties(BaseModel):
    """
    Connection properties specific to Cloud Spanner.
    """ # noqa: E501
    database: Optional[StrictStr] = Field(default=None, description="Cloud Spanner database in the form `project/instance/database'")
    database_role: Optional[StrictStr] = Field(default=None, description="Optional. Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as `SELECT` and `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. For more details, see [About fine-grained access control] (https://cloud.google.com/spanner/docs/fgac-about). REQUIRES: The database role name must start with a letter, and can only contain letters, numbers, and underscores.", alias="databaseRole")
    max_parallelism: Optional[StrictInt] = Field(default=None, description="Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. REQUIRES: `use_parallelism` must be set. REQUIRES: `use_data_boost` must be set.", alias="maxParallelism")
    use_data_boost: Optional[StrictBool] = Field(default=None, description="If set, the request will be executed via Spanner independent compute resources. REQUIRES: `use_parallelism` must be set.", alias="useDataBoost")
    use_parallelism: Optional[StrictBool] = Field(default=None, description="If parallelism should be used when reading from Cloud Spanner", alias="useParallelism")
    use_serverless_analytics: Optional[StrictBool] = Field(default=None, description="Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.", alias="useServerlessAnalytics")
    __properties: ClassVar[List[str]] = ["database", "databaseRole", "maxParallelism", "useDataBoost", "useParallelism", "useServerlessAnalytics"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudSpannerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudSpannerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "database": obj.get("database"),
            "databaseRole": obj.get("databaseRole"),
            "maxParallelism": obj.get("maxParallelism"),
            "useDataBoost": obj.get("useDataBoost"),
            "useParallelism": obj.get("useParallelism"),
            "useServerlessAnalytics": obj.get("useServerlessAnalytics")
        })
        return _obj



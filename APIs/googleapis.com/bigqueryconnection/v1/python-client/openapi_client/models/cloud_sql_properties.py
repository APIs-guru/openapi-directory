# coding: utf-8

"""
    BigQuery Connection API

    Allows users to manage BigQuery connections to external data sources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cloud_sql_credential import CloudSqlCredential
from typing import Optional, Set
from typing_extensions import Self

class CloudSqlProperties(BaseModel):
    """
    Connection properties specific to the Cloud SQL.
    """ # noqa: E501
    credential: Optional[CloudSqlCredential] = None
    database: Optional[StrictStr] = Field(default=None, description="Database name.")
    instance_id: Optional[StrictStr] = Field(default=None, description="Cloud SQL instance ID in the form `project:location:instance`.", alias="instanceId")
    service_account_id: Optional[StrictStr] = Field(default=None, description="Output only. The account ID of the service used for the purpose of this connection. When the connection is used in the context of an operation in BigQuery, this service account will serve as the identity being used for connecting to the CloudSQL instance specified in this connection.", alias="serviceAccountId")
    type: Optional[StrictStr] = Field(default=None, description="Type of the Cloud SQL database.")
    __properties: ClassVar[List[str]] = ["credential", "database", "instanceId", "serviceAccountId", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATABASE_TYPE_UNSPECIFIED', 'POSTGRES', 'MYSQL']):
            raise ValueError("must be one of enum values ('DATABASE_TYPE_UNSPECIFIED', 'POSTGRES', 'MYSQL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudSqlProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "service_account_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of credential
        if self.credential:
            _dict['credential'] = self.credential.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudSqlProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "credential": CloudSqlCredential.from_dict(obj["credential"]) if obj.get("credential") is not None else None,
            "database": obj.get("database"),
            "instanceId": obj.get("instanceId"),
            "serviceAccountId": obj.get("serviceAccountId"),
            "type": obj.get("type")
        })
        return _obj



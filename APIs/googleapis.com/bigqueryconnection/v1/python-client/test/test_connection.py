# coding: utf-8

"""
    BigQuery Connection API

    Allows users to manage BigQuery connections to external data sources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.connection import Connection

class TestConnection(unittest.TestCase):
    """Connection unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Connection:
        """Test Connection
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Connection`
        """
        model = Connection()
        if include_optional:
            return Connection(
                aws = openapi_client.models.aws_properties.AwsProperties(
                    access_role = openapi_client.models.aws_access_role.AwsAccessRole(
                        iam_role_id = '', 
                        identity = '', ), ),
                azure = openapi_client.models.azure_properties.AzureProperties(
                    application = '', 
                    client_id = '', 
                    customer_tenant_id = '', 
                    federated_application_client_id = '', 
                    identity = '', 
                    object_id = '', 
                    redirect_uri = '', ),
                cloud_resource = openapi_client.models.cloud_resource_properties.CloudResourceProperties(
                    service_account_id = '', ),
                cloud_spanner = openapi_client.models.cloud_spanner_properties.CloudSpannerProperties(
                    database = '', 
                    database_role = '', 
                    max_parallelism = 56, 
                    use_data_boost = True, 
                    use_parallelism = True, 
                    use_serverless_analytics = True, ),
                cloud_sql = openapi_client.models.cloud_sql_properties.CloudSqlProperties(
                    credential = openapi_client.models.cloud_sql_credential.CloudSqlCredential(
                        password = '', 
                        username = '', ), 
                    database = '', 
                    instance_id = '', 
                    service_account_id = '', 
                    type = 'DATABASE_TYPE_UNSPECIFIED', ),
                configuration = openapi_client.models.connector_configuration.ConnectorConfiguration(
                    authentication = openapi_client.models.connector_configuration_authentication.ConnectorConfigurationAuthentication(
                        username_password = openapi_client.models.connector_configuration_username_password.ConnectorConfigurationUsernamePassword(
                            password = openapi_client.models.connector_configuration_secret.ConnectorConfigurationSecret(
                                plaintext = '', 
                                secret_type = 'SECRET_TYPE_UNSPECIFIED', ), 
                            username = '', ), ), 
                    connector_id = '', 
                    endpoint = openapi_client.models.connector_configuration_endpoint.ConnectorConfigurationEndpoint(
                        host_port = '', ), ),
                creation_time = '',
                description = '',
                friendly_name = '',
                has_credential = True,
                kms_key_name = '',
                last_modified_time = '',
                name = '',
                salesforce_data_cloud = openapi_client.models.salesforce_data_cloud_properties.SalesforceDataCloudProperties(
                    identity = '', 
                    instance_uri = '', 
                    tenant_id = '', ),
                spark = openapi_client.models.spark_properties.SparkProperties(
                    metastore_service_config = openapi_client.models.metastore_service_config.MetastoreServiceConfig(
                        metastore_service = '', ), 
                    service_account_id = '', 
                    spark_history_server_config = openapi_client.models.spark_history_server_config.SparkHistoryServerConfig(
                        dataproc_cluster = '', ), )
            )
        else:
            return Connection(
        )
        """

    def testConnection(self):
        """Test Connection"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

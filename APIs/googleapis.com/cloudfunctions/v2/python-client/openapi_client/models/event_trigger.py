# coding: utf-8

"""
    Cloud Functions API

    Manages lightweight user-provided functions executed in response to events.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.event_filter import EventFilter
from typing import Optional, Set
from typing_extensions import Self

class EventTrigger(BaseModel):
    """
    Describes EventTrigger, used to request events to be sent from another service.
    """ # noqa: E501
    channel: Optional[StrictStr] = Field(default=None, description="Optional. The name of the channel associated with the trigger in `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from Eventarc SaaS partners.")
    event_filters: Optional[List[EventFilter]] = Field(default=None, description="Criteria used to filter events.", alias="eventFilters")
    event_type: Optional[StrictStr] = Field(default=None, description="Required. The type of event to observe. For example: `google.cloud.audit.log.v1.written` or `google.cloud.pubsub.topic.v1.messagePublished`.", alias="eventType")
    pubsub_topic: Optional[StrictStr] = Field(default=None, description="Optional. The name of a Pub/Sub topic in the same project that will be used as the transport topic for the event delivery. Format: `projects/{project}/topics/{topic}`. This is only valid for events of type `google.cloud.pubsub.topic.v1.messagePublished`. The topic provided here will not be deleted at function deletion.", alias="pubsubTopic")
    retry_policy: Optional[StrictStr] = Field(default=None, description="Optional. If unset, then defaults to ignoring failures (i.e. not retrying them).", alias="retryPolicy")
    service: Optional[StrictStr] = Field(default=None, description="Optional. The hostname of the service that 1st Gen function should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace. The field is only applicable to 1st Gen functions.")
    service_account_email: Optional[StrictStr] = Field(default=None, description="Optional. The email of the trigger's service account. The service account must have permission to invoke Cloud Run services, the permission is `run.routes.invoke`. If empty, defaults to the Compute Engine default service account: `{project_number}-compute@developer.gserviceaccount.com`.", alias="serviceAccountEmail")
    trigger: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the Eventarc trigger. The format of this field is `projects/{project}/locations/{region}/triggers/{trigger}`.")
    trigger_region: Optional[StrictStr] = Field(default=None, description="The region that the trigger will be in. The trigger will only receive events originating in this region. It can be the same region as the function, a different region or multi-region, or the global region. If not provided, defaults to the same region as the function.", alias="triggerRegion")
    __properties: ClassVar[List[str]] = ["channel", "eventFilters", "eventType", "pubsubTopic", "retryPolicy", "service", "serviceAccountEmail", "trigger", "triggerRegion"]

    @field_validator('retry_policy')
    def retry_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RETRY_POLICY_UNSPECIFIED', 'RETRY_POLICY_DO_NOT_RETRY', 'RETRY_POLICY_RETRY']):
            raise ValueError("must be one of enum values ('RETRY_POLICY_UNSPECIFIED', 'RETRY_POLICY_DO_NOT_RETRY', 'RETRY_POLICY_RETRY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventTrigger from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "trigger",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in event_filters (list)
        _items = []
        if self.event_filters:
            for _item_event_filters in self.event_filters:
                if _item_event_filters:
                    _items.append(_item_event_filters.to_dict())
            _dict['eventFilters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventTrigger from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channel": obj.get("channel"),
            "eventFilters": [EventFilter.from_dict(_item) for _item in obj["eventFilters"]] if obj.get("eventFilters") is not None else None,
            "eventType": obj.get("eventType"),
            "pubsubTopic": obj.get("pubsubTopic"),
            "retryPolicy": obj.get("retryPolicy"),
            "service": obj.get("service"),
            "serviceAccountEmail": obj.get("serviceAccountEmail"),
            "trigger": obj.get("trigger"),
            "triggerRegion": obj.get("triggerRegion")
        })
        return _obj



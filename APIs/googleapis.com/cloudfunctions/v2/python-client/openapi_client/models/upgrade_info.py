# coding: utf-8

"""
    Cloud Functions API

    Manages lightweight user-provided functions executed in response to events.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.build_config import BuildConfig
from openapi_client.models.event_trigger import EventTrigger
from openapi_client.models.service_config import ServiceConfig
from typing import Optional, Set
from typing_extensions import Self

class UpgradeInfo(BaseModel):
    """
    Information related to: * A function's eligibility for 1st Gen to 2nd Gen migration * Current state of migration for function undergoing migration.
    """ # noqa: E501
    build_config: Optional[BuildConfig] = Field(default=None, alias="buildConfig")
    event_trigger: Optional[EventTrigger] = Field(default=None, alias="eventTrigger")
    service_config: Optional[ServiceConfig] = Field(default=None, alias="serviceConfig")
    upgrade_state: Optional[StrictStr] = Field(default=None, description="UpgradeState of the function", alias="upgradeState")
    __properties: ClassVar[List[str]] = ["buildConfig", "eventTrigger", "serviceConfig", "upgradeState"]

    @field_validator('upgrade_state')
    def upgrade_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UPGRADE_STATE_UNSPECIFIED', 'ELIGIBLE_FOR_2ND_GEN_UPGRADE', 'UPGRADE_OPERATION_IN_PROGRESS', 'SETUP_FUNCTION_UPGRADE_CONFIG_SUCCESSFUL', 'SETUP_FUNCTION_UPGRADE_CONFIG_ERROR', 'ABORT_FUNCTION_UPGRADE_ERROR', 'REDIRECT_FUNCTION_UPGRADE_TRAFFIC_SUCCESSFUL', 'REDIRECT_FUNCTION_UPGRADE_TRAFFIC_ERROR', 'ROLLBACK_FUNCTION_UPGRADE_TRAFFIC_ERROR', 'COMMIT_FUNCTION_UPGRADE_ERROR']):
            raise ValueError("must be one of enum values ('UPGRADE_STATE_UNSPECIFIED', 'ELIGIBLE_FOR_2ND_GEN_UPGRADE', 'UPGRADE_OPERATION_IN_PROGRESS', 'SETUP_FUNCTION_UPGRADE_CONFIG_SUCCESSFUL', 'SETUP_FUNCTION_UPGRADE_CONFIG_ERROR', 'ABORT_FUNCTION_UPGRADE_ERROR', 'REDIRECT_FUNCTION_UPGRADE_TRAFFIC_SUCCESSFUL', 'REDIRECT_FUNCTION_UPGRADE_TRAFFIC_ERROR', 'ROLLBACK_FUNCTION_UPGRADE_TRAFFIC_ERROR', 'COMMIT_FUNCTION_UPGRADE_ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpgradeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of build_config
        if self.build_config:
            _dict['buildConfig'] = self.build_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_trigger
        if self.event_trigger:
            _dict['eventTrigger'] = self.event_trigger.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_config
        if self.service_config:
            _dict['serviceConfig'] = self.service_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpgradeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buildConfig": BuildConfig.from_dict(obj["buildConfig"]) if obj.get("buildConfig") is not None else None,
            "eventTrigger": EventTrigger.from_dict(obj["eventTrigger"]) if obj.get("eventTrigger") is not None else None,
            "serviceConfig": ServiceConfig.from_dict(obj["serviceConfig"]) if obj.get("serviceConfig") is not None else None,
            "upgradeState": obj.get("upgradeState")
        })
        return _obj



# coding: utf-8

"""
    Cloud Functions API

    Manages lightweight user-provided functions executed in response to events.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_functions_v2_stage import GoogleCloudFunctionsV2Stage
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudFunctionsV2OperationMetadata(BaseModel):
    """
    Represents the metadata of the long-running operation.
    """ # noqa: E501
    api_version: Optional[StrictStr] = Field(default=None, description="API version used to start the operation.", alias="apiVersion")
    cancel_requested: Optional[StrictBool] = Field(default=None, description="Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have google.longrunning.Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.", alias="cancelRequested")
    create_time: Optional[StrictStr] = Field(default=None, description="The time the operation was created.", alias="createTime")
    end_time: Optional[StrictStr] = Field(default=None, description="The time the operation finished running.", alias="endTime")
    operation_type: Optional[StrictStr] = Field(default=None, description="The operation type.", alias="operationType")
    request_resource: Optional[Dict[str, Any]] = Field(default=None, description="The original request that started the operation.", alias="requestResource")
    source_token: Optional[StrictStr] = Field(default=None, description="An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.", alias="sourceToken")
    stages: Optional[List[GoogleCloudFunctionsV2Stage]] = Field(default=None, description="Mechanism for reporting in-progress stages")
    status_detail: Optional[StrictStr] = Field(default=None, description="Human-readable status of the operation, if any.", alias="statusDetail")
    target: Optional[StrictStr] = Field(default=None, description="Server-defined resource path for the target of the operation.")
    verb: Optional[StrictStr] = Field(default=None, description="Name of the verb executed by the operation.")
    __properties: ClassVar[List[str]] = ["apiVersion", "cancelRequested", "createTime", "endTime", "operationType", "requestResource", "sourceToken", "stages", "statusDetail", "target", "verb"]

    @field_validator('operation_type')
    def operation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OPERATIONTYPE_UNSPECIFIED', 'CREATE_FUNCTION', 'UPDATE_FUNCTION', 'DELETE_FUNCTION', 'REDIRECT_FUNCTION_UPGRADE_TRAFFIC', 'ROLLBACK_FUNCTION_UPGRADE_TRAFFIC', 'SETUP_FUNCTION_UPGRADE_CONFIG', 'ABORT_FUNCTION_UPGRADE', 'COMMIT_FUNCTION_UPGRADE']):
            raise ValueError("must be one of enum values ('OPERATIONTYPE_UNSPECIFIED', 'CREATE_FUNCTION', 'UPDATE_FUNCTION', 'DELETE_FUNCTION', 'REDIRECT_FUNCTION_UPGRADE_TRAFFIC', 'ROLLBACK_FUNCTION_UPGRADE_TRAFFIC', 'SETUP_FUNCTION_UPGRADE_CONFIG', 'ABORT_FUNCTION_UPGRADE', 'COMMIT_FUNCTION_UPGRADE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudFunctionsV2OperationMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in stages (list)
        _items = []
        if self.stages:
            for _item_stages in self.stages:
                if _item_stages:
                    _items.append(_item_stages.to_dict())
            _dict['stages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudFunctionsV2OperationMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiVersion": obj.get("apiVersion"),
            "cancelRequested": obj.get("cancelRequested"),
            "createTime": obj.get("createTime"),
            "endTime": obj.get("endTime"),
            "operationType": obj.get("operationType"),
            "requestResource": obj.get("requestResource"),
            "sourceToken": obj.get("sourceToken"),
            "stages": [GoogleCloudFunctionsV2Stage.from_dict(_item) for _item in obj["stages"]] if obj.get("stages") is not None else None,
            "statusDetail": obj.get("statusDetail"),
            "target": obj.get("target"),
            "verb": obj.get("verb")
        })
        return _obj



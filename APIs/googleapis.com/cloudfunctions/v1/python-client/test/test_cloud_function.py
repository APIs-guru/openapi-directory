# coding: utf-8

"""
    Cloud Functions API

    Manages lightweight user-provided functions executed in response to events.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cloud_function import CloudFunction

class TestCloudFunction(unittest.TestCase):
    """CloudFunction unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CloudFunction:
        """Test CloudFunction
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CloudFunction`
        """
        model = CloudFunction()
        if include_optional:
            return CloudFunction(
                automatic_update_policy = None,
                available_memory_mb = 56,
                build_environment_variables = {
                    'key' : ''
                    },
                build_id = '',
                build_name = '',
                build_service_account = '',
                build_worker_pool = '',
                description = '',
                docker_registry = 'DOCKER_REGISTRY_UNSPECIFIED',
                docker_repository = '',
                entry_point = '',
                environment_variables = {
                    'key' : ''
                    },
                event_trigger = openapi_client.models.event_trigger.EventTrigger(
                    event_type = '', 
                    failure_policy = openapi_client.models.failure_policy.FailurePolicy(
                        retry = openapi_client.models.retry.Retry(), ), 
                    resource = '', 
                    service = '', ),
                https_trigger = openapi_client.models.https_trigger.HttpsTrigger(
                    security_level = 'SECURITY_LEVEL_UNSPECIFIED', 
                    url = '', ),
                ingress_settings = 'INGRESS_SETTINGS_UNSPECIFIED',
                kms_key_name = '',
                labels = {
                    'key' : ''
                    },
                max_instances = 56,
                min_instances = 56,
                name = '',
                network = '',
                on_deploy_update_policy = openapi_client.models.on_deploy_update_policy.OnDeployUpdatePolicy(
                    runtime_version = '', ),
                runtime = '',
                secret_environment_variables = [
                    openapi_client.models.secret_env_var.SecretEnvVar(
                        key = '', 
                        project_id = '', 
                        secret = '', 
                        version = '', )
                    ],
                secret_volumes = [
                    openapi_client.models.secret_volume.SecretVolume(
                        mount_path = '', 
                        project_id = '', 
                        secret = '', 
                        versions = [
                            openapi_client.models.secret_version.SecretVersion(
                                path = '', 
                                version = '', )
                            ], )
                    ],
                service_account_email = '',
                source_archive_url = '',
                source_repository = openapi_client.models.source_repository.SourceRepository(
                    deployed_url = '', 
                    url = '', ),
                source_token = '',
                source_upload_url = '',
                status = 'CLOUD_FUNCTION_STATUS_UNSPECIFIED',
                timeout = '',
                update_time = '',
                version_id = '',
                vpc_connector = '',
                vpc_connector_egress_settings = 'VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED'
            )
        else:
            return CloudFunction(
        )
        """

    def testCloudFunction(self):
        """Test CloudFunction"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

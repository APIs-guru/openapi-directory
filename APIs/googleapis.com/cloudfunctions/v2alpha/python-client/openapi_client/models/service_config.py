# coding: utf-8

"""
    Cloud Functions API

    Manages lightweight user-provided functions executed in response to events.

    The version of the OpenAPI document: v2alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.secret_env_var import SecretEnvVar
from openapi_client.models.secret_volume import SecretVolume
from typing import Optional, Set
from typing_extensions import Self

class ServiceConfig(BaseModel):
    """
    Describes the Service being deployed. Currently Supported : Cloud Run (fully managed).
    """ # noqa: E501
    all_traffic_on_latest_revision: Optional[StrictBool] = Field(default=None, description="Whether 100% of traffic is routed to the latest revision. On CreateFunction and UpdateFunction, when set to true, the revision being deployed will serve 100% of traffic, ignoring any traffic split settings, if any. On GetFunction, true will be returned if the latest revision is serving 100% of traffic.", alias="allTrafficOnLatestRevision")
    available_cpu: Optional[StrictStr] = Field(default=None, description="The number of CPUs used in a single container instance. Default value is calculated from available memory. Supports the same values as Cloud Run, see https://cloud.google.com/run/docs/reference/rest/v1/Container#resourcerequirements Example: \"1\" indicates 1 vCPU", alias="availableCpu")
    available_memory: Optional[StrictStr] = Field(default=None, description="The amount of memory available for a function. Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is supplied the value is interpreted as bytes. See https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go a full description.", alias="availableMemory")
    environment_variables: Optional[Dict[str, StrictStr]] = Field(default=None, description="Environment variables that shall be available during function execution.", alias="environmentVariables")
    ingress_settings: Optional[StrictStr] = Field(default=None, description="The ingress settings for the function, controlling what traffic can reach it.", alias="ingressSettings")
    max_instance_count: Optional[StrictInt] = Field(default=None, description="The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.", alias="maxInstanceCount")
    max_instance_request_concurrency: Optional[StrictInt] = Field(default=None, description="Sets the maximum number of concurrent requests that each instance can receive. Defaults to 1.", alias="maxInstanceRequestConcurrency")
    min_instance_count: Optional[StrictInt] = Field(default=None, description="The limit on the minimum number of function instances that may coexist at a given time. Function instances are kept in idle state for a short period after they finished executing the request to reduce cold start time for subsequent requests. Setting a minimum instance count will ensure that the given number of instances are kept running in idle state always. This can help with cold start times when jump in incoming request count occurs after the idle instance would have been stopped in the default case.", alias="minInstanceCount")
    revision: Optional[StrictStr] = Field(default=None, description="Output only. The name of service revision.")
    secret_environment_variables: Optional[List[SecretEnvVar]] = Field(default=None, description="Secret environment variables configuration.", alias="secretEnvironmentVariables")
    secret_volumes: Optional[List[SecretVolume]] = Field(default=None, description="Secret volumes configuration.", alias="secretVolumes")
    security_level: Optional[StrictStr] = Field(default=None, description="Security level configure whether the function only accepts https. This configuration is only applicable to 1st Gen functions with Http trigger. By default https is optional for 1st Gen functions; 2nd Gen functions are https ONLY.", alias="securityLevel")
    service: Optional[StrictStr] = Field(default=None, description="Output only. Name of the service associated with a Function. The format of this field is `projects/{project}/locations/{region}/services/{service}`")
    service_account_email: Optional[StrictStr] = Field(default=None, description="The email of the service's service account. If empty, defaults to `{project_number}-compute@developer.gserviceaccount.com`.", alias="serviceAccountEmail")
    timeout_seconds: Optional[StrictInt] = Field(default=None, description="The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.", alias="timeoutSeconds")
    uri: Optional[StrictStr] = Field(default=None, description="Output only. URI of the Service deployed.")
    vpc_connector: Optional[StrictStr] = Field(default=None, description="The Serverless VPC Access connector that this cloud function can connect to. The format of this field is `projects/*/locations/*/connectors/*`.", alias="vpcConnector")
    vpc_connector_egress_settings: Optional[StrictStr] = Field(default=None, description="The egress settings for the connector, controlling what traffic is diverted through it.", alias="vpcConnectorEgressSettings")
    __properties: ClassVar[List[str]] = ["allTrafficOnLatestRevision", "availableCpu", "availableMemory", "environmentVariables", "ingressSettings", "maxInstanceCount", "maxInstanceRequestConcurrency", "minInstanceCount", "revision", "secretEnvironmentVariables", "secretVolumes", "securityLevel", "service", "serviceAccountEmail", "timeoutSeconds", "uri", "vpcConnector", "vpcConnectorEgressSettings"]

    @field_validator('ingress_settings')
    def ingress_settings_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INGRESS_SETTINGS_UNSPECIFIED', 'ALLOW_ALL', 'ALLOW_INTERNAL_ONLY', 'ALLOW_INTERNAL_AND_GCLB']):
            raise ValueError("must be one of enum values ('INGRESS_SETTINGS_UNSPECIFIED', 'ALLOW_ALL', 'ALLOW_INTERNAL_ONLY', 'ALLOW_INTERNAL_AND_GCLB')")
        return value

    @field_validator('security_level')
    def security_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SECURITY_LEVEL_UNSPECIFIED', 'SECURE_ALWAYS', 'SECURE_OPTIONAL']):
            raise ValueError("must be one of enum values ('SECURITY_LEVEL_UNSPECIFIED', 'SECURE_ALWAYS', 'SECURE_OPTIONAL')")
        return value

    @field_validator('vpc_connector_egress_settings')
    def vpc_connector_egress_settings_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED', 'PRIVATE_RANGES_ONLY', 'ALL_TRAFFIC']):
            raise ValueError("must be one of enum values ('VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED', 'PRIVATE_RANGES_ONLY', 'ALL_TRAFFIC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "revision",
            "service",
            "uri",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in secret_environment_variables (list)
        _items = []
        if self.secret_environment_variables:
            for _item_secret_environment_variables in self.secret_environment_variables:
                if _item_secret_environment_variables:
                    _items.append(_item_secret_environment_variables.to_dict())
            _dict['secretEnvironmentVariables'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in secret_volumes (list)
        _items = []
        if self.secret_volumes:
            for _item_secret_volumes in self.secret_volumes:
                if _item_secret_volumes:
                    _items.append(_item_secret_volumes.to_dict())
            _dict['secretVolumes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allTrafficOnLatestRevision": obj.get("allTrafficOnLatestRevision"),
            "availableCpu": obj.get("availableCpu"),
            "availableMemory": obj.get("availableMemory"),
            "environmentVariables": obj.get("environmentVariables"),
            "ingressSettings": obj.get("ingressSettings"),
            "maxInstanceCount": obj.get("maxInstanceCount"),
            "maxInstanceRequestConcurrency": obj.get("maxInstanceRequestConcurrency"),
            "minInstanceCount": obj.get("minInstanceCount"),
            "revision": obj.get("revision"),
            "secretEnvironmentVariables": [SecretEnvVar.from_dict(_item) for _item in obj["secretEnvironmentVariables"]] if obj.get("secretEnvironmentVariables") is not None else None,
            "secretVolumes": [SecretVolume.from_dict(_item) for _item in obj["secretVolumes"]] if obj.get("secretVolumes") is not None else None,
            "securityLevel": obj.get("securityLevel"),
            "service": obj.get("service"),
            "serviceAccountEmail": obj.get("serviceAccountEmail"),
            "timeoutSeconds": obj.get("timeoutSeconds"),
            "uri": obj.get("uri"),
            "vpcConnector": obj.get("vpcConnector"),
            "vpcConnectorEgressSettings": obj.get("vpcConnectorEgressSettings")
        })
        return _obj



# coding: utf-8

"""
    Cloud Functions API

    Manages lightweight user-provided functions executed in response to events.

    The version of the OpenAPI document: v2alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.build_config import BuildConfig
from openapi_client.models.event_trigger import EventTrigger
from openapi_client.models.google_cloud_functions_v2alpha_state_message import GoogleCloudFunctionsV2alphaStateMessage
from openapi_client.models.service_config import ServiceConfig
from openapi_client.models.upgrade_info import UpgradeInfo
from typing import Optional, Set
from typing_extensions import Self

class Function(BaseModel):
    """
    Describes a Cloud Function that contains user computation executed in response to an event. It encapsulates function and trigger configurations.
    """ # noqa: E501
    build_config: Optional[BuildConfig] = Field(default=None, alias="buildConfig")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The create timestamp of a Cloud Function. This is only applicable to 2nd Gen functions.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="User-provided description of a function.")
    environment: Optional[StrictStr] = Field(default=None, description="Describe whether the function is 1st Gen or 2nd Gen.")
    event_trigger: Optional[EventTrigger] = Field(default=None, alias="eventTrigger")
    kms_key_name: Optional[StrictStr] = Field(default=None, description="[Preview] Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.", alias="kmsKeyName")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels associated with this Cloud Function.")
    name: Optional[StrictStr] = Field(default=None, description="A user-defined name of the function. Function names must be unique globally and match pattern `projects/*/locations/*/functions/*`")
    satisfies_pzs: Optional[StrictBool] = Field(default=None, description="Output only. Reserved for future use.", alias="satisfiesPzs")
    service_config: Optional[ServiceConfig] = Field(default=None, alias="serviceConfig")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the function.")
    state_messages: Optional[List[GoogleCloudFunctionsV2alphaStateMessage]] = Field(default=None, description="Output only. State Messages for this Cloud Function.", alias="stateMessages")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last update timestamp of a Cloud Function.", alias="updateTime")
    upgrade_info: Optional[UpgradeInfo] = Field(default=None, alias="upgradeInfo")
    url: Optional[StrictStr] = Field(default=None, description="Output only. The deployed url for the function.")
    __properties: ClassVar[List[str]] = ["buildConfig", "createTime", "description", "environment", "eventTrigger", "kmsKeyName", "labels", "name", "satisfiesPzs", "serviceConfig", "state", "stateMessages", "updateTime", "upgradeInfo", "url"]

    @field_validator('environment')
    def environment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENVIRONMENT_UNSPECIFIED', 'GEN_1', 'GEN_2']):
            raise ValueError("must be one of enum values ('ENVIRONMENT_UNSPECIFIED', 'GEN_1', 'GEN_2')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'FAILED', 'DEPLOYING', 'DELETING', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'FAILED', 'DEPLOYING', 'DELETING', 'UNKNOWN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Function from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "satisfies_pzs",
            "state",
            "state_messages",
            "update_time",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of build_config
        if self.build_config:
            _dict['buildConfig'] = self.build_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_trigger
        if self.event_trigger:
            _dict['eventTrigger'] = self.event_trigger.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_config
        if self.service_config:
            _dict['serviceConfig'] = self.service_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in state_messages (list)
        _items = []
        if self.state_messages:
            for _item_state_messages in self.state_messages:
                if _item_state_messages:
                    _items.append(_item_state_messages.to_dict())
            _dict['stateMessages'] = _items
        # override the default output from pydantic by calling `to_dict()` of upgrade_info
        if self.upgrade_info:
            _dict['upgradeInfo'] = self.upgrade_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Function from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buildConfig": BuildConfig.from_dict(obj["buildConfig"]) if obj.get("buildConfig") is not None else None,
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "environment": obj.get("environment"),
            "eventTrigger": EventTrigger.from_dict(obj["eventTrigger"]) if obj.get("eventTrigger") is not None else None,
            "kmsKeyName": obj.get("kmsKeyName"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "satisfiesPzs": obj.get("satisfiesPzs"),
            "serviceConfig": ServiceConfig.from_dict(obj["serviceConfig"]) if obj.get("serviceConfig") is not None else None,
            "state": obj.get("state"),
            "stateMessages": [GoogleCloudFunctionsV2alphaStateMessage.from_dict(_item) for _item in obj["stateMessages"]] if obj.get("stateMessages") is not None else None,
            "updateTime": obj.get("updateTime"),
            "upgradeInfo": UpgradeInfo.from_dict(obj["upgradeInfo"]) if obj.get("upgradeInfo") is not None else None,
            "url": obj.get("url")
        })
        return _obj



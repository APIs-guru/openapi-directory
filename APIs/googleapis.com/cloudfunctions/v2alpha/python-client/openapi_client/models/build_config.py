# coding: utf-8

"""
    Cloud Functions API

    Manages lightweight user-provided functions executed in response to events.

    The version of the OpenAPI document: v2alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.on_deploy_update_policy import OnDeployUpdatePolicy
from openapi_client.models.source import Source
from openapi_client.models.source_provenance import SourceProvenance
from typing import Optional, Set
from typing_extensions import Self

class BuildConfig(BaseModel):
    """
    Describes the Build step of the function that builds a container from the given source.
    """ # noqa: E501
    automatic_update_policy: Optional[Dict[str, Any]] = Field(default=None, description="Security patches are applied automatically to the runtime without requiring the function to be redeployed.", alias="automaticUpdatePolicy")
    build: Optional[StrictStr] = Field(default=None, description="Output only. The Cloud Build name of the latest successful deployment of the function.")
    docker_registry: Optional[StrictStr] = Field(default=None, description="Docker Registry to use for this deployment. This configuration is only applicable to 1st Gen functions, 2nd Gen functions can only use Artifact Registry. If `docker_repository` field is specified, this field will be automatically set as `ARTIFACT_REGISTRY`. If unspecified, it currently defaults to `CONTAINER_REGISTRY`. This field may be overridden by the backend for eligible deployments.", alias="dockerRegistry")
    docker_repository: Optional[StrictStr] = Field(default=None, description="Repository in Artifact Registry to which the function docker image will be pushed after it is built by Cloud Build. If specified by user, it is created and managed by user with a customer managed encryption key. Otherwise, GCF will create and use a repository named 'gcf-artifacts' for every deployed region. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'.", alias="dockerRepository")
    entry_point: Optional[StrictStr] = Field(default=None, description="The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named \"function\". For Node.js this is name of a function exported by the module specified in `source_location`.", alias="entryPoint")
    environment_variables: Optional[Dict[str, StrictStr]] = Field(default=None, description="User-provided build-time environment variables for the function", alias="environmentVariables")
    on_deploy_update_policy: Optional[OnDeployUpdatePolicy] = Field(default=None, alias="onDeployUpdatePolicy")
    runtime: Optional[StrictStr] = Field(default=None, description="The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).")
    service_account: Optional[StrictStr] = Field(default=None, description="[Preview] Service account to be used for building the container", alias="serviceAccount")
    source: Optional[Source] = None
    source_provenance: Optional[SourceProvenance] = Field(default=None, alias="sourceProvenance")
    source_token: Optional[StrictStr] = Field(default=None, description="An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.", alias="sourceToken")
    worker_pool: Optional[StrictStr] = Field(default=None, description="Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where {project} and {region} are the project id and region respectively where the worker pool is defined and {workerPool} is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (service-@gcf-admin-robot.iam.gserviceaccount.com) must be granted the role Cloud Build Custom Workers Builder (roles/cloudbuild.customworkers.builder) in the project.", alias="workerPool")
    __properties: ClassVar[List[str]] = ["automaticUpdatePolicy", "build", "dockerRegistry", "dockerRepository", "entryPoint", "environmentVariables", "onDeployUpdatePolicy", "runtime", "serviceAccount", "source", "sourceProvenance", "sourceToken", "workerPool"]

    @field_validator('docker_registry')
    def docker_registry_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DOCKER_REGISTRY_UNSPECIFIED', 'CONTAINER_REGISTRY', 'ARTIFACT_REGISTRY']):
            raise ValueError("must be one of enum values ('DOCKER_REGISTRY_UNSPECIFIED', 'CONTAINER_REGISTRY', 'ARTIFACT_REGISTRY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "build",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of on_deploy_update_policy
        if self.on_deploy_update_policy:
            _dict['onDeployUpdatePolicy'] = self.on_deploy_update_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_provenance
        if self.source_provenance:
            _dict['sourceProvenance'] = self.source_provenance.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automaticUpdatePolicy": obj.get("automaticUpdatePolicy"),
            "build": obj.get("build"),
            "dockerRegistry": obj.get("dockerRegistry"),
            "dockerRepository": obj.get("dockerRepository"),
            "entryPoint": obj.get("entryPoint"),
            "environmentVariables": obj.get("environmentVariables"),
            "onDeployUpdatePolicy": OnDeployUpdatePolicy.from_dict(obj["onDeployUpdatePolicy"]) if obj.get("onDeployUpdatePolicy") is not None else None,
            "runtime": obj.get("runtime"),
            "serviceAccount": obj.get("serviceAccount"),
            "source": Source.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "sourceProvenance": SourceProvenance.from_dict(obj["sourceProvenance"]) if obj.get("sourceProvenance") is not None else None,
            "sourceToken": obj.get("sourceToken"),
            "workerPool": obj.get("workerPool")
        })
        return _obj



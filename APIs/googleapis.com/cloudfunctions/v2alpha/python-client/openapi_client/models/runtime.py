# coding: utf-8

"""
    Cloud Functions API

    Manages lightweight user-provided functions executed in response to events.

    The version of the OpenAPI document: v2alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.model_date import ModelDate
from typing import Optional, Set
from typing_extensions import Self

class Runtime(BaseModel):
    """
    Describes a runtime and any special information (e.g., deprecation status) related to it.
    """ # noqa: E501
    decommission_date: Optional[ModelDate] = Field(default=None, alias="decommissionDate")
    deprecation_date: Optional[ModelDate] = Field(default=None, alias="deprecationDate")
    display_name: Optional[StrictStr] = Field(default=None, description="The user facing name, eg 'Go 1.13', 'Node.js 12', etc.", alias="displayName")
    environment: Optional[StrictStr] = Field(default=None, description="The environment for the runtime.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the runtime, e.g., 'go113', 'nodejs12', etc.")
    stage: Optional[StrictStr] = Field(default=None, description="The stage of life this runtime is in, e.g., BETA, GA, etc.")
    warnings: Optional[List[StrictStr]] = Field(default=None, description="Warning messages, e.g., a deprecation warning.")
    __properties: ClassVar[List[str]] = ["decommissionDate", "deprecationDate", "displayName", "environment", "name", "stage", "warnings"]

    @field_validator('environment')
    def environment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENVIRONMENT_UNSPECIFIED', 'GEN_1', 'GEN_2']):
            raise ValueError("must be one of enum values ('ENVIRONMENT_UNSPECIFIED', 'GEN_1', 'GEN_2')")
        return value

    @field_validator('stage')
    def stage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RUNTIME_STAGE_UNSPECIFIED', 'DEVELOPMENT', 'ALPHA', 'BETA', 'GA', 'DEPRECATED', 'DECOMMISSIONED']):
            raise ValueError("must be one of enum values ('RUNTIME_STAGE_UNSPECIFIED', 'DEVELOPMENT', 'ALPHA', 'BETA', 'GA', 'DEPRECATED', 'DECOMMISSIONED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Runtime from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of decommission_date
        if self.decommission_date:
            _dict['decommissionDate'] = self.decommission_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deprecation_date
        if self.deprecation_date:
            _dict['deprecationDate'] = self.deprecation_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Runtime from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "decommissionDate": ModelDate.from_dict(obj["decommissionDate"]) if obj.get("decommissionDate") is not None else None,
            "deprecationDate": ModelDate.from_dict(obj["deprecationDate"]) if obj.get("deprecationDate") is not None else None,
            "displayName": obj.get("displayName"),
            "environment": obj.get("environment"),
            "name": obj.get("name"),
            "stage": obj.get("stage"),
            "warnings": obj.get("warnings")
        })
        return _obj



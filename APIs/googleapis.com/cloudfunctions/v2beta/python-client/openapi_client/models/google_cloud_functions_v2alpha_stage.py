# coding: utf-8

"""
    Cloud Functions API

    Manages lightweight user-provided functions executed in response to events.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_functions_v2alpha_state_message import GoogleCloudFunctionsV2alphaStateMessage
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudFunctionsV2alphaStage(BaseModel):
    """
    Each Stage of the deployment process
    """ # noqa: E501
    message: Optional[StrictStr] = Field(default=None, description="Message describing the Stage")
    name: Optional[StrictStr] = Field(default=None, description="Name of the Stage. This will be unique for each Stage.")
    resource: Optional[StrictStr] = Field(default=None, description="Resource of the Stage")
    resource_uri: Optional[StrictStr] = Field(default=None, description="Link to the current Stage resource", alias="resourceUri")
    state: Optional[StrictStr] = Field(default=None, description="Current state of the Stage")
    state_messages: Optional[List[GoogleCloudFunctionsV2alphaStateMessage]] = Field(default=None, description="State messages from the current Stage.", alias="stateMessages")
    __properties: ClassVar[List[str]] = ["message", "name", "resource", "resourceUri", "state", "stateMessages"]

    @field_validator('name')
    def name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NAME_UNSPECIFIED', 'ARTIFACT_REGISTRY', 'BUILD', 'SERVICE', 'TRIGGER', 'SERVICE_ROLLBACK', 'TRIGGER_ROLLBACK']):
            raise ValueError("must be one of enum values ('NAME_UNSPECIFIED', 'ARTIFACT_REGISTRY', 'BUILD', 'SERVICE', 'TRIGGER', 'SERVICE_ROLLBACK', 'TRIGGER_ROLLBACK')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'NOT_STARTED', 'IN_PROGRESS', 'COMPLETE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'NOT_STARTED', 'IN_PROGRESS', 'COMPLETE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudFunctionsV2alphaStage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in state_messages (list)
        _items = []
        if self.state_messages:
            for _item_state_messages in self.state_messages:
                if _item_state_messages:
                    _items.append(_item_state_messages.to_dict())
            _dict['stateMessages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudFunctionsV2alphaStage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "message": obj.get("message"),
            "name": obj.get("name"),
            "resource": obj.get("resource"),
            "resourceUri": obj.get("resourceUri"),
            "state": obj.get("state"),
            "stateMessages": [GoogleCloudFunctionsV2alphaStateMessage.from_dict(_item) for _item in obj["stateMessages"]] if obj.get("stateMessages") is not None else None
        })
        return _obj



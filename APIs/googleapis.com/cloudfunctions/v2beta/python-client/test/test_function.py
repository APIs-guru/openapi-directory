# coding: utf-8

"""
    Cloud Functions API

    Manages lightweight user-provided functions executed in response to events.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.function import Function

class TestFunction(unittest.TestCase):
    """Function unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Function:
        """Test Function
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Function`
        """
        model = Function()
        if include_optional:
            return Function(
                build_config = openapi_client.models.build_config.BuildConfig(
                    automatic_update_policy = openapi_client.models.automatic_update_policy.automaticUpdatePolicy(), 
                    build = '', 
                    docker_registry = 'DOCKER_REGISTRY_UNSPECIFIED', 
                    docker_repository = '', 
                    entry_point = '', 
                    environment_variables = {
                        'key' : ''
                        }, 
                    on_deploy_update_policy = openapi_client.models.on_deploy_update_policy.OnDeployUpdatePolicy(
                        runtime_version = '', ), 
                    runtime = '', 
                    service_account = '', 
                    source = openapi_client.models.source.Source(
                        git_uri = '', 
                        repo_source = openapi_client.models.repo_source.RepoSource(
                            branch_name = '', 
                            commit_sha = '', 
                            dir = '', 
                            project_id = '', 
                            repo_name = '', 
                            tag_name = '', ), 
                        storage_source = openapi_client.models.storage_source.StorageSource(
                            bucket = '', 
                            generation = '', 
                            object = '', ), ), 
                    source_provenance = openapi_client.models.source_provenance.SourceProvenance(
                        git_uri = '', 
                        resolved_repo_source = openapi_client.models.repo_source.RepoSource(
                            branch_name = '', 
                            commit_sha = '', 
                            dir = '', 
                            project_id = '', 
                            repo_name = '', 
                            tag_name = '', ), 
                        resolved_storage_source = openapi_client.models.storage_source.StorageSource(
                            bucket = '', 
                            generation = '', 
                            object = '', ), ), 
                    source_token = '', 
                    worker_pool = '', ),
                create_time = '',
                description = '',
                environment = 'ENVIRONMENT_UNSPECIFIED',
                event_trigger = openapi_client.models.event_trigger.EventTrigger(
                    channel = '', 
                    event_filters = [
                        openapi_client.models.event_filter.EventFilter(
                            attribute = '', 
                            operator = '', 
                            value = '', )
                        ], 
                    event_type = '', 
                    pubsub_topic = '', 
                    retry_policy = 'RETRY_POLICY_UNSPECIFIED', 
                    service = '', 
                    service_account_email = '', 
                    trigger = '', 
                    trigger_region = '', ),
                kms_key_name = '',
                labels = {
                    'key' : ''
                    },
                name = '',
                satisfies_pzs = True,
                service_config = openapi_client.models.service_config.ServiceConfig(
                    all_traffic_on_latest_revision = True, 
                    available_cpu = '', 
                    available_memory = '', 
                    environment_variables = {
                        'key' : ''
                        }, 
                    ingress_settings = 'INGRESS_SETTINGS_UNSPECIFIED', 
                    max_instance_count = 56, 
                    max_instance_request_concurrency = 56, 
                    min_instance_count = 56, 
                    revision = '', 
                    secret_environment_variables = [
                        openapi_client.models.secret_env_var.SecretEnvVar(
                            key = '', 
                            project_id = '', 
                            secret = '', 
                            version = '', )
                        ], 
                    secret_volumes = [
                        openapi_client.models.secret_volume.SecretVolume(
                            mount_path = '', 
                            project_id = '', 
                            secret = '', 
                            versions = [
                                openapi_client.models.secret_version.SecretVersion(
                                    path = '', 
                                    version = '', )
                                ], )
                        ], 
                    security_level = 'SECURITY_LEVEL_UNSPECIFIED', 
                    service = '', 
                    service_account_email = '', 
                    timeout_seconds = 56, 
                    uri = '', 
                    vpc_connector = '', 
                    vpc_connector_egress_settings = 'VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED', ),
                state = 'STATE_UNSPECIFIED',
                state_messages = [
                    openapi_client.models.google_cloud_functions_v2beta_state_message.GoogleCloudFunctionsV2betaStateMessage(
                        message = '', 
                        severity = 'SEVERITY_UNSPECIFIED', 
                        type = '', )
                    ],
                update_time = '',
                upgrade_info = openapi_client.models.upgrade_info.UpgradeInfo(
                    build_config = openapi_client.models.build_config.BuildConfig(
                        automatic_update_policy = openapi_client.models.automatic_update_policy.automaticUpdatePolicy(), 
                        build = '', 
                        docker_registry = 'DOCKER_REGISTRY_UNSPECIFIED', 
                        docker_repository = '', 
                        entry_point = '', 
                        environment_variables = {
                            'key' : ''
                            }, 
                        on_deploy_update_policy = openapi_client.models.on_deploy_update_policy.OnDeployUpdatePolicy(
                            runtime_version = '', ), 
                        runtime = '', 
                        service_account = '', 
                        source = openapi_client.models.source.Source(
                            git_uri = '', 
                            repo_source = openapi_client.models.repo_source.RepoSource(
                                branch_name = '', 
                                commit_sha = '', 
                                dir = '', 
                                project_id = '', 
                                repo_name = '', 
                                tag_name = '', ), 
                            storage_source = openapi_client.models.storage_source.StorageSource(
                                bucket = '', 
                                generation = '', 
                                object = '', ), ), 
                        source_provenance = openapi_client.models.source_provenance.SourceProvenance(
                            git_uri = '', 
                            resolved_repo_source = openapi_client.models.repo_source.RepoSource(
                                branch_name = '', 
                                commit_sha = '', 
                                dir = '', 
                                project_id = '', 
                                repo_name = '', 
                                tag_name = '', ), 
                            resolved_storage_source = openapi_client.models.storage_source.StorageSource(
                                bucket = '', 
                                generation = '', 
                                object = '', ), ), 
                        source_token = '', 
                        worker_pool = '', ), 
                    event_trigger = openapi_client.models.event_trigger.EventTrigger(
                        channel = '', 
                        event_filters = [
                            openapi_client.models.event_filter.EventFilter(
                                attribute = '', 
                                operator = '', 
                                value = '', )
                            ], 
                        event_type = '', 
                        pubsub_topic = '', 
                        retry_policy = 'RETRY_POLICY_UNSPECIFIED', 
                        service = '', 
                        service_account_email = '', 
                        trigger = '', 
                        trigger_region = '', ), 
                    service_config = openapi_client.models.service_config.ServiceConfig(
                        all_traffic_on_latest_revision = True, 
                        available_cpu = '', 
                        available_memory = '', 
                        ingress_settings = 'INGRESS_SETTINGS_UNSPECIFIED', 
                        max_instance_count = 56, 
                        max_instance_request_concurrency = 56, 
                        min_instance_count = 56, 
                        revision = '', 
                        secret_environment_variables = [
                            openapi_client.models.secret_env_var.SecretEnvVar(
                                key = '', 
                                project_id = '', 
                                secret = '', 
                                version = '', )
                            ], 
                        secret_volumes = [
                            openapi_client.models.secret_volume.SecretVolume(
                                mount_path = '', 
                                project_id = '', 
                                secret = '', 
                                versions = [
                                    openapi_client.models.secret_version.SecretVersion(
                                        path = '', 
                                        version = '', )
                                    ], )
                            ], 
                        security_level = 'SECURITY_LEVEL_UNSPECIFIED', 
                        service = '', 
                        service_account_email = '', 
                        timeout_seconds = 56, 
                        uri = '', 
                        vpc_connector = '', 
                        vpc_connector_egress_settings = 'VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED', ), 
                    upgrade_state = 'UPGRADE_STATE_UNSPECIFIED', ),
                url = ''
            )
        else:
            return Function(
        )
        """

    def testFunction(self):
        """Test Function"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

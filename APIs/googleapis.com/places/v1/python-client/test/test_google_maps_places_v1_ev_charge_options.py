# coding: utf-8

"""
    Places API (New)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_maps_places_v1_ev_charge_options import GoogleMapsPlacesV1EVChargeOptions

class TestGoogleMapsPlacesV1EVChargeOptions(unittest.TestCase):
    """GoogleMapsPlacesV1EVChargeOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleMapsPlacesV1EVChargeOptions:
        """Test GoogleMapsPlacesV1EVChargeOptions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleMapsPlacesV1EVChargeOptions`
        """
        model = GoogleMapsPlacesV1EVChargeOptions()
        if include_optional:
            return GoogleMapsPlacesV1EVChargeOptions(
                connector_aggregation = [
                    openapi_client.models.google_maps_places_v1_ev_charge_options_connector_aggregation.GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation(
                        availability_last_update_time = '', 
                        available_count = 56, 
                        count = 56, 
                        max_charge_rate_kw = 1.337, 
                        out_of_service_count = 56, 
                        type = 'EV_CONNECTOR_TYPE_UNSPECIFIED', )
                    ],
                connector_count = 56
            )
        else:
            return GoogleMapsPlacesV1EVChargeOptions(
        )
        """

    def testGoogleMapsPlacesV1EVChargeOptions(self):
        """Test GoogleMapsPlacesV1EVChargeOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

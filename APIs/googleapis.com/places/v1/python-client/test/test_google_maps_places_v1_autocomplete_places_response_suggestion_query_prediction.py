# coding: utf-8

"""
    Places API (New)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_maps_places_v1_autocomplete_places_response_suggestion_query_prediction import GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionQueryPrediction

class TestGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionQueryPrediction(unittest.TestCase):
    """GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionQueryPrediction unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionQueryPrediction:
        """Test GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionQueryPrediction
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionQueryPrediction`
        """
        model = GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionQueryPrediction()
        if include_optional:
            return GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionQueryPrediction(
                structured_format = openapi_client.models.google_maps_places_v1_autocomplete_places_response_suggestion_structured_format.GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat(
                    main_text = openapi_client.models.google_maps_places_v1_autocomplete_places_response_suggestion_formattable_text.GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText(
                        matches = [
                            openapi_client.models.google_maps_places_v1_autocomplete_places_response_suggestion_string_range.GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStringRange(
                                end_offset = 56, 
                                start_offset = 56, )
                            ], 
                        text = '', ), 
                    secondary_text = openapi_client.models.google_maps_places_v1_autocomplete_places_response_suggestion_formattable_text.GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText(
                        text = '', ), ),
                text = openapi_client.models.google_maps_places_v1_autocomplete_places_response_suggestion_formattable_text.GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText(
                    matches = [
                        openapi_client.models.google_maps_places_v1_autocomplete_places_response_suggestion_string_range.GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStringRange(
                            end_offset = 56, 
                            start_offset = 56, )
                        ], )
            )
        else:
            return GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionQueryPrediction(
        )
        """

    def testGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionQueryPrediction(self):
        """Test GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionQueryPrediction"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

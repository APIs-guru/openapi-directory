# coding: utf-8

"""
    Places API (New)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_maps_places_v1_place import GoogleMapsPlacesV1Place

class TestGoogleMapsPlacesV1Place(unittest.TestCase):
    """GoogleMapsPlacesV1Place unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleMapsPlacesV1Place:
        """Test GoogleMapsPlacesV1Place
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleMapsPlacesV1Place`
        """
        model = GoogleMapsPlacesV1Place()
        if include_optional:
            return GoogleMapsPlacesV1Place(
                accessibility_options = openapi_client.models.google_maps_places_v1_place_accessibility_options.GoogleMapsPlacesV1PlaceAccessibilityOptions(
                    wheelchair_accessible_entrance = True, 
                    wheelchair_accessible_parking = True, 
                    wheelchair_accessible_restroom = True, 
                    wheelchair_accessible_seating = True, ),
                address_components = [
                    openapi_client.models.google_maps_places_v1_place_address_component.GoogleMapsPlacesV1PlaceAddressComponent(
                        language_code = '', 
                        long_text = '', 
                        short_text = '', 
                        types = [
                            ''
                            ], )
                    ],
                adr_format_address = '',
                allows_dogs = True,
                attributions = [
                    openapi_client.models.google_maps_places_v1_place_attribution.GoogleMapsPlacesV1PlaceAttribution(
                        provider = '', 
                        provider_uri = '', )
                    ],
                business_status = 'BUSINESS_STATUS_UNSPECIFIED',
                curbside_pickup = True,
                current_opening_hours = openapi_client.models.google_maps_places_v1_place_opening_hours.GoogleMapsPlacesV1PlaceOpeningHours(
                    open_now = True, 
                    periods = [
                        openapi_client.models.google_maps_places_v1_place_opening_hours_period.GoogleMapsPlacesV1PlaceOpeningHoursPeriod(
                            close = openapi_client.models.google_maps_places_v1_place_opening_hours_period_point.GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint(
                                date = openapi_client.models.google_type_date.GoogleTypeDate(
                                    day = 56, 
                                    month = 56, 
                                    year = 56, ), 
                                day = 56, 
                                hour = 56, 
                                minute = 56, 
                                truncated = True, ), 
                            open = openapi_client.models.google_maps_places_v1_place_opening_hours_period_point.GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint(
                                day = 56, 
                                hour = 56, 
                                minute = 56, 
                                truncated = True, ), )
                        ], 
                    secondary_hours_type = 'SECONDARY_HOURS_TYPE_UNSPECIFIED', 
                    special_days = [
                        openapi_client.models.google_maps_places_v1_place_opening_hours_special_day.GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay()
                        ], 
                    weekday_descriptions = [
                        ''
                        ], ),
                current_secondary_opening_hours = [
                    openapi_client.models.google_maps_places_v1_place_opening_hours.GoogleMapsPlacesV1PlaceOpeningHours(
                        open_now = True, 
                        periods = [
                            openapi_client.models.google_maps_places_v1_place_opening_hours_period.GoogleMapsPlacesV1PlaceOpeningHoursPeriod(
                                close = openapi_client.models.google_maps_places_v1_place_opening_hours_period_point.GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint(
                                    date = openapi_client.models.google_type_date.GoogleTypeDate(
                                        day = 56, 
                                        month = 56, 
                                        year = 56, ), 
                                    day = 56, 
                                    hour = 56, 
                                    minute = 56, 
                                    truncated = True, ), 
                                open = openapi_client.models.google_maps_places_v1_place_opening_hours_period_point.GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint(
                                    day = 56, 
                                    hour = 56, 
                                    minute = 56, 
                                    truncated = True, ), )
                            ], 
                        secondary_hours_type = 'SECONDARY_HOURS_TYPE_UNSPECIFIED', 
                        special_days = [
                            openapi_client.models.google_maps_places_v1_place_opening_hours_special_day.GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay()
                            ], 
                        weekday_descriptions = [
                            ''
                            ], )
                    ],
                delivery = True,
                dine_in = True,
                display_name = openapi_client.models.google_type_localized_text.GoogleTypeLocalizedText(
                    language_code = '', 
                    text = '', ),
                editorial_summary = openapi_client.models.google_type_localized_text.GoogleTypeLocalizedText(
                    language_code = '', 
                    text = '', ),
                ev_charge_options = openapi_client.models.google_maps_places_v1_ev_charge_options.GoogleMapsPlacesV1EVChargeOptions(
                    connector_aggregation = [
                        openapi_client.models.google_maps_places_v1_ev_charge_options_connector_aggregation.GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation(
                            availability_last_update_time = '', 
                            available_count = 56, 
                            count = 56, 
                            max_charge_rate_kw = 1.337, 
                            out_of_service_count = 56, 
                            type = 'EV_CONNECTOR_TYPE_UNSPECIFIED', )
                        ], 
                    connector_count = 56, ),
                formatted_address = '',
                fuel_options = openapi_client.models.google_maps_places_v1_fuel_options.GoogleMapsPlacesV1FuelOptions(
                    fuel_prices = [
                        openapi_client.models.google_maps_places_v1_fuel_options_fuel_price.GoogleMapsPlacesV1FuelOptionsFuelPrice(
                            price = openapi_client.models.google_type_money.GoogleTypeMoney(
                                currency_code = '', 
                                nanos = 56, 
                                units = '', ), 
                            type = 'FUEL_TYPE_UNSPECIFIED', 
                            update_time = '', )
                        ], ),
                good_for_children = True,
                good_for_groups = True,
                good_for_watching_sports = True,
                google_maps_uri = '',
                icon_background_color = '',
                icon_mask_base_uri = '',
                id = '',
                international_phone_number = '',
                live_music = True,
                location = openapi_client.models.google_type_lat_lng.GoogleTypeLatLng(
                    latitude = 1.337, 
                    longitude = 1.337, ),
                menu_for_children = True,
                name = '',
                national_phone_number = '',
                outdoor_seating = True,
                parking_options = openapi_client.models.google_maps_places_v1_place_parking_options.GoogleMapsPlacesV1PlaceParkingOptions(
                    free_garage_parking = True, 
                    free_parking_lot = True, 
                    free_street_parking = True, 
                    paid_garage_parking = True, 
                    paid_parking_lot = True, 
                    paid_street_parking = True, 
                    valet_parking = True, ),
                payment_options = openapi_client.models.google_maps_places_v1_place_payment_options.GoogleMapsPlacesV1PlacePaymentOptions(
                    accepts_cash_only = True, 
                    accepts_credit_cards = True, 
                    accepts_debit_cards = True, 
                    accepts_nfc = True, ),
                photos = [
                    openapi_client.models.google_maps_places_v1_photo.GoogleMapsPlacesV1Photo(
                        author_attributions = [
                            openapi_client.models.google_maps_places_v1_author_attribution.GoogleMapsPlacesV1AuthorAttribution(
                                display_name = '', 
                                photo_uri = '', 
                                uri = '', )
                            ], 
                        height_px = 56, 
                        name = '', 
                        width_px = 56, )
                    ],
                plus_code = openapi_client.models.google_maps_places_v1_place_plus_code.GoogleMapsPlacesV1PlacePlusCode(
                    compound_code = '', 
                    global_code = '', ),
                price_level = 'PRICE_LEVEL_UNSPECIFIED',
                primary_type = '',
                primary_type_display_name = openapi_client.models.google_type_localized_text.GoogleTypeLocalizedText(
                    language_code = '', 
                    text = '', ),
                rating = 1.337,
                regular_opening_hours = openapi_client.models.google_maps_places_v1_place_opening_hours.GoogleMapsPlacesV1PlaceOpeningHours(
                    open_now = True, 
                    periods = [
                        openapi_client.models.google_maps_places_v1_place_opening_hours_period.GoogleMapsPlacesV1PlaceOpeningHoursPeriod(
                            close = openapi_client.models.google_maps_places_v1_place_opening_hours_period_point.GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint(
                                date = openapi_client.models.google_type_date.GoogleTypeDate(
                                    day = 56, 
                                    month = 56, 
                                    year = 56, ), 
                                day = 56, 
                                hour = 56, 
                                minute = 56, 
                                truncated = True, ), 
                            open = openapi_client.models.google_maps_places_v1_place_opening_hours_period_point.GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint(
                                day = 56, 
                                hour = 56, 
                                minute = 56, 
                                truncated = True, ), )
                        ], 
                    secondary_hours_type = 'SECONDARY_HOURS_TYPE_UNSPECIFIED', 
                    special_days = [
                        openapi_client.models.google_maps_places_v1_place_opening_hours_special_day.GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay()
                        ], 
                    weekday_descriptions = [
                        ''
                        ], ),
                regular_secondary_opening_hours = [
                    openapi_client.models.google_maps_places_v1_place_opening_hours.GoogleMapsPlacesV1PlaceOpeningHours(
                        open_now = True, 
                        periods = [
                            openapi_client.models.google_maps_places_v1_place_opening_hours_period.GoogleMapsPlacesV1PlaceOpeningHoursPeriod(
                                close = openapi_client.models.google_maps_places_v1_place_opening_hours_period_point.GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint(
                                    date = openapi_client.models.google_type_date.GoogleTypeDate(
                                        day = 56, 
                                        month = 56, 
                                        year = 56, ), 
                                    day = 56, 
                                    hour = 56, 
                                    minute = 56, 
                                    truncated = True, ), 
                                open = openapi_client.models.google_maps_places_v1_place_opening_hours_period_point.GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint(
                                    day = 56, 
                                    hour = 56, 
                                    minute = 56, 
                                    truncated = True, ), )
                            ], 
                        secondary_hours_type = 'SECONDARY_HOURS_TYPE_UNSPECIFIED', 
                        special_days = [
                            openapi_client.models.google_maps_places_v1_place_opening_hours_special_day.GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay()
                            ], 
                        weekday_descriptions = [
                            ''
                            ], )
                    ],
                reservable = True,
                restroom = True,
                reviews = [
                    openapi_client.models.google_maps_places_v1_review.GoogleMapsPlacesV1Review(
                        author_attribution = openapi_client.models.google_maps_places_v1_author_attribution.GoogleMapsPlacesV1AuthorAttribution(
                            display_name = '', 
                            photo_uri = '', 
                            uri = '', ), 
                        name = '', 
                        original_text = openapi_client.models.google_type_localized_text.GoogleTypeLocalizedText(
                            language_code = '', 
                            text = '', ), 
                        publish_time = '', 
                        rating = 1.337, 
                        relative_publish_time_description = '', 
                        text = openapi_client.models.google_type_localized_text.GoogleTypeLocalizedText(
                            language_code = '', ), )
                    ],
                serves_beer = True,
                serves_breakfast = True,
                serves_brunch = True,
                serves_cocktails = True,
                serves_coffee = True,
                serves_dessert = True,
                serves_dinner = True,
                serves_lunch = True,
                serves_vegetarian_food = True,
                serves_wine = True,
                short_formatted_address = '',
                sub_destinations = [
                    openapi_client.models.google_maps_places_v1_place_sub_destination.GoogleMapsPlacesV1PlaceSubDestination(
                        id = '', 
                        name = '', )
                    ],
                takeout = True,
                types = [
                    ''
                    ],
                user_rating_count = 56,
                utc_offset_minutes = 56,
                viewport = openapi_client.models.google_geo_type_viewport.GoogleGeoTypeViewport(
                    high = openapi_client.models.google_type_lat_lng.GoogleTypeLatLng(
                        latitude = 1.337, 
                        longitude = 1.337, ), 
                    low = openapi_client.models.google_type_lat_lng.GoogleTypeLatLng(
                        latitude = 1.337, 
                        longitude = 1.337, ), ),
                website_uri = ''
            )
        else:
            return GoogleMapsPlacesV1Place(
        )
        """

    def testGoogleMapsPlacesV1Place(self):
        """Test GoogleMapsPlacesV1Place"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

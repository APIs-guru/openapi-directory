# coding: utf-8

"""
    Places API (New)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_maps_places_v1_search_text_request import GoogleMapsPlacesV1SearchTextRequest

class TestGoogleMapsPlacesV1SearchTextRequest(unittest.TestCase):
    """GoogleMapsPlacesV1SearchTextRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleMapsPlacesV1SearchTextRequest:
        """Test GoogleMapsPlacesV1SearchTextRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleMapsPlacesV1SearchTextRequest`
        """
        model = GoogleMapsPlacesV1SearchTextRequest()
        if include_optional:
            return GoogleMapsPlacesV1SearchTextRequest(
                included_type = '',
                language_code = '',
                location_bias = openapi_client.models.google_maps_places_v1_search_text_request_location_bias.GoogleMapsPlacesV1SearchTextRequestLocationBias(
                    circle = openapi_client.models.google_maps_places_v1_circle.GoogleMapsPlacesV1Circle(
                        center = openapi_client.models.google_type_lat_lng.GoogleTypeLatLng(
                            latitude = 1.337, 
                            longitude = 1.337, ), 
                        radius = 1.337, ), 
                    rectangle = openapi_client.models.google_geo_type_viewport.GoogleGeoTypeViewport(
                        high = openapi_client.models.google_type_lat_lng.GoogleTypeLatLng(
                            latitude = 1.337, 
                            longitude = 1.337, ), 
                        low = , ), ),
                location_restriction = openapi_client.models.google_maps_places_v1_search_text_request_location_restriction.GoogleMapsPlacesV1SearchTextRequestLocationRestriction(
                    rectangle = openapi_client.models.google_geo_type_viewport.GoogleGeoTypeViewport(
                        high = openapi_client.models.google_type_lat_lng.GoogleTypeLatLng(
                            latitude = 1.337, 
                            longitude = 1.337, ), 
                        low = openapi_client.models.google_type_lat_lng.GoogleTypeLatLng(
                            latitude = 1.337, 
                            longitude = 1.337, ), ), ),
                max_result_count = 56,
                min_rating = 1.337,
                open_now = True,
                price_levels = [
                    'PRICE_LEVEL_UNSPECIFIED'
                    ],
                rank_preference = 'RANK_PREFERENCE_UNSPECIFIED',
                region_code = '',
                strict_type_filtering = True,
                text_query = ''
            )
        else:
            return GoogleMapsPlacesV1SearchTextRequest(
        )
        """

    def testGoogleMapsPlacesV1SearchTextRequest(self):
        """Test GoogleMapsPlacesV1SearchTextRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

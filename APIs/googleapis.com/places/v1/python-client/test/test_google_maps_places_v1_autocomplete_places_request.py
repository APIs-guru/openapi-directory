# coding: utf-8

"""
    Places API (New)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_maps_places_v1_autocomplete_places_request import GoogleMapsPlacesV1AutocompletePlacesRequest

class TestGoogleMapsPlacesV1AutocompletePlacesRequest(unittest.TestCase):
    """GoogleMapsPlacesV1AutocompletePlacesRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleMapsPlacesV1AutocompletePlacesRequest:
        """Test GoogleMapsPlacesV1AutocompletePlacesRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleMapsPlacesV1AutocompletePlacesRequest`
        """
        model = GoogleMapsPlacesV1AutocompletePlacesRequest()
        if include_optional:
            return GoogleMapsPlacesV1AutocompletePlacesRequest(
                include_query_predictions = True,
                included_primary_types = [
                    ''
                    ],
                included_region_codes = [
                    ''
                    ],
                input = '',
                input_offset = 56,
                language_code = '',
                location_bias = openapi_client.models.google_maps_places_v1_autocomplete_places_request_location_bias.GoogleMapsPlacesV1AutocompletePlacesRequestLocationBias(
                    circle = openapi_client.models.google_maps_places_v1_circle.GoogleMapsPlacesV1Circle(
                        center = openapi_client.models.google_type_lat_lng.GoogleTypeLatLng(
                            latitude = 1.337, 
                            longitude = 1.337, ), 
                        radius = 1.337, ), 
                    rectangle = openapi_client.models.google_geo_type_viewport.GoogleGeoTypeViewport(
                        high = openapi_client.models.google_type_lat_lng.GoogleTypeLatLng(
                            latitude = 1.337, 
                            longitude = 1.337, ), 
                        low = , ), ),
                location_restriction = openapi_client.models.google_maps_places_v1_autocomplete_places_request_location_restriction.GoogleMapsPlacesV1AutocompletePlacesRequestLocationRestriction(
                    circle = openapi_client.models.google_maps_places_v1_circle.GoogleMapsPlacesV1Circle(
                        center = openapi_client.models.google_type_lat_lng.GoogleTypeLatLng(
                            latitude = 1.337, 
                            longitude = 1.337, ), 
                        radius = 1.337, ), 
                    rectangle = openapi_client.models.google_geo_type_viewport.GoogleGeoTypeViewport(
                        high = openapi_client.models.google_type_lat_lng.GoogleTypeLatLng(
                            latitude = 1.337, 
                            longitude = 1.337, ), 
                        low = , ), ),
                origin = openapi_client.models.google_type_lat_lng.GoogleTypeLatLng(
                    latitude = 1.337, 
                    longitude = 1.337, ),
                region_code = '',
                session_token = ''
            )
        else:
            return GoogleMapsPlacesV1AutocompletePlacesRequest(
        )
        """

    def testGoogleMapsPlacesV1AutocompletePlacesRequest(self):
        """Test GoogleMapsPlacesV1AutocompletePlacesRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

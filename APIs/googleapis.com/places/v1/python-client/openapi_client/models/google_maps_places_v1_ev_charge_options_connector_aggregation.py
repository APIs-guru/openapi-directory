# coding: utf-8

"""
    Places API (New)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation(BaseModel):
    """
    EV charging information grouped by [type, max_charge_rate_kw]. Shows EV charge aggregation of connectors that have the same type and max charge rate in kw.
    """ # noqa: E501
    availability_last_update_time: Optional[StrictStr] = Field(default=None, description="The timestamp when the connector availability information in this aggregation was last updated.", alias="availabilityLastUpdateTime")
    available_count: Optional[StrictInt] = Field(default=None, description="Number of connectors in this aggregation that are currently available.", alias="availableCount")
    count: Optional[StrictInt] = Field(default=None, description="Number of connectors in this aggregation.")
    max_charge_rate_kw: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The static max charging rate in kw of each connector in the aggregation.", alias="maxChargeRateKw")
    out_of_service_count: Optional[StrictInt] = Field(default=None, description="Number of connectors in this aggregation that are currently out of service.", alias="outOfServiceCount")
    type: Optional[StrictStr] = Field(default=None, description="The connector type of this aggregation.")
    __properties: ClassVar[List[str]] = ["availabilityLastUpdateTime", "availableCount", "count", "maxChargeRateKw", "outOfServiceCount", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EV_CONNECTOR_TYPE_UNSPECIFIED', 'EV_CONNECTOR_TYPE_OTHER', 'EV_CONNECTOR_TYPE_J1772', 'EV_CONNECTOR_TYPE_TYPE_2', 'EV_CONNECTOR_TYPE_CHADEMO', 'EV_CONNECTOR_TYPE_CCS_COMBO_1', 'EV_CONNECTOR_TYPE_CCS_COMBO_2', 'EV_CONNECTOR_TYPE_TESLA', 'EV_CONNECTOR_TYPE_UNSPECIFIED_GB_T', 'EV_CONNECTOR_TYPE_UNSPECIFIED_WALL_OUTLET']):
            raise ValueError("must be one of enum values ('EV_CONNECTOR_TYPE_UNSPECIFIED', 'EV_CONNECTOR_TYPE_OTHER', 'EV_CONNECTOR_TYPE_J1772', 'EV_CONNECTOR_TYPE_TYPE_2', 'EV_CONNECTOR_TYPE_CHADEMO', 'EV_CONNECTOR_TYPE_CCS_COMBO_1', 'EV_CONNECTOR_TYPE_CCS_COMBO_2', 'EV_CONNECTOR_TYPE_TESLA', 'EV_CONNECTOR_TYPE_UNSPECIFIED_GB_T', 'EV_CONNECTOR_TYPE_UNSPECIFIED_WALL_OUTLET')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availabilityLastUpdateTime": obj.get("availabilityLastUpdateTime"),
            "availableCount": obj.get("availableCount"),
            "count": obj.get("count"),
            "maxChargeRateKw": obj.get("maxChargeRateKw"),
            "outOfServiceCount": obj.get("outOfServiceCount"),
            "type": obj.get("type")
        })
        return _obj



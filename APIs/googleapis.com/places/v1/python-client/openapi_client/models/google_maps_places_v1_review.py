# coding: utf-8

"""
    Places API (New)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_maps_places_v1_author_attribution import GoogleMapsPlacesV1AuthorAttribution
from openapi_client.models.google_type_localized_text import GoogleTypeLocalizedText
from typing import Optional, Set
from typing_extensions import Self

class GoogleMapsPlacesV1Review(BaseModel):
    """
    Information about a review of a place.
    """ # noqa: E501
    author_attribution: Optional[GoogleMapsPlacesV1AuthorAttribution] = Field(default=None, alias="authorAttribution")
    name: Optional[StrictStr] = Field(default=None, description="A reference representing this place review which may be used to look up this place review again (also called the API \"resource\" name: `places/{place_id}/reviews/{review}`).")
    original_text: Optional[GoogleTypeLocalizedText] = Field(default=None, alias="originalText")
    publish_time: Optional[StrictStr] = Field(default=None, description="Timestamp for the review.", alias="publishTime")
    rating: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A number between 1.0 and 5.0, also called the number of stars.")
    relative_publish_time_description: Optional[StrictStr] = Field(default=None, description="A string of formatted recent time, expressing the review time relative to the current time in a form appropriate for the language and country.", alias="relativePublishTimeDescription")
    text: Optional[GoogleTypeLocalizedText] = None
    __properties: ClassVar[List[str]] = ["authorAttribution", "name", "originalText", "publishTime", "rating", "relativePublishTimeDescription", "text"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleMapsPlacesV1Review from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author_attribution
        if self.author_attribution:
            _dict['authorAttribution'] = self.author_attribution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of original_text
        if self.original_text:
            _dict['originalText'] = self.original_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text
        if self.text:
            _dict['text'] = self.text.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleMapsPlacesV1Review from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorAttribution": GoogleMapsPlacesV1AuthorAttribution.from_dict(obj["authorAttribution"]) if obj.get("authorAttribution") is not None else None,
            "name": obj.get("name"),
            "originalText": GoogleTypeLocalizedText.from_dict(obj["originalText"]) if obj.get("originalText") is not None else None,
            "publishTime": obj.get("publishTime"),
            "rating": obj.get("rating"),
            "relativePublishTimeDescription": obj.get("relativePublishTimeDescription"),
            "text": GoogleTypeLocalizedText.from_dict(obj["text"]) if obj.get("text") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Places API (New)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_type_date import GoogleTypeDate
from typing import Optional, Set
from typing_extensions import Self

class GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint(BaseModel):
    """
    Status changing points.
    """ # noqa: E501
    var_date: Optional[GoogleTypeDate] = Field(default=None, alias="date")
    day: Optional[StrictInt] = Field(default=None, description="A day of the week, as an integer in the range 0-6. 0 is Sunday, 1 is Monday, etc.")
    hour: Optional[StrictInt] = Field(default=None, description="The hour in 2 digits. Ranges from 00 to 23.")
    minute: Optional[StrictInt] = Field(default=None, description="The minute in 2 digits. Ranges from 00 to 59.")
    truncated: Optional[StrictBool] = Field(default=None, description="Whether or not this endpoint was truncated. Truncation occurs when the real hours are outside the times we are willing to return hours between, so we truncate the hours back to these boundaries. This ensures that at most 24 * 7 hours from midnight of the day of the request are returned.")
    __properties: ClassVar[List[str]] = ["date", "day", "hour", "minute", "truncated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_date
        if self.var_date:
            _dict['date'] = self.var_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": GoogleTypeDate.from_dict(obj["date"]) if obj.get("date") is not None else None,
            "day": obj.get("day"),
            "hour": obj.get("hour"),
            "minute": obj.get("minute"),
            "truncated": obj.get("truncated")
        })
        return _obj



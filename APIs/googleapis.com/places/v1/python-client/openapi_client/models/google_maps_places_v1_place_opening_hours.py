# coding: utf-8

"""
    Places API (New)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_maps_places_v1_place_opening_hours_period import GoogleMapsPlacesV1PlaceOpeningHoursPeriod
from openapi_client.models.google_maps_places_v1_place_opening_hours_special_day import GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay
from typing import Optional, Set
from typing_extensions import Self

class GoogleMapsPlacesV1PlaceOpeningHours(BaseModel):
    """
    Information about business hour of the place.
    """ # noqa: E501
    open_now: Optional[StrictBool] = Field(default=None, description="Is this place open right now? Always present unless we lack time-of-day or timezone data for these opening hours.", alias="openNow")
    periods: Optional[List[GoogleMapsPlacesV1PlaceOpeningHoursPeriod]] = Field(default=None, description="The periods that this place is open during the week. The periods are in chronological order, starting with Sunday in the place-local timezone. An empty (but not absent) value indicates a place that is never open, e.g. because it is closed temporarily for renovations.")
    secondary_hours_type: Optional[StrictStr] = Field(default=None, description="A type string used to identify the type of secondary hours.", alias="secondaryHoursType")
    special_days: Optional[List[GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay]] = Field(default=None, description="Structured information for special days that fall within the period that the returned opening hours cover. Special days are days that could impact the business hours of a place, e.g. Christmas day. Set for current_opening_hours and current_secondary_opening_hours if there are exceptional hours.", alias="specialDays")
    weekday_descriptions: Optional[List[StrictStr]] = Field(default=None, description="Localized strings describing the opening hours of this place, one string for each day of the week. Will be empty if the hours are unknown or could not be converted to localized text. Example: \"Sun: 18:00â€“06:00\"", alias="weekdayDescriptions")
    __properties: ClassVar[List[str]] = ["openNow", "periods", "secondaryHoursType", "specialDays", "weekdayDescriptions"]

    @field_validator('secondary_hours_type')
    def secondary_hours_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SECONDARY_HOURS_TYPE_UNSPECIFIED', 'DRIVE_THROUGH', 'HAPPY_HOUR', 'DELIVERY', 'TAKEOUT', 'KITCHEN', 'BREAKFAST', 'LUNCH', 'DINNER', 'BRUNCH', 'PICKUP', 'ACCESS', 'SENIOR_HOURS', 'ONLINE_SERVICE_HOURS']):
            raise ValueError("must be one of enum values ('SECONDARY_HOURS_TYPE_UNSPECIFIED', 'DRIVE_THROUGH', 'HAPPY_HOUR', 'DELIVERY', 'TAKEOUT', 'KITCHEN', 'BREAKFAST', 'LUNCH', 'DINNER', 'BRUNCH', 'PICKUP', 'ACCESS', 'SENIOR_HOURS', 'ONLINE_SERVICE_HOURS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleMapsPlacesV1PlaceOpeningHours from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in periods (list)
        _items = []
        if self.periods:
            for _item_periods in self.periods:
                if _item_periods:
                    _items.append(_item_periods.to_dict())
            _dict['periods'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in special_days (list)
        _items = []
        if self.special_days:
            for _item_special_days in self.special_days:
                if _item_special_days:
                    _items.append(_item_special_days.to_dict())
            _dict['specialDays'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleMapsPlacesV1PlaceOpeningHours from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "openNow": obj.get("openNow"),
            "periods": [GoogleMapsPlacesV1PlaceOpeningHoursPeriod.from_dict(_item) for _item in obj["periods"]] if obj.get("periods") is not None else None,
            "secondaryHoursType": obj.get("secondaryHoursType"),
            "specialDays": [GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay.from_dict(_item) for _item in obj["specialDays"]] if obj.get("specialDays") is not None else None,
            "weekdayDescriptions": obj.get("weekdayDescriptions")
        })
        return _obj



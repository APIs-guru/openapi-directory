# coding: utf-8

"""
    Places API (New)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_maps_places_v1_autocomplete_places_response_suggestion_formattable_text import GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText
from typing import Optional, Set
from typing_extensions import Self

class GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat(BaseModel):
    """
    Contains a breakdown of a Place or query prediction into main text and secondary text. For Place predictions, the main text contains the specific name of the Place. For query predictions, the main text contains the query. The secondary text contains additional disambiguating features (such as a city or region) to further identify the Place or refine the query.
    """ # noqa: E501
    main_text: Optional[GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText] = Field(default=None, alias="mainText")
    secondary_text: Optional[GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText] = Field(default=None, alias="secondaryText")
    __properties: ClassVar[List[str]] = ["mainText", "secondaryText"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of main_text
        if self.main_text:
            _dict['mainText'] = self.main_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secondary_text
        if self.secondary_text:
            _dict['secondaryText'] = self.secondary_text.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mainText": GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText.from_dict(obj["mainText"]) if obj.get("mainText") is not None else None,
            "secondaryText": GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText.from_dict(obj["secondaryText"]) if obj.get("secondaryText") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Places API (New)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_maps_places_v1_search_text_request_location_bias import GoogleMapsPlacesV1SearchTextRequestLocationBias
from openapi_client.models.google_maps_places_v1_search_text_request_location_restriction import GoogleMapsPlacesV1SearchTextRequestLocationRestriction
from typing import Optional, Set
from typing_extensions import Self

class GoogleMapsPlacesV1SearchTextRequest(BaseModel):
    """
    Request proto for SearchText. 
    """ # noqa: E501
    included_type: Optional[StrictStr] = Field(default=None, description="The requested place type. Full list of types supported: https://developers.google.com/maps/documentation/places/web-service/place-types. Only support one included type.", alias="includedType")
    language_code: Optional[StrictStr] = Field(default=None, description="Place details will be displayed with the preferred language if available. If the language code is unspecified or unrecognized, place details of any language may be returned, with a preference for English if such details exist. Current list of supported languages: https://developers.google.com/maps/faq#languagesupport.", alias="languageCode")
    location_bias: Optional[GoogleMapsPlacesV1SearchTextRequestLocationBias] = Field(default=None, alias="locationBias")
    location_restriction: Optional[GoogleMapsPlacesV1SearchTextRequestLocationRestriction] = Field(default=None, alias="locationRestriction")
    max_result_count: Optional[StrictInt] = Field(default=None, description="Maximum number of results to return. It must be between 1 and 20, inclusively. The default is 20. If the number is unset, it falls back to the upper limit. If the number is set to negative or exceeds the upper limit, an INVALID_ARGUMENT error is returned.", alias="maxResultCount")
    min_rating: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Filter out results whose average user rating is strictly less than this limit. A valid value must be a float between 0 and 5 (inclusively) at a 0.5 cadence i.e. [0, 0.5, 1.0, ... , 5.0] inclusively. The input rating will round up to the nearest 0.5(ceiling). For instance, a rating of 0.6 will eliminate all results with a less than 1.0 rating.", alias="minRating")
    open_now: Optional[StrictBool] = Field(default=None, description="Used to restrict the search to places that are currently open. The default is false.", alias="openNow")
    price_levels: Optional[List[StrictStr]] = Field(default=None, description="Used to restrict the search to places that are marked as certain price levels. Users can choose any combinations of price levels. Default to select all price levels.", alias="priceLevels")
    rank_preference: Optional[StrictStr] = Field(default=None, description="How results will be ranked in the response.", alias="rankPreference")
    region_code: Optional[StrictStr] = Field(default=None, description="The Unicode country/region code (CLDR) of the location where the request is coming from. This parameter is used to display the place details, like region-specific place name, if available. The parameter can affect results based on applicable law. For more information, see https://www.unicode.org/cldr/charts/latest/supplemental/territory_language_information.html. Note that 3-digit region codes are not currently supported.", alias="regionCode")
    strict_type_filtering: Optional[StrictBool] = Field(default=None, description="Used to set strict type filtering for included_type. If set to true, only results of the same type will be returned. Default to false.", alias="strictTypeFiltering")
    text_query: Optional[StrictStr] = Field(default=None, description="Required. The text query for textual search.", alias="textQuery")
    __properties: ClassVar[List[str]] = ["includedType", "languageCode", "locationBias", "locationRestriction", "maxResultCount", "minRating", "openNow", "priceLevels", "rankPreference", "regionCode", "strictTypeFiltering", "textQuery"]

    @field_validator('price_levels')
    def price_levels_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['PRICE_LEVEL_UNSPECIFIED', 'PRICE_LEVEL_FREE', 'PRICE_LEVEL_INEXPENSIVE', 'PRICE_LEVEL_MODERATE', 'PRICE_LEVEL_EXPENSIVE', 'PRICE_LEVEL_VERY_EXPENSIVE']):
                raise ValueError("each list item must be one of ('PRICE_LEVEL_UNSPECIFIED', 'PRICE_LEVEL_FREE', 'PRICE_LEVEL_INEXPENSIVE', 'PRICE_LEVEL_MODERATE', 'PRICE_LEVEL_EXPENSIVE', 'PRICE_LEVEL_VERY_EXPENSIVE')")
        return value

    @field_validator('rank_preference')
    def rank_preference_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RANK_PREFERENCE_UNSPECIFIED', 'DISTANCE', 'RELEVANCE']):
            raise ValueError("must be one of enum values ('RANK_PREFERENCE_UNSPECIFIED', 'DISTANCE', 'RELEVANCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleMapsPlacesV1SearchTextRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location_bias
        if self.location_bias:
            _dict['locationBias'] = self.location_bias.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location_restriction
        if self.location_restriction:
            _dict['locationRestriction'] = self.location_restriction.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleMapsPlacesV1SearchTextRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "includedType": obj.get("includedType"),
            "languageCode": obj.get("languageCode"),
            "locationBias": GoogleMapsPlacesV1SearchTextRequestLocationBias.from_dict(obj["locationBias"]) if obj.get("locationBias") is not None else None,
            "locationRestriction": GoogleMapsPlacesV1SearchTextRequestLocationRestriction.from_dict(obj["locationRestriction"]) if obj.get("locationRestriction") is not None else None,
            "maxResultCount": obj.get("maxResultCount"),
            "minRating": obj.get("minRating"),
            "openNow": obj.get("openNow"),
            "priceLevels": obj.get("priceLevels"),
            "rankPreference": obj.get("rankPreference"),
            "regionCode": obj.get("regionCode"),
            "strictTypeFiltering": obj.get("strictTypeFiltering"),
            "textQuery": obj.get("textQuery")
        })
        return _obj



# coding: utf-8

"""
    Places API (New)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_maps_places_v1_autocomplete_places_response_suggestion_formattable_text import GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText
from openapi_client.models.google_maps_places_v1_autocomplete_places_response_suggestion_structured_format import GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat
from typing import Optional, Set
from typing_extensions import Self

class GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction(BaseModel):
    """
    Prediction results for a Place Autocomplete prediction.
    """ # noqa: E501
    distance_meters: Optional[StrictInt] = Field(default=None, description="The length of the geodesic in meters from `origin` if `origin` is specified. Certain predictions such as routes may not populate this field.", alias="distanceMeters")
    place: Optional[StrictStr] = Field(default=None, description="The resource name of the suggested Place. This name can be used in other APIs that accept Place names.")
    place_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the suggested Place. This identifier can be used in other APIs that accept Place IDs.", alias="placeId")
    structured_format: Optional[GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat] = Field(default=None, alias="structuredFormat")
    text: Optional[GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText] = None
    types: Optional[List[StrictStr]] = Field(default=None, description="List of types that apply to this Place from Table A or Table B in https://developers.google.com/maps/documentation/places/web-service/place-types. A type is a categorization of a Place. Places with shared types will share similar characteristics.")
    __properties: ClassVar[List[str]] = ["distanceMeters", "place", "placeId", "structuredFormat", "text", "types"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of structured_format
        if self.structured_format:
            _dict['structuredFormat'] = self.structured_format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text
        if self.text:
            _dict['text'] = self.text.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "distanceMeters": obj.get("distanceMeters"),
            "place": obj.get("place"),
            "placeId": obj.get("placeId"),
            "structuredFormat": GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat.from_dict(obj["structuredFormat"]) if obj.get("structuredFormat") is not None else None,
            "text": GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText.from_dict(obj["text"]) if obj.get("text") is not None else None,
            "types": obj.get("types")
        })
        return _obj



# coding: utf-8

"""
    Places API (New)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_geo_type_viewport import GoogleGeoTypeViewport
from openapi_client.models.google_maps_places_v1_ev_charge_options import GoogleMapsPlacesV1EVChargeOptions
from openapi_client.models.google_maps_places_v1_fuel_options import GoogleMapsPlacesV1FuelOptions
from openapi_client.models.google_maps_places_v1_photo import GoogleMapsPlacesV1Photo
from openapi_client.models.google_maps_places_v1_place_accessibility_options import GoogleMapsPlacesV1PlaceAccessibilityOptions
from openapi_client.models.google_maps_places_v1_place_address_component import GoogleMapsPlacesV1PlaceAddressComponent
from openapi_client.models.google_maps_places_v1_place_attribution import GoogleMapsPlacesV1PlaceAttribution
from openapi_client.models.google_maps_places_v1_place_opening_hours import GoogleMapsPlacesV1PlaceOpeningHours
from openapi_client.models.google_maps_places_v1_place_parking_options import GoogleMapsPlacesV1PlaceParkingOptions
from openapi_client.models.google_maps_places_v1_place_payment_options import GoogleMapsPlacesV1PlacePaymentOptions
from openapi_client.models.google_maps_places_v1_place_plus_code import GoogleMapsPlacesV1PlacePlusCode
from openapi_client.models.google_maps_places_v1_place_sub_destination import GoogleMapsPlacesV1PlaceSubDestination
from openapi_client.models.google_maps_places_v1_review import GoogleMapsPlacesV1Review
from openapi_client.models.google_type_lat_lng import GoogleTypeLatLng
from openapi_client.models.google_type_localized_text import GoogleTypeLocalizedText
from typing import Optional, Set
from typing_extensions import Self

class GoogleMapsPlacesV1Place(BaseModel):
    """
    All the information representing a Place.
    """ # noqa: E501
    accessibility_options: Optional[GoogleMapsPlacesV1PlaceAccessibilityOptions] = Field(default=None, alias="accessibilityOptions")
    address_components: Optional[List[GoogleMapsPlacesV1PlaceAddressComponent]] = Field(default=None, description="Repeated components for each locality level. Note the following facts about the address_components[] array: - The array of address components may contain more components than the formatted_address. - The array does not necessarily include all the political entities that contain an address, apart from those included in the formatted_address. To retrieve all the political entities that contain a specific address, you should use reverse geocoding, passing the latitude/longitude of the address as a parameter to the request. - The format of the response is not guaranteed to remain the same between requests. In particular, the number of address_components varies based on the address requested and can change over time for the same address. A component can change position in the array. The type of the component can change. A particular component may be missing in a later response.", alias="addressComponents")
    adr_format_address: Optional[StrictStr] = Field(default=None, description="The place's address in adr microformat: http://microformats.org/wiki/adr.", alias="adrFormatAddress")
    allows_dogs: Optional[StrictBool] = Field(default=None, description="Place allows dogs.", alias="allowsDogs")
    attributions: Optional[List[GoogleMapsPlacesV1PlaceAttribution]] = Field(default=None, description="A set of data provider that must be shown with this result.")
    business_status: Optional[StrictStr] = Field(default=None, description="The business status for the place.", alias="businessStatus")
    curbside_pickup: Optional[StrictBool] = Field(default=None, description="Specifies if the business supports curbside pickup.", alias="curbsidePickup")
    current_opening_hours: Optional[GoogleMapsPlacesV1PlaceOpeningHours] = Field(default=None, alias="currentOpeningHours")
    current_secondary_opening_hours: Optional[List[GoogleMapsPlacesV1PlaceOpeningHours]] = Field(default=None, description="Contains an array of entries for the next seven days including information about secondary hours of a business. Secondary hours are different from a business's main hours. For example, a restaurant can specify drive through hours or delivery hours as its secondary hours. This field populates the type subfield, which draws from a predefined list of opening hours types (such as DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place. This field includes the special_days subfield of all hours, set for dates that have exceptional hours.", alias="currentSecondaryOpeningHours")
    delivery: Optional[StrictBool] = Field(default=None, description="Specifies if the business supports delivery.")
    dine_in: Optional[StrictBool] = Field(default=None, description="Specifies if the business supports indoor or outdoor seating options.", alias="dineIn")
    display_name: Optional[GoogleTypeLocalizedText] = Field(default=None, alias="displayName")
    editorial_summary: Optional[GoogleTypeLocalizedText] = Field(default=None, alias="editorialSummary")
    ev_charge_options: Optional[GoogleMapsPlacesV1EVChargeOptions] = Field(default=None, alias="evChargeOptions")
    formatted_address: Optional[StrictStr] = Field(default=None, description="A full, human-readable address for this place.", alias="formattedAddress")
    fuel_options: Optional[GoogleMapsPlacesV1FuelOptions] = Field(default=None, alias="fuelOptions")
    good_for_children: Optional[StrictBool] = Field(default=None, description="Place is good for children.", alias="goodForChildren")
    good_for_groups: Optional[StrictBool] = Field(default=None, description="Place accommodates groups.", alias="goodForGroups")
    good_for_watching_sports: Optional[StrictBool] = Field(default=None, description="Place is suitable for watching sports.", alias="goodForWatchingSports")
    google_maps_uri: Optional[StrictStr] = Field(default=None, description="A URL providing more information about this place.", alias="googleMapsUri")
    icon_background_color: Optional[StrictStr] = Field(default=None, description="Background color for icon_mask in hex format, e.g. #909CE1.", alias="iconBackgroundColor")
    icon_mask_base_uri: Optional[StrictStr] = Field(default=None, description="A truncated URL to an icon mask. User can access different icon type by appending type suffix to the end (eg, \".svg\" or \".png\").", alias="iconMaskBaseUri")
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier of a place.")
    international_phone_number: Optional[StrictStr] = Field(default=None, description="A human-readable phone number for the place, in international format.", alias="internationalPhoneNumber")
    live_music: Optional[StrictBool] = Field(default=None, description="Place provides live music.", alias="liveMusic")
    location: Optional[GoogleTypeLatLng] = None
    menu_for_children: Optional[StrictBool] = Field(default=None, description="Place has a children's menu.", alias="menuForChildren")
    name: Optional[StrictStr] = Field(default=None, description="This Place's resource name, in `places/{place_id}` format. Can be used to look up the Place.")
    national_phone_number: Optional[StrictStr] = Field(default=None, description="A human-readable phone number for the place, in national format.", alias="nationalPhoneNumber")
    outdoor_seating: Optional[StrictBool] = Field(default=None, description="Place provides outdoor seating.", alias="outdoorSeating")
    parking_options: Optional[GoogleMapsPlacesV1PlaceParkingOptions] = Field(default=None, alias="parkingOptions")
    payment_options: Optional[GoogleMapsPlacesV1PlacePaymentOptions] = Field(default=None, alias="paymentOptions")
    photos: Optional[List[GoogleMapsPlacesV1Photo]] = Field(default=None, description="Information (including references) about photos of this place. A maximum of 10 photos can be returned.")
    plus_code: Optional[GoogleMapsPlacesV1PlacePlusCode] = Field(default=None, alias="plusCode")
    price_level: Optional[StrictStr] = Field(default=None, description="Price level of the place.", alias="priceLevel")
    primary_type: Optional[StrictStr] = Field(default=None, description="The primary type of the given result. This type must one of the Places API supported types. For example, \"restaurant\", \"cafe\", \"airport\", etc. A place can only have a single primary type. For the complete list of possible values, see Table A and Table B at https://developers.google.com/maps/documentation/places/web-service/place-types", alias="primaryType")
    primary_type_display_name: Optional[GoogleTypeLocalizedText] = Field(default=None, alias="primaryTypeDisplayName")
    rating: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A rating between 1.0 and 5.0, based on user reviews of this place.")
    regular_opening_hours: Optional[GoogleMapsPlacesV1PlaceOpeningHours] = Field(default=None, alias="regularOpeningHours")
    regular_secondary_opening_hours: Optional[List[GoogleMapsPlacesV1PlaceOpeningHours]] = Field(default=None, description="Contains an array of entries for information about regular secondary hours of a business. Secondary hours are different from a business's main hours. For example, a restaurant can specify drive through hours or delivery hours as its secondary hours. This field populates the type subfield, which draws from a predefined list of opening hours types (such as DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place.", alias="regularSecondaryOpeningHours")
    reservable: Optional[StrictBool] = Field(default=None, description="Specifies if the place supports reservations.")
    restroom: Optional[StrictBool] = Field(default=None, description="Place has restroom.")
    reviews: Optional[List[GoogleMapsPlacesV1Review]] = Field(default=None, description="List of reviews about this place, sorted by relevance. A maximum of 5 reviews can be returned.")
    serves_beer: Optional[StrictBool] = Field(default=None, description="Specifies if the place serves beer.", alias="servesBeer")
    serves_breakfast: Optional[StrictBool] = Field(default=None, description="Specifies if the place serves breakfast.", alias="servesBreakfast")
    serves_brunch: Optional[StrictBool] = Field(default=None, description="Specifies if the place serves brunch.", alias="servesBrunch")
    serves_cocktails: Optional[StrictBool] = Field(default=None, description="Place serves cocktails.", alias="servesCocktails")
    serves_coffee: Optional[StrictBool] = Field(default=None, description="Place serves coffee.", alias="servesCoffee")
    serves_dessert: Optional[StrictBool] = Field(default=None, description="Place serves dessert.", alias="servesDessert")
    serves_dinner: Optional[StrictBool] = Field(default=None, description="Specifies if the place serves dinner.", alias="servesDinner")
    serves_lunch: Optional[StrictBool] = Field(default=None, description="Specifies if the place serves lunch.", alias="servesLunch")
    serves_vegetarian_food: Optional[StrictBool] = Field(default=None, description="Specifies if the place serves vegetarian food.", alias="servesVegetarianFood")
    serves_wine: Optional[StrictBool] = Field(default=None, description="Specifies if the place serves wine.", alias="servesWine")
    short_formatted_address: Optional[StrictStr] = Field(default=None, description="A short, human-readable address for this place.", alias="shortFormattedAddress")
    sub_destinations: Optional[List[GoogleMapsPlacesV1PlaceSubDestination]] = Field(default=None, description="A list of sub destinations related to the place.", alias="subDestinations")
    takeout: Optional[StrictBool] = Field(default=None, description="Specifies if the business supports takeout.")
    types: Optional[List[StrictStr]] = Field(default=None, description="A set of type tags for this result. For example, \"political\" and \"locality\". For the complete list of possible values, see Table A and Table B at https://developers.google.com/maps/documentation/places/web-service/place-types")
    user_rating_count: Optional[StrictInt] = Field(default=None, description="The total number of reviews (with or without text) for this place.", alias="userRatingCount")
    utc_offset_minutes: Optional[StrictInt] = Field(default=None, description="Number of minutes this place's timezone is currently offset from UTC. This is expressed in minutes to support timezones that are offset by fractions of an hour, e.g. X hours and 15 minutes.", alias="utcOffsetMinutes")
    viewport: Optional[GoogleGeoTypeViewport] = None
    website_uri: Optional[StrictStr] = Field(default=None, description="The authoritative website for this place, e.g. a business' homepage. Note that for places that are part of a chain (e.g. an IKEA store), this will usually be the website for the individual store, not the overall chain.", alias="websiteUri")
    __properties: ClassVar[List[str]] = ["accessibilityOptions", "addressComponents", "adrFormatAddress", "allowsDogs", "attributions", "businessStatus", "curbsidePickup", "currentOpeningHours", "currentSecondaryOpeningHours", "delivery", "dineIn", "displayName", "editorialSummary", "evChargeOptions", "formattedAddress", "fuelOptions", "goodForChildren", "goodForGroups", "goodForWatchingSports", "googleMapsUri", "iconBackgroundColor", "iconMaskBaseUri", "id", "internationalPhoneNumber", "liveMusic", "location", "menuForChildren", "name", "nationalPhoneNumber", "outdoorSeating", "parkingOptions", "paymentOptions", "photos", "plusCode", "priceLevel", "primaryType", "primaryTypeDisplayName", "rating", "regularOpeningHours", "regularSecondaryOpeningHours", "reservable", "restroom", "reviews", "servesBeer", "servesBreakfast", "servesBrunch", "servesCocktails", "servesCoffee", "servesDessert", "servesDinner", "servesLunch", "servesVegetarianFood", "servesWine", "shortFormattedAddress", "subDestinations", "takeout", "types", "userRatingCount", "utcOffsetMinutes", "viewport", "websiteUri"]

    @field_validator('business_status')
    def business_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BUSINESS_STATUS_UNSPECIFIED', 'OPERATIONAL', 'CLOSED_TEMPORARILY', 'CLOSED_PERMANENTLY']):
            raise ValueError("must be one of enum values ('BUSINESS_STATUS_UNSPECIFIED', 'OPERATIONAL', 'CLOSED_TEMPORARILY', 'CLOSED_PERMANENTLY')")
        return value

    @field_validator('price_level')
    def price_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRICE_LEVEL_UNSPECIFIED', 'PRICE_LEVEL_FREE', 'PRICE_LEVEL_INEXPENSIVE', 'PRICE_LEVEL_MODERATE', 'PRICE_LEVEL_EXPENSIVE', 'PRICE_LEVEL_VERY_EXPENSIVE']):
            raise ValueError("must be one of enum values ('PRICE_LEVEL_UNSPECIFIED', 'PRICE_LEVEL_FREE', 'PRICE_LEVEL_INEXPENSIVE', 'PRICE_LEVEL_MODERATE', 'PRICE_LEVEL_EXPENSIVE', 'PRICE_LEVEL_VERY_EXPENSIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleMapsPlacesV1Place from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accessibility_options
        if self.accessibility_options:
            _dict['accessibilityOptions'] = self.accessibility_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in address_components (list)
        _items = []
        if self.address_components:
            for _item_address_components in self.address_components:
                if _item_address_components:
                    _items.append(_item_address_components.to_dict())
            _dict['addressComponents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attributions (list)
        _items = []
        if self.attributions:
            for _item_attributions in self.attributions:
                if _item_attributions:
                    _items.append(_item_attributions.to_dict())
            _dict['attributions'] = _items
        # override the default output from pydantic by calling `to_dict()` of current_opening_hours
        if self.current_opening_hours:
            _dict['currentOpeningHours'] = self.current_opening_hours.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in current_secondary_opening_hours (list)
        _items = []
        if self.current_secondary_opening_hours:
            for _item_current_secondary_opening_hours in self.current_secondary_opening_hours:
                if _item_current_secondary_opening_hours:
                    _items.append(_item_current_secondary_opening_hours.to_dict())
            _dict['currentSecondaryOpeningHours'] = _items
        # override the default output from pydantic by calling `to_dict()` of display_name
        if self.display_name:
            _dict['displayName'] = self.display_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of editorial_summary
        if self.editorial_summary:
            _dict['editorialSummary'] = self.editorial_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ev_charge_options
        if self.ev_charge_options:
            _dict['evChargeOptions'] = self.ev_charge_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fuel_options
        if self.fuel_options:
            _dict['fuelOptions'] = self.fuel_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parking_options
        if self.parking_options:
            _dict['parkingOptions'] = self.parking_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_options
        if self.payment_options:
            _dict['paymentOptions'] = self.payment_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in photos (list)
        _items = []
        if self.photos:
            for _item_photos in self.photos:
                if _item_photos:
                    _items.append(_item_photos.to_dict())
            _dict['photos'] = _items
        # override the default output from pydantic by calling `to_dict()` of plus_code
        if self.plus_code:
            _dict['plusCode'] = self.plus_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primary_type_display_name
        if self.primary_type_display_name:
            _dict['primaryTypeDisplayName'] = self.primary_type_display_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of regular_opening_hours
        if self.regular_opening_hours:
            _dict['regularOpeningHours'] = self.regular_opening_hours.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in regular_secondary_opening_hours (list)
        _items = []
        if self.regular_secondary_opening_hours:
            for _item_regular_secondary_opening_hours in self.regular_secondary_opening_hours:
                if _item_regular_secondary_opening_hours:
                    _items.append(_item_regular_secondary_opening_hours.to_dict())
            _dict['regularSecondaryOpeningHours'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reviews (list)
        _items = []
        if self.reviews:
            for _item_reviews in self.reviews:
                if _item_reviews:
                    _items.append(_item_reviews.to_dict())
            _dict['reviews'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sub_destinations (list)
        _items = []
        if self.sub_destinations:
            for _item_sub_destinations in self.sub_destinations:
                if _item_sub_destinations:
                    _items.append(_item_sub_destinations.to_dict())
            _dict['subDestinations'] = _items
        # override the default output from pydantic by calling `to_dict()` of viewport
        if self.viewport:
            _dict['viewport'] = self.viewport.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleMapsPlacesV1Place from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessibilityOptions": GoogleMapsPlacesV1PlaceAccessibilityOptions.from_dict(obj["accessibilityOptions"]) if obj.get("accessibilityOptions") is not None else None,
            "addressComponents": [GoogleMapsPlacesV1PlaceAddressComponent.from_dict(_item) for _item in obj["addressComponents"]] if obj.get("addressComponents") is not None else None,
            "adrFormatAddress": obj.get("adrFormatAddress"),
            "allowsDogs": obj.get("allowsDogs"),
            "attributions": [GoogleMapsPlacesV1PlaceAttribution.from_dict(_item) for _item in obj["attributions"]] if obj.get("attributions") is not None else None,
            "businessStatus": obj.get("businessStatus"),
            "curbsidePickup": obj.get("curbsidePickup"),
            "currentOpeningHours": GoogleMapsPlacesV1PlaceOpeningHours.from_dict(obj["currentOpeningHours"]) if obj.get("currentOpeningHours") is not None else None,
            "currentSecondaryOpeningHours": [GoogleMapsPlacesV1PlaceOpeningHours.from_dict(_item) for _item in obj["currentSecondaryOpeningHours"]] if obj.get("currentSecondaryOpeningHours") is not None else None,
            "delivery": obj.get("delivery"),
            "dineIn": obj.get("dineIn"),
            "displayName": GoogleTypeLocalizedText.from_dict(obj["displayName"]) if obj.get("displayName") is not None else None,
            "editorialSummary": GoogleTypeLocalizedText.from_dict(obj["editorialSummary"]) if obj.get("editorialSummary") is not None else None,
            "evChargeOptions": GoogleMapsPlacesV1EVChargeOptions.from_dict(obj["evChargeOptions"]) if obj.get("evChargeOptions") is not None else None,
            "formattedAddress": obj.get("formattedAddress"),
            "fuelOptions": GoogleMapsPlacesV1FuelOptions.from_dict(obj["fuelOptions"]) if obj.get("fuelOptions") is not None else None,
            "goodForChildren": obj.get("goodForChildren"),
            "goodForGroups": obj.get("goodForGroups"),
            "goodForWatchingSports": obj.get("goodForWatchingSports"),
            "googleMapsUri": obj.get("googleMapsUri"),
            "iconBackgroundColor": obj.get("iconBackgroundColor"),
            "iconMaskBaseUri": obj.get("iconMaskBaseUri"),
            "id": obj.get("id"),
            "internationalPhoneNumber": obj.get("internationalPhoneNumber"),
            "liveMusic": obj.get("liveMusic"),
            "location": GoogleTypeLatLng.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "menuForChildren": obj.get("menuForChildren"),
            "name": obj.get("name"),
            "nationalPhoneNumber": obj.get("nationalPhoneNumber"),
            "outdoorSeating": obj.get("outdoorSeating"),
            "parkingOptions": GoogleMapsPlacesV1PlaceParkingOptions.from_dict(obj["parkingOptions"]) if obj.get("parkingOptions") is not None else None,
            "paymentOptions": GoogleMapsPlacesV1PlacePaymentOptions.from_dict(obj["paymentOptions"]) if obj.get("paymentOptions") is not None else None,
            "photos": [GoogleMapsPlacesV1Photo.from_dict(_item) for _item in obj["photos"]] if obj.get("photos") is not None else None,
            "plusCode": GoogleMapsPlacesV1PlacePlusCode.from_dict(obj["plusCode"]) if obj.get("plusCode") is not None else None,
            "priceLevel": obj.get("priceLevel"),
            "primaryType": obj.get("primaryType"),
            "primaryTypeDisplayName": GoogleTypeLocalizedText.from_dict(obj["primaryTypeDisplayName"]) if obj.get("primaryTypeDisplayName") is not None else None,
            "rating": obj.get("rating"),
            "regularOpeningHours": GoogleMapsPlacesV1PlaceOpeningHours.from_dict(obj["regularOpeningHours"]) if obj.get("regularOpeningHours") is not None else None,
            "regularSecondaryOpeningHours": [GoogleMapsPlacesV1PlaceOpeningHours.from_dict(_item) for _item in obj["regularSecondaryOpeningHours"]] if obj.get("regularSecondaryOpeningHours") is not None else None,
            "reservable": obj.get("reservable"),
            "restroom": obj.get("restroom"),
            "reviews": [GoogleMapsPlacesV1Review.from_dict(_item) for _item in obj["reviews"]] if obj.get("reviews") is not None else None,
            "servesBeer": obj.get("servesBeer"),
            "servesBreakfast": obj.get("servesBreakfast"),
            "servesBrunch": obj.get("servesBrunch"),
            "servesCocktails": obj.get("servesCocktails"),
            "servesCoffee": obj.get("servesCoffee"),
            "servesDessert": obj.get("servesDessert"),
            "servesDinner": obj.get("servesDinner"),
            "servesLunch": obj.get("servesLunch"),
            "servesVegetarianFood": obj.get("servesVegetarianFood"),
            "servesWine": obj.get("servesWine"),
            "shortFormattedAddress": obj.get("shortFormattedAddress"),
            "subDestinations": [GoogleMapsPlacesV1PlaceSubDestination.from_dict(_item) for _item in obj["subDestinations"]] if obj.get("subDestinations") is not None else None,
            "takeout": obj.get("takeout"),
            "types": obj.get("types"),
            "userRatingCount": obj.get("userRatingCount"),
            "utcOffsetMinutes": obj.get("utcOffsetMinutes"),
            "viewport": GoogleGeoTypeViewport.from_dict(obj["viewport"]) if obj.get("viewport") is not None else None,
            "websiteUri": obj.get("websiteUri")
        })
        return _obj



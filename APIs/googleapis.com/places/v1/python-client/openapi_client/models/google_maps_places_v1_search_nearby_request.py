# coding: utf-8

"""
    Places API (New)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_maps_places_v1_search_nearby_request_location_restriction import GoogleMapsPlacesV1SearchNearbyRequestLocationRestriction
from typing import Optional, Set
from typing_extensions import Self

class GoogleMapsPlacesV1SearchNearbyRequest(BaseModel):
    """
    Request proto for Search Nearby. 
    """ # noqa: E501
    excluded_primary_types: Optional[List[StrictStr]] = Field(default=None, description="Excluded primary Place type (e.g. \"restaurant\" or \"gas_station\") from https://developers.google.com/maps/documentation/places/web-service/place-types. Up to 50 types from [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a) may be specified. If there are any conflicting primary types, i.e. a type appears in both included_primary_types and excluded_primary_types, an INVALID_ARGUMENT error is returned. If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = [\"restaurant\"], excluded_primary_types = [\"restaurant\"]}, the returned places provide \"restaurant\" related services but do not operate primarily as \"restaurants\".", alias="excludedPrimaryTypes")
    excluded_types: Optional[List[StrictStr]] = Field(default=None, description="Excluded Place type (eg, \"restaurant\" or \"gas_station\") from https://developers.google.com/maps/documentation/places/web-service/place-types. Up to 50 types from [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a) may be specified. If the client provides both included_types (e.g. restaurant) and excluded_types (e.g. cafe), then the response should include places that are restaurant but not cafe. The response includes places that match at least one of the included_types and none of the excluded_types. If there are any conflicting types, i.e. a type appears in both included_types and excluded_types, an INVALID_ARGUMENT error is returned. If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = [\"restaurant\"], excluded_primary_types = [\"restaurant\"]}, the returned places provide \"restaurant\" related services but do not operate primarily as \"restaurants\".", alias="excludedTypes")
    included_primary_types: Optional[List[StrictStr]] = Field(default=None, description="Included primary Place type (e.g. \"restaurant\" or \"gas_station\") from https://developers.google.com/maps/documentation/places/web-service/place-types. A place can only have a single primary type from the supported types table associated with it. Up to 50 types from [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a) may be specified. If there are any conflicting primary types, i.e. a type appears in both included_primary_types and excluded_primary_types, an INVALID_ARGUMENT error is returned. If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = [\"restaurant\"], excluded_primary_types = [\"restaurant\"]}, the returned places provide \"restaurant\" related services but do not operate primarily as \"restaurants\".", alias="includedPrimaryTypes")
    included_types: Optional[List[StrictStr]] = Field(default=None, description="Included Place type (eg, \"restaurant\" or \"gas_station\") from https://developers.google.com/maps/documentation/places/web-service/place-types. Up to 50 types from [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a) may be specified. If there are any conflicting types, i.e. a type appears in both included_types and excluded_types, an INVALID_ARGUMENT error is returned. If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = [\"restaurant\"], excluded_primary_types = [\"restaurant\"]}, the returned places provide \"restaurant\" related services but do not operate primarily as \"restaurants\".", alias="includedTypes")
    language_code: Optional[StrictStr] = Field(default=None, description="Place details will be displayed with the preferred language if available. If the language code is unspecified or unrecognized, place details of any language may be returned, with a preference for English if such details exist. Current list of supported languages: https://developers.google.com/maps/faq#languagesupport.", alias="languageCode")
    location_restriction: Optional[GoogleMapsPlacesV1SearchNearbyRequestLocationRestriction] = Field(default=None, alias="locationRestriction")
    max_result_count: Optional[StrictInt] = Field(default=None, description="Maximum number of results to return. It must be between 1 and 20 (default), inclusively. If the number is unset, it falls back to the upper limit. If the number is set to negative or exceeds the upper limit, an INVALID_ARGUMENT error is returned.", alias="maxResultCount")
    rank_preference: Optional[StrictStr] = Field(default=None, description="How results will be ranked in the response.", alias="rankPreference")
    region_code: Optional[StrictStr] = Field(default=None, description="The Unicode country/region code (CLDR) of the location where the request is coming from. This parameter is used to display the place details, like region-specific place name, if available. The parameter can affect results based on applicable law. For more information, see https://www.unicode.org/cldr/charts/latest/supplemental/territory_language_information.html. Note that 3-digit region codes are not currently supported.", alias="regionCode")
    __properties: ClassVar[List[str]] = ["excludedPrimaryTypes", "excludedTypes", "includedPrimaryTypes", "includedTypes", "languageCode", "locationRestriction", "maxResultCount", "rankPreference", "regionCode"]

    @field_validator('rank_preference')
    def rank_preference_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RANK_PREFERENCE_UNSPECIFIED', 'DISTANCE', 'POPULARITY']):
            raise ValueError("must be one of enum values ('RANK_PREFERENCE_UNSPECIFIED', 'DISTANCE', 'POPULARITY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleMapsPlacesV1SearchNearbyRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location_restriction
        if self.location_restriction:
            _dict['locationRestriction'] = self.location_restriction.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleMapsPlacesV1SearchNearbyRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "excludedPrimaryTypes": obj.get("excludedPrimaryTypes"),
            "excludedTypes": obj.get("excludedTypes"),
            "includedPrimaryTypes": obj.get("includedPrimaryTypes"),
            "includedTypes": obj.get("includedTypes"),
            "languageCode": obj.get("languageCode"),
            "locationRestriction": GoogleMapsPlacesV1SearchNearbyRequestLocationRestriction.from_dict(obj["locationRestriction"]) if obj.get("locationRestriction") is not None else None,
            "maxResultCount": obj.get("maxResultCount"),
            "rankPreference": obj.get("rankPreference"),
            "regionCode": obj.get("regionCode")
        })
        return _obj



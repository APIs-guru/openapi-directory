# coding: utf-8

"""
    Cloud Talent Solution API

    Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BatchOperationMetadata(BaseModel):
    """
    Metadata used for long running operations returned by CTS batch APIs. It's used to replace google.longrunning.Operation.metadata.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="The time when the batch operation is created.", alias="createTime")
    end_time: Optional[StrictStr] = Field(default=None, description="The time when the batch operation is finished and google.longrunning.Operation.done is set to `true`.", alias="endTime")
    failure_count: Optional[StrictInt] = Field(default=None, description="Count of failed item(s) inside an operation.", alias="failureCount")
    state: Optional[StrictStr] = Field(default=None, description="The state of a long running operation.")
    state_description: Optional[StrictStr] = Field(default=None, description="More detailed information about operation state.", alias="stateDescription")
    success_count: Optional[StrictInt] = Field(default=None, description="Count of successful item(s) inside an operation.", alias="successCount")
    total_count: Optional[StrictInt] = Field(default=None, description="Count of total item(s) inside an operation.", alias="totalCount")
    update_time: Optional[StrictStr] = Field(default=None, description="The time when the batch operation status is updated. The metadata and the update_time is refreshed every minute otherwise cached data is returned.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "endTime", "failureCount", "state", "stateDescription", "successCount", "totalCount", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'INITIALIZING', 'PROCESSING', 'SUCCEEDED', 'FAILED', 'CANCELLING', 'CANCELLED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'INITIALIZING', 'PROCESSING', 'SUCCEEDED', 'FAILED', 'CANCELLING', 'CANCELLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BatchOperationMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BatchOperationMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "endTime": obj.get("endTime"),
            "failureCount": obj.get("failureCount"),
            "state": obj.get("state"),
            "stateDescription": obj.get("stateDescription"),
            "successCount": obj.get("successCount"),
            "totalCount": obj.get("totalCount"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Cloud Talent Solution API

    Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 

    The version of the OpenAPI document: v3p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.search_jobs_response import SearchJobsResponse

class TestSearchJobsResponse(unittest.TestCase):
    """SearchJobsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchJobsResponse:
        """Test SearchJobsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchJobsResponse`
        """
        model = SearchJobsResponse()
        if include_optional:
            return SearchJobsResponse(
                broadened_query_jobs_count = 56,
                estimated_total_size = 56,
                histogram_query_results = [
                    openapi_client.models.histogram_query_result.HistogramQueryResult(
                        histogram = {
                            'key' : ''
                            }, 
                        histogram_query = '', )
                    ],
                histogram_results = openapi_client.models.histogram_results.HistogramResults(
                    compensation_histogram_results = [
                        openapi_client.models.compensation_histogram_result.CompensationHistogramResult(
                            result = openapi_client.models.numeric_bucketing_result.NumericBucketingResult(
                                counts = [
                                    openapi_client.models.bucketized_count.BucketizedCount(
                                        count = 56, 
                                        range = openapi_client.models.bucket_range.BucketRange(
                                            from = 1.337, 
                                            to = 1.337, ), )
                                    ], 
                                max_value = 1.337, 
                                min_value = 1.337, ), 
                            type = 'COMPENSATION_HISTOGRAM_REQUEST_TYPE_UNSPECIFIED', )
                        ], 
                    custom_attribute_histogram_results = [
                        openapi_client.models.custom_attribute_histogram_result.CustomAttributeHistogramResult(
                            key = '', 
                            long_value_histogram_result = openapi_client.models.numeric_bucketing_result.NumericBucketingResult(
                                max_value = 1.337, 
                                min_value = 1.337, ), 
                            string_value_histogram_result = {
                                'key' : 56
                                }, )
                        ], 
                    simple_histogram_results = [
                        openapi_client.models.histogram_result.HistogramResult(
                            search_type = 'SEARCH_TYPE_UNSPECIFIED', 
                            values = {
                                'key' : 56
                                }, )
                        ], ),
                location_filters = [
                    openapi_client.models.location.Location(
                        lat_lng = openapi_client.models.lat_lng.LatLng(
                            latitude = 1.337, 
                            longitude = 1.337, ), 
                        location_type = 'LOCATION_TYPE_UNSPECIFIED', 
                        postal_address = openapi_client.models.postal_address.PostalAddress(
                            address_lines = [
                                ''
                                ], 
                            administrative_area = '', 
                            language_code = '', 
                            locality = '', 
                            organization = '', 
                            postal_code = '', 
                            recipients = [
                                ''
                                ], 
                            region_code = '', 
                            revision = 56, 
                            sorting_code = '', 
                            sublocality = '', ), 
                        radius_in_miles = 1.337, )
                    ],
                matching_jobs = [
                    openapi_client.models.matching_job.MatchingJob(
                        commute_info = openapi_client.models.commute_info.CommuteInfo(
                            job_location = openapi_client.models.location.Location(
                                lat_lng = openapi_client.models.lat_lng.LatLng(
                                    latitude = 1.337, 
                                    longitude = 1.337, ), 
                                location_type = 'LOCATION_TYPE_UNSPECIFIED', 
                                postal_address = openapi_client.models.postal_address.PostalAddress(
                                    address_lines = [
                                        ''
                                        ], 
                                    administrative_area = '', 
                                    language_code = '', 
                                    locality = '', 
                                    organization = '', 
                                    postal_code = '', 
                                    recipients = [
                                        ''
                                        ], 
                                    region_code = '', 
                                    revision = 56, 
                                    sorting_code = '', 
                                    sublocality = '', ), 
                                radius_in_miles = 1.337, ), 
                            travel_duration = '', ), 
                        job = openapi_client.models.job.Job(
                            addresses = [
                                ''
                                ], 
                            application_info = openapi_client.models.application_info.ApplicationInfo(
                                emails = [
                                    ''
                                    ], 
                                instruction = '', 
                                uris = [
                                    ''
                                    ], ), 
                            company_display_name = '', 
                            company_name = '', 
                            compensation_info = openapi_client.models.compensation_info.CompensationInfo(
                                annualized_base_compensation_range = openapi_client.models.compensation_range.CompensationRange(
                                    max_compensation = openapi_client.models.money.Money(
                                        currency_code = '', 
                                        nanos = 56, 
                                        units = '', ), 
                                    min_compensation = openapi_client.models.money.Money(
                                        currency_code = '', 
                                        nanos = 56, 
                                        units = '', ), ), 
                                annualized_total_compensation_range = openapi_client.models.compensation_range.CompensationRange(), 
                                entries = [
                                    openapi_client.models.compensation_entry.CompensationEntry(
                                        amount = , 
                                        description = '', 
                                        expected_units_per_year = 1.337, 
                                        range = , 
                                        type = 'COMPENSATION_TYPE_UNSPECIFIED', 
                                        unit = 'COMPENSATION_UNIT_UNSPECIFIED', )
                                    ], ), 
                            custom_attributes = {
                                'key' : openapi_client.models.custom_attribute.CustomAttribute(
                                    filterable = True, 
                                    long_values = [
                                        ''
                                        ], 
                                    string_values = [
                                        ''
                                        ], )
                                }, 
                            degree_types = [
                                'DEGREE_TYPE_UNSPECIFIED'
                                ], 
                            department = '', 
                            derived_info = openapi_client.models.job_derived_info.JobDerivedInfo(
                                job_categories = [
                                    'JOB_CATEGORY_UNSPECIFIED'
                                    ], 
                                locations = [
                                    openapi_client.models.location.Location(
                                        location_type = 'LOCATION_TYPE_UNSPECIFIED', 
                                        radius_in_miles = 1.337, )
                                    ], ), 
                            description = '', 
                            employment_types = [
                                'EMPLOYMENT_TYPE_UNSPECIFIED'
                                ], 
                            incentives = '', 
                            job_benefits = [
                                'JOB_BENEFIT_UNSPECIFIED'
                                ], 
                            job_end_time = '', 
                            job_level = 'JOB_LEVEL_UNSPECIFIED', 
                            job_start_time = '', 
                            language_code = '', 
                            name = '', 
                            posting_create_time = '', 
                            posting_expire_time = '', 
                            posting_publish_time = '', 
                            posting_region = 'POSTING_REGION_UNSPECIFIED', 
                            posting_update_time = '', 
                            processing_options = openapi_client.models.processing_options.ProcessingOptions(
                                disable_street_address_resolution = True, 
                                html_sanitization = 'HTML_SANITIZATION_UNSPECIFIED', ), 
                            promotion_value = 56, 
                            qualifications = '', 
                            requisition_id = '', 
                            responsibilities = '', 
                            title = '', 
                            visibility = 'VISIBILITY_UNSPECIFIED', ), 
                        job_summary = '', 
                        job_title_snippet = '', 
                        search_text_snippet = '', )
                    ],
                metadata = openapi_client.models.response_metadata.ResponseMetadata(
                    request_id = '', ),
                next_page_token = '',
                spell_correction = openapi_client.models.spelling_correction.SpellingCorrection(
                    corrected = True, 
                    corrected_text = '', ),
                total_size = 56
            )
        else:
            return SearchJobsResponse(
        )
        """

    def testSearchJobsResponse(self):
        """Test SearchJobsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

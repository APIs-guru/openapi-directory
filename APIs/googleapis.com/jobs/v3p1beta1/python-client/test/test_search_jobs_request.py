# coding: utf-8

"""
    Cloud Talent Solution API

    Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 

    The version of the OpenAPI document: v3p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.search_jobs_request import SearchJobsRequest

class TestSearchJobsRequest(unittest.TestCase):
    """SearchJobsRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchJobsRequest:
        """Test SearchJobsRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchJobsRequest`
        """
        model = SearchJobsRequest()
        if include_optional:
            return SearchJobsRequest(
                custom_ranking_info = openapi_client.models.custom_ranking_info.CustomRankingInfo(
                    importance_level = 'IMPORTANCE_LEVEL_UNSPECIFIED', 
                    ranking_expression = '', ),
                disable_keyword_match = True,
                diversification_level = 'DIVERSIFICATION_LEVEL_UNSPECIFIED',
                enable_broadening = True,
                histogram_facets = openapi_client.models.histogram_facets.HistogramFacets(
                    compensation_histogram_facets = [
                        openapi_client.models.compensation_histogram_request.CompensationHistogramRequest(
                            bucketing_option = openapi_client.models.numeric_bucketing_option.NumericBucketingOption(
                                bucket_bounds = [
                                    1.337
                                    ], 
                                requires_min_max = True, ), 
                            type = 'COMPENSATION_HISTOGRAM_REQUEST_TYPE_UNSPECIFIED', )
                        ], 
                    custom_attribute_histogram_facets = [
                        openapi_client.models.custom_attribute_histogram_request.CustomAttributeHistogramRequest(
                            key = '', 
                            long_value_histogram_bucketing_option = openapi_client.models.numeric_bucketing_option.NumericBucketingOption(
                                requires_min_max = True, ), 
                            string_value_histogram = True, )
                        ], 
                    simple_histogram_facets = [
                        'SEARCH_TYPE_UNSPECIFIED'
                        ], ),
                histogram_queries = [
                    openapi_client.models.histogram_query.HistogramQuery(
                        histogram_query = '', )
                    ],
                job_query = openapi_client.models.job_query.JobQuery(
                    commute_filter = openapi_client.models.commute_filter.CommuteFilter(
                        allow_imprecise_addresses = True, 
                        commute_method = 'COMMUTE_METHOD_UNSPECIFIED', 
                        departure_time = openapi_client.models.time_of_day.TimeOfDay(
                            hours = 56, 
                            minutes = 56, 
                            nanos = 56, 
                            seconds = 56, ), 
                        road_traffic = 'ROAD_TRAFFIC_UNSPECIFIED', 
                        start_coordinates = openapi_client.models.lat_lng.LatLng(
                            latitude = 1.337, 
                            longitude = 1.337, ), 
                        travel_duration = '', ), 
                    company_display_names = [
                        ''
                        ], 
                    company_names = [
                        ''
                        ], 
                    compensation_filter = openapi_client.models.compensation_filter.CompensationFilter(
                        include_jobs_with_unspecified_compensation_range = True, 
                        range = openapi_client.models.compensation_range.CompensationRange(
                            max_compensation = openapi_client.models.money.Money(
                                currency_code = '', 
                                nanos = 56, 
                                units = '', ), 
                            min_compensation = openapi_client.models.money.Money(
                                currency_code = '', 
                                nanos = 56, 
                                units = '', ), ), 
                        type = 'FILTER_TYPE_UNSPECIFIED', 
                        units = [
                            'COMPENSATION_UNIT_UNSPECIFIED'
                            ], ), 
                    custom_attribute_filter = '', 
                    disable_spell_check = True, 
                    employment_types = [
                        'EMPLOYMENT_TYPE_UNSPECIFIED'
                        ], 
                    excluded_jobs = [
                        ''
                        ], 
                    job_categories = [
                        'JOB_CATEGORY_UNSPECIFIED'
                        ], 
                    language_codes = [
                        ''
                        ], 
                    location_filters = [
                        openapi_client.models.location_filter.LocationFilter(
                            address = '', 
                            distance_in_miles = 1.337, 
                            lat_lng = openapi_client.models.lat_lng.LatLng(
                                latitude = 1.337, 
                                longitude = 1.337, ), 
                            region_code = '', 
                            telecommute_preference = 'TELECOMMUTE_PREFERENCE_UNSPECIFIED', )
                        ], 
                    publish_time_range = openapi_client.models.timestamp_range.TimestampRange(
                        end_time = '', 
                        start_time = '', ), 
                    query = '', 
                    query_language_code = '', ),
                job_view = 'JOB_VIEW_UNSPECIFIED',
                offset = 56,
                order_by = '',
                page_size = 56,
                page_token = '',
                request_metadata = openapi_client.models.request_metadata.RequestMetadata(
                    device_info = openapi_client.models.device_info.DeviceInfo(
                        device_type = 'DEVICE_TYPE_UNSPECIFIED', 
                        id = '', ), 
                    domain = '', 
                    session_id = '', 
                    user_id = '', ),
                require_precise_result_size = True,
                search_mode = 'SEARCH_MODE_UNSPECIFIED'
            )
        else:
            return SearchJobsRequest(
        )
        """

    def testSearchJobsRequest(self):
        """Test SearchJobsRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

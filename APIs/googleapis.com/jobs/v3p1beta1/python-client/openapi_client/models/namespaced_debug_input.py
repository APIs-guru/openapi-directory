# coding: utf-8

"""
    Cloud Talent Solution API

    Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 

    The version of the OpenAPI document: v3p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NamespacedDebugInput(BaseModel):
    """
    Next ID: 16
    """ # noqa: E501
    absolutely_forced_exp_names: Optional[List[StrictStr]] = Field(default=None, description="Set of experiment names to be absolutely forced. These experiments will be forced without evaluating the conditions.", alias="absolutelyForcedExpNames")
    absolutely_forced_exp_tags: Optional[List[StrictStr]] = Field(default=None, description="Set of experiment tags to be absolutely forced. The experiments with these tags will be forced without evaluating the conditions.", alias="absolutelyForcedExpTags")
    absolutely_forced_exps: Optional[List[StrictInt]] = Field(default=None, description="Set of experiment ids to be absolutely forced. These ids will be forced without evaluating the conditions.", alias="absolutelyForcedExps")
    conditionally_forced_exp_names: Optional[List[StrictStr]] = Field(default=None, description="Set of experiment names to be conditionally forced. These experiments will be forced only if their conditions and their parent domain's conditions are true.", alias="conditionallyForcedExpNames")
    conditionally_forced_exp_tags: Optional[List[StrictStr]] = Field(default=None, description="Set of experiment tags to be conditionally forced. The experiments with these tags will be forced only if their conditions and their parent domain's conditions are true.", alias="conditionallyForcedExpTags")
    conditionally_forced_exps: Optional[List[StrictInt]] = Field(default=None, description="Set of experiment ids to be conditionally forced. These ids will be forced only if their conditions and their parent domain's conditions are true.", alias="conditionallyForcedExps")
    disable_automatic_enrollment_selection: Optional[StrictBool] = Field(default=None, description="If true, disable automatic enrollment selection (at all diversion points). Automatic enrollment selection means experiment selection process based on the experiment's automatic enrollment condition. This does not disable selection of forced experiments. Setting this field to false does not change anything in the experiment selection process.", alias="disableAutomaticEnrollmentSelection")
    disable_exp_names: Optional[List[StrictStr]] = Field(default=None, description="Set of experiment names to be disabled. If an experiment is disabled, it is never selected nor forced. If an aggregate experiment is disabled, its partitions are disabled together. If an experiment with an enrollment is disabled, the enrollment is disabled together. If a name corresponds to a domain, the domain itself and all descendant experiments and domains are disabled together.", alias="disableExpNames")
    disable_exp_tags: Optional[List[StrictStr]] = Field(default=None, description="Set of experiment tags to be disabled. All experiments that are tagged with one or more of these tags are disabled. If an experiment is disabled, it is never selected nor forced. If an aggregate experiment is disabled, its partitions are disabled together. If an experiment with an enrollment is disabled, the enrollment is disabled together.", alias="disableExpTags")
    disable_exps: Optional[List[StrictInt]] = Field(default=None, description="Set of experiment ids to be disabled. If an experiment is disabled, it is never selected nor forced. If an aggregate experiment is disabled, its partitions are disabled together. If an experiment with an enrollment is disabled, the enrollment is disabled together. If an ID corresponds to a domain, the domain itself and all descendant experiments and domains are disabled together.", alias="disableExps")
    disable_manual_enrollment_selection: Optional[StrictBool] = Field(default=None, description="If true, disable manual enrollment selection (at all diversion points). Manual enrollment selection means experiment selection process based on the request's manual enrollment states (a.k.a. opt-in experiments). This does not disable selection of forced experiments. Setting this field to false does not change anything in the experiment selection process.", alias="disableManualEnrollmentSelection")
    disable_organic_selection: Optional[StrictBool] = Field(default=None, description="If true, disable organic experiment selection (at all diversion points). Organic selection means experiment selection process based on traffic allocation and diversion condition evaluation. This does not disable selection of forced experiments. This is useful in cases when it is not known whether experiment selection behavior is responsible for a error or breakage. Disabling organic selection may help to isolate the cause of a given problem. Setting this field to false does not change anything in the experiment selection process.", alias="disableOrganicSelection")
    forced_flags: Optional[Dict[str, StrictStr]] = Field(default=None, description="Flags to force in a particular experiment state. Map from flag name to flag value.", alias="forcedFlags")
    forced_rollouts: Optional[Dict[str, StrictBool]] = Field(default=None, description="Rollouts to force in a particular experiment state. Map from rollout name to rollout value.", alias="forcedRollouts")
    testing_mode: Optional[StrictStr] = Field(default=None, description="Sets different testing modes. See the documentation in the TestingMode message for more information.", alias="testingMode")
    __properties: ClassVar[List[str]] = ["absolutelyForcedExpNames", "absolutelyForcedExpTags", "absolutelyForcedExps", "conditionallyForcedExpNames", "conditionallyForcedExpTags", "conditionallyForcedExps", "disableAutomaticEnrollmentSelection", "disableExpNames", "disableExpTags", "disableExps", "disableManualEnrollmentSelection", "disableOrganicSelection", "forcedFlags", "forcedRollouts", "testingMode"]

    @field_validator('testing_mode')
    def testing_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TESTING_MODE_UNSPECIFIED', 'TESTING_MODE_ALL_OFF', 'TESTING_MODE_ALL_ON']):
            raise ValueError("must be one of enum values ('TESTING_MODE_UNSPECIFIED', 'TESTING_MODE_ALL_OFF', 'TESTING_MODE_ALL_ON')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NamespacedDebugInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NamespacedDebugInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "absolutelyForcedExpNames": obj.get("absolutelyForcedExpNames"),
            "absolutelyForcedExpTags": obj.get("absolutelyForcedExpTags"),
            "absolutelyForcedExps": obj.get("absolutelyForcedExps"),
            "conditionallyForcedExpNames": obj.get("conditionallyForcedExpNames"),
            "conditionallyForcedExpTags": obj.get("conditionallyForcedExpTags"),
            "conditionallyForcedExps": obj.get("conditionallyForcedExps"),
            "disableAutomaticEnrollmentSelection": obj.get("disableAutomaticEnrollmentSelection"),
            "disableExpNames": obj.get("disableExpNames"),
            "disableExpTags": obj.get("disableExpTags"),
            "disableExps": obj.get("disableExps"),
            "disableManualEnrollmentSelection": obj.get("disableManualEnrollmentSelection"),
            "disableOrganicSelection": obj.get("disableOrganicSelection"),
            "forcedFlags": obj.get("forcedFlags"),
            "forcedRollouts": obj.get("forcedRollouts"),
            "testingMode": obj.get("testingMode")
        })
        return _obj



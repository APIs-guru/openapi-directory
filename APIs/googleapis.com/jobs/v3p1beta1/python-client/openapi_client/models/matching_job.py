# coding: utf-8

"""
    Cloud Talent Solution API

    Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 

    The version of the OpenAPI document: v3p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.commute_info import CommuteInfo
from openapi_client.models.job import Job
from typing import Optional, Set
from typing_extensions import Self

class MatchingJob(BaseModel):
    """
    Output only. Job entry with metadata inside SearchJobsResponse.
    """ # noqa: E501
    commute_info: Optional[CommuteInfo] = Field(default=None, alias="commuteInfo")
    job: Optional[Job] = None
    job_summary: Optional[StrictStr] = Field(default=None, description="A summary of the job with core information that's displayed on the search results listing page.", alias="jobSummary")
    job_title_snippet: Optional[StrictStr] = Field(default=None, description="Contains snippets of text from the Job.job_title field most closely matching a search query's keywords, if available. The matching query keywords are enclosed in HTML bold tags.", alias="jobTitleSnippet")
    search_text_snippet: Optional[StrictStr] = Field(default=None, description="Contains snippets of text from the Job.description and similar fields that most closely match a search query's keywords, if available. All HTML tags in the original fields are stripped when returned in this field, and matching query keywords are enclosed in HTML bold tags.", alias="searchTextSnippet")
    __properties: ClassVar[List[str]] = ["commuteInfo", "job", "jobSummary", "jobTitleSnippet", "searchTextSnippet"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchingJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of commute_info
        if self.commute_info:
            _dict['commuteInfo'] = self.commute_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of job
        if self.job:
            _dict['job'] = self.job.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchingJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commuteInfo": CommuteInfo.from_dict(obj["commuteInfo"]) if obj.get("commuteInfo") is not None else None,
            "job": Job.from_dict(obj["job"]) if obj.get("job") is not None else None,
            "jobSummary": obj.get("jobSummary"),
            "jobTitleSnippet": obj.get("jobTitleSnippet"),
            "searchTextSnippet": obj.get("searchTextSnippet")
        })
        return _obj



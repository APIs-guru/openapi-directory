# coding: utf-8

"""
    Cloud Talent Solution API

    Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 

    The version of the OpenAPI document: v3p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.compensation_range import CompensationRange
from typing import Optional, Set
from typing_extensions import Self

class CompensationFilter(BaseModel):
    """
    Input only. Filter on job compensation type and amount.
    """ # noqa: E501
    include_jobs_with_unspecified_compensation_range: Optional[StrictBool] = Field(default=None, description="Optional. If set to true, jobs with unspecified compensation range fields are included.", alias="includeJobsWithUnspecifiedCompensationRange")
    range: Optional[CompensationRange] = None
    type: Optional[StrictStr] = Field(default=None, description="Required. Type of filter.")
    units: Optional[List[StrictStr]] = Field(default=None, description="Required. Specify desired `base compensation entry's` CompensationInfo.CompensationUnit.")
    __properties: ClassVar[List[str]] = ["includeJobsWithUnspecifiedCompensationRange", "range", "type", "units"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FILTER_TYPE_UNSPECIFIED', 'UNIT_ONLY', 'UNIT_AND_AMOUNT', 'ANNUALIZED_BASE_AMOUNT', 'ANNUALIZED_TOTAL_AMOUNT']):
            raise ValueError("must be one of enum values ('FILTER_TYPE_UNSPECIFIED', 'UNIT_ONLY', 'UNIT_AND_AMOUNT', 'ANNUALIZED_BASE_AMOUNT', 'ANNUALIZED_TOTAL_AMOUNT')")
        return value

    @field_validator('units')
    def units_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['COMPENSATION_UNIT_UNSPECIFIED', 'HOURLY', 'DAILY', 'WEEKLY', 'MONTHLY', 'YEARLY', 'ONE_TIME', 'OTHER_COMPENSATION_UNIT']):
                raise ValueError("each list item must be one of ('COMPENSATION_UNIT_UNSPECIFIED', 'HOURLY', 'DAILY', 'WEEKLY', 'MONTHLY', 'YEARLY', 'ONE_TIME', 'OTHER_COMPENSATION_UNIT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompensationFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of range
        if self.range:
            _dict['range'] = self.range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompensationFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "includeJobsWithUnspecifiedCompensationRange": obj.get("includeJobsWithUnspecifiedCompensationRange"),
            "range": CompensationRange.from_dict(obj["range"]) if obj.get("range") is not None else None,
            "type": obj.get("type"),
            "units": obj.get("units")
        })
        return _obj



# coding: utf-8

"""
    Cloud Talent Solution API

    Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 

    The version of the OpenAPI document: v3p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.company_derived_info import CompanyDerivedInfo
from typing import Optional, Set
from typing_extensions import Self

class Company(BaseModel):
    """
    A Company resource represents a company in the service. A company is the entity that owns job postings, that is, the hiring entity responsible for employing applicants for the job position.
    """ # noqa: E501
    career_site_uri: Optional[StrictStr] = Field(default=None, description="Optional. The URI to employer's career site or careers page on the employer's web site, for example, \"https://careers.google.com\".", alias="careerSiteUri")
    derived_info: Optional[CompanyDerivedInfo] = Field(default=None, alias="derivedInfo")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the company, for example, \"Google LLC\".", alias="displayName")
    eeo_text: Optional[StrictStr] = Field(default=None, description="Optional. Equal Employment Opportunity legal disclaimer text to be associated with all jobs, and typically to be displayed in all roles. The maximum number of allowed characters is 500.", alias="eeoText")
    external_id: Optional[StrictStr] = Field(default=None, description="Required. Client side company identifier, used to uniquely identify the company. The maximum number of allowed characters is 255.", alias="externalId")
    headquarters_address: Optional[StrictStr] = Field(default=None, description="Optional. The street address of the company's main headquarters, which may be different from the job location. The service attempts to geolocate the provided address, and populates a more specific location wherever possible in DerivedInfo.headquarters_location.", alias="headquartersAddress")
    hiring_agency: Optional[StrictBool] = Field(default=None, description="Optional. Set to true if it is the hiring agency that post jobs for other employers. Defaults to false if not provided.", alias="hiringAgency")
    image_uri: Optional[StrictStr] = Field(default=None, description="Optional. A URI that hosts the employer's company logo.", alias="imageUri")
    keyword_searchable_job_custom_attributes: Optional[List[StrictStr]] = Field(default=None, description="Optional. This field is deprecated. Please set the searchability of the custom attribute in the Job.custom_attributes going forward. A list of keys of filterable Job.custom_attributes, whose corresponding `string_values` are used in keyword search. Jobs with `string_values` under these specified field keys are returned if any of the values matches the search keyword. Custom field values with parenthesis, brackets and special symbols won't be properly searchable, and those keyword queries need to be surrounded by quotes.", alias="keywordSearchableJobCustomAttributes")
    name: Optional[StrictStr] = Field(default=None, description="Required during company update. The resource name for a company. This is generated by the service when a company is created. The format is \"projects/{project_id}/companies/{company_id}\", for example, \"projects/api-test-project/companies/foo\".")
    size: Optional[StrictStr] = Field(default=None, description="Optional. The employer's company size.")
    suspended: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether a company is flagged to be suspended from public availability by the service when job content appears suspicious, abusive, or spammy.")
    website_uri: Optional[StrictStr] = Field(default=None, description="Optional. The URI representing the company's primary web site or home page, for example, \"https://www.google.com\". The maximum number of allowed characters is 255.", alias="websiteUri")
    __properties: ClassVar[List[str]] = ["careerSiteUri", "derivedInfo", "displayName", "eeoText", "externalId", "headquartersAddress", "hiringAgency", "imageUri", "keywordSearchableJobCustomAttributes", "name", "size", "suspended", "websiteUri"]

    @field_validator('size')
    def size_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPANY_SIZE_UNSPECIFIED', 'MINI', 'SMALL', 'SMEDIUM', 'MEDIUM', 'BIG', 'BIGGER', 'GIANT']):
            raise ValueError("must be one of enum values ('COMPANY_SIZE_UNSPECIFIED', 'MINI', 'SMALL', 'SMEDIUM', 'MEDIUM', 'BIG', 'BIGGER', 'GIANT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Company from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of derived_info
        if self.derived_info:
            _dict['derivedInfo'] = self.derived_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Company from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "careerSiteUri": obj.get("careerSiteUri"),
            "derivedInfo": CompanyDerivedInfo.from_dict(obj["derivedInfo"]) if obj.get("derivedInfo") is not None else None,
            "displayName": obj.get("displayName"),
            "eeoText": obj.get("eeoText"),
            "externalId": obj.get("externalId"),
            "headquartersAddress": obj.get("headquartersAddress"),
            "hiringAgency": obj.get("hiringAgency"),
            "imageUri": obj.get("imageUri"),
            "keywordSearchableJobCustomAttributes": obj.get("keywordSearchableJobCustomAttributes"),
            "name": obj.get("name"),
            "size": obj.get("size"),
            "suspended": obj.get("suspended"),
            "websiteUri": obj.get("websiteUri")
        })
        return _obj



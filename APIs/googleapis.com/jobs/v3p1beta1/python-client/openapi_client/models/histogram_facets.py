# coding: utf-8

"""
    Cloud Talent Solution API

    Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 

    The version of the OpenAPI document: v3p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.compensation_histogram_request import CompensationHistogramRequest
from openapi_client.models.custom_attribute_histogram_request import CustomAttributeHistogramRequest
from typing import Optional, Set
from typing_extensions import Self

class HistogramFacets(BaseModel):
    """
    Input only. Histogram facets to be specified in SearchJobsRequest.
    """ # noqa: E501
    compensation_histogram_facets: Optional[List[CompensationHistogramRequest]] = Field(default=None, description="Optional. Specifies compensation field-based histogram requests. Duplicate values of CompensationHistogramRequest.type are not allowed.", alias="compensationHistogramFacets")
    custom_attribute_histogram_facets: Optional[List[CustomAttributeHistogramRequest]] = Field(default=None, description="Optional. Specifies the custom attributes histogram requests. Duplicate values of CustomAttributeHistogramRequest.key are not allowed.", alias="customAttributeHistogramFacets")
    simple_histogram_facets: Optional[List[StrictStr]] = Field(default=None, description="Optional. Specifies the simple type of histogram facets, for example, `COMPANY_SIZE`, `EMPLOYMENT_TYPE` etc.", alias="simpleHistogramFacets")
    __properties: ClassVar[List[str]] = ["compensationHistogramFacets", "customAttributeHistogramFacets", "simpleHistogramFacets"]

    @field_validator('simple_histogram_facets')
    def simple_histogram_facets_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['SEARCH_TYPE_UNSPECIFIED', 'COMPANY_ID', 'EMPLOYMENT_TYPE', 'COMPANY_SIZE', 'DATE_PUBLISHED', 'EDUCATION_LEVEL', 'EXPERIENCE_LEVEL', 'ADMIN_1', 'COUNTRY', 'CITY', 'LOCALE', 'LANGUAGE', 'CATEGORY', 'CITY_COORDINATE', 'ADMIN_1_COUNTRY', 'COMPANY_DISPLAY_NAME', 'BASE_COMPENSATION_UNIT']):
                raise ValueError("each list item must be one of ('SEARCH_TYPE_UNSPECIFIED', 'COMPANY_ID', 'EMPLOYMENT_TYPE', 'COMPANY_SIZE', 'DATE_PUBLISHED', 'EDUCATION_LEVEL', 'EXPERIENCE_LEVEL', 'ADMIN_1', 'COUNTRY', 'CITY', 'LOCALE', 'LANGUAGE', 'CATEGORY', 'CITY_COORDINATE', 'ADMIN_1_COUNTRY', 'COMPANY_DISPLAY_NAME', 'BASE_COMPENSATION_UNIT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HistogramFacets from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in compensation_histogram_facets (list)
        _items = []
        if self.compensation_histogram_facets:
            for _item_compensation_histogram_facets in self.compensation_histogram_facets:
                if _item_compensation_histogram_facets:
                    _items.append(_item_compensation_histogram_facets.to_dict())
            _dict['compensationHistogramFacets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_attribute_histogram_facets (list)
        _items = []
        if self.custom_attribute_histogram_facets:
            for _item_custom_attribute_histogram_facets in self.custom_attribute_histogram_facets:
                if _item_custom_attribute_histogram_facets:
                    _items.append(_item_custom_attribute_histogram_facets.to_dict())
            _dict['customAttributeHistogramFacets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HistogramFacets from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "compensationHistogramFacets": [CompensationHistogramRequest.from_dict(_item) for _item in obj["compensationHistogramFacets"]] if obj.get("compensationHistogramFacets") is not None else None,
            "customAttributeHistogramFacets": [CustomAttributeHistogramRequest.from_dict(_item) for _item in obj["customAttributeHistogramFacets"]] if obj.get("customAttributeHistogramFacets") is not None else None,
            "simpleHistogramFacets": obj.get("simpleHistogramFacets")
        })
        return _obj



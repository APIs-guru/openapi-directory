# coding: utf-8

"""
    Cloud Talent Solution API

    Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 

    The version of the OpenAPI document: v3p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HistogramResult(BaseModel):
    """
    Output only. Result of a histogram call. The response contains the histogram map for the search type specified by HistogramResult.field. The response is a map of each filter value to the corresponding count of jobs for that filter.
    """ # noqa: E501
    search_type: Optional[StrictStr] = Field(default=None, description="The Histogram search filters.", alias="searchType")
    values: Optional[Dict[str, StrictInt]] = Field(default=None, description="A map from the values of field to the number of jobs with that value in this search result. Key: search type (filter names, such as the companyName). Values: the count of jobs that match the filter for this search.")
    __properties: ClassVar[List[str]] = ["searchType", "values"]

    @field_validator('search_type')
    def search_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEARCH_TYPE_UNSPECIFIED', 'COMPANY_ID', 'EMPLOYMENT_TYPE', 'COMPANY_SIZE', 'DATE_PUBLISHED', 'EDUCATION_LEVEL', 'EXPERIENCE_LEVEL', 'ADMIN_1', 'COUNTRY', 'CITY', 'LOCALE', 'LANGUAGE', 'CATEGORY', 'CITY_COORDINATE', 'ADMIN_1_COUNTRY', 'COMPANY_DISPLAY_NAME', 'BASE_COMPENSATION_UNIT']):
            raise ValueError("must be one of enum values ('SEARCH_TYPE_UNSPECIFIED', 'COMPANY_ID', 'EMPLOYMENT_TYPE', 'COMPANY_SIZE', 'DATE_PUBLISHED', 'EDUCATION_LEVEL', 'EXPERIENCE_LEVEL', 'ADMIN_1', 'COUNTRY', 'CITY', 'LOCALE', 'LANGUAGE', 'CATEGORY', 'CITY_COORDINATE', 'ADMIN_1_COUNTRY', 'COMPANY_DISPLAY_NAME', 'BASE_COMPENSATION_UNIT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HistogramResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HistogramResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "searchType": obj.get("searchType"),
            "values": obj.get("values")
        })
        return _obj



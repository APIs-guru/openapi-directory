# coding: utf-8

"""
    Cloud Talent Solution API

    Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 

    The version of the OpenAPI document: v3p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.lat_lng import LatLng
from typing import Optional, Set
from typing_extensions import Self

class LocationFilter(BaseModel):
    """
    Input only. Geographic region of the search.
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="Optional. The address name, such as \"Mountain View\" or \"Bay Area\".")
    distance_in_miles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. The distance_in_miles is applied when the location being searched for is identified as a city or smaller. When the location being searched for is a state or larger, this field is ignored.", alias="distanceInMiles")
    lat_lng: Optional[LatLng] = Field(default=None, alias="latLng")
    region_code: Optional[StrictStr] = Field(default=None, description="Optional. CLDR region code of the country/region. This field may be used in two ways: 1) If telecommute preference is not set, this field is used address ambiguity of the user-input address. For example, \"Liverpool\" may refer to \"Liverpool, NY, US\" or \"Liverpool, UK\". This region code biases the address resolution toward a specific country or territory. If this field is not set, address resolution is biased toward the United States by default. 2) If telecommute preference is set to TELECOMMUTE_ALLOWED, the telecommute location filter will be limited to the region specified in this field. If this field is not set, the telecommute job locations will not be limited. See https://unicode-org.github.io/cldr-staging/charts/latest/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland.", alias="regionCode")
    telecommute_preference: Optional[StrictStr] = Field(default=None, description="Optional. Allows the client to return jobs without a set location, specifically, telecommuting jobs (telecommuting is considered by the service as a special location). Job.posting_region indicates if a job permits telecommuting. If this field is set to TelecommutePreference.TELECOMMUTE_ALLOWED, telecommuting jobs are searched, and address and lat_lng are ignored. If not set or set to TelecommutePreference.TELECOMMUTE_EXCLUDED, the telecommute status of the jobs is ignored. Jobs that have PostingRegion.TELECOMMUTE and have additional Job.addresses may still be matched based on other location filters using address or latlng. This filter can be used by itself to search exclusively for telecommuting jobs, or it can be combined with another location filter to search for a combination of job locations, such as \"Mountain View\" or \"telecommuting\" jobs. However, when used in combination with other location filters, telecommuting jobs can be treated as less relevant than other jobs in the search response.", alias="telecommutePreference")
    __properties: ClassVar[List[str]] = ["address", "distanceInMiles", "latLng", "regionCode", "telecommutePreference"]

    @field_validator('telecommute_preference')
    def telecommute_preference_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TELECOMMUTE_PREFERENCE_UNSPECIFIED', 'TELECOMMUTE_EXCLUDED', 'TELECOMMUTE_ALLOWED', 'TELECOMMUTE_JOBS_EXCLUDED']):
            raise ValueError("must be one of enum values ('TELECOMMUTE_PREFERENCE_UNSPECIFIED', 'TELECOMMUTE_EXCLUDED', 'TELECOMMUTE_ALLOWED', 'TELECOMMUTE_JOBS_EXCLUDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LocationFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of lat_lng
        if self.lat_lng:
            _dict['latLng'] = self.lat_lng.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LocationFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "distanceInMiles": obj.get("distanceInMiles"),
            "latLng": LatLng.from_dict(obj["latLng"]) if obj.get("latLng") is not None else None,
            "regionCode": obj.get("regionCode"),
            "telecommutePreference": obj.get("telecommutePreference")
        })
        return _obj



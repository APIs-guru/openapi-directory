# coding: utf-8

"""
    Cloud Talent Solution API

    Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 

    The version of the OpenAPI document: v3p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.job_event import JobEvent
from typing import Optional, Set
from typing_extensions import Self

class ClientEvent(BaseModel):
    """
    An event issued when an end user interacts with the application that implements Cloud Talent Solution. Providing this information improves the quality of search and recommendation for the API clients, enabling the service to perform optimally. The number of events sent must be consistent with other calls, such as job searches, issued to the service by the client.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Required. The timestamp of the event.", alias="createTime")
    event_id: Optional[StrictStr] = Field(default=None, description="Required. A unique identifier, generated by the client application. This `event_id` is used to establish the relationship between different events (see parent_event_id).", alias="eventId")
    extra_info: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Extra information about this event. Used for storing information with no matching field in event payload, for example, user application specific context or details. At most 20 keys are supported. The maximum total size of all keys and values is 2 KB.", alias="extraInfo")
    job_event: Optional[JobEvent] = Field(default=None, alias="jobEvent")
    parent_event_id: Optional[StrictStr] = Field(default=None, description="Optional. The event_id of an event that resulted in the current event. For example, a Job view event usually follows a parent impression event: A job seeker first does a search where a list of jobs appears (impression). The job seeker then selects a result and views the description of a particular job (Job view).", alias="parentEventId")
    request_id: Optional[StrictStr] = Field(default=None, description="Required. A unique ID generated in the API responses. It can be found in ResponseMetadata.request_id.", alias="requestId")
    __properties: ClassVar[List[str]] = ["createTime", "eventId", "extraInfo", "jobEvent", "parentEventId", "requestId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of job_event
        if self.job_event:
            _dict['jobEvent'] = self.job_event.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "eventId": obj.get("eventId"),
            "extraInfo": obj.get("extraInfo"),
            "jobEvent": JobEvent.from_dict(obj["jobEvent"]) if obj.get("jobEvent") is not None else None,
            "parentEventId": obj.get("parentEventId"),
            "requestId": obj.get("requestId")
        })
        return _obj



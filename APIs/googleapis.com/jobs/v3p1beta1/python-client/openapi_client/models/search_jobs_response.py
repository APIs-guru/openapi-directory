# coding: utf-8

"""
    Cloud Talent Solution API

    Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 

    The version of the OpenAPI document: v3p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.histogram_query_result import HistogramQueryResult
from openapi_client.models.histogram_results import HistogramResults
from openapi_client.models.location import Location
from openapi_client.models.matching_job import MatchingJob
from openapi_client.models.response_metadata import ResponseMetadata
from openapi_client.models.spelling_correction import SpellingCorrection
from typing import Optional, Set
from typing_extensions import Self

class SearchJobsResponse(BaseModel):
    """
    Output only. Response for SearchJob method.
    """ # noqa: E501
    broadened_query_jobs_count: Optional[StrictInt] = Field(default=None, description="If query broadening is enabled, we may append additional results from the broadened query. This number indicates how many of the jobs returned in the jobs field are from the broadened query. These results are always at the end of the jobs list. In particular, a value of 0, or if the field isn't set, all the jobs in the jobs list are from the original (without broadening) query. If this field is non-zero, subsequent requests with offset after this result set should contain all broadened results.", alias="broadenedQueryJobsCount")
    estimated_total_size: Optional[StrictInt] = Field(default=None, description="An estimation of the number of jobs that match the specified query. This number is not guaranteed to be accurate. For accurate results, see SearchJobsResponse.total_size.", alias="estimatedTotalSize")
    histogram_query_results: Optional[List[HistogramQueryResult]] = Field(default=None, description="The histogram results that match with specified SearchJobsRequest.histogram_queries.", alias="histogramQueryResults")
    histogram_results: Optional[HistogramResults] = Field(default=None, alias="histogramResults")
    location_filters: Optional[List[Location]] = Field(default=None, description="The location filters that the service applied to the specified query. If any filters are lat-lng based, the JobLocation.location_type is JobLocation.LocationType#LOCATION_TYPE_UNSPECIFIED.", alias="locationFilters")
    matching_jobs: Optional[List[MatchingJob]] = Field(default=None, description="The Job entities that match the specified SearchJobsRequest.", alias="matchingJobs")
    metadata: Optional[ResponseMetadata] = None
    next_page_token: Optional[StrictStr] = Field(default=None, description="The token that specifies the starting position of the next page of results. This field is empty if there are no more results.", alias="nextPageToken")
    spell_correction: Optional[SpellingCorrection] = Field(default=None, alias="spellCorrection")
    total_size: Optional[StrictInt] = Field(default=None, description="The precise result count with limit 100,000.", alias="totalSize")
    __properties: ClassVar[List[str]] = ["broadenedQueryJobsCount", "estimatedTotalSize", "histogramQueryResults", "histogramResults", "locationFilters", "matchingJobs", "metadata", "nextPageToken", "spellCorrection", "totalSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchJobsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in histogram_query_results (list)
        _items = []
        if self.histogram_query_results:
            for _item_histogram_query_results in self.histogram_query_results:
                if _item_histogram_query_results:
                    _items.append(_item_histogram_query_results.to_dict())
            _dict['histogramQueryResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of histogram_results
        if self.histogram_results:
            _dict['histogramResults'] = self.histogram_results.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in location_filters (list)
        _items = []
        if self.location_filters:
            for _item_location_filters in self.location_filters:
                if _item_location_filters:
                    _items.append(_item_location_filters.to_dict())
            _dict['locationFilters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in matching_jobs (list)
        _items = []
        if self.matching_jobs:
            for _item_matching_jobs in self.matching_jobs:
                if _item_matching_jobs:
                    _items.append(_item_matching_jobs.to_dict())
            _dict['matchingJobs'] = _items
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spell_correction
        if self.spell_correction:
            _dict['spellCorrection'] = self.spell_correction.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchJobsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "broadenedQueryJobsCount": obj.get("broadenedQueryJobsCount"),
            "estimatedTotalSize": obj.get("estimatedTotalSize"),
            "histogramQueryResults": [HistogramQueryResult.from_dict(_item) for _item in obj["histogramQueryResults"]] if obj.get("histogramQueryResults") is not None else None,
            "histogramResults": HistogramResults.from_dict(obj["histogramResults"]) if obj.get("histogramResults") is not None else None,
            "locationFilters": [Location.from_dict(_item) for _item in obj["locationFilters"]] if obj.get("locationFilters") is not None else None,
            "matchingJobs": [MatchingJob.from_dict(_item) for _item in obj["matchingJobs"]] if obj.get("matchingJobs") is not None else None,
            "metadata": ResponseMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "nextPageToken": obj.get("nextPageToken"),
            "spellCorrection": SpellingCorrection.from_dict(obj["spellCorrection"]) if obj.get("spellCorrection") is not None else None,
            "totalSize": obj.get("totalSize")
        })
        return _obj



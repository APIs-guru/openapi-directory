# coding: utf-8

"""
    Cloud Talent Solution API

    Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 

    The version of the OpenAPI document: v3p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class JobEvent(BaseModel):
    """
    An event issued when a job seeker interacts with the application that implements Cloud Talent Solution.
    """ # noqa: E501
    jobs: Optional[List[StrictStr]] = Field(default=None, description="Required. The job name(s) associated with this event. For example, if this is an impression event, this field contains the identifiers of all jobs shown to the job seeker. If this was a view event, this field contains the identifier of the viewed job.")
    type: Optional[StrictStr] = Field(default=None, description="Required. The type of the event (see JobEventType).")
    __properties: ClassVar[List[str]] = ["jobs", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['JOB_EVENT_TYPE_UNSPECIFIED', 'IMPRESSION', 'VIEW', 'VIEW_REDIRECT', 'APPLICATION_START', 'APPLICATION_FINISH', 'APPLICATION_QUICK_SUBMISSION', 'APPLICATION_REDIRECT', 'APPLICATION_START_FROM_SEARCH', 'APPLICATION_REDIRECT_FROM_SEARCH', 'APPLICATION_COMPANY_SUBMIT', 'BOOKMARK', 'NOTIFICATION', 'HIRED', 'SENT_CV', 'INTERVIEW_GRANTED', 'NOT_INTERESTED']):
            raise ValueError("must be one of enum values ('JOB_EVENT_TYPE_UNSPECIFIED', 'IMPRESSION', 'VIEW', 'VIEW_REDIRECT', 'APPLICATION_START', 'APPLICATION_FINISH', 'APPLICATION_QUICK_SUBMISSION', 'APPLICATION_REDIRECT', 'APPLICATION_START_FROM_SEARCH', 'APPLICATION_REDIRECT_FROM_SEARCH', 'APPLICATION_COMPANY_SUBMIT', 'BOOKMARK', 'NOTIFICATION', 'HIRED', 'SENT_CV', 'INTERVIEW_GRANTED', 'NOT_INTERESTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "jobs": obj.get("jobs"),
            "type": obj.get("type")
        })
        return _obj



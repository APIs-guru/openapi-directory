# coding: utf-8

"""
    Cloud Talent Solution API

    Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 

    The version of the OpenAPI document: v3p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.numeric_bucketing_result import NumericBucketingResult
from typing import Optional, Set
from typing_extensions import Self

class CustomAttributeHistogramResult(BaseModel):
    """
    Output only. Custom attribute histogram result.
    """ # noqa: E501
    key: Optional[StrictStr] = Field(default=None, description="Stores the key of custom attribute the histogram is performed on.")
    long_value_histogram_result: Optional[NumericBucketingResult] = Field(default=None, alias="longValueHistogramResult")
    string_value_histogram_result: Optional[Dict[str, StrictInt]] = Field(default=None, description="Stores a map from the values of string custom field associated with `key` to the number of jobs with that value in this histogram result.", alias="stringValueHistogramResult")
    __properties: ClassVar[List[str]] = ["key", "longValueHistogramResult", "stringValueHistogramResult"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomAttributeHistogramResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of long_value_histogram_result
        if self.long_value_histogram_result:
            _dict['longValueHistogramResult'] = self.long_value_histogram_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomAttributeHistogramResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key": obj.get("key"),
            "longValueHistogramResult": NumericBucketingResult.from_dict(obj["longValueHistogramResult"]) if obj.get("longValueHistogramResult") is not None else None,
            "stringValueHistogramResult": obj.get("stringValueHistogramResult")
        })
        return _obj



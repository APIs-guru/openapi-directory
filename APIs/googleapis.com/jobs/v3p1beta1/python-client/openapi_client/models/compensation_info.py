# coding: utf-8

"""
    Cloud Talent Solution API

    Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 

    The version of the OpenAPI document: v3p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.compensation_entry import CompensationEntry
from openapi_client.models.compensation_range import CompensationRange
from typing import Optional, Set
from typing_extensions import Self

class CompensationInfo(BaseModel):
    """
    Job compensation details.
    """ # noqa: E501
    annualized_base_compensation_range: Optional[CompensationRange] = Field(default=None, alias="annualizedBaseCompensationRange")
    annualized_total_compensation_range: Optional[CompensationRange] = Field(default=None, alias="annualizedTotalCompensationRange")
    entries: Optional[List[CompensationEntry]] = Field(default=None, description="Optional. Job compensation information. At most one entry can be of type CompensationInfo.CompensationType.BASE, which is referred as ** base compensation entry ** for the job.")
    __properties: ClassVar[List[str]] = ["annualizedBaseCompensationRange", "annualizedTotalCompensationRange", "entries"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompensationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of annualized_base_compensation_range
        if self.annualized_base_compensation_range:
            _dict['annualizedBaseCompensationRange'] = self.annualized_base_compensation_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of annualized_total_compensation_range
        if self.annualized_total_compensation_range:
            _dict['annualizedTotalCompensationRange'] = self.annualized_total_compensation_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in entries (list)
        _items = []
        if self.entries:
            for _item_entries in self.entries:
                if _item_entries:
                    _items.append(_item_entries.to_dict())
            _dict['entries'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompensationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annualizedBaseCompensationRange": CompensationRange.from_dict(obj["annualizedBaseCompensationRange"]) if obj.get("annualizedBaseCompensationRange") is not None else None,
            "annualizedTotalCompensationRange": CompensationRange.from_dict(obj["annualizedTotalCompensationRange"]) if obj.get("annualizedTotalCompensationRange") is not None else None,
            "entries": [CompensationEntry.from_dict(_item) for _item in obj["entries"]] if obj.get("entries") is not None else None
        })
        return _obj



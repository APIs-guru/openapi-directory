# coding: utf-8

"""
    Cloud Talent Solution API

    Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 

    The version of the OpenAPI document: v3p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.lat_lng import LatLng
from openapi_client.models.time_of_day import TimeOfDay
from typing import Optional, Set
from typing_extensions import Self

class CommuteFilter(BaseModel):
    """
    Input only. Parameters needed for commute search.
    """ # noqa: E501
    allow_imprecise_addresses: Optional[StrictBool] = Field(default=None, description="Optional. If true, jobs without \"precise\" addresses (street level addresses or GPS coordinates) might also be returned. For city and coarser level addresses, text matching is used. If this field is set to false or is not specified, only jobs that include precise addresses are returned by Commute Search. Note: If `allow_imprecise_addresses` is set to true, Commute Search is not able to calculate accurate commute times to jobs with city level and coarser address information. Jobs with imprecise addresses will return a `travel_duration` time of 0 regardless of distance from the job seeker.", alias="allowImpreciseAddresses")
    commute_method: Optional[StrictStr] = Field(default=None, description="Required. The method of transportation for which to calculate the commute time.", alias="commuteMethod")
    departure_time: Optional[TimeOfDay] = Field(default=None, alias="departureTime")
    road_traffic: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the traffic density to use when calculating commute time.", alias="roadTraffic")
    start_coordinates: Optional[LatLng] = Field(default=None, alias="startCoordinates")
    travel_duration: Optional[StrictStr] = Field(default=None, description="Required. The maximum travel time in seconds. The maximum allowed value is `3600s` (one hour). Format is `123s`.", alias="travelDuration")
    __properties: ClassVar[List[str]] = ["allowImpreciseAddresses", "commuteMethod", "departureTime", "roadTraffic", "startCoordinates", "travelDuration"]

    @field_validator('commute_method')
    def commute_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMMUTE_METHOD_UNSPECIFIED', 'DRIVING', 'TRANSIT', 'WALKING', 'CYCLING']):
            raise ValueError("must be one of enum values ('COMMUTE_METHOD_UNSPECIFIED', 'DRIVING', 'TRANSIT', 'WALKING', 'CYCLING')")
        return value

    @field_validator('road_traffic')
    def road_traffic_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ROAD_TRAFFIC_UNSPECIFIED', 'TRAFFIC_FREE', 'BUSY_HOUR']):
            raise ValueError("must be one of enum values ('ROAD_TRAFFIC_UNSPECIFIED', 'TRAFFIC_FREE', 'BUSY_HOUR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommuteFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of departure_time
        if self.departure_time:
            _dict['departureTime'] = self.departure_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_coordinates
        if self.start_coordinates:
            _dict['startCoordinates'] = self.start_coordinates.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommuteFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowImpreciseAddresses": obj.get("allowImpreciseAddresses"),
            "commuteMethod": obj.get("commuteMethod"),
            "departureTime": TimeOfDay.from_dict(obj["departureTime"]) if obj.get("departureTime") is not None else None,
            "roadTraffic": obj.get("roadTraffic"),
            "startCoordinates": LatLng.from_dict(obj["startCoordinates"]) if obj.get("startCoordinates") is not None else None,
            "travelDuration": obj.get("travelDuration")
        })
        return _obj



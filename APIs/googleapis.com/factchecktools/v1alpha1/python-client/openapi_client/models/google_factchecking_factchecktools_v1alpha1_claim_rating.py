# coding: utf-8

"""
    Fact Check Tools API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating(BaseModel):
    """
    Information about the claim rating.
    """ # noqa: E501
    best_rating: Optional[StrictInt] = Field(default=None, description="For numeric ratings, the best value possible in the scale from worst to best. Corresponds to `ClaimReview.reviewRating.bestRating`.", alias="bestRating")
    image_url: Optional[StrictStr] = Field(default=None, description="Corresponds to `ClaimReview.reviewRating.image`.", alias="imageUrl")
    rating_explanation: Optional[StrictStr] = Field(default=None, description="Corresponds to `ClaimReview.reviewRating.ratingExplanation`.", alias="ratingExplanation")
    rating_value: Optional[StrictInt] = Field(default=None, description="A numeric rating of this claim, in the range worstRating â€” bestRating inclusive. Corresponds to `ClaimReview.reviewRating.ratingValue`.", alias="ratingValue")
    textual_rating: Optional[StrictStr] = Field(default=None, description="The truthfulness rating as a human-readible short word or phrase. Corresponds to `ClaimReview.reviewRating.alternateName`.", alias="textualRating")
    worst_rating: Optional[StrictInt] = Field(default=None, description="For numeric ratings, the worst value possible in the scale from worst to best. Corresponds to `ClaimReview.reviewRating.worstRating`.", alias="worstRating")
    __properties: ClassVar[List[str]] = ["bestRating", "imageUrl", "ratingExplanation", "ratingValue", "textualRating", "worstRating"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bestRating": obj.get("bestRating"),
            "imageUrl": obj.get("imageUrl"),
            "ratingExplanation": obj.get("ratingExplanation"),
            "ratingValue": obj.get("ratingValue"),
            "textualRating": obj.get("textualRating"),
            "worstRating": obj.get("worstRating")
        })
        return _obj



# coding: utf-8

"""
    Fact Check Tools API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_factchecking_factchecktools_v1alpha1_claim_author import GoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor
from openapi_client.models.google_factchecking_factchecktools_v1alpha1_claim_rating import GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating
from typing import Optional, Set
from typing_extensions import Self

class GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup(BaseModel):
    """
    Fields for an individual `ClaimReview` element. Except for sub-messages that group fields together, each of these fields correspond those in https://schema.org/ClaimReview. We list the precise mapping for each field.
    """ # noqa: E501
    claim_appearances: Optional[List[StrictStr]] = Field(default=None, description="A list of links to works in which this claim appears, aside from the one specified in `claim_first_appearance`. Corresponds to `ClaimReview.itemReviewed[@type=Claim].appearance.url`.", alias="claimAppearances")
    claim_author: Optional[GoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor] = Field(default=None, alias="claimAuthor")
    claim_date: Optional[StrictStr] = Field(default=None, description="The date when the claim was made or entered public discourse. Corresponds to `ClaimReview.itemReviewed.datePublished`.", alias="claimDate")
    claim_first_appearance: Optional[StrictStr] = Field(default=None, description="A link to a work in which this claim first appears. Corresponds to `ClaimReview.itemReviewed[@type=Claim].firstAppearance.url`.", alias="claimFirstAppearance")
    claim_location: Optional[StrictStr] = Field(default=None, description="The location where this claim was made. Corresponds to `ClaimReview.itemReviewed.name`.", alias="claimLocation")
    claim_reviewed: Optional[StrictStr] = Field(default=None, description="A short summary of the claim being evaluated. Corresponds to `ClaimReview.claimReviewed`.", alias="claimReviewed")
    rating: Optional[GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating] = None
    url: Optional[StrictStr] = Field(default=None, description="This field is optional, and will default to the page URL. We provide this field to allow you the override the default value, but the only permitted override is the page URL plus an optional anchor link (\"page jump\"). Corresponds to `ClaimReview.url`")
    __properties: ClassVar[List[str]] = ["claimAppearances", "claimAuthor", "claimDate", "claimFirstAppearance", "claimLocation", "claimReviewed", "rating", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of claim_author
        if self.claim_author:
            _dict['claimAuthor'] = self.claim_author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rating
        if self.rating:
            _dict['rating'] = self.rating.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "claimAppearances": obj.get("claimAppearances"),
            "claimAuthor": GoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor.from_dict(obj["claimAuthor"]) if obj.get("claimAuthor") is not None else None,
            "claimDate": obj.get("claimDate"),
            "claimFirstAppearance": obj.get("claimFirstAppearance"),
            "claimLocation": obj.get("claimLocation"),
            "claimReviewed": obj.get("claimReviewed"),
            "rating": GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating.from_dict(obj["rating"]) if obj.get("rating") is not None else None,
            "url": obj.get("url")
        })
        return _obj



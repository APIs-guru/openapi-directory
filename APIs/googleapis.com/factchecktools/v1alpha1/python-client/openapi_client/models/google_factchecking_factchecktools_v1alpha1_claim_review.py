# coding: utf-8

"""
    Fact Check Tools API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_factchecking_factchecktools_v1alpha1_publisher import GoogleFactcheckingFactchecktoolsV1alpha1Publisher
from typing import Optional, Set
from typing_extensions import Self

class GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview(BaseModel):
    """
    Information about a claim review.
    """ # noqa: E501
    language_code: Optional[StrictStr] = Field(default=None, description="The language this review was written in. For instance, \"en\" or \"de\".", alias="languageCode")
    publisher: Optional[GoogleFactcheckingFactchecktoolsV1alpha1Publisher] = None
    review_date: Optional[StrictStr] = Field(default=None, description="The date the claim was reviewed.", alias="reviewDate")
    textual_rating: Optional[StrictStr] = Field(default=None, description="Textual rating. For instance, \"Mostly false\".", alias="textualRating")
    title: Optional[StrictStr] = Field(default=None, description="The title of this claim review, if it can be determined.")
    url: Optional[StrictStr] = Field(default=None, description="The URL of this claim review.")
    __properties: ClassVar[List[str]] = ["languageCode", "publisher", "reviewDate", "textualRating", "title", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of publisher
        if self.publisher:
            _dict['publisher'] = self.publisher.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "languageCode": obj.get("languageCode"),
            "publisher": GoogleFactcheckingFactchecktoolsV1alpha1Publisher.from_dict(obj["publisher"]) if obj.get("publisher") is not None else None,
            "reviewDate": obj.get("reviewDate"),
            "textualRating": obj.get("textualRating"),
            "title": obj.get("title"),
            "url": obj.get("url")
        })
        return _obj



# coding: utf-8

"""
    Fact Check Tools API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_factchecking_factchecktools_v1alpha1_claim_review_markup import GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup

class TestGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup(unittest.TestCase):
    """GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup:
        """Test GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup`
        """
        model = GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup()
        if include_optional:
            return GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup(
                claim_appearances = [
                    ''
                    ],
                claim_author = openapi_client.models.google_factchecking_factchecktools_v1alpha1_claim_author.GoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor(
                    image_url = '', 
                    job_title = '', 
                    name = '', 
                    same_as = '', ),
                claim_date = '',
                claim_first_appearance = '',
                claim_location = '',
                claim_reviewed = '',
                rating = openapi_client.models.google_factchecking_factchecktools_v1alpha1_claim_rating.GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating(
                    best_rating = 56, 
                    image_url = '', 
                    rating_explanation = '', 
                    rating_value = 56, 
                    textual_rating = '', 
                    worst_rating = 56, ),
                url = ''
            )
        else:
            return GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup(
        )
        """

    def testGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup(self):
        """Test GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

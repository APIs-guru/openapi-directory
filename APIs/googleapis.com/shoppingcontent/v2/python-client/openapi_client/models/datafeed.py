# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.datafeed_fetch_schedule import DatafeedFetchSchedule
from openapi_client.models.datafeed_format import DatafeedFormat
from openapi_client.models.datafeed_target import DatafeedTarget
from typing import Optional, Set
from typing_extensions import Self

class Datafeed(BaseModel):
    """
    Datafeed configuration data.
    """ # noqa: E501
    attribute_language: Optional[StrictStr] = Field(default=None, description="The two-letter ISO 639-1 language in which the attributes are defined in the data feed.", alias="attributeLanguage")
    content_language: Optional[StrictStr] = Field(default=None, description="[DEPRECATED] Please use targets[].language instead. The two-letter ISO 639-1 language of the items in the feed. Must be a valid language for `targetCountry`.", alias="contentLanguage")
    content_type: Optional[StrictStr] = Field(default=None, description="Required. The type of data feed. For product inventory feeds, only feeds for local stores, not online stores, are supported. Acceptable values are: - \"`local products`\" - \"`product inventory`\" - \"`products`\" ", alias="contentType")
    fetch_schedule: Optional[DatafeedFetchSchedule] = Field(default=None, alias="fetchSchedule")
    file_name: Optional[StrictStr] = Field(default=None, description="Required. The filename of the feed. All feeds must have a unique file name.", alias="fileName")
    format: Optional[DatafeedFormat] = None
    id: Optional[StrictStr] = Field(default=None, description="Required for update. The ID of the data feed.")
    intended_destinations: Optional[List[StrictStr]] = Field(default=None, description="[DEPRECATED] Please use targets[].includedDestinations instead. The list of intended destinations (corresponds to checked check boxes in Merchant Center).", alias="intendedDestinations")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"`content#datafeed`\"")
    name: Optional[StrictStr] = Field(default=None, description="Required for insert. A descriptive name of the data feed.")
    target_country: Optional[StrictStr] = Field(default=None, description="[DEPRECATED] Please use targets[].country instead. The country where the items in the feed will be included in the search index, represented as a CLDR territory code.", alias="targetCountry")
    targets: Optional[List[DatafeedTarget]] = Field(default=None, description="The targets this feed should apply to (country, language, destinations).")
    __properties: ClassVar[List[str]] = ["attributeLanguage", "contentLanguage", "contentType", "fetchSchedule", "fileName", "format", "id", "intendedDestinations", "kind", "name", "targetCountry", "targets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Datafeed from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fetch_schedule
        if self.fetch_schedule:
            _dict['fetchSchedule'] = self.fetch_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of format
        if self.format:
            _dict['format'] = self.format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in targets (list)
        _items = []
        if self.targets:
            for _item_targets in self.targets:
                if _item_targets:
                    _items.append(_item_targets.to_dict())
            _dict['targets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Datafeed from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributeLanguage": obj.get("attributeLanguage"),
            "contentLanguage": obj.get("contentLanguage"),
            "contentType": obj.get("contentType"),
            "fetchSchedule": DatafeedFetchSchedule.from_dict(obj["fetchSchedule"]) if obj.get("fetchSchedule") is not None else None,
            "fileName": obj.get("fileName"),
            "format": DatafeedFormat.from_dict(obj["format"]) if obj.get("format") is not None else None,
            "id": obj.get("id"),
            "intendedDestinations": obj.get("intendedDestinations"),
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "targetCountry": obj.get("targetCountry"),
            "targets": [DatafeedTarget.from_dict(_item) for _item in obj["targets"]] if obj.get("targets") is not None else None
        })
        return _obj



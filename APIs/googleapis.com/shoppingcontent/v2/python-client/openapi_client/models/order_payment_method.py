# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.order_address import OrderAddress
from typing import Optional, Set
from typing_extensions import Self

class OrderPaymentMethod(BaseModel):
    """
    OrderPaymentMethod
    """ # noqa: E501
    billing_address: Optional[OrderAddress] = Field(default=None, alias="billingAddress")
    expiration_month: Optional[StrictInt] = Field(default=None, description="The card expiration month (January = 1, February = 2 etc.).", alias="expirationMonth")
    expiration_year: Optional[StrictInt] = Field(default=None, description="The card expiration year (4-digit, e.g. 2015).", alias="expirationYear")
    last_four_digits: Optional[StrictStr] = Field(default=None, description="The last four digits of the card number.", alias="lastFourDigits")
    phone_number: Optional[StrictStr] = Field(default=None, description="The billing phone number.", alias="phoneNumber")
    type: Optional[StrictStr] = Field(default=None, description="The type of instrument. Acceptable values are: - \"`AMEX`\" - \"`DISCOVER`\" - \"`JCB`\" - \"`MASTERCARD`\" - \"`UNIONPAY`\" - \"`VISA`\" - \"``\" ")
    __properties: ClassVar[List[str]] = ["billingAddress", "expirationMonth", "expirationYear", "lastFourDigits", "phoneNumber", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderPaymentMethod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billingAddress'] = self.billing_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderPaymentMethod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingAddress": OrderAddress.from_dict(obj["billingAddress"]) if obj.get("billingAddress") is not None else None,
            "expirationMonth": obj.get("expirationMonth"),
            "expirationYear": obj.get("expirationYear"),
            "lastFourDigits": obj.get("lastFourDigits"),
            "phoneNumber": obj.get("phoneNumber"),
            "type": obj.get("type")
        })
        return _obj



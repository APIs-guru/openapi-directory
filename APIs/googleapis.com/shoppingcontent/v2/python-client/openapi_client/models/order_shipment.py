# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.order_shipment_line_item_shipment import OrderShipmentLineItemShipment
from openapi_client.models.order_shipment_scheduled_delivery_details import OrderShipmentScheduledDeliveryDetails
from typing import Optional, Set
from typing_extensions import Self

class OrderShipment(BaseModel):
    """
    OrderShipment
    """ # noqa: E501
    carrier: Optional[StrictStr] = Field(default=None, description="The carrier handling the shipment. For supported carriers, Google includes the carrier name and tracking URL in emails to customers. For select supported carriers, Google also automatically updates the shipment status based on the provided shipment ID. *Note:* You can also use unsupported carriers, but emails to customers will not include the carrier name or tracking URL, and there will be no automatic order status updates. Supported carriers for US are: - \"`ups`\" (United Parcel Service) *automatic status updates* - \"`usps`\" (United States Postal Service) *automatic status updates* - \"`fedex`\" (FedEx) *automatic status updates * - \"`dhl`\" (DHL eCommerce) *automatic status updates* (US only) - \"`ontrac`\" (OnTrac) *automatic status updates * - \"`dhl express`\" (DHL Express) - \"`deliv`\" (Deliv) - \"`dynamex`\" (TForce) - \"`lasership`\" (LaserShip) - \"`mpx`\" (Military Parcel Xpress) - \"`uds`\" (United Delivery Service) - \"`efw`\" (Estes Forwarding Worldwide) - \"`jd logistics`\" (JD Logistics) - \"`yunexpress`\" (YunExpress) - \"`china post`\" (China Post) - \"`china ems`\" (China Post Express Mail Service) - \"`singapore post`\" (Singapore Post) - \"`pos malaysia`\" (Pos Malaysia) - \"`postnl`\" (PostNL) - \"`ptt`\" (PTT Turkish Post) - \"`eub`\" (ePacket) - \"`chukou1`\" (Chukou1 Logistics) - \"`bestex`\" (Best Express) - \"`canada post`\" (Canada Post) - \"`purolator`\" (Purolator) - \"`canpar`\" (Canpar) - \"`india post`\" (India Post) - \"`blue dart`\" (Blue Dart) - \"`delhivery`\" (Delhivery) - \"`dtdc`\" (DTDC) - \"`tpc india`\" (TPC India) Supported carriers for FR are: - \"`la poste`\" (La Poste) *automatic status updates * - \"`colissimo`\" (Colissimo by La Poste) *automatic status updates* - \"`ups`\" (United Parcel Service) *automatic status updates * - \"`chronopost`\" (Chronopost by La Poste) - \"`gls`\" (General Logistics Systems France) - \"`dpd`\" (DPD Group by GeoPost) - \"`bpost`\" (Belgian Post Group) - \"`colis prive`\" (Colis PrivÃ©) - \"`boxtal`\" (Boxtal) - \"`geodis`\" (GEODIS) - \"`tnt`\" (TNT) - \"`db schenker`\" (DB Schenker) - \"`aramex`\" (Aramex) ")
    creation_date: Optional[StrictStr] = Field(default=None, description="Date on which the shipment has been created, in ISO 8601 format.", alias="creationDate")
    delivery_date: Optional[StrictStr] = Field(default=None, description="Date on which the shipment has been delivered, in ISO 8601 format. Present only if `status` is `delivered`", alias="deliveryDate")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the shipment.")
    line_items: Optional[List[OrderShipmentLineItemShipment]] = Field(default=None, description="The line items that are shipped.", alias="lineItems")
    scheduled_delivery_details: Optional[OrderShipmentScheduledDeliveryDetails] = Field(default=None, alias="scheduledDeliveryDetails")
    status: Optional[StrictStr] = Field(default=None, description="The status of the shipment. Acceptable values are: - \"`delivered`\" - \"`readyForPickup`\" - \"`shipped`\" - \"`undeliverable`\" ")
    tracking_id: Optional[StrictStr] = Field(default=None, description="The tracking ID for the shipment.", alias="trackingId")
    __properties: ClassVar[List[str]] = ["carrier", "creationDate", "deliveryDate", "id", "lineItems", "scheduledDeliveryDetails", "status", "trackingId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderShipment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['lineItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of scheduled_delivery_details
        if self.scheduled_delivery_details:
            _dict['scheduledDeliveryDetails'] = self.scheduled_delivery_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderShipment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "carrier": obj.get("carrier"),
            "creationDate": obj.get("creationDate"),
            "deliveryDate": obj.get("deliveryDate"),
            "id": obj.get("id"),
            "lineItems": [OrderShipmentLineItemShipment.from_dict(_item) for _item in obj["lineItems"]] if obj.get("lineItems") is not None else None,
            "scheduledDeliveryDetails": OrderShipmentScheduledDeliveryDetails.from_dict(obj["scheduledDeliveryDetails"]) if obj.get("scheduledDeliveryDetails") is not None else None,
            "status": obj.get("status"),
            "trackingId": obj.get("trackingId")
        })
        return _obj



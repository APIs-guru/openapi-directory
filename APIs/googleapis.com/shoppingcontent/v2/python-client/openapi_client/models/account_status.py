# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_status_account_level_issue import AccountStatusAccountLevelIssue
from openapi_client.models.account_status_data_quality_issue import AccountStatusDataQualityIssue
from openapi_client.models.account_status_products import AccountStatusProducts
from typing import Optional, Set
from typing_extensions import Self

class AccountStatus(BaseModel):
    """
    The status of an account, i.e., information about its products, which is computed offline and not returned immediately at insertion time.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="The ID of the account for which the status is reported.", alias="accountId")
    account_level_issues: Optional[List[AccountStatusAccountLevelIssue]] = Field(default=None, description="A list of account level issues.", alias="accountLevelIssues")
    data_quality_issues: Optional[List[AccountStatusDataQualityIssue]] = Field(default=None, description="DEPRECATED - never populated.", alias="dataQualityIssues")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"`content#accountStatus`\"")
    products: Optional[List[AccountStatusProducts]] = Field(default=None, description="List of product-related data by channel, destination, and country. Data in this field may be delayed by up to 30 minutes.")
    website_claimed: Optional[StrictBool] = Field(default=None, description="Whether the account's website is claimed or not.", alias="websiteClaimed")
    __properties: ClassVar[List[str]] = ["accountId", "accountLevelIssues", "dataQualityIssues", "kind", "products", "websiteClaimed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in account_level_issues (list)
        _items = []
        if self.account_level_issues:
            for _item_account_level_issues in self.account_level_issues:
                if _item_account_level_issues:
                    _items.append(_item_account_level_issues.to_dict())
            _dict['accountLevelIssues'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_quality_issues (list)
        _items = []
        if self.data_quality_issues:
            for _item_data_quality_issues in self.data_quality_issues:
                if _item_data_quality_issues:
                    _items.append(_item_data_quality_issues.to_dict())
            _dict['dataQualityIssues'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item_products in self.products:
                if _item_products:
                    _items.append(_item_products.to_dict())
            _dict['products'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "accountLevelIssues": [AccountStatusAccountLevelIssue.from_dict(_item) for _item in obj["accountLevelIssues"]] if obj.get("accountLevelIssues") is not None else None,
            "dataQualityIssues": [AccountStatusDataQualityIssue.from_dict(_item) for _item in obj["dataQualityIssues"]] if obj.get("dataQualityIssues") is not None else None,
            "kind": obj.get("kind"),
            "products": [AccountStatusProducts.from_dict(_item) for _item in obj["products"]] if obj.get("products") is not None else None,
            "websiteClaimed": obj.get("websiteClaimed")
        })
        return _obj



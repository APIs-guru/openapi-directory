# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_status_example_item import AccountStatusExampleItem
from typing import Optional, Set
from typing_extensions import Self

class AccountStatusDataQualityIssue(BaseModel):
    """
    AccountStatusDataQualityIssue
    """ # noqa: E501
    country: Optional[StrictStr] = None
    destination: Optional[StrictStr] = None
    detail: Optional[StrictStr] = None
    displayed_value: Optional[StrictStr] = Field(default=None, alias="displayedValue")
    example_items: Optional[List[AccountStatusExampleItem]] = Field(default=None, alias="exampleItems")
    id: Optional[StrictStr] = None
    last_checked: Optional[StrictStr] = Field(default=None, alias="lastChecked")
    location: Optional[StrictStr] = None
    num_items: Optional[StrictInt] = Field(default=None, alias="numItems")
    severity: Optional[StrictStr] = Field(default=None, description=" Acceptable values are: - \"`critical`\" - \"`error`\" - \"`suggestion`\" ")
    submitted_value: Optional[StrictStr] = Field(default=None, alias="submittedValue")
    __properties: ClassVar[List[str]] = ["country", "destination", "detail", "displayedValue", "exampleItems", "id", "lastChecked", "location", "numItems", "severity", "submittedValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountStatusDataQualityIssue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in example_items (list)
        _items = []
        if self.example_items:
            for _item_example_items in self.example_items:
                if _item_example_items:
                    _items.append(_item_example_items.to_dict())
            _dict['exampleItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountStatusDataQualityIssue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "destination": obj.get("destination"),
            "detail": obj.get("detail"),
            "displayedValue": obj.get("displayedValue"),
            "exampleItems": [AccountStatusExampleItem.from_dict(_item) for _item in obj["exampleItems"]] if obj.get("exampleItems") is not None else None,
            "id": obj.get("id"),
            "lastChecked": obj.get("lastChecked"),
            "location": obj.get("location"),
            "numItems": obj.get("numItems"),
            "severity": obj.get("severity"),
            "submittedValue": obj.get("submittedValue")
        })
        return _obj



# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.lia_about_page_settings import LiaAboutPageSettings
from openapi_client.models.lia_inventory_settings import LiaInventorySettings
from openapi_client.models.lia_on_display_to_order_settings import LiaOnDisplayToOrderSettings
from openapi_client.models.lia_pos_data_provider import LiaPosDataProvider
from typing import Optional, Set
from typing_extensions import Self

class LiaCountrySettings(BaseModel):
    """
    LiaCountrySettings
    """ # noqa: E501
    about: Optional[LiaAboutPageSettings] = None
    country: Optional[StrictStr] = Field(default=None, description="Required. CLDR country code (e.g. \"US\").")
    hosted_local_storefront_active: Optional[StrictBool] = Field(default=None, description="The status of the \"Merchant hosted local storefront\" feature.", alias="hostedLocalStorefrontActive")
    inventory: Optional[LiaInventorySettings] = None
    on_display_to_order: Optional[LiaOnDisplayToOrderSettings] = Field(default=None, alias="onDisplayToOrder")
    pos_data_provider: Optional[LiaPosDataProvider] = Field(default=None, alias="posDataProvider")
    store_pickup_active: Optional[StrictBool] = Field(default=None, description="The status of the \"Store pickup\" feature.", alias="storePickupActive")
    __properties: ClassVar[List[str]] = ["about", "country", "hostedLocalStorefrontActive", "inventory", "onDisplayToOrder", "posDataProvider", "storePickupActive"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LiaCountrySettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of about
        if self.about:
            _dict['about'] = self.about.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inventory
        if self.inventory:
            _dict['inventory'] = self.inventory.to_dict()
        # override the default output from pydantic by calling `to_dict()` of on_display_to_order
        if self.on_display_to_order:
            _dict['onDisplayToOrder'] = self.on_display_to_order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pos_data_provider
        if self.pos_data_provider:
            _dict['posDataProvider'] = self.pos_data_provider.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LiaCountrySettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "about": LiaAboutPageSettings.from_dict(obj["about"]) if obj.get("about") is not None else None,
            "country": obj.get("country"),
            "hostedLocalStorefrontActive": obj.get("hostedLocalStorefrontActive"),
            "inventory": LiaInventorySettings.from_dict(obj["inventory"]) if obj.get("inventory") is not None else None,
            "onDisplayToOrder": LiaOnDisplayToOrderSettings.from_dict(obj["onDisplayToOrder"]) if obj.get("onDisplayToOrder") is not None else None,
            "posDataProvider": LiaPosDataProvider.from_dict(obj["posDataProvider"]) if obj.get("posDataProvider") is not None else None,
            "storePickupActive": obj.get("storePickupActive")
        })
        return _obj



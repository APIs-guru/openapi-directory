# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.price import Price
from typing import Optional, Set
from typing_extensions import Self

class PosSale(BaseModel):
    """
    The change of the available quantity of an item at the given store.
    """ # noqa: E501
    content_language: Optional[StrictStr] = Field(default=None, description="Required. The two-letter ISO 639-1 language code for the item.", alias="contentLanguage")
    gtin: Optional[StrictStr] = Field(default=None, description="Global Trade Item Number.")
    item_id: Optional[StrictStr] = Field(default=None, description="Required. A unique identifier for the item.", alias="itemId")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"`content#posSale`\"")
    price: Optional[Price] = None
    quantity: Optional[StrictStr] = Field(default=None, description="Required. The relative change of the available quantity. Negative for items returned.")
    sale_id: Optional[StrictStr] = Field(default=None, description="A unique ID to group items from the same sale event.", alias="saleId")
    store_code: Optional[StrictStr] = Field(default=None, description="Required. The identifier of the merchant's store. Either a `storeCode` inserted via the API or the code of the store in Google My Business.", alias="storeCode")
    target_country: Optional[StrictStr] = Field(default=None, description="Required. The CLDR territory code for the item.", alias="targetCountry")
    timestamp: Optional[StrictStr] = Field(default=None, description="Required. The inventory timestamp, in ISO 8601 format.")
    __properties: ClassVar[List[str]] = ["contentLanguage", "gtin", "itemId", "kind", "price", "quantity", "saleId", "storeCode", "targetCountry", "timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PosSale from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PosSale from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentLanguage": obj.get("contentLanguage"),
            "gtin": obj.get("gtin"),
            "itemId": obj.get("itemId"),
            "kind": obj.get("kind"),
            "price": Price.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "quantity": obj.get("quantity"),
            "saleId": obj.get("saleId"),
            "storeCode": obj.get("storeCode"),
            "targetCountry": obj.get("targetCountry"),
            "timestamp": obj.get("timestamp")
        })
        return _obj



# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.accounts_custom_batch_response import AccountsCustomBatchResponse

class TestAccountsCustomBatchResponse(unittest.TestCase):
    """AccountsCustomBatchResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AccountsCustomBatchResponse:
        """Test AccountsCustomBatchResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AccountsCustomBatchResponse`
        """
        model = AccountsCustomBatchResponse()
        if include_optional:
            return AccountsCustomBatchResponse(
                entries = [
                    openapi_client.models.accounts_custom_batch_response_entry.AccountsCustomBatchResponseEntry(
                        account = openapi_client.models.account.Account(
                            adult_content = True, 
                            adwords_links = [
                                openapi_client.models.account_adwords_link.AccountAdwordsLink(
                                    adwords_id = '', 
                                    status = '', )
                                ], 
                            business_information = openapi_client.models.account_business_information.AccountBusinessInformation(
                                address = openapi_client.models.account_address.AccountAddress(
                                    country = '', 
                                    locality = '', 
                                    postal_code = '', 
                                    region = '', 
                                    street_address = '', ), 
                                customer_service = openapi_client.models.account_customer_service.AccountCustomerService(
                                    email = '', 
                                    phone_number = '', 
                                    url = '', ), 
                                korean_business_registration_number = '', 
                                phone_number = '', ), 
                            google_my_business_link = openapi_client.models.account_google_my_business_link.AccountGoogleMyBusinessLink(
                                gmb_email = '', 
                                status = '', ), 
                            id = '', 
                            kind = '', 
                            name = '', 
                            reviews_url = '', 
                            seller_id = '', 
                            users = [
                                openapi_client.models.account_user.AccountUser(
                                    admin = True, 
                                    email_address = '', 
                                    order_manager = True, 
                                    payments_analyst = True, 
                                    payments_manager = True, )
                                ], 
                            website_url = '', 
                            youtube_channel_links = [
                                openapi_client.models.account_you_tube_channel_link.AccountYouTubeChannelLink(
                                    channel_id = '', 
                                    status = '', )
                                ], ), 
                        batch_id = 56, 
                        errors = openapi_client.models.errors.Errors(
                            code = 56, 
                            message = '', ), 
                        kind = '', 
                        link_status = '', )
                    ],
                kind = ''
            )
        else:
            return AccountsCustomBatchResponse(
        )
        """

    def testAccountsCustomBatchResponse(self):
        """Test AccountsCustomBatchResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

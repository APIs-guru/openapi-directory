# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.orders_custom_batch_response import OrdersCustomBatchResponse

class TestOrdersCustomBatchResponse(unittest.TestCase):
    """OrdersCustomBatchResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrdersCustomBatchResponse:
        """Test OrdersCustomBatchResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrdersCustomBatchResponse`
        """
        model = OrdersCustomBatchResponse()
        if include_optional:
            return OrdersCustomBatchResponse(
                entries = [
                    openapi_client.models.orders_custom_batch_response_entry.OrdersCustomBatchResponseEntry(
                        batch_id = 56, 
                        errors = openapi_client.models.errors.Errors(
                            code = 56, 
                            message = '', ), 
                        execution_status = '', 
                        kind = '', 
                        order = openapi_client.models.order.Order(
                            acknowledged = True, 
                            channel_type = '', 
                            customer = openapi_client.models.order_customer.OrderCustomer(
                                email = '', 
                                explicit_marketing_preference = True, 
                                full_name = '', 
                                invoice_receiving_email = '', 
                                marketing_rights_info = openapi_client.models.order_customer_marketing_rights_info.OrderCustomerMarketingRightsInfo(
                                    explicit_marketing_preference = '', 
                                    last_updated_timestamp = '', 
                                    marketing_email_address = '', ), ), 
                            delivery_details = openapi_client.models.order_delivery_details.OrderDeliveryDetails(
                                address = openapi_client.models.order_address.OrderAddress(
                                    country = '', 
                                    full_address = [
                                        ''
                                        ], 
                                    is_post_office_box = True, 
                                    locality = '', 
                                    postal_code = '', 
                                    recipient_name = '', 
                                    region = '', 
                                    street_address = [
                                        ''
                                        ], ), 
                                phone_number = '', ), 
                            id = '', 
                            kind = '', 
                            line_items = [
                                openapi_client.models.order_line_item.OrderLineItem(
                                    annotations = [
                                        openapi_client.models.order_merchant_provided_annotation.OrderMerchantProvidedAnnotation(
                                            key = '', 
                                            value = '', )
                                        ], 
                                    cancellations = [
                                        openapi_client.models.order_cancellation.OrderCancellation(
                                            actor = '', 
                                            creation_date = '', 
                                            quantity = 56, 
                                            reason = '', 
                                            reason_text = '', )
                                        ], 
                                    id = '', 
                                    price = openapi_client.models.price.Price(
                                        currency = '', 
                                        value = '', ), 
                                    product = openapi_client.models.order_line_item_product.OrderLineItemProduct(
                                        brand = '', 
                                        channel = '', 
                                        condition = '', 
                                        content_language = '', 
                                        fees = [
                                            openapi_client.models.order_line_item_product_fee.OrderLineItemProductFee(
                                                amount = openapi_client.models.price.Price(
                                                    currency = '', 
                                                    value = '', ), 
                                                name = '', )
                                            ], 
                                        gtin = '', 
                                        id = '', 
                                        image_link = '', 
                                        item_group_id = '', 
                                        mpn = '', 
                                        offer_id = '', 
                                        shown_image = '', 
                                        target_country = '', 
                                        title = '', 
                                        variant_attributes = [
                                            openapi_client.models.order_line_item_product_variant_attribute.OrderLineItemProductVariantAttribute(
                                                dimension = '', 
                                                value = '', )
                                            ], ), 
                                    quantity_canceled = 56, 
                                    quantity_delivered = 56, 
                                    quantity_ordered = 56, 
                                    quantity_pending = 56, 
                                    quantity_ready_for_pickup = 56, 
                                    quantity_returned = 56, 
                                    quantity_shipped = 56, 
                                    return_info = openapi_client.models.order_line_item_return_info.OrderLineItemReturnInfo(
                                        days_to_return = 56, 
                                        is_returnable = True, 
                                        policy_url = '', ), 
                                    returns = [
                                        openapi_client.models.order_return.OrderReturn(
                                            actor = '', 
                                            creation_date = '', 
                                            quantity = 56, 
                                            reason = '', 
                                            reason_text = '', )
                                        ], 
                                    shipping_details = openapi_client.models.order_line_item_shipping_details.OrderLineItemShippingDetails(
                                        deliver_by_date = '', 
                                        method = openapi_client.models.order_line_item_shipping_details_method.OrderLineItemShippingDetailsMethod(
                                            carrier = '', 
                                            max_days_in_transit = 56, 
                                            method_name = '', 
                                            min_days_in_transit = 56, ), 
                                        ship_by_date = '', 
                                        type = '', ), 
                                    tax = , )
                                ], 
                            merchant_id = '', 
                            merchant_order_id = '', 
                            net_amount = , 
                            payment_method = openapi_client.models.order_payment_method.OrderPaymentMethod(
                                billing_address = openapi_client.models.order_address.OrderAddress(
                                    country = '', 
                                    is_post_office_box = True, 
                                    locality = '', 
                                    postal_code = '', 
                                    recipient_name = '', 
                                    region = '', ), 
                                expiration_month = 56, 
                                expiration_year = 56, 
                                last_four_digits = '', 
                                phone_number = '', 
                                type = '', ), 
                            payment_status = '', 
                            pickup_details = openapi_client.models.order_pickup_details.OrderPickupDetails(
                                collectors = [
                                    openapi_client.models.order_pickup_details_collector.OrderPickupDetailsCollector(
                                        name = '', 
                                        phone_number = '', )
                                    ], 
                                location_id = '', ), 
                            placed_date = '', 
                            promotions = [
                                openapi_client.models.order_legacy_promotion.OrderLegacyPromotion(
                                    benefits = [
                                        openapi_client.models.order_legacy_promotion_benefit.OrderLegacyPromotionBenefit(
                                            discount = , 
                                            offer_ids = [
                                                ''
                                                ], 
                                            sub_type = '', 
                                            tax_impact = , 
                                            type = '', )
                                        ], 
                                    effective_dates = '', 
                                    generic_redemption_code = '', 
                                    id = '', 
                                    long_title = '', 
                                    product_applicability = '', 
                                    redemption_channel = '', )
                                ], 
                            refunds = [
                                openapi_client.models.order_refund.OrderRefund(
                                    actor = '', 
                                    creation_date = '', 
                                    reason = '', 
                                    reason_text = '', )
                                ], 
                            shipments = [
                                openapi_client.models.order_shipment.OrderShipment(
                                    carrier = '', 
                                    creation_date = '', 
                                    delivery_date = '', 
                                    id = '', 
                                    scheduled_delivery_details = openapi_client.models.order_shipment_scheduled_delivery_details.OrderShipmentScheduledDeliveryDetails(
                                        carrier_phone_number = '', 
                                        scheduled_date = '', ), 
                                    status = '', 
                                    tracking_id = '', )
                                ], 
                            shipping_cost = , 
                            shipping_cost_tax = , 
                            shipping_option = '', 
                            status = '', 
                            tax_collector = '', ), )
                    ],
                kind = ''
            )
        else:
            return OrdersCustomBatchResponse(
        )
        """

    def testOrdersCustomBatchResponse(self):
        """Test OrdersCustomBatchResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.orders_custom_batch_request_entry import OrdersCustomBatchRequestEntry

class TestOrdersCustomBatchRequestEntry(unittest.TestCase):
    """OrdersCustomBatchRequestEntry unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrdersCustomBatchRequestEntry:
        """Test OrdersCustomBatchRequestEntry
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrdersCustomBatchRequestEntry`
        """
        model = OrdersCustomBatchRequestEntry()
        if include_optional:
            return OrdersCustomBatchRequestEntry(
                batch_id = 56,
                cancel = openapi_client.models.orders_custom_batch_request_entry_cancel.OrdersCustomBatchRequestEntryCancel(
                    reason = '', 
                    reason_text = '', ),
                cancel_line_item = openapi_client.models.orders_custom_batch_request_entry_cancel_line_item.OrdersCustomBatchRequestEntryCancelLineItem(
                    amount = openapi_client.models.price.Price(
                        currency = '', 
                        value = '', ), 
                    amount_pretax = openapi_client.models.price.Price(
                        currency = '', 
                        value = '', ), 
                    amount_tax = , 
                    line_item_id = '', 
                    product_id = '', 
                    quantity = 56, 
                    reason = '', 
                    reason_text = '', ),
                in_store_refund_line_item = openapi_client.models.orders_custom_batch_request_entry_in_store_refund_line_item.OrdersCustomBatchRequestEntryInStoreRefundLineItem(
                    amount_pretax = openapi_client.models.price.Price(
                        currency = '', 
                        value = '', ), 
                    amount_tax = openapi_client.models.price.Price(
                        currency = '', 
                        value = '', ), 
                    line_item_id = '', 
                    product_id = '', 
                    quantity = 56, 
                    reason = '', 
                    reason_text = '', ),
                merchant_id = '',
                merchant_order_id = '',
                method = '',
                operation_id = '',
                order_id = '',
                refund = openapi_client.models.orders_custom_batch_request_entry_refund.OrdersCustomBatchRequestEntryRefund(
                    amount = openapi_client.models.price.Price(
                        currency = '', 
                        value = '', ), 
                    amount_pretax = openapi_client.models.price.Price(
                        currency = '', 
                        value = '', ), 
                    amount_tax = , 
                    reason = '', 
                    reason_text = '', ),
                reject_return_line_item = openapi_client.models.orders_custom_batch_request_entry_reject_return_line_item.OrdersCustomBatchRequestEntryRejectReturnLineItem(
                    line_item_id = '', 
                    product_id = '', 
                    quantity = 56, 
                    reason = '', 
                    reason_text = '', ),
                return_line_item = openapi_client.models.orders_custom_batch_request_entry_return_line_item.OrdersCustomBatchRequestEntryReturnLineItem(
                    line_item_id = '', 
                    product_id = '', 
                    quantity = 56, 
                    reason = '', 
                    reason_text = '', ),
                return_refund_line_item = openapi_client.models.orders_custom_batch_request_entry_return_refund_line_item.OrdersCustomBatchRequestEntryReturnRefundLineItem(
                    amount_pretax = openapi_client.models.price.Price(
                        currency = '', 
                        value = '', ), 
                    amount_tax = openapi_client.models.price.Price(
                        currency = '', 
                        value = '', ), 
                    line_item_id = '', 
                    product_id = '', 
                    quantity = 56, 
                    reason = '', 
                    reason_text = '', ),
                set_line_item_metadata = openapi_client.models.orders_custom_batch_request_entry_set_line_item_metadata.OrdersCustomBatchRequestEntrySetLineItemMetadata(
                    annotations = [
                        openapi_client.models.order_merchant_provided_annotation.OrderMerchantProvidedAnnotation(
                            key = '', 
                            value = '', )
                        ], 
                    line_item_id = '', 
                    product_id = '', ),
                ship_line_items = openapi_client.models.orders_custom_batch_request_entry_ship_line_items.OrdersCustomBatchRequestEntryShipLineItems(
                    carrier = '', 
                    line_items = [
                        openapi_client.models.order_shipment_line_item_shipment.OrderShipmentLineItemShipment(
                            line_item_id = '', 
                            product_id = '', 
                            quantity = 56, )
                        ], 
                    shipment_group_id = '', 
                    shipment_id = '', 
                    shipment_infos = [
                        openapi_client.models.orders_custom_batch_request_entry_ship_line_items_shipment_info.OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo(
                            carrier = '', 
                            shipment_id = '', 
                            tracking_id = '', )
                        ], 
                    tracking_id = '', ),
                update_line_item_shipping_details = openapi_client.models.orders_custom_batch_request_entry_update_line_item_shipping_details.OrdersCustomBatchRequestEntryUpdateLineItemShippingDetails(
                    deliver_by_date = '', 
                    line_item_id = '', 
                    product_id = '', 
                    ship_by_date = '', ),
                update_shipment = openapi_client.models.orders_custom_batch_request_entry_update_shipment.OrdersCustomBatchRequestEntryUpdateShipment(
                    carrier = '', 
                    delivery_date = '', 
                    shipment_id = '', 
                    status = '', 
                    tracking_id = '', )
            )
        else:
            return OrdersCustomBatchRequestEntry(
        )
        """

    def testOrdersCustomBatchRequestEntry(self):
        """Test OrdersCustomBatchRequestEntry"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

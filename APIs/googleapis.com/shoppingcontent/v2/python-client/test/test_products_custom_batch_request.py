# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.products_custom_batch_request import ProductsCustomBatchRequest

class TestProductsCustomBatchRequest(unittest.TestCase):
    """ProductsCustomBatchRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProductsCustomBatchRequest:
        """Test ProductsCustomBatchRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProductsCustomBatchRequest`
        """
        model = ProductsCustomBatchRequest()
        if include_optional:
            return ProductsCustomBatchRequest(
                entries = [
                    openapi_client.models.products_custom_batch_request_entry.ProductsCustomBatchRequestEntry(
                        batch_id = 56, 
                        merchant_id = '', 
                        method = '', 
                        product = openapi_client.models.product.Product(
                            additional_image_links = [
                                ''
                                ], 
                            additional_product_types = [
                                ''
                                ], 
                            adult = True, 
                            adwords_grouping = '', 
                            adwords_labels = [
                                ''
                                ], 
                            adwords_redirect = '', 
                            age_group = '', 
                            aspects = [
                                openapi_client.models.product_aspect.ProductAspect(
                                    aspect_name = '', 
                                    destination_name = '', 
                                    intention = '', )
                                ], 
                            availability = '', 
                            availability_date = '', 
                            brand = '', 
                            canonical_link = '', 
                            channel = '', 
                            color = '', 
                            condition = '', 
                            content_language = '', 
                            cost_of_goods_sold = openapi_client.models.price.Price(
                                currency = '', 
                                value = '', ), 
                            custom_attributes = [
                                openapi_client.models.custom_attribute.CustomAttribute(
                                    name = '', 
                                    type = '', 
                                    unit = '', 
                                    value = '', )
                                ], 
                            custom_groups = [
                                openapi_client.models.custom_group.CustomGroup(
                                    attributes = [
                                        openapi_client.models.custom_attribute.CustomAttribute(
                                            name = '', 
                                            type = '', 
                                            unit = '', 
                                            value = '', )
                                        ], 
                                    name = '', )
                                ], 
                            custom_label0 = '', 
                            custom_label1 = '', 
                            custom_label2 = '', 
                            custom_label3 = '', 
                            custom_label4 = '', 
                            description = '', 
                            destinations = [
                                openapi_client.models.product_destination.ProductDestination(
                                    destination_name = '', 
                                    intention = '', )
                                ], 
                            display_ads_id = '', 
                            display_ads_link = '', 
                            display_ads_similar_ids = [
                                ''
                                ], 
                            display_ads_title = '', 
                            display_ads_value = 1.337, 
                            energy_efficiency_class = '', 
                            expiration_date = '', 
                            gender = '', 
                            google_product_category = '', 
                            gtin = '', 
                            id = '', 
                            identifier_exists = True, 
                            image_link = '', 
                            installment = openapi_client.models.installment.Installment(
                                amount = openapi_client.models.price.Price(
                                    currency = '', 
                                    value = '', ), 
                                months = '', ), 
                            is_bundle = True, 
                            item_group_id = '', 
                            kind = '', 
                            link = '', 
                            loyalty_points = openapi_client.models.loyalty_points.LoyaltyPoints(
                                name = '', 
                                points_value = '', 
                                ratio = 1.337, ), 
                            material = '', 
                            max_energy_efficiency_class = '', 
                            max_handling_time = '', 
                            min_energy_efficiency_class = '', 
                            min_handling_time = '', 
                            mobile_link = '', 
                            mpn = '', 
                            multipack = '', 
                            offer_id = '', 
                            online_only = True, 
                            pattern = '', 
                            price = , 
                            product_type = '', 
                            promotion_ids = [
                                ''
                                ], 
                            sale_price = , 
                            sale_price_effective_date = '', 
                            sell_on_google_quantity = '', 
                            shipping = [
                                openapi_client.models.product_shipping.ProductShipping(
                                    country = '', 
                                    location_group_name = '', 
                                    location_id = '', 
                                    postal_code = '', 
                                    region = '', 
                                    service = '', )
                                ], 
                            shipping_height = openapi_client.models.product_shipping_dimension.ProductShippingDimension(
                                unit = '', 
                                value = 1.337, ), 
                            shipping_label = '', 
                            shipping_length = openapi_client.models.product_shipping_dimension.ProductShippingDimension(
                                unit = '', 
                                value = 1.337, ), 
                            shipping_weight = openapi_client.models.product_shipping_weight.ProductShippingWeight(
                                unit = '', 
                                value = 1.337, ), 
                            shipping_width = , 
                            size_system = '', 
                            size_type = '', 
                            sizes = [
                                ''
                                ], 
                            source = '', 
                            target_country = '', 
                            taxes = [
                                openapi_client.models.product_tax.ProductTax(
                                    country = '', 
                                    location_id = '', 
                                    postal_code = '', 
                                    rate = 1.337, 
                                    region = '', 
                                    tax_ship = True, )
                                ], 
                            title = '', 
                            unit_pricing_base_measure = openapi_client.models.product_unit_pricing_base_measure.ProductUnitPricingBaseMeasure(
                                unit = '', 
                                value = '', ), 
                            unit_pricing_measure = openapi_client.models.product_unit_pricing_measure.ProductUnitPricingMeasure(
                                unit = '', 
                                value = 1.337, ), 
                            validated_destinations = [
                                ''
                                ], 
                            warnings = [
                                openapi_client.models.error.Error(
                                    domain = '', 
                                    message = '', 
                                    reason = '', )
                                ], ), 
                        product_id = '', )
                    ]
            )
        else:
            return ProductsCustomBatchRequest(
        )
        """

    def testProductsCustomBatchRequest(self):
        """Test ProductsCustomBatchRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

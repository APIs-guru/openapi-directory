# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.product import Product

class TestProduct(unittest.TestCase):
    """Product unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Product:
        """Test Product
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Product`
        """
        model = Product()
        if include_optional:
            return Product(
                additional_image_links = [
                    ''
                    ],
                additional_product_types = [
                    ''
                    ],
                adult = True,
                adwords_grouping = '',
                adwords_labels = [
                    ''
                    ],
                adwords_redirect = '',
                age_group = '',
                aspects = [
                    openapi_client.models.product_aspect.ProductAspect(
                        aspect_name = '', 
                        destination_name = '', 
                        intention = '', )
                    ],
                availability = '',
                availability_date = '',
                brand = '',
                canonical_link = '',
                channel = '',
                color = '',
                condition = '',
                content_language = '',
                cost_of_goods_sold = openapi_client.models.price.Price(
                    currency = '', 
                    value = '', ),
                custom_attributes = [
                    openapi_client.models.custom_attribute.CustomAttribute(
                        name = '', 
                        type = '', 
                        unit = '', 
                        value = '', )
                    ],
                custom_groups = [
                    openapi_client.models.custom_group.CustomGroup(
                        attributes = [
                            openapi_client.models.custom_attribute.CustomAttribute(
                                name = '', 
                                type = '', 
                                unit = '', 
                                value = '', )
                            ], 
                        name = '', )
                    ],
                custom_label0 = '',
                custom_label1 = '',
                custom_label2 = '',
                custom_label3 = '',
                custom_label4 = '',
                description = '',
                destinations = [
                    openapi_client.models.product_destination.ProductDestination(
                        destination_name = '', 
                        intention = '', )
                    ],
                display_ads_id = '',
                display_ads_link = '',
                display_ads_similar_ids = [
                    ''
                    ],
                display_ads_title = '',
                display_ads_value = 1.337,
                energy_efficiency_class = '',
                expiration_date = '',
                gender = '',
                google_product_category = '',
                gtin = '',
                id = '',
                identifier_exists = True,
                image_link = '',
                installment = openapi_client.models.installment.Installment(
                    amount = openapi_client.models.price.Price(
                        currency = '', 
                        value = '', ), 
                    months = '', ),
                is_bundle = True,
                item_group_id = '',
                kind = '',
                link = '',
                loyalty_points = openapi_client.models.loyalty_points.LoyaltyPoints(
                    name = '', 
                    points_value = '', 
                    ratio = 1.337, ),
                material = '',
                max_energy_efficiency_class = '',
                max_handling_time = '',
                min_energy_efficiency_class = '',
                min_handling_time = '',
                mobile_link = '',
                mpn = '',
                multipack = '',
                offer_id = '',
                online_only = True,
                pattern = '',
                price = openapi_client.models.price.Price(
                    currency = '', 
                    value = '', ),
                product_type = '',
                promotion_ids = [
                    ''
                    ],
                sale_price = openapi_client.models.price.Price(
                    currency = '', 
                    value = '', ),
                sale_price_effective_date = '',
                sell_on_google_quantity = '',
                shipping = [
                    openapi_client.models.product_shipping.ProductShipping(
                        country = '', 
                        location_group_name = '', 
                        location_id = '', 
                        postal_code = '', 
                        price = openapi_client.models.price.Price(
                            currency = '', 
                            value = '', ), 
                        region = '', 
                        service = '', )
                    ],
                shipping_height = openapi_client.models.product_shipping_dimension.ProductShippingDimension(
                    unit = '', 
                    value = 1.337, ),
                shipping_label = '',
                shipping_length = openapi_client.models.product_shipping_dimension.ProductShippingDimension(
                    unit = '', 
                    value = 1.337, ),
                shipping_weight = openapi_client.models.product_shipping_weight.ProductShippingWeight(
                    unit = '', 
                    value = 1.337, ),
                shipping_width = openapi_client.models.product_shipping_dimension.ProductShippingDimension(
                    unit = '', 
                    value = 1.337, ),
                size_system = '',
                size_type = '',
                sizes = [
                    ''
                    ],
                source = '',
                target_country = '',
                taxes = [
                    openapi_client.models.product_tax.ProductTax(
                        country = '', 
                        location_id = '', 
                        postal_code = '', 
                        rate = 1.337, 
                        region = '', 
                        tax_ship = True, )
                    ],
                title = '',
                unit_pricing_base_measure = openapi_client.models.product_unit_pricing_base_measure.ProductUnitPricingBaseMeasure(
                    unit = '', 
                    value = '', ),
                unit_pricing_measure = openapi_client.models.product_unit_pricing_measure.ProductUnitPricingMeasure(
                    unit = '', 
                    value = 1.337, ),
                validated_destinations = [
                    ''
                    ],
                warnings = [
                    openapi_client.models.error.Error(
                        domain = '', 
                        message = '', 
                        reason = '', )
                    ]
            )
        else:
            return Product(
        )
        """

    def testProduct(self):
        """Test Product"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

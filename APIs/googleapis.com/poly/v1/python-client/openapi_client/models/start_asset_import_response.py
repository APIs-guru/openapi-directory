# coding: utf-8

"""
    Poly API

    The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.asset_import_message import AssetImportMessage
from typing import Optional, Set
from typing_extensions import Self

class StartAssetImportResponse(BaseModel):
    """
    A response message from a request to startImport. This is returned in the response field of the Operation.
    """ # noqa: E501
    asset_id: Optional[StrictStr] = Field(default=None, description="The id of newly created asset. If this is empty when the operation is complete it means the import failed. Please refer to the assetImportMessages field to understand what went wrong.", alias="assetId")
    asset_import_id: Optional[StrictStr] = Field(default=None, description="The id of the asset import.", alias="assetImportId")
    asset_import_messages: Optional[List[AssetImportMessage]] = Field(default=None, description="The message from the asset import. This will contain any warnings (or - in the case of failure - errors) that occurred during import.", alias="assetImportMessages")
    publish_url: Optional[StrictStr] = Field(default=None, description="The publish URL for the asset.", alias="publishUrl")
    __properties: ClassVar[List[str]] = ["assetId", "assetImportId", "assetImportMessages", "publishUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StartAssetImportResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in asset_import_messages (list)
        _items = []
        if self.asset_import_messages:
            for _item_asset_import_messages in self.asset_import_messages:
                if _item_asset_import_messages:
                    _items.append(_item_asset_import_messages.to_dict())
            _dict['assetImportMessages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StartAssetImportResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetId": obj.get("assetId"),
            "assetImportId": obj.get("assetImportId"),
            "assetImportMessages": [AssetImportMessage.from_dict(_item) for _item in obj["assetImportMessages"]] if obj.get("assetImportMessages") is not None else None,
            "publishUrl": obj.get("publishUrl")
        })
        return _obj



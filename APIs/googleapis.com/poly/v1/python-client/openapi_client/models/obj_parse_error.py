# coding: utf-8

"""
    Poly API

    The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ObjParseError(BaseModel):
    """
    Details of an error resulting from parsing an OBJ file
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, description="The type of problem found (required).")
    end_index: Optional[StrictInt] = Field(default=None, description="The ending character index at which the problem was found.", alias="endIndex")
    file_path: Optional[StrictStr] = Field(default=None, description="The file path in which the problem was found.", alias="filePath")
    line: Optional[StrictStr] = Field(default=None, description="The text of the line. Note that this may be truncated if the line was very long. This may not include the error if it occurs after line truncation.")
    line_number: Optional[StrictInt] = Field(default=None, description="Line number at which the problem was found.", alias="lineNumber")
    start_index: Optional[StrictInt] = Field(default=None, description="The starting character index at which the problem was found.", alias="startIndex")
    __properties: ClassVar[List[str]] = ["code", "endIndex", "filePath", "line", "lineNumber", "startIndex"]

    @field_validator('code')
    def code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CODE_UNSPECIFIED', 'INCONSISTENT_VERTEX_REFS', 'INVALID_COMMAND', 'INVALID_NUMBER', 'INVALID_VERTEX_REF', 'MISSING_GEOMETRIC_VERTEX', 'MISSING_TOKEN', 'TOO_FEW_DIMENSIONS', 'TOO_FEW_VERTICES', 'TOO_MANY_DIMENSIONS', 'UNSUPPORTED_COMMAND', 'UNUSED_TOKENS', 'VERTEX_NOT_FOUND', 'NUMBER_OUT_OF_RANGE', 'INVALID_VALUE', 'INVALID_TEXTURE_OPTION', 'TOO_MANY_PROBLEMS', 'MISSING_FILE_NAME', 'FILE_NOT_FOUND', 'UNKNOWN_MATERIAL', 'NO_MATERIAL_DEFINED', 'INVALID_SMOOTHING_GROUP', 'MISSING_VERTEX_COLORS', 'FILE_SUBSTITUTION', 'LINE_TOO_LONG', 'INVALID_FILE_PATH']):
            raise ValueError("must be one of enum values ('CODE_UNSPECIFIED', 'INCONSISTENT_VERTEX_REFS', 'INVALID_COMMAND', 'INVALID_NUMBER', 'INVALID_VERTEX_REF', 'MISSING_GEOMETRIC_VERTEX', 'MISSING_TOKEN', 'TOO_FEW_DIMENSIONS', 'TOO_FEW_VERTICES', 'TOO_MANY_DIMENSIONS', 'UNSUPPORTED_COMMAND', 'UNUSED_TOKENS', 'VERTEX_NOT_FOUND', 'NUMBER_OUT_OF_RANGE', 'INVALID_VALUE', 'INVALID_TEXTURE_OPTION', 'TOO_MANY_PROBLEMS', 'MISSING_FILE_NAME', 'FILE_NOT_FOUND', 'UNKNOWN_MATERIAL', 'NO_MATERIAL_DEFINED', 'INVALID_SMOOTHING_GROUP', 'MISSING_VERTEX_COLORS', 'FILE_SUBSTITUTION', 'LINE_TOO_LONG', 'INVALID_FILE_PATH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObjParseError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObjParseError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "endIndex": obj.get("endIndex"),
            "filePath": obj.get("filePath"),
            "line": obj.get("line"),
            "lineNumber": obj.get("lineNumber"),
            "startIndex": obj.get("startIndex")
        })
        return _obj



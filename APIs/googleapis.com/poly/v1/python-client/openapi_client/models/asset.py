# coding: utf-8

"""
    Poly API

    The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.file import File
from openapi_client.models.format import Format
from openapi_client.models.presentation_params import PresentationParams
from openapi_client.models.remix_info import RemixInfo
from typing import Optional, Set
from typing_extensions import Self

class Asset(BaseModel):
    """
    Represents and describes an asset in the Poly library. An asset is a 3D model or scene created using [Tilt Brush](//www.tiltbrush.com), [Blocks](//vr.google.com/blocks/), or any 3D program that produces a file that can be upload to Poly.
    """ # noqa: E501
    author_name: Optional[StrictStr] = Field(default=None, description="The author's publicly visible name. Use this name when giving credit to the author. For more information, see [Licensing](/poly/discover/licensing).", alias="authorName")
    create_time: Optional[StrictStr] = Field(default=None, description="For published assets, the time when the asset was published. For unpublished assets, the time when the asset was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="The human-readable description, set by the asset's author.")
    display_name: Optional[StrictStr] = Field(default=None, description="The human-readable name, set by the asset's author.", alias="displayName")
    formats: Optional[List[Format]] = Field(default=None, description="A list of Formats where each format describes one representation of the asset.")
    is_curated: Optional[StrictBool] = Field(default=None, description="Whether this asset has been curated by the Poly team.", alias="isCurated")
    license: Optional[StrictStr] = Field(default=None, description="The license under which the author has made the asset available for use, if any.")
    metadata: Optional[StrictStr] = Field(default=None, description="Application-defined opaque metadata for this asset. This field is only returned when querying for the signed-in user's own assets, not for public assets. This string is limited to 1K chars. It is up to the creator of the asset to define the format for this string (for example, JSON).")
    name: Optional[StrictStr] = Field(default=None, description="The unique identifier for the asset in the form: `assets/{ASSET_ID}`.")
    presentation_params: Optional[PresentationParams] = Field(default=None, alias="presentationParams")
    remix_info: Optional[RemixInfo] = Field(default=None, alias="remixInfo")
    thumbnail: Optional[File] = None
    update_time: Optional[StrictStr] = Field(default=None, description="The time when the asset was last modified. For published assets, whose contents are immutable, the update time changes only when metadata properties, such as visibility, are updated.", alias="updateTime")
    visibility: Optional[StrictStr] = Field(default=None, description="The visibility of the asset and who can access it.")
    __properties: ClassVar[List[str]] = ["authorName", "createTime", "description", "displayName", "formats", "isCurated", "license", "metadata", "name", "presentationParams", "remixInfo", "thumbnail", "updateTime", "visibility"]

    @field_validator('license')
    def license_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'CREATIVE_COMMONS_BY', 'ALL_RIGHTS_RESERVED']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'CREATIVE_COMMONS_BY', 'ALL_RIGHTS_RESERVED')")
        return value

    @field_validator('visibility')
    def visibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VISIBILITY_UNSPECIFIED', 'PRIVATE', 'UNLISTED', 'PUBLIC']):
            raise ValueError("must be one of enum values ('VISIBILITY_UNSPECIFIED', 'PRIVATE', 'UNLISTED', 'PUBLIC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Asset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in formats (list)
        _items = []
        if self.formats:
            for _item_formats in self.formats:
                if _item_formats:
                    _items.append(_item_formats.to_dict())
            _dict['formats'] = _items
        # override the default output from pydantic by calling `to_dict()` of presentation_params
        if self.presentation_params:
            _dict['presentationParams'] = self.presentation_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remix_info
        if self.remix_info:
            _dict['remixInfo'] = self.remix_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of thumbnail
        if self.thumbnail:
            _dict['thumbnail'] = self.thumbnail.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Asset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorName": obj.get("authorName"),
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "formats": [Format.from_dict(_item) for _item in obj["formats"]] if obj.get("formats") is not None else None,
            "isCurated": obj.get("isCurated"),
            "license": obj.get("license"),
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "presentationParams": PresentationParams.from_dict(obj["presentationParams"]) if obj.get("presentationParams") is not None else None,
            "remixInfo": RemixInfo.from_dict(obj["remixInfo"]) if obj.get("remixInfo") is not None else None,
            "thumbnail": File.from_dict(obj["thumbnail"]) if obj.get("thumbnail") is not None else None,
            "updateTime": obj.get("updateTime"),
            "visibility": obj.get("visibility")
        })
        return _obj



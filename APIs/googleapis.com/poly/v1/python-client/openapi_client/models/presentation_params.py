# coding: utf-8

"""
    Poly API

    The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.quaternion import Quaternion
from typing import Optional, Set
from typing_extensions import Self

class PresentationParams(BaseModel):
    """
    Hints for displaying the asset, based on information available when the asset was uploaded.
    """ # noqa: E501
    background_color: Optional[StrictStr] = Field(default=None, description="A background color which could be used for displaying the 3D asset in a 'thumbnail' or 'palette' style view. Authors have the option to set this background color when publishing or editing their asset. This is represented as a six-digit hexademical triplet specifying the RGB components of the background color, e.g. #FF0000 for Red.", alias="backgroundColor")
    color_space: Optional[StrictStr] = Field(default=None, description="The materials' diffuse/albedo color. This does not apply to vertex colors or texture maps.", alias="colorSpace")
    orienting_rotation: Optional[Quaternion] = Field(default=None, alias="orientingRotation")
    __properties: ClassVar[List[str]] = ["backgroundColor", "colorSpace", "orientingRotation"]

    @field_validator('color_space')
    def color_space_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'LINEAR', 'GAMMA']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'LINEAR', 'GAMMA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PresentationParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of orienting_rotation
        if self.orienting_rotation:
            _dict['orientingRotation'] = self.orienting_rotation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PresentationParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backgroundColor": obj.get("backgroundColor"),
            "colorSpace": obj.get("colorSpace"),
            "orientingRotation": Quaternion.from_dict(obj["orientingRotation"]) if obj.get("orientingRotation") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2alpha_condition import GoogleCloudRetailV2alphaCondition
from openapi_client.models.google_cloud_retail_v2alpha_rule_boost_action import GoogleCloudRetailV2alphaRuleBoostAction
from openapi_client.models.google_cloud_retail_v2alpha_rule_do_not_associate_action import GoogleCloudRetailV2alphaRuleDoNotAssociateAction
from openapi_client.models.google_cloud_retail_v2alpha_rule_filter_action import GoogleCloudRetailV2alphaRuleFilterAction
from openapi_client.models.google_cloud_retail_v2alpha_rule_force_return_facet_action import GoogleCloudRetailV2alphaRuleForceReturnFacetAction
from openapi_client.models.google_cloud_retail_v2alpha_rule_ignore_action import GoogleCloudRetailV2alphaRuleIgnoreAction
from openapi_client.models.google_cloud_retail_v2alpha_rule_oneway_synonyms_action import GoogleCloudRetailV2alphaRuleOnewaySynonymsAction
from openapi_client.models.google_cloud_retail_v2alpha_rule_redirect_action import GoogleCloudRetailV2alphaRuleRedirectAction
from openapi_client.models.google_cloud_retail_v2alpha_rule_remove_facet_action import GoogleCloudRetailV2alphaRuleRemoveFacetAction
from openapi_client.models.google_cloud_retail_v2alpha_rule_replacement_action import GoogleCloudRetailV2alphaRuleReplacementAction
from openapi_client.models.google_cloud_retail_v2alpha_rule_twoway_synonyms_action import GoogleCloudRetailV2alphaRuleTwowaySynonymsAction
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2alphaRule(BaseModel):
    """
    A rule is a condition-action pair * A condition defines when a rule is to be triggered. * An action specifies what occurs on that trigger. Currently rules only work for controls with SOLUTION_TYPE_SEARCH.
    """ # noqa: E501
    boost_action: Optional[GoogleCloudRetailV2alphaRuleBoostAction] = Field(default=None, alias="boostAction")
    condition: Optional[GoogleCloudRetailV2alphaCondition] = None
    do_not_associate_action: Optional[GoogleCloudRetailV2alphaRuleDoNotAssociateAction] = Field(default=None, alias="doNotAssociateAction")
    filter_action: Optional[GoogleCloudRetailV2alphaRuleFilterAction] = Field(default=None, alias="filterAction")
    force_return_facet_action: Optional[GoogleCloudRetailV2alphaRuleForceReturnFacetAction] = Field(default=None, alias="forceReturnFacetAction")
    ignore_action: Optional[GoogleCloudRetailV2alphaRuleIgnoreAction] = Field(default=None, alias="ignoreAction")
    oneway_synonyms_action: Optional[GoogleCloudRetailV2alphaRuleOnewaySynonymsAction] = Field(default=None, alias="onewaySynonymsAction")
    redirect_action: Optional[GoogleCloudRetailV2alphaRuleRedirectAction] = Field(default=None, alias="redirectAction")
    remove_facet_action: Optional[GoogleCloudRetailV2alphaRuleRemoveFacetAction] = Field(default=None, alias="removeFacetAction")
    replacement_action: Optional[GoogleCloudRetailV2alphaRuleReplacementAction] = Field(default=None, alias="replacementAction")
    twoway_synonyms_action: Optional[GoogleCloudRetailV2alphaRuleTwowaySynonymsAction] = Field(default=None, alias="twowaySynonymsAction")
    __properties: ClassVar[List[str]] = ["boostAction", "condition", "doNotAssociateAction", "filterAction", "forceReturnFacetAction", "ignoreAction", "onewaySynonymsAction", "redirectAction", "removeFacetAction", "replacementAction", "twowaySynonymsAction"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of boost_action
        if self.boost_action:
            _dict['boostAction'] = self.boost_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of condition
        if self.condition:
            _dict['condition'] = self.condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of do_not_associate_action
        if self.do_not_associate_action:
            _dict['doNotAssociateAction'] = self.do_not_associate_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filter_action
        if self.filter_action:
            _dict['filterAction'] = self.filter_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of force_return_facet_action
        if self.force_return_facet_action:
            _dict['forceReturnFacetAction'] = self.force_return_facet_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ignore_action
        if self.ignore_action:
            _dict['ignoreAction'] = self.ignore_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oneway_synonyms_action
        if self.oneway_synonyms_action:
            _dict['onewaySynonymsAction'] = self.oneway_synonyms_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of redirect_action
        if self.redirect_action:
            _dict['redirectAction'] = self.redirect_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remove_facet_action
        if self.remove_facet_action:
            _dict['removeFacetAction'] = self.remove_facet_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replacement_action
        if self.replacement_action:
            _dict['replacementAction'] = self.replacement_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of twoway_synonyms_action
        if self.twoway_synonyms_action:
            _dict['twowaySynonymsAction'] = self.twoway_synonyms_action.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boostAction": GoogleCloudRetailV2alphaRuleBoostAction.from_dict(obj["boostAction"]) if obj.get("boostAction") is not None else None,
            "condition": GoogleCloudRetailV2alphaCondition.from_dict(obj["condition"]) if obj.get("condition") is not None else None,
            "doNotAssociateAction": GoogleCloudRetailV2alphaRuleDoNotAssociateAction.from_dict(obj["doNotAssociateAction"]) if obj.get("doNotAssociateAction") is not None else None,
            "filterAction": GoogleCloudRetailV2alphaRuleFilterAction.from_dict(obj["filterAction"]) if obj.get("filterAction") is not None else None,
            "forceReturnFacetAction": GoogleCloudRetailV2alphaRuleForceReturnFacetAction.from_dict(obj["forceReturnFacetAction"]) if obj.get("forceReturnFacetAction") is not None else None,
            "ignoreAction": GoogleCloudRetailV2alphaRuleIgnoreAction.from_dict(obj["ignoreAction"]) if obj.get("ignoreAction") is not None else None,
            "onewaySynonymsAction": GoogleCloudRetailV2alphaRuleOnewaySynonymsAction.from_dict(obj["onewaySynonymsAction"]) if obj.get("onewaySynonymsAction") is not None else None,
            "redirectAction": GoogleCloudRetailV2alphaRuleRedirectAction.from_dict(obj["redirectAction"]) if obj.get("redirectAction") is not None else None,
            "removeFacetAction": GoogleCloudRetailV2alphaRuleRemoveFacetAction.from_dict(obj["removeFacetAction"]) if obj.get("removeFacetAction") is not None else None,
            "replacementAction": GoogleCloudRetailV2alphaRuleReplacementAction.from_dict(obj["replacementAction"]) if obj.get("replacementAction") is not None else None,
            "twowaySynonymsAction": GoogleCloudRetailV2alphaRuleTwowaySynonymsAction.from_dict(obj["twowaySynonymsAction"]) if obj.get("twowaySynonymsAction") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2alpha_logging_config_log_generation_rule import GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule
from openapi_client.models.google_cloud_retail_v2alpha_logging_config_service_log_generation_rule import GoogleCloudRetailV2alphaLoggingConfigServiceLogGenerationRule
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2alphaLoggingConfig(BaseModel):
    """
    Project level logging config to control what level of log will be generated and written to Cloud Logging.
    """ # noqa: E501
    default_log_generation_rule: Optional[GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule] = Field(default=None, alias="defaultLogGenerationRule")
    name: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The name of the LoggingConfig singleton resource. Format: projects/*/loggingConfig")
    service_log_generation_rules: Optional[List[GoogleCloudRetailV2alphaLoggingConfigServiceLogGenerationRule]] = Field(default=None, description="Controls logging configurations more granularly for each supported service. This overrides the default_log_generation_rule for the services specified. For those not mentioned, they will fallback to the default log generation rule.", alias="serviceLogGenerationRules")
    __properties: ClassVar[List[str]] = ["defaultLogGenerationRule", "name", "serviceLogGenerationRules"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaLoggingConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_log_generation_rule
        if self.default_log_generation_rule:
            _dict['defaultLogGenerationRule'] = self.default_log_generation_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in service_log_generation_rules (list)
        _items = []
        if self.service_log_generation_rules:
            for _item_service_log_generation_rules in self.service_log_generation_rules:
                if _item_service_log_generation_rules:
                    _items.append(_item_service_log_generation_rules.to_dict())
            _dict['serviceLogGenerationRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaLoggingConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultLogGenerationRule": GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule.from_dict(obj["defaultLogGenerationRule"]) if obj.get("defaultLogGenerationRule") is not None else None,
            "name": obj.get("name"),
            "serviceLogGenerationRules": [GoogleCloudRetailV2alphaLoggingConfigServiceLogGenerationRule.from_dict(_item) for _item in obj["serviceLogGenerationRules"]] if obj.get("serviceLogGenerationRules") is not None else None
        })
        return _obj



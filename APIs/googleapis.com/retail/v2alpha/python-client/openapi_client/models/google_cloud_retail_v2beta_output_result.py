# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2beta_big_query_output_result import GoogleCloudRetailV2betaBigQueryOutputResult
from openapi_client.models.google_cloud_retail_v2beta_gcs_output_result import GoogleCloudRetailV2betaGcsOutputResult
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2betaOutputResult(BaseModel):
    """
    Output result that stores the information about where the exported data is stored.
    """ # noqa: E501
    bigquery_result: Optional[List[GoogleCloudRetailV2betaBigQueryOutputResult]] = Field(default=None, description="The BigQuery location where the result is stored.", alias="bigqueryResult")
    gcs_result: Optional[List[GoogleCloudRetailV2betaGcsOutputResult]] = Field(default=None, description="The Google Cloud Storage location where the result is stored.", alias="gcsResult")
    __properties: ClassVar[List[str]] = ["bigqueryResult", "gcsResult"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2betaOutputResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bigquery_result (list)
        _items = []
        if self.bigquery_result:
            for _item_bigquery_result in self.bigquery_result:
                if _item_bigquery_result:
                    _items.append(_item_bigquery_result.to_dict())
            _dict['bigqueryResult'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in gcs_result (list)
        _items = []
        if self.gcs_result:
            for _item_gcs_result in self.gcs_result:
                if _item_gcs_result:
                    _items.append(_item_gcs_result.to_dict())
            _dict['gcsResult'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2betaOutputResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bigqueryResult": [GoogleCloudRetailV2betaBigQueryOutputResult.from_dict(_item) for _item in obj["bigqueryResult"]] if obj.get("bigqueryResult") is not None else None,
            "gcsResult": [GoogleCloudRetailV2betaGcsOutputResult.from_dict(_item) for _item in obj["gcsResult"]] if obj.get("gcsResult") is not None else None
        })
        return _obj



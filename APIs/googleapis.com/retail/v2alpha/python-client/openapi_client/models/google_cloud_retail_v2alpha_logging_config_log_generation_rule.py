# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule(BaseModel):
    """
    The logging configurations for services supporting log generation.
    """ # noqa: E501
    info_log_sample_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The log sample rate for INFO level log entries. You can use this to reduce the number of entries generated for INFO level logs. DO NOT set this field if the logging_level is not LoggingLevel.LOG_ALL. Otherwise, an INVALID_ARGUMENT error is returned. Sample rate for INFO logs defaults to 1 when unset (generate and send all INFO logs to Cloud Logging). Its value must be greater than 0 and less than or equal to 1.", alias="infoLogSampleRate")
    logging_level: Optional[StrictStr] = Field(default=None, description="The logging level. By default it is set to `LOG_WARNINGS_AND_ABOVE`.", alias="loggingLevel")
    __properties: ClassVar[List[str]] = ["infoLogSampleRate", "loggingLevel"]

    @field_validator('logging_level')
    def logging_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LOGGING_LEVEL_UNSPECIFIED', 'LOGGING_DISABLED', 'LOG_ERRORS_AND_ABOVE', 'LOG_WARNINGS_AND_ABOVE', 'LOG_ALL']):
            raise ValueError("must be one of enum values ('LOGGING_LEVEL_UNSPECIFIED', 'LOGGING_DISABLED', 'LOG_ERRORS_AND_ABOVE', 'LOG_WARNINGS_AND_ABOVE', 'LOG_ALL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "infoLogSampleRate": obj.get("infoLogSampleRate"),
            "loggingLevel": obj.get("loggingLevel")
        })
        return _obj



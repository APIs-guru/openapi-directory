# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2alpha_rule_force_return_facet_action_facet_position_adjustment import GoogleCloudRetailV2alphaRuleForceReturnFacetActionFacetPositionAdjustment
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2alphaRuleForceReturnFacetAction(BaseModel):
    """
    Force returns an attribute/facet in the request around a certain position or above. * Rule Condition: Must specify non-empty Condition.query_terms (for search only) or Condition.page_categories (for browse only), but can't specify both. * Action Inputs: attribute name, position * Action Result: Will force return a facet key around a certain position or above if the condition is satisfied. Example: Suppose the query is \"shoes\", the Condition.query_terms is \"shoes\", the ForceReturnFacetAction.FacetPositionAdjustment.attribute_name is \"size\" and the ForceReturnFacetAction.FacetPositionAdjustment.position is 8. Two cases: a) The facet key \"size\" is not already in the top 8 slots, then the facet \"size\" will appear at a position close to 8. b) The facet key \"size\" in among the top 8 positions in the request, then it will stay at its current rank.
    """ # noqa: E501
    facet_position_adjustments: Optional[List[GoogleCloudRetailV2alphaRuleForceReturnFacetActionFacetPositionAdjustment]] = Field(default=None, description="Each instance corresponds to a force return attribute for the given condition. There can't be more 3 instances here.", alias="facetPositionAdjustments")
    __properties: ClassVar[List[str]] = ["facetPositionAdjustments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaRuleForceReturnFacetAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in facet_position_adjustments (list)
        _items = []
        if self.facet_position_adjustments:
            for _item_facet_position_adjustments in self.facet_position_adjustments:
                if _item_facet_position_adjustments:
                    _items.append(_item_facet_position_adjustments.to_dict())
            _dict['facetPositionAdjustments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaRuleForceReturnFacetAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "facetPositionAdjustments": [GoogleCloudRetailV2alphaRuleForceReturnFacetActionFacetPositionAdjustment.from_dict(_item) for _item in obj["facetPositionAdjustments"]] if obj.get("facetPositionAdjustments") is not None else None
        })
        return _obj



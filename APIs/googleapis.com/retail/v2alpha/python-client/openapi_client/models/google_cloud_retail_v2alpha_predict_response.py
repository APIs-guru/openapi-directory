# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2alpha_predict_response_prediction_result import GoogleCloudRetailV2alphaPredictResponsePredictionResult
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2alphaPredictResponse(BaseModel):
    """
    Response message for predict method.
    """ # noqa: E501
    attribution_token: Optional[StrictStr] = Field(default=None, description="A unique attribution token. This should be included in the UserEvent logs resulting from this recommendation, which enables accurate attribution of recommendation model performance.", alias="attributionToken")
    missing_ids: Optional[List[StrictStr]] = Field(default=None, description="IDs of products in the request that were missing from the inventory.", alias="missingIds")
    results: Optional[List[GoogleCloudRetailV2alphaPredictResponsePredictionResult]] = Field(default=None, description="A list of recommended products. The order represents the ranking (from the most relevant product to the least).")
    validate_only: Optional[StrictBool] = Field(default=None, description="True if the validateOnly property was set in the request.", alias="validateOnly")
    __properties: ClassVar[List[str]] = ["attributionToken", "missingIds", "results", "validateOnly"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaPredictResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item_results in self.results:
                if _item_results:
                    _items.append(_item_results.to_dict())
            _dict['results'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaPredictResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributionToken": obj.get("attributionToken"),
            "missingIds": obj.get("missingIds"),
            "results": [GoogleCloudRetailV2alphaPredictResponsePredictionResult.from_dict(_item) for _item in obj["results"]] if obj.get("results") is not None else None,
            "validateOnly": obj.get("validateOnly")
        })
        return _obj



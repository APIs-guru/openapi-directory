# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2alpha_custom_attribute import GoogleCloudRetailV2alphaCustomAttribute
from openapi_client.models.google_cloud_retail_v2alpha_search_response_facet import GoogleCloudRetailV2alphaSearchResponseFacet
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult(BaseModel):
    """
    Resource that represents completion results.
    """ # noqa: E501
    attributes: Optional[Dict[str, GoogleCloudRetailV2alphaCustomAttribute]] = Field(default=None, description="Custom attributes for the suggestion term. * For \"user-data\", the attributes are additional custom attributes ingested through BigQuery. * For \"cloud-retail\", the attributes are product attributes generated by Cloud Retail. It requires UserEvent.product_details is imported properly.")
    facets: Optional[List[GoogleCloudRetailV2alphaSearchResponseFacet]] = Field(default=None, description="Facet information for the suggestion term. Gives the number of items resulting from a search with this suggestion term for each facet. This is an experimental feature for limited customers. If you want to receive this facet information, reach out to the Retail support team.")
    suggestion: Optional[StrictStr] = Field(default=None, description="The suggestion for the query.")
    total_product_count: Optional[StrictInt] = Field(default=None, description="Total number of products associated with a search with this suggestion. This is an experimental feature for limited customers. If you want to receive this product count information, reach out to the Retail support team.", alias="totalProductCount")
    __properties: ClassVar[List[str]] = ["attributes", "facets", "suggestion", "totalProductCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in attributes (dict)
        _field_dict = {}
        if self.attributes:
            for _key_attributes in self.attributes:
                if self.attributes[_key_attributes]:
                    _field_dict[_key_attributes] = self.attributes[_key_attributes].to_dict()
            _dict['attributes'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in facets (list)
        _items = []
        if self.facets:
            for _item_facets in self.facets:
                if _item_facets:
                    _items.append(_item_facets.to_dict())
            _dict['facets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": dict(
                (_k, GoogleCloudRetailV2alphaCustomAttribute.from_dict(_v))
                for _k, _v in obj["attributes"].items()
            )
            if obj.get("attributes") is not None
            else None,
            "facets": [GoogleCloudRetailV2alphaSearchResponseFacet.from_dict(_item) for _item in obj["facets"]] if obj.get("facets") is not None else None,
            "suggestion": obj.get("suggestion"),
            "totalProductCount": obj.get("totalProductCount")
        })
        return _obj



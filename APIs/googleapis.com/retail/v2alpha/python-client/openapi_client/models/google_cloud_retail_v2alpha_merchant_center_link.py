# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2alpha_merchant_center_feed_filter import GoogleCloudRetailV2alphaMerchantCenterFeedFilter
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2alphaMerchantCenterLink(BaseModel):
    """
    Represents a link between a Merchant Center account and a branch. After a link is established, products from the linked Merchant Center account are streamed to the linked branch.
    """ # noqa: E501
    branch_id: Optional[StrictStr] = Field(default=None, description="The branch ID (e.g. 0/1/2) within this catalog that products from merchant_center_account_id are streamed to. When updating this field, an empty value will use the currently configured default branch. However, changing the default branch later on won't change the linked branch here. A single branch ID can only have one linked Merchant Center account ID.", alias="branchId")
    destinations: Optional[List[StrictStr]] = Field(default=None, description="String representing the destination to import for, all if left empty. List of possible values is given in [Included destination](https://support.google.com/merchants/answer/7501026). List of allowed string values: \"Shopping_ads\", \"Buy_on_google_listings\", \"Display_ads\", \"Local_inventory _ads\", \"Free_listings\", \"Free_local_listings\" NOTE: The string values are case sensitive.")
    feeds: Optional[List[GoogleCloudRetailV2alphaMerchantCenterFeedFilter]] = Field(default=None, description="Criteria for the Merchant Center feeds to be ingested via the link. All offers will be ingested if the list is empty. Otherwise the offers will be ingested from selected feeds.")
    language_code: Optional[StrictStr] = Field(default=None, description="Language of the title/description and other string attributes. Use language tags defined by [BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). ISO 639-1. This specifies the language of offers in Merchant Center that will be accepted. If empty no language filtering will be performed. Example value: `en`.", alias="languageCode")
    merchant_center_account_id: Optional[StrictStr] = Field(default=None, description="Required. The linked [Merchant Center account ID](https://developers.google.com/shopping-content/guides/accountstatuses). The account must be a standalone account or a sub-account of a MCA.", alias="merchantCenterAccountId")
    region_code: Optional[StrictStr] = Field(default=None, description="Region code of offers to accept. 2-letter Uppercase ISO 3166-1 alpha-2 code. List of values can be found [here](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry) under the `region` tag. If left blank no region filtering will be performed. Example value: `US`.", alias="regionCode")
    __properties: ClassVar[List[str]] = ["branchId", "destinations", "feeds", "languageCode", "merchantCenterAccountId", "regionCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaMerchantCenterLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in feeds (list)
        _items = []
        if self.feeds:
            for _item_feeds in self.feeds:
                if _item_feeds:
                    _items.append(_item_feeds.to_dict())
            _dict['feeds'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaMerchantCenterLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "branchId": obj.get("branchId"),
            "destinations": obj.get("destinations"),
            "feeds": [GoogleCloudRetailV2alphaMerchantCenterFeedFilter.from_dict(_item) for _item in obj["feeds"]] if obj.get("feeds") is not None else None,
            "languageCode": obj.get("languageCode"),
            "merchantCenterAccountId": obj.get("merchantCenterAccountId"),
            "regionCode": obj.get("regionCode")
        })
        return _obj



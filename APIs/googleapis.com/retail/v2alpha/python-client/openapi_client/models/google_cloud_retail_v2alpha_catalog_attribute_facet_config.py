# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2alpha_catalog_attribute_facet_config_ignored_facet_values import GoogleCloudRetailV2alphaCatalogAttributeFacetConfigIgnoredFacetValues
from openapi_client.models.google_cloud_retail_v2alpha_catalog_attribute_facet_config_merged_facet import GoogleCloudRetailV2alphaCatalogAttributeFacetConfigMergedFacet
from openapi_client.models.google_cloud_retail_v2alpha_catalog_attribute_facet_config_merged_facet_value import GoogleCloudRetailV2alphaCatalogAttributeFacetConfigMergedFacetValue
from openapi_client.models.google_cloud_retail_v2alpha_catalog_attribute_facet_config_rerank_config import GoogleCloudRetailV2alphaCatalogAttributeFacetConfigRerankConfig
from openapi_client.models.google_cloud_retail_v2alpha_interval import GoogleCloudRetailV2alphaInterval
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2alphaCatalogAttributeFacetConfig(BaseModel):
    """
    Possible options for the facet that corresponds to the current attribute config.
    """ # noqa: E501
    facet_intervals: Optional[List[GoogleCloudRetailV2alphaInterval]] = Field(default=None, description="If you don't set the facet SearchRequest.FacetSpec.FacetKey.intervals in the request to a numerical attribute, then we use the computed intervals with rounded bounds obtained from all its product numerical attribute values. The computed intervals might not be ideal for some attributes. Therefore, we give you the option to overwrite them with the facet_intervals field. The maximum of facet intervals per CatalogAttribute is 40. Each interval must have a lower bound or an upper bound. If both bounds are provided, then the lower bound must be smaller or equal than the upper bound.", alias="facetIntervals")
    ignored_facet_values: Optional[List[GoogleCloudRetailV2alphaCatalogAttributeFacetConfigIgnoredFacetValues]] = Field(default=None, description="Each instance represents a list of attribute values to ignore as facet values for a specific time range. The maximum number of instances per CatalogAttribute is 25.", alias="ignoredFacetValues")
    merged_facet: Optional[GoogleCloudRetailV2alphaCatalogAttributeFacetConfigMergedFacet] = Field(default=None, alias="mergedFacet")
    merged_facet_values: Optional[List[GoogleCloudRetailV2alphaCatalogAttributeFacetConfigMergedFacetValue]] = Field(default=None, description="Each instance replaces a list of facet values by a merged facet value. If a facet value is not in any list, then it will stay the same. To avoid conflicts, only paths of length 1 are accepted. In other words, if \"dark_blue\" merged into \"BLUE\", then the latter can't merge into \"blues\" because this would create a path of length 2. The maximum number of instances of MergedFacetValue per CatalogAttribute is 100. This feature is available only for textual custom attributes.", alias="mergedFacetValues")
    rerank_config: Optional[GoogleCloudRetailV2alphaCatalogAttributeFacetConfigRerankConfig] = Field(default=None, alias="rerankConfig")
    __properties: ClassVar[List[str]] = ["facetIntervals", "ignoredFacetValues", "mergedFacet", "mergedFacetValues", "rerankConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaCatalogAttributeFacetConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in facet_intervals (list)
        _items = []
        if self.facet_intervals:
            for _item_facet_intervals in self.facet_intervals:
                if _item_facet_intervals:
                    _items.append(_item_facet_intervals.to_dict())
            _dict['facetIntervals'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ignored_facet_values (list)
        _items = []
        if self.ignored_facet_values:
            for _item_ignored_facet_values in self.ignored_facet_values:
                if _item_ignored_facet_values:
                    _items.append(_item_ignored_facet_values.to_dict())
            _dict['ignoredFacetValues'] = _items
        # override the default output from pydantic by calling `to_dict()` of merged_facet
        if self.merged_facet:
            _dict['mergedFacet'] = self.merged_facet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in merged_facet_values (list)
        _items = []
        if self.merged_facet_values:
            for _item_merged_facet_values in self.merged_facet_values:
                if _item_merged_facet_values:
                    _items.append(_item_merged_facet_values.to_dict())
            _dict['mergedFacetValues'] = _items
        # override the default output from pydantic by calling `to_dict()` of rerank_config
        if self.rerank_config:
            _dict['rerankConfig'] = self.rerank_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaCatalogAttributeFacetConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "facetIntervals": [GoogleCloudRetailV2alphaInterval.from_dict(_item) for _item in obj["facetIntervals"]] if obj.get("facetIntervals") is not None else None,
            "ignoredFacetValues": [GoogleCloudRetailV2alphaCatalogAttributeFacetConfigIgnoredFacetValues.from_dict(_item) for _item in obj["ignoredFacetValues"]] if obj.get("ignoredFacetValues") is not None else None,
            "mergedFacet": GoogleCloudRetailV2alphaCatalogAttributeFacetConfigMergedFacet.from_dict(obj["mergedFacet"]) if obj.get("mergedFacet") is not None else None,
            "mergedFacetValues": [GoogleCloudRetailV2alphaCatalogAttributeFacetConfigMergedFacetValue.from_dict(_item) for _item in obj["mergedFacetValues"]] if obj.get("mergedFacetValues") is not None else None,
            "rerankConfig": GoogleCloudRetailV2alphaCatalogAttributeFacetConfigRerankConfig.from_dict(obj["rerankConfig"]) if obj.get("rerankConfig") is not None else None
        })
        return _obj



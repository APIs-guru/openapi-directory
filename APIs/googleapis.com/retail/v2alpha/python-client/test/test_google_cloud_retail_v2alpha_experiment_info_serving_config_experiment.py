# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_retail_v2alpha_experiment_info_serving_config_experiment import GoogleCloudRetailV2alphaExperimentInfoServingConfigExperiment

class TestGoogleCloudRetailV2alphaExperimentInfoServingConfigExperiment(unittest.TestCase):
    """GoogleCloudRetailV2alphaExperimentInfoServingConfigExperiment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudRetailV2alphaExperimentInfoServingConfigExperiment:
        """Test GoogleCloudRetailV2alphaExperimentInfoServingConfigExperiment
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudRetailV2alphaExperimentInfoServingConfigExperiment`
        """
        model = GoogleCloudRetailV2alphaExperimentInfoServingConfigExperiment()
        if include_optional:
            return GoogleCloudRetailV2alphaExperimentInfoServingConfigExperiment(
                experiment_serving_config = '',
                original_serving_config = ''
            )
        else:
            return GoogleCloudRetailV2alphaExperimentInfoServingConfigExperiment(
        )
        """

    def testGoogleCloudRetailV2alphaExperimentInfoServingConfigExperiment(self):
        """Test GoogleCloudRetailV2alphaExperimentInfoServingConfigExperiment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

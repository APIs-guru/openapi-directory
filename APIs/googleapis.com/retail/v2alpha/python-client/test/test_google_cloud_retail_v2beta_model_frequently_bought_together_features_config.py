# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_retail_v2beta_model_frequently_bought_together_features_config import GoogleCloudRetailV2betaModelFrequentlyBoughtTogetherFeaturesConfig

class TestGoogleCloudRetailV2betaModelFrequentlyBoughtTogetherFeaturesConfig(unittest.TestCase):
    """GoogleCloudRetailV2betaModelFrequentlyBoughtTogetherFeaturesConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudRetailV2betaModelFrequentlyBoughtTogetherFeaturesConfig:
        """Test GoogleCloudRetailV2betaModelFrequentlyBoughtTogetherFeaturesConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudRetailV2betaModelFrequentlyBoughtTogetherFeaturesConfig`
        """
        model = GoogleCloudRetailV2betaModelFrequentlyBoughtTogetherFeaturesConfig()
        if include_optional:
            return GoogleCloudRetailV2betaModelFrequentlyBoughtTogetherFeaturesConfig(
                context_products_type = 'CONTEXT_PRODUCTS_TYPE_UNSPECIFIED'
            )
        else:
            return GoogleCloudRetailV2betaModelFrequentlyBoughtTogetherFeaturesConfig(
        )
        """

    def testGoogleCloudRetailV2betaModelFrequentlyBoughtTogetherFeaturesConfig(self):
        """Test GoogleCloudRetailV2betaModelFrequentlyBoughtTogetherFeaturesConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

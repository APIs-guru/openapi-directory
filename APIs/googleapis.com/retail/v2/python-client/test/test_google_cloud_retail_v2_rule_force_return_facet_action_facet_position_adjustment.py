# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_retail_v2_rule_force_return_facet_action_facet_position_adjustment import GoogleCloudRetailV2RuleForceReturnFacetActionFacetPositionAdjustment

class TestGoogleCloudRetailV2RuleForceReturnFacetActionFacetPositionAdjustment(unittest.TestCase):
    """GoogleCloudRetailV2RuleForceReturnFacetActionFacetPositionAdjustment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudRetailV2RuleForceReturnFacetActionFacetPositionAdjustment:
        """Test GoogleCloudRetailV2RuleForceReturnFacetActionFacetPositionAdjustment
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudRetailV2RuleForceReturnFacetActionFacetPositionAdjustment`
        """
        model = GoogleCloudRetailV2RuleForceReturnFacetActionFacetPositionAdjustment()
        if include_optional:
            return GoogleCloudRetailV2RuleForceReturnFacetActionFacetPositionAdjustment(
                attribute_name = '',
                position = 56
            )
        else:
            return GoogleCloudRetailV2RuleForceReturnFacetActionFacetPositionAdjustment(
        )
        """

    def testGoogleCloudRetailV2RuleForceReturnFacetActionFacetPositionAdjustment(self):
        """Test GoogleCloudRetailV2RuleForceReturnFacetActionFacetPositionAdjustment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

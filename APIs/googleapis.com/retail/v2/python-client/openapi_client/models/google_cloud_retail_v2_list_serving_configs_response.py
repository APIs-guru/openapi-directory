# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2_serving_config import GoogleCloudRetailV2ServingConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2ListServingConfigsResponse(BaseModel):
    """
    Response for ListServingConfigs method.
    """ # noqa: E501
    next_page_token: Optional[StrictStr] = Field(default=None, description="Pagination token, if not returned indicates the last page.", alias="nextPageToken")
    serving_configs: Optional[List[GoogleCloudRetailV2ServingConfig]] = Field(default=None, description="All the ServingConfigs for a given catalog.", alias="servingConfigs")
    __properties: ClassVar[List[str]] = ["nextPageToken", "servingConfigs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2ListServingConfigsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in serving_configs (list)
        _items = []
        if self.serving_configs:
            for _item_serving_configs in self.serving_configs:
                if _item_serving_configs:
                    _items.append(_item_serving_configs.to_dict())
            _dict['servingConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2ListServingConfigsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nextPageToken": obj.get("nextPageToken"),
            "servingConfigs": [GoogleCloudRetailV2ServingConfig.from_dict(_item) for _item in obj["servingConfigs"]] if obj.get("servingConfigs") is not None else None
        })
        return _obj



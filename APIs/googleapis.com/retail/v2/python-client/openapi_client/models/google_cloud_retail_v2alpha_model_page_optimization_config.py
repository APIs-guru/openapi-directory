# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2alpha_model_page_optimization_config_panel import GoogleCloudRetailV2alphaModelPageOptimizationConfigPanel
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2alphaModelPageOptimizationConfig(BaseModel):
    """
    The PageOptimizationConfig for model training. This determines how many panels to optimize for, and which serving configs to consider for each panel. The purpose of this model is to optimize which ServingConfig to show on which panels in way that optimizes the visitors shopping journey.
    """ # noqa: E501
    page_optimization_event_type: Optional[StrictStr] = Field(default=None, description="Required. The type of UserEvent this page optimization is shown for. Each page has an associated event type - this will be the corresponding event type for the page that the page optimization model is used on. Supported types: * `add-to-cart`: Products being added to cart. * `detail-page-view`: Products detail page viewed. * `home-page-view`: Homepage viewed * `category-page-view`: Homepage viewed * `shopping-cart-page-view`: User viewing a shopping cart. `home-page-view` only allows models with type `recommended-for-you`. All other page_optimization_event_type allow all Model.types.", alias="pageOptimizationEventType")
    panels: Optional[List[GoogleCloudRetailV2alphaModelPageOptimizationConfigPanel]] = Field(default=None, description="Required. A list of panel configurations. Limit = 5.")
    restriction: Optional[StrictStr] = Field(default=None, description="Optional. How to restrict results across panels e.g. can the same ServingConfig be shown on multiple panels at once. If unspecified, default to `UNIQUE_MODEL_RESTRICTION`.")
    __properties: ClassVar[List[str]] = ["pageOptimizationEventType", "panels", "restriction"]

    @field_validator('restriction')
    def restriction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESTRICTION_UNSPECIFIED', 'NO_RESTRICTION', 'UNIQUE_SERVING_CONFIG_RESTRICTION', 'UNIQUE_MODEL_RESTRICTION', 'UNIQUE_MODEL_TYPE_RESTRICTION']):
            raise ValueError("must be one of enum values ('RESTRICTION_UNSPECIFIED', 'NO_RESTRICTION', 'UNIQUE_SERVING_CONFIG_RESTRICTION', 'UNIQUE_MODEL_RESTRICTION', 'UNIQUE_MODEL_TYPE_RESTRICTION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaModelPageOptimizationConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in panels (list)
        _items = []
        if self.panels:
            for _item_panels in self.panels:
                if _item_panels:
                    _items.append(_item_panels.to_dict())
            _dict['panels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaModelPageOptimizationConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pageOptimizationEventType": obj.get("pageOptimizationEventType"),
            "panels": [GoogleCloudRetailV2alphaModelPageOptimizationConfigPanel.from_dict(_item) for _item in obj["panels"]] if obj.get("panels") is not None else None,
            "restriction": obj.get("restriction")
        })
        return _obj



# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2_import_errors_config import GoogleCloudRetailV2ImportErrorsConfig
from openapi_client.models.google_cloud_retail_v2_product_input_config import GoogleCloudRetailV2ProductInputConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2ImportProductsRequest(BaseModel):
    """
    Request message for Import methods.
    """ # noqa: E501
    errors_config: Optional[GoogleCloudRetailV2ImportErrorsConfig] = Field(default=None, alias="errorsConfig")
    input_config: Optional[GoogleCloudRetailV2ProductInputConfig] = Field(default=None, alias="inputConfig")
    notification_pubsub_topic: Optional[StrictStr] = Field(default=None, description="Full Pub/Sub topic name for receiving notification. If this field is set, when the import is finished, a notification is sent to specified Pub/Sub topic. The message data is JSON string of a Operation. Format of the Pub/Sub topic is `projects/{project}/topics/{topic}`. It has to be within the same project as ImportProductsRequest.parent. Make sure that both `cloud-retail-customer-data-access@system.gserviceaccount.com` and `service-@gcp-sa-retail.iam.gserviceaccount.com` have the `pubsub.topics.publish` IAM permission on the topic. Only supported when ImportProductsRequest.reconciliation_mode is set to `FULL`.", alias="notificationPubsubTopic")
    reconciliation_mode: Optional[StrictStr] = Field(default=None, description="The mode of reconciliation between existing products and the products to be imported. Defaults to ReconciliationMode.INCREMENTAL.", alias="reconciliationMode")
    request_id: Optional[StrictStr] = Field(default=None, description="Deprecated. This field has no effect.", alias="requestId")
    update_mask: Optional[StrictStr] = Field(default=None, description="Indicates which fields in the provided imported `products` to update. If not set, all fields are updated. If provided, only the existing product fields are updated. Missing products will not be created.", alias="updateMask")
    __properties: ClassVar[List[str]] = ["errorsConfig", "inputConfig", "notificationPubsubTopic", "reconciliationMode", "requestId", "updateMask"]

    @field_validator('reconciliation_mode')
    def reconciliation_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RECONCILIATION_MODE_UNSPECIFIED', 'INCREMENTAL', 'FULL']):
            raise ValueError("must be one of enum values ('RECONCILIATION_MODE_UNSPECIFIED', 'INCREMENTAL', 'FULL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2ImportProductsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of errors_config
        if self.errors_config:
            _dict['errorsConfig'] = self.errors_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input_config
        if self.input_config:
            _dict['inputConfig'] = self.input_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2ImportProductsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorsConfig": GoogleCloudRetailV2ImportErrorsConfig.from_dict(obj["errorsConfig"]) if obj.get("errorsConfig") is not None else None,
            "inputConfig": GoogleCloudRetailV2ProductInputConfig.from_dict(obj["inputConfig"]) if obj.get("inputConfig") is not None else None,
            "notificationPubsubTopic": obj.get("notificationPubsubTopic"),
            "reconciliationMode": obj.get("reconciliationMode"),
            "requestId": obj.get("requestId"),
            "updateMask": obj.get("updateMask")
        })
        return _obj



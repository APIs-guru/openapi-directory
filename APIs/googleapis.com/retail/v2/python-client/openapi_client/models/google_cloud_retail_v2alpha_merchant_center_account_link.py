# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2alpha_merchant_center_account_link_merchant_center_feed_filter import GoogleCloudRetailV2alphaMerchantCenterAccountLinkMerchantCenterFeedFilter
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2alphaMerchantCenterAccountLink(BaseModel):
    """
    Represents a link between a Merchant Center account and a branch. After a link is established, products from the linked Merchant Center account are streamed to the linked branch.
    """ # noqa: E501
    branch_id: Optional[StrictStr] = Field(default=None, description="Required. The branch ID (e.g. 0/1/2) within the catalog that products from merchant_center_account_id are streamed to. When updating this field, an empty value will use the currently configured default branch. However, changing the default branch later on won't change the linked branch here. A single branch ID can only have one linked Merchant Center account ID.", alias="branchId")
    feed_filters: Optional[List[GoogleCloudRetailV2alphaMerchantCenterAccountLinkMerchantCenterFeedFilter]] = Field(default=None, description="Criteria for the Merchant Center feeds to be ingested via the link. All offers will be ingested if the list is empty. Otherwise the offers will be ingested from selected feeds.", alias="feedFilters")
    feed_label: Optional[StrictStr] = Field(default=None, description="The FeedLabel used to perform filtering. Note: this replaces [region_id](https://developers.google.com/shopping-content/reference/rest/v2.1/products#Product.FIELDS.feed_label). Example value: `US`. Example value: `FeedLabel1`.", alias="feedLabel")
    id: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. MerchantCenterAccountLink identifier, which is the final component of name. This field is auto generated and follows the convention: `BranchId_MerchantCenterAccountId`. `projects/*/locations/global/catalogs/default_catalog/merchantCenterAccountLinks/id_1`.")
    language_code: Optional[StrictStr] = Field(default=None, description="Language of the title/description and other string attributes. Use language tags defined by [BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). ISO 639-1. This specifies the language of offers in Merchant Center that will be accepted. If empty, no language filtering will be performed. Example value: `en`.", alias="languageCode")
    merchant_center_account_id: Optional[StrictStr] = Field(default=None, description="Required. The linked [Merchant center account id](https://developers.google.com/shopping-content/guides/accountstatuses). The account must be a standalone account or a sub-account of a MCA.", alias="merchantCenterAccountId")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. Full resource name of the Merchant Center Account Link, such as `projects/*/locations/global/catalogs/default_catalog/merchantCenterAccountLinks/merchant_center_account_link`.")
    project_id: Optional[StrictStr] = Field(default=None, description="Output only. Google Cloud project ID.", alias="projectId")
    source: Optional[StrictStr] = Field(default=None, description="Optional. An optional arbitrary string that could be used as a tag for tracking link source.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Represents the state of the link.")
    __properties: ClassVar[List[str]] = ["branchId", "feedFilters", "feedLabel", "id", "languageCode", "merchantCenterAccountId", "name", "projectId", "source", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PENDING', 'ACTIVE', 'FAILED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PENDING', 'ACTIVE', 'FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaMerchantCenterAccountLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "name",
            "project_id",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in feed_filters (list)
        _items = []
        if self.feed_filters:
            for _item_feed_filters in self.feed_filters:
                if _item_feed_filters:
                    _items.append(_item_feed_filters.to_dict())
            _dict['feedFilters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaMerchantCenterAccountLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "branchId": obj.get("branchId"),
            "feedFilters": [GoogleCloudRetailV2alphaMerchantCenterAccountLinkMerchantCenterFeedFilter.from_dict(_item) for _item in obj["feedFilters"]] if obj.get("feedFilters") is not None else None,
            "feedLabel": obj.get("feedLabel"),
            "id": obj.get("id"),
            "languageCode": obj.get("languageCode"),
            "merchantCenterAccountId": obj.get("merchantCenterAccountId"),
            "name": obj.get("name"),
            "projectId": obj.get("projectId"),
            "source": obj.get("source"),
            "state": obj.get("state")
        })
        return _obj



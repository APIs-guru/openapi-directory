# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailLoggingImportErrorContext(BaseModel):
    """
    The error payload that is populated on LRO import APIs, including \"google.cloud.retail.v2.ProductService.ImportProducts\" and \"google.cloud.retail.v2.EventService.ImportUserEvents\".
    """ # noqa: E501
    catalog_item: Optional[StrictStr] = Field(default=None, description="The detailed content which caused the error on importing a catalog item.", alias="catalogItem")
    gcs_path: Optional[StrictStr] = Field(default=None, description="Cloud Storage file path of the import source. Can be set for batch operation error.", alias="gcsPath")
    line_number: Optional[StrictStr] = Field(default=None, description="Line number of the content in file. Should be empty for permission or batch operation error.", alias="lineNumber")
    operation_name: Optional[StrictStr] = Field(default=None, description="The operation resource name of the LRO.", alias="operationName")
    product: Optional[StrictStr] = Field(default=None, description="The detailed content which caused the error on importing a product.")
    user_event: Optional[StrictStr] = Field(default=None, description="The detailed content which caused the error on importing a user event.", alias="userEvent")
    __properties: ClassVar[List[str]] = ["catalogItem", "gcsPath", "lineNumber", "operationName", "product", "userEvent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailLoggingImportErrorContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailLoggingImportErrorContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "catalogItem": obj.get("catalogItem"),
            "gcsPath": obj.get("gcsPath"),
            "lineNumber": obj.get("lineNumber"),
            "operationName": obj.get("operationName"),
            "product": obj.get("product"),
            "userEvent": obj.get("userEvent")
        })
        return _obj



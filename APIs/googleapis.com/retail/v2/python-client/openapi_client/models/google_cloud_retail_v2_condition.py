# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2_condition_query_term import GoogleCloudRetailV2ConditionQueryTerm
from openapi_client.models.google_cloud_retail_v2_condition_time_range import GoogleCloudRetailV2ConditionTimeRange
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2Condition(BaseModel):
    """
    Metadata that is used to define a condition that triggers an action. A valid condition must specify at least one of 'query_terms' or 'products_filter'. If multiple fields are specified, the condition is met if all the fields are satisfied e.g. if a set of query terms and product_filter are set, then only items matching the product_filter for requests with a query matching the query terms wil get boosted.
    """ # noqa: E501
    active_time_range: Optional[List[GoogleCloudRetailV2ConditionTimeRange]] = Field(default=None, description="Range of time(s) specifying when Condition is active. Condition true if any time range matches.", alias="activeTimeRange")
    page_categories: Optional[List[StrictStr]] = Field(default=None, description="Used to support browse uses cases. A list (up to 10 entries) of categories or departments. The format should be the same as UserEvent.page_categories;", alias="pageCategories")
    query_terms: Optional[List[GoogleCloudRetailV2ConditionQueryTerm]] = Field(default=None, description="A list (up to 10 entries) of terms to match the query on. If not specified, match all queries. If many query terms are specified, the condition is matched if any of the terms is a match (i.e. using the OR operator).", alias="queryTerms")
    __properties: ClassVar[List[str]] = ["activeTimeRange", "pageCategories", "queryTerms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2Condition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in active_time_range (list)
        _items = []
        if self.active_time_range:
            for _item_active_time_range in self.active_time_range:
                if _item_active_time_range:
                    _items.append(_item_active_time_range.to_dict())
            _dict['activeTimeRange'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in query_terms (list)
        _items = []
        if self.query_terms:
            for _item_query_terms in self.query_terms:
                if _item_query_terms:
                    _items.append(_item_query_terms.to_dict())
            _dict['queryTerms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2Condition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeTimeRange": [GoogleCloudRetailV2ConditionTimeRange.from_dict(_item) for _item in obj["activeTimeRange"]] if obj.get("activeTimeRange") is not None else None,
            "pageCategories": obj.get("pageCategories"),
            "queryTerms": [GoogleCloudRetailV2ConditionQueryTerm.from_dict(_item) for _item in obj["queryTerms"]] if obj.get("queryTerms") is not None else None
        })
        return _obj



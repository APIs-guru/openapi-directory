# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2_local_inventory import GoogleCloudRetailV2LocalInventory
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2AddLocalInventoriesRequest(BaseModel):
    """
    Request message for ProductService.AddLocalInventories method.
    """ # noqa: E501
    add_mask: Optional[StrictStr] = Field(default=None, description="Indicates which inventory fields in the provided list of LocalInventory to update. The field is updated to the provided value. If a field is set while the place does not have a previous local inventory, the local inventory at that store is created. If a field is set while the value of that field is not provided, the original field value, if it exists, is deleted. If the mask is not set or set with empty paths, all inventory fields will be updated. If an unsupported or unknown field is provided, an INVALID_ARGUMENT error is returned and the entire update will be ignored.", alias="addMask")
    add_time: Optional[StrictStr] = Field(default=None, description="The time when the inventory updates are issued. Used to prevent out-of-order updates on local inventory fields. If not provided, the internal system time will be used.", alias="addTime")
    allow_missing: Optional[StrictBool] = Field(default=None, description="If set to true, and the Product is not found, the local inventory will still be processed and retained for at most 1 day and processed once the Product is created. If set to false, a NOT_FOUND error is returned if the Product is not found.", alias="allowMissing")
    local_inventories: Optional[List[GoogleCloudRetailV2LocalInventory]] = Field(default=None, description="Required. A list of inventory information at difference places. Each place is identified by its place ID. At most 3000 inventories are allowed per request.", alias="localInventories")
    __properties: ClassVar[List[str]] = ["addMask", "addTime", "allowMissing", "localInventories"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2AddLocalInventoriesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in local_inventories (list)
        _items = []
        if self.local_inventories:
            for _item_local_inventories in self.local_inventories:
                if _item_local_inventories:
                    _items.append(_item_local_inventories.to_dict())
            _dict['localInventories'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2AddLocalInventoriesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addMask": obj.get("addMask"),
            "addTime": obj.get("addTime"),
            "allowMissing": obj.get("allowMissing"),
            "localInventories": [GoogleCloudRetailV2LocalInventory.from_dict(_item) for _item in obj["localInventories"]] if obj.get("localInventories") is not None else None
        })
        return _obj



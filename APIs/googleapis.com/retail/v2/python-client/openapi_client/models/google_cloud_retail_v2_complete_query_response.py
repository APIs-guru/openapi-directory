# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2_complete_query_response_completion_result import GoogleCloudRetailV2CompleteQueryResponseCompletionResult
from openapi_client.models.google_cloud_retail_v2_complete_query_response_recent_search_result import GoogleCloudRetailV2CompleteQueryResponseRecentSearchResult
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2CompleteQueryResponse(BaseModel):
    """
    Response of the autocomplete query.
    """ # noqa: E501
    attribution_token: Optional[StrictStr] = Field(default=None, description="A unique complete token. This should be included in the UserEvent.completion_detail for search events resulting from this completion, which enables accurate attribution of complete model performance.", alias="attributionToken")
    completion_results: Optional[List[GoogleCloudRetailV2CompleteQueryResponseCompletionResult]] = Field(default=None, description="Results of the matching suggestions. The result list is ordered and the first result is top suggestion.", alias="completionResults")
    recent_search_results: Optional[List[GoogleCloudRetailV2CompleteQueryResponseRecentSearchResult]] = Field(default=None, description="Deprecated. Matched recent searches of this user. The maximum number of recent searches is 10. This field is a restricted feature. If you want to enable it, contact Retail Search support. This feature is only available when CompleteQueryRequest.visitor_id field is set and UserEvent is imported. The recent searches satisfy the follow rules: * They are ordered from latest to oldest. * They are matched with CompleteQueryRequest.query case insensitively. * They are transformed to lower case. * They are UTF-8 safe. Recent searches are deduplicated. More recent searches will be reserved when duplication happens.", alias="recentSearchResults")
    __properties: ClassVar[List[str]] = ["attributionToken", "completionResults", "recentSearchResults"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2CompleteQueryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in completion_results (list)
        _items = []
        if self.completion_results:
            for _item_completion_results in self.completion_results:
                if _item_completion_results:
                    _items.append(_item_completion_results.to_dict())
            _dict['completionResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in recent_search_results (list)
        _items = []
        if self.recent_search_results:
            for _item_recent_search_results in self.recent_search_results:
                if _item_recent_search_results:
                    _items.append(_item_recent_search_results.to_dict())
            _dict['recentSearchResults'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2CompleteQueryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributionToken": obj.get("attributionToken"),
            "completionResults": [GoogleCloudRetailV2CompleteQueryResponseCompletionResult.from_dict(_item) for _item in obj["completionResults"]] if obj.get("completionResults") is not None else None,
            "recentSearchResults": [GoogleCloudRetailV2CompleteQueryResponseRecentSearchResult.from_dict(_item) for _item in obj["recentSearchResults"]] if obj.get("recentSearchResults") is not None else None
        })
        return _obj



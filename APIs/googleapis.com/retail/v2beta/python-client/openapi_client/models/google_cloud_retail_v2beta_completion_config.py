# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2beta_completion_data_input_config import GoogleCloudRetailV2betaCompletionDataInputConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2betaCompletionConfig(BaseModel):
    """
    Catalog level autocomplete config for customers to customize autocomplete feature's settings.
    """ # noqa: E501
    allowlist_input_config: Optional[GoogleCloudRetailV2betaCompletionDataInputConfig] = Field(default=None, alias="allowlistInputConfig")
    auto_learning: Optional[StrictBool] = Field(default=None, description="If set to true, the auto learning function is enabled. Auto learning uses user data to generate suggestions using ML techniques. Default value is false. Only after enabling auto learning can users use `cloud-retail` data in CompleteQueryRequest.", alias="autoLearning")
    denylist_input_config: Optional[GoogleCloudRetailV2betaCompletionDataInputConfig] = Field(default=None, alias="denylistInputConfig")
    last_allowlist_import_operation: Optional[StrictStr] = Field(default=None, description="Output only. Name of the LRO corresponding to the latest allowlist import. Can use GetOperation API to retrieve the latest state of the Long Running Operation.", alias="lastAllowlistImportOperation")
    last_denylist_import_operation: Optional[StrictStr] = Field(default=None, description="Output only. Name of the LRO corresponding to the latest denylist import. Can use GetOperation API to retrieve the latest state of the Long Running Operation.", alias="lastDenylistImportOperation")
    last_suggestions_import_operation: Optional[StrictStr] = Field(default=None, description="Output only. Name of the LRO corresponding to the latest suggestion terms list import. Can use GetOperation API method to retrieve the latest state of the Long Running Operation.", alias="lastSuggestionsImportOperation")
    matching_order: Optional[StrictStr] = Field(default=None, description="Specifies the matching order for autocomplete suggestions, e.g., a query consisting of 'sh' with 'out-of-order' specified would suggest \"women's shoes\", whereas a query of 'red s' with 'exact-prefix' specified would suggest \"red shoes\". Currently supported values: * 'out-of-order' * 'exact-prefix' Default value: 'exact-prefix'.", alias="matchingOrder")
    max_suggestions: Optional[StrictInt] = Field(default=None, description="The maximum number of autocomplete suggestions returned per term. Default value is 20. If left unset or set to 0, then will fallback to default value. Value range is 1 to 20.", alias="maxSuggestions")
    min_prefix_length: Optional[StrictInt] = Field(default=None, description="The minimum number of characters needed to be typed in order to get suggestions. Default value is 2. If left unset or set to 0, then will fallback to default value. Value range is 1 to 20.", alias="minPrefixLength")
    name: Optional[StrictStr] = Field(default=None, description="Required. Immutable. Fully qualified name `projects/*/locations/*/catalogs/*/completionConfig`")
    suggestions_input_config: Optional[GoogleCloudRetailV2betaCompletionDataInputConfig] = Field(default=None, alias="suggestionsInputConfig")
    __properties: ClassVar[List[str]] = ["allowlistInputConfig", "autoLearning", "denylistInputConfig", "lastAllowlistImportOperation", "lastDenylistImportOperation", "lastSuggestionsImportOperation", "matchingOrder", "maxSuggestions", "minPrefixLength", "name", "suggestionsInputConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2betaCompletionConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_allowlist_import_operation",
            "last_denylist_import_operation",
            "last_suggestions_import_operation",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of allowlist_input_config
        if self.allowlist_input_config:
            _dict['allowlistInputConfig'] = self.allowlist_input_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of denylist_input_config
        if self.denylist_input_config:
            _dict['denylistInputConfig'] = self.denylist_input_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suggestions_input_config
        if self.suggestions_input_config:
            _dict['suggestionsInputConfig'] = self.suggestions_input_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2betaCompletionConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowlistInputConfig": GoogleCloudRetailV2betaCompletionDataInputConfig.from_dict(obj["allowlistInputConfig"]) if obj.get("allowlistInputConfig") is not None else None,
            "autoLearning": obj.get("autoLearning"),
            "denylistInputConfig": GoogleCloudRetailV2betaCompletionDataInputConfig.from_dict(obj["denylistInputConfig"]) if obj.get("denylistInputConfig") is not None else None,
            "lastAllowlistImportOperation": obj.get("lastAllowlistImportOperation"),
            "lastDenylistImportOperation": obj.get("lastDenylistImportOperation"),
            "lastSuggestionsImportOperation": obj.get("lastSuggestionsImportOperation"),
            "matchingOrder": obj.get("matchingOrder"),
            "maxSuggestions": obj.get("maxSuggestions"),
            "minPrefixLength": obj.get("minPrefixLength"),
            "name": obj.get("name"),
            "suggestionsInputConfig": GoogleCloudRetailV2betaCompletionDataInputConfig.from_dict(obj["suggestionsInputConfig"]) if obj.get("suggestionsInputConfig") is not None else None
        })
        return _obj



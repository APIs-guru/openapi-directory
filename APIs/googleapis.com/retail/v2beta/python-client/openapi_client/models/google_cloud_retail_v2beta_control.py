# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2beta_rule import GoogleCloudRetailV2betaRule
from openapi_client.models.google_cloud_retail_v2beta_search_request_facet_spec import GoogleCloudRetailV2betaSearchRequestFacetSpec
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2betaControl(BaseModel):
    """
    Configures dynamic metadata that can be linked to a ServingConfig and affect search or recommendation results at serving time.
    """ # noqa: E501
    associated_serving_config_ids: Optional[List[StrictStr]] = Field(default=None, description="Output only. List of serving config ids that are associated with this control in the same Catalog. Note the association is managed via the ServingConfig, this is an output only denormalized view.", alias="associatedServingConfigIds")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The human readable control display name. Used in Retail UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is thrown.", alias="displayName")
    facet_spec: Optional[GoogleCloudRetailV2betaSearchRequestFacetSpec] = Field(default=None, alias="facetSpec")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. Fully qualified name `projects/*/locations/global/catalogs/*/controls/*`")
    rule: Optional[GoogleCloudRetailV2betaRule] = None
    search_solution_use_case: Optional[List[StrictStr]] = Field(default=None, description="Specifies the use case for the control. Affects what condition fields can be set. Only settable by search controls. Will default to SEARCH_SOLUTION_USE_CASE_SEARCH if not specified. Currently only allow one search_solution_use_case per control.", alias="searchSolutionUseCase")
    solution_types: Optional[List[StrictStr]] = Field(default=None, description="Required. Immutable. The solution types that the control is used for. Currently we support setting only one type of solution at creation time. Only `SOLUTION_TYPE_SEARCH` value is supported at the moment. If no solution type is provided at creation time, will default to SOLUTION_TYPE_SEARCH.", alias="solutionTypes")
    __properties: ClassVar[List[str]] = ["associatedServingConfigIds", "displayName", "facetSpec", "name", "rule", "searchSolutionUseCase", "solutionTypes"]

    @field_validator('search_solution_use_case')
    def search_solution_use_case_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['SEARCH_SOLUTION_USE_CASE_UNSPECIFIED', 'SEARCH_SOLUTION_USE_CASE_SEARCH', 'SEARCH_SOLUTION_USE_CASE_BROWSE']):
                raise ValueError("each list item must be one of ('SEARCH_SOLUTION_USE_CASE_UNSPECIFIED', 'SEARCH_SOLUTION_USE_CASE_SEARCH', 'SEARCH_SOLUTION_USE_CASE_BROWSE')")
        return value

    @field_validator('solution_types')
    def solution_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['SOLUTION_TYPE_UNSPECIFIED', 'SOLUTION_TYPE_RECOMMENDATION', 'SOLUTION_TYPE_SEARCH']):
                raise ValueError("each list item must be one of ('SOLUTION_TYPE_UNSPECIFIED', 'SOLUTION_TYPE_RECOMMENDATION', 'SOLUTION_TYPE_SEARCH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2betaControl from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "associated_serving_config_ids",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of facet_spec
        if self.facet_spec:
            _dict['facetSpec'] = self.facet_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rule
        if self.rule:
            _dict['rule'] = self.rule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2betaControl from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associatedServingConfigIds": obj.get("associatedServingConfigIds"),
            "displayName": obj.get("displayName"),
            "facetSpec": GoogleCloudRetailV2betaSearchRequestFacetSpec.from_dict(obj["facetSpec"]) if obj.get("facetSpec") is not None else None,
            "name": obj.get("name"),
            "rule": GoogleCloudRetailV2betaRule.from_dict(obj["rule"]) if obj.get("rule") is not None else None,
            "searchSolutionUseCase": obj.get("searchSolutionUseCase"),
            "solutionTypes": obj.get("solutionTypes")
        })
        return _obj



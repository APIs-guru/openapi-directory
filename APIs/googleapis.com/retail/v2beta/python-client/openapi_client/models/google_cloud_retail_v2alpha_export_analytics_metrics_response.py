# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2alpha_export_errors_config import GoogleCloudRetailV2alphaExportErrorsConfig
from openapi_client.models.google_cloud_retail_v2alpha_output_result import GoogleCloudRetailV2alphaOutputResult
from openapi_client.models.google_rpc_status import GoogleRpcStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2alphaExportAnalyticsMetricsResponse(BaseModel):
    """
    Response of the ExportAnalyticsMetricsRequest. If the long running operation was successful, then this message is returned by the google.longrunning.Operations.response field if the operation was successful.
    """ # noqa: E501
    error_samples: Optional[List[GoogleRpcStatus]] = Field(default=None, description="A sample of errors encountered while processing the request.", alias="errorSamples")
    errors_config: Optional[GoogleCloudRetailV2alphaExportErrorsConfig] = Field(default=None, alias="errorsConfig")
    output_result: Optional[GoogleCloudRetailV2alphaOutputResult] = Field(default=None, alias="outputResult")
    __properties: ClassVar[List[str]] = ["errorSamples", "errorsConfig", "outputResult"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaExportAnalyticsMetricsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in error_samples (list)
        _items = []
        if self.error_samples:
            for _item_error_samples in self.error_samples:
                if _item_error_samples:
                    _items.append(_item_error_samples.to_dict())
            _dict['errorSamples'] = _items
        # override the default output from pydantic by calling `to_dict()` of errors_config
        if self.errors_config:
            _dict['errorsConfig'] = self.errors_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output_result
        if self.output_result:
            _dict['outputResult'] = self.output_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaExportAnalyticsMetricsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorSamples": [GoogleRpcStatus.from_dict(_item) for _item in obj["errorSamples"]] if obj.get("errorSamples") is not None else None,
            "errorsConfig": GoogleCloudRetailV2alphaExportErrorsConfig.from_dict(obj["errorsConfig"]) if obj.get("errorsConfig") is not None else None,
            "outputResult": GoogleCloudRetailV2alphaOutputResult.from_dict(obj["outputResult"]) if obj.get("outputResult") is not None else None
        })
        return _obj



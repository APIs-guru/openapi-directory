# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2alpha_model_page_optimization_config_candidate import GoogleCloudRetailV2alphaModelPageOptimizationConfigCandidate
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2alphaModelPageOptimizationConfigPanel(BaseModel):
    """
    An individual panel with a list of ServingConfigs to consider for it.
    """ # noqa: E501
    candidates: Optional[List[GoogleCloudRetailV2alphaModelPageOptimizationConfigCandidate]] = Field(default=None, description="Required. The candidates to consider on the panel.")
    default_candidate: Optional[GoogleCloudRetailV2alphaModelPageOptimizationConfigCandidate] = Field(default=None, alias="defaultCandidate")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. The name to display for the panel.", alias="displayName")
    __properties: ClassVar[List[str]] = ["candidates", "defaultCandidate", "displayName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaModelPageOptimizationConfigPanel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in candidates (list)
        _items = []
        if self.candidates:
            for _item_candidates in self.candidates:
                if _item_candidates:
                    _items.append(_item_candidates.to_dict())
            _dict['candidates'] = _items
        # override the default output from pydantic by calling `to_dict()` of default_candidate
        if self.default_candidate:
            _dict['defaultCandidate'] = self.default_candidate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaModelPageOptimizationConfigPanel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "candidates": [GoogleCloudRetailV2alphaModelPageOptimizationConfigCandidate.from_dict(_item) for _item in obj["candidates"]] if obj.get("candidates") is not None else None,
            "defaultCandidate": GoogleCloudRetailV2alphaModelPageOptimizationConfigCandidate.from_dict(obj["defaultCandidate"]) if obj.get("defaultCandidate") is not None else None,
            "displayName": obj.get("displayName")
        })
        return _obj



# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2alpha_model_model_features_config import GoogleCloudRetailV2alphaModelModelFeaturesConfig
from openapi_client.models.google_cloud_retail_v2alpha_model_page_optimization_config import GoogleCloudRetailV2alphaModelPageOptimizationConfig
from openapi_client.models.google_cloud_retail_v2alpha_model_serving_config_list import GoogleCloudRetailV2alphaModelServingConfigList
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2alphaModel(BaseModel):
    """
    Metadata that describes the training and serving parameters of a Model. A Model can be associated with a ServingConfig and then queried through the Predict API.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp the Recommendation Model was created at.", alias="createTime")
    data_state: Optional[StrictStr] = Field(default=None, description="Output only. The state of data requirements for this model: `DATA_OK` and `DATA_ERROR`. Recommendation model cannot be trained if the data is in `DATA_ERROR` state. Recommendation model can have `DATA_ERROR` state even if serving state is `ACTIVE`: models were trained successfully before, but cannot be refreshed because model no longer has sufficient data for training.", alias="dataState")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the model. Should be human readable, used to display Recommendation Models in the Retail Cloud Console Dashboard. UTF-8 encoded string with limit of 1024 characters.", alias="displayName")
    filtering_option: Optional[StrictStr] = Field(default=None, description="Optional. If `RECOMMENDATIONS_FILTERING_ENABLED`, recommendation filtering by attributes is enabled for the model.", alias="filteringOption")
    last_tune_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the latest successful tune finished.", alias="lastTuneTime")
    model_features_config: Optional[GoogleCloudRetailV2alphaModelModelFeaturesConfig] = Field(default=None, alias="modelFeaturesConfig")
    name: Optional[StrictStr] = Field(default=None, description="Required. The fully qualified resource name of the model. Format: `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}` catalog_id has char limit of 50. recommendation_model_id has char limit of 40.")
    optimization_objective: Optional[StrictStr] = Field(default=None, description="Optional. The optimization objective e.g. `cvr`. Currently supported values: `ctr`, `cvr`, `revenue-per-order`. If not specified, we choose default based on model type. Default depends on type of recommendation: `recommended-for-you` => `ctr` `others-you-may-like` => `ctr` `frequently-bought-together` => `revenue_per_order` This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.", alias="optimizationObjective")
    page_optimization_config: Optional[GoogleCloudRetailV2alphaModelPageOptimizationConfig] = Field(default=None, alias="pageOptimizationConfig")
    periodic_tuning_state: Optional[StrictStr] = Field(default=None, description="Optional. The state of periodic tuning. The period we use is 3 months - to do a one-off tune earlier use the `TuneModel` method. Default value is `PERIODIC_TUNING_ENABLED`.", alias="periodicTuningState")
    serving_config_lists: Optional[List[GoogleCloudRetailV2alphaModelServingConfigList]] = Field(default=None, description="Output only. The list of valid serving configs associated with the PageOptimizationConfig.", alias="servingConfigLists")
    serving_state: Optional[StrictStr] = Field(default=None, description="Output only. The serving state of the model: `ACTIVE`, `NOT_ACTIVE`.", alias="servingState")
    training_state: Optional[StrictStr] = Field(default=None, description="Optional. The training state that the model is in (e.g. `TRAINING` or `PAUSED`). Since part of the cost of running the service is frequency of training - this can be used to determine when to train model in order to control cost. If not specified: the default value for `CreateModel` method is `TRAINING`. The default value for `UpdateModel` method is to keep the state the same as before.", alias="trainingState")
    tuning_operation: Optional[StrictStr] = Field(default=None, description="Output only. The tune operation associated with the model. Can be used to determine if there is an ongoing tune for this recommendation. Empty field implies no tune is goig on.", alias="tuningOperation")
    type: Optional[StrictStr] = Field(default=None, description="Required. The type of model e.g. `home-page`. Currently supported values: `recommended-for-you`, `others-you-may-like`, `frequently-bought-together`, `page-optimization`, `similar-items`, `buy-it-again`, `on-sale-items`, and `recently-viewed`(readonly value). This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp the Recommendation Model was last updated. E.g. if a Recommendation Model was paused - this would be the time the pause was initiated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "dataState", "displayName", "filteringOption", "lastTuneTime", "modelFeaturesConfig", "name", "optimizationObjective", "pageOptimizationConfig", "periodicTuningState", "servingConfigLists", "servingState", "trainingState", "tuningOperation", "type", "updateTime"]

    @field_validator('data_state')
    def data_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_STATE_UNSPECIFIED', 'DATA_OK', 'DATA_ERROR']):
            raise ValueError("must be one of enum values ('DATA_STATE_UNSPECIFIED', 'DATA_OK', 'DATA_ERROR')")
        return value

    @field_validator('filtering_option')
    def filtering_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RECOMMENDATIONS_FILTERING_OPTION_UNSPECIFIED', 'RECOMMENDATIONS_FILTERING_DISABLED', 'RECOMMENDATIONS_FILTERING_ENABLED']):
            raise ValueError("must be one of enum values ('RECOMMENDATIONS_FILTERING_OPTION_UNSPECIFIED', 'RECOMMENDATIONS_FILTERING_DISABLED', 'RECOMMENDATIONS_FILTERING_ENABLED')")
        return value

    @field_validator('periodic_tuning_state')
    def periodic_tuning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PERIODIC_TUNING_STATE_UNSPECIFIED', 'PERIODIC_TUNING_DISABLED', 'ALL_TUNING_DISABLED', 'PERIODIC_TUNING_ENABLED']):
            raise ValueError("must be one of enum values ('PERIODIC_TUNING_STATE_UNSPECIFIED', 'PERIODIC_TUNING_DISABLED', 'ALL_TUNING_DISABLED', 'PERIODIC_TUNING_ENABLED')")
        return value

    @field_validator('serving_state')
    def serving_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SERVING_STATE_UNSPECIFIED', 'INACTIVE', 'ACTIVE', 'TUNED']):
            raise ValueError("must be one of enum values ('SERVING_STATE_UNSPECIFIED', 'INACTIVE', 'ACTIVE', 'TUNED')")
        return value

    @field_validator('training_state')
    def training_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRAINING_STATE_UNSPECIFIED', 'PAUSED', 'TRAINING']):
            raise ValueError("must be one of enum values ('TRAINING_STATE_UNSPECIFIED', 'PAUSED', 'TRAINING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "data_state",
            "last_tune_time",
            "serving_config_lists",
            "serving_state",
            "tuning_operation",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model_features_config
        if self.model_features_config:
            _dict['modelFeaturesConfig'] = self.model_features_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of page_optimization_config
        if self.page_optimization_config:
            _dict['pageOptimizationConfig'] = self.page_optimization_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in serving_config_lists (list)
        _items = []
        if self.serving_config_lists:
            for _item_serving_config_lists in self.serving_config_lists:
                if _item_serving_config_lists:
                    _items.append(_item_serving_config_lists.to_dict())
            _dict['servingConfigLists'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2alphaModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "dataState": obj.get("dataState"),
            "displayName": obj.get("displayName"),
            "filteringOption": obj.get("filteringOption"),
            "lastTuneTime": obj.get("lastTuneTime"),
            "modelFeaturesConfig": GoogleCloudRetailV2alphaModelModelFeaturesConfig.from_dict(obj["modelFeaturesConfig"]) if obj.get("modelFeaturesConfig") is not None else None,
            "name": obj.get("name"),
            "optimizationObjective": obj.get("optimizationObjective"),
            "pageOptimizationConfig": GoogleCloudRetailV2alphaModelPageOptimizationConfig.from_dict(obj["pageOptimizationConfig"]) if obj.get("pageOptimizationConfig") is not None else None,
            "periodicTuningState": obj.get("periodicTuningState"),
            "servingConfigLists": [GoogleCloudRetailV2alphaModelServingConfigList.from_dict(_item) for _item in obj["servingConfigLists"]] if obj.get("servingConfigLists") is not None else None,
            "servingState": obj.get("servingState"),
            "trainingState": obj.get("trainingState"),
            "tuningOperation": obj.get("tuningOperation"),
            "type": obj.get("type"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



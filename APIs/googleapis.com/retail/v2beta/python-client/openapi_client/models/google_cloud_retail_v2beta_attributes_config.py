# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2beta_catalog_attribute import GoogleCloudRetailV2betaCatalogAttribute
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2betaAttributesConfig(BaseModel):
    """
    Catalog level attribute config.
    """ # noqa: E501
    attribute_config_level: Optional[StrictStr] = Field(default=None, description="Output only. The AttributeConfigLevel used for this catalog.", alias="attributeConfigLevel")
    catalog_attributes: Optional[Dict[str, GoogleCloudRetailV2betaCatalogAttribute]] = Field(default=None, description="Enable attribute(s) config at catalog level. For example, indexable, dynamic_facetable, or searchable for each attribute. The key is catalog attribute's name. For example: `color`, `brands`, `attributes.custom_attribute`, such as `attributes.xyz`. The maximum number of catalog attributes allowed in a request is 1000.", alias="catalogAttributes")
    name: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The fully qualified resource name of the attribute config. Format: `projects/*/locations/*/catalogs/*/attributesConfig`")
    __properties: ClassVar[List[str]] = ["attributeConfigLevel", "catalogAttributes", "name"]

    @field_validator('attribute_config_level')
    def attribute_config_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ATTRIBUTE_CONFIG_LEVEL_UNSPECIFIED', 'PRODUCT_LEVEL_ATTRIBUTE_CONFIG', 'CATALOG_LEVEL_ATTRIBUTE_CONFIG']):
            raise ValueError("must be one of enum values ('ATTRIBUTE_CONFIG_LEVEL_UNSPECIFIED', 'PRODUCT_LEVEL_ATTRIBUTE_CONFIG', 'CATALOG_LEVEL_ATTRIBUTE_CONFIG')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2betaAttributesConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "attribute_config_level",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in catalog_attributes (dict)
        _field_dict = {}
        if self.catalog_attributes:
            for _key_catalog_attributes in self.catalog_attributes:
                if self.catalog_attributes[_key_catalog_attributes]:
                    _field_dict[_key_catalog_attributes] = self.catalog_attributes[_key_catalog_attributes].to_dict()
            _dict['catalogAttributes'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2betaAttributesConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributeConfigLevel": obj.get("attributeConfigLevel"),
            "catalogAttributes": dict(
                (_k, GoogleCloudRetailV2betaCatalogAttribute.from_dict(_v))
                for _k, _v in obj["catalogAttributes"].items()
            )
            if obj.get("catalogAttributes") is not None
            else None,
            "name": obj.get("name")
        })
        return _obj



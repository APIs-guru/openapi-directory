# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_retail_v2beta_price_info_price_range import GoogleCloudRetailV2betaPriceInfoPriceRange
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2betaPriceInfo(BaseModel):
    """
    The price information of a Product.
    """ # noqa: E501
    cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The costs associated with the sale of a particular product. Used for gross profit reporting. * Profit = price - cost Google Merchant Center property [cost_of_goods_sold](https://support.google.com/merchants/answer/9017895).")
    currency_code: Optional[StrictStr] = Field(default=None, description="The 3-letter currency code defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html). If this field is an unrecognizable currency code, an INVALID_ARGUMENT error is returned. The Product.Type.VARIANT Products with the same Product.primary_product_id must share the same currency_code. Otherwise, a FAILED_PRECONDITION error is returned.", alias="currencyCode")
    original_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price of the product without any discount. If zero, by default set to be the price. If set, original_price should be greater than or equal to price, otherwise an INVALID_ARGUMENT error is thrown.", alias="originalPrice")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price of the product. Google Merchant Center property [price](https://support.google.com/merchants/answer/6324371). Schema.org property [Offer.price](https://schema.org/price).")
    price_effective_time: Optional[StrictStr] = Field(default=None, description="The timestamp when the price starts to be effective. This can be set as a future timestamp, and the price is only used for search after price_effective_time. If so, the original_price must be set and original_price is used before price_effective_time. Do not set if price is always effective because it will cause additional latency during search.", alias="priceEffectiveTime")
    price_expire_time: Optional[StrictStr] = Field(default=None, description="The timestamp when the price stops to be effective. The price is used for search before price_expire_time. If this field is set, the original_price must be set and original_price is used after price_expire_time. Do not set if price is always effective because it will cause additional latency during search.", alias="priceExpireTime")
    price_range: Optional[GoogleCloudRetailV2betaPriceInfoPriceRange] = Field(default=None, alias="priceRange")
    __properties: ClassVar[List[str]] = ["cost", "currencyCode", "originalPrice", "price", "priceEffectiveTime", "priceExpireTime", "priceRange"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2betaPriceInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of price_range
        if self.price_range:
            _dict['priceRange'] = self.price_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2betaPriceInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cost": obj.get("cost"),
            "currencyCode": obj.get("currencyCode"),
            "originalPrice": obj.get("originalPrice"),
            "price": obj.get("price"),
            "priceEffectiveTime": obj.get("priceEffectiveTime"),
            "priceExpireTime": obj.get("priceExpireTime"),
            "priceRange": GoogleCloudRetailV2betaPriceInfoPriceRange.from_dict(obj["priceRange"]) if obj.get("priceRange") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2beta_catalog_attribute_facet_config_merged_facet_value import GoogleCloudRetailV2betaCatalogAttributeFacetConfigMergedFacetValue
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2betaCatalogAttributeFacetConfigMergedFacet(BaseModel):
    """
    The current facet key (i.e. attribute config) maps into the merged_facet_key. A facet key can have at most one child. The current facet key and the merged facet key need both to be textual custom attributes or both numerical custom attributes (same type).
    """ # noqa: E501
    merged_facet_key: Optional[StrictStr] = Field(default=None, description="The merged facet key should be a valid facet key that is different than the facet key of the current catalog attribute. We refer this is merged facet key as the child of the current catalog attribute. This merged facet key can't be a parent of another facet key (i.e. no directed path of length 2). This merged facet key needs to be either a textual custom attribute or a numerical custom attribute.", alias="mergedFacetKey")
    merged_facet_values: Optional[List[GoogleCloudRetailV2betaCatalogAttributeFacetConfigMergedFacetValue]] = Field(default=None, description="Each instance is a list of facet values that map into the same (possibly different) merged facet value. For the current attribute config, each facet value should map to at most one merged facet value.", alias="mergedFacetValues")
    __properties: ClassVar[List[str]] = ["mergedFacetKey", "mergedFacetValues"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2betaCatalogAttributeFacetConfigMergedFacet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in merged_facet_values (list)
        _items = []
        if self.merged_facet_values:
            for _item_merged_facet_values in self.merged_facet_values:
                if _item_merged_facet_values:
                    _items.append(_item_merged_facet_values.to_dict())
            _dict['mergedFacetValues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2betaCatalogAttributeFacetConfigMergedFacet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mergedFacetKey": obj.get("mergedFacetKey"),
            "mergedFacetValues": [GoogleCloudRetailV2betaCatalogAttributeFacetConfigMergedFacetValue.from_dict(_item) for _item in obj["mergedFacetValues"]] if obj.get("mergedFacetValues") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_retail_v2beta_catalog_attribute_facet_config import GoogleCloudRetailV2betaCatalogAttributeFacetConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRetailV2betaCatalogAttribute(BaseModel):
    """
    Catalog level attribute config for an attribute. For example, if customers want to enable/disable facet for a specific attribute.
    """ # noqa: E501
    dynamic_facetable_option: Optional[StrictStr] = Field(default=None, description="If DYNAMIC_FACETABLE_ENABLED, attribute values are available for dynamic facet. Could only be DYNAMIC_FACETABLE_DISABLED if CatalogAttribute.indexable_option is INDEXABLE_DISABLED. Otherwise, an INVALID_ARGUMENT error is returned. Must be specified, otherwise throws INVALID_FORMAT error.", alias="dynamicFacetableOption")
    exact_searchable_option: Optional[StrictStr] = Field(default=None, description="If EXACT_SEARCHABLE_ENABLED, attribute values will be exact searchable. This property only applies to textual custom attributes and requires indexable set to enabled to enable exact-searchable. If unset, the server behavior defaults to EXACT_SEARCHABLE_DISABLED.", alias="exactSearchableOption")
    facet_config: Optional[GoogleCloudRetailV2betaCatalogAttributeFacetConfig] = Field(default=None, alias="facetConfig")
    in_use: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether this attribute has been used by any products. `True` if at least one Product is using this attribute in Product.attributes. Otherwise, this field is `False`. CatalogAttribute can be pre-loaded by using CatalogService.AddCatalogAttribute, CatalogService.ImportCatalogAttributes, or CatalogService.UpdateAttributesConfig APIs. This field is `False` for pre-loaded CatalogAttributes. Only pre-loaded catalog attributes that are neither in use by products nor predefined can be deleted. Catalog attributes that are either in use by products or are predefined attributes cannot be deleted; however, their configuration properties will reset to default values upon removal request. After catalog changes, it takes about 10 minutes for this field to update.", alias="inUse")
    indexable_option: Optional[StrictStr] = Field(default=None, description="When AttributesConfig.attribute_config_level is CATALOG_LEVEL_ATTRIBUTE_CONFIG, if INDEXABLE_ENABLED attribute values are indexed so that it can be filtered, faceted, or boosted in SearchService.Search. Must be specified when AttributesConfig.attribute_config_level is CATALOG_LEVEL_ATTRIBUTE_CONFIG, otherwise throws INVALID_FORMAT error.", alias="indexableOption")
    key: Optional[StrictStr] = Field(default=None, description="Required. Attribute name. For example: `color`, `brands`, `attributes.custom_attribute`, such as `attributes.xyz`. To be indexable, the attribute name can contain only alpha-numeric characters and underscores. For example, an attribute named `attributes.abc_xyz` can be indexed, but an attribute named `attributes.abc-xyz` cannot be indexed. If the attribute key starts with `attributes.`, then the attribute is a custom attribute. Attributes such as `brands`, `patterns`, and `title` are built-in and called system attributes.")
    recommendations_filtering_option: Optional[StrictStr] = Field(default=None, description="When AttributesConfig.attribute_config_level is CATALOG_LEVEL_ATTRIBUTE_CONFIG, if RECOMMENDATIONS_FILTERING_ENABLED, attribute values are filterable for recommendations. This option works for categorical features only, does not work for numerical features, inventory filtering.", alias="recommendationsFilteringOption")
    retrievable_option: Optional[StrictStr] = Field(default=None, description="If RETRIEVABLE_ENABLED, attribute values are retrievable in the search results. If unset, the server behavior defaults to RETRIEVABLE_DISABLED.", alias="retrievableOption")
    searchable_option: Optional[StrictStr] = Field(default=None, description="When AttributesConfig.attribute_config_level is CATALOG_LEVEL_ATTRIBUTE_CONFIG, if SEARCHABLE_ENABLED, attribute values are searchable by text queries in SearchService.Search. If SEARCHABLE_ENABLED but attribute type is numerical, attribute values will not be searchable by text queries in SearchService.Search, as there are no text values associated to numerical attributes. Must be specified, when AttributesConfig.attribute_config_level is CATALOG_LEVEL_ATTRIBUTE_CONFIG, otherwise throws INVALID_FORMAT error.", alias="searchableOption")
    type: Optional[StrictStr] = Field(default=None, description="Output only. The type of this attribute. This is derived from the attribute in Product.attributes.")
    __properties: ClassVar[List[str]] = ["dynamicFacetableOption", "exactSearchableOption", "facetConfig", "inUse", "indexableOption", "key", "recommendationsFilteringOption", "retrievableOption", "searchableOption", "type"]

    @field_validator('dynamic_facetable_option')
    def dynamic_facetable_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DYNAMIC_FACETABLE_OPTION_UNSPECIFIED', 'DYNAMIC_FACETABLE_ENABLED', 'DYNAMIC_FACETABLE_DISABLED']):
            raise ValueError("must be one of enum values ('DYNAMIC_FACETABLE_OPTION_UNSPECIFIED', 'DYNAMIC_FACETABLE_ENABLED', 'DYNAMIC_FACETABLE_DISABLED')")
        return value

    @field_validator('exact_searchable_option')
    def exact_searchable_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXACT_SEARCHABLE_OPTION_UNSPECIFIED', 'EXACT_SEARCHABLE_ENABLED', 'EXACT_SEARCHABLE_DISABLED']):
            raise ValueError("must be one of enum values ('EXACT_SEARCHABLE_OPTION_UNSPECIFIED', 'EXACT_SEARCHABLE_ENABLED', 'EXACT_SEARCHABLE_DISABLED')")
        return value

    @field_validator('indexable_option')
    def indexable_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INDEXABLE_OPTION_UNSPECIFIED', 'INDEXABLE_ENABLED', 'INDEXABLE_DISABLED']):
            raise ValueError("must be one of enum values ('INDEXABLE_OPTION_UNSPECIFIED', 'INDEXABLE_ENABLED', 'INDEXABLE_DISABLED')")
        return value

    @field_validator('recommendations_filtering_option')
    def recommendations_filtering_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RECOMMENDATIONS_FILTERING_OPTION_UNSPECIFIED', 'RECOMMENDATIONS_FILTERING_DISABLED', 'RECOMMENDATIONS_FILTERING_ENABLED']):
            raise ValueError("must be one of enum values ('RECOMMENDATIONS_FILTERING_OPTION_UNSPECIFIED', 'RECOMMENDATIONS_FILTERING_DISABLED', 'RECOMMENDATIONS_FILTERING_ENABLED')")
        return value

    @field_validator('retrievable_option')
    def retrievable_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RETRIEVABLE_OPTION_UNSPECIFIED', 'RETRIEVABLE_ENABLED', 'RETRIEVABLE_DISABLED']):
            raise ValueError("must be one of enum values ('RETRIEVABLE_OPTION_UNSPECIFIED', 'RETRIEVABLE_ENABLED', 'RETRIEVABLE_DISABLED')")
        return value

    @field_validator('searchable_option')
    def searchable_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEARCHABLE_OPTION_UNSPECIFIED', 'SEARCHABLE_ENABLED', 'SEARCHABLE_DISABLED']):
            raise ValueError("must be one of enum values ('SEARCHABLE_OPTION_UNSPECIFIED', 'SEARCHABLE_ENABLED', 'SEARCHABLE_DISABLED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'TEXTUAL', 'NUMERICAL']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'TEXTUAL', 'NUMERICAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2betaCatalogAttribute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "in_use",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of facet_config
        if self.facet_config:
            _dict['facetConfig'] = self.facet_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRetailV2betaCatalogAttribute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dynamicFacetableOption": obj.get("dynamicFacetableOption"),
            "exactSearchableOption": obj.get("exactSearchableOption"),
            "facetConfig": GoogleCloudRetailV2betaCatalogAttributeFacetConfig.from_dict(obj["facetConfig"]) if obj.get("facetConfig") is not None else None,
            "inUse": obj.get("inUse"),
            "indexableOption": obj.get("indexableOption"),
            "key": obj.get("key"),
            "recommendationsFilteringOption": obj.get("recommendationsFilteringOption"),
            "retrievableOption": obj.get("retrievableOption"),
            "searchableOption": obj.get("searchableOption"),
            "type": obj.get("type")
        })
        return _obj



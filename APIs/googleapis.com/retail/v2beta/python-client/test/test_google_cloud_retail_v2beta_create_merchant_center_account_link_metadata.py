# coding: utf-8

"""
    Vertex AI Search for Retail API

    Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_retail_v2beta_create_merchant_center_account_link_metadata import GoogleCloudRetailV2betaCreateMerchantCenterAccountLinkMetadata

class TestGoogleCloudRetailV2betaCreateMerchantCenterAccountLinkMetadata(unittest.TestCase):
    """GoogleCloudRetailV2betaCreateMerchantCenterAccountLinkMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudRetailV2betaCreateMerchantCenterAccountLinkMetadata:
        """Test GoogleCloudRetailV2betaCreateMerchantCenterAccountLinkMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudRetailV2betaCreateMerchantCenterAccountLinkMetadata`
        """
        model = GoogleCloudRetailV2betaCreateMerchantCenterAccountLinkMetadata()
        if include_optional:
            return GoogleCloudRetailV2betaCreateMerchantCenterAccountLinkMetadata(
                create_time = '',
                update_time = ''
            )
        else:
            return GoogleCloudRetailV2betaCreateMerchantCenterAccountLinkMetadata(
        )
        """

    def testGoogleCloudRetailV2betaCreateMerchantCenterAccountLinkMetadata(self):
        """Test GoogleCloudRetailV2betaCreateMerchantCenterAccountLinkMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

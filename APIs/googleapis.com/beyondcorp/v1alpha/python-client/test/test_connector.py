# coding: utf-8

"""
    BeyondCorp API

    Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.connector import Connector

class TestConnector(unittest.TestCase):
    """Connector unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Connector:
        """Test Connector
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Connector`
        """
        model = Connector()
        if include_optional:
            return Connector(
                create_time = '',
                display_name = '',
                labels = {
                    'key' : ''
                    },
                name = '',
                principal_info = openapi_client.models.principal_info.PrincipalInfo(
                    service_account = openapi_client.models.service_account.ServiceAccount(
                        email = '', ), ),
                resource_info = openapi_client.models.resource_info.ResourceInfo(
                    id = '', 
                    resource = {
                        'key' : null
                        }, 
                    status = 'HEALTH_STATUS_UNSPECIFIED', 
                    sub = [
                        openapi_client.models.resource_info.ResourceInfo(
                            id = '', 
                            status = 'HEALTH_STATUS_UNSPECIFIED', 
                            time = '', )
                        ], 
                    time = '', ),
                state = 'STATE_UNSPECIFIED',
                uid = '',
                update_time = ''
            )
        else:
            return Connector(
        )
        """

    def testConnector(self):
        """Test Connector"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    BeyondCorp API

    Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.resolve_instance_config_response import ResolveInstanceConfigResponse

class TestResolveInstanceConfigResponse(unittest.TestCase):
    """ResolveInstanceConfigResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResolveInstanceConfigResponse:
        """Test ResolveInstanceConfigResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ResolveInstanceConfigResponse`
        """
        model = ResolveInstanceConfigResponse()
        if include_optional:
            return ResolveInstanceConfigResponse(
                instance_config = openapi_client.models.connector_instance_config.ConnectorInstanceConfig(
                    image_config = openapi_client.models.image_config.ImageConfig(
                        stable_image = '', 
                        target_image = '', ), 
                    instance_config = {
                        'key' : null
                        }, 
                    notification_config = openapi_client.models.notification_config.NotificationConfig(
                        pubsub_notification = openapi_client.models.cloud_pub_sub_notification_config.CloudPubSubNotificationConfig(
                            pubsub_subscription = '', ), ), 
                    sequence_number = '', )
            )
        else:
            return ResolveInstanceConfigResponse(
        )
        """

    def testResolveInstanceConfigResponse(self):
        """Test ResolveInstanceConfigResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

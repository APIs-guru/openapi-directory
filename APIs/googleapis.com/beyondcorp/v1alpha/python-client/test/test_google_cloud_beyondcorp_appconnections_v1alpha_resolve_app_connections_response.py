# coding: utf-8

"""
    BeyondCorp API

    Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_beyondcorp_appconnections_v1alpha_resolve_app_connections_response import GoogleCloudBeyondcorpAppconnectionsV1alphaResolveAppConnectionsResponse

class TestGoogleCloudBeyondcorpAppconnectionsV1alphaResolveAppConnectionsResponse(unittest.TestCase):
    """GoogleCloudBeyondcorpAppconnectionsV1alphaResolveAppConnectionsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudBeyondcorpAppconnectionsV1alphaResolveAppConnectionsResponse:
        """Test GoogleCloudBeyondcorpAppconnectionsV1alphaResolveAppConnectionsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudBeyondcorpAppconnectionsV1alphaResolveAppConnectionsResponse`
        """
        model = GoogleCloudBeyondcorpAppconnectionsV1alphaResolveAppConnectionsResponse()
        if include_optional:
            return GoogleCloudBeyondcorpAppconnectionsV1alphaResolveAppConnectionsResponse(
                app_connection_details = [
                    openapi_client.models.google_cloud_beyondcorp_appconnections_v1alpha_resolve_app_connections_response_app_connection_details.GoogleCloudBeyondcorpAppconnectionsV1alphaResolveAppConnectionsResponseAppConnectionDetails(
                        app_connection = openapi_client.models.google_cloud_beyondcorp_appconnections_v1alpha_app_connection.GoogleCloudBeyondcorpAppconnectionsV1alphaAppConnection(
                            application_endpoint = openapi_client.models.google_cloud_beyondcorp_appconnections_v1alpha_app_connection_application_endpoint.GoogleCloudBeyondcorpAppconnectionsV1alphaAppConnectionApplicationEndpoint(
                                host = '', 
                                port = 56, ), 
                            connectors = [
                                ''
                                ], 
                            create_time = '', 
                            display_name = '', 
                            gateway = openapi_client.models.google_cloud_beyondcorp_appconnections_v1alpha_app_connection_gateway.GoogleCloudBeyondcorpAppconnectionsV1alphaAppConnectionGateway(
                                app_gateway = '', 
                                ingress_port = 56, 
                                l7psc = '', 
                                type = 'TYPE_UNSPECIFIED', 
                                uri = '', ), 
                            labels = {
                                'key' : ''
                                }, 
                            name = '', 
                            state = 'STATE_UNSPECIFIED', 
                            type = 'TYPE_UNSPECIFIED', 
                            uid = '', 
                            update_time = '', ), 
                        recent_mig_vms = [
                            ''
                            ], )
                    ],
                next_page_token = '',
                unreachable = [
                    ''
                    ]
            )
        else:
            return GoogleCloudBeyondcorpAppconnectionsV1alphaResolveAppConnectionsResponse(
        )
        """

    def testGoogleCloudBeyondcorpAppconnectionsV1alphaResolveAppConnectionsResponse(self):
        """Test GoogleCloudBeyondcorpAppconnectionsV1alphaResolveAppConnectionsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

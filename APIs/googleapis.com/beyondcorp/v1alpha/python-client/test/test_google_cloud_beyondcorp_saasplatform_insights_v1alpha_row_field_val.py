# coding: utf-8

"""
    BeyondCorp API

    Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_beyondcorp_saasplatform_insights_v1alpha_row_field_val import GoogleCloudBeyondcorpSaasplatformInsightsV1alphaRowFieldVal

class TestGoogleCloudBeyondcorpSaasplatformInsightsV1alphaRowFieldVal(unittest.TestCase):
    """GoogleCloudBeyondcorpSaasplatformInsightsV1alphaRowFieldVal unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudBeyondcorpSaasplatformInsightsV1alphaRowFieldVal:
        """Test GoogleCloudBeyondcorpSaasplatformInsightsV1alphaRowFieldVal
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudBeyondcorpSaasplatformInsightsV1alphaRowFieldVal`
        """
        model = GoogleCloudBeyondcorpSaasplatformInsightsV1alphaRowFieldVal()
        if include_optional:
            return GoogleCloudBeyondcorpSaasplatformInsightsV1alphaRowFieldVal(
                display_name = '',
                filter_alias = '',
                id = '',
                value = ''
            )
        else:
            return GoogleCloudBeyondcorpSaasplatformInsightsV1alphaRowFieldVal(
        )
        """

    def testGoogleCloudBeyondcorpSaasplatformInsightsV1alphaRowFieldVal(self):
        """Test GoogleCloudBeyondcorpSaasplatformInsightsV1alphaRowFieldVal"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

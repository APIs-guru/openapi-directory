# coding: utf-8

"""
    BeyondCorp API

    Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.app_gateway import AppGateway

class TestAppGateway(unittest.TestCase):
    """AppGateway unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppGateway:
        """Test AppGateway
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppGateway`
        """
        model = AppGateway()
        if include_optional:
            return AppGateway(
                allocated_connections = [
                    openapi_client.models.allocated_connection.AllocatedConnection(
                        ingress_port = 56, 
                        psc_uri = '', )
                    ],
                create_time = '',
                display_name = '',
                host_type = 'HOST_TYPE_UNSPECIFIED',
                labels = {
                    'key' : ''
                    },
                name = '',
                state = 'STATE_UNSPECIFIED',
                type = 'TYPE_UNSPECIFIED',
                uid = '',
                update_time = '',
                uri = ''
            )
        else:
            return AppGateway(
        )
        """

    def testAppGateway(self):
        """Test AppGateway"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    BeyondCorp API

    Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription(BaseModel):
    """
    A BeyondCorp Subscription resource represents BeyondCorp Enterprise Subscription. BeyondCorp Enterprise Subscription enables BeyondCorp Enterprise permium features for an organization.
    """ # noqa: E501
    auto_renew_enabled: Optional[StrictBool] = Field(default=None, description="Output only. Represents that, if subscription will renew or end when the term ends.", alias="autoRenewEnabled")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Create time of the subscription.", alias="createTime")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. End time of the subscription.", alias="endTime")
    name: Optional[StrictStr] = Field(default=None, description="Required. Unique resource name of the Subscription. The name is ignored when creating a subscription.")
    seat_count: Optional[StrictStr] = Field(default=None, description="Optional. Number of seats in the subscription.", alias="seatCount")
    sku: Optional[StrictStr] = Field(default=None, description="Required. SKU of subscription.")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. Start time of the subscription.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the subscription.")
    type: Optional[StrictStr] = Field(default=None, description="Required. Type of subscription.")
    __properties: ClassVar[List[str]] = ["autoRenewEnabled", "createTime", "endTime", "name", "seatCount", "sku", "startTime", "state", "type"]

    @field_validator('sku')
    def sku_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SKU_UNSPECIFIED', 'BCE_STANDARD_SKU']):
            raise ValueError("must be one of enum values ('SKU_UNSPECIFIED', 'BCE_STANDARD_SKU')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'INACTIVE', 'COMPLETED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'INACTIVE', 'COMPLETED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'TRIAL', 'PAID', 'ALLOWLIST']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'TRIAL', 'PAID', 'ALLOWLIST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "auto_renew_enabled",
            "create_time",
            "end_time",
            "start_time",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoRenewEnabled": obj.get("autoRenewEnabled"),
            "createTime": obj.get("createTime"),
            "endTime": obj.get("endTime"),
            "name": obj.get("name"),
            "seatCount": obj.get("seatCount"),
            "sku": obj.get("sku"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    BeyondCorp API

    Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_beyondcorp_saasplatform_insights_v1alpha_insight_metadata_field import GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata(BaseModel):
    """
    Insight filters, groupings and aggregations that can be applied for the insight. Examples: aggregations, groups, field filters.
    """ # noqa: E501
    aggregations: Optional[List[StrictStr]] = Field(default=None, description="Output only. List of aggregation types available for insight.")
    category: Optional[StrictStr] = Field(default=None, description="Output only. Category of the insight.")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. Common name of the insight.", alias="displayName")
    fields: Optional[List[GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField]] = Field(default=None, description="Output only. List of fields available for insight.")
    groups: Optional[List[StrictStr]] = Field(default=None, description="Output only. List of groupings available for insight.")
    sub_category: Optional[StrictStr] = Field(default=None, description="Output only. Sub-Category of the insight.", alias="subCategory")
    type: Optional[StrictStr] = Field(default=None, description="Output only. Type of the insight. It is metadata describing whether the insight is a metric (e.g. count) or a report (e.g. list, status).")
    __properties: ClassVar[List[str]] = ["aggregations", "category", "displayName", "fields", "groups", "subCategory", "type"]

    @field_validator('aggregations')
    def aggregations_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['AGGREGATION_UNSPECIFIED', 'HOURLY', 'DAILY', 'WEEKLY', 'MONTHLY', 'CUSTOM_DATE_RANGE']):
                raise ValueError("each list item must be one of ('AGGREGATION_UNSPECIFIED', 'HOURLY', 'DAILY', 'WEEKLY', 'MONTHLY', 'CUSTOM_DATE_RANGE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "aggregations",
            "category",
            "display_name",
            "fields",
            "groups",
            "sub_category",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item_fields in self.fields:
                if _item_fields:
                    _items.append(_item_fields.to_dict())
            _dict['fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregations": obj.get("aggregations"),
            "category": obj.get("category"),
            "displayName": obj.get("displayName"),
            "fields": [GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField.from_dict(_item) for _item in obj["fields"]] if obj.get("fields") is not None else None,
            "groups": obj.get("groups"),
            "subCategory": obj.get("subCategory"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    BeyondCorp API

    Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.principal_info import PrincipalInfo
from openapi_client.models.resource_info import ResourceInfo
from typing import Optional, Set
from typing_extensions import Self

class Connector(BaseModel):
    """
    A BeyondCorp connector resource that represents an application facing component deployed proximal to and with direct access to the application instances. It is used to establish connectivity between the remote enterprise environment and GCP. It initiates connections to the applications and can proxy the data from users over the connection.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the resource was created.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. An arbitrary user-provided name for the connector. Cannot exceed 64 characters.", alias="displayName")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Resource labels to represent user provided metadata.")
    name: Optional[StrictStr] = Field(default=None, description="Required. Unique resource name of the connector. The name is ignored when creating a connector.")
    principal_info: Optional[PrincipalInfo] = Field(default=None, alias="principalInfo")
    resource_info: Optional[ResourceInfo] = Field(default=None, alias="resourceInfo")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the connector.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. A unique identifier for the instance generated by the system.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the resource was last modified.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "displayName", "labels", "name", "principalInfo", "resourceInfo", "state", "uid", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'CREATED', 'UPDATING', 'DELETING', 'DOWN']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'CREATED', 'UPDATING', 'DELETING', 'DOWN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Connector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "state",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of principal_info
        if self.principal_info:
            _dict['principalInfo'] = self.principal_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_info
        if self.resource_info:
            _dict['resourceInfo'] = self.resource_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Connector from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "principalInfo": PrincipalInfo.from_dict(obj["principalInfo"]) if obj.get("principalInfo") is not None else None,
            "resourceInfo": ResourceInfo.from_dict(obj["resourceInfo"]) if obj.get("resourceInfo") is not None else None,
            "state": obj.get("state"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    BeyondCorp API

    Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_beyondcorp_appconnections_v1alpha_app_connection_application_endpoint import GoogleCloudBeyondcorpAppconnectionsV1alphaAppConnectionApplicationEndpoint
from openapi_client.models.google_cloud_beyondcorp_appconnections_v1alpha_app_connection_gateway import GoogleCloudBeyondcorpAppconnectionsV1alphaAppConnectionGateway
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudBeyondcorpAppconnectionsV1alphaAppConnection(BaseModel):
    """
    A BeyondCorp AppConnection resource represents a BeyondCorp protected AppConnection to a remote application. It creates all the necessary GCP components needed for creating a BeyondCorp protected AppConnection. Multiple connectors can be authorised for a single AppConnection.
    """ # noqa: E501
    application_endpoint: Optional[GoogleCloudBeyondcorpAppconnectionsV1alphaAppConnectionApplicationEndpoint] = Field(default=None, alias="applicationEndpoint")
    connectors: Optional[List[StrictStr]] = Field(default=None, description="Optional. List of [google.cloud.beyondcorp.v1main.Connector.name] that are authorised to be associated with this AppConnection.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the resource was created.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. An arbitrary user-provided name for the AppConnection. Cannot exceed 64 characters.", alias="displayName")
    gateway: Optional[GoogleCloudBeyondcorpAppconnectionsV1alphaAppConnectionGateway] = None
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Resource labels to represent user provided metadata.")
    name: Optional[StrictStr] = Field(default=None, description="Required. Unique resource name of the AppConnection. The name is ignored when creating a AppConnection.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the AppConnection.")
    type: Optional[StrictStr] = Field(default=None, description="Required. The type of network connectivity used by the AppConnection.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. A unique identifier for the instance generated by the system.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the resource was last modified.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["applicationEndpoint", "connectors", "createTime", "displayName", "gateway", "labels", "name", "state", "type", "uid", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'CREATED', 'UPDATING', 'DELETING', 'DOWN']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'CREATED', 'UPDATING', 'DELETING', 'DOWN')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'TCP_PROXY']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'TCP_PROXY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudBeyondcorpAppconnectionsV1alphaAppConnection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "state",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of application_endpoint
        if self.application_endpoint:
            _dict['applicationEndpoint'] = self.application_endpoint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gateway
        if self.gateway:
            _dict['gateway'] = self.gateway.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudBeyondcorpAppconnectionsV1alphaAppConnection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationEndpoint": GoogleCloudBeyondcorpAppconnectionsV1alphaAppConnectionApplicationEndpoint.from_dict(obj["applicationEndpoint"]) if obj.get("applicationEndpoint") is not None else None,
            "connectors": obj.get("connectors"),
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "gateway": GoogleCloudBeyondcorpAppconnectionsV1alphaAppConnectionGateway.from_dict(obj["gateway"]) if obj.get("gateway") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "state": obj.get("state"),
            "type": obj.get("type"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



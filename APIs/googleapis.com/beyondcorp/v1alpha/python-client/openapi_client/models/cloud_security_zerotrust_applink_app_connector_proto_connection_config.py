# coding: utf-8

"""
    BeyondCorp API

    Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cloud_security_zerotrust_applink_app_connector_proto_gateway import CloudSecurityZerotrustApplinkAppConnectorProtoGateway
from typing import Optional, Set
from typing_extensions import Self

class CloudSecurityZerotrustApplinkAppConnectorProtoConnectionConfig(BaseModel):
    """
    ConnectionConfig represents a Connection Configuration object.
    """ # noqa: E501
    application_endpoint: Optional[StrictStr] = Field(default=None, description="application_endpoint is the endpoint of the application the form of host:port. For example, \"localhost:80\".", alias="applicationEndpoint")
    application_name: Optional[StrictStr] = Field(default=None, description="application_name represents the given name of the application the connection is connecting with.", alias="applicationName")
    gateway: Optional[List[CloudSecurityZerotrustApplinkAppConnectorProtoGateway]] = Field(default=None, description="gateway lists all instances running a gateway in GCP. They all connect to a connector on the host.")
    name: Optional[StrictStr] = Field(default=None, description="name is the unique ID for each connection. TODO(b/190732451) returns connection name from user-specified name in config. Now, name = ${application_name}:${application_endpoint}")
    project: Optional[StrictStr] = Field(default=None, description="project represents the consumer project the connection belongs to.")
    tunnels_per_gateway: Optional[StrictInt] = Field(default=None, description="tunnels_per_gateway reflects the number of tunnels between a connector and a gateway.", alias="tunnelsPerGateway")
    user_port: Optional[StrictInt] = Field(default=None, description="user_port specifies the reserved port on gateways for user connections.", alias="userPort")
    __properties: ClassVar[List[str]] = ["applicationEndpoint", "applicationName", "gateway", "name", "project", "tunnelsPerGateway", "userPort"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudSecurityZerotrustApplinkAppConnectorProtoConnectionConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in gateway (list)
        _items = []
        if self.gateway:
            for _item_gateway in self.gateway:
                if _item_gateway:
                    _items.append(_item_gateway.to_dict())
            _dict['gateway'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudSecurityZerotrustApplinkAppConnectorProtoConnectionConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationEndpoint": obj.get("applicationEndpoint"),
            "applicationName": obj.get("applicationName"),
            "gateway": [CloudSecurityZerotrustApplinkAppConnectorProtoGateway.from_dict(_item) for _item in obj["gateway"]] if obj.get("gateway") is not None else None,
            "name": obj.get("name"),
            "project": obj.get("project"),
            "tunnelsPerGateway": obj.get("tunnelsPerGateway"),
            "userPort": obj.get("userPort")
        })
        return _obj



# coding: utf-8

"""
    BeyondCorp API

    Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_beyondcorp_partnerservices_v1alpha_group import GoogleCloudBeyondcorpPartnerservicesV1alphaGroup
from openapi_client.models.google_cloud_beyondcorp_partnerservices_v1alpha_partner_metadata import GoogleCloudBeyondcorpPartnerservicesV1alphaPartnerMetadata
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudBeyondcorpPartnerservicesV1alphaPartnerTenant(BaseModel):
    """
    Information about a BeyoncCorp Enterprise PartnerTenant.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the resource was created.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. An arbitrary caller-provided name for the PartnerTenant. Cannot exceed 64 characters.", alias="displayName")
    group: Optional[GoogleCloudBeyondcorpPartnerservicesV1alphaGroup] = None
    name: Optional[StrictStr] = Field(default=None, description="Output only. Unique resource name of the PartnerTenant. The name is ignored when creating PartnerTenant.")
    partner_metadata: Optional[GoogleCloudBeyondcorpPartnerservicesV1alphaPartnerMetadata] = Field(default=None, alias="partnerMetadata")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the resource was last modified.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "displayName", "group", "name", "partnerMetadata", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudBeyondcorpPartnerservicesV1alphaPartnerTenant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group:
            _dict['group'] = self.group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of partner_metadata
        if self.partner_metadata:
            _dict['partnerMetadata'] = self.partner_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudBeyondcorpPartnerservicesV1alphaPartnerTenant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "group": GoogleCloudBeyondcorpPartnerservicesV1alphaGroup.from_dict(obj["group"]) if obj.get("group") is not None else None,
            "name": obj.get("name"),
            "partnerMetadata": GoogleCloudBeyondcorpPartnerservicesV1alphaPartnerMetadata.from_dict(obj["partnerMetadata"]) if obj.get("partnerMetadata") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Cloud Run Admin API

    Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.instance_attempt_result import InstanceAttemptResult
from typing import Optional, Set
from typing_extensions import Self

class InstanceStatus(BaseModel):
    """
    Instance represents the status of an instance of a Job.
    """ # noqa: E501
    completion_time: Optional[StrictStr] = Field(default=None, description="Optional. Represents time when the instance was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional", alias="completionTime")
    failed: Optional[StrictInt] = Field(default=None, description="Optional. The number of times this instance exited with code > 0; +optional")
    index: Optional[StrictInt] = Field(default=None, description="Required. Index of the instance, unique per Job, and beginning at 0.")
    last_attempt_result: Optional[InstanceAttemptResult] = Field(default=None, alias="lastAttemptResult")
    last_exit_code: Optional[StrictInt] = Field(default=None, description="Optional. Last exit code seen for this instance. +optional", alias="lastExitCode")
    restarted: Optional[StrictInt] = Field(default=None, description="Optional. The number of times this instance was restarted. Instances are restarted according the restartPolicy configured in the Job template. +optional")
    start_time: Optional[StrictStr] = Field(default=None, description="Optional. Represents time when the instance was created by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional", alias="startTime")
    succeeded: Optional[StrictInt] = Field(default=None, description="Optional. The number of times this instance exited with code == 0. +optional")
    __properties: ClassVar[List[str]] = ["completionTime", "failed", "index", "lastAttemptResult", "lastExitCode", "restarted", "startTime", "succeeded"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstanceStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_attempt_result
        if self.last_attempt_result:
            _dict['lastAttemptResult'] = self.last_attempt_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstanceStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "completionTime": obj.get("completionTime"),
            "failed": obj.get("failed"),
            "index": obj.get("index"),
            "lastAttemptResult": InstanceAttemptResult.from_dict(obj["lastAttemptResult"]) if obj.get("lastAttemptResult") is not None else None,
            "lastExitCode": obj.get("lastExitCode"),
            "restarted": obj.get("restarted"),
            "startTime": obj.get("startTime"),
            "succeeded": obj.get("succeeded")
        })
        return _obj



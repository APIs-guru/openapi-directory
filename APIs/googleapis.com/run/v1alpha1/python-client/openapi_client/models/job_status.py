# coding: utf-8

"""
    Cloud Run Admin API

    Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.instance_status import InstanceStatus
from openapi_client.models.job_condition import JobCondition
from typing import Optional, Set
from typing_extensions import Self

class JobStatus(BaseModel):
    """
    JobStatus represents the current state of a Job.
    """ # noqa: E501
    active: Optional[StrictInt] = Field(default=None, description="Optional. The number of actively running instances. +optional")
    completion_time: Optional[StrictStr] = Field(default=None, description="Optional. Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional", alias="completionTime")
    conditions: Optional[List[JobCondition]] = Field(default=None, description="Optional. The latest available observations of a job's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional")
    failed: Optional[StrictInt] = Field(default=None, description="Optional. The number of instances which reached phase Failed. +optional")
    image_digest: Optional[StrictStr] = Field(default=None, description="Optional. ImageDigest holds the resolved digest for the image specified within .Spec.Template.Spec.Container.Image. The digest is resolved during the creation of the Job. This field holds the digest value regardless of whether a tag or digest was originally specified in the Container object.", alias="imageDigest")
    instances: Optional[List[InstanceStatus]] = Field(default=None, description="Optional. Status of completed, failed, and running instances. +optional")
    observed_generation: Optional[StrictInt] = Field(default=None, description="Optional. The 'generation' of the job that was last processed by the controller.", alias="observedGeneration")
    start_time: Optional[StrictStr] = Field(default=None, description="Optional. Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional", alias="startTime")
    succeeded: Optional[StrictInt] = Field(default=None, description="Optional. The number of instances which reached phase Succeeded. +optional")
    __properties: ClassVar[List[str]] = ["active", "completionTime", "conditions", "failed", "imageDigest", "instances", "observedGeneration", "startTime", "succeeded"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in instances (list)
        _items = []
        if self.instances:
            for _item_instances in self.instances:
                if _item_instances:
                    _items.append(_item_instances.to_dict())
            _dict['instances'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "completionTime": obj.get("completionTime"),
            "conditions": [JobCondition.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None,
            "failed": obj.get("failed"),
            "imageDigest": obj.get("imageDigest"),
            "instances": [InstanceStatus.from_dict(_item) for _item in obj["instances"]] if obj.get("instances") is not None else None,
            "observedGeneration": obj.get("observedGeneration"),
            "startTime": obj.get("startTime"),
            "succeeded": obj.get("succeeded")
        })
        return _obj



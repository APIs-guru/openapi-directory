# coding: utf-8

"""
    Cloud Run Admin API

    Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_run_v2_task_attempt_result import GoogleCloudRunV2TaskAttemptResult

class TestGoogleCloudRunV2TaskAttemptResult(unittest.TestCase):
    """GoogleCloudRunV2TaskAttemptResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudRunV2TaskAttemptResult:
        """Test GoogleCloudRunV2TaskAttemptResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudRunV2TaskAttemptResult`
        """
        model = GoogleCloudRunV2TaskAttemptResult()
        if include_optional:
            return GoogleCloudRunV2TaskAttemptResult(
                exit_code = 56,
                status = openapi_client.models.google_rpc_status.GoogleRpcStatus(
                    code = 56, 
                    details = [
                        {
                            'key' : null
                            }
                        ], 
                    message = '', )
            )
        else:
            return GoogleCloudRunV2TaskAttemptResult(
        )
        """

    def testGoogleCloudRunV2TaskAttemptResult(self):
        """Test GoogleCloudRunV2TaskAttemptResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

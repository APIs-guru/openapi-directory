# coding: utf-8

"""
    Cloud Run Admin API

    Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_run_v2_container import GoogleCloudRunV2Container
from openapi_client.models.google_cloud_run_v2_volume import GoogleCloudRunV2Volume
from openapi_client.models.google_cloud_run_v2_vpc_access import GoogleCloudRunV2VpcAccess
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRunV2TaskTemplate(BaseModel):
    """
    TaskTemplate describes the data a task should have when created from a template.
    """ # noqa: E501
    containers: Optional[List[GoogleCloudRunV2Container]] = Field(default=None, description="Holds the single container that defines the unit of execution for this task.")
    encryption_key: Optional[StrictStr] = Field(default=None, description="A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek", alias="encryptionKey")
    execution_environment: Optional[StrictStr] = Field(default=None, description="The execution environment being used to host this Task.", alias="executionEnvironment")
    max_retries: Optional[StrictInt] = Field(default=None, description="Number of retries allowed per Task, before marking this Task failed. Defaults to 3.", alias="maxRetries")
    service_account: Optional[StrictStr] = Field(default=None, description="Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.", alias="serviceAccount")
    timeout: Optional[StrictStr] = Field(default=None, description="Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout. Defaults to 600 seconds.")
    volumes: Optional[List[GoogleCloudRunV2Volume]] = Field(default=None, description="A list of Volumes to make available to containers.")
    vpc_access: Optional[GoogleCloudRunV2VpcAccess] = Field(default=None, alias="vpcAccess")
    __properties: ClassVar[List[str]] = ["containers", "encryptionKey", "executionEnvironment", "maxRetries", "serviceAccount", "timeout", "volumes", "vpcAccess"]

    @field_validator('execution_environment')
    def execution_environment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXECUTION_ENVIRONMENT_UNSPECIFIED', 'EXECUTION_ENVIRONMENT_GEN1', 'EXECUTION_ENVIRONMENT_GEN2']):
            raise ValueError("must be one of enum values ('EXECUTION_ENVIRONMENT_UNSPECIFIED', 'EXECUTION_ENVIRONMENT_GEN1', 'EXECUTION_ENVIRONMENT_GEN2')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRunV2TaskTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in containers (list)
        _items = []
        if self.containers:
            for _item_containers in self.containers:
                if _item_containers:
                    _items.append(_item_containers.to_dict())
            _dict['containers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in volumes (list)
        _items = []
        if self.volumes:
            for _item_volumes in self.volumes:
                if _item_volumes:
                    _items.append(_item_volumes.to_dict())
            _dict['volumes'] = _items
        # override the default output from pydantic by calling `to_dict()` of vpc_access
        if self.vpc_access:
            _dict['vpcAccess'] = self.vpc_access.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRunV2TaskTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containers": [GoogleCloudRunV2Container.from_dict(_item) for _item in obj["containers"]] if obj.get("containers") is not None else None,
            "encryptionKey": obj.get("encryptionKey"),
            "executionEnvironment": obj.get("executionEnvironment"),
            "maxRetries": obj.get("maxRetries"),
            "serviceAccount": obj.get("serviceAccount"),
            "timeout": obj.get("timeout"),
            "volumes": [GoogleCloudRunV2Volume.from_dict(_item) for _item in obj["volumes"]] if obj.get("volumes") is not None else None,
            "vpcAccess": GoogleCloudRunV2VpcAccess.from_dict(obj["vpcAccess"]) if obj.get("vpcAccess") is not None else None
        })
        return _obj



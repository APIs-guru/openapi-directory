# coding: utf-8

"""
    Cloud Run Admin API

    Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_run_v2_condition import GoogleCloudRunV2Condition
from openapi_client.models.google_cloud_run_v2_task_template import GoogleCloudRunV2TaskTemplate
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRunV2Execution(BaseModel):
    """
    Execution represents the configuration of a single execution. A execution an immutable resource that references a container image which is run to completion.
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Output only. Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.")
    cancelled_count: Optional[StrictInt] = Field(default=None, description="Output only. The number of tasks which reached phase Cancelled.", alias="cancelledCount")
    completion_time: Optional[StrictStr] = Field(default=None, description="Output only. Represents time when the execution was completed. It is not guaranteed to be set in happens-before order across separate operations.", alias="completionTime")
    conditions: Optional[List[GoogleCloudRunV2Condition]] = Field(default=None, description="Output only. The Condition of this Execution, containing its readiness status, and detailed error information in case it did not reach the desired state.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Represents time when the execution was acknowledged by the execution controller. It is not guaranteed to be set in happens-before order across separate operations.", alias="createTime")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. For a deleted resource, the deletion time. It is only populated as a response to a Delete request.", alias="deleteTime")
    etag: Optional[StrictStr] = Field(default=None, description="Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.")
    expire_time: Optional[StrictStr] = Field(default=None, description="Output only. For a deleted resource, the time after which it will be permamently deleted. It is only populated as a response to a Delete request.", alias="expireTime")
    failed_count: Optional[StrictInt] = Field(default=None, description="Output only. The number of tasks which reached phase Failed.", alias="failedCount")
    generation: Optional[StrictStr] = Field(default=None, description="Output only. A number that monotonically increases every time the user modifies the desired state.")
    job: Optional[StrictStr] = Field(default=None, description="Output only. The name of the parent Job.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Output only. Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels")
    launch_stage: Optional[StrictStr] = Field(default=None, description="The least stable launch stage needed to create this resource, as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. Note that this value might not be what was used as input. For example, if ALPHA was provided as input in the parent resource, but only BETA and GA-level features are were, this field will be BETA.", alias="launchStage")
    log_uri: Optional[StrictStr] = Field(default=None, description="Output only. URI where logs for this execution can be found in Cloud Console.", alias="logUri")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The unique name of this Execution.")
    observed_generation: Optional[StrictStr] = Field(default=None, description="Output only. The generation of this Execution. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.", alias="observedGeneration")
    parallelism: Optional[StrictInt] = Field(default=None, description="Output only. Specifies the maximum desired number of tasks the execution should run at any given time. Must be <= task_count. The actual number of tasks running in steady state will be less than this number when ((.spec.task_count - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism.")
    reconciling: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the resource's reconciliation is still in progress. See comments in `Job.reconciling` for additional information on reconciliation process in Cloud Run.")
    retried_count: Optional[StrictInt] = Field(default=None, description="Output only. The number of tasks which have retried at least once.", alias="retriedCount")
    running_count: Optional[StrictInt] = Field(default=None, description="Output only. The number of actively running tasks.", alias="runningCount")
    satisfies_pzs: Optional[StrictBool] = Field(default=None, description="Output only. Reserved for future use.", alias="satisfiesPzs")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. Represents time when the execution started to run. It is not guaranteed to be set in happens-before order across separate operations.", alias="startTime")
    succeeded_count: Optional[StrictInt] = Field(default=None, description="Output only. The number of tasks which reached phase Succeeded.", alias="succeededCount")
    task_count: Optional[StrictInt] = Field(default=None, description="Output only. Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution.", alias="taskCount")
    template: Optional[GoogleCloudRunV2TaskTemplate] = None
    uid: Optional[StrictStr] = Field(default=None, description="Output only. Server assigned unique identifier for the Execution. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last-modified time.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["annotations", "cancelledCount", "completionTime", "conditions", "createTime", "deleteTime", "etag", "expireTime", "failedCount", "generation", "job", "labels", "launchStage", "logUri", "name", "observedGeneration", "parallelism", "reconciling", "retriedCount", "runningCount", "satisfiesPzs", "startTime", "succeededCount", "taskCount", "template", "uid", "updateTime"]

    @field_validator('launch_stage')
    def launch_stage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LAUNCH_STAGE_UNSPECIFIED', 'UNIMPLEMENTED', 'PRELAUNCH', 'EARLY_ACCESS', 'ALPHA', 'BETA', 'GA', 'DEPRECATED']):
            raise ValueError("must be one of enum values ('LAUNCH_STAGE_UNSPECIFIED', 'UNIMPLEMENTED', 'PRELAUNCH', 'EARLY_ACCESS', 'ALPHA', 'BETA', 'GA', 'DEPRECATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRunV2Execution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "annotations",
            "cancelled_count",
            "completion_time",
            "conditions",
            "create_time",
            "delete_time",
            "etag",
            "expire_time",
            "failed_count",
            "generation",
            "job",
            "labels",
            "log_uri",
            "name",
            "observed_generation",
            "parallelism",
            "reconciling",
            "retried_count",
            "running_count",
            "satisfies_pzs",
            "start_time",
            "succeeded_count",
            "task_count",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of template
        if self.template:
            _dict['template'] = self.template.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRunV2Execution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "cancelledCount": obj.get("cancelledCount"),
            "completionTime": obj.get("completionTime"),
            "conditions": [GoogleCloudRunV2Condition.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None,
            "createTime": obj.get("createTime"),
            "deleteTime": obj.get("deleteTime"),
            "etag": obj.get("etag"),
            "expireTime": obj.get("expireTime"),
            "failedCount": obj.get("failedCount"),
            "generation": obj.get("generation"),
            "job": obj.get("job"),
            "labels": obj.get("labels"),
            "launchStage": obj.get("launchStage"),
            "logUri": obj.get("logUri"),
            "name": obj.get("name"),
            "observedGeneration": obj.get("observedGeneration"),
            "parallelism": obj.get("parallelism"),
            "reconciling": obj.get("reconciling"),
            "retriedCount": obj.get("retriedCount"),
            "runningCount": obj.get("runningCount"),
            "satisfiesPzs": obj.get("satisfiesPzs"),
            "startTime": obj.get("startTime"),
            "succeededCount": obj.get("succeededCount"),
            "taskCount": obj.get("taskCount"),
            "template": GoogleCloudRunV2TaskTemplate.from_dict(obj["template"]) if obj.get("template") is not None else None,
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Cloud Run Admin API

    Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_run_v2_cloud_sql_instance import GoogleCloudRunV2CloudSqlInstance
from openapi_client.models.google_cloud_run_v2_empty_dir_volume_source import GoogleCloudRunV2EmptyDirVolumeSource
from openapi_client.models.google_cloud_run_v2_gcs_volume_source import GoogleCloudRunV2GCSVolumeSource
from openapi_client.models.google_cloud_run_v2_nfs_volume_source import GoogleCloudRunV2NFSVolumeSource
from openapi_client.models.google_cloud_run_v2_secret_volume_source import GoogleCloudRunV2SecretVolumeSource
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRunV2Volume(BaseModel):
    """
    Volume represents a named volume in a container.
    """ # noqa: E501
    cloud_sql_instance: Optional[GoogleCloudRunV2CloudSqlInstance] = Field(default=None, alias="cloudSqlInstance")
    empty_dir: Optional[GoogleCloudRunV2EmptyDirVolumeSource] = Field(default=None, alias="emptyDir")
    gcs: Optional[GoogleCloudRunV2GCSVolumeSource] = None
    name: Optional[StrictStr] = Field(default=None, description="Required. Volume's name.")
    nfs: Optional[GoogleCloudRunV2NFSVolumeSource] = None
    secret: Optional[GoogleCloudRunV2SecretVolumeSource] = None
    __properties: ClassVar[List[str]] = ["cloudSqlInstance", "emptyDir", "gcs", "name", "nfs", "secret"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRunV2Volume from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cloud_sql_instance
        if self.cloud_sql_instance:
            _dict['cloudSqlInstance'] = self.cloud_sql_instance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of empty_dir
        if self.empty_dir:
            _dict['emptyDir'] = self.empty_dir.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcs
        if self.gcs:
            _dict['gcs'] = self.gcs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nfs
        if self.nfs:
            _dict['nfs'] = self.nfs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secret
        if self.secret:
            _dict['secret'] = self.secret.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRunV2Volume from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudSqlInstance": GoogleCloudRunV2CloudSqlInstance.from_dict(obj["cloudSqlInstance"]) if obj.get("cloudSqlInstance") is not None else None,
            "emptyDir": GoogleCloudRunV2EmptyDirVolumeSource.from_dict(obj["emptyDir"]) if obj.get("emptyDir") is not None else None,
            "gcs": GoogleCloudRunV2GCSVolumeSource.from_dict(obj["gcs"]) if obj.get("gcs") is not None else None,
            "name": obj.get("name"),
            "nfs": GoogleCloudRunV2NFSVolumeSource.from_dict(obj["nfs"]) if obj.get("nfs") is not None else None,
            "secret": GoogleCloudRunV2SecretVolumeSource.from_dict(obj["secret"]) if obj.get("secret") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Run Admin API

    Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_run_v2_container_port import GoogleCloudRunV2ContainerPort
from openapi_client.models.google_cloud_run_v2_env_var import GoogleCloudRunV2EnvVar
from openapi_client.models.google_cloud_run_v2_probe import GoogleCloudRunV2Probe
from openapi_client.models.google_cloud_run_v2_resource_requirements import GoogleCloudRunV2ResourceRequirements
from openapi_client.models.google_cloud_run_v2_volume_mount import GoogleCloudRunV2VolumeMount
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRunV2Container(BaseModel):
    """
    A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments can be supplied by the system to the container at runtime.
    """ # noqa: E501
    args: Optional[List[StrictStr]] = Field(default=None, description="Arguments to the entrypoint. The docker image's CMD is used if this is not provided.")
    command: Optional[List[StrictStr]] = Field(default=None, description="Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided.")
    depends_on: Optional[List[StrictStr]] = Field(default=None, description="Names of the containers that must start before this container.", alias="dependsOn")
    env: Optional[List[GoogleCloudRunV2EnvVar]] = Field(default=None, description="List of environment variables to set in the container.")
    image: Optional[StrictStr] = Field(default=None, description="Required. Name of the container image in Dockerhub, Google Artifact Registry, or Google Container Registry. If the host is not provided, Dockerhub is assumed.")
    liveness_probe: Optional[GoogleCloudRunV2Probe] = Field(default=None, alias="livenessProbe")
    name: Optional[StrictStr] = Field(default=None, description="Name of the container specified as a DNS_LABEL (RFC 1123).")
    ports: Optional[List[GoogleCloudRunV2ContainerPort]] = Field(default=None, description="List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.")
    resources: Optional[GoogleCloudRunV2ResourceRequirements] = None
    startup_probe: Optional[GoogleCloudRunV2Probe] = Field(default=None, alias="startupProbe")
    volume_mounts: Optional[List[GoogleCloudRunV2VolumeMount]] = Field(default=None, description="Volume to mount into the container's filesystem.", alias="volumeMounts")
    working_dir: Optional[StrictStr] = Field(default=None, description="Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.", alias="workingDir")
    __properties: ClassVar[List[str]] = ["args", "command", "dependsOn", "env", "image", "livenessProbe", "name", "ports", "resources", "startupProbe", "volumeMounts", "workingDir"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRunV2Container from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in env (list)
        _items = []
        if self.env:
            for _item_env in self.env:
                if _item_env:
                    _items.append(_item_env.to_dict())
            _dict['env'] = _items
        # override the default output from pydantic by calling `to_dict()` of liveness_probe
        if self.liveness_probe:
            _dict['livenessProbe'] = self.liveness_probe.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ports (list)
        _items = []
        if self.ports:
            for _item_ports in self.ports:
                if _item_ports:
                    _items.append(_item_ports.to_dict())
            _dict['ports'] = _items
        # override the default output from pydantic by calling `to_dict()` of resources
        if self.resources:
            _dict['resources'] = self.resources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of startup_probe
        if self.startup_probe:
            _dict['startupProbe'] = self.startup_probe.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in volume_mounts (list)
        _items = []
        if self.volume_mounts:
            for _item_volume_mounts in self.volume_mounts:
                if _item_volume_mounts:
                    _items.append(_item_volume_mounts.to_dict())
            _dict['volumeMounts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRunV2Container from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "args": obj.get("args"),
            "command": obj.get("command"),
            "dependsOn": obj.get("dependsOn"),
            "env": [GoogleCloudRunV2EnvVar.from_dict(_item) for _item in obj["env"]] if obj.get("env") is not None else None,
            "image": obj.get("image"),
            "livenessProbe": GoogleCloudRunV2Probe.from_dict(obj["livenessProbe"]) if obj.get("livenessProbe") is not None else None,
            "name": obj.get("name"),
            "ports": [GoogleCloudRunV2ContainerPort.from_dict(_item) for _item in obj["ports"]] if obj.get("ports") is not None else None,
            "resources": GoogleCloudRunV2ResourceRequirements.from_dict(obj["resources"]) if obj.get("resources") is not None else None,
            "startupProbe": GoogleCloudRunV2Probe.from_dict(obj["startupProbe"]) if obj.get("startupProbe") is not None else None,
            "volumeMounts": [GoogleCloudRunV2VolumeMount.from_dict(_item) for _item in obj["volumeMounts"]] if obj.get("volumeMounts") is not None else None,
            "workingDir": obj.get("workingDir")
        })
        return _obj



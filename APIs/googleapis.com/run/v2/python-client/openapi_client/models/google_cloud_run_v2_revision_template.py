# coding: utf-8

"""
    Cloud Run Admin API

    Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_run_v2_container import GoogleCloudRunV2Container
from openapi_client.models.google_cloud_run_v2_revision_scaling import GoogleCloudRunV2RevisionScaling
from openapi_client.models.google_cloud_run_v2_volume import GoogleCloudRunV2Volume
from openapi_client.models.google_cloud_run_v2_vpc_access import GoogleCloudRunV2VpcAccess
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRunV2RevisionTemplate(BaseModel):
    """
    RevisionTemplate describes the data a revision should have when created from a template.
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system annotations in v1 now have a corresponding field in v2 RevisionTemplate. This field follows Kubernetes annotations' namespacing, limits, and rules.")
    containers: Optional[List[GoogleCloudRunV2Container]] = Field(default=None, description="Holds the single container that defines the unit of execution for this Revision.")
    encryption_key: Optional[StrictStr] = Field(default=None, description="A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek", alias="encryptionKey")
    execution_environment: Optional[StrictStr] = Field(default=None, description="The sandbox environment to host this Revision.", alias="executionEnvironment")
    health_check_disabled: Optional[StrictBool] = Field(default=None, description="Optional. Disables health checking containers during deployment.", alias="healthCheckDisabled")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does not support labels with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system labels in v1 now have a corresponding field in v2 RevisionTemplate.")
    max_instance_request_concurrency: Optional[StrictInt] = Field(default=None, description="Sets the maximum number of requests that each serving instance can receive.", alias="maxInstanceRequestConcurrency")
    revision: Optional[StrictStr] = Field(default=None, description="The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.")
    scaling: Optional[GoogleCloudRunV2RevisionScaling] = None
    service_account: Optional[StrictStr] = Field(default=None, description="Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.", alias="serviceAccount")
    session_affinity: Optional[StrictBool] = Field(default=None, description="Optional. Enable session affinity.", alias="sessionAffinity")
    timeout: Optional[StrictStr] = Field(default=None, description="Max allowed time for an instance to respond to a request.")
    volumes: Optional[List[GoogleCloudRunV2Volume]] = Field(default=None, description="A list of Volumes to make available to containers.")
    vpc_access: Optional[GoogleCloudRunV2VpcAccess] = Field(default=None, alias="vpcAccess")
    __properties: ClassVar[List[str]] = ["annotations", "containers", "encryptionKey", "executionEnvironment", "healthCheckDisabled", "labels", "maxInstanceRequestConcurrency", "revision", "scaling", "serviceAccount", "sessionAffinity", "timeout", "volumes", "vpcAccess"]

    @field_validator('execution_environment')
    def execution_environment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXECUTION_ENVIRONMENT_UNSPECIFIED', 'EXECUTION_ENVIRONMENT_GEN1', 'EXECUTION_ENVIRONMENT_GEN2']):
            raise ValueError("must be one of enum values ('EXECUTION_ENVIRONMENT_UNSPECIFIED', 'EXECUTION_ENVIRONMENT_GEN1', 'EXECUTION_ENVIRONMENT_GEN2')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRunV2RevisionTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in containers (list)
        _items = []
        if self.containers:
            for _item_containers in self.containers:
                if _item_containers:
                    _items.append(_item_containers.to_dict())
            _dict['containers'] = _items
        # override the default output from pydantic by calling `to_dict()` of scaling
        if self.scaling:
            _dict['scaling'] = self.scaling.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in volumes (list)
        _items = []
        if self.volumes:
            for _item_volumes in self.volumes:
                if _item_volumes:
                    _items.append(_item_volumes.to_dict())
            _dict['volumes'] = _items
        # override the default output from pydantic by calling `to_dict()` of vpc_access
        if self.vpc_access:
            _dict['vpcAccess'] = self.vpc_access.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRunV2RevisionTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "containers": [GoogleCloudRunV2Container.from_dict(_item) for _item in obj["containers"]] if obj.get("containers") is not None else None,
            "encryptionKey": obj.get("encryptionKey"),
            "executionEnvironment": obj.get("executionEnvironment"),
            "healthCheckDisabled": obj.get("healthCheckDisabled"),
            "labels": obj.get("labels"),
            "maxInstanceRequestConcurrency": obj.get("maxInstanceRequestConcurrency"),
            "revision": obj.get("revision"),
            "scaling": GoogleCloudRunV2RevisionScaling.from_dict(obj["scaling"]) if obj.get("scaling") is not None else None,
            "serviceAccount": obj.get("serviceAccount"),
            "sessionAffinity": obj.get("sessionAffinity"),
            "timeout": obj.get("timeout"),
            "volumes": [GoogleCloudRunV2Volume.from_dict(_item) for _item in obj["volumes"]] if obj.get("volumes") is not None else None,
            "vpcAccess": GoogleCloudRunV2VpcAccess.from_dict(obj["vpcAccess"]) if obj.get("vpcAccess") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Run Admin API

    Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRunV2Condition(BaseModel):
    """
    Defines a status condition for a resource.
    """ # noqa: E501
    execution_reason: Optional[StrictStr] = Field(default=None, description="A reason for the execution condition.", alias="executionReason")
    last_transition_time: Optional[StrictStr] = Field(default=None, description="Last time the condition transitioned from one status to another.", alias="lastTransitionTime")
    message: Optional[StrictStr] = Field(default=None, description="Human readable message indicating details about the current status.")
    reason: Optional[StrictStr] = Field(default=None, description="A common (service-level) reason for this condition.")
    revision_reason: Optional[StrictStr] = Field(default=None, description="A reason for the revision condition.", alias="revisionReason")
    severity: Optional[StrictStr] = Field(default=None, description="How to interpret failures of this condition, one of Error, Warning, Info")
    state: Optional[StrictStr] = Field(default=None, description="State of the condition.")
    type: Optional[StrictStr] = Field(default=None, description="type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * \"Ready\": True when the Resource is ready.")
    __properties: ClassVar[List[str]] = ["executionReason", "lastTransitionTime", "message", "reason", "revisionReason", "severity", "state", "type"]

    @field_validator('execution_reason')
    def execution_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXECUTION_REASON_UNDEFINED', 'JOB_STATUS_SERVICE_POLLING_ERROR', 'NON_ZERO_EXIT_CODE', 'CANCELLED', 'CANCELLING', 'DELETED']):
            raise ValueError("must be one of enum values ('EXECUTION_REASON_UNDEFINED', 'JOB_STATUS_SERVICE_POLLING_ERROR', 'NON_ZERO_EXIT_CODE', 'CANCELLED', 'CANCELLING', 'DELETED')")
        return value

    @field_validator('reason')
    def reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMMON_REASON_UNDEFINED', 'UNKNOWN', 'REVISION_FAILED', 'PROGRESS_DEADLINE_EXCEEDED', 'CONTAINER_MISSING', 'CONTAINER_PERMISSION_DENIED', 'CONTAINER_IMAGE_UNAUTHORIZED', 'CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED', 'ENCRYPTION_KEY_PERMISSION_DENIED', 'ENCRYPTION_KEY_CHECK_FAILED', 'SECRETS_ACCESS_CHECK_FAILED', 'WAITING_FOR_OPERATION', 'IMMEDIATE_RETRY', 'POSTPONED_RETRY', 'INTERNAL']):
            raise ValueError("must be one of enum values ('COMMON_REASON_UNDEFINED', 'UNKNOWN', 'REVISION_FAILED', 'PROGRESS_DEADLINE_EXCEEDED', 'CONTAINER_MISSING', 'CONTAINER_PERMISSION_DENIED', 'CONTAINER_IMAGE_UNAUTHORIZED', 'CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED', 'ENCRYPTION_KEY_PERMISSION_DENIED', 'ENCRYPTION_KEY_CHECK_FAILED', 'SECRETS_ACCESS_CHECK_FAILED', 'WAITING_FOR_OPERATION', 'IMMEDIATE_RETRY', 'POSTPONED_RETRY', 'INTERNAL')")
        return value

    @field_validator('revision_reason')
    def revision_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REVISION_REASON_UNDEFINED', 'PENDING', 'RESERVE', 'RETIRED', 'RETIRING', 'RECREATING', 'HEALTH_CHECK_CONTAINER_ERROR', 'CUSTOMIZED_PATH_RESPONSE_PENDING', 'MIN_INSTANCES_NOT_PROVISIONED', 'ACTIVE_REVISION_LIMIT_REACHED', 'NO_DEPLOYMENT', 'HEALTH_CHECK_SKIPPED', 'MIN_INSTANCES_WARMING']):
            raise ValueError("must be one of enum values ('REVISION_REASON_UNDEFINED', 'PENDING', 'RESERVE', 'RETIRED', 'RETIRING', 'RECREATING', 'HEALTH_CHECK_CONTAINER_ERROR', 'CUSTOMIZED_PATH_RESPONSE_PENDING', 'MIN_INSTANCES_NOT_PROVISIONED', 'ACTIVE_REVISION_LIMIT_REACHED', 'NO_DEPLOYMENT', 'HEALTH_CHECK_SKIPPED', 'MIN_INSTANCES_WARMING')")
        return value

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEVERITY_UNSPECIFIED', 'ERROR', 'WARNING', 'INFO']):
            raise ValueError("must be one of enum values ('SEVERITY_UNSPECIFIED', 'ERROR', 'WARNING', 'INFO')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CONDITION_PENDING', 'CONDITION_RECONCILING', 'CONDITION_FAILED', 'CONDITION_SUCCEEDED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CONDITION_PENDING', 'CONDITION_RECONCILING', 'CONDITION_FAILED', 'CONDITION_SUCCEEDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRunV2Condition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRunV2Condition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "executionReason": obj.get("executionReason"),
            "lastTransitionTime": obj.get("lastTransitionTime"),
            "message": obj.get("message"),
            "reason": obj.get("reason"),
            "revisionReason": obj.get("revisionReason"),
            "severity": obj.get("severity"),
            "state": obj.get("state"),
            "type": obj.get("type")
        })
        return _obj



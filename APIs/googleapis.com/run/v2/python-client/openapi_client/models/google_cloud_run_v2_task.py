# coding: utf-8

"""
    Cloud Run Admin API

    Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_run_v2_condition import GoogleCloudRunV2Condition
from openapi_client.models.google_cloud_run_v2_container import GoogleCloudRunV2Container
from openapi_client.models.google_cloud_run_v2_task_attempt_result import GoogleCloudRunV2TaskAttemptResult
from openapi_client.models.google_cloud_run_v2_volume import GoogleCloudRunV2Volume
from openapi_client.models.google_cloud_run_v2_vpc_access import GoogleCloudRunV2VpcAccess
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRunV2Task(BaseModel):
    """
    Task represents a single run of a container to completion.
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Output only. Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.")
    completion_time: Optional[StrictStr] = Field(default=None, description="Output only. Represents time when the Task was completed. It is not guaranteed to be set in happens-before order across separate operations.", alias="completionTime")
    conditions: Optional[List[GoogleCloudRunV2Condition]] = Field(default=None, description="Output only. The Condition of this Task, containing its readiness status, and detailed error information in case it did not reach the desired state.")
    containers: Optional[List[GoogleCloudRunV2Container]] = Field(default=None, description="Holds the single container that defines the unit of execution for this task.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Represents time when the task was created by the system. It is not guaranteed to be set in happens-before order across separate operations.", alias="createTime")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. For a deleted resource, the deletion time. It is only populated as a response to a Delete request.", alias="deleteTime")
    encryption_key: Optional[StrictStr] = Field(default=None, description="Output only. A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek", alias="encryptionKey")
    etag: Optional[StrictStr] = Field(default=None, description="Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.")
    execution: Optional[StrictStr] = Field(default=None, description="Output only. The name of the parent Execution.")
    execution_environment: Optional[StrictStr] = Field(default=None, description="The execution environment being used to host this Task.", alias="executionEnvironment")
    expire_time: Optional[StrictStr] = Field(default=None, description="Output only. For a deleted resource, the time after which it will be permamently deleted. It is only populated as a response to a Delete request.", alias="expireTime")
    generation: Optional[StrictStr] = Field(default=None, description="Output only. A number that monotonically increases every time the user modifies the desired state.")
    index: Optional[StrictInt] = Field(default=None, description="Output only. Index of the Task, unique per execution, and beginning at 0.")
    job: Optional[StrictStr] = Field(default=None, description="Output only. The name of the parent Job.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Output only. Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels")
    last_attempt_result: Optional[GoogleCloudRunV2TaskAttemptResult] = Field(default=None, alias="lastAttemptResult")
    log_uri: Optional[StrictStr] = Field(default=None, description="Output only. URI where logs for this execution can be found in Cloud Console.", alias="logUri")
    max_retries: Optional[StrictInt] = Field(default=None, description="Number of retries allowed per Task, before marking this Task failed.", alias="maxRetries")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The unique name of this Task.")
    observed_generation: Optional[StrictStr] = Field(default=None, description="Output only. The generation of this Task. See comments in `Job.reconciling` for additional information on reconciliation process in Cloud Run.", alias="observedGeneration")
    reconciling: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the resource's reconciliation is still in progress. See comments in `Job.reconciling` for additional information on reconciliation process in Cloud Run.")
    retried: Optional[StrictInt] = Field(default=None, description="Output only. The number of times this Task was retried. Tasks are retried when they fail up to the maxRetries limit.")
    satisfies_pzs: Optional[StrictBool] = Field(default=None, description="Output only. Reserved for future use.", alias="satisfiesPzs")
    scheduled_time: Optional[StrictStr] = Field(default=None, description="Output only. Represents time when the task was scheduled to run by the system. It is not guaranteed to be set in happens-before order across separate operations.", alias="scheduledTime")
    service_account: Optional[StrictStr] = Field(default=None, description="Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.", alias="serviceAccount")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. Represents time when the task started to run. It is not guaranteed to be set in happens-before order across separate operations.", alias="startTime")
    timeout: Optional[StrictStr] = Field(default=None, description="Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. Server assigned unique identifier for the Task. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last-modified time.", alias="updateTime")
    volumes: Optional[List[GoogleCloudRunV2Volume]] = Field(default=None, description="A list of Volumes to make available to containers.")
    vpc_access: Optional[GoogleCloudRunV2VpcAccess] = Field(default=None, alias="vpcAccess")
    __properties: ClassVar[List[str]] = ["annotations", "completionTime", "conditions", "containers", "createTime", "deleteTime", "encryptionKey", "etag", "execution", "executionEnvironment", "expireTime", "generation", "index", "job", "labels", "lastAttemptResult", "logUri", "maxRetries", "name", "observedGeneration", "reconciling", "retried", "satisfiesPzs", "scheduledTime", "serviceAccount", "startTime", "timeout", "uid", "updateTime", "volumes", "vpcAccess"]

    @field_validator('execution_environment')
    def execution_environment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXECUTION_ENVIRONMENT_UNSPECIFIED', 'EXECUTION_ENVIRONMENT_GEN1', 'EXECUTION_ENVIRONMENT_GEN2']):
            raise ValueError("must be one of enum values ('EXECUTION_ENVIRONMENT_UNSPECIFIED', 'EXECUTION_ENVIRONMENT_GEN1', 'EXECUTION_ENVIRONMENT_GEN2')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRunV2Task from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "annotations",
            "completion_time",
            "conditions",
            "create_time",
            "delete_time",
            "encryption_key",
            "etag",
            "execution",
            "expire_time",
            "generation",
            "index",
            "job",
            "labels",
            "log_uri",
            "name",
            "observed_generation",
            "reconciling",
            "retried",
            "satisfies_pzs",
            "scheduled_time",
            "start_time",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in containers (list)
        _items = []
        if self.containers:
            for _item_containers in self.containers:
                if _item_containers:
                    _items.append(_item_containers.to_dict())
            _dict['containers'] = _items
        # override the default output from pydantic by calling `to_dict()` of last_attempt_result
        if self.last_attempt_result:
            _dict['lastAttemptResult'] = self.last_attempt_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in volumes (list)
        _items = []
        if self.volumes:
            for _item_volumes in self.volumes:
                if _item_volumes:
                    _items.append(_item_volumes.to_dict())
            _dict['volumes'] = _items
        # override the default output from pydantic by calling `to_dict()` of vpc_access
        if self.vpc_access:
            _dict['vpcAccess'] = self.vpc_access.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRunV2Task from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "completionTime": obj.get("completionTime"),
            "conditions": [GoogleCloudRunV2Condition.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None,
            "containers": [GoogleCloudRunV2Container.from_dict(_item) for _item in obj["containers"]] if obj.get("containers") is not None else None,
            "createTime": obj.get("createTime"),
            "deleteTime": obj.get("deleteTime"),
            "encryptionKey": obj.get("encryptionKey"),
            "etag": obj.get("etag"),
            "execution": obj.get("execution"),
            "executionEnvironment": obj.get("executionEnvironment"),
            "expireTime": obj.get("expireTime"),
            "generation": obj.get("generation"),
            "index": obj.get("index"),
            "job": obj.get("job"),
            "labels": obj.get("labels"),
            "lastAttemptResult": GoogleCloudRunV2TaskAttemptResult.from_dict(obj["lastAttemptResult"]) if obj.get("lastAttemptResult") is not None else None,
            "logUri": obj.get("logUri"),
            "maxRetries": obj.get("maxRetries"),
            "name": obj.get("name"),
            "observedGeneration": obj.get("observedGeneration"),
            "reconciling": obj.get("reconciling"),
            "retried": obj.get("retried"),
            "satisfiesPzs": obj.get("satisfiesPzs"),
            "scheduledTime": obj.get("scheduledTime"),
            "serviceAccount": obj.get("serviceAccount"),
            "startTime": obj.get("startTime"),
            "timeout": obj.get("timeout"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime"),
            "volumes": [GoogleCloudRunV2Volume.from_dict(_item) for _item in obj["volumes"]] if obj.get("volumes") is not None else None,
            "vpcAccess": GoogleCloudRunV2VpcAccess.from_dict(obj["vpcAccess"]) if obj.get("vpcAccess") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Run Admin API

    Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.execution_reference import ExecutionReference
from openapi_client.models.google_cloud_run_v1_condition import GoogleCloudRunV1Condition
from typing import Optional, Set
from typing_extensions import Self

class JobStatus(BaseModel):
    """
    JobStatus represents the current state of a Job.
    """ # noqa: E501
    conditions: Optional[List[GoogleCloudRunV1Condition]] = Field(default=None, description="Conditions communicate information about ongoing/complete reconciliation processes that bring the \"spec\" inline with the observed state of the world. Job-specific conditions include: * `Ready`: `True` when the job is ready to be executed.")
    execution_count: Optional[StrictInt] = Field(default=None, description="Number of executions created for this job.", alias="executionCount")
    latest_created_execution: Optional[ExecutionReference] = Field(default=None, alias="latestCreatedExecution")
    observed_generation: Optional[StrictInt] = Field(default=None, description="The 'generation' of the job that was last processed by the controller.", alias="observedGeneration")
    __properties: ClassVar[List[str]] = ["conditions", "executionCount", "latestCreatedExecution", "observedGeneration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of latest_created_execution
        if self.latest_created_execution:
            _dict['latestCreatedExecution'] = self.latest_created_execution.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conditions": [GoogleCloudRunV1Condition.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None,
            "executionCount": obj.get("executionCount"),
            "latestCreatedExecution": ExecutionReference.from_dict(obj["latestCreatedExecution"]) if obj.get("latestCreatedExecution") is not None else None,
            "observedGeneration": obj.get("observedGeneration")
        })
        return _obj



# coding: utf-8

"""
    Cloud Run Admin API

    Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_run_v1_condition import GoogleCloudRunV1Condition
from typing import Optional, Set
from typing_extensions import Self

class ExecutionStatus(BaseModel):
    """
    ExecutionStatus represents the current state of an Execution.
    """ # noqa: E501
    cancelled_count: Optional[StrictInt] = Field(default=None, description="Optional. The number of tasks which reached phase Cancelled.", alias="cancelledCount")
    completion_time: Optional[StrictStr] = Field(default=None, description="Optional. Represents the time that the execution was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional", alias="completionTime")
    conditions: Optional[List[GoogleCloudRunV1Condition]] = Field(default=None, description="Optional. Conditions communicate information about ongoing/complete reconciliation processes that bring the \"spec\" inline with the observed state of the world. Execution-specific conditions include: * `ResourcesAvailable`: `True` when underlying resources have been provisioned. * `Started`: `True` when the execution has started to execute. * `Completed`: `True` when the execution has succeeded. `False` when the execution has failed.")
    failed_count: Optional[StrictInt] = Field(default=None, description="Optional. The number of tasks which reached phase Failed.", alias="failedCount")
    log_uri: Optional[StrictStr] = Field(default=None, description="Optional. URI where logs for this execution can be found in Cloud Console.", alias="logUri")
    observed_generation: Optional[StrictInt] = Field(default=None, description="Optional. The 'generation' of the execution that was last processed by the controller.", alias="observedGeneration")
    retried_count: Optional[StrictInt] = Field(default=None, description="Optional. The number of tasks which have retried at least once.", alias="retriedCount")
    running_count: Optional[StrictInt] = Field(default=None, description="Optional. The number of actively running tasks.", alias="runningCount")
    start_time: Optional[StrictStr] = Field(default=None, description="Optional. Represents the time that the execution started to run. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.", alias="startTime")
    succeeded_count: Optional[StrictInt] = Field(default=None, description="Optional. The number of tasks which reached phase Succeeded.", alias="succeededCount")
    __properties: ClassVar[List[str]] = ["cancelledCount", "completionTime", "conditions", "failedCount", "logUri", "observedGeneration", "retriedCount", "runningCount", "startTime", "succeededCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExecutionStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExecutionStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cancelledCount": obj.get("cancelledCount"),
            "completionTime": obj.get("completionTime"),
            "conditions": [GoogleCloudRunV1Condition.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None,
            "failedCount": obj.get("failedCount"),
            "logUri": obj.get("logUri"),
            "observedGeneration": obj.get("observedGeneration"),
            "retriedCount": obj.get("retriedCount"),
            "runningCount": obj.get("runningCount"),
            "startTime": obj.get("startTime"),
            "succeededCount": obj.get("succeededCount")
        })
        return _obj



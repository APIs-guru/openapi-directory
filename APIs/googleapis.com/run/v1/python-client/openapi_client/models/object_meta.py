# coding: utf-8

"""
    Cloud Run Admin API

    Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.owner_reference import OwnerReference
from typing import Optional, Set
from typing_extensions import Self

class ObjectMeta(BaseModel):
    """
    google.cloud.run.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. In Cloud Run, annotations with 'run.googleapis.com/' and 'autoscaling.knative.dev' are restricted, and the accepted annotations will be different depending on the resource type. * `autoscaling.knative.dev/maxScale`: Revision. * `autoscaling.knative.dev/minScale`: Revision. * `run.googleapis.com/binary-authorization-breakglass`: Service, Job, * `run.googleapis.com/binary-authorization`: Service, Job, Execution. * `run.googleapis.com/client-name`: All resources. * `run.googleapis.com/cloudsql-instances`: Revision, Execution. * `run.googleapis.com/container-dependencies`: Revision . * `run.googleapis.com/cpu-throttling`: Revision. * `run.googleapis.com/custom-audiences`: Service. * `run.googleapis.com/default-url-disabled`: Service. * `run.googleapis.com/description`: Service. * `run.googleapis.com/encryption-key-shutdown-hours`: Revision * `run.googleapis.com/encryption-key`: Revision, Execution. * `run.googleapis.com/execution-environment`: Revision, Execution. * `run.googleapis.com/gc-traffic-tags`: Service. * `run.googleapis.com/ingress`: Service. * `run.googleapis.com/launch-stage`: Service, Job. * `run.googleapis.com/minScale`: Service (ALPHA) * `run.googleapis.com/network-interfaces`: Revision, Execution. * `run.googleapis.com/post-key-revocation-action-type`: Revision. * `run.googleapis.com/secrets`: Revision, Execution. * `run.googleapis.com/secure-session-agent`: Revision. * `run.googleapis.com/sessionAffinity`: Revision. * `run.googleapis.com/startup-cpu-boost`: Revision. * `run.googleapis.com/vpc-access-connector`: Revision, Execution. * `run.googleapis.com/vpc-access-egress`: Revision, Execution.")
    cluster_name: Optional[StrictStr] = Field(default=None, description="Not supported by Cloud Run", alias="clusterName")
    creation_timestamp: Optional[StrictStr] = Field(default=None, description="UTC timestamp representing the server time when this object was created.", alias="creationTimestamp")
    deletion_grace_period_seconds: Optional[StrictInt] = Field(default=None, description="Not supported by Cloud Run", alias="deletionGracePeriodSeconds")
    deletion_timestamp: Optional[StrictStr] = Field(default=None, description="The read-only soft deletion timestamp for this resource. In Cloud Run, users are not able to set this field. Instead, they must call the corresponding Delete API.", alias="deletionTimestamp")
    finalizers: Optional[List[StrictStr]] = Field(default=None, description="Not supported by Cloud Run")
    generate_name: Optional[StrictStr] = Field(default=None, description="Not supported by Cloud Run", alias="generateName")
    generation: Optional[StrictInt] = Field(default=None, description="A system-provided sequence number representing a specific generation of the desired state.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes.")
    name: Optional[StrictStr] = Field(default=None, description="Required. The name of the resource. Name is required when creating top-level resources (Service, Job), must be unique within a Cloud Run project/region, and cannot be changed once created.")
    namespace: Optional[StrictStr] = Field(default=None, description="Required. Defines the space within each name must be unique within a Cloud Run region. In Cloud Run, it must be project ID or number.")
    owner_references: Optional[List[OwnerReference]] = Field(default=None, description="Not supported by Cloud Run", alias="ownerReferences")
    resource_version: Optional[StrictStr] = Field(default=None, description="Opaque, system-generated value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection.", alias="resourceVersion")
    self_link: Optional[StrictStr] = Field(default=None, description="URL representing this object.", alias="selfLink")
    uid: Optional[StrictStr] = Field(default=None, description="Unique, system-generated identifier for this resource.")
    __properties: ClassVar[List[str]] = ["annotations", "clusterName", "creationTimestamp", "deletionGracePeriodSeconds", "deletionTimestamp", "finalizers", "generateName", "generation", "labels", "name", "namespace", "ownerReferences", "resourceVersion", "selfLink", "uid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObjectMeta from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in owner_references (list)
        _items = []
        if self.owner_references:
            for _item_owner_references in self.owner_references:
                if _item_owner_references:
                    _items.append(_item_owner_references.to_dict())
            _dict['ownerReferences'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObjectMeta from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "clusterName": obj.get("clusterName"),
            "creationTimestamp": obj.get("creationTimestamp"),
            "deletionGracePeriodSeconds": obj.get("deletionGracePeriodSeconds"),
            "deletionTimestamp": obj.get("deletionTimestamp"),
            "finalizers": obj.get("finalizers"),
            "generateName": obj.get("generateName"),
            "generation": obj.get("generation"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "namespace": obj.get("namespace"),
            "ownerReferences": [OwnerReference.from_dict(_item) for _item in obj["ownerReferences"]] if obj.get("ownerReferences") is not None else None,
            "resourceVersion": obj.get("resourceVersion"),
            "selfLink": obj.get("selfLink"),
            "uid": obj.get("uid")
        })
        return _obj



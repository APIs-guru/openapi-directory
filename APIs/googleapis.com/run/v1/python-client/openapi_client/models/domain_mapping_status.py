# coding: utf-8

"""
    Cloud Run Admin API

    Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_run_v1_condition import GoogleCloudRunV1Condition
from openapi_client.models.resource_record import ResourceRecord
from typing import Optional, Set
from typing_extensions import Self

class DomainMappingStatus(BaseModel):
    """
    The current state of the Domain Mapping.
    """ # noqa: E501
    conditions: Optional[List[GoogleCloudRunV1Condition]] = Field(default=None, description="Array of observed DomainMappingConditions, indicating the current state of the DomainMapping.")
    mapped_route_name: Optional[StrictStr] = Field(default=None, description="The name of the route that the mapping currently points to.", alias="mappedRouteName")
    observed_generation: Optional[StrictInt] = Field(default=None, description="ObservedGeneration is the 'Generation' of the DomainMapping that was last processed by the controller. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False.", alias="observedGeneration")
    resource_records: Optional[List[ResourceRecord]] = Field(default=None, description="The resource records required to configure this domain mapping. These records must be added to the domain's DNS configuration in order to serve the application via this domain mapping.", alias="resourceRecords")
    url: Optional[StrictStr] = Field(default=None, description="Optional. Not supported by Cloud Run.")
    __properties: ClassVar[List[str]] = ["conditions", "mappedRouteName", "observedGeneration", "resourceRecords", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DomainMappingStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in resource_records (list)
        _items = []
        if self.resource_records:
            for _item_resource_records in self.resource_records:
                if _item_resource_records:
                    _items.append(_item_resource_records.to_dict())
            _dict['resourceRecords'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DomainMappingStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conditions": [GoogleCloudRunV1Condition.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None,
            "mappedRouteName": obj.get("mappedRouteName"),
            "observedGeneration": obj.get("observedGeneration"),
            "resourceRecords": [ResourceRecord.from_dict(_item) for _item in obj["resourceRecords"]] if obj.get("resourceRecords") is not None else None,
            "url": obj.get("url")
        })
        return _obj



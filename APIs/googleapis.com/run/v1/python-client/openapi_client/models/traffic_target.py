# coding: utf-8

"""
    Cloud Run Admin API

    Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TrafficTarget(BaseModel):
    """
    TrafficTarget holds a single entry of the routing table for a Route.
    """ # noqa: E501
    configuration_name: Optional[StrictStr] = Field(default=None, description="[Deprecated] Not supported in Cloud Run. It must be empty.", alias="configurationName")
    latest_revision: Optional[StrictBool] = Field(default=None, description="Uses the \"status.latestReadyRevisionName\" of the Service to determine the traffic target. When it changes, traffic will automatically migrate from the prior \"latest ready\" revision to the new one. This field must be false if RevisionName is set. This field defaults to true otherwise. If the field is set to true on Status, this means that the Revision was resolved from the Service's latest ready revision.", alias="latestRevision")
    percent: Optional[StrictInt] = Field(default=None, description="Percent specifies percent of the traffic to this Revision or Configuration. This defaults to zero if unspecified.")
    revision_name: Optional[StrictStr] = Field(default=None, description="Points this traffic target to a specific Revision. This field is mutually exclusive with latest_revision.", alias="revisionName")
    tag: Optional[StrictStr] = Field(default=None, description="Tag is used to expose a dedicated url for referencing this target exclusively.")
    url: Optional[StrictStr] = Field(default=None, description="Output only. URL displays the URL for accessing tagged traffic targets. URL is displayed in status, and is disallowed on spec. URL must contain a scheme (e.g. https://) and a hostname, but may not contain anything else (e.g. basic auth, url path, etc.)")
    __properties: ClassVar[List[str]] = ["configurationName", "latestRevision", "percent", "revisionName", "tag", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrafficTarget from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrafficTarget from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configurationName": obj.get("configurationName"),
            "latestRevision": obj.get("latestRevision"),
            "percent": obj.get("percent"),
            "revisionName": obj.get("revisionName"),
            "tag": obj.get("tag"),
            "url": obj.get("url")
        })
        return _obj



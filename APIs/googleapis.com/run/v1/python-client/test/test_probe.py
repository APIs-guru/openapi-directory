# coding: utf-8

"""
    Cloud Run Admin API

    Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.probe import Probe

class TestProbe(unittest.TestCase):
    """Probe unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Probe:
        """Test Probe
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Probe`
        """
        model = Probe()
        if include_optional:
            return Probe(
                var_exec = openapi_client.models.exec_action.ExecAction(
                    command = [
                        ''
                        ], ),
                failure_threshold = 56,
                grpc = openapi_client.models.grpc_action.GRPCAction(
                    port = 56, 
                    service = '', ),
                http_get = openapi_client.models.http_get_action.HTTPGetAction(
                    host = '', 
                    http_headers = [
                        openapi_client.models.http_header.HTTPHeader(
                            name = '', 
                            value = '', )
                        ], 
                    path = '', 
                    port = 56, 
                    scheme = '', ),
                initial_delay_seconds = 56,
                period_seconds = 56,
                success_threshold = 56,
                tcp_socket = openapi_client.models.tcp_socket_action.TCPSocketAction(
                    host = '', 
                    port = 56, ),
                timeout_seconds = 56
            )
        else:
            return Probe(
        )
        """

    def testProbe(self):
        """Test Probe"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

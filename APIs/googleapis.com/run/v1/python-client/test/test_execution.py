# coding: utf-8

"""
    Cloud Run Admin API

    Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.execution import Execution

class TestExecution(unittest.TestCase):
    """Execution unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Execution:
        """Test Execution
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Execution`
        """
        model = Execution()
        if include_optional:
            return Execution(
                api_version = '',
                kind = '',
                metadata = openapi_client.models.object_meta.ObjectMeta(
                    annotations = {
                        'key' : ''
                        }, 
                    cluster_name = '', 
                    creation_timestamp = '', 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = '', 
                    finalizers = [
                        ''
                        ], 
                    generate_name = '', 
                    generation = 56, 
                    labels = {
                        'key' : ''
                        }, 
                    name = '', 
                    namespace = '', 
                    owner_references = [
                        openapi_client.models.owner_reference.OwnerReference(
                            api_version = '', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '', 
                            name = '', 
                            uid = '', )
                        ], 
                    resource_version = '', 
                    self_link = '', 
                    uid = '', ),
                spec = openapi_client.models.execution_spec.ExecutionSpec(
                    parallelism = 56, 
                    task_count = 56, 
                    template = openapi_client.models.task_template_spec.TaskTemplateSpec(
                        spec = openapi_client.models.task_spec.TaskSpec(
                            containers = [
                                openapi_client.models.container.Container(
                                    args = [
                                        ''
                                        ], 
                                    command = [
                                        ''
                                        ], 
                                    env = [
                                        openapi_client.models.env_var.EnvVar(
                                            name = '', 
                                            value = '', 
                                            value_from = openapi_client.models.env_var_source.EnvVarSource(
                                                config_map_key_ref = openapi_client.models.config_map_key_selector.ConfigMapKeySelector(
                                                    key = '', 
                                                    local_object_reference = openapi_client.models.local_object_reference.LocalObjectReference(
                                                        name = '', ), 
                                                    name = '', 
                                                    optional = True, ), 
                                                secret_key_ref = openapi_client.models.secret_key_selector.SecretKeySelector(
                                                    key = '', 
                                                    name = '', 
                                                    optional = True, ), ), )
                                        ], 
                                    env_from = [
                                        openapi_client.models.env_from_source.EnvFromSource(
                                            config_map_ref = openapi_client.models.config_map_env_source.ConfigMapEnvSource(
                                                name = '', 
                                                optional = True, ), 
                                            prefix = '', 
                                            secret_ref = openapi_client.models.secret_env_source.SecretEnvSource(
                                                name = '', 
                                                optional = True, ), )
                                        ], 
                                    image = '', 
                                    image_pull_policy = '', 
                                    liveness_probe = openapi_client.models.probe.Probe(
                                        exec = openapi_client.models.exec_action.ExecAction(), 
                                        failure_threshold = 56, 
                                        grpc = openapi_client.models.grpc_action.GRPCAction(
                                            port = 56, 
                                            service = '', ), 
                                        http_get = openapi_client.models.http_get_action.HTTPGetAction(
                                            host = '', 
                                            http_headers = [
                                                openapi_client.models.http_header.HTTPHeader(
                                                    name = '', 
                                                    value = '', )
                                                ], 
                                            path = '', 
                                            port = 56, 
                                            scheme = '', ), 
                                        initial_delay_seconds = 56, 
                                        period_seconds = 56, 
                                        success_threshold = 56, 
                                        tcp_socket = openapi_client.models.tcp_socket_action.TCPSocketAction(
                                            host = '', 
                                            port = 56, ), 
                                        timeout_seconds = 56, ), 
                                    name = '', 
                                    ports = [
                                        openapi_client.models.container_port.ContainerPort(
                                            container_port = 56, 
                                            name = '', 
                                            protocol = '', )
                                        ], 
                                    readiness_probe = openapi_client.models.probe.Probe(
                                        failure_threshold = 56, 
                                        initial_delay_seconds = 56, 
                                        period_seconds = 56, 
                                        success_threshold = 56, 
                                        timeout_seconds = 56, ), 
                                    resources = openapi_client.models.resource_requirements.ResourceRequirements(
                                        limits = {
                                            'key' : ''
                                            }, 
                                        requests = {
                                            'key' : ''
                                            }, ), 
                                    security_context = openapi_client.models.security_context.SecurityContext(
                                        run_as_user = 56, ), 
                                    startup_probe = , 
                                    termination_message_path = '', 
                                    termination_message_policy = '', 
                                    volume_mounts = [
                                        openapi_client.models.volume_mount.VolumeMount(
                                            mount_path = '', 
                                            name = '', 
                                            read_only = True, 
                                            sub_path = '', )
                                        ], 
                                    working_dir = '', )
                                ], 
                            max_retries = 56, 
                            service_account_name = '', 
                            timeout_seconds = '', 
                            volumes = [
                                openapi_client.models.volume.Volume(
                                    config_map = openapi_client.models.config_map_volume_source.ConfigMapVolumeSource(
                                        default_mode = 56, 
                                        items = [
                                            openapi_client.models.key_to_path.KeyToPath(
                                                key = '', 
                                                mode = 56, 
                                                path = '', )
                                            ], 
                                        name = '', 
                                        optional = True, ), 
                                    csi = openapi_client.models.csi_volume_source.CSIVolumeSource(
                                        driver = '', 
                                        read_only = True, 
                                        volume_attributes = {
                                            'key' : ''
                                            }, ), 
                                    empty_dir = openapi_client.models.empty_dir_volume_source.EmptyDirVolumeSource(
                                        medium = '', 
                                        size_limit = '', ), 
                                    name = '', 
                                    nfs = openapi_client.models.nfs_volume_source.NFSVolumeSource(
                                        path = '', 
                                        read_only = True, 
                                        server = '', ), 
                                    secret = openapi_client.models.secret_volume_source.SecretVolumeSource(
                                        default_mode = 56, 
                                        optional = True, 
                                        secret_name = '', ), )
                                ], ), ), ),
                status = openapi_client.models.execution_status.ExecutionStatus(
                    cancelled_count = 56, 
                    completion_time = '', 
                    conditions = [
                        openapi_client.models.google_cloud_run_v1_condition.GoogleCloudRunV1Condition(
                            last_transition_time = '', 
                            message = '', 
                            reason = '', 
                            severity = '', 
                            status = '', 
                            type = '', )
                        ], 
                    failed_count = 56, 
                    log_uri = '', 
                    observed_generation = 56, 
                    retried_count = 56, 
                    running_count = 56, 
                    start_time = '', 
                    succeeded_count = 56, )
            )
        else:
            return Execution(
        )
        """

    def testExecution(self):
        """Test Execution"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

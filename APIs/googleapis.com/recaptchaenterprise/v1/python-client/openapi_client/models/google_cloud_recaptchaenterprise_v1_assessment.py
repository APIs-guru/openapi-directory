# coding: utf-8

"""
    reCAPTCHA Enterprise API

    Help protect your website from fraudulent activity, spam, and abuse without creating friction.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_recaptchaenterprise_v1_account_defender_assessment import GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment
from openapi_client.models.google_cloud_recaptchaenterprise_v1_account_verification_info import GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo
from openapi_client.models.google_cloud_recaptchaenterprise_v1_event import GoogleCloudRecaptchaenterpriseV1Event
from openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_policy_assessment import GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment
from openapi_client.models.google_cloud_recaptchaenterprise_v1_fraud_prevention_assessment import GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment
from openapi_client.models.google_cloud_recaptchaenterprise_v1_fraud_signals import GoogleCloudRecaptchaenterpriseV1FraudSignals
from openapi_client.models.google_cloud_recaptchaenterprise_v1_private_password_leak_verification import GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification
from openapi_client.models.google_cloud_recaptchaenterprise_v1_risk_analysis import GoogleCloudRecaptchaenterpriseV1RiskAnalysis
from openapi_client.models.google_cloud_recaptchaenterprise_v1_token_properties import GoogleCloudRecaptchaenterpriseV1TokenProperties
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecaptchaenterpriseV1Assessment(BaseModel):
    """
    A reCAPTCHA Enterprise assessment resource.
    """ # noqa: E501
    account_defender_assessment: Optional[GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment] = Field(default=None, alias="accountDefenderAssessment")
    account_verification: Optional[GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo] = Field(default=None, alias="accountVerification")
    event: Optional[GoogleCloudRecaptchaenterpriseV1Event] = None
    firewall_policy_assessment: Optional[GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment] = Field(default=None, alias="firewallPolicyAssessment")
    fraud_prevention_assessment: Optional[GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment] = Field(default=None, alias="fraudPreventionAssessment")
    fraud_signals: Optional[GoogleCloudRecaptchaenterpriseV1FraudSignals] = Field(default=None, alias="fraudSignals")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Identifier. The resource name for the Assessment in the format `projects/{project}/assessments/{assessment}`.")
    private_password_leak_verification: Optional[GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification] = Field(default=None, alias="privatePasswordLeakVerification")
    risk_analysis: Optional[GoogleCloudRecaptchaenterpriseV1RiskAnalysis] = Field(default=None, alias="riskAnalysis")
    token_properties: Optional[GoogleCloudRecaptchaenterpriseV1TokenProperties] = Field(default=None, alias="tokenProperties")
    __properties: ClassVar[List[str]] = ["accountDefenderAssessment", "accountVerification", "event", "firewallPolicyAssessment", "fraudPreventionAssessment", "fraudSignals", "name", "privatePasswordLeakVerification", "riskAnalysis", "tokenProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1Assessment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account_defender_assessment
        if self.account_defender_assessment:
            _dict['accountDefenderAssessment'] = self.account_defender_assessment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of account_verification
        if self.account_verification:
            _dict['accountVerification'] = self.account_verification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event
        if self.event:
            _dict['event'] = self.event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of firewall_policy_assessment
        if self.firewall_policy_assessment:
            _dict['firewallPolicyAssessment'] = self.firewall_policy_assessment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fraud_prevention_assessment
        if self.fraud_prevention_assessment:
            _dict['fraudPreventionAssessment'] = self.fraud_prevention_assessment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fraud_signals
        if self.fraud_signals:
            _dict['fraudSignals'] = self.fraud_signals.to_dict()
        # override the default output from pydantic by calling `to_dict()` of private_password_leak_verification
        if self.private_password_leak_verification:
            _dict['privatePasswordLeakVerification'] = self.private_password_leak_verification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_analysis
        if self.risk_analysis:
            _dict['riskAnalysis'] = self.risk_analysis.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token_properties
        if self.token_properties:
            _dict['tokenProperties'] = self.token_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1Assessment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountDefenderAssessment": GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment.from_dict(obj["accountDefenderAssessment"]) if obj.get("accountDefenderAssessment") is not None else None,
            "accountVerification": GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo.from_dict(obj["accountVerification"]) if obj.get("accountVerification") is not None else None,
            "event": GoogleCloudRecaptchaenterpriseV1Event.from_dict(obj["event"]) if obj.get("event") is not None else None,
            "firewallPolicyAssessment": GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment.from_dict(obj["firewallPolicyAssessment"]) if obj.get("firewallPolicyAssessment") is not None else None,
            "fraudPreventionAssessment": GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment.from_dict(obj["fraudPreventionAssessment"]) if obj.get("fraudPreventionAssessment") is not None else None,
            "fraudSignals": GoogleCloudRecaptchaenterpriseV1FraudSignals.from_dict(obj["fraudSignals"]) if obj.get("fraudSignals") is not None else None,
            "name": obj.get("name"),
            "privatePasswordLeakVerification": GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification.from_dict(obj["privatePasswordLeakVerification"]) if obj.get("privatePasswordLeakVerification") is not None else None,
            "riskAnalysis": GoogleCloudRecaptchaenterpriseV1RiskAnalysis.from_dict(obj["riskAnalysis"]) if obj.get("riskAnalysis") is not None else None,
            "tokenProperties": GoogleCloudRecaptchaenterpriseV1TokenProperties.from_dict(obj["tokenProperties"]) if obj.get("tokenProperties") is not None else None
        })
        return _obj



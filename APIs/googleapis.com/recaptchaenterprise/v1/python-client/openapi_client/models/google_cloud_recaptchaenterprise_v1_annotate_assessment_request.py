# coding: utf-8

"""
    reCAPTCHA Enterprise API

    Help protect your website from fraudulent activity, spam, and abuse without creating friction.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_event import GoogleCloudRecaptchaenterpriseV1TransactionEvent
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest(BaseModel):
    """
    The request message to annotate an Assessment.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Optional. A stable account identifier to apply to the assessment. This is an alternative to setting `account_id` in `CreateAssessment`, for example when a stable account identifier is not yet known in the initial request.", alias="accountId")
    annotation: Optional[StrictStr] = Field(default=None, description="Optional. The annotation that will be assigned to the Event. This field can be left empty to provide reasons that apply to an event without concluding whether the event is legitimate or fraudulent.")
    hashed_account_id: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Optional. A stable hashed account identifier to apply to the assessment. This is an alternative to setting `hashed_account_id` in `CreateAssessment`, for example when a stable account identifier is not yet known in the initial request.", alias="hashedAccountId")
    reasons: Optional[List[StrictStr]] = Field(default=None, description="Optional. Reasons for the annotation that are assigned to the event.")
    transaction_event: Optional[GoogleCloudRecaptchaenterpriseV1TransactionEvent] = Field(default=None, alias="transactionEvent")
    __properties: ClassVar[List[str]] = ["accountId", "annotation", "hashedAccountId", "reasons", "transactionEvent"]

    @field_validator('annotation')
    def annotation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ANNOTATION_UNSPECIFIED', 'LEGITIMATE', 'FRAUDULENT', 'PASSWORD_CORRECT', 'PASSWORD_INCORRECT']):
            raise ValueError("must be one of enum values ('ANNOTATION_UNSPECIFIED', 'LEGITIMATE', 'FRAUDULENT', 'PASSWORD_CORRECT', 'PASSWORD_INCORRECT')")
        return value

    @field_validator('reasons')
    def reasons_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['REASON_UNSPECIFIED', 'CHARGEBACK', 'CHARGEBACK_FRAUD', 'CHARGEBACK_DISPUTE', 'REFUND', 'REFUND_FRAUD', 'TRANSACTION_ACCEPTED', 'TRANSACTION_DECLINED', 'PAYMENT_HEURISTICS', 'INITIATED_TWO_FACTOR', 'PASSED_TWO_FACTOR', 'FAILED_TWO_FACTOR', 'CORRECT_PASSWORD', 'INCORRECT_PASSWORD', 'SOCIAL_SPAM']):
                raise ValueError("each list item must be one of ('REASON_UNSPECIFIED', 'CHARGEBACK', 'CHARGEBACK_FRAUD', 'CHARGEBACK_DISPUTE', 'REFUND', 'REFUND_FRAUD', 'TRANSACTION_ACCEPTED', 'TRANSACTION_DECLINED', 'PAYMENT_HEURISTICS', 'INITIATED_TWO_FACTOR', 'PASSED_TWO_FACTOR', 'FAILED_TWO_FACTOR', 'CORRECT_PASSWORD', 'INCORRECT_PASSWORD', 'SOCIAL_SPAM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of transaction_event
        if self.transaction_event:
            _dict['transactionEvent'] = self.transaction_event.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "annotation": obj.get("annotation"),
            "hashedAccountId": obj.get("hashedAccountId"),
            "reasons": obj.get("reasons"),
            "transactionEvent": GoogleCloudRecaptchaenterpriseV1TransactionEvent.from_dict(obj["transactionEvent"]) if obj.get("transactionEvent") is not None else None
        })
        return _obj



# coding: utf-8

"""
    reCAPTCHA Enterprise API

    Help protect your website from fraudulent activity, spam, and abuse without creating friction.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_recaptchaenterprise_v1_fraud_prevention_assessment_behavioral_trust_verdict import GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentBehavioralTrustVerdict
from openapi_client.models.google_cloud_recaptchaenterprise_v1_fraud_prevention_assessment_card_testing_verdict import GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentCardTestingVerdict
from openapi_client.models.google_cloud_recaptchaenterprise_v1_fraud_prevention_assessment_stolen_instrument_verdict import GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentStolenInstrumentVerdict
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment(BaseModel):
    """
    Assessment for Fraud Prevention.
    """ # noqa: E501
    behavioral_trust_verdict: Optional[GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentBehavioralTrustVerdict] = Field(default=None, alias="behavioralTrustVerdict")
    card_testing_verdict: Optional[GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentCardTestingVerdict] = Field(default=None, alias="cardTestingVerdict")
    stolen_instrument_verdict: Optional[GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentStolenInstrumentVerdict] = Field(default=None, alias="stolenInstrumentVerdict")
    transaction_risk: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. Probability of this transaction being fraudulent. Summarizes the combined risk of attack vectors below. Values are from 0.0 (lowest) to 1.0 (highest).", alias="transactionRisk")
    __properties: ClassVar[List[str]] = ["behavioralTrustVerdict", "cardTestingVerdict", "stolenInstrumentVerdict", "transactionRisk"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "transaction_risk",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of behavioral_trust_verdict
        if self.behavioral_trust_verdict:
            _dict['behavioralTrustVerdict'] = self.behavioral_trust_verdict.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card_testing_verdict
        if self.card_testing_verdict:
            _dict['cardTestingVerdict'] = self.card_testing_verdict.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stolen_instrument_verdict
        if self.stolen_instrument_verdict:
            _dict['stolenInstrumentVerdict'] = self.stolen_instrument_verdict.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "behavioralTrustVerdict": GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentBehavioralTrustVerdict.from_dict(obj["behavioralTrustVerdict"]) if obj.get("behavioralTrustVerdict") is not None else None,
            "cardTestingVerdict": GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentCardTestingVerdict.from_dict(obj["cardTestingVerdict"]) if obj.get("cardTestingVerdict") is not None else None,
            "stolenInstrumentVerdict": GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentStolenInstrumentVerdict.from_dict(obj["stolenInstrumentVerdict"]) if obj.get("stolenInstrumentVerdict") is not None else None,
            "transactionRisk": obj.get("transactionRisk")
        })
        return _obj



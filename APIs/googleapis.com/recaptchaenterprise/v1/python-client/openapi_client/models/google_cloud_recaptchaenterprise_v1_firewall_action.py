# coding: utf-8

"""
    reCAPTCHA Enterprise API

    Help protect your website from fraudulent activity, spam, and abuse without creating friction.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_action_set_header_action import GoogleCloudRecaptchaenterpriseV1FirewallActionSetHeaderAction
from openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_action_substitute_action import GoogleCloudRecaptchaenterpriseV1FirewallActionSubstituteAction
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecaptchaenterpriseV1FirewallAction(BaseModel):
    """
    An individual action. Each action represents what to do if a policy matches.
    """ # noqa: E501
    allow: Optional[Dict[str, Any]] = Field(default=None, description="An allow action continues processing a request unimpeded.")
    block: Optional[Dict[str, Any]] = Field(default=None, description="A block action serves an HTTP error code a prevents the request from hitting the backend.")
    include_recaptcha_script: Optional[Dict[str, Any]] = Field(default=None, description="An include reCAPTCHA script action involves injecting reCAPTCHA JavaScript code into the HTML returned by the site backend. This reCAPTCHA script is tasked with collecting user signals on the requested web page, issuing tokens as a cookie within the site domain, and enabling their utilization in subsequent page requests.", alias="includeRecaptchaScript")
    redirect: Optional[Dict[str, Any]] = Field(default=None, description="A redirect action returns a 307 (temporary redirect) response, pointing the user to a ReCaptcha interstitial page to attach a token.")
    set_header: Optional[GoogleCloudRecaptchaenterpriseV1FirewallActionSetHeaderAction] = Field(default=None, alias="setHeader")
    substitute: Optional[GoogleCloudRecaptchaenterpriseV1FirewallActionSubstituteAction] = None
    __properties: ClassVar[List[str]] = ["allow", "block", "includeRecaptchaScript", "redirect", "setHeader", "substitute"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1FirewallAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of set_header
        if self.set_header:
            _dict['setHeader'] = self.set_header.to_dict()
        # override the default output from pydantic by calling `to_dict()` of substitute
        if self.substitute:
            _dict['substitute'] = self.substitute.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1FirewallAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow": obj.get("allow"),
            "block": obj.get("block"),
            "includeRecaptchaScript": obj.get("includeRecaptchaScript"),
            "redirect": obj.get("redirect"),
            "setHeader": GoogleCloudRecaptchaenterpriseV1FirewallActionSetHeaderAction.from_dict(obj["setHeader"]) if obj.get("setHeader") is not None else None,
            "substitute": GoogleCloudRecaptchaenterpriseV1FirewallActionSubstituteAction.from_dict(obj["substitute"]) if obj.get("substitute") is not None else None
        })
        return _obj



# coding: utf-8

"""
    reCAPTCHA Enterprise API

    Help protect your website from fraudulent activity, spam, and abuse without creating friction.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecaptchaenterpriseV1TransactionEvent(BaseModel):
    """
    Describes an event in the lifecycle of a payment transaction.
    """ # noqa: E501
    event_time: Optional[StrictStr] = Field(default=None, description="Optional. Timestamp when this transaction event occurred; otherwise assumed to be the time of the API call.", alias="eventTime")
    event_type: Optional[StrictStr] = Field(default=None, description="Optional. The type of this transaction event.", alias="eventType")
    reason: Optional[StrictStr] = Field(default=None, description="Optional. The reason or standardized code that corresponds with this transaction event, if one exists. For example, a CHARGEBACK event with code 6005.")
    value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. The value that corresponds with this transaction event, if one exists. For example, a refund event where $5.00 was refunded. Currency is obtained from the original transaction data.")
    __properties: ClassVar[List[str]] = ["eventTime", "eventType", "reason", "value"]

    @field_validator('event_type')
    def event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRANSACTION_EVENT_TYPE_UNSPECIFIED', 'MERCHANT_APPROVE', 'MERCHANT_DENY', 'MANUAL_REVIEW', 'AUTHORIZATION', 'AUTHORIZATION_DECLINE', 'PAYMENT_CAPTURE', 'PAYMENT_CAPTURE_DECLINE', 'CANCEL', 'CHARGEBACK_INQUIRY', 'CHARGEBACK_ALERT', 'FRAUD_NOTIFICATION', 'CHARGEBACK', 'CHARGEBACK_REPRESENTMENT', 'CHARGEBACK_REVERSE', 'REFUND_REQUEST', 'REFUND_DECLINE', 'REFUND', 'REFUND_REVERSE']):
            raise ValueError("must be one of enum values ('TRANSACTION_EVENT_TYPE_UNSPECIFIED', 'MERCHANT_APPROVE', 'MERCHANT_DENY', 'MANUAL_REVIEW', 'AUTHORIZATION', 'AUTHORIZATION_DECLINE', 'PAYMENT_CAPTURE', 'PAYMENT_CAPTURE_DECLINE', 'CANCEL', 'CHARGEBACK_INQUIRY', 'CHARGEBACK_ALERT', 'FRAUD_NOTIFICATION', 'CHARGEBACK', 'CHARGEBACK_REPRESENTMENT', 'CHARGEBACK_REVERSE', 'REFUND_REQUEST', 'REFUND_DECLINE', 'REFUND', 'REFUND_REVERSE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1TransactionEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1TransactionEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventTime": obj.get("eventTime"),
            "eventType": obj.get("eventType"),
            "reason": obj.get("reason"),
            "value": obj.get("value")
        })
        return _obj



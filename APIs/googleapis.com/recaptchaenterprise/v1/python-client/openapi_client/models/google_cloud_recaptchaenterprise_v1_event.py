# coding: utf-8

"""
    reCAPTCHA Enterprise API

    Help protect your website from fraudulent activity, spam, and abuse without creating friction.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_data import GoogleCloudRecaptchaenterpriseV1TransactionData
from openapi_client.models.google_cloud_recaptchaenterprise_v1_user_info import GoogleCloudRecaptchaenterpriseV1UserInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecaptchaenterpriseV1Event(BaseModel):
    """
    The event being assessed.
    """ # noqa: E501
    expected_action: Optional[StrictStr] = Field(default=None, description="Optional. The expected action for this type of event. This should be the same action provided at token generation time on client-side platforms already integrated with recaptcha enterprise.", alias="expectedAction")
    express: Optional[StrictBool] = Field(default=None, description="Optional. Flag for a reCAPTCHA express request for an assessment without a token. If enabled, `site_key` must reference a SCORE key with WAF feature set to EXPRESS.")
    firewall_policy_evaluation: Optional[StrictBool] = Field(default=None, description="Optional. Flag for enabling firewall policy config assessment. If this flag is enabled, the firewall policy will be evaluated and a suggested firewall action will be returned in the response.", alias="firewallPolicyEvaluation")
    hashed_account_id: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Optional. Deprecated: use `user_info.account_id` instead. Unique stable hashed user identifier for the request. The identifier must be hashed using hmac-sha256 with stable secret.", alias="hashedAccountId")
    headers: Optional[List[StrictStr]] = Field(default=None, description="Optional. HTTP header information about the request.")
    ja3: Optional[StrictStr] = Field(default=None, description="Optional. JA3 fingerprint for SSL clients.")
    requested_uri: Optional[StrictStr] = Field(default=None, description="Optional. The URI resource the user requested that triggered an assessment.", alias="requestedUri")
    site_key: Optional[StrictStr] = Field(default=None, description="Optional. The site key that was used to invoke reCAPTCHA Enterprise on your site and generate the token.", alias="siteKey")
    token: Optional[StrictStr] = Field(default=None, description="Optional. The user response token provided by the reCAPTCHA Enterprise client-side integration on your site.")
    transaction_data: Optional[GoogleCloudRecaptchaenterpriseV1TransactionData] = Field(default=None, alias="transactionData")
    user_agent: Optional[StrictStr] = Field(default=None, description="Optional. The user agent present in the request from the user's device related to this event.", alias="userAgent")
    user_info: Optional[GoogleCloudRecaptchaenterpriseV1UserInfo] = Field(default=None, alias="userInfo")
    user_ip_address: Optional[StrictStr] = Field(default=None, description="Optional. The IP address in the request from the user's device related to this event.", alias="userIpAddress")
    waf_token_assessment: Optional[StrictBool] = Field(default=None, description="Optional. Flag for running WAF token assessment. If enabled, the token must be specified, and have been created by a WAF-enabled key.", alias="wafTokenAssessment")
    __properties: ClassVar[List[str]] = ["expectedAction", "express", "firewallPolicyEvaluation", "hashedAccountId", "headers", "ja3", "requestedUri", "siteKey", "token", "transactionData", "userAgent", "userInfo", "userIpAddress", "wafTokenAssessment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1Event from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of transaction_data
        if self.transaction_data:
            _dict['transactionData'] = self.transaction_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_info
        if self.user_info:
            _dict['userInfo'] = self.user_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1Event from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expectedAction": obj.get("expectedAction"),
            "express": obj.get("express"),
            "firewallPolicyEvaluation": obj.get("firewallPolicyEvaluation"),
            "hashedAccountId": obj.get("hashedAccountId"),
            "headers": obj.get("headers"),
            "ja3": obj.get("ja3"),
            "requestedUri": obj.get("requestedUri"),
            "siteKey": obj.get("siteKey"),
            "token": obj.get("token"),
            "transactionData": GoogleCloudRecaptchaenterpriseV1TransactionData.from_dict(obj["transactionData"]) if obj.get("transactionData") is not None else None,
            "userAgent": obj.get("userAgent"),
            "userInfo": GoogleCloudRecaptchaenterpriseV1UserInfo.from_dict(obj["userInfo"]) if obj.get("userInfo") is not None else None,
            "userIpAddress": obj.get("userIpAddress"),
            "wafTokenAssessment": obj.get("wafTokenAssessment")
        })
        return _obj



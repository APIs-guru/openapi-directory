# coding: utf-8

"""
    reCAPTCHA Enterprise API

    Help protect your website from fraudulent activity, spam, and abuse without creating friction.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecaptchaenterpriseV1TransactionDataAddress(BaseModel):
    """
    Structured address format for billing and shipping addresses.
    """ # noqa: E501
    address: Optional[List[StrictStr]] = Field(default=None, description="Optional. The first lines of the address. The first line generally contains the street name and number, and further lines may include information such as an apartment number.")
    administrative_area: Optional[StrictStr] = Field(default=None, description="Optional. The state, province, or otherwise administrative area of the address.", alias="administrativeArea")
    locality: Optional[StrictStr] = Field(default=None, description="Optional. The town/city of the address.")
    postal_code: Optional[StrictStr] = Field(default=None, description="Optional. The postal or ZIP code of the address.", alias="postalCode")
    recipient: Optional[StrictStr] = Field(default=None, description="Optional. The recipient name, potentially including information such as \"care of\".")
    region_code: Optional[StrictStr] = Field(default=None, description="Optional. The CLDR country/region of the address.", alias="regionCode")
    __properties: ClassVar[List[str]] = ["address", "administrativeArea", "locality", "postalCode", "recipient", "regionCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1TransactionDataAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1TransactionDataAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "administrativeArea": obj.get("administrativeArea"),
            "locality": obj.get("locality"),
            "postalCode": obj.get("postalCode"),
            "recipient": obj.get("recipient"),
            "regionCode": obj.get("regionCode")
        })
        return _obj



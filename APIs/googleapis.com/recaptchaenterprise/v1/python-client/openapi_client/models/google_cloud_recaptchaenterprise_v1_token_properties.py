# coding: utf-8

"""
    reCAPTCHA Enterprise API

    Help protect your website from fraudulent activity, spam, and abuse without creating friction.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecaptchaenterpriseV1TokenProperties(BaseModel):
    """
    Properties of the provided event token.
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="Output only. Action name provided at token generation.")
    android_package_name: Optional[StrictStr] = Field(default=None, description="Output only. The name of the Android package with which the token was generated (Android keys only).", alias="androidPackageName")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp corresponding to the generation of the token.", alias="createTime")
    hostname: Optional[StrictStr] = Field(default=None, description="Output only. The hostname of the page on which the token was generated (Web keys only).")
    invalid_reason: Optional[StrictStr] = Field(default=None, description="Output only. Reason associated with the response when valid = false.", alias="invalidReason")
    ios_bundle_id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the iOS bundle with which the token was generated (iOS keys only).", alias="iosBundleId")
    valid: Optional[StrictBool] = Field(default=None, description="Output only. Whether the provided user response token is valid. When valid = false, the reason could be specified in invalid_reason or it could also be due to a user failing to solve a challenge or a sitekey mismatch (i.e the sitekey used to generate the token was different than the one specified in the assessment).")
    __properties: ClassVar[List[str]] = ["action", "androidPackageName", "createTime", "hostname", "invalidReason", "iosBundleId", "valid"]

    @field_validator('invalid_reason')
    def invalid_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INVALID_REASON_UNSPECIFIED', 'UNKNOWN_INVALID_REASON', 'MALFORMED', 'EXPIRED', 'DUPE', 'MISSING', 'BROWSER_ERROR']):
            raise ValueError("must be one of enum values ('INVALID_REASON_UNSPECIFIED', 'UNKNOWN_INVALID_REASON', 'MALFORMED', 'EXPIRED', 'DUPE', 'MISSING', 'BROWSER_ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1TokenProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "action",
            "android_package_name",
            "create_time",
            "hostname",
            "invalid_reason",
            "ios_bundle_id",
            "valid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1TokenProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "androidPackageName": obj.get("androidPackageName"),
            "createTime": obj.get("createTime"),
            "hostname": obj.get("hostname"),
            "invalidReason": obj.get("invalidReason"),
            "iosBundleId": obj.get("iosBundleId"),
            "valid": obj.get("valid")
        })
        return _obj



# coding: utf-8

"""
    reCAPTCHA Enterprise API

    Help protect your website from fraudulent activity, spam, and abuse without creating friction.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_data_address import GoogleCloudRecaptchaenterpriseV1TransactionDataAddress
from openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_data_gateway_info import GoogleCloudRecaptchaenterpriseV1TransactionDataGatewayInfo
from openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_data_item import GoogleCloudRecaptchaenterpriseV1TransactionDataItem
from openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_data_user import GoogleCloudRecaptchaenterpriseV1TransactionDataUser
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecaptchaenterpriseV1TransactionData(BaseModel):
    """
    Transaction data associated with a payment protected by reCAPTCHA Enterprise.
    """ # noqa: E501
    billing_address: Optional[GoogleCloudRecaptchaenterpriseV1TransactionDataAddress] = Field(default=None, alias="billingAddress")
    card_bin: Optional[StrictStr] = Field(default=None, description="Optional. The Bank Identification Number - generally the first 6 or 8 digits of the card.", alias="cardBin")
    card_last_four: Optional[StrictStr] = Field(default=None, description="Optional. The last four digits of the card.", alias="cardLastFour")
    currency_code: Optional[StrictStr] = Field(default=None, description="Optional. The currency code in ISO-4217 format.", alias="currencyCode")
    gateway_info: Optional[GoogleCloudRecaptchaenterpriseV1TransactionDataGatewayInfo] = Field(default=None, alias="gatewayInfo")
    items: Optional[List[GoogleCloudRecaptchaenterpriseV1TransactionDataItem]] = Field(default=None, description="Optional. Items purchased in this transaction.")
    merchants: Optional[List[GoogleCloudRecaptchaenterpriseV1TransactionDataUser]] = Field(default=None, description="Optional. Information about the user or users fulfilling the transaction.")
    payment_method: Optional[StrictStr] = Field(default=None, description="Optional. The payment method for the transaction. The allowed values are: * credit-card * debit-card * gift-card * processor-{name} (If a third-party is used, for example, processor-paypal) * custom-{name} (If an alternative method is used, for example, custom-crypto)", alias="paymentMethod")
    shipping_address: Optional[GoogleCloudRecaptchaenterpriseV1TransactionDataAddress] = Field(default=None, alias="shippingAddress")
    shipping_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. The value of shipping in the specified currency. 0 for free or no shipping.", alias="shippingValue")
    transaction_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the transaction. This custom identifier can be used to reference this transaction in the future, for example, labeling a refund or chargeback event. Two attempts at the same transaction should use the same transaction id.", alias="transactionId")
    user: Optional[GoogleCloudRecaptchaenterpriseV1TransactionDataUser] = None
    value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. The decimal value of the transaction in the specified currency.")
    __properties: ClassVar[List[str]] = ["billingAddress", "cardBin", "cardLastFour", "currencyCode", "gatewayInfo", "items", "merchants", "paymentMethod", "shippingAddress", "shippingValue", "transactionId", "user", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1TransactionData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billingAddress'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gateway_info
        if self.gateway_info:
            _dict['gatewayInfo'] = self.gateway_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in merchants (list)
        _items = []
        if self.merchants:
            for _item_merchants in self.merchants:
                if _item_merchants:
                    _items.append(_item_merchants.to_dict())
            _dict['merchants'] = _items
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shippingAddress'] = self.shipping_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1TransactionData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingAddress": GoogleCloudRecaptchaenterpriseV1TransactionDataAddress.from_dict(obj["billingAddress"]) if obj.get("billingAddress") is not None else None,
            "cardBin": obj.get("cardBin"),
            "cardLastFour": obj.get("cardLastFour"),
            "currencyCode": obj.get("currencyCode"),
            "gatewayInfo": GoogleCloudRecaptchaenterpriseV1TransactionDataGatewayInfo.from_dict(obj["gatewayInfo"]) if obj.get("gatewayInfo") is not None else None,
            "items": [GoogleCloudRecaptchaenterpriseV1TransactionDataItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "merchants": [GoogleCloudRecaptchaenterpriseV1TransactionDataUser.from_dict(_item) for _item in obj["merchants"]] if obj.get("merchants") is not None else None,
            "paymentMethod": obj.get("paymentMethod"),
            "shippingAddress": GoogleCloudRecaptchaenterpriseV1TransactionDataAddress.from_dict(obj["shippingAddress"]) if obj.get("shippingAddress") is not None else None,
            "shippingValue": obj.get("shippingValue"),
            "transactionId": obj.get("transactionId"),
            "user": GoogleCloudRecaptchaenterpriseV1TransactionDataUser.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "value": obj.get("value")
        })
        return _obj



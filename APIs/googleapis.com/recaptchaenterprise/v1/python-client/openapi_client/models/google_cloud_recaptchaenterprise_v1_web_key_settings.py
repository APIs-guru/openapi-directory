# coding: utf-8

"""
    reCAPTCHA Enterprise API

    Help protect your website from fraudulent activity, spam, and abuse without creating friction.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecaptchaenterpriseV1WebKeySettings(BaseModel):
    """
    Settings specific to keys that can be used by websites.
    """ # noqa: E501
    allow_all_domains: Optional[StrictBool] = Field(default=None, description="Optional. If set to true, it means allowed_domains will not be enforced.", alias="allowAllDomains")
    allow_amp_traffic: Optional[StrictBool] = Field(default=None, description="Optional. If set to true, the key can be used on AMP (Accelerated Mobile Pages) websites. This is supported only for the SCORE integration type.", alias="allowAmpTraffic")
    allowed_domains: Optional[List[StrictStr]] = Field(default=None, description="Optional. Domains or subdomains of websites allowed to use the key. All subdomains of an allowed domain are automatically allowed. A valid domain requires a host and must not include any path, port, query or fragment. Examples: 'example.com' or 'subdomain.example.com'", alias="allowedDomains")
    challenge_security_preference: Optional[StrictStr] = Field(default=None, description="Optional. Settings for the frequency and difficulty at which this key triggers captcha challenges. This should only be specified for IntegrationTypes CHECKBOX and INVISIBLE.", alias="challengeSecurityPreference")
    integration_type: Optional[StrictStr] = Field(default=None, description="Required. Describes how this key is integrated with the website.", alias="integrationType")
    __properties: ClassVar[List[str]] = ["allowAllDomains", "allowAmpTraffic", "allowedDomains", "challengeSecurityPreference", "integrationType"]

    @field_validator('challenge_security_preference')
    def challenge_security_preference_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED', 'USABILITY', 'BALANCE', 'SECURITY']):
            raise ValueError("must be one of enum values ('CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED', 'USABILITY', 'BALANCE', 'SECURITY')")
        return value

    @field_validator('integration_type')
    def integration_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INTEGRATION_TYPE_UNSPECIFIED', 'SCORE', 'CHECKBOX', 'INVISIBLE']):
            raise ValueError("must be one of enum values ('INTEGRATION_TYPE_UNSPECIFIED', 'SCORE', 'CHECKBOX', 'INVISIBLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1WebKeySettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1WebKeySettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowAllDomains": obj.get("allowAllDomains"),
            "allowAmpTraffic": obj.get("allowAmpTraffic"),
            "allowedDomains": obj.get("allowedDomains"),
            "challengeSecurityPreference": obj.get("challengeSecurityPreference"),
            "integrationType": obj.get("integrationType")
        })
        return _obj



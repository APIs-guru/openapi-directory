# coding: utf-8

"""
    reCAPTCHA Enterprise API

    Help protect your website from fraudulent activity, spam, and abuse without creating friction.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_recaptchaenterprise_v1_challenge_metrics import GoogleCloudRecaptchaenterpriseV1ChallengeMetrics
from openapi_client.models.google_cloud_recaptchaenterprise_v1_score_metrics import GoogleCloudRecaptchaenterpriseV1ScoreMetrics
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecaptchaenterpriseV1Metrics(BaseModel):
    """
    Metrics for a single Key.
    """ # noqa: E501
    challenge_metrics: Optional[List[GoogleCloudRecaptchaenterpriseV1ChallengeMetrics]] = Field(default=None, description="Metrics will be continuous and in order by dates, and in the granularity of day. Only challenge-based keys (CHECKBOX, INVISIBLE), will have challenge-based data.", alias="challengeMetrics")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Identifier. The name of the metrics, in the format `projects/{project}/keys/{key}/metrics`.")
    score_metrics: Optional[List[GoogleCloudRecaptchaenterpriseV1ScoreMetrics]] = Field(default=None, description="Metrics will be continuous and in order by dates, and in the granularity of day. All Key types should have score-based data.", alias="scoreMetrics")
    start_time: Optional[StrictStr] = Field(default=None, description="Inclusive start time aligned to a day (UTC).", alias="startTime")
    __properties: ClassVar[List[str]] = ["challengeMetrics", "name", "scoreMetrics", "startTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1Metrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in challenge_metrics (list)
        _items = []
        if self.challenge_metrics:
            for _item_challenge_metrics in self.challenge_metrics:
                if _item_challenge_metrics:
                    _items.append(_item_challenge_metrics.to_dict())
            _dict['challengeMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in score_metrics (list)
        _items = []
        if self.score_metrics:
            for _item_score_metrics in self.score_metrics:
                if _item_score_metrics:
                    _items.append(_item_score_metrics.to_dict())
            _dict['scoreMetrics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1Metrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "challengeMetrics": [GoogleCloudRecaptchaenterpriseV1ChallengeMetrics.from_dict(_item) for _item in obj["challengeMetrics"]] if obj.get("challengeMetrics") is not None else None,
            "name": obj.get("name"),
            "scoreMetrics": [GoogleCloudRecaptchaenterpriseV1ScoreMetrics.from_dict(_item) for _item in obj["scoreMetrics"]] if obj.get("scoreMetrics") is not None else None,
            "startTime": obj.get("startTime")
        })
        return _obj



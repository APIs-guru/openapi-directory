# coding: utf-8

"""
    reCAPTCHA Enterprise API

    Help protect your website from fraudulent activity, spam, and abuse without creating friction.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_recaptchaenterprise_v1_user_id import GoogleCloudRecaptchaenterpriseV1UserId
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecaptchaenterpriseV1UserInfo(BaseModel):
    """
    User information associated with a request protected by reCAPTCHA Enterprise.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Optional. For logged-in requests or login/registration requests, the unique account identifier associated with this user. You can use the username if it is stable (meaning it is the same for every request associated with the same user), or any stable user ID of your choice. Leave blank for non logged-in actions or guest checkout.", alias="accountId")
    create_account_time: Optional[StrictStr] = Field(default=None, description="Optional. Creation time for this account associated with this user. Leave blank for non logged-in actions, guest checkout, or when there is no account associated with the current user.", alias="createAccountTime")
    user_ids: Optional[List[GoogleCloudRecaptchaenterpriseV1UserId]] = Field(default=None, description="Optional. Identifiers associated with this user or request.", alias="userIds")
    __properties: ClassVar[List[str]] = ["accountId", "createAccountTime", "userIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1UserInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in user_ids (list)
        _items = []
        if self.user_ids:
            for _item_user_ids in self.user_ids:
                if _item_user_ids:
                    _items.append(_item_user_ids.to_dict())
            _dict['userIds'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1UserInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "createAccountTime": obj.get("createAccountTime"),
            "userIds": [GoogleCloudRecaptchaenterpriseV1UserId.from_dict(_item) for _item in obj["userIds"]] if obj.get("userIds") is not None else None
        })
        return _obj



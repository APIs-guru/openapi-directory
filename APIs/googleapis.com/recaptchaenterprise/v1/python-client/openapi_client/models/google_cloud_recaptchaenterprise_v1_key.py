# coding: utf-8

"""
    reCAPTCHA Enterprise API

    Help protect your website from fraudulent activity, spam, and abuse without creating friction.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_recaptchaenterprise_v1_android_key_settings import GoogleCloudRecaptchaenterpriseV1AndroidKeySettings
from openapi_client.models.google_cloud_recaptchaenterprise_v1_ios_key_settings import GoogleCloudRecaptchaenterpriseV1IOSKeySettings
from openapi_client.models.google_cloud_recaptchaenterprise_v1_testing_options import GoogleCloudRecaptchaenterpriseV1TestingOptions
from openapi_client.models.google_cloud_recaptchaenterprise_v1_waf_settings import GoogleCloudRecaptchaenterpriseV1WafSettings
from openapi_client.models.google_cloud_recaptchaenterprise_v1_web_key_settings import GoogleCloudRecaptchaenterpriseV1WebKeySettings
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecaptchaenterpriseV1Key(BaseModel):
    """
    A key used to identify and configure applications (web and/or mobile) that use reCAPTCHA Enterprise.
    """ # noqa: E501
    android_settings: Optional[GoogleCloudRecaptchaenterpriseV1AndroidKeySettings] = Field(default=None, alias="androidSettings")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp corresponding to the creation of this key.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. Human-readable display name of this key. Modifiable by user.", alias="displayName")
    ios_settings: Optional[GoogleCloudRecaptchaenterpriseV1IOSKeySettings] = Field(default=None, alias="iosSettings")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. See [Creating and managing labels] (https://cloud.google.com/recaptcha-enterprise/docs/labels).")
    name: Optional[StrictStr] = Field(default=None, description="Identifier. The resource name for the Key in the format `projects/{project}/keys/{key}`.")
    testing_options: Optional[GoogleCloudRecaptchaenterpriseV1TestingOptions] = Field(default=None, alias="testingOptions")
    waf_settings: Optional[GoogleCloudRecaptchaenterpriseV1WafSettings] = Field(default=None, alias="wafSettings")
    web_settings: Optional[GoogleCloudRecaptchaenterpriseV1WebKeySettings] = Field(default=None, alias="webSettings")
    __properties: ClassVar[List[str]] = ["androidSettings", "createTime", "displayName", "iosSettings", "labels", "name", "testingOptions", "wafSettings", "webSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1Key from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of android_settings
        if self.android_settings:
            _dict['androidSettings'] = self.android_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ios_settings
        if self.ios_settings:
            _dict['iosSettings'] = self.ios_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of testing_options
        if self.testing_options:
            _dict['testingOptions'] = self.testing_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of waf_settings
        if self.waf_settings:
            _dict['wafSettings'] = self.waf_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web_settings
        if self.web_settings:
            _dict['webSettings'] = self.web_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1Key from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "androidSettings": GoogleCloudRecaptchaenterpriseV1AndroidKeySettings.from_dict(obj["androidSettings"]) if obj.get("androidSettings") is not None else None,
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "iosSettings": GoogleCloudRecaptchaenterpriseV1IOSKeySettings.from_dict(obj["iosSettings"]) if obj.get("iosSettings") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "testingOptions": GoogleCloudRecaptchaenterpriseV1TestingOptions.from_dict(obj["testingOptions"]) if obj.get("testingOptions") is not None else None,
            "wafSettings": GoogleCloudRecaptchaenterpriseV1WafSettings.from_dict(obj["wafSettings"]) if obj.get("wafSettings") is not None else None,
            "webSettings": GoogleCloudRecaptchaenterpriseV1WebKeySettings.from_dict(obj["webSettings"]) if obj.get("webSettings") is not None else None
        })
        return _obj



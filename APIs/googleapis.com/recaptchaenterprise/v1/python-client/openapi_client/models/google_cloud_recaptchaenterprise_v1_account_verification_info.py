# coding: utf-8

"""
    reCAPTCHA Enterprise API

    Help protect your website from fraudulent activity, spam, and abuse without creating friction.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_recaptchaenterprise_v1_endpoint_verification_info import GoogleCloudRecaptchaenterpriseV1EndpointVerificationInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo(BaseModel):
    """
    Information about account verification, used for identity verification.
    """ # noqa: E501
    endpoints: Optional[List[GoogleCloudRecaptchaenterpriseV1EndpointVerificationInfo]] = Field(default=None, description="Optional. Endpoints that can be used for identity verification.")
    language_code: Optional[StrictStr] = Field(default=None, description="Optional. Language code preference for the verification message, set as a IETF BCP 47 language code.", alias="languageCode")
    latest_verification_result: Optional[StrictStr] = Field(default=None, description="Output only. Result of the latest account verification challenge.", alias="latestVerificationResult")
    username: Optional[StrictStr] = Field(default=None, description="Username of the account that is being verified. Deprecated. Customers should now provide the `account_id` field in `event.user_info`.")
    __properties: ClassVar[List[str]] = ["endpoints", "languageCode", "latestVerificationResult", "username"]

    @field_validator('latest_verification_result')
    def latest_verification_result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESULT_UNSPECIFIED', 'SUCCESS_USER_VERIFIED', 'ERROR_USER_NOT_VERIFIED', 'ERROR_SITE_ONBOARDING_INCOMPLETE', 'ERROR_RECIPIENT_NOT_ALLOWED', 'ERROR_RECIPIENT_ABUSE_LIMIT_EXHAUSTED', 'ERROR_CRITICAL_INTERNAL', 'ERROR_CUSTOMER_QUOTA_EXHAUSTED', 'ERROR_VERIFICATION_BYPASSED', 'ERROR_VERDICT_MISMATCH']):
            raise ValueError("must be one of enum values ('RESULT_UNSPECIFIED', 'SUCCESS_USER_VERIFIED', 'ERROR_USER_NOT_VERIFIED', 'ERROR_SITE_ONBOARDING_INCOMPLETE', 'ERROR_RECIPIENT_NOT_ALLOWED', 'ERROR_RECIPIENT_ABUSE_LIMIT_EXHAUSTED', 'ERROR_CRITICAL_INTERNAL', 'ERROR_CUSTOMER_QUOTA_EXHAUSTED', 'ERROR_VERIFICATION_BYPASSED', 'ERROR_VERDICT_MISMATCH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "latest_verification_result",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in endpoints (list)
        _items = []
        if self.endpoints:
            for _item_endpoints in self.endpoints:
                if _item_endpoints:
                    _items.append(_item_endpoints.to_dict())
            _dict['endpoints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endpoints": [GoogleCloudRecaptchaenterpriseV1EndpointVerificationInfo.from_dict(_item) for _item in obj["endpoints"]] if obj.get("endpoints") is not None else None,
            "languageCode": obj.get("languageCode"),
            "latestVerificationResult": obj.get("latestVerificationResult"),
            "username": obj.get("username")
        })
        return _obj



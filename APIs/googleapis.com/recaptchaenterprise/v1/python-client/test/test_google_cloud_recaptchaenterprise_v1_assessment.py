# coding: utf-8

"""
    reCAPTCHA Enterprise API

    Help protect your website from fraudulent activity, spam, and abuse without creating friction.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_recaptchaenterprise_v1_assessment import GoogleCloudRecaptchaenterpriseV1Assessment

class TestGoogleCloudRecaptchaenterpriseV1Assessment(unittest.TestCase):
    """GoogleCloudRecaptchaenterpriseV1Assessment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudRecaptchaenterpriseV1Assessment:
        """Test GoogleCloudRecaptchaenterpriseV1Assessment
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudRecaptchaenterpriseV1Assessment`
        """
        model = GoogleCloudRecaptchaenterpriseV1Assessment()
        if include_optional:
            return GoogleCloudRecaptchaenterpriseV1Assessment(
                account_defender_assessment = openapi_client.models.google_cloud_recaptchaenterprise_v1_account_defender_assessment.GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment(
                    labels = [
                        'ACCOUNT_DEFENDER_LABEL_UNSPECIFIED'
                        ], ),
                account_verification = openapi_client.models.google_cloud_recaptchaenterprise_v1_account_verification_info.GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo(
                    endpoints = [
                        openapi_client.models.google_cloud_recaptchaenterprise_v1_endpoint_verification_info.GoogleCloudRecaptchaenterpriseV1EndpointVerificationInfo(
                            email_address = '', 
                            last_verification_time = '', 
                            phone_number = '', 
                            request_token = '', )
                        ], 
                    language_code = '', 
                    latest_verification_result = 'RESULT_UNSPECIFIED', 
                    username = '', ),
                event = openapi_client.models.google_cloud_recaptchaenterprise_v1_event.GoogleCloudRecaptchaenterpriseV1Event(
                    expected_action = '', 
                    express = True, 
                    firewall_policy_evaluation = True, 
                    hashed_account_id = 'YQ==', 
                    headers = [
                        ''
                        ], 
                    ja3 = '', 
                    requested_uri = '', 
                    site_key = '', 
                    token = '', 
                    transaction_data = openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_data.GoogleCloudRecaptchaenterpriseV1TransactionData(
                        billing_address = openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_data_address.GoogleCloudRecaptchaenterpriseV1TransactionDataAddress(
                            address = [
                                ''
                                ], 
                            administrative_area = '', 
                            locality = '', 
                            postal_code = '', 
                            recipient = '', 
                            region_code = '', ), 
                        card_bin = '', 
                        card_last_four = '', 
                        currency_code = '', 
                        gateway_info = openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_data_gateway_info.GoogleCloudRecaptchaenterpriseV1TransactionDataGatewayInfo(
                            avs_response_code = '', 
                            cvv_response_code = '', 
                            gateway_response_code = '', 
                            name = '', ), 
                        items = [
                            openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_data_item.GoogleCloudRecaptchaenterpriseV1TransactionDataItem(
                                merchant_account_id = '', 
                                name = '', 
                                quantity = '', 
                                value = 1.337, )
                            ], 
                        merchants = [
                            openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_data_user.GoogleCloudRecaptchaenterpriseV1TransactionDataUser(
                                account_id = '', 
                                creation_ms = '', 
                                email = '', 
                                email_verified = True, 
                                phone_number = '', 
                                phone_verified = True, )
                            ], 
                        payment_method = '', 
                        shipping_address = openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_data_address.GoogleCloudRecaptchaenterpriseV1TransactionDataAddress(
                            administrative_area = '', 
                            locality = '', 
                            postal_code = '', 
                            recipient = '', 
                            region_code = '', ), 
                        shipping_value = 1.337, 
                        transaction_id = '', 
                        user = openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_data_user.GoogleCloudRecaptchaenterpriseV1TransactionDataUser(
                            account_id = '', 
                            creation_ms = '', 
                            email = '', 
                            email_verified = True, 
                            phone_number = '', 
                            phone_verified = True, ), 
                        value = 1.337, ), 
                    user_agent = '', 
                    user_info = openapi_client.models.google_cloud_recaptchaenterprise_v1_user_info.GoogleCloudRecaptchaenterpriseV1UserInfo(
                        account_id = '', 
                        create_account_time = '', 
                        user_ids = [
                            openapi_client.models.google_cloud_recaptchaenterprise_v1_user_id.GoogleCloudRecaptchaenterpriseV1UserId(
                                email = '', 
                                phone_number = '', 
                                username = '', )
                            ], ), 
                    user_ip_address = '', 
                    waf_token_assessment = True, ),
                firewall_policy_assessment = openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_policy_assessment.GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment(
                    error = openapi_client.models.google_rpc_status.GoogleRpcStatus(
                        code = 56, 
                        details = [
                            {
                                'key' : null
                                }
                            ], 
                        message = '', ), 
                    firewall_policy = openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_policy.GoogleCloudRecaptchaenterpriseV1FirewallPolicy(
                        actions = [
                            openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_action.GoogleCloudRecaptchaenterpriseV1FirewallAction(
                                allow = openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_action_allow_action.GoogleCloudRecaptchaenterpriseV1FirewallActionAllowAction(), 
                                block = openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_action_block_action.GoogleCloudRecaptchaenterpriseV1FirewallActionBlockAction(), 
                                include_recaptcha_script = openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_action_include_recaptcha_script_action.GoogleCloudRecaptchaenterpriseV1FirewallActionIncludeRecaptchaScriptAction(), 
                                redirect = openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_action_redirect_action.GoogleCloudRecaptchaenterpriseV1FirewallActionRedirectAction(), 
                                set_header = openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_action_set_header_action.GoogleCloudRecaptchaenterpriseV1FirewallActionSetHeaderAction(
                                    key = '', 
                                    value = '', ), 
                                substitute = openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_action_substitute_action.GoogleCloudRecaptchaenterpriseV1FirewallActionSubstituteAction(
                                    path = '', ), )
                            ], 
                        condition = '', 
                        description = '', 
                        name = '', 
                        path = '', ), ),
                fraud_prevention_assessment = openapi_client.models.google_cloud_recaptchaenterprise_v1_fraud_prevention_assessment.GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment(
                    behavioral_trust_verdict = openapi_client.models.google_cloud_recaptchaenterprise_v1_fraud_prevention_assessment_behavioral_trust_verdict.GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentBehavioralTrustVerdict(
                        trust = 1.337, ), 
                    card_testing_verdict = openapi_client.models.google_cloud_recaptchaenterprise_v1_fraud_prevention_assessment_card_testing_verdict.GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentCardTestingVerdict(
                        risk = 1.337, ), 
                    stolen_instrument_verdict = openapi_client.models.google_cloud_recaptchaenterprise_v1_fraud_prevention_assessment_stolen_instrument_verdict.GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentStolenInstrumentVerdict(
                        risk = 1.337, ), 
                    transaction_risk = 1.337, ),
                fraud_signals = openapi_client.models.google_cloud_recaptchaenterprise_v1_fraud_signals.GoogleCloudRecaptchaenterpriseV1FraudSignals(
                    card_signals = openapi_client.models.google_cloud_recaptchaenterprise_v1_fraud_signals_card_signals.GoogleCloudRecaptchaenterpriseV1FraudSignalsCardSignals(
                        card_labels = [
                            'CARD_LABEL_UNSPECIFIED'
                            ], ), 
                    user_signals = openapi_client.models.google_cloud_recaptchaenterprise_v1_fraud_signals_user_signals.GoogleCloudRecaptchaenterpriseV1FraudSignalsUserSignals(
                        active_days_lower_bound = 56, 
                        synthetic_risk = 1.337, ), ),
                name = '',
                private_password_leak_verification = openapi_client.models.google_cloud_recaptchaenterprise_v1_private_password_leak_verification.GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification(
                    encrypted_leak_match_prefixes = [
                        'YQ=='
                        ], 
                    encrypted_user_credentials_hash = 'YQ==', 
                    lookup_hash_prefix = 'YQ==', 
                    reencrypted_user_credentials_hash = 'YQ==', ),
                risk_analysis = openapi_client.models.google_cloud_recaptchaenterprise_v1_risk_analysis.GoogleCloudRecaptchaenterpriseV1RiskAnalysis(
                    extended_verdict_reasons = [
                        ''
                        ], 
                    reasons = [
                        'CLASSIFICATION_REASON_UNSPECIFIED'
                        ], 
                    score = 1.337, ),
                token_properties = openapi_client.models.google_cloud_recaptchaenterprise_v1_token_properties.GoogleCloudRecaptchaenterpriseV1TokenProperties(
                    action = '', 
                    android_package_name = '', 
                    create_time = '', 
                    hostname = '', 
                    invalid_reason = 'INVALID_REASON_UNSPECIFIED', 
                    ios_bundle_id = '', 
                    valid = True, )
            )
        else:
            return GoogleCloudRecaptchaenterpriseV1Assessment(
        )
        """

    def testGoogleCloudRecaptchaenterpriseV1Assessment(self):
        """Test GoogleCloudRecaptchaenterpriseV1Assessment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

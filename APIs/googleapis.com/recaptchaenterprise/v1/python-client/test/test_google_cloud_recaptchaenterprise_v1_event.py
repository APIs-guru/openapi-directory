# coding: utf-8

"""
    reCAPTCHA Enterprise API

    Help protect your website from fraudulent activity, spam, and abuse without creating friction.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_recaptchaenterprise_v1_event import GoogleCloudRecaptchaenterpriseV1Event

class TestGoogleCloudRecaptchaenterpriseV1Event(unittest.TestCase):
    """GoogleCloudRecaptchaenterpriseV1Event unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudRecaptchaenterpriseV1Event:
        """Test GoogleCloudRecaptchaenterpriseV1Event
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudRecaptchaenterpriseV1Event`
        """
        model = GoogleCloudRecaptchaenterpriseV1Event()
        if include_optional:
            return GoogleCloudRecaptchaenterpriseV1Event(
                expected_action = '',
                express = True,
                firewall_policy_evaluation = True,
                hashed_account_id = 'YQ==',
                headers = [
                    ''
                    ],
                ja3 = '',
                requested_uri = '',
                site_key = '',
                token = '',
                transaction_data = openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_data.GoogleCloudRecaptchaenterpriseV1TransactionData(
                    billing_address = openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_data_address.GoogleCloudRecaptchaenterpriseV1TransactionDataAddress(
                        address = [
                            ''
                            ], 
                        administrative_area = '', 
                        locality = '', 
                        postal_code = '', 
                        recipient = '', 
                        region_code = '', ), 
                    card_bin = '', 
                    card_last_four = '', 
                    currency_code = '', 
                    gateway_info = openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_data_gateway_info.GoogleCloudRecaptchaenterpriseV1TransactionDataGatewayInfo(
                        avs_response_code = '', 
                        cvv_response_code = '', 
                        gateway_response_code = '', 
                        name = '', ), 
                    items = [
                        openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_data_item.GoogleCloudRecaptchaenterpriseV1TransactionDataItem(
                            merchant_account_id = '', 
                            name = '', 
                            quantity = '', 
                            value = 1.337, )
                        ], 
                    merchants = [
                        openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_data_user.GoogleCloudRecaptchaenterpriseV1TransactionDataUser(
                            account_id = '', 
                            creation_ms = '', 
                            email = '', 
                            email_verified = True, 
                            phone_number = '', 
                            phone_verified = True, )
                        ], 
                    payment_method = '', 
                    shipping_address = openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_data_address.GoogleCloudRecaptchaenterpriseV1TransactionDataAddress(
                        administrative_area = '', 
                        locality = '', 
                        postal_code = '', 
                        recipient = '', 
                        region_code = '', ), 
                    shipping_value = 1.337, 
                    transaction_id = '', 
                    user = openapi_client.models.google_cloud_recaptchaenterprise_v1_transaction_data_user.GoogleCloudRecaptchaenterpriseV1TransactionDataUser(
                        account_id = '', 
                        creation_ms = '', 
                        email = '', 
                        email_verified = True, 
                        phone_number = '', 
                        phone_verified = True, ), 
                    value = 1.337, ),
                user_agent = '',
                user_info = openapi_client.models.google_cloud_recaptchaenterprise_v1_user_info.GoogleCloudRecaptchaenterpriseV1UserInfo(
                    account_id = '', 
                    create_account_time = '', 
                    user_ids = [
                        openapi_client.models.google_cloud_recaptchaenterprise_v1_user_id.GoogleCloudRecaptchaenterpriseV1UserId(
                            email = '', 
                            phone_number = '', 
                            username = '', )
                        ], ),
                user_ip_address = '',
                waf_token_assessment = True
            )
        else:
            return GoogleCloudRecaptchaenterpriseV1Event(
        )
        """

    def testGoogleCloudRecaptchaenterpriseV1Event(self):
        """Test GoogleCloudRecaptchaenterpriseV1Event"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

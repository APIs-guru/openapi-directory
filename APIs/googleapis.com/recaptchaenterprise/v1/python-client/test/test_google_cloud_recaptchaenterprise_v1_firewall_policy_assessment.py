# coding: utf-8

"""
    reCAPTCHA Enterprise API

    Help protect your website from fraudulent activity, spam, and abuse without creating friction.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_policy_assessment import GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment

class TestGoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment(unittest.TestCase):
    """GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment:
        """Test GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment`
        """
        model = GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment()
        if include_optional:
            return GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment(
                error = openapi_client.models.google_rpc_status.GoogleRpcStatus(
                    code = 56, 
                    details = [
                        {
                            'key' : null
                            }
                        ], 
                    message = '', ),
                firewall_policy = openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_policy.GoogleCloudRecaptchaenterpriseV1FirewallPolicy(
                    actions = [
                        openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_action.GoogleCloudRecaptchaenterpriseV1FirewallAction(
                            allow = openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_action_allow_action.GoogleCloudRecaptchaenterpriseV1FirewallActionAllowAction(), 
                            block = openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_action_block_action.GoogleCloudRecaptchaenterpriseV1FirewallActionBlockAction(), 
                            include_recaptcha_script = openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_action_include_recaptcha_script_action.GoogleCloudRecaptchaenterpriseV1FirewallActionIncludeRecaptchaScriptAction(), 
                            redirect = openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_action_redirect_action.GoogleCloudRecaptchaenterpriseV1FirewallActionRedirectAction(), 
                            set_header = openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_action_set_header_action.GoogleCloudRecaptchaenterpriseV1FirewallActionSetHeaderAction(
                                key = '', 
                                value = '', ), 
                            substitute = openapi_client.models.google_cloud_recaptchaenterprise_v1_firewall_action_substitute_action.GoogleCloudRecaptchaenterpriseV1FirewallActionSubstituteAction(
                                path = '', ), )
                        ], 
                    condition = '', 
                    description = '', 
                    name = '', 
                    path = '', )
            )
        else:
            return GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment(
        )
        """

    def testGoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment(self):
        """Test GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

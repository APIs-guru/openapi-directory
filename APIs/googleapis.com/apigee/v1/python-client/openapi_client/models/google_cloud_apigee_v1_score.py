# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_score_component import GoogleCloudApigeeV1ScoreComponent
from openapi_client.models.google_type_interval import GoogleTypeInterval
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1Score(BaseModel):
    """
    Represents Security Score.
    """ # noqa: E501
    component: Optional[GoogleCloudApigeeV1ScoreComponent] = None
    subcomponents: Optional[List[GoogleCloudApigeeV1ScoreComponent]] = Field(default=None, description="List of all the drilldown score components.")
    time_range: Optional[GoogleTypeInterval] = Field(default=None, alias="timeRange")
    __properties: ClassVar[List[str]] = ["component", "subcomponents", "timeRange"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1Score from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of component
        if self.component:
            _dict['component'] = self.component.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subcomponents (list)
        _items = []
        if self.subcomponents:
            for _item_subcomponents in self.subcomponents:
                if _item_subcomponents:
                    _items.append(_item_subcomponents.to_dict())
            _dict['subcomponents'] = _items
        # override the default output from pydantic by calling `to_dict()` of time_range
        if self.time_range:
            _dict['timeRange'] = self.time_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1Score from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "component": GoogleCloudApigeeV1ScoreComponent.from_dict(obj["component"]) if obj.get("component") is not None else None,
            "subcomponents": [GoogleCloudApigeeV1ScoreComponent.from_dict(_item) for _item in obj["subcomponents"]] if obj.get("subcomponents") is not None else None,
            "timeRange": GoogleTypeInterval.from_dict(obj["timeRange"]) if obj.get("timeRange") is not None else None
        })
        return _obj



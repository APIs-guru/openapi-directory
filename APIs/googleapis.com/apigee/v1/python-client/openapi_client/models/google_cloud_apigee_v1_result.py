# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_access import GoogleCloudApigeeV1Access
from openapi_client.models.google_cloud_apigee_v1_properties import GoogleCloudApigeeV1Properties
from openapi_client.models.google_cloud_apigee_v1_property import GoogleCloudApigeeV1Property
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1Result(BaseModel):
    """
    Result is short for \"action result\", could be different types identified by \"action_result\" field. Supported types: 1. DebugInfo : generic debug info collected by runtime recorded as a list of properties. For example, the contents could be virtual host info, state change result, or execution metadata. Required fields : properties, timestamp 2. RequestMessage: information of a http request. Contains headers, request URI and http methods type.Required fields : headers, uri, verb 3. ResponseMessage: information of a http response. Contains headers, reason phrase and http status code. Required fields : headers, reasonPhrase, statusCode 4. ErrorMessage: information of a http error message. Contains detail error message, reason phrase and status code. Required fields : content, headers, reasonPhrase, statusCode 5. VariableAccess: a list of variable access actions, can be Get, Set and Remove. Required fields : accessList
    """ # noqa: E501
    action_result: Optional[StrictStr] = Field(default=None, description="Type of the action result. Can be one of the five: DebugInfo, RequestMessage, ResponseMessage, ErrorMessage, VariableAccess", alias="ActionResult")
    access_list: Optional[List[GoogleCloudApigeeV1Access]] = Field(default=None, description="A list of variable access actions agaist the api proxy. Supported values: Get, Set, Remove.", alias="accessList")
    content: Optional[StrictStr] = Field(default=None, description="Error message content. for example, \"content\" : \"{\\\"fault\\\":{\\\"faultstring\\\":\\\"API timed out\\\",\\\"detail\\\":{\\\"errorcode\\\":\\\"flow.APITimedOut\\\"}}}\"")
    headers: Optional[List[GoogleCloudApigeeV1Property]] = Field(default=None, description="A list of HTTP headers. for example, '\"headers\" : [ { \"name\" : \"Content-Length\", \"value\" : \"83\" }, { \"name\" : \"Content-Type\", \"value\" : \"application/json\" } ]'")
    properties: Optional[GoogleCloudApigeeV1Properties] = None
    reason_phrase: Optional[StrictStr] = Field(default=None, description="HTTP response phrase", alias="reasonPhrase")
    status_code: Optional[StrictStr] = Field(default=None, description="HTTP response code", alias="statusCode")
    timestamp: Optional[StrictStr] = Field(default=None, description="Timestamp of when the result is recorded. Its format is dd-mm-yy hh:mm:ss:xxx. For example, `\"timestamp\" : \"12-08-19 00:31:59:960\"`")
    u_ri: Optional[StrictStr] = Field(default=None, description="The relative path of the api proxy. for example, `\"uRI\" : \"/iloveapis\"`", alias="uRI")
    verb: Optional[StrictStr] = Field(default=None, description="HTTP method verb")
    __properties: ClassVar[List[str]] = ["ActionResult", "accessList", "content", "headers", "properties", "reasonPhrase", "statusCode", "timestamp", "uRI", "verb"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1Result from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in access_list (list)
        _items = []
        if self.access_list:
            for _item_access_list in self.access_list:
                if _item_access_list:
                    _items.append(_item_access_list.to_dict())
            _dict['accessList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in headers (list)
        _items = []
        if self.headers:
            for _item_headers in self.headers:
                if _item_headers:
                    _items.append(_item_headers.to_dict())
            _dict['headers'] = _items
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1Result from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ActionResult": obj.get("ActionResult"),
            "accessList": [GoogleCloudApigeeV1Access.from_dict(_item) for _item in obj["accessList"]] if obj.get("accessList") is not None else None,
            "content": obj.get("content"),
            "headers": [GoogleCloudApigeeV1Property.from_dict(_item) for _item in obj["headers"]] if obj.get("headers") is not None else None,
            "properties": GoogleCloudApigeeV1Properties.from_dict(obj["properties"]) if obj.get("properties") is not None else None,
            "reasonPhrase": obj.get("reasonPhrase"),
            "statusCode": obj.get("statusCode"),
            "timestamp": obj.get("timestamp"),
            "uRI": obj.get("uRI"),
            "verb": obj.get("verb")
        })
        return _obj



# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_config_version import GoogleCloudApigeeV1ConfigVersion
from openapi_client.models.google_cloud_apigee_v1_resource_files import GoogleCloudApigeeV1ResourceFiles
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1SharedFlowRevision(BaseModel):
    """
    The metadata describing a shared flow revision.
    """ # noqa: E501
    configuration_version: Optional[GoogleCloudApigeeV1ConfigVersion] = Field(default=None, alias="configurationVersion")
    context_info: Optional[StrictStr] = Field(default=None, description="A textual description of the shared flow revision.", alias="contextInfo")
    created_at: Optional[StrictStr] = Field(default=None, description="Time at which this shared flow revision was created, in milliseconds since epoch.", alias="createdAt")
    description: Optional[StrictStr] = Field(default=None, description="Description of the shared flow revision.")
    display_name: Optional[StrictStr] = Field(default=None, description="The human readable name of this shared flow.", alias="displayName")
    entity_meta_data_as_properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="A Key-Value map of metadata about this shared flow revision.", alias="entityMetaDataAsProperties")
    last_modified_at: Optional[StrictStr] = Field(default=None, description="Time at which this shared flow revision was most recently modified, in milliseconds since epoch.", alias="lastModifiedAt")
    name: Optional[StrictStr] = Field(default=None, description="The resource ID of the parent shared flow.")
    policies: Optional[List[StrictStr]] = Field(default=None, description="A list of policy names included in this shared flow revision.")
    resource_files: Optional[GoogleCloudApigeeV1ResourceFiles] = Field(default=None, alias="resourceFiles")
    resources: Optional[List[StrictStr]] = Field(default=None, description="A list of the resources included in this shared flow revision formatted as \"{type}://{name}\".")
    revision: Optional[StrictStr] = Field(default=None, description="The resource ID of this revision.")
    shared_flows: Optional[List[StrictStr]] = Field(default=None, description="A list of the shared flow names included in this shared flow revision.", alias="sharedFlows")
    type: Optional[StrictStr] = Field(default=None, description="The string \"Application\"")
    __properties: ClassVar[List[str]] = ["configurationVersion", "contextInfo", "createdAt", "description", "displayName", "entityMetaDataAsProperties", "lastModifiedAt", "name", "policies", "resourceFiles", "resources", "revision", "sharedFlows", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1SharedFlowRevision from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of configuration_version
        if self.configuration_version:
            _dict['configurationVersion'] = self.configuration_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_files
        if self.resource_files:
            _dict['resourceFiles'] = self.resource_files.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1SharedFlowRevision from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configurationVersion": GoogleCloudApigeeV1ConfigVersion.from_dict(obj["configurationVersion"]) if obj.get("configurationVersion") is not None else None,
            "contextInfo": obj.get("contextInfo"),
            "createdAt": obj.get("createdAt"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "entityMetaDataAsProperties": obj.get("entityMetaDataAsProperties"),
            "lastModifiedAt": obj.get("lastModifiedAt"),
            "name": obj.get("name"),
            "policies": obj.get("policies"),
            "resourceFiles": GoogleCloudApigeeV1ResourceFiles.from_dict(obj["resourceFiles"]) if obj.get("resourceFiles") is not None else None,
            "resources": obj.get("resources"),
            "revision": obj.get("revision"),
            "sharedFlows": obj.get("sharedFlows"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_attribute import GoogleCloudApigeeV1Attribute
from openapi_client.models.google_cloud_apigee_v1_quota import GoogleCloudApigeeV1Quota
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1GrpcOperationConfig(BaseModel):
    """
    Binds the resources in a proxy or remote service with the gRPC operation and its associated quota enforcement.
    """ # noqa: E501
    api_source: Optional[StrictStr] = Field(default=None, description="Required. Name of the API proxy with which the gRPC operation and quota are associated.", alias="apiSource")
    attributes: Optional[List[GoogleCloudApigeeV1Attribute]] = Field(default=None, description="Custom attributes associated with the operation.")
    methods: Optional[List[StrictStr]] = Field(default=None, description="List of unqualified gRPC method names for the proxy to which quota will be applied. If this field is empty, the Quota will apply to all operations on the gRPC service defined on the proxy. Example: Given a proxy that is configured to serve com.petstore.PetService, the methods com.petstore.PetService.ListPets and com.petstore.PetService.GetPet would be specified here as simply [\"ListPets\", \"GetPet\"].")
    quota: Optional[GoogleCloudApigeeV1Quota] = None
    service: Optional[StrictStr] = Field(default=None, description="Required. gRPC Service name associated to be associated with the API proxy, on which quota rules can be applied upon.")
    __properties: ClassVar[List[str]] = ["apiSource", "attributes", "methods", "quota", "service"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1GrpcOperationConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of quota
        if self.quota:
            _dict['quota'] = self.quota.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1GrpcOperationConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiSource": obj.get("apiSource"),
            "attributes": [GoogleCloudApigeeV1Attribute.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "methods": obj.get("methods"),
            "quota": GoogleCloudApigeeV1Quota.from_dict(obj["quota"]) if obj.get("quota") is not None else None,
            "service": obj.get("service")
        })
        return _obj



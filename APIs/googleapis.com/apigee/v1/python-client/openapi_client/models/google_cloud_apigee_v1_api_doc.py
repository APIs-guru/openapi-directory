# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1ApiDoc(BaseModel):
    """
    `ApiDoc` represents an API catalog item. Catalog items are used in two ways in a portal: - Users can browse and interact with a visual representation of the API documentation - The `api_product_name` field provides a link to a backing API product. Through this link, portal users can create and manage developer apps linked to one or more API products.
    """ # noqa: E501
    anon_allowed: Optional[StrictBool] = Field(default=None, description="Optional. Boolean flag that manages user access to the catalog item. When true, the catalog item can be viewed anonymously; otherwise, only registered users may view it. Note: when the parent portal is enrolled in the [audience management feature](https://cloud.google.com/apigee/docs/api-platform/publish/portal/portal-audience#enrolling_in_the_beta_release_of_the_audience_management_feature), this flag is ignored; instead visibility must be further managed in the management UI (see [Manage the visibility of an API in your portal](https://cloud.google.com/apigee/docs/api-platform/publish/portal/publish-apis#visibility)).", alias="anonAllowed")
    api_product_name: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The `name` field of the associated [API product](/apigee/docs/reference/apis/apigee/rest/v1/organizations.apiproducts). A portal may have only one catalog item associated with a given API product.", alias="apiProductName")
    category_ids: Optional[List[StrictStr]] = Field(default=None, description="Optional. The IDs of the API categories to which this catalog item belongs.", alias="categoryIds")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Description of the catalog item. Max length is 10,000 characters.")
    edge_api_product_name: Optional[StrictStr] = Field(default=None, description="Optional. Immutable. DEPRECATED: use the `apiProductName` field instead", alias="edgeAPIProductName")
    graphql_endpoint_url: Optional[StrictStr] = Field(default=None, description="Optional. DEPRECATED: manage documentation through the `getDocumentation` and `updateDocumentation` methods", alias="graphqlEndpointUrl")
    graphql_schema: Optional[StrictStr] = Field(default=None, description="Optional. DEPRECATED: manage documentation through the `getDocumentation` and `updateDocumentation` methods", alias="graphqlSchema")
    graphql_schema_display_name: Optional[StrictStr] = Field(default=None, description="Optional. DEPRECATED: manage documentation through the `getDocumentation` and `updateDocumentation` methods", alias="graphqlSchemaDisplayName")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the catalog item.")
    image_url: Optional[StrictStr] = Field(default=None, description="Optional. Location of the image used for the catalog item in the catalog. For portal files, this can have the format `/files/{filename}`. Max length is 2,083 characters.", alias="imageUrl")
    modified: Optional[StrictStr] = Field(default=None, description="Output only. Time the catalog item was last modified in milliseconds since epoch.")
    published: Optional[StrictBool] = Field(default=None, description="Optional. Denotes whether the catalog item is published to the portal or is in a draft state. When the parent portal is enrolled in the [audience management feature](https://cloud.google.com/apigee/docs/api-platform/publish/portal/portal-audience#enrolling_in_the_beta_release_of_the_audience_management_feature), the visibility must be further managed in the management UI (see [Manage the visibility of an API in your portal](https://cloud.google.com/apigee/docs/api-platform/publish/portal/publish-apis#visibility)) before it can be visible to any users. If not enrolled in the audience management feature, the visibility is further managed by the `anonAllowed` flag.")
    require_callback_url: Optional[StrictBool] = Field(default=None, description="Optional. Whether a callback URL is required when this catalog item's API product is enabled in a developer app. When true, a portal user will be required to input a URL when managing the app (this is typically used for the app's OAuth flow).", alias="requireCallbackUrl")
    site_id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the parent portal.", alias="siteId")
    spec_id: Optional[StrictStr] = Field(default=None, description="Optional. DEPRECATED: DO NOT USE", alias="specId")
    title: Optional[StrictStr] = Field(default=None, description="Required. The user-facing name of the catalog item. `title` must be a non-empty string with a max length of 255 characters.")
    visibility: Optional[StrictBool] = Field(default=None, description="Optional. DEPRECATED: use the `published` field instead")
    __properties: ClassVar[List[str]] = ["anonAllowed", "apiProductName", "categoryIds", "description", "edgeAPIProductName", "graphqlEndpointUrl", "graphqlSchema", "graphqlSchemaDisplayName", "id", "imageUrl", "modified", "published", "requireCallbackUrl", "siteId", "specId", "title", "visibility"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1ApiDoc from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "modified",
            "site_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1ApiDoc from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "anonAllowed": obj.get("anonAllowed"),
            "apiProductName": obj.get("apiProductName"),
            "categoryIds": obj.get("categoryIds"),
            "description": obj.get("description"),
            "edgeAPIProductName": obj.get("edgeAPIProductName"),
            "graphqlEndpointUrl": obj.get("graphqlEndpointUrl"),
            "graphqlSchema": obj.get("graphqlSchema"),
            "graphqlSchemaDisplayName": obj.get("graphqlSchemaDisplayName"),
            "id": obj.get("id"),
            "imageUrl": obj.get("imageUrl"),
            "modified": obj.get("modified"),
            "published": obj.get("published"),
            "requireCallbackUrl": obj.get("requireCallbackUrl"),
            "siteId": obj.get("siteId"),
            "specId": obj.get("specId"),
            "title": obj.get("title"),
            "visibility": obj.get("visibility")
        })
        return _obj



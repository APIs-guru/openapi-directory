# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_common_name_config import GoogleCloudApigeeV1CommonNameConfig
from openapi_client.models.google_cloud_apigee_v1_key_alias_reference import GoogleCloudApigeeV1KeyAliasReference
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1TlsInfoConfig(BaseModel):
    """
    GoogleCloudApigeeV1TlsInfoConfig
    """ # noqa: E501
    ciphers: Optional[List[StrictStr]] = Field(default=None, description="List of ciphers that are granted access.")
    client_auth_enabled: Optional[StrictBool] = Field(default=None, description="Flag that specifies whether client-side authentication is enabled for the target server. Enables two-way TLS.", alias="clientAuthEnabled")
    common_name: Optional[GoogleCloudApigeeV1CommonNameConfig] = Field(default=None, alias="commonName")
    enabled: Optional[StrictBool] = Field(default=None, description="Flag that specifies whether one-way TLS is enabled. Set to `true` to enable one-way TLS.")
    ignore_validation_errors: Optional[StrictBool] = Field(default=None, description="Flag that specifies whether to ignore TLS certificate validation errors. Set to `true` to ignore errors.", alias="ignoreValidationErrors")
    key_alias: Optional[StrictStr] = Field(default=None, description="Name of the alias used for client-side authentication in the following format: `organizations/{org}/environments/{env}/keystores/{keystore}/aliases/{alias}`", alias="keyAlias")
    key_alias_reference: Optional[GoogleCloudApigeeV1KeyAliasReference] = Field(default=None, alias="keyAliasReference")
    protocols: Optional[List[StrictStr]] = Field(default=None, description="List of TLS protocols that are granted access.")
    trust_store: Optional[StrictStr] = Field(default=None, description="Name of the keystore or keystore reference containing trusted certificates for the server in the following format: `organizations/{org}/environments/{env}/keystores/{keystore}` or `organizations/{org}/environments/{env}/references/{reference}`", alias="trustStore")
    __properties: ClassVar[List[str]] = ["ciphers", "clientAuthEnabled", "commonName", "enabled", "ignoreValidationErrors", "keyAlias", "keyAliasReference", "protocols", "trustStore"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1TlsInfoConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of common_name
        if self.common_name:
            _dict['commonName'] = self.common_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of key_alias_reference
        if self.key_alias_reference:
            _dict['keyAliasReference'] = self.key_alias_reference.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1TlsInfoConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ciphers": obj.get("ciphers"),
            "clientAuthEnabled": obj.get("clientAuthEnabled"),
            "commonName": GoogleCloudApigeeV1CommonNameConfig.from_dict(obj["commonName"]) if obj.get("commonName") is not None else None,
            "enabled": obj.get("enabled"),
            "ignoreValidationErrors": obj.get("ignoreValidationErrors"),
            "keyAlias": obj.get("keyAlias"),
            "keyAliasReference": GoogleCloudApigeeV1KeyAliasReference.from_dict(obj["keyAliasReference"]) if obj.get("keyAliasReference") is not None else None,
            "protocols": obj.get("protocols"),
            "trustStore": obj.get("trustStore")
        })
        return _obj



# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_apigee_v1_addons_config import GoogleCloudApigeeV1AddonsConfig
from openapi_client.models.google_cloud_apigee_v1_properties import GoogleCloudApigeeV1Properties
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1Organization(BaseModel):
    """
    GoogleCloudApigeeV1Organization
    """ # noqa: E501
    addons_config: Optional[GoogleCloudApigeeV1AddonsConfig] = Field(default=None, alias="addonsConfig")
    analytics_region: Optional[StrictStr] = Field(default=None, description="Required. DEPRECATED: This field will eventually be deprecated and replaced with a differently-named field. Primary Google Cloud region for analytics data storage. For valid values, see [Create an Apigee organization](https://cloud.google.com/apigee/docs/api-platform/get-started/create-org).", alias="analyticsRegion")
    api_consumer_data_encryption_key_name: Optional[StrictStr] = Field(default=None, description="Cloud KMS key name used for encrypting API consumer data. Required for US/EU regions when [BillingType](#BillingType) is `SUBSCRIPTION`. When [BillingType](#BillingType) is `EVALUATION` or the region is not US/EU, a Google-Managed encryption key will be used. Format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`", alias="apiConsumerDataEncryptionKeyName")
    api_consumer_data_location: Optional[StrictStr] = Field(default=None, description="This field is needed only for customers with control plane in US or EU. Apigee stores some control plane data only in single region. This field determines which single region Apigee should use. For example: \"us-west1\" when control plane is in US or \"europe-west2\" when control plane is in EU.", alias="apiConsumerDataLocation")
    apigee_project_id: Optional[StrictStr] = Field(default=None, description="Output only. Apigee Project ID associated with the organization. Use this project to allowlist Apigee in the Service Attachment when using private service connect with Apigee.", alias="apigeeProjectId")
    attributes: Optional[List[StrictStr]] = Field(default=None, description="Not used by Apigee.")
    authorized_network: Optional[StrictStr] = Field(default=None, description="Compute Engine network used for Service Networking to be peered with Apigee runtime instances. See [Getting started with the Service Networking API](https://cloud.google.com/service-infrastructure/docs/service-networking/getting-started). Valid only when [RuntimeType](#RuntimeType) is set to `CLOUD`. The value must be set before the creation of a runtime instance and can be updated only when there are no runtime instances. For example: `default`. Apigee also supports shared VPC (that is, the host network project is not the same as the one that is peering with Apigee). See [Shared VPC overview](https://cloud.google.com/vpc/docs/shared-vpc). To use a shared VPC network, use the following format: `projects/{host-project-id}/{region}/networks/{network-name}`. For example: `projects/my-sharedvpc-host/global/networks/mynetwork` **Note:** Not supported for Apigee hybrid.", alias="authorizedNetwork")
    billing_type: Optional[StrictStr] = Field(default=None, description="Billing type of the Apigee organization. See [Apigee pricing](https://cloud.google.com/apigee/pricing).", alias="billingType")
    ca_certificate: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Output only. Base64-encoded public certificate for the root CA of the Apigee organization. Valid only when [RuntimeType](#RuntimeType) is `CLOUD`.", alias="caCertificate")
    control_plane_encryption_key_name: Optional[StrictStr] = Field(default=None, description="Cloud KMS key name used for encrypting control plane data that is stored in a multi region. Required when [BillingType](#BillingType) is `SUBSCRIPTION`. When [BillingType](#BillingType) is `EVALUATION`, a Google-Managed encryption key will be used. Format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`", alias="controlPlaneEncryptionKeyName")
    created_at: Optional[StrictStr] = Field(default=None, description="Output only. Time that the Apigee organization was created in milliseconds since epoch.", alias="createdAt")
    customer_name: Optional[StrictStr] = Field(default=None, description="Not used by Apigee.", alias="customerName")
    description: Optional[StrictStr] = Field(default=None, description="Description of the Apigee organization.")
    disable_vpc_peering: Optional[StrictBool] = Field(default=None, description="Optional. Flag that specifies whether the VPC Peering through Private Google Access should be disabled between the consumer network and Apigee. Valid only when RuntimeType is set to CLOUD. Required if an authorizedNetwork on the consumer project is not provided, in which case the flag should be set to true. The value must be set before the creation of any Apigee runtime instance and can be updated only when there are no runtime instances. **Note:** Apigee will be deprecating the vpc peering model that requires you to provide 'authorizedNetwork', by making the non-peering model as the default way of provisioning Apigee organization in future. So, this will be a temporary flag to enable the transition. Not supported for Apigee hybrid.", alias="disableVpcPeering")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name for the Apigee organization. Unused, but reserved for future use.", alias="displayName")
    environments: Optional[List[StrictStr]] = Field(default=None, description="Output only. List of environments in the Apigee organization.")
    expires_at: Optional[StrictStr] = Field(default=None, description="Output only. Time that the Apigee organization is scheduled for deletion.", alias="expiresAt")
    last_modified_at: Optional[StrictStr] = Field(default=None, description="Output only. Time that the Apigee organization was last modified in milliseconds since epoch.", alias="lastModifiedAt")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the Apigee organization.")
    portal_disabled: Optional[StrictBool] = Field(default=None, description="Configuration for the Portals settings.", alias="portalDisabled")
    project_id: Optional[StrictStr] = Field(default=None, description="Output only. Project ID associated with the Apigee organization.", alias="projectId")
    properties: Optional[GoogleCloudApigeeV1Properties] = None
    runtime_database_encryption_key_name: Optional[StrictStr] = Field(default=None, description="Cloud KMS key name used for encrypting the data that is stored and replicated across runtime instances. Update is not allowed after the organization is created. Required when [RuntimeType](#RuntimeType) is `CLOUD`. If not specified when [RuntimeType](#RuntimeType) is `TRIAL`, a Google-Managed encryption key will be used. For example: \"projects/foo/locations/us/keyRings/bar/cryptoKeys/baz\". **Note:** Not supported for Apigee hybrid.", alias="runtimeDatabaseEncryptionKeyName")
    runtime_type: Optional[StrictStr] = Field(default=None, description="Required. Runtime type of the Apigee organization based on the Apigee subscription purchased.", alias="runtimeType")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the organization. Values other than ACTIVE means the resource is not ready to use.")
    subscription_plan: Optional[StrictStr] = Field(default=None, description="Output only. Subscription plan that the customer has purchased. Output only.", alias="subscriptionPlan")
    subscription_type: Optional[StrictStr] = Field(default=None, description="Output only. DEPRECATED: This will eventually be replaced by BillingType. Subscription type of the Apigee organization. Valid values include trial (free, limited, and for evaluation purposes only) or paid (full subscription has been purchased). See [Apigee pricing](https://cloud.google.com/apigee/pricing/).", alias="subscriptionType")
    type: Optional[StrictStr] = Field(default=None, description="Not used by Apigee.")
    __properties: ClassVar[List[str]] = ["addonsConfig", "analyticsRegion", "apiConsumerDataEncryptionKeyName", "apiConsumerDataLocation", "apigeeProjectId", "attributes", "authorizedNetwork", "billingType", "caCertificate", "controlPlaneEncryptionKeyName", "createdAt", "customerName", "description", "disableVpcPeering", "displayName", "environments", "expiresAt", "lastModifiedAt", "name", "portalDisabled", "projectId", "properties", "runtimeDatabaseEncryptionKeyName", "runtimeType", "state", "subscriptionPlan", "subscriptionType", "type"]

    @field_validator('billing_type')
    def billing_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BILLING_TYPE_UNSPECIFIED', 'SUBSCRIPTION', 'EVALUATION', 'PAYG']):
            raise ValueError("must be one of enum values ('BILLING_TYPE_UNSPECIFIED', 'SUBSCRIPTION', 'EVALUATION', 'PAYG')")
        return value

    @field_validator('runtime_type')
    def runtime_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RUNTIME_TYPE_UNSPECIFIED', 'CLOUD', 'HYBRID']):
            raise ValueError("must be one of enum values ('RUNTIME_TYPE_UNSPECIFIED', 'CLOUD', 'HYBRID')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'DELETING', 'UPDATING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'DELETING', 'UPDATING')")
        return value

    @field_validator('subscription_plan')
    def subscription_plan_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SUBSCRIPTION_PLAN_UNSPECIFIED', 'SUBSCRIPTION_2021', 'SUBSCRIPTION_2024']):
            raise ValueError("must be one of enum values ('SUBSCRIPTION_PLAN_UNSPECIFIED', 'SUBSCRIPTION_2021', 'SUBSCRIPTION_2024')")
        return value

    @field_validator('subscription_type')
    def subscription_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SUBSCRIPTION_TYPE_UNSPECIFIED', 'PAID', 'TRIAL']):
            raise ValueError("must be one of enum values ('SUBSCRIPTION_TYPE_UNSPECIFIED', 'PAID', 'TRIAL')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'TYPE_TRIAL', 'TYPE_PAID', 'TYPE_INTERNAL']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'TYPE_TRIAL', 'TYPE_PAID', 'TYPE_INTERNAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1Organization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "apigee_project_id",
            "ca_certificate",
            "created_at",
            "environments",
            "expires_at",
            "last_modified_at",
            "name",
            "project_id",
            "state",
            "subscription_plan",
            "subscription_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of addons_config
        if self.addons_config:
            _dict['addonsConfig'] = self.addons_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1Organization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addonsConfig": GoogleCloudApigeeV1AddonsConfig.from_dict(obj["addonsConfig"]) if obj.get("addonsConfig") is not None else None,
            "analyticsRegion": obj.get("analyticsRegion"),
            "apiConsumerDataEncryptionKeyName": obj.get("apiConsumerDataEncryptionKeyName"),
            "apiConsumerDataLocation": obj.get("apiConsumerDataLocation"),
            "apigeeProjectId": obj.get("apigeeProjectId"),
            "attributes": obj.get("attributes"),
            "authorizedNetwork": obj.get("authorizedNetwork"),
            "billingType": obj.get("billingType"),
            "caCertificate": obj.get("caCertificate"),
            "controlPlaneEncryptionKeyName": obj.get("controlPlaneEncryptionKeyName"),
            "createdAt": obj.get("createdAt"),
            "customerName": obj.get("customerName"),
            "description": obj.get("description"),
            "disableVpcPeering": obj.get("disableVpcPeering"),
            "displayName": obj.get("displayName"),
            "environments": obj.get("environments"),
            "expiresAt": obj.get("expiresAt"),
            "lastModifiedAt": obj.get("lastModifiedAt"),
            "name": obj.get("name"),
            "portalDisabled": obj.get("portalDisabled"),
            "projectId": obj.get("projectId"),
            "properties": GoogleCloudApigeeV1Properties.from_dict(obj["properties"]) if obj.get("properties") is not None else None,
            "runtimeDatabaseEncryptionKeyName": obj.get("runtimeDatabaseEncryptionKeyName"),
            "runtimeType": obj.get("runtimeType"),
            "state": obj.get("state"),
            "subscriptionPlan": obj.get("subscriptionPlan"),
            "subscriptionType": obj.get("subscriptionType"),
            "type": obj.get("type")
        })
        return _obj



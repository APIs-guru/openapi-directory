# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_api_product_association import GoogleCloudApigeeV1APIProductAssociation
from openapi_client.models.google_cloud_apigee_v1_attribute import GoogleCloudApigeeV1Attribute
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1AppGroupAppKey(BaseModel):
    """
    AppGroupAppKey contains all the information associated with the credentials.
    """ # noqa: E501
    api_products: Optional[List[GoogleCloudApigeeV1APIProductAssociation]] = Field(default=None, description="Output only. List of API products and its status for which the credential can be used. **Note**: Use UpdateAppGroupAppKeyApiProductRequest API to make the association after the consumer key and secret are created.", alias="apiProducts")
    attributes: Optional[List[GoogleCloudApigeeV1Attribute]] = Field(default=None, description="List of attributes associated with the credential.")
    consumer_key: Optional[StrictStr] = Field(default=None, description="Immutable. Consumer key.", alias="consumerKey")
    consumer_secret: Optional[StrictStr] = Field(default=None, description="Secret key.", alias="consumerSecret")
    expires_at: Optional[StrictStr] = Field(default=None, description="Output only. Time the AppGroup app expires in milliseconds since epoch.", alias="expiresAt")
    expires_in_seconds: Optional[StrictStr] = Field(default=None, description="Immutable. Expiration time, in seconds, for the consumer key. If not set or left to the default value of `-1`, the API key never expires. The expiration time can't be updated after it is set.", alias="expiresInSeconds")
    issued_at: Optional[StrictStr] = Field(default=None, description="Output only. Time the AppGroup app was created in milliseconds since epoch.", alias="issuedAt")
    scopes: Optional[List[StrictStr]] = Field(default=None, description="Scopes to apply to the app. The specified scope names must already be defined for the API product that you associate with the app.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the credential. Valid values include `approved` or `revoked`.")
    __properties: ClassVar[List[str]] = ["apiProducts", "attributes", "consumerKey", "consumerSecret", "expiresAt", "expiresInSeconds", "issuedAt", "scopes", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1AppGroupAppKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "api_products",
            "expires_at",
            "issued_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in api_products (list)
        _items = []
        if self.api_products:
            for _item_api_products in self.api_products:
                if _item_api_products:
                    _items.append(_item_api_products.to_dict())
            _dict['apiProducts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1AppGroupAppKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiProducts": [GoogleCloudApigeeV1APIProductAssociation.from_dict(_item) for _item in obj["apiProducts"]] if obj.get("apiProducts") is not None else None,
            "attributes": [GoogleCloudApigeeV1Attribute.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "consumerKey": obj.get("consumerKey"),
            "consumerSecret": obj.get("consumerSecret"),
            "expiresAt": obj.get("expiresAt"),
            "expiresInSeconds": obj.get("expiresInSeconds"),
            "issuedAt": obj.get("issuedAt"),
            "scopes": obj.get("scopes"),
            "status": obj.get("status")
        })
        return _obj



# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_runtime_trace_config_override import GoogleCloudApigeeV1RuntimeTraceConfigOverride
from openapi_client.models.google_cloud_apigee_v1_runtime_trace_sampling_config import GoogleCloudApigeeV1RuntimeTraceSamplingConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1RuntimeTraceConfig(BaseModel):
    """
    NEXT ID: 8 RuntimeTraceConfig defines the configurations for distributed trace in an environment.
    """ # noqa: E501
    endpoint: Optional[StrictStr] = Field(default=None, description="Endpoint of the exporter.")
    exporter: Optional[StrictStr] = Field(default=None, description="Exporter that is used to view the distributed trace captured using OpenCensus. An exporter sends traces to any backend that is capable of consuming them. Recorded spans can be exported by registered exporters.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the trace config in the following format: `organizations/{org}/environment/{env}/traceConfig`")
    overrides: Optional[List[GoogleCloudApigeeV1RuntimeTraceConfigOverride]] = Field(default=None, description="List of trace configuration overrides for spicific API proxies.")
    revision_create_time: Optional[StrictStr] = Field(default=None, description="The timestamp that the revision was created or updated.", alias="revisionCreateTime")
    revision_id: Optional[StrictStr] = Field(default=None, description="Revision number which can be used by the runtime to detect if the trace config has changed between two versions.", alias="revisionId")
    sampling_config: Optional[GoogleCloudApigeeV1RuntimeTraceSamplingConfig] = Field(default=None, alias="samplingConfig")
    __properties: ClassVar[List[str]] = ["endpoint", "exporter", "name", "overrides", "revisionCreateTime", "revisionId", "samplingConfig"]

    @field_validator('exporter')
    def exporter_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXPORTER_UNSPECIFIED', 'JAEGER', 'CLOUD_TRACE']):
            raise ValueError("must be one of enum values ('EXPORTER_UNSPECIFIED', 'JAEGER', 'CLOUD_TRACE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1RuntimeTraceConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in overrides (list)
        _items = []
        if self.overrides:
            for _item_overrides in self.overrides:
                if _item_overrides:
                    _items.append(_item_overrides.to_dict())
            _dict['overrides'] = _items
        # override the default output from pydantic by calling `to_dict()` of sampling_config
        if self.sampling_config:
            _dict['samplingConfig'] = self.sampling_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1RuntimeTraceConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endpoint": obj.get("endpoint"),
            "exporter": obj.get("exporter"),
            "name": obj.get("name"),
            "overrides": [GoogleCloudApigeeV1RuntimeTraceConfigOverride.from_dict(_item) for _item in obj["overrides"]] if obj.get("overrides") is not None else None,
            "revisionCreateTime": obj.get("revisionCreateTime"),
            "revisionId": obj.get("revisionId"),
            "samplingConfig": GoogleCloudApigeeV1RuntimeTraceSamplingConfig.from_dict(obj["samplingConfig"]) if obj.get("samplingConfig") is not None else None
        })
        return _obj



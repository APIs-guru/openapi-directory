# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1DebugMask(BaseModel):
    """
    GoogleCloudApigeeV1DebugMask
    """ # noqa: E501
    fault_json_paths: Optional[List[StrictStr]] = Field(default=None, description="List of JSON paths that specify the JSON elements to be filtered from JSON payloads in error flows.", alias="faultJSONPaths")
    fault_x_paths: Optional[List[StrictStr]] = Field(default=None, description="List of XPaths that specify the XML elements to be filtered from XML payloads in error flows.", alias="faultXPaths")
    name: Optional[StrictStr] = Field(default=None, description="Name of the debug mask.")
    namespaces: Optional[Dict[str, StrictStr]] = Field(default=None, description="Map of namespaces to URIs.")
    request_json_paths: Optional[List[StrictStr]] = Field(default=None, description="List of JSON paths that specify the JSON elements to be filtered from JSON request message payloads.", alias="requestJSONPaths")
    request_x_paths: Optional[List[StrictStr]] = Field(default=None, description="List of XPaths that specify the XML elements to be filtered from XML request message payloads.", alias="requestXPaths")
    response_json_paths: Optional[List[StrictStr]] = Field(default=None, description="List of JSON paths that specify the JSON elements to be filtered from JSON response message payloads.", alias="responseJSONPaths")
    response_x_paths: Optional[List[StrictStr]] = Field(default=None, description="List of XPaths that specify the XML elements to be filtered from XML response message payloads.", alias="responseXPaths")
    variables: Optional[List[StrictStr]] = Field(default=None, description="List of variables that should be masked from the debug output.")
    __properties: ClassVar[List[str]] = ["faultJSONPaths", "faultXPaths", "name", "namespaces", "requestJSONPaths", "requestXPaths", "responseJSONPaths", "responseXPaths", "variables"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1DebugMask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1DebugMask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "faultJSONPaths": obj.get("faultJSONPaths"),
            "faultXPaths": obj.get("faultXPaths"),
            "name": obj.get("name"),
            "namespaces": obj.get("namespaces"),
            "requestJSONPaths": obj.get("requestJSONPaths"),
            "requestXPaths": obj.get("requestXPaths"),
            "responseJSONPaths": obj.get("responseJSONPaths"),
            "responseXPaths": obj.get("responseXPaths"),
            "variables": obj.get("variables")
        })
        return _obj



# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_api_product_ref import GoogleCloudApigeeV1ApiProductRef
from openapi_client.models.google_cloud_apigee_v1_attribute import GoogleCloudApigeeV1Attribute
from openapi_client.models.google_cloud_apigee_v1_credential import GoogleCloudApigeeV1Credential
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1App(BaseModel):
    """
    GoogleCloudApigeeV1App
    """ # noqa: E501
    api_products: Optional[List[GoogleCloudApigeeV1ApiProductRef]] = Field(default=None, description="List of API products associated with the app.", alias="apiProducts")
    app_group: Optional[StrictStr] = Field(default=None, description="Name of the AppGroup", alias="appGroup")
    app_id: Optional[StrictStr] = Field(default=None, description="ID of the app.", alias="appId")
    attributes: Optional[List[GoogleCloudApigeeV1Attribute]] = Field(default=None, description="List of attributes.")
    callback_url: Optional[StrictStr] = Field(default=None, description="Callback URL used by OAuth 2.0 authorization servers to communicate authorization codes back to apps.", alias="callbackUrl")
    company_name: Optional[StrictStr] = Field(default=None, description="Name of the company that owns the app.", alias="companyName")
    created_at: Optional[StrictStr] = Field(default=None, description="Output only. Unix time when the app was created.", alias="createdAt")
    credentials: Optional[List[GoogleCloudApigeeV1Credential]] = Field(default=None, description="Output only. Set of credentials for the app. Credentials are API key/secret pairs associated with API products.")
    developer_email: Optional[StrictStr] = Field(default=None, description="Email of the developer.", alias="developerEmail")
    developer_id: Optional[StrictStr] = Field(default=None, description="ID of the developer.", alias="developerId")
    key_expires_in: Optional[StrictStr] = Field(default=None, description="Duration, in milliseconds, of the consumer key that will be generated for the app. The default value, -1, indicates an infinite validity period. Once set, the expiration can't be updated. json key: keyExpiresIn", alias="keyExpiresIn")
    last_modified_at: Optional[StrictStr] = Field(default=None, description="Output only. Last modified time as milliseconds since epoch.", alias="lastModifiedAt")
    name: Optional[StrictStr] = Field(default=None, description="Name of the app.")
    scopes: Optional[List[StrictStr]] = Field(default=None, description="Scopes to apply to the app. The specified scope names must already exist on the API product that you associate with the app.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the credential.")
    __properties: ClassVar[List[str]] = ["apiProducts", "appGroup", "appId", "attributes", "callbackUrl", "companyName", "createdAt", "credentials", "developerEmail", "developerId", "keyExpiresIn", "lastModifiedAt", "name", "scopes", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1App from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "credentials",
            "last_modified_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in api_products (list)
        _items = []
        if self.api_products:
            for _item_api_products in self.api_products:
                if _item_api_products:
                    _items.append(_item_api_products.to_dict())
            _dict['apiProducts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in credentials (list)
        _items = []
        if self.credentials:
            for _item_credentials in self.credentials:
                if _item_credentials:
                    _items.append(_item_credentials.to_dict())
            _dict['credentials'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1App from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiProducts": [GoogleCloudApigeeV1ApiProductRef.from_dict(_item) for _item in obj["apiProducts"]] if obj.get("apiProducts") is not None else None,
            "appGroup": obj.get("appGroup"),
            "appId": obj.get("appId"),
            "attributes": [GoogleCloudApigeeV1Attribute.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "callbackUrl": obj.get("callbackUrl"),
            "companyName": obj.get("companyName"),
            "createdAt": obj.get("createdAt"),
            "credentials": [GoogleCloudApigeeV1Credential.from_dict(_item) for _item in obj["credentials"]] if obj.get("credentials") is not None else None,
            "developerEmail": obj.get("developerEmail"),
            "developerId": obj.get("developerId"),
            "keyExpiresIn": obj.get("keyExpiresIn"),
            "lastModifiedAt": obj.get("lastModifiedAt"),
            "name": obj.get("name"),
            "scopes": obj.get("scopes"),
            "status": obj.get("status")
        })
        return _obj



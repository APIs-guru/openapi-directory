# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_date_range import GoogleCloudApigeeV1DateRange
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1ExportRequest(BaseModel):
    """
    Request body for [CreateExportRequest]
    """ # noqa: E501
    csv_delimiter: Optional[StrictStr] = Field(default=None, description="Optional. Delimiter used in the CSV file, if `outputFormat` is set to `csv`. Defaults to the `,` (comma) character. Supported delimiter characters include comma (`,`), pipe (`|`), and tab (`\\t`).", alias="csvDelimiter")
    datastore_name: Optional[StrictStr] = Field(default=None, description="Required. Name of the preconfigured datastore.", alias="datastoreName")
    date_range: Optional[GoogleCloudApigeeV1DateRange] = Field(default=None, alias="dateRange")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Description of the export job.")
    name: Optional[StrictStr] = Field(default=None, description="Required. Display name of the export job.")
    output_format: Optional[StrictStr] = Field(default=None, description="Optional. Output format of the export. Valid values include: `csv` or `json`. Defaults to `json`. Note: Configure the delimiter for CSV output using the `csvDelimiter` property.", alias="outputFormat")
    __properties: ClassVar[List[str]] = ["csvDelimiter", "datastoreName", "dateRange", "description", "name", "outputFormat"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1ExportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_range
        if self.date_range:
            _dict['dateRange'] = self.date_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1ExportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "csvDelimiter": obj.get("csvDelimiter"),
            "datastoreName": obj.get("datastoreName"),
            "dateRange": GoogleCloudApigeeV1DateRange.from_dict(obj["dateRange"]) if obj.get("dateRange") is not None else None,
            "description": obj.get("description"),
            "name": obj.get("name"),
            "outputFormat": obj.get("outputFormat")
        })
        return _obj



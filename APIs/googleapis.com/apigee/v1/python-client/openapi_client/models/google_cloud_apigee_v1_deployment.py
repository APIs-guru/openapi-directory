# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_deployment_change_report_routing_conflict import GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict
from openapi_client.models.google_cloud_apigee_v1_instance_deployment_status import GoogleCloudApigeeV1InstanceDeploymentStatus
from openapi_client.models.google_cloud_apigee_v1_pod_status import GoogleCloudApigeeV1PodStatus
from openapi_client.models.google_rpc_status import GoogleRpcStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1Deployment(BaseModel):
    """
    GoogleCloudApigeeV1Deployment
    """ # noqa: E501
    api_proxy: Optional[StrictStr] = Field(default=None, description="API proxy.", alias="apiProxy")
    deploy_start_time: Optional[StrictStr] = Field(default=None, description="Time the API proxy was marked `deployed` in the control plane in millisconds since epoch.", alias="deployStartTime")
    environment: Optional[StrictStr] = Field(default=None, description="Environment.")
    errors: Optional[List[GoogleRpcStatus]] = Field(default=None, description="Errors reported for this deployment. Populated only when state == ERROR. **Note**: This field is displayed only when viewing deployment status.")
    instances: Optional[List[GoogleCloudApigeeV1InstanceDeploymentStatus]] = Field(default=None, description="Status reported by each runtime instance. **Note**: This field is displayed only when viewing deployment status.")
    pods: Optional[List[GoogleCloudApigeeV1PodStatus]] = Field(default=None, description="Status reported by runtime pods. **Note**: **This field is deprecated**. Runtime versions 1.3 and above report instance level status rather than pod status.")
    proxy_deployment_type: Optional[StrictStr] = Field(default=None, description="Output only. The type of the deployment (standard or extensible) Deployed proxy revision will be marked as extensible in following 2 cases. 1. The deployed proxy revision uses extensible policies. 2. If a environment supports flowhooks and flow hook is configured.", alias="proxyDeploymentType")
    revision: Optional[StrictStr] = Field(default=None, description="API proxy revision.")
    route_conflicts: Optional[List[GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict]] = Field(default=None, description="Conflicts in the desired state routing configuration. The presence of conflicts does not cause the state to be `ERROR`, but it will mean that some of the deployment's base paths are not routed to its environment. If the conflicts change, the state will transition to `PROGRESSING` until the latest configuration is rolled out to all instances. **Note**: This field is displayed only when viewing deployment status.", alias="routeConflicts")
    service_account: Optional[StrictStr] = Field(default=None, description="The full resource name of Cloud IAM Service Account that this deployment is using, eg, `projects/-/serviceAccounts/{email}`.", alias="serviceAccount")
    state: Optional[StrictStr] = Field(default=None, description="Current state of the deployment. **Note**: This field is displayed only when viewing deployment status.")
    __properties: ClassVar[List[str]] = ["apiProxy", "deployStartTime", "environment", "errors", "instances", "pods", "proxyDeploymentType", "revision", "routeConflicts", "serviceAccount", "state"]

    @field_validator('proxy_deployment_type')
    def proxy_deployment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROXY_DEPLOYMENT_TYPE_UNSPECIFIED', 'STANDARD', 'EXTENSIBLE']):
            raise ValueError("must be one of enum values ('PROXY_DEPLOYMENT_TYPE_UNSPECIFIED', 'STANDARD', 'EXTENSIBLE')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RUNTIME_STATE_UNSPECIFIED', 'READY', 'PROGRESSING', 'ERROR']):
            raise ValueError("must be one of enum values ('RUNTIME_STATE_UNSPECIFIED', 'READY', 'PROGRESSING', 'ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1Deployment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "proxy_deployment_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in instances (list)
        _items = []
        if self.instances:
            for _item_instances in self.instances:
                if _item_instances:
                    _items.append(_item_instances.to_dict())
            _dict['instances'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pods (list)
        _items = []
        if self.pods:
            for _item_pods in self.pods:
                if _item_pods:
                    _items.append(_item_pods.to_dict())
            _dict['pods'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in route_conflicts (list)
        _items = []
        if self.route_conflicts:
            for _item_route_conflicts in self.route_conflicts:
                if _item_route_conflicts:
                    _items.append(_item_route_conflicts.to_dict())
            _dict['routeConflicts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1Deployment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiProxy": obj.get("apiProxy"),
            "deployStartTime": obj.get("deployStartTime"),
            "environment": obj.get("environment"),
            "errors": [GoogleRpcStatus.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "instances": [GoogleCloudApigeeV1InstanceDeploymentStatus.from_dict(_item) for _item in obj["instances"]] if obj.get("instances") is not None else None,
            "pods": [GoogleCloudApigeeV1PodStatus.from_dict(_item) for _item in obj["pods"]] if obj.get("pods") is not None else None,
            "proxyDeploymentType": obj.get("proxyDeploymentType"),
            "revision": obj.get("revision"),
            "routeConflicts": [GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict.from_dict(_item) for _item in obj["routeConflicts"]] if obj.get("routeConflicts") is not None else None,
            "serviceAccount": obj.get("serviceAccount"),
            "state": obj.get("state")
        })
        return _obj



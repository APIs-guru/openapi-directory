# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_deployment_change_report_routing_deployment import GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1DeploymentChangeReportRoutingChange(BaseModel):
    """
    Describes a potential routing change that may occur as a result of some deployment operation.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Human-readable description of this routing change.")
    environment_group: Optional[StrictStr] = Field(default=None, description="Name of the environment group affected by this routing change.", alias="environmentGroup")
    from_deployment: Optional[GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment] = Field(default=None, alias="fromDeployment")
    should_sequence_rollout: Optional[StrictBool] = Field(default=None, description="Set to `true` if using sequenced rollout would make this routing change safer. **Note**: This does not necessarily imply that automated sequenced rollout mode is supported for the operation.", alias="shouldSequenceRollout")
    to_deployment: Optional[GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment] = Field(default=None, alias="toDeployment")
    __properties: ClassVar[List[str]] = ["description", "environmentGroup", "fromDeployment", "shouldSequenceRollout", "toDeployment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1DeploymentChangeReportRoutingChange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of from_deployment
        if self.from_deployment:
            _dict['fromDeployment'] = self.from_deployment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to_deployment
        if self.to_deployment:
            _dict['toDeployment'] = self.to_deployment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1DeploymentChangeReportRoutingChange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "environmentGroup": obj.get("environmentGroup"),
            "fromDeployment": GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment.from_dict(obj["fromDeployment"]) if obj.get("fromDeployment") is not None else None,
            "shouldSequenceRollout": obj.get("shouldSequenceRollout"),
            "toDeployment": GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment.from_dict(obj["toDeployment"]) if obj.get("toDeployment") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1SecurityIncident(BaseModel):
    """
    Represents an SecurityIncident resource.
    """ # noqa: E501
    detection_types: Optional[List[StrictStr]] = Field(default=None, description="Output only. Detection types which are part of the incident. Examples: Flooder, OAuth Abuser, Static Content Scraper, Anomaly Detection.", alias="detectionTypes")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. Display name of the security incident.", alias="displayName")
    first_detected_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when events associated with the incident were first detected.", alias="firstDetectedTime")
    last_detected_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when events associated with the incident were last detected.", alias="lastDetectedTime")
    last_observability_change_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the incident observability was last changed.", alias="lastObservabilityChangeTime")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. Name of the security incident resource. Format: organizations/{org}/environments/{environment}/securityIncidents/{incident} Example: organizations/apigee-org/environments/dev/securityIncidents/1234-5678-9101-1111")
    observability: Optional[StrictStr] = Field(default=None, description="Optional. Indicates if the user archived this incident.")
    risk_level: Optional[StrictStr] = Field(default=None, description="Output only. Risk level of the incident.", alias="riskLevel")
    traffic_count: Optional[StrictStr] = Field(default=None, description="Total traffic detected as part of the incident.", alias="trafficCount")
    __properties: ClassVar[List[str]] = ["detectionTypes", "displayName", "firstDetectedTime", "lastDetectedTime", "lastObservabilityChangeTime", "name", "observability", "riskLevel", "trafficCount"]

    @field_validator('observability')
    def observability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OBSERVABILITY_UNSPECIFIED', 'ACTIVE', 'ARCHIVED']):
            raise ValueError("must be one of enum values ('OBSERVABILITY_UNSPECIFIED', 'ACTIVE', 'ARCHIVED')")
        return value

    @field_validator('risk_level')
    def risk_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RISK_LEVEL_UNSPECIFIED', 'LOW', 'MODERATE', 'SEVERE']):
            raise ValueError("must be one of enum values ('RISK_LEVEL_UNSPECIFIED', 'LOW', 'MODERATE', 'SEVERE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1SecurityIncident from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "detection_types",
            "first_detected_time",
            "last_detected_time",
            "last_observability_change_time",
            "risk_level",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1SecurityIncident from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detectionTypes": obj.get("detectionTypes"),
            "displayName": obj.get("displayName"),
            "firstDetectedTime": obj.get("firstDetectedTime"),
            "lastDetectedTime": obj.get("lastDetectedTime"),
            "lastObservabilityChangeTime": obj.get("lastObservabilityChangeTime"),
            "name": obj.get("name"),
            "observability": obj.get("observability"),
            "riskLevel": obj.get("riskLevel"),
            "trafficCount": obj.get("trafficCount")
        })
        return _obj



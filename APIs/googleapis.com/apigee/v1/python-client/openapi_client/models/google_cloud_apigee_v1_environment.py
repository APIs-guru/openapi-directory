# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_node_config import GoogleCloudApigeeV1NodeConfig
from openapi_client.models.google_cloud_apigee_v1_properties import GoogleCloudApigeeV1Properties
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1Environment(BaseModel):
    """
    GoogleCloudApigeeV1Environment
    """ # noqa: E501
    api_proxy_type: Optional[StrictStr] = Field(default=None, description="Optional. API Proxy type supported by the environment. The type can be set when creating the Environment and cannot be changed.", alias="apiProxyType")
    created_at: Optional[StrictStr] = Field(default=None, description="Output only. Creation time of this environment as milliseconds since epoch.", alias="createdAt")
    deployment_type: Optional[StrictStr] = Field(default=None, description="Optional. Deployment type supported by the environment. The deployment type can be set when creating the environment and cannot be changed. When you enable archive deployment, you will be **prevented from performing** a [subset of actions](/apigee/docs/api-platform/local-development/overview#prevented-actions) within the environment, including: * Managing the deployment of API proxy or shared flow revisions * Creating, updating, or deleting resource files * Creating, updating, or deleting target servers", alias="deploymentType")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Description of the environment.")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. Display name for this environment.", alias="displayName")
    forward_proxy_uri: Optional[StrictStr] = Field(default=None, description="Optional. URI of the forward proxy to be applied to the runtime instances in this environment. Must be in the format of {scheme}://{hostname}:{port}. Note that the scheme must be one of \"http\" or \"https\", and the port must be supplied. To remove a forward proxy setting, update the field to an empty value. Note: At this time, PUT operations to add forwardProxyUri to an existing environment fail if the environment has nodeConfig set up. To successfully add the forwardProxyUri setting in this case, include the NodeConfig details with the request.", alias="forwardProxyUri")
    has_attached_flow_hooks: Optional[StrictBool] = Field(default=None, alias="hasAttachedFlowHooks")
    last_modified_at: Optional[StrictStr] = Field(default=None, description="Output only. Last modification time of this environment as milliseconds since epoch.", alias="lastModifiedAt")
    name: Optional[StrictStr] = Field(default=None, description="Required. Name of the environment. Values must match the regular expression `^[.\\\\p{Alnum}-_]{1,255}$`")
    node_config: Optional[GoogleCloudApigeeV1NodeConfig] = Field(default=None, alias="nodeConfig")
    properties: Optional[GoogleCloudApigeeV1Properties] = None
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the environment. Values other than ACTIVE means the resource is not ready to use.")
    type: Optional[StrictStr] = Field(default=None, description="Optional. EnvironmentType selected for the environment.")
    __properties: ClassVar[List[str]] = ["apiProxyType", "createdAt", "deploymentType", "description", "displayName", "forwardProxyUri", "hasAttachedFlowHooks", "lastModifiedAt", "name", "nodeConfig", "properties", "state", "type"]

    @field_validator('api_proxy_type')
    def api_proxy_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['API_PROXY_TYPE_UNSPECIFIED', 'PROGRAMMABLE', 'CONFIGURABLE']):
            raise ValueError("must be one of enum values ('API_PROXY_TYPE_UNSPECIFIED', 'PROGRAMMABLE', 'CONFIGURABLE')")
        return value

    @field_validator('deployment_type')
    def deployment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEPLOYMENT_TYPE_UNSPECIFIED', 'PROXY', 'ARCHIVE']):
            raise ValueError("must be one of enum values ('DEPLOYMENT_TYPE_UNSPECIFIED', 'PROXY', 'ARCHIVE')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'DELETING', 'UPDATING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'DELETING', 'UPDATING')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENVIRONMENT_TYPE_UNSPECIFIED', 'BASE', 'INTERMEDIATE', 'COMPREHENSIVE']):
            raise ValueError("must be one of enum values ('ENVIRONMENT_TYPE_UNSPECIFIED', 'BASE', 'INTERMEDIATE', 'COMPREHENSIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1Environment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "last_modified_at",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of node_config
        if self.node_config:
            _dict['nodeConfig'] = self.node_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1Environment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiProxyType": obj.get("apiProxyType"),
            "createdAt": obj.get("createdAt"),
            "deploymentType": obj.get("deploymentType"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "forwardProxyUri": obj.get("forwardProxyUri"),
            "hasAttachedFlowHooks": obj.get("hasAttachedFlowHooks"),
            "lastModifiedAt": obj.get("lastModifiedAt"),
            "name": obj.get("name"),
            "nodeConfig": GoogleCloudApigeeV1NodeConfig.from_dict(obj["nodeConfig"]) if obj.get("nodeConfig") is not None else None,
            "properties": GoogleCloudApigeeV1Properties.from_dict(obj["properties"]) if obj.get("properties") is not None else None,
            "state": obj.get("state"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1Export(BaseModel):
    """
    Details of an export job.
    """ # noqa: E501
    created: Optional[StrictStr] = Field(default=None, description="Output only. Time the export job was created.")
    datastore_name: Optional[StrictStr] = Field(default=None, description="Name of the datastore that is the destination of the export job [datastore]", alias="datastoreName")
    description: Optional[StrictStr] = Field(default=None, description="Description of the export job.")
    error: Optional[StrictStr] = Field(default=None, description="Output only. Error is set when export fails")
    execution_time: Optional[StrictStr] = Field(default=None, description="Output only. Execution time for this export job. If the job is still in progress, it will be set to the amount of time that has elapsed since`created`, in seconds. Else, it will set to (`updated` - `created`), in seconds.", alias="executionTime")
    name: Optional[StrictStr] = Field(default=None, description="Display name of the export job.")
    var_self: Optional[StrictStr] = Field(default=None, description="Output only. Self link of the export job. A URI that can be used to retrieve the status of an export job. Example: `/organizations/myorg/environments/myenv/analytics/exports/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd`", alias="self")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Status of the export job. Valid values include `enqueued`, `running`, `completed`, and `failed`.")
    updated: Optional[StrictStr] = Field(default=None, description="Output only. Time the export job was last updated.")
    __properties: ClassVar[List[str]] = ["created", "datastoreName", "description", "error", "executionTime", "name", "self", "state", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1Export from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "error",
            "execution_time",
            "var_self",
            "state",
            "updated",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1Export from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created": obj.get("created"),
            "datastoreName": obj.get("datastoreName"),
            "description": obj.get("description"),
            "error": obj.get("error"),
            "executionTime": obj.get("executionTime"),
            "name": obj.get("name"),
            "self": obj.get("self"),
            "state": obj.get("state"),
            "updated": obj.get("updated")
        })
        return _obj



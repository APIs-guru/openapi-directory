# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_attribute import GoogleCloudApigeeV1Attribute
from openapi_client.models.google_cloud_apigee_v1_credential import GoogleCloudApigeeV1Credential
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1AppGroupApp(BaseModel):
    """
    Response for [GetAppGroupApp].[AppGroupApps.GetAppGroupApp], [CreateAppGroupAppRequest].[AppGroupApp.CreateAppGroupAppRequest] and [DeleteAppGroupApp].[AppGroupApp.DeleteAppGroupApp]
    """ # noqa: E501
    api_products: Optional[List[StrictStr]] = Field(default=None, description="List of API products associated with the AppGroup app.", alias="apiProducts")
    app_group: Optional[StrictStr] = Field(default=None, description="Immutable. Name of the parent AppGroup whose resource name format is of syntax (organizations/*/appgroups/*).", alias="appGroup")
    app_id: Optional[StrictStr] = Field(default=None, description="Immutable. ID of the AppGroup app.", alias="appId")
    attributes: Optional[List[GoogleCloudApigeeV1Attribute]] = Field(default=None, description="List of attributes for the AppGroup app.")
    callback_url: Optional[StrictStr] = Field(default=None, description="Callback URL used by OAuth 2.0 authorization servers to communicate authorization codes back to AppGroup apps.", alias="callbackUrl")
    created_at: Optional[StrictStr] = Field(default=None, description="Output only. Time the AppGroup app was created in milliseconds since epoch.", alias="createdAt")
    credentials: Optional[List[GoogleCloudApigeeV1Credential]] = Field(default=None, description="Output only. Set of credentials for the AppGroup app consisting of the consumer key/secret pairs associated with the API products.")
    key_expires_in: Optional[StrictStr] = Field(default=None, description="Immutable. Expiration time, in seconds, for the consumer key that is generated for the AppGroup app. If not set or left to the default value of `-1`, the API key never expires. The expiration time can't be updated after it is set.", alias="keyExpiresIn")
    last_modified_at: Optional[StrictStr] = Field(default=None, description="Output only. Time the AppGroup app was modified in milliseconds since epoch.", alias="lastModifiedAt")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. Name of the AppGroup app whose resource name format is of syntax (organizations/*/appgroups/*/apps/*).")
    scopes: Optional[List[StrictStr]] = Field(default=None, description="Scopes to apply to the AppGroup app. The specified scopes must already exist for the API product that you associate with the AppGroup app.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the App. Valid values include `approved` or `revoked`.")
    __properties: ClassVar[List[str]] = ["apiProducts", "appGroup", "appId", "attributes", "callbackUrl", "createdAt", "credentials", "keyExpiresIn", "lastModifiedAt", "name", "scopes", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1AppGroupApp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "credentials",
            "last_modified_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in credentials (list)
        _items = []
        if self.credentials:
            for _item_credentials in self.credentials:
                if _item_credentials:
                    _items.append(_item_credentials.to_dict())
            _dict['credentials'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1AppGroupApp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiProducts": obj.get("apiProducts"),
            "appGroup": obj.get("appGroup"),
            "appId": obj.get("appId"),
            "attributes": [GoogleCloudApigeeV1Attribute.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "callbackUrl": obj.get("callbackUrl"),
            "createdAt": obj.get("createdAt"),
            "credentials": [GoogleCloudApigeeV1Credential.from_dict(_item) for _item in obj["credentials"]] if obj.get("credentials") is not None else None,
            "keyExpiresIn": obj.get("keyExpiresIn"),
            "lastModifiedAt": obj.get("lastModifiedAt"),
            "name": obj.get("name"),
            "scopes": obj.get("scopes"),
            "status": obj.get("status")
        })
        return _obj



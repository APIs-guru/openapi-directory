# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1SecurityActionConditionConfig(BaseModel):
    """
    The following are a list of conditions. A valid SecurityAction must contain at least one condition. Within a condition, each element is ORed. Across conditions elements are ANDed. For example if a SecurityAction has the following: ip_address_ranges: [\"ip1\", \"ip2\"] and bot_reasons: [\"Flooder\", \"Robot Abuser\"] then this is interpreted as: enforce the action if the incoming request has ((ip_address_ranges = \"ip1\" OR ip_address_ranges = \"ip2\") AND (bot_reasons=\"Flooder\" OR bot_reasons=\"Robot Abuser\")). Conditions other than ip_address_ranges and bot_reasons cannot be ANDed.
    """ # noqa: E501
    access_tokens: Optional[List[StrictStr]] = Field(default=None, description="Optional. A list of access_tokens. Limit 1000 per action.", alias="accessTokens")
    api_keys: Optional[List[StrictStr]] = Field(default=None, description="Optional. A list of API keys. Limit 1000 per action.", alias="apiKeys")
    api_products: Optional[List[StrictStr]] = Field(default=None, description="Optional. A list of API Products. Limit 1000 per action.", alias="apiProducts")
    bot_reasons: Optional[List[StrictStr]] = Field(default=None, description="Optional. A list of Bot Reasons. Current options: Flooder, Brute Guessor, Static Content Scraper, OAuth Abuser, Robot Abuser, TorListRule, Advanced Anomaly Detection, Advanced API Scraper, Search Engine Crawlers, Public Clouds, Public Cloud AWS, Public Cloud Azure, and Public Cloud Google.", alias="botReasons")
    developer_apps: Optional[List[StrictStr]] = Field(default=None, description="Optional. A list of developer apps. Limit 1000 per action.", alias="developerApps")
    developers: Optional[List[StrictStr]] = Field(default=None, description="Optional. A list of developers. Limit 1000 per action.")
    ip_address_ranges: Optional[List[StrictStr]] = Field(default=None, description="Optional. A list of IP addresses. This could be either IPv4 or IPv6. Limited to 100 per action.", alias="ipAddressRanges")
    user_agents: Optional[List[StrictStr]] = Field(default=None, description="Optional. A list of user agents to deny. We look for exact matches. Limit 50 per action.", alias="userAgents")
    __properties: ClassVar[List[str]] = ["accessTokens", "apiKeys", "apiProducts", "botReasons", "developerApps", "developers", "ipAddressRanges", "userAgents"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1SecurityActionConditionConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1SecurityActionConditionConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessTokens": obj.get("accessTokens"),
            "apiKeys": obj.get("apiKeys"),
            "apiProducts": obj.get("apiProducts"),
            "botReasons": obj.get("botReasons"),
            "developerApps": obj.get("developerApps"),
            "developers": obj.get("developers"),
            "ipAddressRanges": obj.get("ipAddressRanges"),
            "userAgents": obj.get("userAgents")
        })
        return _obj



# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1CertInfo(BaseModel):
    """
    X.509 certificate as defined in RFC 5280.
    """ # noqa: E501
    basic_constraints: Optional[StrictStr] = Field(default=None, description="X.509 basic constraints extension.", alias="basicConstraints")
    expiry_date: Optional[StrictStr] = Field(default=None, description="X.509 `notAfter` validity period in milliseconds since epoch.", alias="expiryDate")
    is_valid: Optional[StrictStr] = Field(default=None, description="Flag that specifies whether the certificate is valid. Flag is set to `Yes` if the certificate is valid, `No` if expired, or `Not yet` if not yet valid.", alias="isValid")
    issuer: Optional[StrictStr] = Field(default=None, description="X.509 issuer.")
    public_key: Optional[StrictStr] = Field(default=None, description="Public key component of the X.509 subject public key info.", alias="publicKey")
    serial_number: Optional[StrictStr] = Field(default=None, description="X.509 serial number.", alias="serialNumber")
    sig_alg_name: Optional[StrictStr] = Field(default=None, description="X.509 signatureAlgorithm.", alias="sigAlgName")
    subject: Optional[StrictStr] = Field(default=None, description="X.509 subject.")
    subject_alternative_names: Optional[List[StrictStr]] = Field(default=None, description="X.509 subject alternative names (SANs) extension.", alias="subjectAlternativeNames")
    valid_from: Optional[StrictStr] = Field(default=None, description="X.509 `notBefore` validity period in milliseconds since epoch.", alias="validFrom")
    version: Optional[StrictInt] = Field(default=None, description="X.509 version.")
    __properties: ClassVar[List[str]] = ["basicConstraints", "expiryDate", "isValid", "issuer", "publicKey", "serialNumber", "sigAlgName", "subject", "subjectAlternativeNames", "validFrom", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1CertInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1CertInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "basicConstraints": obj.get("basicConstraints"),
            "expiryDate": obj.get("expiryDate"),
            "isValid": obj.get("isValid"),
            "issuer": obj.get("issuer"),
            "publicKey": obj.get("publicKey"),
            "serialNumber": obj.get("serialNumber"),
            "sigAlgName": obj.get("sigAlgName"),
            "subject": obj.get("subject"),
            "subjectAlternativeNames": obj.get("subjectAlternativeNames"),
            "validFrom": obj.get("validFrom"),
            "version": obj.get("version")
        })
        return _obj



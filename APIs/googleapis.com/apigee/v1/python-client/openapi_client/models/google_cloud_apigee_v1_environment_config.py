# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_data_collector_config import GoogleCloudApigeeV1DataCollectorConfig
from openapi_client.models.google_cloud_apigee_v1_debug_mask import GoogleCloudApigeeV1DebugMask
from openapi_client.models.google_cloud_apigee_v1_deployment_config import GoogleCloudApigeeV1DeploymentConfig
from openapi_client.models.google_cloud_apigee_v1_deployment_group_config import GoogleCloudApigeeV1DeploymentGroupConfig
from openapi_client.models.google_cloud_apigee_v1_flow_hook_config import GoogleCloudApigeeV1FlowHookConfig
from openapi_client.models.google_cloud_apigee_v1_keystore_config import GoogleCloudApigeeV1KeystoreConfig
from openapi_client.models.google_cloud_apigee_v1_reference_config import GoogleCloudApigeeV1ReferenceConfig
from openapi_client.models.google_cloud_apigee_v1_resource_config import GoogleCloudApigeeV1ResourceConfig
from openapi_client.models.google_cloud_apigee_v1_runtime_addons_config import GoogleCloudApigeeV1RuntimeAddonsConfig
from openapi_client.models.google_cloud_apigee_v1_runtime_trace_config import GoogleCloudApigeeV1RuntimeTraceConfig
from openapi_client.models.google_cloud_apigee_v1_target_server_config import GoogleCloudApigeeV1TargetServerConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1EnvironmentConfig(BaseModel):
    """
    GoogleCloudApigeeV1EnvironmentConfig
    """ # noqa: E501
    addons_config: Optional[GoogleCloudApigeeV1RuntimeAddonsConfig] = Field(default=None, alias="addonsConfig")
    arc_config_location: Optional[StrictStr] = Field(default=None, description="The location for the config blob of API Runtime Control, aka Envoy Adapter, for op-based authentication as a URI, e.g. a Cloud Storage URI. This is only used by Envoy-based gateways.", alias="arcConfigLocation")
    create_time: Optional[StrictStr] = Field(default=None, description="Time that the environment configuration was created.", alias="createTime")
    data_collectors: Optional[List[GoogleCloudApigeeV1DataCollectorConfig]] = Field(default=None, description="List of data collectors used by the deployments in the environment.", alias="dataCollectors")
    debug_mask: Optional[GoogleCloudApigeeV1DebugMask] = Field(default=None, alias="debugMask")
    deployment_groups: Optional[List[GoogleCloudApigeeV1DeploymentGroupConfig]] = Field(default=None, description="List of deployment groups in the environment.", alias="deploymentGroups")
    deployments: Optional[List[GoogleCloudApigeeV1DeploymentConfig]] = Field(default=None, description="List of deployments in the environment.")
    env_scoped_revision_id: Optional[StrictStr] = Field(default=None, description="Revision ID for environment-scoped resources (e.g. target servers, keystores) in this config. This ID will increment any time a resource not scoped to a deployment group changes.", alias="envScopedRevisionId")
    feature_flags: Optional[Dict[str, StrictStr]] = Field(default=None, description="Feature flags inherited from the organization and environment.", alias="featureFlags")
    flowhooks: Optional[List[GoogleCloudApigeeV1FlowHookConfig]] = Field(default=None, description="List of flow hooks in the environment.")
    forward_proxy_uri: Optional[StrictStr] = Field(default=None, description="The forward proxy's url to be used by the runtime. When set, runtime will send requests to the target via the given forward proxy. This is only used by programmable gateways.", alias="forwardProxyUri")
    gateway_config_location: Optional[StrictStr] = Field(default=None, description="The location for the gateway config blob as a URI, e.g. a Cloud Storage URI. This is only used by Envoy-based gateways.", alias="gatewayConfigLocation")
    keystores: Optional[List[GoogleCloudApigeeV1KeystoreConfig]] = Field(default=None, description="List of keystores in the environment.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the environment configuration in the following format: `organizations/{org}/environments/{env}/configs/{config}`")
    provider: Optional[StrictStr] = Field(default=None, description="Used by the Control plane to add context information to help detect the source of the document during diagnostics and debugging.")
    pubsub_topic: Optional[StrictStr] = Field(default=None, description="Name of the PubSub topic for the environment.", alias="pubsubTopic")
    resource_references: Optional[List[GoogleCloudApigeeV1ReferenceConfig]] = Field(default=None, description="List of resource references in the environment.", alias="resourceReferences")
    resources: Optional[List[GoogleCloudApigeeV1ResourceConfig]] = Field(default=None, description="List of resource versions in the environment.")
    revision_id: Optional[StrictStr] = Field(default=None, description="Revision ID of the environment configuration. The higher the value, the more recently the configuration was deployed.", alias="revisionId")
    sequence_number: Optional[StrictStr] = Field(default=None, description="DEPRECATED: Use revision_id.", alias="sequenceNumber")
    targets: Optional[List[GoogleCloudApigeeV1TargetServerConfig]] = Field(default=None, description="List of target servers in the environment. Disabled target servers are not displayed.")
    trace_config: Optional[GoogleCloudApigeeV1RuntimeTraceConfig] = Field(default=None, alias="traceConfig")
    uid: Optional[StrictStr] = Field(default=None, description="Unique ID for the environment configuration. The ID will only change if the environment is deleted and recreated.")
    __properties: ClassVar[List[str]] = ["addonsConfig", "arcConfigLocation", "createTime", "dataCollectors", "debugMask", "deploymentGroups", "deployments", "envScopedRevisionId", "featureFlags", "flowhooks", "forwardProxyUri", "gatewayConfigLocation", "keystores", "name", "provider", "pubsubTopic", "resourceReferences", "resources", "revisionId", "sequenceNumber", "targets", "traceConfig", "uid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1EnvironmentConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of addons_config
        if self.addons_config:
            _dict['addonsConfig'] = self.addons_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in data_collectors (list)
        _items = []
        if self.data_collectors:
            for _item_data_collectors in self.data_collectors:
                if _item_data_collectors:
                    _items.append(_item_data_collectors.to_dict())
            _dict['dataCollectors'] = _items
        # override the default output from pydantic by calling `to_dict()` of debug_mask
        if self.debug_mask:
            _dict['debugMask'] = self.debug_mask.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in deployment_groups (list)
        _items = []
        if self.deployment_groups:
            for _item_deployment_groups in self.deployment_groups:
                if _item_deployment_groups:
                    _items.append(_item_deployment_groups.to_dict())
            _dict['deploymentGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in deployments (list)
        _items = []
        if self.deployments:
            for _item_deployments in self.deployments:
                if _item_deployments:
                    _items.append(_item_deployments.to_dict())
            _dict['deployments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in flowhooks (list)
        _items = []
        if self.flowhooks:
            for _item_flowhooks in self.flowhooks:
                if _item_flowhooks:
                    _items.append(_item_flowhooks.to_dict())
            _dict['flowhooks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in keystores (list)
        _items = []
        if self.keystores:
            for _item_keystores in self.keystores:
                if _item_keystores:
                    _items.append(_item_keystores.to_dict())
            _dict['keystores'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in resource_references (list)
        _items = []
        if self.resource_references:
            for _item_resource_references in self.resource_references:
                if _item_resource_references:
                    _items.append(_item_resource_references.to_dict())
            _dict['resourceReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item_resources in self.resources:
                if _item_resources:
                    _items.append(_item_resources.to_dict())
            _dict['resources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in targets (list)
        _items = []
        if self.targets:
            for _item_targets in self.targets:
                if _item_targets:
                    _items.append(_item_targets.to_dict())
            _dict['targets'] = _items
        # override the default output from pydantic by calling `to_dict()` of trace_config
        if self.trace_config:
            _dict['traceConfig'] = self.trace_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1EnvironmentConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addonsConfig": GoogleCloudApigeeV1RuntimeAddonsConfig.from_dict(obj["addonsConfig"]) if obj.get("addonsConfig") is not None else None,
            "arcConfigLocation": obj.get("arcConfigLocation"),
            "createTime": obj.get("createTime"),
            "dataCollectors": [GoogleCloudApigeeV1DataCollectorConfig.from_dict(_item) for _item in obj["dataCollectors"]] if obj.get("dataCollectors") is not None else None,
            "debugMask": GoogleCloudApigeeV1DebugMask.from_dict(obj["debugMask"]) if obj.get("debugMask") is not None else None,
            "deploymentGroups": [GoogleCloudApigeeV1DeploymentGroupConfig.from_dict(_item) for _item in obj["deploymentGroups"]] if obj.get("deploymentGroups") is not None else None,
            "deployments": [GoogleCloudApigeeV1DeploymentConfig.from_dict(_item) for _item in obj["deployments"]] if obj.get("deployments") is not None else None,
            "envScopedRevisionId": obj.get("envScopedRevisionId"),
            "featureFlags": obj.get("featureFlags"),
            "flowhooks": [GoogleCloudApigeeV1FlowHookConfig.from_dict(_item) for _item in obj["flowhooks"]] if obj.get("flowhooks") is not None else None,
            "forwardProxyUri": obj.get("forwardProxyUri"),
            "gatewayConfigLocation": obj.get("gatewayConfigLocation"),
            "keystores": [GoogleCloudApigeeV1KeystoreConfig.from_dict(_item) for _item in obj["keystores"]] if obj.get("keystores") is not None else None,
            "name": obj.get("name"),
            "provider": obj.get("provider"),
            "pubsubTopic": obj.get("pubsubTopic"),
            "resourceReferences": [GoogleCloudApigeeV1ReferenceConfig.from_dict(_item) for _item in obj["resourceReferences"]] if obj.get("resourceReferences") is not None else None,
            "resources": [GoogleCloudApigeeV1ResourceConfig.from_dict(_item) for _item in obj["resources"]] if obj.get("resources") is not None else None,
            "revisionId": obj.get("revisionId"),
            "sequenceNumber": obj.get("sequenceNumber"),
            "targets": [GoogleCloudApigeeV1TargetServerConfig.from_dict(_item) for _item in obj["targets"]] if obj.get("targets") is not None else None,
            "traceConfig": GoogleCloudApigeeV1RuntimeTraceConfig.from_dict(obj["traceConfig"]) if obj.get("traceConfig") is not None else None,
            "uid": obj.get("uid")
        })
        return _obj



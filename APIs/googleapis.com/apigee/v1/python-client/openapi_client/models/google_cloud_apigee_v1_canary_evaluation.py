# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_canary_evaluation_metric_labels import GoogleCloudApigeeV1CanaryEvaluationMetricLabels
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1CanaryEvaluation(BaseModel):
    """
    CanaryEvaluation represents the canary analysis between two versions of the runtime that is serving requests.
    """ # noqa: E501
    control: Optional[StrictStr] = Field(default=None, description="Required. The stable version that is serving requests.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Create time of the canary evaluation.", alias="createTime")
    end_time: Optional[StrictStr] = Field(default=None, description="Required. End time for the evaluation's analysis.", alias="endTime")
    metric_labels: Optional[GoogleCloudApigeeV1CanaryEvaluationMetricLabels] = Field(default=None, alias="metricLabels")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the canary evalution.")
    start_time: Optional[StrictStr] = Field(default=None, description="Required. Start time for the canary evaluation's analysis.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the canary evaluation.")
    treatment: Optional[StrictStr] = Field(default=None, description="Required. The newer version that is serving requests.")
    verdict: Optional[StrictStr] = Field(default=None, description="Output only. The resulting verdict of the canary evaluations: NONE, PASS, or FAIL.")
    __properties: ClassVar[List[str]] = ["control", "createTime", "endTime", "metricLabels", "name", "startTime", "state", "treatment", "verdict"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'RUNNING', 'SUCCEEDED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'RUNNING', 'SUCCEEDED')")
        return value

    @field_validator('verdict')
    def verdict_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VERDICT_UNSPECIFIED', 'NONE', 'FAIL', 'PASS']):
            raise ValueError("must be one of enum values ('VERDICT_UNSPECIFIED', 'NONE', 'FAIL', 'PASS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1CanaryEvaluation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "state",
            "verdict",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metric_labels
        if self.metric_labels:
            _dict['metricLabels'] = self.metric_labels.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1CanaryEvaluation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "control": obj.get("control"),
            "createTime": obj.get("createTime"),
            "endTime": obj.get("endTime"),
            "metricLabels": GoogleCloudApigeeV1CanaryEvaluationMetricLabels.from_dict(obj["metricLabels"]) if obj.get("metricLabels") is not None else None,
            "name": obj.get("name"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "treatment": obj.get("treatment"),
            "verdict": obj.get("verdict")
        })
        return _obj



# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_security_report_query_metric import GoogleCloudApigeeV1SecurityReportQueryMetric
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1SecurityReportQuery(BaseModel):
    """
    Body structure when user makes a request to create a security report.
    """ # noqa: E501
    csv_delimiter: Optional[StrictStr] = Field(default=None, description="Delimiter used in the CSV file, if `outputFormat` is set to `csv`. Defaults to the `,` (comma) character. Supported delimiter characters include comma (`,`), pipe (`|`), and tab (`\\t`).", alias="csvDelimiter")
    dimensions: Optional[List[StrictStr]] = Field(default=None, description="A list of dimensions. https://docs.apigee.com/api-platform/analytics/analytics-reference#dimensions")
    display_name: Optional[StrictStr] = Field(default=None, description="Security Report display name which users can specify.", alias="displayName")
    envgroup_hostname: Optional[StrictStr] = Field(default=None, description="Hostname needs to be specified if query intends to run at host level. This field is only allowed when query is submitted by CreateHostSecurityReport where analytics data will be grouped by organization and hostname.", alias="envgroupHostname")
    filter: Optional[StrictStr] = Field(default=None, description="Boolean expression that can be used to filter data. Filter expressions can be combined using AND/OR terms and should be fully parenthesized to avoid ambiguity. See Analytics metrics, dimensions, and filters reference https://docs.apigee.com/api-platform/analytics/analytics-reference for more information on the fields available to filter on. For more information on the tokens that you use to build filter expressions, see Filter expression syntax. https://docs.apigee.com/api-platform/analytics/asynch-reports-api#filter-expression-syntax")
    group_by_time_unit: Optional[StrictStr] = Field(default=None, description="Time unit used to group the result set. Valid values include: second, minute, hour, day, week, or month. If a query includes groupByTimeUnit, then the result is an aggregation based on the specified time unit and the resultant timestamp does not include milliseconds precision. If a query omits groupByTimeUnit, then the resultant timestamp includes milliseconds precision.", alias="groupByTimeUnit")
    limit: Optional[StrictInt] = Field(default=None, description="Maximum number of rows that can be returned in the result.")
    metrics: Optional[List[GoogleCloudApigeeV1SecurityReportQueryMetric]] = Field(default=None, description="A list of Metrics.")
    mime_type: Optional[StrictStr] = Field(default=None, description="Valid values include: `csv` or `json`. Defaults to `json`. Note: Configure the delimiter for CSV output using the csvDelimiter property.", alias="mimeType")
    report_definition_id: Optional[StrictStr] = Field(default=None, description="Report Definition ID.", alias="reportDefinitionId")
    time_range: Optional[Any] = Field(default=None, description="Required. Time range for the query. Can use the following predefined strings to specify the time range: `last60minutes` `last24hours` `last7days` Or, specify the timeRange as a structure describing start and end timestamps in the ISO format: yyyy-mm-ddThh:mm:ssZ. Example: \"timeRange\": { \"start\": \"2018-07-29T00:13:00Z\", \"end\": \"2018-08-01T00:18:00Z\" }", alias="timeRange")
    __properties: ClassVar[List[str]] = ["csvDelimiter", "dimensions", "displayName", "envgroupHostname", "filter", "groupByTimeUnit", "limit", "metrics", "mimeType", "reportDefinitionId", "timeRange"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1SecurityReportQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['metrics'] = _items
        # set to None if time_range (nullable) is None
        # and model_fields_set contains the field
        if self.time_range is None and "time_range" in self.model_fields_set:
            _dict['timeRange'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1SecurityReportQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "csvDelimiter": obj.get("csvDelimiter"),
            "dimensions": obj.get("dimensions"),
            "displayName": obj.get("displayName"),
            "envgroupHostname": obj.get("envgroupHostname"),
            "filter": obj.get("filter"),
            "groupByTimeUnit": obj.get("groupByTimeUnit"),
            "limit": obj.get("limit"),
            "metrics": [GoogleCloudApigeeV1SecurityReportQueryMetric.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None,
            "mimeType": obj.get("mimeType"),
            "reportDefinitionId": obj.get("reportDefinitionId"),
            "timeRange": obj.get("timeRange")
        })
        return _obj



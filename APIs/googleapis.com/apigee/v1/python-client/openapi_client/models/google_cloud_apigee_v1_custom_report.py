# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_custom_report_metric import GoogleCloudApigeeV1CustomReportMetric
from openapi_client.models.google_cloud_apigee_v1_report_property import GoogleCloudApigeeV1ReportProperty
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1CustomReport(BaseModel):
    """
    GoogleCloudApigeeV1CustomReport
    """ # noqa: E501
    chart_type: Optional[StrictStr] = Field(default=None, description="This field contains the chart type for the report", alias="chartType")
    comments: Optional[List[StrictStr]] = Field(default=None, description="Legacy field: not used. This field contains a list of comments associated with custom report")
    created_at: Optional[StrictStr] = Field(default=None, description="Output only. Unix time when the app was created json key: createdAt", alias="createdAt")
    dimensions: Optional[List[StrictStr]] = Field(default=None, description="This contains the list of dimensions for the report")
    display_name: Optional[StrictStr] = Field(default=None, description="This is the display name for the report", alias="displayName")
    environment: Optional[StrictStr] = Field(default=None, description="Output only. Environment name")
    filter: Optional[StrictStr] = Field(default=None, description="This field contains the filter expression")
    from_time: Optional[StrictStr] = Field(default=None, description="Legacy field: not used. Contains the from time for the report", alias="fromTime")
    last_modified_at: Optional[StrictStr] = Field(default=None, description="Output only. Modified time of this entity as milliseconds since epoch. json key: lastModifiedAt", alias="lastModifiedAt")
    last_viewed_at: Optional[StrictStr] = Field(default=None, description="Output only. Last viewed time of this entity as milliseconds since epoch", alias="lastViewedAt")
    limit: Optional[StrictStr] = Field(default=None, description="Legacy field: not used This field contains the limit for the result retrieved")
    metrics: Optional[List[GoogleCloudApigeeV1CustomReportMetric]] = Field(default=None, description="Required. This contains the list of metrics")
    name: Optional[StrictStr] = Field(default=None, description="Required. Unique identifier for the report T his is a legacy field used to encode custom report unique id")
    offset: Optional[StrictStr] = Field(default=None, description="Legacy field: not used. This field contains the offset for the data")
    organization: Optional[StrictStr] = Field(default=None, description="Output only. Organization name")
    properties: Optional[List[GoogleCloudApigeeV1ReportProperty]] = Field(default=None, description="This field contains report properties such as ui metadata etc.")
    sort_by_cols: Optional[List[StrictStr]] = Field(default=None, description="Legacy field: not used much. Contains the list of sort by columns", alias="sortByCols")
    sort_order: Optional[StrictStr] = Field(default=None, description="Legacy field: not used much. Contains the sort order for the sort columns", alias="sortOrder")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Legacy field: not used. This field contains a list of tags associated with custom report")
    time_unit: Optional[StrictStr] = Field(default=None, description="This field contains the time unit of aggregation for the report", alias="timeUnit")
    to_time: Optional[StrictStr] = Field(default=None, description="Legacy field: not used. Contains the end time for the report", alias="toTime")
    topk: Optional[StrictStr] = Field(default=None, description="Legacy field: not used. This field contains the top k parameter value for restricting the result")
    __properties: ClassVar[List[str]] = ["chartType", "comments", "createdAt", "dimensions", "displayName", "environment", "filter", "fromTime", "lastModifiedAt", "lastViewedAt", "limit", "metrics", "name", "offset", "organization", "properties", "sortByCols", "sortOrder", "tags", "timeUnit", "toTime", "topk"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1CustomReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "environment",
            "last_modified_at",
            "last_viewed_at",
            "organization",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['metrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in properties (list)
        _items = []
        if self.properties:
            for _item_properties in self.properties:
                if _item_properties:
                    _items.append(_item_properties.to_dict())
            _dict['properties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1CustomReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chartType": obj.get("chartType"),
            "comments": obj.get("comments"),
            "createdAt": obj.get("createdAt"),
            "dimensions": obj.get("dimensions"),
            "displayName": obj.get("displayName"),
            "environment": obj.get("environment"),
            "filter": obj.get("filter"),
            "fromTime": obj.get("fromTime"),
            "lastModifiedAt": obj.get("lastModifiedAt"),
            "lastViewedAt": obj.get("lastViewedAt"),
            "limit": obj.get("limit"),
            "metrics": [GoogleCloudApigeeV1CustomReportMetric.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None,
            "name": obj.get("name"),
            "offset": obj.get("offset"),
            "organization": obj.get("organization"),
            "properties": [GoogleCloudApigeeV1ReportProperty.from_dict(_item) for _item in obj["properties"]] if obj.get("properties") is not None else None,
            "sortByCols": obj.get("sortByCols"),
            "sortOrder": obj.get("sortOrder"),
            "tags": obj.get("tags"),
            "timeUnit": obj.get("timeUnit"),
            "toTime": obj.get("toTime"),
            "topk": obj.get("topk")
        })
        return _obj



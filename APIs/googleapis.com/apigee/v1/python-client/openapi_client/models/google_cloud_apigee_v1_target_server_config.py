# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_tls_info_config import GoogleCloudApigeeV1TlsInfoConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1TargetServerConfig(BaseModel):
    """
    GoogleCloudApigeeV1TargetServerConfig
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=None, description="Whether the target server is enabled. An empty/omitted value for this field should be interpreted as true.")
    host: Optional[StrictStr] = Field(default=None, description="Host name of the target server.")
    name: Optional[StrictStr] = Field(default=None, description="Target server revision name in the following format: `organizations/{org}/environments/{env}/targetservers/{targetserver}/revisions/{rev}`")
    port: Optional[StrictInt] = Field(default=None, description="Port number for the target server.")
    protocol: Optional[StrictStr] = Field(default=None, description="The protocol used by this target server.")
    tls_info: Optional[GoogleCloudApigeeV1TlsInfoConfig] = Field(default=None, alias="tlsInfo")
    __properties: ClassVar[List[str]] = ["enabled", "host", "name", "port", "protocol", "tlsInfo"]

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROTOCOL_UNSPECIFIED', 'HTTP', 'HTTP2', 'GRPC_TARGET', 'GRPC', 'EXTERNAL_CALLOUT']):
            raise ValueError("must be one of enum values ('PROTOCOL_UNSPECIFIED', 'HTTP', 'HTTP2', 'GRPC_TARGET', 'GRPC', 'EXTERNAL_CALLOUT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1TargetServerConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tls_info
        if self.tls_info:
            _dict['tlsInfo'] = self.tls_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1TargetServerConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "host": obj.get("host"),
            "name": obj.get("name"),
            "port": obj.get("port"),
            "protocol": obj.get("protocol"),
            "tlsInfo": GoogleCloudApigeeV1TlsInfoConfig.from_dict(obj["tlsInfo"]) if obj.get("tlsInfo") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_async_query_result import GoogleCloudApigeeV1AsyncQueryResult
from openapi_client.models.google_cloud_apigee_v1_query_metadata import GoogleCloudApigeeV1QueryMetadata
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1AsyncQuery(BaseModel):
    """
    GoogleCloudApigeeV1AsyncQuery
    """ # noqa: E501
    created: Optional[StrictStr] = Field(default=None, description="Creation time of the query.")
    envgroup_hostname: Optional[StrictStr] = Field(default=None, description="Hostname is available only when query is executed at host level.", alias="envgroupHostname")
    error: Optional[StrictStr] = Field(default=None, description="Error is set when query fails.")
    execution_time: Optional[StrictStr] = Field(default=None, description="ExecutionTime is available only after the query is completed.", alias="executionTime")
    name: Optional[StrictStr] = Field(default=None, description="Asynchronous Query Name.")
    var_query_params: Optional[GoogleCloudApigeeV1QueryMetadata] = Field(default=None, alias="queryParams")
    report_definition_id: Optional[StrictStr] = Field(default=None, description="Asynchronous Report ID.", alias="reportDefinitionId")
    result: Optional[GoogleCloudApigeeV1AsyncQueryResult] = None
    result_file_size: Optional[StrictStr] = Field(default=None, description="ResultFileSize is available only after the query is completed.", alias="resultFileSize")
    result_rows: Optional[StrictStr] = Field(default=None, description="ResultRows is available only after the query is completed.", alias="resultRows")
    var_self: Optional[StrictStr] = Field(default=None, description="Self link of the query. Example: `/organizations/myorg/environments/myenv/queries/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd` or following format if query is running at host level: `/organizations/myorg/hostQueries/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd`", alias="self")
    state: Optional[StrictStr] = Field(default=None, description="Query state could be \"enqueued\", \"running\", \"completed\", \"failed\".")
    updated: Optional[StrictStr] = Field(default=None, description="Last updated timestamp for the query.")
    __properties: ClassVar[List[str]] = ["created", "envgroupHostname", "error", "executionTime", "name", "queryParams", "reportDefinitionId", "result", "resultFileSize", "resultRows", "self", "state", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1AsyncQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_query_params
        if self.var_query_params:
            _dict['queryParams'] = self.var_query_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1AsyncQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created": obj.get("created"),
            "envgroupHostname": obj.get("envgroupHostname"),
            "error": obj.get("error"),
            "executionTime": obj.get("executionTime"),
            "name": obj.get("name"),
            "queryParams": GoogleCloudApigeeV1QueryMetadata.from_dict(obj["queryParams"]) if obj.get("queryParams") is not None else None,
            "reportDefinitionId": obj.get("reportDefinitionId"),
            "result": GoogleCloudApigeeV1AsyncQueryResult.from_dict(obj["result"]) if obj.get("result") is not None else None,
            "resultFileSize": obj.get("resultFileSize"),
            "resultRows": obj.get("resultRows"),
            "self": obj.get("self"),
            "state": obj.get("state"),
            "updated": obj.get("updated")
        })
        return _obj



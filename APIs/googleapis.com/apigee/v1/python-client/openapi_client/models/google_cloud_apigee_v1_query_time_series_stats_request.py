# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_metric_aggregation import GoogleCloudApigeeV1MetricAggregation
from openapi_client.models.google_type_interval import GoogleTypeInterval
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1QueryTimeSeriesStatsRequest(BaseModel):
    """
    QueryTimeSeriesStatsRequest represents a query that returns a collection of time series sequences grouped by their values.
    """ # noqa: E501
    dimensions: Optional[List[StrictStr]] = Field(default=None, description="List of dimension names to group the aggregations by. If no dimensions are passed, a single trend line representing the requested metric aggregations grouped by environment is returned.")
    filter: Optional[StrictStr] = Field(default=None, description="Filter further on specific dimension values. Follows the same grammar as custom report's filter expressions. Example, apiproxy eq 'foobar'. https://cloud.google.com/apigee/docs/api-platform/analytics/analytics-reference#filters")
    metrics: Optional[List[GoogleCloudApigeeV1MetricAggregation]] = Field(default=None, description="Required. List of metrics and their aggregations.")
    page_size: Optional[StrictInt] = Field(default=None, description="Page size represents the number of time series sequences, one per unique set of dimensions and their values.", alias="pageSize")
    page_token: Optional[StrictStr] = Field(default=None, description="Page token stands for a specific collection of time series sequences.", alias="pageToken")
    time_range: Optional[GoogleTypeInterval] = Field(default=None, alias="timeRange")
    timestamp_order: Optional[StrictStr] = Field(default=None, description="Order the sequences in increasing or decreasing order of timestamps. Default is descending order of timestamps (latest first).", alias="timestampOrder")
    window_size: Optional[StrictStr] = Field(default=None, description="Time buckets to group the stats by.", alias="windowSize")
    __properties: ClassVar[List[str]] = ["dimensions", "filter", "metrics", "pageSize", "pageToken", "timeRange", "timestampOrder", "windowSize"]

    @field_validator('timestamp_order')
    def timestamp_order_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ORDER_UNSPECIFIED', 'ASCENDING', 'DESCENDING']):
            raise ValueError("must be one of enum values ('ORDER_UNSPECIFIED', 'ASCENDING', 'DESCENDING')")
        return value

    @field_validator('window_size')
    def window_size_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WINDOW_SIZE_UNSPECIFIED', 'MINUTE', 'HOUR', 'DAY', 'MONTH']):
            raise ValueError("must be one of enum values ('WINDOW_SIZE_UNSPECIFIED', 'MINUTE', 'HOUR', 'DAY', 'MONTH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1QueryTimeSeriesStatsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['metrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of time_range
        if self.time_range:
            _dict['timeRange'] = self.time_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1QueryTimeSeriesStatsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dimensions": obj.get("dimensions"),
            "filter": obj.get("filter"),
            "metrics": [GoogleCloudApigeeV1MetricAggregation.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None,
            "pageSize": obj.get("pageSize"),
            "pageToken": obj.get("pageToken"),
            "timeRange": GoogleTypeInterval.from_dict(obj["timeRange"]) if obj.get("timeRange") is not None else None,
            "timestampOrder": obj.get("timestampOrder"),
            "windowSize": obj.get("windowSize")
        })
        return _obj



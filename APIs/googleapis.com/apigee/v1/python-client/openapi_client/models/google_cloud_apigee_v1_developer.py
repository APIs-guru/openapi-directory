# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_attribute import GoogleCloudApigeeV1Attribute
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1Developer(BaseModel):
    """
    GoogleCloudApigeeV1Developer
    """ # noqa: E501
    access_type: Optional[StrictStr] = Field(default=None, description="Access type.", alias="accessType")
    app_family: Optional[StrictStr] = Field(default=None, description="Developer app family.", alias="appFamily")
    apps: Optional[List[StrictStr]] = Field(default=None, description="List of apps associated with the developer.")
    attributes: Optional[List[GoogleCloudApigeeV1Attribute]] = Field(default=None, description="Optional. Developer attributes (name/value pairs). The custom attribute limit is 18.")
    companies: Optional[List[StrictStr]] = Field(default=None, description="List of companies associated with the developer.")
    created_at: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the developer was created in milliseconds since epoch.", alias="createdAt")
    developer_id: Optional[StrictStr] = Field(default=None, description="ID of the developer. **Note**: IDs are generated internally by Apigee and are not guaranteed to stay the same over time.", alias="developerId")
    email: Optional[StrictStr] = Field(default=None, description="Required. Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid. Note that the email address has to be in lowercase only.")
    first_name: Optional[StrictStr] = Field(default=None, description="Required. First name of the developer.", alias="firstName")
    last_modified_at: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the developer was last modified in milliseconds since epoch.", alias="lastModifiedAt")
    last_name: Optional[StrictStr] = Field(default=None, description="Required. Last name of the developer.", alias="lastName")
    organization_name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the Apigee organization in which the developer resides.", alias="organizationName")
    status: Optional[StrictStr] = Field(default=None, description="Output only. Status of the developer. Valid values are `active` and `inactive`.")
    user_name: Optional[StrictStr] = Field(default=None, description="Required. User name of the developer. Not used by Apigee hybrid.", alias="userName")
    __properties: ClassVar[List[str]] = ["accessType", "appFamily", "apps", "attributes", "companies", "createdAt", "developerId", "email", "firstName", "lastModifiedAt", "lastName", "organizationName", "status", "userName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1Developer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "last_modified_at",
            "organization_name",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1Developer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessType": obj.get("accessType"),
            "appFamily": obj.get("appFamily"),
            "apps": obj.get("apps"),
            "attributes": [GoogleCloudApigeeV1Attribute.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "companies": obj.get("companies"),
            "createdAt": obj.get("createdAt"),
            "developerId": obj.get("developerId"),
            "email": obj.get("email"),
            "firstName": obj.get("firstName"),
            "lastModifiedAt": obj.get("lastModifiedAt"),
            "lastName": obj.get("lastName"),
            "organizationName": obj.get("organizationName"),
            "status": obj.get("status"),
            "userName": obj.get("userName")
        })
        return _obj



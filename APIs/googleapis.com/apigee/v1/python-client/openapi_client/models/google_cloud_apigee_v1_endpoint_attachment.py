# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1EndpointAttachment(BaseModel):
    """
    Apigee endpoint attachment. For more information, see [Southbound networking patterns] (https://cloud.google.com/apigee/docs/api-platform/architecture/southbound-networking-patterns-endpoints).
    """ # noqa: E501
    connection_state: Optional[StrictStr] = Field(default=None, description="Output only. State of the endpoint attachment connection to the service attachment.", alias="connectionState")
    host: Optional[StrictStr] = Field(default=None, description="Output only. Host that can be used in either the HTTP target endpoint directly or as the host in target server.")
    location: Optional[StrictStr] = Field(default=None, description="Required. Location of the endpoint attachment.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the endpoint attachment. Use the following structure in your request: `organizations/{org}/endpointAttachments/{endpoint_attachment}`")
    service_attachment: Optional[StrictStr] = Field(default=None, description="Format: projects/*/regions/*/serviceAttachments/*", alias="serviceAttachment")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the endpoint attachment. Values other than `ACTIVE` mean the resource is not ready to use.")
    __properties: ClassVar[List[str]] = ["connectionState", "host", "location", "name", "serviceAttachment", "state"]

    @field_validator('connection_state')
    def connection_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONNECTION_STATE_UNSPECIFIED', 'UNAVAILABLE', 'PENDING', 'ACCEPTED', 'REJECTED', 'CLOSED', 'FROZEN', 'NEEDS_ATTENTION']):
            raise ValueError("must be one of enum values ('CONNECTION_STATE_UNSPECIFIED', 'UNAVAILABLE', 'PENDING', 'ACCEPTED', 'REJECTED', 'CLOSED', 'FROZEN', 'NEEDS_ATTENTION')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'DELETING', 'UPDATING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'DELETING', 'UPDATING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1EndpointAttachment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "connection_state",
            "host",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1EndpointAttachment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectionState": obj.get("connectionState"),
            "host": obj.get("host"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "serviceAttachment": obj.get("serviceAttachment"),
            "state": obj.get("state")
        })
        return _obj



# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_attribute import GoogleCloudApigeeV1Attribute
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1AppGroup(BaseModel):
    """
    AppGroup contains the request/response fields representing the logical grouping of apps. Note that appgroup_id, create_time and update_time cannot be changed by the user, and gets updated by the system. The name and the organization once provided cannot be edited subsequently.
    """ # noqa: E501
    app_group_id: Optional[StrictStr] = Field(default=None, description="Output only. Internal identifier that cannot be edited", alias="appGroupId")
    attributes: Optional[List[GoogleCloudApigeeV1Attribute]] = Field(default=None, description="A list of attributes")
    channel_id: Optional[StrictStr] = Field(default=None, description="channel identifier identifies the owner maintaing this grouping.", alias="channelId")
    channel_uri: Optional[StrictStr] = Field(default=None, description="A reference to the associated storefront/marketplace.", alias="channelUri")
    created_at: Optional[StrictStr] = Field(default=None, description="Output only. Created time as milliseconds since epoch.", alias="createdAt")
    display_name: Optional[StrictStr] = Field(default=None, description="app group name displayed in the UI", alias="displayName")
    last_modified_at: Optional[StrictStr] = Field(default=None, description="Output only. Modified time as milliseconds since epoch.", alias="lastModifiedAt")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. Name of the AppGroup. Characters you can use in the name are restricted to: A-Z0-9._\\-$ %.")
    organization: Optional[StrictStr] = Field(default=None, description="Immutable. the org the app group is created")
    status: Optional[StrictStr] = Field(default=None, description="Valid values are `active` or `inactive`. Note that the status of the AppGroup should be updated via UpdateAppGroupRequest by setting the action as `active` or `inactive`.")
    __properties: ClassVar[List[str]] = ["appGroupId", "attributes", "channelId", "channelUri", "createdAt", "displayName", "lastModifiedAt", "name", "organization", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1AppGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "app_group_id",
            "created_at",
            "last_modified_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1AppGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appGroupId": obj.get("appGroupId"),
            "attributes": [GoogleCloudApigeeV1Attribute.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "channelId": obj.get("channelId"),
            "channelUri": obj.get("channelUri"),
            "createdAt": obj.get("createdAt"),
            "displayName": obj.get("displayName"),
            "lastModifiedAt": obj.get("lastModifiedAt"),
            "name": obj.get("name"),
            "organization": obj.get("organization"),
            "status": obj.get("status")
        })
        return _obj



# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_deployment_change_report_routing_change import GoogleCloudApigeeV1DeploymentChangeReportRoutingChange
from openapi_client.models.google_cloud_apigee_v1_deployment_change_report_routing_conflict import GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict
from openapi_client.models.google_rpc_precondition_failure import GoogleRpcPreconditionFailure
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1DeploymentChangeReport(BaseModel):
    """
    Response for GenerateDeployChangeReport and GenerateUndeployChangeReport. This report contains any validation failures that would cause the deployment to be rejected, as well changes and conflicts in routing that may occur due to the new deployment. The existence of a routing warning does not necessarily imply that the deployment request is bad, if the desired state of the deployment request is to effect a routing change. The primary purposes of the routing messages are: 1) To inform users of routing changes that may have an effect on traffic currently being routed to other existing deployments. 2) To warn users if some base path in the proxy will not receive traffic due to an existing deployment having already claimed that base path. The presence of routing conflicts/changes will not cause non-dry-run DeployApiProxy/UndeployApiProxy requests to be rejected.
    """ # noqa: E501
    routing_changes: Optional[List[GoogleCloudApigeeV1DeploymentChangeReportRoutingChange]] = Field(default=None, description="All routing changes that may result from a deployment request.", alias="routingChanges")
    routing_conflicts: Optional[List[GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict]] = Field(default=None, description="All base path conflicts detected for a deployment request.", alias="routingConflicts")
    validation_errors: Optional[GoogleRpcPreconditionFailure] = Field(default=None, alias="validationErrors")
    __properties: ClassVar[List[str]] = ["routingChanges", "routingConflicts", "validationErrors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1DeploymentChangeReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in routing_changes (list)
        _items = []
        if self.routing_changes:
            for _item_routing_changes in self.routing_changes:
                if _item_routing_changes:
                    _items.append(_item_routing_changes.to_dict())
            _dict['routingChanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in routing_conflicts (list)
        _items = []
        if self.routing_conflicts:
            for _item_routing_conflicts in self.routing_conflicts:
                if _item_routing_conflicts:
                    _items.append(_item_routing_conflicts.to_dict())
            _dict['routingConflicts'] = _items
        # override the default output from pydantic by calling `to_dict()` of validation_errors
        if self.validation_errors:
            _dict['validationErrors'] = self.validation_errors.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1DeploymentChangeReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "routingChanges": [GoogleCloudApigeeV1DeploymentChangeReportRoutingChange.from_dict(_item) for _item in obj["routingChanges"]] if obj.get("routingChanges") is not None else None,
            "routingConflicts": [GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict.from_dict(_item) for _item in obj["routingConflicts"]] if obj.get("routingConflicts") is not None else None,
            "validationErrors": GoogleRpcPreconditionFailure.from_dict(obj["validationErrors"]) if obj.get("validationErrors") is not None else None
        })
        return _obj



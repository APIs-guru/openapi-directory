# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_profile_config import GoogleCloudApigeeV1ProfileConfig
from openapi_client.models.google_cloud_apigee_v1_security_profile_environment import GoogleCloudApigeeV1SecurityProfileEnvironment
from openapi_client.models.google_cloud_apigee_v1_security_profile_scoring_config import GoogleCloudApigeeV1SecurityProfileScoringConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1SecurityProfile(BaseModel):
    """
    Represents a SecurityProfile resource.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Description of the security profile.")
    display_name: Optional[StrictStr] = Field(default=None, description="DEPRECATED: DO NOT USE Display name of the security profile.", alias="displayName")
    environments: Optional[List[GoogleCloudApigeeV1SecurityProfileEnvironment]] = Field(default=None, description="List of environments attached to security profile.")
    max_score: Optional[StrictInt] = Field(default=None, description="Output only. Maximum security score that can be generated by this profile.", alias="maxScore")
    min_score: Optional[StrictInt] = Field(default=None, description="Output only. Minimum security score that can be generated by this profile.", alias="minScore")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. Name of the security profile resource. Format: organizations/{org}/securityProfiles/{profile}")
    profile_config: Optional[GoogleCloudApigeeV1ProfileConfig] = Field(default=None, alias="profileConfig")
    revision_create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when revision was created.", alias="revisionCreateTime")
    revision_id: Optional[StrictStr] = Field(default=None, description="Output only. Revision ID of the security profile.", alias="revisionId")
    revision_publish_time: Optional[StrictStr] = Field(default=None, description="Output only. DEPRECATED: DO NOT USE The time when revision was published. Once published, the security profile revision cannot be updated further and can be attached to environments.", alias="revisionPublishTime")
    revision_update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when revision was updated.", alias="revisionUpdateTime")
    scoring_configs: Optional[List[GoogleCloudApigeeV1SecurityProfileScoringConfig]] = Field(default=None, description="List of profile scoring configs in this revision.", alias="scoringConfigs")
    __properties: ClassVar[List[str]] = ["description", "displayName", "environments", "maxScore", "minScore", "name", "profileConfig", "revisionCreateTime", "revisionId", "revisionPublishTime", "revisionUpdateTime", "scoringConfigs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1SecurityProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "max_score",
            "min_score",
            "revision_create_time",
            "revision_id",
            "revision_publish_time",
            "revision_update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in environments (list)
        _items = []
        if self.environments:
            for _item_environments in self.environments:
                if _item_environments:
                    _items.append(_item_environments.to_dict())
            _dict['environments'] = _items
        # override the default output from pydantic by calling `to_dict()` of profile_config
        if self.profile_config:
            _dict['profileConfig'] = self.profile_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in scoring_configs (list)
        _items = []
        if self.scoring_configs:
            for _item_scoring_configs in self.scoring_configs:
                if _item_scoring_configs:
                    _items.append(_item_scoring_configs.to_dict())
            _dict['scoringConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1SecurityProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "environments": [GoogleCloudApigeeV1SecurityProfileEnvironment.from_dict(_item) for _item in obj["environments"]] if obj.get("environments") is not None else None,
            "maxScore": obj.get("maxScore"),
            "minScore": obj.get("minScore"),
            "name": obj.get("name"),
            "profileConfig": GoogleCloudApigeeV1ProfileConfig.from_dict(obj["profileConfig"]) if obj.get("profileConfig") is not None else None,
            "revisionCreateTime": obj.get("revisionCreateTime"),
            "revisionId": obj.get("revisionId"),
            "revisionPublishTime": obj.get("revisionPublishTime"),
            "revisionUpdateTime": obj.get("revisionUpdateTime"),
            "scoringConfigs": [GoogleCloudApigeeV1SecurityProfileScoringConfig.from_dict(_item) for _item in obj["scoringConfigs"]] if obj.get("scoringConfigs") is not None else None
        })
        return _obj



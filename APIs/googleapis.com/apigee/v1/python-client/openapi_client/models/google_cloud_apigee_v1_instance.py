# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1Instance(BaseModel):
    """
    Apigee runtime instance.
    """ # noqa: E501
    consumer_accept_list: Optional[List[StrictStr]] = Field(default=None, description="Optional. Customer accept list represents the list of projects (id/number) on customer side that can privately connect to the service attachment. It is an optional field which the customers can provide during the instance creation. By default, the customer project associated with the Apigee organization will be included to the list.", alias="consumerAcceptList")
    created_at: Optional[StrictStr] = Field(default=None, description="Output only. Time the instance was created in milliseconds since epoch.", alias="createdAt")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Description of the instance.")
    disk_encryption_key_name: Optional[StrictStr] = Field(default=None, description="Customer Managed Encryption Key (CMEK) used for disk and volume encryption. Required for Apigee paid subscriptions only. Use the following format: `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`", alias="diskEncryptionKeyName")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. Display name for the instance.", alias="displayName")
    host: Optional[StrictStr] = Field(default=None, description="Output only. Internal hostname or IP address of the Apigee endpoint used by clients to connect to the service.")
    ip_range: Optional[StrictStr] = Field(default=None, description="Optional. Comma-separated list of CIDR blocks of length 22 and/or 28 used to create the Apigee instance. Providing CIDR ranges is optional. You can provide just /22 or /28 or both (or neither). Ranges you provide should be freely available as part of a larger named range you have allocated to the Service Networking peering. If this parameter is not provided, Apigee automatically requests an available /22 and /28 CIDR block from Service Networking. Use the /22 CIDR block for configuring your firewall needs to allow traffic from Apigee. Input formats: `a.b.c.d/22` or `e.f.g.h/28` or `a.b.c.d/22,e.f.g.h/28`", alias="ipRange")
    last_modified_at: Optional[StrictStr] = Field(default=None, description="Output only. Time the instance was last modified in milliseconds since epoch.", alias="lastModifiedAt")
    location: Optional[StrictStr] = Field(default=None, description="Required. Compute Engine location where the instance resides.")
    name: Optional[StrictStr] = Field(default=None, description="Required. Resource ID of the instance. Values must match the regular expression `^a-z{0,30}[a-z\\d]$`.")
    peering_cidr_range: Optional[StrictStr] = Field(default=None, description="Optional. Size of the CIDR block range that will be reserved by the instance. PAID organizations support `SLASH_16` to `SLASH_20` and defaults to `SLASH_16`. Evaluation organizations support only `SLASH_23`.", alias="peeringCidrRange")
    port: Optional[StrictStr] = Field(default=None, description="Output only. Port number of the exposed Apigee endpoint.")
    runtime_version: Optional[StrictStr] = Field(default=None, description="Output only. Version of the runtime system running in the instance. The runtime system is the set of components that serve the API Proxy traffic in your Environments.", alias="runtimeVersion")
    service_attachment: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the service attachment created for the instance in the format: `projects/*/regions/*/serviceAttachments/*` Apigee customers can privately forward traffic to this service attachment using the PSC endpoints.", alias="serviceAttachment")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the instance. Values other than `ACTIVE` means the resource is not ready to use.")
    __properties: ClassVar[List[str]] = ["consumerAcceptList", "createdAt", "description", "diskEncryptionKeyName", "displayName", "host", "ipRange", "lastModifiedAt", "location", "name", "peeringCidrRange", "port", "runtimeVersion", "serviceAttachment", "state"]

    @field_validator('peering_cidr_range')
    def peering_cidr_range_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CIDR_RANGE_UNSPECIFIED', 'SLASH_16', 'SLASH_17', 'SLASH_18', 'SLASH_19', 'SLASH_20', 'SLASH_22', 'SLASH_23']):
            raise ValueError("must be one of enum values ('CIDR_RANGE_UNSPECIFIED', 'SLASH_16', 'SLASH_17', 'SLASH_18', 'SLASH_19', 'SLASH_20', 'SLASH_22', 'SLASH_23')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'DELETING', 'UPDATING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'DELETING', 'UPDATING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1Instance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "host",
            "last_modified_at",
            "port",
            "runtime_version",
            "service_attachment",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1Instance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consumerAcceptList": obj.get("consumerAcceptList"),
            "createdAt": obj.get("createdAt"),
            "description": obj.get("description"),
            "diskEncryptionKeyName": obj.get("diskEncryptionKeyName"),
            "displayName": obj.get("displayName"),
            "host": obj.get("host"),
            "ipRange": obj.get("ipRange"),
            "lastModifiedAt": obj.get("lastModifiedAt"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "peeringCidrRange": obj.get("peeringCidrRange"),
            "port": obj.get("port"),
            "runtimeVersion": obj.get("runtimeVersion"),
            "serviceAttachment": obj.get("serviceAttachment"),
            "state": obj.get("state")
        })
        return _obj



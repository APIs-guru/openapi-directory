# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_rate_range import GoogleCloudApigeeV1RateRange
from openapi_client.models.google_cloud_apigee_v1_revenue_share_range import GoogleCloudApigeeV1RevenueShareRange
from openapi_client.models.google_type_money import GoogleTypeMoney
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1RatePlan(BaseModel):
    """
    Rate plan details.
    """ # noqa: E501
    apiproduct: Optional[StrictStr] = Field(default=None, description="Name of the API product that the rate plan is associated with.")
    billing_period: Optional[StrictStr] = Field(default=None, description="Frequency at which the customer will be billed.", alias="billingPeriod")
    consumption_pricing_rates: Optional[List[GoogleCloudApigeeV1RateRange]] = Field(default=None, description="API call volume ranges and the fees charged when the total number of API calls is within a given range. The method used to calculate the final fee depends on the selected pricing model. For example, if the pricing model is `STAIRSTEP` and the ranges are defined as follows: ``` { \"start\": 1, \"end\": 100, \"fee\": 75 }, { \"start\": 101, \"end\": 200, \"fee\": 100 }, } ``` Then the following fees would be charged based on the total number of API calls (assuming the currency selected is `USD`): * 1 call costs $75 * 50 calls cost $75 * 150 calls cost $100 The number of API calls cannot exceed 200.", alias="consumptionPricingRates")
    consumption_pricing_type: Optional[StrictStr] = Field(default=None, description="Pricing model used for consumption-based charges.", alias="consumptionPricingType")
    created_at: Optional[StrictStr] = Field(default=None, description="Output only. Time that the rate plan was created in milliseconds since epoch.", alias="createdAt")
    currency_code: Optional[StrictStr] = Field(default=None, description="Currency to be used for billing. Consists of a three-letter code as defined by the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) standard.", alias="currencyCode")
    description: Optional[StrictStr] = Field(default=None, description="Description of the rate plan.")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name of the rate plan.", alias="displayName")
    end_time: Optional[StrictStr] = Field(default=None, description="Time when the rate plan will expire in milliseconds since epoch. Set to 0 or `null` to indicate that the rate plan should never expire.", alias="endTime")
    fixed_fee_frequency: Optional[StrictInt] = Field(default=None, description="Frequency at which the fixed fee is charged.", alias="fixedFeeFrequency")
    fixed_recurring_fee: Optional[GoogleTypeMoney] = Field(default=None, alias="fixedRecurringFee")
    last_modified_at: Optional[StrictStr] = Field(default=None, description="Output only. Time the rate plan was last modified in milliseconds since epoch.", alias="lastModifiedAt")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the rate plan.")
    payment_funding_model: Optional[StrictStr] = Field(default=None, description="DEPRECATED: This field is no longer supported and will eventually be removed when Apigee Hybrid 1.5/1.6 is no longer supported. Instead, use the `billingType` field inside `DeveloperMonetizationConfig` resource. Flag that specifies the billing account type, prepaid or postpaid.", alias="paymentFundingModel")
    revenue_share_rates: Optional[List[GoogleCloudApigeeV1RevenueShareRange]] = Field(default=None, description="Details of the revenue sharing model.", alias="revenueShareRates")
    revenue_share_type: Optional[StrictStr] = Field(default=None, description="Method used to calculate the revenue that is shared with developers.", alias="revenueShareType")
    setup_fee: Optional[GoogleTypeMoney] = Field(default=None, alias="setupFee")
    start_time: Optional[StrictStr] = Field(default=None, description="Time when the rate plan becomes active in milliseconds since epoch.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Current state of the rate plan (draft or published).")
    __properties: ClassVar[List[str]] = ["apiproduct", "billingPeriod", "consumptionPricingRates", "consumptionPricingType", "createdAt", "currencyCode", "description", "displayName", "endTime", "fixedFeeFrequency", "fixedRecurringFee", "lastModifiedAt", "name", "paymentFundingModel", "revenueShareRates", "revenueShareType", "setupFee", "startTime", "state"]

    @field_validator('billing_period')
    def billing_period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BILLING_PERIOD_UNSPECIFIED', 'WEEKLY', 'MONTHLY']):
            raise ValueError("must be one of enum values ('BILLING_PERIOD_UNSPECIFIED', 'WEEKLY', 'MONTHLY')")
        return value

    @field_validator('consumption_pricing_type')
    def consumption_pricing_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONSUMPTION_PRICING_TYPE_UNSPECIFIED', 'FIXED_PER_UNIT', 'BANDED', 'TIERED', 'STAIRSTEP']):
            raise ValueError("must be one of enum values ('CONSUMPTION_PRICING_TYPE_UNSPECIFIED', 'FIXED_PER_UNIT', 'BANDED', 'TIERED', 'STAIRSTEP')")
        return value

    @field_validator('payment_funding_model')
    def payment_funding_model_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PAYMENT_FUNDING_MODEL_UNSPECIFIED', 'PREPAID', 'POSTPAID']):
            raise ValueError("must be one of enum values ('PAYMENT_FUNDING_MODEL_UNSPECIFIED', 'PREPAID', 'POSTPAID')")
        return value

    @field_validator('revenue_share_type')
    def revenue_share_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REVENUE_SHARE_TYPE_UNSPECIFIED', 'FIXED', 'VOLUME_BANDED']):
            raise ValueError("must be one of enum values ('REVENUE_SHARE_TYPE_UNSPECIFIED', 'FIXED', 'VOLUME_BANDED')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'DRAFT', 'PUBLISHED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'DRAFT', 'PUBLISHED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1RatePlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "last_modified_at",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in consumption_pricing_rates (list)
        _items = []
        if self.consumption_pricing_rates:
            for _item_consumption_pricing_rates in self.consumption_pricing_rates:
                if _item_consumption_pricing_rates:
                    _items.append(_item_consumption_pricing_rates.to_dict())
            _dict['consumptionPricingRates'] = _items
        # override the default output from pydantic by calling `to_dict()` of fixed_recurring_fee
        if self.fixed_recurring_fee:
            _dict['fixedRecurringFee'] = self.fixed_recurring_fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in revenue_share_rates (list)
        _items = []
        if self.revenue_share_rates:
            for _item_revenue_share_rates in self.revenue_share_rates:
                if _item_revenue_share_rates:
                    _items.append(_item_revenue_share_rates.to_dict())
            _dict['revenueShareRates'] = _items
        # override the default output from pydantic by calling `to_dict()` of setup_fee
        if self.setup_fee:
            _dict['setupFee'] = self.setup_fee.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1RatePlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiproduct": obj.get("apiproduct"),
            "billingPeriod": obj.get("billingPeriod"),
            "consumptionPricingRates": [GoogleCloudApigeeV1RateRange.from_dict(_item) for _item in obj["consumptionPricingRates"]] if obj.get("consumptionPricingRates") is not None else None,
            "consumptionPricingType": obj.get("consumptionPricingType"),
            "createdAt": obj.get("createdAt"),
            "currencyCode": obj.get("currencyCode"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "endTime": obj.get("endTime"),
            "fixedFeeFrequency": obj.get("fixedFeeFrequency"),
            "fixedRecurringFee": GoogleTypeMoney.from_dict(obj["fixedRecurringFee"]) if obj.get("fixedRecurringFee") is not None else None,
            "lastModifiedAt": obj.get("lastModifiedAt"),
            "name": obj.get("name"),
            "paymentFundingModel": obj.get("paymentFundingModel"),
            "revenueShareRates": [GoogleCloudApigeeV1RevenueShareRange.from_dict(_item) for _item in obj["revenueShareRates"]] if obj.get("revenueShareRates") is not None else None,
            "revenueShareType": obj.get("revenueShareType"),
            "setupFee": GoogleTypeMoney.from_dict(obj["setupFee"]) if obj.get("setupFee") is not None else None,
            "startTime": obj.get("startTime"),
            "state": obj.get("state")
        })
        return _obj



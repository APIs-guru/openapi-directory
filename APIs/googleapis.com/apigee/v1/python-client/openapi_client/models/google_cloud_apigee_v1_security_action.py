# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_apigee_v1_security_action_condition_config import GoogleCloudApigeeV1SecurityActionConditionConfig
from openapi_client.models.google_cloud_apigee_v1_security_action_deny import GoogleCloudApigeeV1SecurityActionDeny
from openapi_client.models.google_cloud_apigee_v1_security_action_flag import GoogleCloudApigeeV1SecurityActionFlag
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudApigeeV1SecurityAction(BaseModel):
    """
    A SecurityAction is rule that can be enforced at an environment level. The result is one of: - A denied API call - An explicitly allowed API call - A flagged API call (HTTP headers added before the target receives it) At least one condition is required to create a SecurityAction.
    """ # noqa: E501
    allow: Optional[Dict[str, Any]] = Field(default=None, description="Message that should be set in case of an Allow Action. This does not have any fields.")
    condition_config: Optional[GoogleCloudApigeeV1SecurityActionConditionConfig] = Field(default=None, alias="conditionConfig")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The create time for this SecurityAction.", alias="createTime")
    deny: Optional[GoogleCloudApigeeV1SecurityActionDeny] = None
    description: Optional[StrictStr] = Field(default=None, description="Optional. An optional user provided description of the SecurityAction.")
    expire_time: Optional[StrictStr] = Field(default=None, description="The expiration for this SecurityAction.", alias="expireTime")
    flag: Optional[GoogleCloudApigeeV1SecurityActionFlag] = None
    name: Optional[StrictStr] = Field(default=None, description="Immutable. This field is ignored during creation as per AIP-133. Please set the `security_action_id` field in the CreateSecurityActionRequest when creating a new SecurityAction. Format: organizations/{org}/environments/{env}/securityActions/{security_action}")
    state: Optional[StrictStr] = Field(default=None, description="Required. Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.")
    ttl: Optional[StrictStr] = Field(default=None, description="Input only. The TTL for this SecurityAction.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The update time for this SecurityAction. This reflects when this SecurityAction changed states.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["allow", "conditionConfig", "createTime", "deny", "description", "expireTime", "flag", "name", "state", "ttl", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ENABLED', 'DISABLED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ENABLED', 'DISABLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1SecurityAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of condition_config
        if self.condition_config:
            _dict['conditionConfig'] = self.condition_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deny
        if self.deny:
            _dict['deny'] = self.deny.to_dict()
        # override the default output from pydantic by calling `to_dict()` of flag
        if self.flag:
            _dict['flag'] = self.flag.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudApigeeV1SecurityAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow": obj.get("allow"),
            "conditionConfig": GoogleCloudApigeeV1SecurityActionConditionConfig.from_dict(obj["conditionConfig"]) if obj.get("conditionConfig") is not None else None,
            "createTime": obj.get("createTime"),
            "deny": GoogleCloudApigeeV1SecurityActionDeny.from_dict(obj["deny"]) if obj.get("deny") is not None else None,
            "description": obj.get("description"),
            "expireTime": obj.get("expireTime"),
            "flag": GoogleCloudApigeeV1SecurityActionFlag.from_dict(obj["flag"]) if obj.get("flag") is not None else None,
            "name": obj.get("name"),
            "state": obj.get("state"),
            "ttl": obj.get("ttl"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



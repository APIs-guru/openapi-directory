# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_apigee_v1_trace_config_override import GoogleCloudApigeeV1TraceConfigOverride

class TestGoogleCloudApigeeV1TraceConfigOverride(unittest.TestCase):
    """GoogleCloudApigeeV1TraceConfigOverride unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudApigeeV1TraceConfigOverride:
        """Test GoogleCloudApigeeV1TraceConfigOverride
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudApigeeV1TraceConfigOverride`
        """
        model = GoogleCloudApigeeV1TraceConfigOverride()
        if include_optional:
            return GoogleCloudApigeeV1TraceConfigOverride(
                api_proxy = '',
                name = '',
                sampling_config = openapi_client.models.google_cloud_apigee_v1_trace_sampling_config.GoogleCloudApigeeV1TraceSamplingConfig(
                    sampler = 'SAMPLER_UNSPECIFIED', 
                    sampling_rate = 1.337, )
            )
        else:
            return GoogleCloudApigeeV1TraceConfigOverride(
        )
        """

    def testGoogleCloudApigeeV1TraceConfigOverride(self):
        """Test GoogleCloudApigeeV1TraceConfigOverride"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

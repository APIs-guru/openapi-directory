# coding: utf-8

"""
    Apigee API

    Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_apigee_v1_deployment_change_report import GoogleCloudApigeeV1DeploymentChangeReport

class TestGoogleCloudApigeeV1DeploymentChangeReport(unittest.TestCase):
    """GoogleCloudApigeeV1DeploymentChangeReport unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudApigeeV1DeploymentChangeReport:
        """Test GoogleCloudApigeeV1DeploymentChangeReport
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudApigeeV1DeploymentChangeReport`
        """
        model = GoogleCloudApigeeV1DeploymentChangeReport()
        if include_optional:
            return GoogleCloudApigeeV1DeploymentChangeReport(
                routing_changes = [
                    openapi_client.models.google_cloud_apigee_v1_deployment_change_report_routing_change.GoogleCloudApigeeV1DeploymentChangeReportRoutingChange(
                        description = '', 
                        environment_group = '', 
                        from_deployment = openapi_client.models.google_cloud_apigee_v1_deployment_change_report_routing_deployment.GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment(
                            api_proxy = '', 
                            basepath = '', 
                            environment = '', 
                            revision = '', ), 
                        should_sequence_rollout = True, 
                        to_deployment = openapi_client.models.google_cloud_apigee_v1_deployment_change_report_routing_deployment.GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment(
                            api_proxy = '', 
                            basepath = '', 
                            environment = '', 
                            revision = '', ), )
                    ],
                routing_conflicts = [
                    openapi_client.models.google_cloud_apigee_v1_deployment_change_report_routing_conflict.GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict(
                        conflicting_deployment = openapi_client.models.google_cloud_apigee_v1_deployment_change_report_routing_deployment.GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment(
                            api_proxy = '', 
                            basepath = '', 
                            environment = '', 
                            revision = '', ), 
                        description = '', 
                        environment_group = '', )
                    ],
                validation_errors = openapi_client.models.google_rpc_precondition_failure.GoogleRpcPreconditionFailure(
                    violations = [
                        openapi_client.models.google_rpc_precondition_failure_violation.GoogleRpcPreconditionFailureViolation(
                            description = '', 
                            subject = '', 
                            type = '', )
                        ], )
            )
        else:
            return GoogleCloudApigeeV1DeploymentChangeReport(
        )
        """

    def testGoogleCloudApigeeV1DeploymentChangeReport(self):
        """Test GoogleCloudApigeeV1DeploymentChangeReport"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

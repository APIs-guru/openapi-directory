# coding: utf-8

"""
    Rapid Migration Assessment API

    The Rapid Migration Assessment service is our first-party migration assessment and planning tool.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.guest_os_scan import GuestOsScan
from openapi_client.models.v_sphere_scan import VSphereScan
from typing import Optional, Set
from typing_extensions import Self

class Collector(BaseModel):
    """
    Message describing Collector object.
    """ # noqa: E501
    bucket: Optional[StrictStr] = Field(default=None, description="Output only. Store cloud storage bucket name (which is a guid) created with this Collector.")
    client_version: Optional[StrictStr] = Field(default=None, description="Output only. Client version.", alias="clientVersion")
    collection_days: Optional[StrictInt] = Field(default=None, description="How many days to collect data.", alias="collectionDays")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Create time stamp.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="User specified description of the Collector.")
    display_name: Optional[StrictStr] = Field(default=None, description="User specified name of the Collector.", alias="displayName")
    eula_uri: Optional[StrictStr] = Field(default=None, description="Uri for EULA (End User License Agreement) from customer.", alias="eulaUri")
    expected_asset_count: Optional[StrictStr] = Field(default=None, description="User specified expected asset count.", alias="expectedAssetCount")
    guest_os_scan: Optional[GuestOsScan] = Field(default=None, alias="guestOsScan")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels as key value pairs.")
    name: Optional[StrictStr] = Field(default=None, description="name of resource.")
    service_account: Optional[StrictStr] = Field(default=None, description="Service Account email used to ingest data to this Collector.", alias="serviceAccount")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the Collector.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Update time stamp.", alias="updateTime")
    vsphere_scan: Optional[VSphereScan] = Field(default=None, alias="vsphereScan")
    __properties: ClassVar[List[str]] = ["bucket", "clientVersion", "collectionDays", "createTime", "description", "displayName", "eulaUri", "expectedAssetCount", "guestOsScan", "labels", "name", "serviceAccount", "state", "updateTime", "vsphereScan"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'STATE_INITIALIZING', 'STATE_READY_TO_USE', 'STATE_REGISTERED', 'STATE_ACTIVE', 'STATE_PAUSED', 'STATE_DELETING', 'STATE_DECOMMISSIONED', 'STATE_ERROR']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'STATE_INITIALIZING', 'STATE_READY_TO_USE', 'STATE_REGISTERED', 'STATE_ACTIVE', 'STATE_PAUSED', 'STATE_DELETING', 'STATE_DECOMMISSIONED', 'STATE_ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Collector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "bucket",
            "client_version",
            "create_time",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of guest_os_scan
        if self.guest_os_scan:
            _dict['guestOsScan'] = self.guest_os_scan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vsphere_scan
        if self.vsphere_scan:
            _dict['vsphereScan'] = self.vsphere_scan.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Collector from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bucket": obj.get("bucket"),
            "clientVersion": obj.get("clientVersion"),
            "collectionDays": obj.get("collectionDays"),
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "eulaUri": obj.get("eulaUri"),
            "expectedAssetCount": obj.get("expectedAssetCount"),
            "guestOsScan": GuestOsScan.from_dict(obj["guestOsScan"]) if obj.get("guestOsScan") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "serviceAccount": obj.get("serviceAccount"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime"),
            "vsphereScan": VSphereScan.from_dict(obj["vsphereScan"]) if obj.get("vsphereScan") is not None else None
        })
        return _obj



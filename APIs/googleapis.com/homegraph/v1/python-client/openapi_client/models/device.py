# coding: utf-8

"""
    HomeGraph API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.agent_other_device_id import AgentOtherDeviceId
from openapi_client.models.device_info import DeviceInfo
from openapi_client.models.device_names import DeviceNames
from typing import Optional, Set
from typing_extensions import Self

class Device(BaseModel):
    """
    Third-party device definition.
    """ # noqa: E501
    attributes: Optional[Dict[str, Any]] = Field(default=None, description="Attributes for the traits supported by the device.")
    custom_data: Optional[Dict[str, Any]] = Field(default=None, description="Custom device attributes stored in Home Graph and provided to your smart home Action in each [QUERY](https://developers.home.google.com/cloud-to-cloud/intents/query) and [EXECUTE](https://developers.home.google.com/cloud-to-cloud/intents/execute) intent. Data in this object has a few constraints: No sensitive information, including but not limited to Personally Identifiable Information.", alias="customData")
    device_info: Optional[DeviceInfo] = Field(default=None, alias="deviceInfo")
    id: Optional[StrictStr] = Field(default=None, description="Third-party device ID.")
    name: Optional[DeviceNames] = None
    notification_supported_by_agent: Optional[StrictBool] = Field(default=None, description="Indicates whether your smart home Action will report notifications to Google for this device via ReportStateAndNotification. If your smart home Action enables users to control device notifications, you should update this field and call RequestSyncDevices.", alias="notificationSupportedByAgent")
    other_device_ids: Optional[List[AgentOtherDeviceId]] = Field(default=None, description="Alternate IDs associated with this device. This is used to identify cloud synced devices enabled for [local fulfillment](https://developers.home.google.com/local-home/overview).", alias="otherDeviceIds")
    room_hint: Optional[StrictStr] = Field(default=None, description="Suggested name for the room where this device is installed. Google attempts to use this value during user setup.", alias="roomHint")
    structure_hint: Optional[StrictStr] = Field(default=None, description="Suggested name for the structure where this device is installed. Google attempts to use this value during user setup.", alias="structureHint")
    traits: Optional[List[StrictStr]] = Field(default=None, description="Traits supported by the device. See [device traits](https://developers.home.google.com/cloud-to-cloud/traits).")
    type: Optional[StrictStr] = Field(default=None, description="Hardware type of the device. See [device types](https://developers.home.google.com/cloud-to-cloud/guides).")
    will_report_state: Optional[StrictBool] = Field(default=None, description="Indicates whether your smart home Action will report state of this device to Google via ReportStateAndNotification.", alias="willReportState")
    __properties: ClassVar[List[str]] = ["attributes", "customData", "deviceInfo", "id", "name", "notificationSupportedByAgent", "otherDeviceIds", "roomHint", "structureHint", "traits", "type", "willReportState"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Device from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of device_info
        if self.device_info:
            _dict['deviceInfo'] = self.device_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in other_device_ids (list)
        _items = []
        if self.other_device_ids:
            for _item_other_device_ids in self.other_device_ids:
                if _item_other_device_ids:
                    _items.append(_item_other_device_ids.to_dict())
            _dict['otherDeviceIds'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Device from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": obj.get("attributes"),
            "customData": obj.get("customData"),
            "deviceInfo": DeviceInfo.from_dict(obj["deviceInfo"]) if obj.get("deviceInfo") is not None else None,
            "id": obj.get("id"),
            "name": DeviceNames.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "notificationSupportedByAgent": obj.get("notificationSupportedByAgent"),
            "otherDeviceIds": [AgentOtherDeviceId.from_dict(_item) for _item in obj["otherDeviceIds"]] if obj.get("otherDeviceIds") is not None else None,
            "roomHint": obj.get("roomHint"),
            "structureHint": obj.get("structureHint"),
            "traits": obj.get("traits"),
            "type": obj.get("type"),
            "willReportState": obj.get("willReportState")
        })
        return _obj



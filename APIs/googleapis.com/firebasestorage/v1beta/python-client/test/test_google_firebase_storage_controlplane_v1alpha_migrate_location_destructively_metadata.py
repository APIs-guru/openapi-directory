# coding: utf-8

"""
    Cloud Storage for Firebase API

    The Cloud Storage for Firebase API enables programmatic management of Cloud Storage buckets for use in Firebase projects

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_firebase_storage_controlplane_v1alpha_migrate_location_destructively_metadata import GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata

class TestGoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata(unittest.TestCase):
    """GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata:
        """Test GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata`
        """
        model = GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata()
        if include_optional:
            return GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata(
                create_time = '',
                last_update_time = '',
                state = 'STATE_UNSPECIFIED'
            )
        else:
            return GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata(
        )
        """

    def testGoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata(self):
        """Test GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Google Mirror

    Interacts with Glass users via the timeline.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.notification import Notification
from typing import Optional, Set
from typing_extensions import Self

class Subscription(BaseModel):
    """
    A subscription to events on a collection.
    """ # noqa: E501
    callback_url: Optional[StrictStr] = Field(default=None, description="The URL where notifications should be delivered (must start with https://).", alias="callbackUrl")
    collection: Optional[StrictStr] = Field(default=None, description="The collection to subscribe to. Allowed values are:   - timeline - Changes in the timeline including insertion, deletion, and updates.  - locations - Location updates.  - settings - Settings updates.")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the subscription.")
    kind: Optional[StrictStr] = Field(default='mirror#subscription', description="The type of resource. This is always mirror#subscription.")
    notification: Optional[Notification] = None
    operation: Optional[List[StrictStr]] = Field(default=None, description="A list of operations that should be subscribed to. An empty list indicates that all operations on the collection should be subscribed to. Allowed values are:   - UPDATE - The item has been updated.  - INSERT - A new item has been inserted.  - DELETE - The item has been deleted.  - MENU_ACTION - A custom menu item has been triggered by the user.")
    updated: Optional[datetime] = Field(default=None, description="The time at which this subscription was last modified, formatted according to RFC 3339.")
    user_token: Optional[StrictStr] = Field(default=None, description="An opaque token sent to the subscriber in notifications so that it can determine the ID of the user.", alias="userToken")
    verify_token: Optional[StrictStr] = Field(default=None, description="A secret token sent to the subscriber in notifications so that it can verify that the notification was generated by Google.", alias="verifyToken")
    __properties: ClassVar[List[str]] = ["callbackUrl", "collection", "id", "kind", "notification", "operation", "updated", "userToken", "verifyToken"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Subscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of notification
        if self.notification:
            _dict['notification'] = self.notification.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Subscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callbackUrl": obj.get("callbackUrl"),
            "collection": obj.get("collection"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'mirror#subscription',
            "notification": Notification.from_dict(obj["notification"]) if obj.get("notification") is not None else None,
            "operation": obj.get("operation"),
            "updated": obj.get("updated"),
            "userToken": obj.get("userToken"),
            "verifyToken": obj.get("verifyToken")
        })
        return _obj



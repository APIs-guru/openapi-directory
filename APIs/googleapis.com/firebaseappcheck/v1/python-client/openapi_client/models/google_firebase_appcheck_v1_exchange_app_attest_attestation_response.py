# coding: utf-8

"""
    Firebase App Check API

    Firebase App Check works alongside other Firebase services to help protect your backend resources from abuse, such as billing fraud or phishing.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_firebase_appcheck_v1_app_check_token import GoogleFirebaseAppcheckV1AppCheckToken
from typing import Optional, Set
from typing_extensions import Self

class GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationResponse(BaseModel):
    """
    Response message for the ExchangeAppAttestAttestation method.
    """ # noqa: E501
    app_check_token: Optional[GoogleFirebaseAppcheckV1AppCheckToken] = Field(default=None, alias="appCheckToken")
    artifact: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="An artifact that can be used in future calls to ExchangeAppAttestAssertion.")
    __properties: ClassVar[List[str]] = ["appCheckToken", "artifact"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_check_token
        if self.app_check_token:
            _dict['appCheckToken'] = self.app_check_token.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appCheckToken": GoogleFirebaseAppcheckV1AppCheckToken.from_dict(obj["appCheckToken"]) if obj.get("appCheckToken") is not None else None,
            "artifact": obj.get("artifact")
        })
        return _obj



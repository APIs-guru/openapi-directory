# coding: utf-8

"""
    Firebase App Check API

    Firebase App Check works alongside other Firebase services to help protect your backend resources from abuse, such as billing fraud or phishing.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_firebase_appcheck_v1beta_resource_policy import GoogleFirebaseAppcheckV1betaResourcePolicy
from typing import Optional, Set
from typing_extensions import Self

class GoogleFirebaseAppcheckV1betaListResourcePoliciesResponse(BaseModel):
    """
    Response message for the ListResourcePolicies method.
    """ # noqa: E501
    next_page_token: Optional[StrictStr] = Field(default=None, description="If the result list is too large to fit in a single response, then a token is returned. If the string is empty or omitted, then this response is the last page of results. This token can be used in a subsequent call to ListResourcePolicies to find the next group of ResourcePolicys. Page tokens are short-lived and should not be persisted.", alias="nextPageToken")
    resource_policies: Optional[List[GoogleFirebaseAppcheckV1betaResourcePolicy]] = Field(default=None, description="The ResourcePolicys retrieved.", alias="resourcePolicies")
    __properties: ClassVar[List[str]] = ["nextPageToken", "resourcePolicies"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppcheckV1betaListResourcePoliciesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in resource_policies (list)
        _items = []
        if self.resource_policies:
            for _item_resource_policies in self.resource_policies:
                if _item_resource_policies:
                    _items.append(_item_resource_policies.to_dict())
            _dict['resourcePolicies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppcheckV1betaListResourcePoliciesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nextPageToken": obj.get("nextPageToken"),
            "resourcePolicies": [GoogleFirebaseAppcheckV1betaResourcePolicy.from_dict(_item) for _item in obj["resourcePolicies"]] if obj.get("resourcePolicies") is not None else None
        })
        return _obj



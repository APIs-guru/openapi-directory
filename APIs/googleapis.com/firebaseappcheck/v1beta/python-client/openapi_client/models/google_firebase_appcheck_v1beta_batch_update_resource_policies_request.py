# coding: utf-8

"""
    Firebase App Check API

    Firebase App Check works alongside other Firebase services to help protect your backend resources from abuse, such as billing fraud or phishing.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_firebase_appcheck_v1beta_update_resource_policy_request import GoogleFirebaseAppcheckV1betaUpdateResourcePolicyRequest
from typing import Optional, Set
from typing_extensions import Self

class GoogleFirebaseAppcheckV1betaBatchUpdateResourcePoliciesRequest(BaseModel):
    """
    Request message for the BatchUpdateResourcePolicies method.
    """ # noqa: E501
    requests: Optional[List[GoogleFirebaseAppcheckV1betaUpdateResourcePolicyRequest]] = Field(default=None, description="Required. The request messages specifying the ResourcePolicys to update. A maximum of 100 objects can be updated in a batch.")
    update_mask: Optional[StrictStr] = Field(default=None, description="Optional. A comma-separated list of names of fields in the ResourceConfigurations to update. Example: `enforcement_mode`. If this field is present, the `update_mask` field in the UpdateResourcePolicyRequest messages must all match this field, or the entire batch fails and no updates will be committed.", alias="updateMask")
    __properties: ClassVar[List[str]] = ["requests", "updateMask"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppcheckV1betaBatchUpdateResourcePoliciesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in requests (list)
        _items = []
        if self.requests:
            for _item_requests in self.requests:
                if _item_requests:
                    _items.append(_item_requests.to_dict())
            _dict['requests'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppcheckV1betaBatchUpdateResourcePoliciesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "requests": [GoogleFirebaseAppcheckV1betaUpdateResourcePolicyRequest.from_dict(_item) for _item in obj["requests"]] if obj.get("requests") is not None else None,
            "updateMask": obj.get("updateMask")
        })
        return _obj



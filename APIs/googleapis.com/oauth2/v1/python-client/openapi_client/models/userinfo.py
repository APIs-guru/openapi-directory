# coding: utf-8

"""
    Google OAuth2 API

    Obtains end-user authorization grants for use with other Google APIs.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Userinfo(BaseModel):
    """
    Userinfo
    """ # noqa: E501
    email: Optional[StrictStr] = Field(default=None, description="The user's email address.")
    family_name: Optional[StrictStr] = Field(default=None, description="The user's last name.")
    gender: Optional[StrictStr] = Field(default=None, description="The user's gender.")
    given_name: Optional[StrictStr] = Field(default=None, description="The user's first name.")
    hd: Optional[StrictStr] = Field(default=None, description="The hosted domain e.g. example.com if the user is Google apps user.")
    id: Optional[StrictStr] = Field(default=None, description="The obfuscated ID of the user.")
    link: Optional[StrictStr] = Field(default=None, description="URL of the profile page.")
    locale: Optional[StrictStr] = Field(default=None, description="The user's preferred locale.")
    name: Optional[StrictStr] = Field(default=None, description="The user's full name.")
    picture: Optional[StrictStr] = Field(default=None, description="URL of the user's picture image.")
    verified_email: Optional[StrictBool] = Field(default=True, description="Boolean flag which is true if the email address is verified. Always verified because we only return the user's primary email address.")
    __properties: ClassVar[List[str]] = ["email", "family_name", "gender", "given_name", "hd", "id", "link", "locale", "name", "picture", "verified_email"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Userinfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Userinfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "family_name": obj.get("family_name"),
            "gender": obj.get("gender"),
            "given_name": obj.get("given_name"),
            "hd": obj.get("hd"),
            "id": obj.get("id"),
            "link": obj.get("link"),
            "locale": obj.get("locale"),
            "name": obj.get("name"),
            "picture": obj.get("picture"),
            "verified_email": obj.get("verified_email") if obj.get("verified_email") is not None else True
        })
        return _obj



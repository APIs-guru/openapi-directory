# coding: utf-8

"""
    Google OAuth2 API

    Obtains end-user authorization grants for use with other Google APIs.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Tokeninfo(BaseModel):
    """
    Tokeninfo
    """ # noqa: E501
    audience: Optional[StrictStr] = Field(default=None, description="Who is the intended audience for this token. In general the same as issued_to.")
    email: Optional[StrictStr] = Field(default=None, description="The email address of the user. Present only if the email scope is present in the request.")
    email_verified: Optional[StrictBool] = Field(default=None, description="Boolean flag which is true if the email address is verified. Present only if the email scope is present in the request.")
    expires_in: Optional[StrictInt] = Field(default=None, description="The expiry time of the token, as number of seconds left until expiry.")
    issued_at: Optional[StrictInt] = Field(default=None, description="The issue time of the token, as number of seconds.")
    issued_to: Optional[StrictStr] = Field(default=None, description="To whom was the token issued to. In general the same as audience.")
    issuer: Optional[StrictStr] = Field(default=None, description="Who issued the token.")
    nonce: Optional[StrictStr] = Field(default=None, description="Nonce of the id token.")
    scope: Optional[StrictStr] = Field(default=None, description="The space separated list of scopes granted to this token.")
    user_id: Optional[StrictStr] = Field(default=None, description="The obfuscated user id.")
    verified_email: Optional[StrictBool] = Field(default=None, description="Boolean flag which is true if the email address is verified. Present only if the email scope is present in the request.")
    __properties: ClassVar[List[str]] = ["audience", "email", "email_verified", "expires_in", "issued_at", "issued_to", "issuer", "nonce", "scope", "user_id", "verified_email"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Tokeninfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Tokeninfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audience": obj.get("audience"),
            "email": obj.get("email"),
            "email_verified": obj.get("email_verified"),
            "expires_in": obj.get("expires_in"),
            "issued_at": obj.get("issued_at"),
            "issued_to": obj.get("issued_to"),
            "issuer": obj.get("issuer"),
            "nonce": obj.get("nonce"),
            "scope": obj.get("scope"),
            "user_id": obj.get("user_id"),
            "verified_email": obj.get("verified_email")
        })
        return _obj



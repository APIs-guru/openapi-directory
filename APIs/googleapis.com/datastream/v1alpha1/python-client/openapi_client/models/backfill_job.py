# coding: utf-8

"""
    Datastream API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error import Error
from typing import Optional, Set
from typing_extensions import Self

class BackfillJob(BaseModel):
    """
    Represents a backfill job on a specific stream object.
    """ # noqa: E501
    errors: Optional[List[Error]] = Field(default=None, description="Output only. Errors which caused the backfill job to fail.")
    last_end_time: Optional[StrictStr] = Field(default=None, description="Output only. Backfill job's end time.", alias="lastEndTime")
    last_start_time: Optional[StrictStr] = Field(default=None, description="Output only. Backfill job's start time.", alias="lastStartTime")
    state: Optional[StrictStr] = Field(default=None, description="Backfill job state.")
    trigger: Optional[StrictStr] = Field(default=None, description="Backfill job's triggering reason.")
    __properties: ClassVar[List[str]] = ["errors", "lastEndTime", "lastStartTime", "state", "trigger"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'NOT_STARTED', 'PENDING', 'ACTIVE', 'STOPPED', 'FAILED', 'COMPLETED', 'UNSUPPORTED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'NOT_STARTED', 'PENDING', 'ACTIVE', 'STOPPED', 'FAILED', 'COMPLETED', 'UNSUPPORTED')")
        return value

    @field_validator('trigger')
    def trigger_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRIGGER_UNSPECIFIED', 'AUTOMATIC', 'MANUAL']):
            raise ValueError("must be one of enum values ('TRIGGER_UNSPECIFIED', 'AUTOMATIC', 'MANUAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackfillJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "errors",
            "last_end_time",
            "last_start_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackfillJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errors": [Error.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "lastEndTime": obj.get("lastEndTime"),
            "lastStartTime": obj.get("lastStartTime"),
            "state": obj.get("state"),
            "trigger": obj.get("trigger")
        })
        return _obj



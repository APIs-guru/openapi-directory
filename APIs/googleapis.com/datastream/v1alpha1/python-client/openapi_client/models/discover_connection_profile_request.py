# coding: utf-8

"""
    Datastream API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.connection_profile import ConnectionProfile
from openapi_client.models.mysql_rdbms import MysqlRdbms
from openapi_client.models.oracle_rdbms import OracleRdbms
from typing import Optional, Set
from typing_extensions import Self

class DiscoverConnectionProfileRequest(BaseModel):
    """
    Request message for 'discover' ConnectionProfile request.
    """ # noqa: E501
    connection_profile: Optional[ConnectionProfile] = Field(default=None, alias="connectionProfile")
    connection_profile_name: Optional[StrictStr] = Field(default=None, description="A reference to an existing ConnectionProfile.", alias="connectionProfileName")
    mysql_rdbms: Optional[MysqlRdbms] = Field(default=None, alias="mysqlRdbms")
    oracle_rdbms: Optional[OracleRdbms] = Field(default=None, alias="oracleRdbms")
    recursion_depth: Optional[StrictInt] = Field(default=None, description="The number of hierarchy levels below the current level to be retrieved.", alias="recursionDepth")
    recursive: Optional[StrictBool] = Field(default=None, description="Whether to retrieve the full hierarchy of data objects (TRUE) or only the current level (FALSE).")
    __properties: ClassVar[List[str]] = ["connectionProfile", "connectionProfileName", "mysqlRdbms", "oracleRdbms", "recursionDepth", "recursive"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DiscoverConnectionProfileRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of connection_profile
        if self.connection_profile:
            _dict['connectionProfile'] = self.connection_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mysql_rdbms
        if self.mysql_rdbms:
            _dict['mysqlRdbms'] = self.mysql_rdbms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oracle_rdbms
        if self.oracle_rdbms:
            _dict['oracleRdbms'] = self.oracle_rdbms.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DiscoverConnectionProfileRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectionProfile": ConnectionProfile.from_dict(obj["connectionProfile"]) if obj.get("connectionProfile") is not None else None,
            "connectionProfileName": obj.get("connectionProfileName"),
            "mysqlRdbms": MysqlRdbms.from_dict(obj["mysqlRdbms"]) if obj.get("mysqlRdbms") is not None else None,
            "oracleRdbms": OracleRdbms.from_dict(obj["oracleRdbms"]) if obj.get("oracleRdbms") is not None else None,
            "recursionDepth": obj.get("recursionDepth"),
            "recursive": obj.get("recursive")
        })
        return _obj



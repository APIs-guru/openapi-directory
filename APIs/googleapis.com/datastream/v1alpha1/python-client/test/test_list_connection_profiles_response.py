# coding: utf-8

"""
    Datastream API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_connection_profiles_response import ListConnectionProfilesResponse

class TestListConnectionProfilesResponse(unittest.TestCase):
    """ListConnectionProfilesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListConnectionProfilesResponse:
        """Test ListConnectionProfilesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListConnectionProfilesResponse`
        """
        model = ListConnectionProfilesResponse()
        if include_optional:
            return ListConnectionProfilesResponse(
                connection_profiles = [
                    openapi_client.models.connection_profile.ConnectionProfile(
                        create_time = '', 
                        display_name = '', 
                        forward_ssh_connectivity = openapi_client.models.forward_ssh_tunnel_connectivity.ForwardSshTunnelConnectivity(
                            hostname = '', 
                            password = '', 
                            port = 56, 
                            private_key = '', 
                            username = '', ), 
                        gcs_profile = openapi_client.models.gcs_profile.GcsProfile(
                            bucket_name = '', 
                            root_path = '', ), 
                        labels = {
                            'key' : ''
                            }, 
                        mysql_profile = openapi_client.models.mysql_profile.MysqlProfile(
                            hostname = '', 
                            password = '', 
                            port = 56, 
                            ssl_config = openapi_client.models.mysql_ssl_config.MysqlSslConfig(
                                ca_certificate = '', 
                                ca_certificate_set = True, 
                                client_certificate = '', 
                                client_certificate_set = True, 
                                client_key = '', 
                                client_key_set = True, ), 
                            username = '', ), 
                        name = '', 
                        no_connectivity = openapi_client.models.no_connectivity.noConnectivity(), 
                        oracle_profile = openapi_client.models.oracle_profile.OracleProfile(
                            connection_attributes = {
                                'key' : ''
                                }, 
                            database_service = '', 
                            hostname = '', 
                            password = '', 
                            port = 56, 
                            username = '', ), 
                        private_connectivity = openapi_client.models.private_connectivity.PrivateConnectivity(
                            private_connection_name = '', ), 
                        static_service_ip_connectivity = openapi_client.models.static_service_ip_connectivity.staticServiceIpConnectivity(), 
                        update_time = '', )
                    ],
                next_page_token = '',
                unreachable = [
                    ''
                    ]
            )
        else:
            return ListConnectionProfilesResponse(
        )
        """

    def testListConnectionProfilesResponse(self):
        """Test ListConnectionProfilesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

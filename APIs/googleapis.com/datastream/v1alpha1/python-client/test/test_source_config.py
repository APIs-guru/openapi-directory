# coding: utf-8

"""
    Datastream API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.source_config import SourceConfig

class TestSourceConfig(unittest.TestCase):
    """SourceConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SourceConfig:
        """Test SourceConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SourceConfig`
        """
        model = SourceConfig()
        if include_optional:
            return SourceConfig(
                mysql_source_config = openapi_client.models.mysql_source_config.MysqlSourceConfig(
                    allowlist = openapi_client.models.mysql_rdbms.MysqlRdbms(
                        mysql_databases = [
                            openapi_client.models.mysql_database.MysqlDatabase(
                                database_name = '', 
                                mysql_tables = [
                                    openapi_client.models.mysql_table.MysqlTable(
                                        mysql_columns = [
                                            openapi_client.models.mysql_column.MysqlColumn(
                                                collation = '', 
                                                column_name = '', 
                                                data_type = '', 
                                                length = 56, 
                                                nullable = True, 
                                                ordinal_position = 56, 
                                                primary_key = True, )
                                            ], 
                                        table_name = '', )
                                    ], )
                            ], ), 
                    rejectlist = openapi_client.models.mysql_rdbms.MysqlRdbms(), ),
                oracle_source_config = openapi_client.models.oracle_source_config.OracleSourceConfig(
                    allowlist = openapi_client.models.oracle_rdbms.OracleRdbms(
                        oracle_schemas = [
                            openapi_client.models.oracle_schema.OracleSchema(
                                oracle_tables = [
                                    openapi_client.models.oracle_table.OracleTable(
                                        oracle_columns = [
                                            openapi_client.models.oracle_column.OracleColumn(
                                                column_name = '', 
                                                data_type = '', 
                                                encoding = '', 
                                                length = 56, 
                                                nullable = True, 
                                                ordinal_position = 56, 
                                                precision = 56, 
                                                primary_key = True, 
                                                scale = 56, )
                                            ], 
                                        table_name = '', )
                                    ], 
                                schema_name = '', )
                            ], ), 
                    drop_large_objects = openapi_client.models.drop_large_objects.DropLargeObjects(), 
                    rejectlist = openapi_client.models.oracle_rdbms.OracleRdbms(), ),
                source_connection_profile_name = ''
            )
        else:
            return SourceConfig(
        )
        """

    def testSourceConfig(self):
        """Test SourceConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

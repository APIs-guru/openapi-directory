# coding: utf-8

"""
    Datastream API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MysqlSslConfig(BaseModel):
    """
    MySQL SSL configuration information.
    """ # noqa: E501
    ca_certificate: Optional[StrictStr] = Field(default=None, description="Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.", alias="caCertificate")
    ca_certificate_set: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the ca_certificate field is set.", alias="caCertificateSet")
    client_certificate: Optional[StrictStr] = Field(default=None, description="Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.", alias="clientCertificate")
    client_certificate_set: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the client_certificate field is set.", alias="clientCertificateSet")
    client_key: Optional[StrictStr] = Field(default=None, description="Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.", alias="clientKey")
    client_key_set: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the client_key field is set.", alias="clientKeySet")
    __properties: ClassVar[List[str]] = ["caCertificate", "caCertificateSet", "clientCertificate", "clientCertificateSet", "clientKey", "clientKeySet"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MysqlSslConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "ca_certificate_set",
            "client_certificate_set",
            "client_key_set",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MysqlSslConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "caCertificate": obj.get("caCertificate"),
            "caCertificateSet": obj.get("caCertificateSet"),
            "clientCertificate": obj.get("clientCertificate"),
            "clientCertificateSet": obj.get("clientCertificateSet"),
            "clientKey": obj.get("clientKey"),
            "clientKeySet": obj.get("clientKeySet")
        })
        return _obj



# coding: utf-8

"""
    Datastream API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.backfill_all_strategy import BackfillAllStrategy
from openapi_client.models.destination_config import DestinationConfig
from openapi_client.models.error import Error
from openapi_client.models.source_config import SourceConfig
from typing import Optional, Set
from typing_extensions import Self

class Stream(BaseModel):
    """
    A resource representing streaming data from a source to a destination.
    """ # noqa: E501
    backfill_all: Optional[BackfillAllStrategy] = Field(default=None, alias="backfillAll")
    backfill_none: Optional[Dict[str, Any]] = Field(default=None, description="Backfill strategy to disable automatic backfill for the Stream's objects.", alias="backfillNone")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The creation time of the stream.", alias="createTime")
    customer_managed_encryption_key: Optional[StrictStr] = Field(default=None, description="Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.", alias="customerManagedEncryptionKey")
    destination_config: Optional[DestinationConfig] = Field(default=None, alias="destinationConfig")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. Display name.", alias="displayName")
    errors: Optional[List[Error]] = Field(default=None, description="Output only. Errors on the Stream.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels.")
    last_recovery_time: Optional[StrictStr] = Field(default=None, description="Output only. If the stream was recovered, the time of the last recovery. Note: This field is currently experimental.", alias="lastRecoveryTime")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The stream's name.")
    source_config: Optional[SourceConfig] = Field(default=None, alias="sourceConfig")
    state: Optional[StrictStr] = Field(default=None, description="The state of the stream.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last update time of the stream.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["backfillAll", "backfillNone", "createTime", "customerManagedEncryptionKey", "destinationConfig", "displayName", "errors", "labels", "lastRecoveryTime", "name", "sourceConfig", "state", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'NOT_STARTED', 'RUNNING', 'PAUSED', 'MAINTENANCE', 'FAILED', 'FAILED_PERMANENTLY', 'STARTING', 'DRAINING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'NOT_STARTED', 'RUNNING', 'PAUSED', 'MAINTENANCE', 'FAILED', 'FAILED_PERMANENTLY', 'STARTING', 'DRAINING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Stream from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "errors",
            "last_recovery_time",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of backfill_all
        if self.backfill_all:
            _dict['backfillAll'] = self.backfill_all.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_config
        if self.destination_config:
            _dict['destinationConfig'] = self.destination_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of source_config
        if self.source_config:
            _dict['sourceConfig'] = self.source_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Stream from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backfillAll": BackfillAllStrategy.from_dict(obj["backfillAll"]) if obj.get("backfillAll") is not None else None,
            "backfillNone": obj.get("backfillNone"),
            "createTime": obj.get("createTime"),
            "customerManagedEncryptionKey": obj.get("customerManagedEncryptionKey"),
            "destinationConfig": DestinationConfig.from_dict(obj["destinationConfig"]) if obj.get("destinationConfig") is not None else None,
            "displayName": obj.get("displayName"),
            "errors": [Error.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "labels": obj.get("labels"),
            "lastRecoveryTime": obj.get("lastRecoveryTime"),
            "name": obj.get("name"),
            "sourceConfig": SourceConfig.from_dict(obj["sourceConfig"]) if obj.get("sourceConfig") is not None else None,
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Datastream API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.single_target_dataset import SingleTargetDataset
from openapi_client.models.source_hierarchy_datasets import SourceHierarchyDatasets
from typing import Optional, Set
from typing_extensions import Self

class BigQueryDestinationConfig(BaseModel):
    """
    BigQuery destination configuration
    """ # noqa: E501
    data_freshness: Optional[StrictStr] = Field(default=None, description="The guaranteed data freshness (in seconds) when querying tables created by the stream. Editing this field will only affect new tables created in the future, but existing tables will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.", alias="dataFreshness")
    single_target_dataset: Optional[SingleTargetDataset] = Field(default=None, alias="singleTargetDataset")
    source_hierarchy_datasets: Optional[SourceHierarchyDatasets] = Field(default=None, alias="sourceHierarchyDatasets")
    __properties: ClassVar[List[str]] = ["dataFreshness", "singleTargetDataset", "sourceHierarchyDatasets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BigQueryDestinationConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of single_target_dataset
        if self.single_target_dataset:
            _dict['singleTargetDataset'] = self.single_target_dataset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_hierarchy_datasets
        if self.source_hierarchy_datasets:
            _dict['sourceHierarchyDatasets'] = self.source_hierarchy_datasets.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BigQueryDestinationConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataFreshness": obj.get("dataFreshness"),
            "singleTargetDataset": SingleTargetDataset.from_dict(obj["singleTargetDataset"]) if obj.get("singleTargetDataset") is not None else None,
            "sourceHierarchyDatasets": SourceHierarchyDatasets.from_dict(obj["sourceHierarchyDatasets"]) if obj.get("sourceHierarchyDatasets") is not None else None
        })
        return _obj



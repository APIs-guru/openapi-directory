# coding: utf-8

"""
    Datastream API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.forward_ssh_tunnel_connectivity import ForwardSshTunnelConnectivity
from openapi_client.models.gcs_profile import GcsProfile
from openapi_client.models.mysql_profile import MysqlProfile
from openapi_client.models.oracle_profile import OracleProfile
from openapi_client.models.postgresql_profile import PostgresqlProfile
from openapi_client.models.private_connectivity import PrivateConnectivity
from openapi_client.models.sql_server_profile import SqlServerProfile
from typing import Optional, Set
from typing_extensions import Self

class ConnectionProfile(BaseModel):
    """
    A set of reusable connection configurations to be used as a source or destination for a stream.
    """ # noqa: E501
    bigquery_profile: Optional[Dict[str, Any]] = Field(default=None, description="BigQuery warehouse profile.", alias="bigqueryProfile")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The create time of the resource.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. Display name.", alias="displayName")
    forward_ssh_connectivity: Optional[ForwardSshTunnelConnectivity] = Field(default=None, alias="forwardSshConnectivity")
    gcs_profile: Optional[GcsProfile] = Field(default=None, alias="gcsProfile")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels.")
    mysql_profile: Optional[MysqlProfile] = Field(default=None, alias="mysqlProfile")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource's name.")
    oracle_profile: Optional[OracleProfile] = Field(default=None, alias="oracleProfile")
    postgresql_profile: Optional[PostgresqlProfile] = Field(default=None, alias="postgresqlProfile")
    private_connectivity: Optional[PrivateConnectivity] = Field(default=None, alias="privateConnectivity")
    sql_server_profile: Optional[SqlServerProfile] = Field(default=None, alias="sqlServerProfile")
    static_service_ip_connectivity: Optional[Dict[str, Any]] = Field(default=None, description="Static IP address connectivity. Used when the source database is configured to allow incoming connections from the Datastream public IP addresses for the region specified in the connection profile.", alias="staticServiceIpConnectivity")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The update time of the resource.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["bigqueryProfile", "createTime", "displayName", "forwardSshConnectivity", "gcsProfile", "labels", "mysqlProfile", "name", "oracleProfile", "postgresqlProfile", "privateConnectivity", "sqlServerProfile", "staticServiceIpConnectivity", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConnectionProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of forward_ssh_connectivity
        if self.forward_ssh_connectivity:
            _dict['forwardSshConnectivity'] = self.forward_ssh_connectivity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcs_profile
        if self.gcs_profile:
            _dict['gcsProfile'] = self.gcs_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mysql_profile
        if self.mysql_profile:
            _dict['mysqlProfile'] = self.mysql_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oracle_profile
        if self.oracle_profile:
            _dict['oracleProfile'] = self.oracle_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of postgresql_profile
        if self.postgresql_profile:
            _dict['postgresqlProfile'] = self.postgresql_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of private_connectivity
        if self.private_connectivity:
            _dict['privateConnectivity'] = self.private_connectivity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sql_server_profile
        if self.sql_server_profile:
            _dict['sqlServerProfile'] = self.sql_server_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConnectionProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bigqueryProfile": obj.get("bigqueryProfile"),
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "forwardSshConnectivity": ForwardSshTunnelConnectivity.from_dict(obj["forwardSshConnectivity"]) if obj.get("forwardSshConnectivity") is not None else None,
            "gcsProfile": GcsProfile.from_dict(obj["gcsProfile"]) if obj.get("gcsProfile") is not None else None,
            "labels": obj.get("labels"),
            "mysqlProfile": MysqlProfile.from_dict(obj["mysqlProfile"]) if obj.get("mysqlProfile") is not None else None,
            "name": obj.get("name"),
            "oracleProfile": OracleProfile.from_dict(obj["oracleProfile"]) if obj.get("oracleProfile") is not None else None,
            "postgresqlProfile": PostgresqlProfile.from_dict(obj["postgresqlProfile"]) if obj.get("postgresqlProfile") is not None else None,
            "privateConnectivity": PrivateConnectivity.from_dict(obj["privateConnectivity"]) if obj.get("privateConnectivity") is not None else None,
            "sqlServerProfile": SqlServerProfile.from_dict(obj["sqlServerProfile"]) if obj.get("sqlServerProfile") is not None else None,
            "staticServiceIpConnectivity": obj.get("staticServiceIpConnectivity"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Datastream API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MysqlColumn(BaseModel):
    """
    MySQL Column.
    """ # noqa: E501
    collation: Optional[StrictStr] = Field(default=None, description="Column collation.")
    column: Optional[StrictStr] = Field(default=None, description="Column name.")
    data_type: Optional[StrictStr] = Field(default=None, description="The MySQL data type. Full data types list can be found here: https://dev.mysql.com/doc/refman/8.0/en/data-types.html", alias="dataType")
    length: Optional[StrictInt] = Field(default=None, description="Column length.")
    nullable: Optional[StrictBool] = Field(default=None, description="Whether or not the column can accept a null value.")
    ordinal_position: Optional[StrictInt] = Field(default=None, description="The ordinal position of the column in the table.", alias="ordinalPosition")
    precision: Optional[StrictInt] = Field(default=None, description="Column precision.")
    primary_key: Optional[StrictBool] = Field(default=None, description="Whether or not the column represents a primary key.", alias="primaryKey")
    scale: Optional[StrictInt] = Field(default=None, description="Column scale.")
    __properties: ClassVar[List[str]] = ["collation", "column", "dataType", "length", "nullable", "ordinalPosition", "precision", "primaryKey", "scale"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MysqlColumn from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MysqlColumn from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "collation": obj.get("collation"),
            "column": obj.get("column"),
            "dataType": obj.get("dataType"),
            "length": obj.get("length"),
            "nullable": obj.get("nullable"),
            "ordinalPosition": obj.get("ordinalPosition"),
            "precision": obj.get("precision"),
            "primaryKey": obj.get("primaryKey"),
            "scale": obj.get("scale")
        })
        return _obj



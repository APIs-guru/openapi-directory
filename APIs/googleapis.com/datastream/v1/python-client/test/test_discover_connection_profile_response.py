# coding: utf-8

"""
    Datastream API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.discover_connection_profile_response import DiscoverConnectionProfileResponse

class TestDiscoverConnectionProfileResponse(unittest.TestCase):
    """DiscoverConnectionProfileResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DiscoverConnectionProfileResponse:
        """Test DiscoverConnectionProfileResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DiscoverConnectionProfileResponse`
        """
        model = DiscoverConnectionProfileResponse()
        if include_optional:
            return DiscoverConnectionProfileResponse(
                mysql_rdbms = openapi_client.models.mysql_rdbms.MysqlRdbms(
                    mysql_databases = [
                        openapi_client.models.mysql_database.MysqlDatabase(
                            database = '', 
                            mysql_tables = [
                                openapi_client.models.mysql_table.MysqlTable(
                                    mysql_columns = [
                                        openapi_client.models.mysql_column.MysqlColumn(
                                            collation = '', 
                                            column = '', 
                                            data_type = '', 
                                            length = 56, 
                                            nullable = True, 
                                            ordinal_position = 56, 
                                            precision = 56, 
                                            primary_key = True, 
                                            scale = 56, )
                                        ], 
                                    table = '', )
                                ], )
                        ], ),
                oracle_rdbms = openapi_client.models.oracle_rdbms.OracleRdbms(
                    oracle_schemas = [
                        openapi_client.models.oracle_schema.OracleSchema(
                            oracle_tables = [
                                openapi_client.models.oracle_table.OracleTable(
                                    oracle_columns = [
                                        openapi_client.models.oracle_column.OracleColumn(
                                            column = '', 
                                            data_type = '', 
                                            encoding = '', 
                                            length = 56, 
                                            nullable = True, 
                                            ordinal_position = 56, 
                                            precision = 56, 
                                            primary_key = True, 
                                            scale = 56, )
                                        ], 
                                    table = '', )
                                ], 
                            schema = '', )
                        ], ),
                postgresql_rdbms = openapi_client.models.postgresql_rdbms.PostgresqlRdbms(
                    postgresql_schemas = [
                        openapi_client.models.postgresql_schema.PostgresqlSchema(
                            postgresql_tables = [
                                openapi_client.models.postgresql_table.PostgresqlTable(
                                    postgresql_columns = [
                                        openapi_client.models.postgresql_column.PostgresqlColumn(
                                            column = '', 
                                            data_type = '', 
                                            length = 56, 
                                            nullable = True, 
                                            ordinal_position = 56, 
                                            precision = 56, 
                                            primary_key = True, 
                                            scale = 56, )
                                        ], 
                                    table = '', )
                                ], 
                            schema = '', )
                        ], )
            )
        else:
            return DiscoverConnectionProfileResponse(
        )
        """

    def testDiscoverConnectionProfileResponse(self):
        """Test DiscoverConnectionProfileResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

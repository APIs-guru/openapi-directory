# coding: utf-8

"""
    Datastream API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.discover_connection_profile_request import DiscoverConnectionProfileRequest

class TestDiscoverConnectionProfileRequest(unittest.TestCase):
    """DiscoverConnectionProfileRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DiscoverConnectionProfileRequest:
        """Test DiscoverConnectionProfileRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DiscoverConnectionProfileRequest`
        """
        model = DiscoverConnectionProfileRequest()
        if include_optional:
            return DiscoverConnectionProfileRequest(
                connection_profile = openapi_client.models.connection_profile.ConnectionProfile(
                    bigquery_profile = openapi_client.models.bigquery_profile.bigqueryProfile(), 
                    create_time = '', 
                    display_name = '', 
                    forward_ssh_connectivity = openapi_client.models.forward_ssh_tunnel_connectivity.ForwardSshTunnelConnectivity(
                        hostname = '', 
                        password = '', 
                        port = 56, 
                        private_key = '', 
                        username = '', ), 
                    gcs_profile = openapi_client.models.gcs_profile.GcsProfile(
                        bucket = '', 
                        root_path = '', ), 
                    labels = {
                        'key' : ''
                        }, 
                    mysql_profile = openapi_client.models.mysql_profile.MysqlProfile(
                        hostname = '', 
                        password = '', 
                        port = 56, 
                        ssl_config = openapi_client.models.mysql_ssl_config.MysqlSslConfig(
                            ca_certificate = '', 
                            ca_certificate_set = True, 
                            client_certificate = '', 
                            client_certificate_set = True, 
                            client_key = '', 
                            client_key_set = True, ), 
                        username = '', ), 
                    name = '', 
                    oracle_profile = openapi_client.models.oracle_profile.OracleProfile(
                        connection_attributes = {
                            'key' : ''
                            }, 
                        database_service = '', 
                        hostname = '', 
                        oracle_ssl_config = openapi_client.models.oracle_ssl_config.OracleSslConfig(
                            ca_certificate = '', 
                            ca_certificate_set = True, ), 
                        password = '', 
                        port = 56, 
                        username = '', ), 
                    postgresql_profile = openapi_client.models.postgresql_profile.PostgresqlProfile(
                        database = '', 
                        hostname = '', 
                        password = '', 
                        port = 56, 
                        username = '', ), 
                    private_connectivity = openapi_client.models.private_connectivity.PrivateConnectivity(
                        private_connection = '', ), 
                    sql_server_profile = openapi_client.models.sql_server_profile.SqlServerProfile(
                        database = '', 
                        hostname = '', 
                        password = '', 
                        port = 56, 
                        username = '', ), 
                    static_service_ip_connectivity = openapi_client.models.static_service_ip_connectivity.staticServiceIpConnectivity(), 
                    update_time = '', ),
                connection_profile_name = '',
                full_hierarchy = True,
                hierarchy_depth = 56,
                mysql_rdbms = openapi_client.models.mysql_rdbms.MysqlRdbms(
                    mysql_databases = [
                        openapi_client.models.mysql_database.MysqlDatabase(
                            database = '', 
                            mysql_tables = [
                                openapi_client.models.mysql_table.MysqlTable(
                                    mysql_columns = [
                                        openapi_client.models.mysql_column.MysqlColumn(
                                            collation = '', 
                                            column = '', 
                                            data_type = '', 
                                            length = 56, 
                                            nullable = True, 
                                            ordinal_position = 56, 
                                            precision = 56, 
                                            primary_key = True, 
                                            scale = 56, )
                                        ], 
                                    table = '', )
                                ], )
                        ], ),
                oracle_rdbms = openapi_client.models.oracle_rdbms.OracleRdbms(
                    oracle_schemas = [
                        openapi_client.models.oracle_schema.OracleSchema(
                            oracle_tables = [
                                openapi_client.models.oracle_table.OracleTable(
                                    oracle_columns = [
                                        openapi_client.models.oracle_column.OracleColumn(
                                            column = '', 
                                            data_type = '', 
                                            encoding = '', 
                                            length = 56, 
                                            nullable = True, 
                                            ordinal_position = 56, 
                                            precision = 56, 
                                            primary_key = True, 
                                            scale = 56, )
                                        ], 
                                    table = '', )
                                ], 
                            schema = '', )
                        ], ),
                postgresql_rdbms = openapi_client.models.postgresql_rdbms.PostgresqlRdbms(
                    postgresql_schemas = [
                        openapi_client.models.postgresql_schema.PostgresqlSchema(
                            postgresql_tables = [
                                openapi_client.models.postgresql_table.PostgresqlTable(
                                    postgresql_columns = [
                                        openapi_client.models.postgresql_column.PostgresqlColumn(
                                            column = '', 
                                            data_type = '', 
                                            length = 56, 
                                            nullable = True, 
                                            ordinal_position = 56, 
                                            precision = 56, 
                                            primary_key = True, 
                                            scale = 56, )
                                        ], 
                                    table = '', )
                                ], 
                            schema = '', )
                        ], )
            )
        else:
            return DiscoverConnectionProfileRequest(
        )
        """

    def testDiscoverConnectionProfileRequest(self):
        """Test DiscoverConnectionProfileRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

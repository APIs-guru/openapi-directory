# coding: utf-8

"""
    Datastream API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.oracle_source_config import OracleSourceConfig

class TestOracleSourceConfig(unittest.TestCase):
    """OracleSourceConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OracleSourceConfig:
        """Test OracleSourceConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OracleSourceConfig`
        """
        model = OracleSourceConfig()
        if include_optional:
            return OracleSourceConfig(
                drop_large_objects = openapi_client.models.drop_large_objects.DropLargeObjects(),
                exclude_objects = openapi_client.models.oracle_rdbms.OracleRdbms(
                    oracle_schemas = [
                        openapi_client.models.oracle_schema.OracleSchema(
                            oracle_tables = [
                                openapi_client.models.oracle_table.OracleTable(
                                    oracle_columns = [
                                        openapi_client.models.oracle_column.OracleColumn(
                                            column = '', 
                                            data_type = '', 
                                            encoding = '', 
                                            length = 56, 
                                            nullable = True, 
                                            ordinal_position = 56, 
                                            precision = 56, 
                                            primary_key = True, 
                                            scale = 56, )
                                        ], 
                                    table = '', )
                                ], 
                            schema = '', )
                        ], ),
                include_objects = openapi_client.models.oracle_rdbms.OracleRdbms(
                    oracle_schemas = [
                        openapi_client.models.oracle_schema.OracleSchema(
                            oracle_tables = [
                                openapi_client.models.oracle_table.OracleTable(
                                    oracle_columns = [
                                        openapi_client.models.oracle_column.OracleColumn(
                                            column = '', 
                                            data_type = '', 
                                            encoding = '', 
                                            length = 56, 
                                            nullable = True, 
                                            ordinal_position = 56, 
                                            precision = 56, 
                                            primary_key = True, 
                                            scale = 56, )
                                        ], 
                                    table = '', )
                                ], 
                            schema = '', )
                        ], ),
                max_concurrent_backfill_tasks = 56,
                max_concurrent_cdc_tasks = 56,
                stream_large_objects = openapi_client.models.stream_large_objects.StreamLargeObjects()
            )
        else:
            return OracleSourceConfig(
        )
        """

    def testOracleSourceConfig(self):
        """Test OracleSourceConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

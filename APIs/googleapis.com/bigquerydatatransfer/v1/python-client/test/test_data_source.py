# coding: utf-8

"""
    BigQuery Data Transfer API

    Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.data_source import DataSource

class TestDataSource(unittest.TestCase):
    """DataSource unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DataSource:
        """Test DataSource
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DataSource`
        """
        model = DataSource()
        if include_optional:
            return DataSource(
                authorization_type = 'AUTHORIZATION_TYPE_UNSPECIFIED',
                client_id = '',
                data_refresh_type = 'DATA_REFRESH_TYPE_UNSPECIFIED',
                data_source_id = '',
                default_data_refresh_window_days = 56,
                default_schedule = '',
                description = '',
                display_name = '',
                help_url = '',
                manual_runs_disabled = True,
                minimum_schedule_interval = '',
                name = '',
                parameters = [
                    openapi_client.models.data_source_parameter.DataSourceParameter(
                        allowed_values = [
                            ''
                            ], 
                        deprecated = True, 
                        description = '', 
                        display_name = '', 
                        fields = [
                            openapi_client.models.data_source_parameter.DataSourceParameter(
                                deprecated = True, 
                                description = '', 
                                display_name = '', 
                                immutable = True, 
                                max_value = 1.337, 
                                min_value = 1.337, 
                                param_id = '', 
                                recurse = True, 
                                repeated = True, 
                                required = True, 
                                type = 'TYPE_UNSPECIFIED', 
                                validation_description = '', 
                                validation_help_url = '', 
                                validation_regex = '', )
                            ], 
                        immutable = True, 
                        max_value = 1.337, 
                        min_value = 1.337, 
                        param_id = '', 
                        recurse = True, 
                        repeated = True, 
                        required = True, 
                        type = 'TYPE_UNSPECIFIED', 
                        validation_description = '', 
                        validation_help_url = '', 
                        validation_regex = '', )
                    ],
                scopes = [
                    ''
                    ],
                supports_custom_schedule = True,
                supports_multiple_transfers = True,
                transfer_type = 'TRANSFER_TYPE_UNSPECIFIED',
                update_deadline_seconds = 56
            )
        else:
            return DataSource(
        )
        """

    def testDataSource(self):
        """Test DataSource"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

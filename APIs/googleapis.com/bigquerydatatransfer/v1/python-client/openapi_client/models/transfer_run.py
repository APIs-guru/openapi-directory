# coding: utf-8

"""
    BigQuery Data Transfer API

    Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.email_preferences import EmailPreferences
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class TransferRun(BaseModel):
    """
    Represents a data transfer run.
    """ # noqa: E501
    data_source_id: Optional[StrictStr] = Field(default=None, description="Output only. Data source id.", alias="dataSourceId")
    destination_dataset_id: Optional[StrictStr] = Field(default=None, description="Output only. The BigQuery target dataset id.", alias="destinationDatasetId")
    email_preferences: Optional[EmailPreferences] = Field(default=None, alias="emailPreferences")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when transfer run ended. Parameter ignored by server for input requests.", alias="endTime")
    error_status: Optional[Status] = Field(default=None, alias="errorStatus")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the transfer run. Transfer run names have the form `projects/{project_id}/locations/{location}/transferConfigs/{config_id}/runs/{run_id}`. The name is ignored when creating a transfer run.")
    notification_pubsub_topic: Optional[StrictStr] = Field(default=None, description="Output only. Pub/Sub topic where a notification will be sent after this transfer run finishes. The format for specifying a pubsub topic is: `projects/{project_id}/topics/{topic_id}`", alias="notificationPubsubTopic")
    params: Optional[Dict[str, Any]] = Field(default=None, description="Output only. Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq")
    run_time: Optional[StrictStr] = Field(default=None, description="For batch transfer runs, specifies the date and time of the data should be ingested.", alias="runTime")
    schedule: Optional[StrictStr] = Field(default=None, description="Output only. Describes the schedule of this transfer run if it was created as part of a regular schedule. For batch transfer runs that are scheduled manually, this is empty. NOTE: the system might choose to delay the schedule depending on the current load, so `schedule_time` doesn't always match this.")
    schedule_time: Optional[StrictStr] = Field(default=None, description="Minimum time after which a transfer run can be started.", alias="scheduleTime")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when transfer run was started. Parameter ignored by server for input requests.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Data transfer run state. Ignored for input requests.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Last time the data transfer run state was updated.", alias="updateTime")
    user_id: Optional[StrictStr] = Field(default=None, description="Deprecated. Unique ID of the user on whose behalf transfer is done.", alias="userId")
    __properties: ClassVar[List[str]] = ["dataSourceId", "destinationDatasetId", "emailPreferences", "endTime", "errorStatus", "name", "notificationPubsubTopic", "params", "runTime", "schedule", "scheduleTime", "startTime", "state", "updateTime", "userId"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRANSFER_STATE_UNSPECIFIED', 'PENDING', 'RUNNING', 'SUCCEEDED', 'FAILED', 'CANCELLED']):
            raise ValueError("must be one of enum values ('TRANSFER_STATE_UNSPECIFIED', 'PENDING', 'RUNNING', 'SUCCEEDED', 'FAILED', 'CANCELLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransferRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "data_source_id",
            "destination_dataset_id",
            "end_time",
            "notification_pubsub_topic",
            "params",
            "schedule",
            "start_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of email_preferences
        if self.email_preferences:
            _dict['emailPreferences'] = self.email_preferences.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error_status
        if self.error_status:
            _dict['errorStatus'] = self.error_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransferRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataSourceId": obj.get("dataSourceId"),
            "destinationDatasetId": obj.get("destinationDatasetId"),
            "emailPreferences": EmailPreferences.from_dict(obj["emailPreferences"]) if obj.get("emailPreferences") is not None else None,
            "endTime": obj.get("endTime"),
            "errorStatus": Status.from_dict(obj["errorStatus"]) if obj.get("errorStatus") is not None else None,
            "name": obj.get("name"),
            "notificationPubsubTopic": obj.get("notificationPubsubTopic"),
            "params": obj.get("params"),
            "runTime": obj.get("runTime"),
            "schedule": obj.get("schedule"),
            "scheduleTime": obj.get("scheduleTime"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime"),
            "userId": obj.get("userId")
        })
        return _obj



# coding: utf-8

"""
    BigQuery Data Transfer API

    Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.email_preferences import EmailPreferences
from openapi_client.models.encryption_configuration import EncryptionConfiguration
from openapi_client.models.schedule_options import ScheduleOptions
from openapi_client.models.user_info import UserInfo
from typing import Optional, Set
from typing_extensions import Self

class TransferConfig(BaseModel):
    """
    Represents a data transfer configuration. A transfer configuration contains all metadata needed to perform a data transfer. For example, `destination_dataset_id` specifies where data should be stored. When a new transfer configuration is created, the specified `destination_dataset_id` is created when needed and shared with the appropriate data source service account.
    """ # noqa: E501
    data_refresh_window_days: Optional[StrictInt] = Field(default=None, description="The number of days to look back to automatically refresh the data. For example, if `data_refresh_window_days = 10`, then every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if the data source supports the feature. Set the value to 0 to use the default value.", alias="dataRefreshWindowDays")
    data_source_id: Optional[StrictStr] = Field(default=None, description="Data source ID. This cannot be changed once data transfer is created. The full list of available data source IDs can be returned through an API call: https://cloud.google.com/bigquery-transfer/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/list", alias="dataSourceId")
    dataset_region: Optional[StrictStr] = Field(default=None, description="Output only. Region in which BigQuery dataset is located.", alias="datasetRegion")
    destination_dataset_id: Optional[StrictStr] = Field(default=None, description="The BigQuery target dataset id.", alias="destinationDatasetId")
    disabled: Optional[StrictBool] = Field(default=None, description="Is this config disabled. When set to true, no runs will be scheduled for this transfer config.")
    display_name: Optional[StrictStr] = Field(default=None, description="User specified display name for the data transfer.", alias="displayName")
    email_preferences: Optional[EmailPreferences] = Field(default=None, alias="emailPreferences")
    encryption_configuration: Optional[EncryptionConfiguration] = Field(default=None, alias="encryptionConfiguration")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the transfer config. Transfer config names have the form either `projects/{project_id}/locations/{region}/transferConfigs/{config_id}` or `projects/{project_id}/transferConfigs/{config_id}`, where `config_id` is usually a UUID, even though it is not guaranteed or required. The name is ignored when creating a transfer config.")
    next_run_time: Optional[StrictStr] = Field(default=None, description="Output only. Next time when data transfer will run.", alias="nextRunTime")
    notification_pubsub_topic: Optional[StrictStr] = Field(default=None, description="Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish. The format for specifying a pubsub topic is: `projects/{project_id}/topics/{topic_id}`", alias="notificationPubsubTopic")
    owner_info: Optional[UserInfo] = Field(default=None, alias="ownerInfo")
    params: Optional[Dict[str, Any]] = Field(default=None, description="Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq")
    schedule: Optional[StrictStr] = Field(default=None, description="Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the default value for the data source will be used. The specified times are in UTC. Examples of valid format: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`. See more explanation about the format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for your data source.")
    schedule_options: Optional[ScheduleOptions] = Field(default=None, alias="scheduleOptions")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the most recently updated transfer run.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Data transfer modification time. Ignored by server on input.", alias="updateTime")
    user_id: Optional[StrictStr] = Field(default=None, description="Deprecated. Unique ID of the user on whose behalf transfer is done.", alias="userId")
    __properties: ClassVar[List[str]] = ["dataRefreshWindowDays", "dataSourceId", "datasetRegion", "destinationDatasetId", "disabled", "displayName", "emailPreferences", "encryptionConfiguration", "name", "nextRunTime", "notificationPubsubTopic", "ownerInfo", "params", "schedule", "scheduleOptions", "state", "updateTime", "userId"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRANSFER_STATE_UNSPECIFIED', 'PENDING', 'RUNNING', 'SUCCEEDED', 'FAILED', 'CANCELLED']):
            raise ValueError("must be one of enum values ('TRANSFER_STATE_UNSPECIFIED', 'PENDING', 'RUNNING', 'SUCCEEDED', 'FAILED', 'CANCELLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransferConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "dataset_region",
            "next_run_time",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of email_preferences
        if self.email_preferences:
            _dict['emailPreferences'] = self.email_preferences.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encryption_configuration
        if self.encryption_configuration:
            _dict['encryptionConfiguration'] = self.encryption_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner_info
        if self.owner_info:
            _dict['ownerInfo'] = self.owner_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule_options
        if self.schedule_options:
            _dict['scheduleOptions'] = self.schedule_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransferConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataRefreshWindowDays": obj.get("dataRefreshWindowDays"),
            "dataSourceId": obj.get("dataSourceId"),
            "datasetRegion": obj.get("datasetRegion"),
            "destinationDatasetId": obj.get("destinationDatasetId"),
            "disabled": obj.get("disabled"),
            "displayName": obj.get("displayName"),
            "emailPreferences": EmailPreferences.from_dict(obj["emailPreferences"]) if obj.get("emailPreferences") is not None else None,
            "encryptionConfiguration": EncryptionConfiguration.from_dict(obj["encryptionConfiguration"]) if obj.get("encryptionConfiguration") is not None else None,
            "name": obj.get("name"),
            "nextRunTime": obj.get("nextRunTime"),
            "notificationPubsubTopic": obj.get("notificationPubsubTopic"),
            "ownerInfo": UserInfo.from_dict(obj["ownerInfo"]) if obj.get("ownerInfo") is not None else None,
            "params": obj.get("params"),
            "schedule": obj.get("schedule"),
            "scheduleOptions": ScheduleOptions.from_dict(obj["scheduleOptions"]) if obj.get("scheduleOptions") is not None else None,
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime"),
            "userId": obj.get("userId")
        })
        return _obj



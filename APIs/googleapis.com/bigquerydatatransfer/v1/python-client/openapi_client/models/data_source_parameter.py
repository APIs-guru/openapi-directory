# coding: utf-8

"""
    BigQuery Data Transfer API

    Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DataSourceParameter(BaseModel):
    """
    A parameter used to define custom fields in a data source definition.
    """ # noqa: E501
    allowed_values: Optional[List[StrictStr]] = Field(default=None, description="All possible values for the parameter.", alias="allowedValues")
    deprecated: Optional[StrictBool] = Field(default=None, description="If true, it should not be used in new transfers, and it should not be visible to users.")
    description: Optional[StrictStr] = Field(default=None, description="Parameter description.")
    display_name: Optional[StrictStr] = Field(default=None, description="Parameter display name in the user interface.", alias="displayName")
    fields: Optional[List[DataSourceParameter]] = Field(default=None, description="Deprecated. This field has no effect.")
    immutable: Optional[StrictBool] = Field(default=None, description="Cannot be changed after initial creation.")
    max_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="For integer and double values specifies maximum allowed value.", alias="maxValue")
    min_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="For integer and double values specifies minimum allowed value.", alias="minValue")
    param_id: Optional[StrictStr] = Field(default=None, description="Parameter identifier.", alias="paramId")
    recurse: Optional[StrictBool] = Field(default=None, description="Deprecated. This field has no effect.")
    repeated: Optional[StrictBool] = Field(default=None, description="Deprecated. This field has no effect.")
    required: Optional[StrictBool] = Field(default=None, description="Is parameter required.")
    type: Optional[StrictStr] = Field(default=None, description="Parameter type.")
    validation_description: Optional[StrictStr] = Field(default=None, description="Description of the requirements for this field, in case the user input does not fulfill the regex pattern or min/max values.", alias="validationDescription")
    validation_help_url: Optional[StrictStr] = Field(default=None, description="URL to a help document to further explain the naming requirements.", alias="validationHelpUrl")
    validation_regex: Optional[StrictStr] = Field(default=None, description="Regular expression which can be used for parameter validation.", alias="validationRegex")
    __properties: ClassVar[List[str]] = ["allowedValues", "deprecated", "description", "displayName", "fields", "immutable", "maxValue", "minValue", "paramId", "recurse", "repeated", "required", "type", "validationDescription", "validationHelpUrl", "validationRegex"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'STRING', 'INTEGER', 'DOUBLE', 'BOOLEAN', 'RECORD', 'PLUS_PAGE', 'LIST']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'STRING', 'INTEGER', 'DOUBLE', 'BOOLEAN', 'RECORD', 'PLUS_PAGE', 'LIST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataSourceParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item_fields in self.fields:
                if _item_fields:
                    _items.append(_item_fields.to_dict())
            _dict['fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataSourceParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedValues": obj.get("allowedValues"),
            "deprecated": obj.get("deprecated"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "fields": [DataSourceParameter.from_dict(_item) for _item in obj["fields"]] if obj.get("fields") is not None else None,
            "immutable": obj.get("immutable"),
            "maxValue": obj.get("maxValue"),
            "minValue": obj.get("minValue"),
            "paramId": obj.get("paramId"),
            "recurse": obj.get("recurse"),
            "repeated": obj.get("repeated"),
            "required": obj.get("required"),
            "type": obj.get("type"),
            "validationDescription": obj.get("validationDescription"),
            "validationHelpUrl": obj.get("validationHelpUrl"),
            "validationRegex": obj.get("validationRegex")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
DataSourceParameter.model_rebuild(raise_errors=False)


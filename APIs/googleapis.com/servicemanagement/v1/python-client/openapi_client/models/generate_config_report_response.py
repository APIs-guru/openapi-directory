# coding: utf-8

"""
    Service Management API

    Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.change_report import ChangeReport
from openapi_client.models.diagnostic import Diagnostic
from typing import Optional, Set
from typing_extensions import Self

class GenerateConfigReportResponse(BaseModel):
    """
    Response message for GenerateConfigReport method.
    """ # noqa: E501
    change_reports: Optional[List[ChangeReport]] = Field(default=None, description="list of ChangeReport, each corresponding to comparison between two service configurations.", alias="changeReports")
    diagnostics: Optional[List[Diagnostic]] = Field(default=None, description="Errors / Linter warnings associated with the service definition this report belongs to.")
    id: Optional[StrictStr] = Field(default=None, description="ID of the service configuration this report belongs to.")
    service_name: Optional[StrictStr] = Field(default=None, description="Name of the service this report belongs to.", alias="serviceName")
    __properties: ClassVar[List[str]] = ["changeReports", "diagnostics", "id", "serviceName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerateConfigReportResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in change_reports (list)
        _items = []
        if self.change_reports:
            for _item_change_reports in self.change_reports:
                if _item_change_reports:
                    _items.append(_item_change_reports.to_dict())
            _dict['changeReports'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in diagnostics (list)
        _items = []
        if self.diagnostics:
            for _item_diagnostics in self.diagnostics:
                if _item_diagnostics:
                    _items.append(_item_diagnostics.to_dict())
            _dict['diagnostics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerateConfigReportResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "changeReports": [ChangeReport.from_dict(_item) for _item in obj["changeReports"]] if obj.get("changeReports") is not None else None,
            "diagnostics": [Diagnostic.from_dict(_item) for _item in obj["diagnostics"]] if obj.get("diagnostics") is not None else None,
            "id": obj.get("id"),
            "serviceName": obj.get("serviceName")
        })
        return _obj



# coding: utf-8

"""
    Service Management API

    Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.advice import Advice
from typing import Optional, Set
from typing_extensions import Self

class ConfigChange(BaseModel):
    """
    Output generated from semantically comparing two versions of a service configuration. Includes detailed information about a field that have changed with applicable advice about potential consequences for the change, such as backwards-incompatibility.
    """ # noqa: E501
    advices: Optional[List[Advice]] = Field(default=None, description="Collection of advice provided for this change, useful for determining the possible impact of this change.")
    change_type: Optional[StrictStr] = Field(default=None, description="The type for this change, either ADDED, REMOVED, or MODIFIED.", alias="changeType")
    element: Optional[StrictStr] = Field(default=None, description="Object hierarchy path to the change, with levels separated by a '.' character. For repeated fields, an applicable unique identifier field is used for the index (usually selector, name, or id). For maps, the term 'key' is used. If the field has no unique identifier, the numeric index is used. Examples: - visibility.rules[selector==\"google.LibraryService.ListBooks\"].restriction - quota.metric_rules[selector==\"google\"].metric_costs[key==\"reads\"].value - logging.producer_destinations[0]")
    new_value: Optional[StrictStr] = Field(default=None, description="Value of the changed object in the new Service configuration, in JSON format. This field will not be populated if ChangeType == REMOVED.", alias="newValue")
    old_value: Optional[StrictStr] = Field(default=None, description="Value of the changed object in the old Service configuration, in JSON format. This field will not be populated if ChangeType == ADDED.", alias="oldValue")
    __properties: ClassVar[List[str]] = ["advices", "changeType", "element", "newValue", "oldValue"]

    @field_validator('change_type')
    def change_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHANGE_TYPE_UNSPECIFIED', 'ADDED', 'REMOVED', 'MODIFIED']):
            raise ValueError("must be one of enum values ('CHANGE_TYPE_UNSPECIFIED', 'ADDED', 'REMOVED', 'MODIFIED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigChange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in advices (list)
        _items = []
        if self.advices:
            for _item_advices in self.advices:
                if _item_advices:
                    _items.append(_item_advices.to_dict())
            _dict['advices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigChange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advices": [Advice.from_dict(_item) for _item in obj["advices"]] if obj.get("advices") is not None else None,
            "changeType": obj.get("changeType"),
            "element": obj.get("element"),
            "newValue": obj.get("newValue"),
            "oldValue": obj.get("oldValue")
        })
        return _obj



# coding: utf-8

"""
    Service Management API

    Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.traffic_percent_strategy import TrafficPercentStrategy
from typing import Optional, Set
from typing_extensions import Self

class Rollout(BaseModel):
    """
    A rollout resource that defines how service configuration versions are pushed to control plane systems. Typically, you create a new version of the service config, and then create a Rollout to push the service config.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Creation time of the rollout. Readonly.", alias="createTime")
    created_by: Optional[StrictStr] = Field(default=None, description="The user who created the Rollout. Readonly.", alias="createdBy")
    delete_service_strategy: Optional[Dict[str, Any]] = Field(default=None, description="Strategy used to delete a service. This strategy is a placeholder only used by the system generated rollout to delete a service.", alias="deleteServiceStrategy")
    rollout_id: Optional[StrictStr] = Field(default=None, description="Optional. Unique identifier of this Rollout. Must be no longer than 63 characters and only lower case letters, digits, '.', '_' and '-' are allowed. If not specified by client, the server will generate one. The generated id will have the form of , where \"date\" is the create date in ISO 8601 format. \"revision number\" is a monotonically increasing positive number that is reset every day for each service. An example of the generated rollout_id is '2016-02-16r1'", alias="rolloutId")
    service_name: Optional[StrictStr] = Field(default=None, description="The name of the service associated with this Rollout.", alias="serviceName")
    status: Optional[StrictStr] = Field(default=None, description="The status of this rollout. Readonly. In case of a failed rollout, the system will automatically rollback to the current Rollout version. Readonly.")
    traffic_percent_strategy: Optional[TrafficPercentStrategy] = Field(default=None, alias="trafficPercentStrategy")
    __properties: ClassVar[List[str]] = ["createTime", "createdBy", "deleteServiceStrategy", "rolloutId", "serviceName", "status", "trafficPercentStrategy"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ROLLOUT_STATUS_UNSPECIFIED', 'IN_PROGRESS', 'SUCCESS', 'CANCELLED', 'FAILED', 'PENDING', 'FAILED_ROLLED_BACK']):
            raise ValueError("must be one of enum values ('ROLLOUT_STATUS_UNSPECIFIED', 'IN_PROGRESS', 'SUCCESS', 'CANCELLED', 'FAILED', 'PENDING', 'FAILED_ROLLED_BACK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Rollout from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of traffic_percent_strategy
        if self.traffic_percent_strategy:
            _dict['trafficPercentStrategy'] = self.traffic_percent_strategy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Rollout from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "createdBy": obj.get("createdBy"),
            "deleteServiceStrategy": obj.get("deleteServiceStrategy"),
            "rolloutId": obj.get("rolloutId"),
            "serviceName": obj.get("serviceName"),
            "status": obj.get("status"),
            "trafficPercentStrategy": TrafficPercentStrategy.from_dict(obj["trafficPercentStrategy"]) if obj.get("trafficPercentStrategy") is not None else None
        })
        return _obj



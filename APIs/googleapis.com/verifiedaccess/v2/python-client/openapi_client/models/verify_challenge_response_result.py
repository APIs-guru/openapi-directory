# coding: utf-8

"""
    Chrome Verified Access API

    API for Verified Access chrome extension to provide credential verification for chrome devices connecting to an enterprise network

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.device_signals import DeviceSignals
from typing import Optional, Set
from typing_extensions import Self

class VerifyChallengeResponseResult(BaseModel):
    """
    Result message for VerifiedAccess.VerifyChallengeResponse.
    """ # noqa: E501
    attested_device_id: Optional[StrictStr] = Field(default=None, description="Attested device ID (ADID).", alias="attestedDeviceId")
    customer_id: Optional[StrictStr] = Field(default=None, description="Unique customer id that this device belongs to, as defined by the Google Admin SDK at https://developers.google.com/admin-sdk/directory/v1/guides/manage-customers", alias="customerId")
    device_enrollment_id: Optional[StrictStr] = Field(default=None, description="Device enrollment id for ChromeOS devices.", alias="deviceEnrollmentId")
    device_permanent_id: Optional[StrictStr] = Field(default=None, description="Device permanent id is returned in this field (for the machine response only).", alias="devicePermanentId")
    device_signal: Optional[StrictStr] = Field(default=None, description="Deprecated. Device signal in json string representation. Prefer using `device_signals` instead.", alias="deviceSignal")
    device_signals: Optional[DeviceSignals] = Field(default=None, alias="deviceSignals")
    key_trust_level: Optional[StrictStr] = Field(default=None, description="Device attested key trust level.", alias="keyTrustLevel")
    profile_customer_id: Optional[StrictStr] = Field(default=None, description="Unique customer id that this profile belongs to, as defined by the Google Admin SDK at https://developers.google.com/admin-sdk/directory/v1/guides/manage-customers", alias="profileCustomerId")
    profile_key_trust_level: Optional[StrictStr] = Field(default=None, description="Profile attested key trust level.", alias="profileKeyTrustLevel")
    signed_public_key_and_challenge: Optional[StrictStr] = Field(default=None, description="Certificate Signing Request (in the SPKAC format, base64 encoded) is returned in this field. This field will be set only if device has included CSR in its challenge response. (the option to include CSR is now available for both user and machine responses)", alias="signedPublicKeyAndChallenge")
    virtual_device_id: Optional[StrictStr] = Field(default=None, description="Virtual device id of the device. The definition of virtual device id is platform-specific.", alias="virtualDeviceId")
    virtual_profile_id: Optional[StrictStr] = Field(default=None, description="The ID of a profile on the device.", alias="virtualProfileId")
    __properties: ClassVar[List[str]] = ["attestedDeviceId", "customerId", "deviceEnrollmentId", "devicePermanentId", "deviceSignal", "deviceSignals", "keyTrustLevel", "profileCustomerId", "profileKeyTrustLevel", "signedPublicKeyAndChallenge", "virtualDeviceId", "virtualProfileId"]

    @field_validator('key_trust_level')
    def key_trust_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KEY_TRUST_LEVEL_UNSPECIFIED', 'CHROME_OS_VERIFIED_MODE', 'CHROME_OS_DEVELOPER_MODE', 'CHROME_BROWSER_HW_KEY', 'CHROME_BROWSER_OS_KEY', 'CHROME_BROWSER_NO_KEY']):
            raise ValueError("must be one of enum values ('KEY_TRUST_LEVEL_UNSPECIFIED', 'CHROME_OS_VERIFIED_MODE', 'CHROME_OS_DEVELOPER_MODE', 'CHROME_BROWSER_HW_KEY', 'CHROME_BROWSER_OS_KEY', 'CHROME_BROWSER_NO_KEY')")
        return value

    @field_validator('profile_key_trust_level')
    def profile_key_trust_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KEY_TRUST_LEVEL_UNSPECIFIED', 'CHROME_OS_VERIFIED_MODE', 'CHROME_OS_DEVELOPER_MODE', 'CHROME_BROWSER_HW_KEY', 'CHROME_BROWSER_OS_KEY', 'CHROME_BROWSER_NO_KEY']):
            raise ValueError("must be one of enum values ('KEY_TRUST_LEVEL_UNSPECIFIED', 'CHROME_OS_VERIFIED_MODE', 'CHROME_OS_DEVELOPER_MODE', 'CHROME_BROWSER_HW_KEY', 'CHROME_BROWSER_OS_KEY', 'CHROME_BROWSER_NO_KEY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VerifyChallengeResponseResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of device_signals
        if self.device_signals:
            _dict['deviceSignals'] = self.device_signals.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VerifyChallengeResponseResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attestedDeviceId": obj.get("attestedDeviceId"),
            "customerId": obj.get("customerId"),
            "deviceEnrollmentId": obj.get("deviceEnrollmentId"),
            "devicePermanentId": obj.get("devicePermanentId"),
            "deviceSignal": obj.get("deviceSignal"),
            "deviceSignals": DeviceSignals.from_dict(obj["deviceSignals"]) if obj.get("deviceSignals") is not None else None,
            "keyTrustLevel": obj.get("keyTrustLevel"),
            "profileCustomerId": obj.get("profileCustomerId"),
            "profileKeyTrustLevel": obj.get("profileKeyTrustLevel"),
            "signedPublicKeyAndChallenge": obj.get("signedPublicKeyAndChallenge"),
            "virtualDeviceId": obj.get("virtualDeviceId"),
            "virtualProfileId": obj.get("virtualProfileId")
        })
        return _obj



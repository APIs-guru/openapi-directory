# coding: utf-8

"""
    Chrome Verified Access API

    API for Verified Access chrome extension to provide credential verification for chrome devices connecting to an enterprise network

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.device_signals import DeviceSignals

class TestDeviceSignals(unittest.TestCase):
    """DeviceSignals unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeviceSignals:
        """Test DeviceSignals
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeviceSignals`
        """
        model = DeviceSignals()
        if include_optional:
            return DeviceSignals(
                allow_screen_lock = True,
                browser_version = '',
                built_in_dns_client_enabled = True,
                chrome_remote_desktop_app_blocked = True,
                crowd_strike_agent = openapi_client.models.crowd_strike_agent.CrowdStrikeAgent(
                    agent_id = '', 
                    customer_id = '', ),
                device_affiliation_ids = [
                    ''
                    ],
                device_enrollment_domain = '',
                device_manufacturer = '',
                device_model = '',
                disk_encryption = 'DISK_ENCRYPTION_UNSPECIFIED',
                display_name = '',
                hostname = '',
                imei = [
                    ''
                    ],
                mac_addresses = [
                    ''
                    ],
                meid = [
                    ''
                    ],
                operating_system = 'OPERATING_SYSTEM_UNSPECIFIED',
                os_firewall = 'OS_FIREWALL_UNSPECIFIED',
                os_version = '',
                password_protection_warning_trigger = 'PASSWORD_PROTECTION_WARNING_TRIGGER_UNSPECIFIED',
                profile_affiliation_ids = [
                    ''
                    ],
                realtime_url_check_mode = 'REALTIME_URL_CHECK_MODE_UNSPECIFIED',
                safe_browsing_protection_level = 'SAFE_BROWSING_PROTECTION_LEVEL_UNSPECIFIED',
                screen_lock_secured = 'SCREEN_LOCK_SECURED_UNSPECIFIED',
                secure_boot_mode = 'SECURE_BOOT_MODE_UNSPECIFIED',
                serial_number = '',
                site_isolation_enabled = True,
                system_dns_servers = [
                    ''
                    ],
                third_party_blocking_enabled = True,
                trigger = 'TRIGGER_UNSPECIFIED',
                windows_machine_domain = '',
                windows_user_domain = ''
            )
        else:
            return DeviceSignals(
        )
        """

    def testDeviceSignals(self):
        """Test DeviceSignals"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

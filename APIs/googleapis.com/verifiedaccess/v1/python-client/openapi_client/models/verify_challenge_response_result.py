# coding: utf-8

"""
    Chrome Verified Access API

    API for Verified Access chrome extension to provide credential verification for chrome devices connecting to an enterprise network

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VerifyChallengeResponseResult(BaseModel):
    """
    Result message for VerifiedAccess.VerifyChallengeResponse.
    """ # noqa: E501
    attested_device_id: Optional[StrictStr] = Field(default=None, description="Attested device id (ADID) of the device, read from the verified data.", alias="attestedDeviceId")
    device_enrollment_id: Optional[StrictStr] = Field(default=None, description="Device enrollment id is returned in this field (for the machine response only).", alias="deviceEnrollmentId")
    device_permanent_id: Optional[StrictStr] = Field(default=None, description="Device permanent id is returned in this field (for the machine response only).", alias="devicePermanentId")
    signed_public_key_and_challenge: Optional[StrictStr] = Field(default=None, description="Certificate Signing Request (in the SPKAC format, base64 encoded) is returned in this field. This field will be set only if device has included CSR in its challenge response. (the option to include CSR is now available for both user and machine responses)", alias="signedPublicKeyAndChallenge")
    verification_output: Optional[StrictStr] = Field(default=None, description="For EMCert check, device permanent id is returned here. For EUCert check, signed_public_key_and_challenge [base64 encoded] is returned if present, otherwise empty string is returned. This field is deprecated, please use device_permanent_id or signed_public_key_and_challenge fields.", alias="verificationOutput")
    __properties: ClassVar[List[str]] = ["attestedDeviceId", "deviceEnrollmentId", "devicePermanentId", "signedPublicKeyAndChallenge", "verificationOutput"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VerifyChallengeResponseResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VerifyChallengeResponseResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attestedDeviceId": obj.get("attestedDeviceId"),
            "deviceEnrollmentId": obj.get("deviceEnrollmentId"),
            "devicePermanentId": obj.get("devicePermanentId"),
            "signedPublicKeyAndChallenge": obj.get("signedPublicKeyAndChallenge"),
            "verificationOutput": obj.get("verificationOutput")
        })
        return _obj



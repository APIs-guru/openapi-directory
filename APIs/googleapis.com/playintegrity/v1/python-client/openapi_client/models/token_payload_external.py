# coding: utf-8

"""
    Google Play Integrity API

    The Play Integrity API helps you check that you're interacting with your genuine app on a genuine Android device powered by Google Play services. The Play Integrity API has replaced SafetyNet Attestation and Android Device Verification.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_details import AccountDetails
from openapi_client.models.app_integrity import AppIntegrity
from openapi_client.models.device_integrity import DeviceIntegrity
from openapi_client.models.environment_details import EnvironmentDetails
from openapi_client.models.request_details import RequestDetails
from openapi_client.models.testing_details import TestingDetails
from typing import Optional, Set
from typing_extensions import Self

class TokenPayloadExternal(BaseModel):
    """
    Contains basic app information and integrity signals like device attestation and licensing details.
    """ # noqa: E501
    account_details: Optional[AccountDetails] = Field(default=None, alias="accountDetails")
    app_integrity: Optional[AppIntegrity] = Field(default=None, alias="appIntegrity")
    device_integrity: Optional[DeviceIntegrity] = Field(default=None, alias="deviceIntegrity")
    environment_details: Optional[EnvironmentDetails] = Field(default=None, alias="environmentDetails")
    request_details: Optional[RequestDetails] = Field(default=None, alias="requestDetails")
    testing_details: Optional[TestingDetails] = Field(default=None, alias="testingDetails")
    __properties: ClassVar[List[str]] = ["accountDetails", "appIntegrity", "deviceIntegrity", "environmentDetails", "requestDetails", "testingDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TokenPayloadExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account_details
        if self.account_details:
            _dict['accountDetails'] = self.account_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_integrity
        if self.app_integrity:
            _dict['appIntegrity'] = self.app_integrity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device_integrity
        if self.device_integrity:
            _dict['deviceIntegrity'] = self.device_integrity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of environment_details
        if self.environment_details:
            _dict['environmentDetails'] = self.environment_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_details
        if self.request_details:
            _dict['requestDetails'] = self.request_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of testing_details
        if self.testing_details:
            _dict['testingDetails'] = self.testing_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TokenPayloadExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountDetails": AccountDetails.from_dict(obj["accountDetails"]) if obj.get("accountDetails") is not None else None,
            "appIntegrity": AppIntegrity.from_dict(obj["appIntegrity"]) if obj.get("appIntegrity") is not None else None,
            "deviceIntegrity": DeviceIntegrity.from_dict(obj["deviceIntegrity"]) if obj.get("deviceIntegrity") is not None else None,
            "environmentDetails": EnvironmentDetails.from_dict(obj["environmentDetails"]) if obj.get("environmentDetails") is not None else None,
            "requestDetails": RequestDetails.from_dict(obj["requestDetails"]) if obj.get("requestDetails") is not None else None,
            "testingDetails": TestingDetails.from_dict(obj["testingDetails"]) if obj.get("testingDetails") is not None else None
        })
        return _obj



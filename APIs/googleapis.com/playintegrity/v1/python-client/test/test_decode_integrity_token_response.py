# coding: utf-8

"""
    Google Play Integrity API

    The Play Integrity API helps you check that you're interacting with your genuine app on a genuine Android device powered by Google Play services. The Play Integrity API has replaced SafetyNet Attestation and Android Device Verification.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.decode_integrity_token_response import DecodeIntegrityTokenResponse

class TestDecodeIntegrityTokenResponse(unittest.TestCase):
    """DecodeIntegrityTokenResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DecodeIntegrityTokenResponse:
        """Test DecodeIntegrityTokenResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DecodeIntegrityTokenResponse`
        """
        model = DecodeIntegrityTokenResponse()
        if include_optional:
            return DecodeIntegrityTokenResponse(
                token_payload_external = openapi_client.models.token_payload_external.TokenPayloadExternal(
                    account_details = openapi_client.models.account_details.AccountDetails(
                        account_activity = openapi_client.models.account_activity.AccountActivity(
                            activity_level = 'ACTIVITY_LEVEL_UNSPECIFIED', ), 
                        app_licensing_verdict = 'UNKNOWN', ), 
                    app_integrity = openapi_client.models.app_integrity.AppIntegrity(
                        app_recognition_verdict = 'UNKNOWN', 
                        certificate_sha256_digest = [
                            ''
                            ], 
                        package_name = '', 
                        version_code = '', ), 
                    device_integrity = openapi_client.models.device_integrity.DeviceIntegrity(
                        device_recognition_verdict = [
                            'UNKNOWN'
                            ], 
                        recent_device_activity = openapi_client.models.recent_device_activity.RecentDeviceActivity(
                            device_activity_level = 'DEVICE_ACTIVITY_LEVEL_UNSPECIFIED', ), ), 
                    environment_details = openapi_client.models.environment_details.EnvironmentDetails(
                        app_access_risk_verdict = openapi_client.models.app_access_risk_verdict.AppAccessRiskVerdict(
                            other_apps = 'UNKNOWN', 
                            play_or_system_apps = 'UNKNOWN', ), 
                        play_protect_verdict = 'PLAY_PROTECT_VERDICT_UNSPECIFIED', ), 
                    request_details = openapi_client.models.request_details.RequestDetails(
                        nonce = '', 
                        request_hash = '', 
                        request_package_name = '', 
                        timestamp_millis = '', ), 
                    testing_details = openapi_client.models.testing_details.TestingDetails(
                        is_testing_response = True, ), )
            )
        else:
            return DecodeIntegrityTokenResponse(
        )
        """

    def testDecodeIntegrityTokenResponse(self):
        """Test DecodeIntegrityTokenResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Google Keep API

    The Google Keep API is used in an enterprise environment to manage Google Keep content and resolve issues identified by cloud security software.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.text_content import TextContent
from typing import Optional, Set
from typing_extensions import Self

class ListItem(BaseModel):
    """
    A single list item in a note's list.
    """ # noqa: E501
    checked: Optional[StrictBool] = Field(default=None, description="Whether this item has been checked off or not.")
    child_list_items: Optional[List[ListItem]] = Field(default=None, description="If set, list of list items nested under this list item. Only one level of nesting is allowed.", alias="childListItems")
    text: Optional[TextContent] = None
    __properties: ClassVar[List[str]] = ["checked", "childListItems", "text"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in child_list_items (list)
        _items = []
        if self.child_list_items:
            for _item_child_list_items in self.child_list_items:
                if _item_child_list_items:
                    _items.append(_item_child_list_items.to_dict())
            _dict['childListItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of text
        if self.text:
            _dict['text'] = self.text.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checked": obj.get("checked"),
            "childListItems": [ListItem.from_dict(_item) for _item in obj["childListItems"]] if obj.get("childListItems") is not None else None,
            "text": TextContent.from_dict(obj["text"]) if obj.get("text") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
ListItem.model_rebuild(raise_errors=False)


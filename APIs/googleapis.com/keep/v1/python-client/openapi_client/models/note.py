# coding: utf-8

"""
    Google Keep API

    The Google Keep API is used in an enterprise environment to manage Google Keep content and resolve issues identified by cloud security software.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attachment import Attachment
from openapi_client.models.permission import Permission
from openapi_client.models.section import Section
from typing import Optional, Set
from typing_extensions import Self

class Note(BaseModel):
    """
    A single note.
    """ # noqa: E501
    attachments: Optional[List[Attachment]] = Field(default=None, description="Output only. The attachments attached to this note.")
    body: Optional[Section] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. When this note was created.", alias="createTime")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of this note. See general note on identifiers in KeepService.")
    permissions: Optional[List[Permission]] = Field(default=None, description="Output only. The list of permissions set on the note. Contains at least one entry for the note owner.")
    title: Optional[StrictStr] = Field(default=None, description="The title of the note. Length must be less than 1,000 characters.")
    trash_time: Optional[StrictStr] = Field(default=None, description="Output only. When this note was trashed. If `trashed`, the note is eventually deleted. If the note is not trashed, this field is not set (and the trashed field is `false`).", alias="trashTime")
    trashed: Optional[StrictBool] = Field(default=None, description="Output only. `true` if this note has been trashed. If trashed, the note is eventually deleted.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. When this note was last modified.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["attachments", "body", "createTime", "name", "permissions", "title", "trashTime", "trashed", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Note from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "attachments",
            "create_time",
            "name",
            "permissions",
            "trash_time",
            "trashed",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of body
        if self.body:
            _dict['body'] = self.body.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item_permissions in self.permissions:
                if _item_permissions:
                    _items.append(_item_permissions.to_dict())
            _dict['permissions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Note from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachments": [Attachment.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "body": Section.from_dict(obj["body"]) if obj.get("body") is not None else None,
            "createTime": obj.get("createTime"),
            "name": obj.get("name"),
            "permissions": [Permission.from_dict(_item) for _item in obj["permissions"]] if obj.get("permissions") is not None else None,
            "title": obj.get("title"),
            "trashTime": obj.get("trashTime"),
            "trashed": obj.get("trashed"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



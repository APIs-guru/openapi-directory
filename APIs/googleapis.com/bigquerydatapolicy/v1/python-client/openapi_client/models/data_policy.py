# coding: utf-8

"""
    BigQuery Data Policy API

    Allows users to manage BigQuery data policies.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_masking_policy import DataMaskingPolicy
from typing import Optional, Set
from typing_extensions import Self

class DataPolicy(BaseModel):
    """
    Represents the label-policy binding.
    """ # noqa: E501
    data_masking_policy: Optional[DataMaskingPolicy] = Field(default=None, alias="dataMaskingPolicy")
    data_policy_id: Optional[StrictStr] = Field(default=None, description="User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {data_policy_id} in part of the resource name.", alias="dataPolicyId")
    data_policy_type: Optional[StrictStr] = Field(default=None, description="Type of data policy.", alias="dataPolicyType")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of this data policy, in the format of `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.")
    policy_tag: Optional[StrictStr] = Field(default=None, description="Policy tag resource name, in the format of `projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}`.", alias="policyTag")
    __properties: ClassVar[List[str]] = ["dataMaskingPolicy", "dataPolicyId", "dataPolicyType", "name", "policyTag"]

    @field_validator('data_policy_type')
    def data_policy_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_POLICY_TYPE_UNSPECIFIED', 'COLUMN_LEVEL_SECURITY_POLICY', 'DATA_MASKING_POLICY']):
            raise ValueError("must be one of enum values ('DATA_POLICY_TYPE_UNSPECIFIED', 'COLUMN_LEVEL_SECURITY_POLICY', 'DATA_MASKING_POLICY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_masking_policy
        if self.data_masking_policy:
            _dict['dataMaskingPolicy'] = self.data_masking_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataMaskingPolicy": DataMaskingPolicy.from_dict(obj["dataMaskingPolicy"]) if obj.get("dataMaskingPolicy") is not None else None,
            "dataPolicyId": obj.get("dataPolicyId"),
            "dataPolicyType": obj.get("dataPolicyType"),
            "name": obj.get("name"),
            "policyTag": obj.get("policyTag")
        })
        return _obj



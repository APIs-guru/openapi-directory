# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_preference_sets_response import ListPreferenceSetsResponse

class TestListPreferenceSetsResponse(unittest.TestCase):
    """ListPreferenceSetsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListPreferenceSetsResponse:
        """Test ListPreferenceSetsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListPreferenceSetsResponse`
        """
        model = ListPreferenceSetsResponse()
        if include_optional:
            return ListPreferenceSetsResponse(
                next_page_token = '',
                preference_sets = [
                    openapi_client.models.preference_set.PreferenceSet(
                        create_time = '', 
                        description = '', 
                        display_name = '', 
                        name = '', 
                        update_time = '', 
                        virtual_machine_preferences = openapi_client.models.virtual_machine_preferences.VirtualMachinePreferences(
                            commitment_plan = 'COMMITMENT_PLAN_UNSPECIFIED', 
                            compute_engine_preferences = openapi_client.models.compute_engine_preferences.ComputeEnginePreferences(
                                license_type = 'LICENSE_TYPE_UNSPECIFIED', 
                                machine_preferences = openapi_client.models.machine_preferences.MachinePreferences(
                                    allowed_machine_series = [
                                        openapi_client.models.machine_series.MachineSeries(
                                            code = '', )
                                        ], ), 
                                persistent_disk_type = 'PERSISTENT_DISK_TYPE_UNSPECIFIED', ), 
                            region_preferences = openapi_client.models.region_preferences.RegionPreferences(
                                preferred_regions = [
                                    ''
                                    ], ), 
                            sizing_optimization_strategy = 'SIZING_OPTIMIZATION_STRATEGY_UNSPECIFIED', 
                            sole_tenancy_preferences = openapi_client.models.sole_tenancy_preferences.SoleTenancyPreferences(
                                commitment_plan = 'COMMITMENT_PLAN_UNSPECIFIED', 
                                cpu_overcommit_ratio = 1.337, 
                                host_maintenance_policy = 'HOST_MAINTENANCE_POLICY_UNSPECIFIED', 
                                node_types = [
                                    openapi_client.models.sole_tenant_node_type.SoleTenantNodeType(
                                        node_name = '', )
                                    ], ), 
                            target_product = 'COMPUTE_MIGRATION_TARGET_PRODUCT_UNSPECIFIED', 
                            vmware_engine_preferences = openapi_client.models.vmware_engine_preferences.VmwareEnginePreferences(
                                commitment_plan = 'COMMITMENT_PLAN_UNSPECIFIED', 
                                cpu_overcommit_ratio = 1.337, 
                                memory_overcommit_ratio = 1.337, 
                                storage_deduplication_compression_ratio = 1.337, ), ), )
                    ],
                unreachable = [
                    ''
                    ]
            )
        else:
            return ListPreferenceSetsResponse(
        )
        """

    def testListPreferenceSetsResponse(self):
        """Test ListPreferenceSetsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.daily_resource_usage_aggregation import DailyResourceUsageAggregation

class TestDailyResourceUsageAggregation(unittest.TestCase):
    """DailyResourceUsageAggregation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DailyResourceUsageAggregation:
        """Test DailyResourceUsageAggregation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DailyResourceUsageAggregation`
        """
        model = DailyResourceUsageAggregation()
        if include_optional:
            return DailyResourceUsageAggregation(
                cpu = openapi_client.models.daily_resource_usage_aggregation_cpu.DailyResourceUsageAggregationCPU(
                    utilization_percentage = openapi_client.models.daily_resource_usage_aggregation_stats.DailyResourceUsageAggregationStats(
                        average = 1.337, 
                        median = 1.337, 
                        nintey_fifth_percentile = 1.337, 
                        peak = 1.337, ), ),
                var_date = openapi_client.models.date.Date(
                    day = 56, 
                    month = 56, 
                    year = 56, ),
                disk = openapi_client.models.daily_resource_usage_aggregation_disk.DailyResourceUsageAggregationDisk(
                    iops = openapi_client.models.daily_resource_usage_aggregation_stats.DailyResourceUsageAggregationStats(
                        average = 1.337, 
                        median = 1.337, 
                        nintey_fifth_percentile = 1.337, 
                        peak = 1.337, ), ),
                memory = openapi_client.models.daily_resource_usage_aggregation_memory.DailyResourceUsageAggregationMemory(
                    utilization_percentage = openapi_client.models.daily_resource_usage_aggregation_stats.DailyResourceUsageAggregationStats(
                        average = 1.337, 
                        median = 1.337, 
                        nintey_fifth_percentile = 1.337, 
                        peak = 1.337, ), ),
                network = openapi_client.models.daily_resource_usage_aggregation_network.DailyResourceUsageAggregationNetwork(
                    egress_bps = openapi_client.models.daily_resource_usage_aggregation_stats.DailyResourceUsageAggregationStats(
                        average = 1.337, 
                        median = 1.337, 
                        nintey_fifth_percentile = 1.337, 
                        peak = 1.337, ), 
                    ingress_bps = openapi_client.models.daily_resource_usage_aggregation_stats.DailyResourceUsageAggregationStats(
                        average = 1.337, 
                        median = 1.337, 
                        nintey_fifth_percentile = 1.337, 
                        peak = 1.337, ), )
            )
        else:
            return DailyResourceUsageAggregation(
        )
        """

    def testDailyResourceUsageAggregation(self):
        """Test DailyResourceUsageAggregation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

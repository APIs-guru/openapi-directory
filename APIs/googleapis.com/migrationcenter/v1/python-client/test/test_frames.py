# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.frames import Frames

class TestFrames(unittest.TestCase):
    """Frames unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Frames:
        """Test Frames
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Frames`
        """
        model = Frames()
        if include_optional:
            return Frames(
                frames_data = [
                    openapi_client.models.asset_frame.AssetFrame(
                        attributes = {
                            'key' : ''
                            }, 
                        labels = {
                            'key' : ''
                            }, 
                        machine_details = openapi_client.models.machine_details.MachineDetails(
                            architecture = openapi_client.models.machine_architecture_details.MachineArchitectureDetails(
                                bios = openapi_client.models.bios_details.BiosDetails(
                                    bios_name = '', 
                                    id = '', 
                                    manufacturer = '', 
                                    release_date = openapi_client.models.date.Date(
                                        day = 56, 
                                        month = 56, 
                                        year = 56, ), 
                                    smbios_uuid = '', 
                                    version = '', ), 
                                cpu_architecture = '', 
                                cpu_name = '', 
                                cpu_socket_count = 56, 
                                cpu_thread_count = 56, 
                                firmware_type = 'FIRMWARE_TYPE_UNSPECIFIED', 
                                hyperthreading = 'CPU_HYPER_THREADING_UNSPECIFIED', 
                                vendor = '', ), 
                            core_count = 56, 
                            create_time = '', 
                            disks = openapi_client.models.machine_disk_details.MachineDiskDetails(
                                total_capacity_bytes = '', 
                                total_free_bytes = '', ), 
                            guest_os = openapi_client.models.guest_os_details.GuestOsDetails(
                                config = openapi_client.models.guest_config_details.GuestConfigDetails(
                                    fstab = openapi_client.models.fstab_entry_list.FstabEntryList(
                                        entries = [
                                            openapi_client.models.fstab_entry.FstabEntry(
                                                file = '', 
                                                freq = 56, 
                                                mntops = '', 
                                                passno = 56, 
                                                spec = '', 
                                                vfstype = '', )
                                            ], ), 
                                    hosts = openapi_client.models.hosts_entry_list.HostsEntryList(), 
                                    issue = '', 
                                    nfs_exports = openapi_client.models.nfs_export_list.NfsExportList(), 
                                    selinux_mode = 'SE_LINUX_MODE_UNSPECIFIED', ), 
                                family = 'OS_FAMILY_UNKNOWN', 
                                os_name = '', 
                                runtime = openapi_client.models.guest_runtime_details.GuestRuntimeDetails(
                                    domain = '', 
                                    installed_apps = openapi_client.models.guest_installed_application_list.GuestInstalledApplicationList(), 
                                    last_boot_time = '', 
                                    machine_name = '', 
                                    network = openapi_client.models.runtime_network_info.RuntimeNetworkInfo(
                                        connections = openapi_client.models.network_connection_list.NetworkConnectionList(), 
                                        scan_time = '', ), 
                                    open_file_list = openapi_client.models.open_file_list.OpenFileList(), 
                                    processes = openapi_client.models.running_process_list.RunningProcessList(), 
                                    services = openapi_client.models.running_service_list.RunningServiceList(), ), 
                                version = '', ), 
                            machine_name = '', 
                            memory_mb = 56, 
                            network = openapi_client.models.machine_network_details.MachineNetworkDetails(
                                adapters = openapi_client.models.network_adapter_list.NetworkAdapterList(), 
                                primary_ip_address = '', 
                                primary_mac_address = '', 
                                public_ip_address = '', ), 
                            platform = openapi_client.models.platform_details.PlatformDetails(
                                aws_ec2_details = openapi_client.models.aws_ec2_platform_details.AwsEc2PlatformDetails(
                                    location = '', 
                                    machine_type_label = '', ), 
                                azure_vm_details = openapi_client.models.azure_vm_platform_details.AzureVmPlatformDetails(
                                    location = '', 
                                    machine_type_label = '', 
                                    provisioning_state = '', ), 
                                generic_details = openapi_client.models.generic_platform_details.GenericPlatformDetails(
                                    location = '', ), 
                                physical_details = openapi_client.models.physical_platform_details.PhysicalPlatformDetails(
                                    location = '', ), 
                                vmware_details = openapi_client.models.vmware_platform_details.VmwarePlatformDetails(
                                    esx_version = '', 
                                    osid = '', 
                                    vcenter_folder = '', 
                                    vcenter_uri = '', 
                                    vcenter_version = '', 
                                    vcenter_vm_id = '', ), ), 
                            power_state = 'POWER_STATE_UNSPECIFIED', 
                            uuid = '', ), 
                        performance_samples = [
                            openapi_client.models.performance_sample.PerformanceSample(
                                cpu = openapi_client.models.cpu_usage_sample.CpuUsageSample(
                                    utilized_percentage = 1.337, ), 
                                disk = openapi_client.models.disk_usage_sample.DiskUsageSample(
                                    average_iops = 1.337, ), 
                                memory = openapi_client.models.memory_usage_sample.MemoryUsageSample(
                                    utilized_percentage = 1.337, ), 
                                sample_time = '', )
                            ], 
                        report_time = '', 
                        trace_token = '', )
                    ]
            )
        else:
            return Frames(
        )
        """

    def testFrames(self):
        """Test Frames"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.money import Money
from openapi_client.models.report_summary_compute_engine_finding import ReportSummaryComputeEngineFinding
from openapi_client.models.report_summary_sole_tenant_finding import ReportSummarySoleTenantFinding
from openapi_client.models.report_summary_vmware_engine_finding import ReportSummaryVmwareEngineFinding
from openapi_client.models.virtual_machine_preferences import VirtualMachinePreferences
from typing import Optional, Set
from typing_extensions import Self

class ReportSummaryGroupPreferenceSetFinding(BaseModel):
    """
    Summary Findings for a specific Group/PreferenceSet combination.
    """ # noqa: E501
    compute_engine_finding: Optional[ReportSummaryComputeEngineFinding] = Field(default=None, alias="computeEngineFinding")
    description: Optional[StrictStr] = Field(default=None, description="Description for the Preference Set.")
    display_name: Optional[StrictStr] = Field(default=None, description="Display Name of the Preference Set", alias="displayName")
    machine_preferences: Optional[VirtualMachinePreferences] = Field(default=None, alias="machinePreferences")
    monthly_cost_compute: Optional[Money] = Field(default=None, alias="monthlyCostCompute")
    monthly_cost_network_egress: Optional[Money] = Field(default=None, alias="monthlyCostNetworkEgress")
    monthly_cost_os_license: Optional[Money] = Field(default=None, alias="monthlyCostOsLicense")
    monthly_cost_other: Optional[Money] = Field(default=None, alias="monthlyCostOther")
    monthly_cost_storage: Optional[Money] = Field(default=None, alias="monthlyCostStorage")
    monthly_cost_total: Optional[Money] = Field(default=None, alias="monthlyCostTotal")
    sole_tenant_finding: Optional[ReportSummarySoleTenantFinding] = Field(default=None, alias="soleTenantFinding")
    vmware_engine_finding: Optional[ReportSummaryVmwareEngineFinding] = Field(default=None, alias="vmwareEngineFinding")
    __properties: ClassVar[List[str]] = ["computeEngineFinding", "description", "displayName", "machinePreferences", "monthlyCostCompute", "monthlyCostNetworkEgress", "monthlyCostOsLicense", "monthlyCostOther", "monthlyCostStorage", "monthlyCostTotal", "soleTenantFinding", "vmwareEngineFinding"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportSummaryGroupPreferenceSetFinding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of compute_engine_finding
        if self.compute_engine_finding:
            _dict['computeEngineFinding'] = self.compute_engine_finding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of machine_preferences
        if self.machine_preferences:
            _dict['machinePreferences'] = self.machine_preferences.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monthly_cost_compute
        if self.monthly_cost_compute:
            _dict['monthlyCostCompute'] = self.monthly_cost_compute.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monthly_cost_network_egress
        if self.monthly_cost_network_egress:
            _dict['monthlyCostNetworkEgress'] = self.monthly_cost_network_egress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monthly_cost_os_license
        if self.monthly_cost_os_license:
            _dict['monthlyCostOsLicense'] = self.monthly_cost_os_license.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monthly_cost_other
        if self.monthly_cost_other:
            _dict['monthlyCostOther'] = self.monthly_cost_other.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monthly_cost_storage
        if self.monthly_cost_storage:
            _dict['monthlyCostStorage'] = self.monthly_cost_storage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monthly_cost_total
        if self.monthly_cost_total:
            _dict['monthlyCostTotal'] = self.monthly_cost_total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sole_tenant_finding
        if self.sole_tenant_finding:
            _dict['soleTenantFinding'] = self.sole_tenant_finding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vmware_engine_finding
        if self.vmware_engine_finding:
            _dict['vmwareEngineFinding'] = self.vmware_engine_finding.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportSummaryGroupPreferenceSetFinding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computeEngineFinding": ReportSummaryComputeEngineFinding.from_dict(obj["computeEngineFinding"]) if obj.get("computeEngineFinding") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "machinePreferences": VirtualMachinePreferences.from_dict(obj["machinePreferences"]) if obj.get("machinePreferences") is not None else None,
            "monthlyCostCompute": Money.from_dict(obj["monthlyCostCompute"]) if obj.get("monthlyCostCompute") is not None else None,
            "monthlyCostNetworkEgress": Money.from_dict(obj["monthlyCostNetworkEgress"]) if obj.get("monthlyCostNetworkEgress") is not None else None,
            "monthlyCostOsLicense": Money.from_dict(obj["monthlyCostOsLicense"]) if obj.get("monthlyCostOsLicense") is not None else None,
            "monthlyCostOther": Money.from_dict(obj["monthlyCostOther"]) if obj.get("monthlyCostOther") is not None else None,
            "monthlyCostStorage": Money.from_dict(obj["monthlyCostStorage"]) if obj.get("monthlyCostStorage") is not None else None,
            "monthlyCostTotal": Money.from_dict(obj["monthlyCostTotal"]) if obj.get("monthlyCostTotal") is not None else None,
            "soleTenantFinding": ReportSummarySoleTenantFinding.from_dict(obj["soleTenantFinding"]) if obj.get("soleTenantFinding") is not None else None,
            "vmwareEngineFinding": ReportSummaryVmwareEngineFinding.from_dict(obj["vmwareEngineFinding"]) if obj.get("vmwareEngineFinding") is not None else None
        })
        return _obj



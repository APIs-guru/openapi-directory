# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.asset_performance_data import AssetPerformanceData
from openapi_client.models.insight_list import InsightList
from openapi_client.models.machine_details import MachineDetails
from typing import Optional, Set
from typing_extensions import Self

class Asset(BaseModel):
    """
    An asset represents a resource in your environment. Asset types include virtual machines and databases.
    """ # noqa: E501
    assigned_groups: Optional[List[StrictStr]] = Field(default=None, description="Output only. The list of groups that the asset is assigned to.", alias="assignedGroups")
    attributes: Optional[Dict[str, StrictStr]] = Field(default=None, description="Generic asset attributes.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the asset was created.", alias="createTime")
    insight_list: Optional[InsightList] = Field(default=None, alias="insightList")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels as key value pairs.")
    machine_details: Optional[MachineDetails] = Field(default=None, alias="machineDetails")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The full name of the asset.")
    performance_data: Optional[AssetPerformanceData] = Field(default=None, alias="performanceData")
    sources: Optional[List[StrictStr]] = Field(default=None, description="Output only. The list of sources contributing to the asset.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the asset was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["assignedGroups", "attributes", "createTime", "insightList", "labels", "machineDetails", "name", "performanceData", "sources", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Asset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "assigned_groups",
            "create_time",
            "name",
            "sources",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of insight_list
        if self.insight_list:
            _dict['insightList'] = self.insight_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of machine_details
        if self.machine_details:
            _dict['machineDetails'] = self.machine_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of performance_data
        if self.performance_data:
            _dict['performanceData'] = self.performance_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Asset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assignedGroups": obj.get("assignedGroups"),
            "attributes": obj.get("attributes"),
            "createTime": obj.get("createTime"),
            "insightList": InsightList.from_dict(obj["insightList"]) if obj.get("insightList") is not None else None,
            "labels": obj.get("labels"),
            "machineDetails": MachineDetails.from_dict(obj["machineDetails"]) if obj.get("machineDetails") is not None else None,
            "name": obj.get("name"),
            "performanceData": AssetPerformanceData.from_dict(obj["performanceData"]) if obj.get("performanceData") is not None else None,
            "sources": obj.get("sources"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bios_details import BiosDetails
from typing import Optional, Set
from typing_extensions import Self

class MachineArchitectureDetails(BaseModel):
    """
    Details of the machine architecture.
    """ # noqa: E501
    bios: Optional[BiosDetails] = None
    cpu_architecture: Optional[StrictStr] = Field(default=None, description="CPU architecture, e.g., \"x64-based PC\", \"x86_64\", \"i686\" etc.", alias="cpuArchitecture")
    cpu_name: Optional[StrictStr] = Field(default=None, description="CPU name, e.g., \"Intel Xeon E5-2690\", \"AMD EPYC 7571\" etc.", alias="cpuName")
    cpu_socket_count: Optional[StrictInt] = Field(default=None, description="Number of processor sockets allocated to the machine.", alias="cpuSocketCount")
    cpu_thread_count: Optional[StrictInt] = Field(default=None, description="Number of CPU threads allocated to the machine.", alias="cpuThreadCount")
    firmware_type: Optional[StrictStr] = Field(default=None, description="Firmware type.", alias="firmwareType")
    hyperthreading: Optional[StrictStr] = Field(default=None, description="CPU hyper-threading support.")
    vendor: Optional[StrictStr] = Field(default=None, description="Hardware vendor.")
    __properties: ClassVar[List[str]] = ["bios", "cpuArchitecture", "cpuName", "cpuSocketCount", "cpuThreadCount", "firmwareType", "hyperthreading", "vendor"]

    @field_validator('firmware_type')
    def firmware_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FIRMWARE_TYPE_UNSPECIFIED', 'BIOS', 'EFI']):
            raise ValueError("must be one of enum values ('FIRMWARE_TYPE_UNSPECIFIED', 'BIOS', 'EFI')")
        return value

    @field_validator('hyperthreading')
    def hyperthreading_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CPU_HYPER_THREADING_UNSPECIFIED', 'DISABLED', 'ENABLED']):
            raise ValueError("must be one of enum values ('CPU_HYPER_THREADING_UNSPECIFIED', 'DISABLED', 'ENABLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MachineArchitectureDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bios
        if self.bios:
            _dict['bios'] = self.bios.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MachineArchitectureDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bios": BiosDetails.from_dict(obj["bios"]) if obj.get("bios") is not None else None,
            "cpuArchitecture": obj.get("cpuArchitecture"),
            "cpuName": obj.get("cpuName"),
            "cpuSocketCount": obj.get("cpuSocketCount"),
            "cpuThreadCount": obj.get("cpuThreadCount"),
            "firmwareType": obj.get("firmwareType"),
            "hyperthreading": obj.get("hyperthreading"),
            "vendor": obj.get("vendor")
        })
        return _obj



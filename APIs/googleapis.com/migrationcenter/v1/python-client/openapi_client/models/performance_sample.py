# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cpu_usage_sample import CpuUsageSample
from openapi_client.models.disk_usage_sample import DiskUsageSample
from openapi_client.models.memory_usage_sample import MemoryUsageSample
from openapi_client.models.network_usage_sample import NetworkUsageSample
from typing import Optional, Set
from typing_extensions import Self

class PerformanceSample(BaseModel):
    """
    Performance data sample.
    """ # noqa: E501
    cpu: Optional[CpuUsageSample] = None
    disk: Optional[DiskUsageSample] = None
    memory: Optional[MemoryUsageSample] = None
    network: Optional[NetworkUsageSample] = None
    sample_time: Optional[StrictStr] = Field(default=None, description="Time the sample was collected. If omitted, the frame report time will be used.", alias="sampleTime")
    __properties: ClassVar[List[str]] = ["cpu", "disk", "memory", "network", "sampleTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PerformanceSample from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cpu
        if self.cpu:
            _dict['cpu'] = self.cpu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disk
        if self.disk:
            _dict['disk'] = self.disk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of memory
        if self.memory:
            _dict['memory'] = self.memory.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network
        if self.network:
            _dict['network'] = self.network.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PerformanceSample from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cpu": CpuUsageSample.from_dict(obj["cpu"]) if obj.get("cpu") is not None else None,
            "disk": DiskUsageSample.from_dict(obj["disk"]) if obj.get("disk") is not None else None,
            "memory": MemoryUsageSample.from_dict(obj["memory"]) if obj.get("memory") is not None else None,
            "network": NetworkUsageSample.from_dict(obj["network"]) if obj.get("network") is not None else None,
            "sampleTime": obj.get("sampleTime")
        })
        return _obj



# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.execution_report import ExecutionReport
from openapi_client.models.validation_report import ValidationReport
from typing import Optional, Set
from typing_extensions import Self

class ImportJob(BaseModel):
    """
    A resource that represents the background job that imports asset frames.
    """ # noqa: E501
    asset_source: Optional[StrictStr] = Field(default=None, description="Required. Reference to a source.", alias="assetSource")
    complete_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the import job was completed.", alias="completeTime")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the import job was created.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. User-friendly display name. Maximum length is 256 characters.", alias="displayName")
    execution_report: Optional[ExecutionReport] = Field(default=None, alias="executionReport")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels as key value pairs.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The full name of the import job.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the import job.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the import job was last updated.", alias="updateTime")
    validation_report: Optional[ValidationReport] = Field(default=None, alias="validationReport")
    __properties: ClassVar[List[str]] = ["assetSource", "completeTime", "createTime", "displayName", "executionReport", "labels", "name", "state", "updateTime", "validationReport"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IMPORT_JOB_STATE_UNSPECIFIED', 'IMPORT_JOB_STATE_PENDING', 'IMPORT_JOB_STATE_RUNNING', 'IMPORT_JOB_STATE_COMPLETED', 'IMPORT_JOB_STATE_FAILED', 'IMPORT_JOB_STATE_VALIDATING', 'IMPORT_JOB_STATE_FAILED_VALIDATION', 'IMPORT_JOB_STATE_READY']):
            raise ValueError("must be one of enum values ('IMPORT_JOB_STATE_UNSPECIFIED', 'IMPORT_JOB_STATE_PENDING', 'IMPORT_JOB_STATE_RUNNING', 'IMPORT_JOB_STATE_COMPLETED', 'IMPORT_JOB_STATE_FAILED', 'IMPORT_JOB_STATE_VALIDATING', 'IMPORT_JOB_STATE_FAILED_VALIDATION', 'IMPORT_JOB_STATE_READY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImportJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "complete_time",
            "create_time",
            "name",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of execution_report
        if self.execution_report:
            _dict['executionReport'] = self.execution_report.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validation_report
        if self.validation_report:
            _dict['validationReport'] = self.validation_report.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImportJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetSource": obj.get("assetSource"),
            "completeTime": obj.get("completeTime"),
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "executionReport": ExecutionReport.from_dict(obj["executionReport"]) if obj.get("executionReport") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime"),
            "validationReport": ValidationReport.from_dict(obj["validationReport"]) if obj.get("validationReport") is not None else None
        })
        return _obj



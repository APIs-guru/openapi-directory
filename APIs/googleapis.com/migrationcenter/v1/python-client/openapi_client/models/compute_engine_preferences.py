# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.machine_preferences import MachinePreferences
from typing import Optional, Set
from typing_extensions import Self

class ComputeEnginePreferences(BaseModel):
    """
    The user preferences relating to Compute Engine target platform.
    """ # noqa: E501
    license_type: Optional[StrictStr] = Field(default=None, description="License type to consider when calculating costs for virtual machine insights and recommendations. If unspecified, costs are calculated based on the default licensing plan.", alias="licenseType")
    machine_preferences: Optional[MachinePreferences] = Field(default=None, alias="machinePreferences")
    persistent_disk_type: Optional[StrictStr] = Field(default=None, description="Persistent disk type to use. If unspecified (default), all types are considered, based on available usage data.", alias="persistentDiskType")
    __properties: ClassVar[List[str]] = ["licenseType", "machinePreferences", "persistentDiskType"]

    @field_validator('license_type')
    def license_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LICENSE_TYPE_UNSPECIFIED', 'LICENSE_TYPE_DEFAULT', 'LICENSE_TYPE_BRING_YOUR_OWN_LICENSE']):
            raise ValueError("must be one of enum values ('LICENSE_TYPE_UNSPECIFIED', 'LICENSE_TYPE_DEFAULT', 'LICENSE_TYPE_BRING_YOUR_OWN_LICENSE')")
        return value

    @field_validator('persistent_disk_type')
    def persistent_disk_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PERSISTENT_DISK_TYPE_UNSPECIFIED', 'PERSISTENT_DISK_TYPE_STANDARD', 'PERSISTENT_DISK_TYPE_BALANCED', 'PERSISTENT_DISK_TYPE_SSD']):
            raise ValueError("must be one of enum values ('PERSISTENT_DISK_TYPE_UNSPECIFIED', 'PERSISTENT_DISK_TYPE_STANDARD', 'PERSISTENT_DISK_TYPE_BALANCED', 'PERSISTENT_DISK_TYPE_SSD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComputeEnginePreferences from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of machine_preferences
        if self.machine_preferences:
            _dict['machinePreferences'] = self.machine_preferences.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComputeEnginePreferences from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "licenseType": obj.get("licenseType"),
            "machinePreferences": MachinePreferences.from_dict(obj["machinePreferences"]) if obj.get("machinePreferences") is not None else None,
            "persistentDiskType": obj.get("persistentDiskType")
        })
        return _obj



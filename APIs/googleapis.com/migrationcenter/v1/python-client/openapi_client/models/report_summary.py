# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.report_summary_asset_aggregate_stats import ReportSummaryAssetAggregateStats
from openapi_client.models.report_summary_group_finding import ReportSummaryGroupFinding
from typing import Optional, Set
from typing_extensions import Self

class ReportSummary(BaseModel):
    """
    Describes the Summary view of a Report, which contains aggregated values for all the groups and preference sets included in this Report.
    """ # noqa: E501
    all_assets_stats: Optional[ReportSummaryAssetAggregateStats] = Field(default=None, alias="allAssetsStats")
    group_findings: Optional[List[ReportSummaryGroupFinding]] = Field(default=None, description="Findings for each Group included in this report.", alias="groupFindings")
    __properties: ClassVar[List[str]] = ["allAssetsStats", "groupFindings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of all_assets_stats
        if self.all_assets_stats:
            _dict['allAssetsStats'] = self.all_assets_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in group_findings (list)
        _items = []
        if self.group_findings:
            for _item_group_findings in self.group_findings:
                if _item_group_findings:
                    _items.append(_item_group_findings.to_dict())
            _dict['groupFindings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allAssetsStats": ReportSummaryAssetAggregateStats.from_dict(obj["allAssetsStats"]) if obj.get("allAssetsStats") is not None else None,
            "groupFindings": [ReportSummaryGroupFinding.from_dict(_item) for _item in obj["groupFindings"]] if obj.get("groupFindings") is not None else None
        })
        return _obj



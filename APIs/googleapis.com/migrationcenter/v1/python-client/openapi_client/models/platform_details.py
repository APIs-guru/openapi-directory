# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aws_ec2_platform_details import AwsEc2PlatformDetails
from openapi_client.models.azure_vm_platform_details import AzureVmPlatformDetails
from openapi_client.models.generic_platform_details import GenericPlatformDetails
from openapi_client.models.physical_platform_details import PhysicalPlatformDetails
from openapi_client.models.vmware_platform_details import VmwarePlatformDetails
from typing import Optional, Set
from typing_extensions import Self

class PlatformDetails(BaseModel):
    """
    Information about the platform.
    """ # noqa: E501
    aws_ec2_details: Optional[AwsEc2PlatformDetails] = Field(default=None, alias="awsEc2Details")
    azure_vm_details: Optional[AzureVmPlatformDetails] = Field(default=None, alias="azureVmDetails")
    generic_details: Optional[GenericPlatformDetails] = Field(default=None, alias="genericDetails")
    physical_details: Optional[PhysicalPlatformDetails] = Field(default=None, alias="physicalDetails")
    vmware_details: Optional[VmwarePlatformDetails] = Field(default=None, alias="vmwareDetails")
    __properties: ClassVar[List[str]] = ["awsEc2Details", "azureVmDetails", "genericDetails", "physicalDetails", "vmwareDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlatformDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aws_ec2_details
        if self.aws_ec2_details:
            _dict['awsEc2Details'] = self.aws_ec2_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_vm_details
        if self.azure_vm_details:
            _dict['azureVmDetails'] = self.azure_vm_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of generic_details
        if self.generic_details:
            _dict['genericDetails'] = self.generic_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of physical_details
        if self.physical_details:
            _dict['physicalDetails'] = self.physical_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vmware_details
        if self.vmware_details:
            _dict['vmwareDetails'] = self.vmware_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlatformDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "awsEc2Details": AwsEc2PlatformDetails.from_dict(obj["awsEc2Details"]) if obj.get("awsEc2Details") is not None else None,
            "azureVmDetails": AzureVmPlatformDetails.from_dict(obj["azureVmDetails"]) if obj.get("azureVmDetails") is not None else None,
            "genericDetails": GenericPlatformDetails.from_dict(obj["genericDetails"]) if obj.get("genericDetails") is not None else None,
            "physicalDetails": PhysicalPlatformDetails.from_dict(obj["physicalDetails"]) if obj.get("physicalDetails") is not None else None,
            "vmwareDetails": VmwarePlatformDetails.from_dict(obj["vmwareDetails"]) if obj.get("vmwareDetails") is not None else None
        })
        return _obj



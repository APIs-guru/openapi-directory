# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.sole_tenant_node_type import SoleTenantNodeType
from typing import Optional, Set
from typing_extensions import Self

class SoleTenancyPreferences(BaseModel):
    """
    Preferences concerning Sole Tenancy nodes and VMs.
    """ # noqa: E501
    commitment_plan: Optional[StrictStr] = Field(default=None, description="Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.", alias="commitmentPlan")
    cpu_overcommit_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="CPU overcommit ratio. Acceptable values are between 1.0 and 2.0 inclusive.", alias="cpuOvercommitRatio")
    host_maintenance_policy: Optional[StrictStr] = Field(default=None, description="Sole Tenancy nodes maintenance policy.", alias="hostMaintenancePolicy")
    node_types: Optional[List[SoleTenantNodeType]] = Field(default=None, description="A list of sole tenant node types. An empty list means that all possible node types will be considered.", alias="nodeTypes")
    __properties: ClassVar[List[str]] = ["commitmentPlan", "cpuOvercommitRatio", "hostMaintenancePolicy", "nodeTypes"]

    @field_validator('commitment_plan')
    def commitment_plan_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMMITMENT_PLAN_UNSPECIFIED', 'ON_DEMAND', 'COMMITMENT_1_YEAR', 'COMMITMENT_3_YEAR']):
            raise ValueError("must be one of enum values ('COMMITMENT_PLAN_UNSPECIFIED', 'ON_DEMAND', 'COMMITMENT_1_YEAR', 'COMMITMENT_3_YEAR')")
        return value

    @field_validator('host_maintenance_policy')
    def host_maintenance_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HOST_MAINTENANCE_POLICY_UNSPECIFIED', 'HOST_MAINTENANCE_POLICY_DEFAULT', 'HOST_MAINTENANCE_POLICY_RESTART_IN_PLACE', 'HOST_MAINTENANCE_POLICY_MIGRATE_WITHIN_NODE_GROUP']):
            raise ValueError("must be one of enum values ('HOST_MAINTENANCE_POLICY_UNSPECIFIED', 'HOST_MAINTENANCE_POLICY_DEFAULT', 'HOST_MAINTENANCE_POLICY_RESTART_IN_PLACE', 'HOST_MAINTENANCE_POLICY_MIGRATE_WITHIN_NODE_GROUP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SoleTenancyPreferences from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in node_types (list)
        _items = []
        if self.node_types:
            for _item_node_types in self.node_types:
                if _item_node_types:
                    _items.append(_item_node_types.to_dict())
            _dict['nodeTypes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SoleTenancyPreferences from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commitmentPlan": obj.get("commitmentPlan"),
            "cpuOvercommitRatio": obj.get("cpuOvercommitRatio"),
            "hostMaintenancePolicy": obj.get("hostMaintenancePolicy"),
            "nodeTypes": [SoleTenantNodeType.from_dict(_item) for _item in obj["nodeTypes"]] if obj.get("nodeTypes") is not None else None
        })
        return _obj



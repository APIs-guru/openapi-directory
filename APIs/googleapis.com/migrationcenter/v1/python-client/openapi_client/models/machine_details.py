# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.guest_os_details import GuestOsDetails
from openapi_client.models.machine_architecture_details import MachineArchitectureDetails
from openapi_client.models.machine_disk_details import MachineDiskDetails
from openapi_client.models.machine_network_details import MachineNetworkDetails
from openapi_client.models.platform_details import PlatformDetails
from typing import Optional, Set
from typing_extensions import Self

class MachineDetails(BaseModel):
    """
    Details of a machine.
    """ # noqa: E501
    architecture: Optional[MachineArchitectureDetails] = None
    core_count: Optional[StrictInt] = Field(default=None, description="Number of CPU cores in the machine. Must be non-negative.", alias="coreCount")
    create_time: Optional[StrictStr] = Field(default=None, description="Machine creation time.", alias="createTime")
    disks: Optional[MachineDiskDetails] = None
    guest_os: Optional[GuestOsDetails] = Field(default=None, alias="guestOs")
    machine_name: Optional[StrictStr] = Field(default=None, description="Machine name.", alias="machineName")
    memory_mb: Optional[StrictInt] = Field(default=None, description="The amount of memory in the machine. Must be non-negative.", alias="memoryMb")
    network: Optional[MachineNetworkDetails] = None
    platform: Optional[PlatformDetails] = None
    power_state: Optional[StrictStr] = Field(default=None, description="Power state of the machine.", alias="powerState")
    uuid: Optional[StrictStr] = Field(default=None, description="Machine unique identifier.")
    __properties: ClassVar[List[str]] = ["architecture", "coreCount", "createTime", "disks", "guestOs", "machineName", "memoryMb", "network", "platform", "powerState", "uuid"]

    @field_validator('power_state')
    def power_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['POWER_STATE_UNSPECIFIED', 'PENDING', 'ACTIVE', 'SUSPENDING', 'SUSPENDED', 'DELETING', 'DELETED']):
            raise ValueError("must be one of enum values ('POWER_STATE_UNSPECIFIED', 'PENDING', 'ACTIVE', 'SUSPENDING', 'SUSPENDED', 'DELETING', 'DELETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MachineDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of architecture
        if self.architecture:
            _dict['architecture'] = self.architecture.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disks
        if self.disks:
            _dict['disks'] = self.disks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of guest_os
        if self.guest_os:
            _dict['guestOs'] = self.guest_os.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network
        if self.network:
            _dict['network'] = self.network.to_dict()
        # override the default output from pydantic by calling `to_dict()` of platform
        if self.platform:
            _dict['platform'] = self.platform.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MachineDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "architecture": MachineArchitectureDetails.from_dict(obj["architecture"]) if obj.get("architecture") is not None else None,
            "coreCount": obj.get("coreCount"),
            "createTime": obj.get("createTime"),
            "disks": MachineDiskDetails.from_dict(obj["disks"]) if obj.get("disks") is not None else None,
            "guestOs": GuestOsDetails.from_dict(obj["guestOs"]) if obj.get("guestOs") is not None else None,
            "machineName": obj.get("machineName"),
            "memoryMb": obj.get("memoryMb"),
            "network": MachineNetworkDetails.from_dict(obj["network"]) if obj.get("network") is not None else None,
            "platform": PlatformDetails.from_dict(obj["platform"]) if obj.get("platform") is not None else None,
            "powerState": obj.get("powerState"),
            "uuid": obj.get("uuid")
        })
        return _obj



# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RunningService(BaseModel):
    """
    Guest OS running service details.
    """ # noqa: E501
    cmdline: Optional[StrictStr] = Field(default=None, description="Service command line.")
    exe_path: Optional[StrictStr] = Field(default=None, description="Service binary path.", alias="exePath")
    pid: Optional[StrictStr] = Field(default=None, description="Service pid.")
    service_name: Optional[StrictStr] = Field(default=None, description="Service name.", alias="serviceName")
    start_mode: Optional[StrictStr] = Field(default=None, description="Service start mode (OS-agnostic).", alias="startMode")
    state: Optional[StrictStr] = Field(default=None, description="Service state (OS-agnostic).")
    __properties: ClassVar[List[str]] = ["cmdline", "exePath", "pid", "serviceName", "startMode", "state"]

    @field_validator('start_mode')
    def start_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['START_MODE_UNSPECIFIED', 'BOOT', 'SYSTEM', 'AUTO', 'MANUAL', 'DISABLED']):
            raise ValueError("must be one of enum values ('START_MODE_UNSPECIFIED', 'BOOT', 'SYSTEM', 'AUTO', 'MANUAL', 'DISABLED')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'PAUSED', 'STOPPED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'PAUSED', 'STOPPED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunningService from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunningService from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cmdline": obj.get("cmdline"),
            "exePath": obj.get("exePath"),
            "pid": obj.get("pid"),
            "serviceName": obj.get("serviceName"),
            "startMode": obj.get("startMode"),
            "state": obj.get("state")
        })
        return _obj



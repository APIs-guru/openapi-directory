# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.batch_update_assets_request import BatchUpdateAssetsRequest

class TestBatchUpdateAssetsRequest(unittest.TestCase):
    """BatchUpdateAssetsRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BatchUpdateAssetsRequest:
        """Test BatchUpdateAssetsRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BatchUpdateAssetsRequest`
        """
        model = BatchUpdateAssetsRequest()
        if include_optional:
            return BatchUpdateAssetsRequest(
                requests = [
                    openapi_client.models.update_asset_request.UpdateAssetRequest(
                        asset = openapi_client.models.asset.Asset(
                            assigned_groups = [
                                ''
                                ], 
                            attributes = {
                                'key' : ''
                                }, 
                            create_time = '', 
                            hidden = True, 
                            hide_reason = '', 
                            hide_time = '', 
                            insight_list = openapi_client.models.insight_list.InsightList(
                                insights = [
                                    openapi_client.models.insight.Insight(
                                        generic_insight = openapi_client.models.generic_insight.GenericInsight(
                                            additional_information = [
                                                ''
                                                ], 
                                            default_message = '', 
                                            message_id = '', ), 
                                        migration_insight = openapi_client.models.migration_insight.MigrationInsight(
                                            compute_engine_sole_tenant_target = openapi_client.models.compute_engine_sole_tenant_migration_target.ComputeEngineSoleTenantMigrationTarget(), 
                                            compute_engine_target = openapi_client.models.compute_engine_migration_target.ComputeEngineMigrationTarget(
                                                shape = openapi_client.models.compute_engine_shape_descriptor.ComputeEngineShapeDescriptor(
                                                    logical_core_count = 56, 
                                                    machine_type = '', 
                                                    memory_mb = 56, 
                                                    physical_core_count = 56, 
                                                    series = '', 
                                                    storage = [
                                                        openapi_client.models.compute_storage_descriptor.ComputeStorageDescriptor(
                                                            size_gb = 56, 
                                                            type = 'PERSISTENT_DISK_TYPE_UNSPECIFIED', )
                                                        ], ), ), 
                                            fit = openapi_client.models.fit_descriptor.FitDescriptor(
                                                fit_level = 'FIT_LEVEL_UNSPECIFIED', ), 
                                            gke_target = openapi_client.models.google_kubernetes_engine_migration_target.GoogleKubernetesEngineMigrationTarget(), 
                                            vmware_engine_target = openapi_client.models.vmware_engine_migration_target.VmwareEngineMigrationTarget(), ), 
                                        software_insight = openapi_client.models.software_insight.SoftwareInsight(
                                            detected_software = openapi_client.models.detected_software.DetectedSoftware(
                                                software_family = '', 
                                                software_name = '', ), ), )
                                    ], 
                                update_time = '', ), 
                            labels = {
                                'key' : ''
                                }, 
                            name = '', 
                            performance_data = openapi_client.models.asset_performance_data.AssetPerformanceData(
                                daily_resource_usage_aggregations = [
                                    openapi_client.models.daily_resource_usage_aggregation.DailyResourceUsageAggregation(
                                        cpu = openapi_client.models.daily_resource_usage_aggregation_cpu.DailyResourceUsageAggregationCPU(
                                            utilization_percentage = openapi_client.models.daily_resource_usage_aggregation_stats.DailyResourceUsageAggregationStats(
                                                average = 1.337, 
                                                median = 1.337, 
                                                nintey_fifth_percentile = 1.337, 
                                                peak = 1.337, ), ), 
                                        date = openapi_client.models.date.Date(
                                            day = 56, 
                                            month = 56, 
                                            year = 56, ), 
                                        disk = openapi_client.models.daily_resource_usage_aggregation_disk.DailyResourceUsageAggregationDisk(
                                            iops = openapi_client.models.daily_resource_usage_aggregation_stats.DailyResourceUsageAggregationStats(
                                                average = 1.337, 
                                                median = 1.337, 
                                                nintey_fifth_percentile = 1.337, 
                                                peak = 1.337, ), ), 
                                        memory = openapi_client.models.daily_resource_usage_aggregation_memory.DailyResourceUsageAggregationMemory(), 
                                        network = openapi_client.models.daily_resource_usage_aggregation_network.DailyResourceUsageAggregationNetwork(
                                            egress_bps = , 
                                            ingress_bps = , ), )
                                    ], ), 
                            sources = [
                                ''
                                ], 
                            update_time = '', 
                            virtual_machine_details = openapi_client.models.virtual_machine_details.VirtualMachineDetails(
                                core_count = 56, 
                                create_time = '', 
                                guest_os = openapi_client.models.guest_os_details.GuestOsDetails(
                                    config = openapi_client.models.guest_config_details.GuestConfigDetails(
                                        fstab = openapi_client.models.fstab_entry_list.FstabEntryList(
                                            entries = [
                                                openapi_client.models.fstab_entry.FstabEntry(
                                                    file = '', 
                                                    freq = 56, 
                                                    mntops = '', 
                                                    passno = 56, 
                                                    spec = '', 
                                                    vfstype = '', )
                                                ], ), 
                                        hosts = openapi_client.models.hosts_entry_list.HostsEntryList(), 
                                        issue = '', 
                                        nfs_exports = openapi_client.models.nfs_export_list.NfsExportList(), 
                                        selinux = openapi_client.models.selinux.Selinux(
                                            enabled = True, 
                                            mode = '', ), ), 
                                    runtime = openapi_client.models.guest_runtime_details.GuestRuntimeDetails(
                                        domain = '', 
                                        installed_apps = openapi_client.models.guest_installed_application_list.GuestInstalledApplicationList(), 
                                        last_uptime = openapi_client.models.date.Date(
                                            day = 56, 
                                            month = 56, 
                                            year = 56, ), 
                                        machine_name = '', 
                                        network_info = openapi_client.models.runtime_network_info.RuntimeNetworkInfo(
                                            connections = openapi_client.models.network_connection_list.NetworkConnectionList(), 
                                            netstat = '', 
                                            netstat_time = openapi_client.models.date_time.DateTime(
                                                day = 56, 
                                                hours = 56, 
                                                minutes = 56, 
                                                month = 56, 
                                                nanos = 56, 
                                                seconds = 56, 
                                                time_zone = openapi_client.models.time_zone.TimeZone(
                                                    id = '', 
                                                    version = '', ), 
                                                utc_offset = '', 
                                                year = 56, ), ), 
                                        open_file_list = openapi_client.models.open_file_list.OpenFileList(), 
                                        processes = openapi_client.models.running_process_list.RunningProcessList(), 
                                        services = openapi_client.models.running_service_list.RunningServiceList(), ), ), 
                                memory_mb = 56, 
                                os_family = 'OS_FAMILY_UNKNOWN', 
                                os_name = '', 
                                os_version = '', 
                                platform = openapi_client.models.platform_details.PlatformDetails(
                                    aws_ec2_details = openapi_client.models.aws_ec2_platform_details.AwsEc2PlatformDetails(
                                        location = '', 
                                        machine_type_label = '', ), 
                                    azure_vm_details = openapi_client.models.azure_vm_platform_details.AzureVmPlatformDetails(
                                        location = '', 
                                        machine_type_label = '', 
                                        provisioning_state = '', ), 
                                    generic_details = openapi_client.models.generic_platform_details.GenericPlatformDetails(
                                        location = '', ), 
                                    physical_details = openapi_client.models.physical_platform_details.PhysicalPlatformDetails(
                                        location = '', ), 
                                    vmware_details = openapi_client.models.vmware_platform_details.VmwarePlatformDetails(
                                        esx_version = '', 
                                        osid = '', 
                                        vcenter_version = '', ), ), 
                                power_state = '', 
                                vcenter_folder = '', 
                                vcenter_url = '', 
                                vcenter_vm_id = '', 
                                vm_architecture = openapi_client.models.virtual_machine_architecture_details.VirtualMachineArchitectureDetails(
                                    bios = openapi_client.models.bios_details.BiosDetails(
                                        bios_manufacturer = '', 
                                        bios_name = '', 
                                        bios_release_date = '', 
                                        bios_version = '', 
                                        smbios_uuid = '', ), 
                                    cpu_architecture = '', 
                                    cpu_manufacturer = '', 
                                    cpu_name = '', 
                                    cpu_socket_count = 56, 
                                    cpu_thread_count = 56, 
                                    firmware = '', 
                                    hyperthreading = 'HYPER_THREADING_UNSPECIFIED', 
                                    vendor = '', ), 
                                vm_disks = openapi_client.models.virtual_machine_disk_details.VirtualMachineDiskDetails(
                                    disks = openapi_client.models.disk_entry_list.DiskEntryList(), 
                                    hdd_total_capacity_bytes = '', 
                                    hdd_total_free_bytes = '', 
                                    lsblk_json = '', ), 
                                vm_name = '', 
                                vm_network = openapi_client.models.virtual_machine_network_details.VirtualMachineNetworkDetails(
                                    default_gw = '', 
                                    network_adapters = openapi_client.models.network_adapter_list.NetworkAdapterList(), 
                                    primary_ip_address = '', 
                                    primary_mac_address = '', 
                                    public_ip_address = '', ), 
                                vm_uuid = '', ), ), 
                        request_id = '', 
                        update_mask = '', )
                    ]
            )
        else:
            return BatchUpdateAssetsRequest(
        )
        """

    def testBatchUpdateAssetsRequest(self):
        """Test BatchUpdateAssetsRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

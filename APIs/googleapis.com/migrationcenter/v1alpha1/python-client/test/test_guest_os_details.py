# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.guest_os_details import GuestOsDetails

class TestGuestOsDetails(unittest.TestCase):
    """GuestOsDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GuestOsDetails:
        """Test GuestOsDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GuestOsDetails`
        """
        model = GuestOsDetails()
        if include_optional:
            return GuestOsDetails(
                config = openapi_client.models.guest_config_details.GuestConfigDetails(
                    fstab = openapi_client.models.fstab_entry_list.FstabEntryList(
                        entries = [
                            openapi_client.models.fstab_entry.FstabEntry(
                                file = '', 
                                freq = 56, 
                                mntops = '', 
                                passno = 56, 
                                spec = '', 
                                vfstype = '', )
                            ], ), 
                    hosts = openapi_client.models.hosts_entry_list.HostsEntryList(), 
                    issue = '', 
                    nfs_exports = openapi_client.models.nfs_export_list.NfsExportList(), 
                    selinux = openapi_client.models.selinux.Selinux(
                        enabled = True, 
                        mode = '', ), ),
                runtime = openapi_client.models.guest_runtime_details.GuestRuntimeDetails(
                    domain = '', 
                    installed_apps = openapi_client.models.guest_installed_application_list.GuestInstalledApplicationList(
                        entries = [
                            openapi_client.models.guest_installed_application.GuestInstalledApplication(
                                licenses = [
                                    ''
                                    ], 
                                name = '', 
                                path = '', 
                                time = '', 
                                vendor = '', 
                                version = '', )
                            ], ), 
                    last_uptime = openapi_client.models.date.Date(
                        day = 56, 
                        month = 56, 
                        year = 56, ), 
                    machine_name = '', 
                    network_info = openapi_client.models.runtime_network_info.RuntimeNetworkInfo(
                        connections = openapi_client.models.network_connection_list.NetworkConnectionList(), 
                        netstat = '', 
                        netstat_time = openapi_client.models.date_time.DateTime(
                            day = 56, 
                            hours = 56, 
                            minutes = 56, 
                            month = 56, 
                            nanos = 56, 
                            seconds = 56, 
                            time_zone = openapi_client.models.time_zone.TimeZone(
                                id = '', 
                                version = '', ), 
                            utc_offset = '', 
                            year = 56, ), ), 
                    open_file_list = openapi_client.models.open_file_list.OpenFileList(), 
                    processes = openapi_client.models.running_process_list.RunningProcessList(), 
                    services = openapi_client.models.running_service_list.RunningServiceList(), )
            )
        else:
            return GuestOsDetails(
        )
        """

    def testGuestOsDetails(self):
        """Test GuestOsDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

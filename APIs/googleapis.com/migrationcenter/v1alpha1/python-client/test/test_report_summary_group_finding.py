# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.report_summary_group_finding import ReportSummaryGroupFinding

class TestReportSummaryGroupFinding(unittest.TestCase):
    """ReportSummaryGroupFinding unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReportSummaryGroupFinding:
        """Test ReportSummaryGroupFinding
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReportSummaryGroupFinding`
        """
        model = ReportSummaryGroupFinding()
        if include_optional:
            return ReportSummaryGroupFinding(
                asset_aggregate_stats = openapi_client.models.report_summary_asset_aggregate_stats.ReportSummaryAssetAggregateStats(
                    asset_age = openapi_client.models.report_summary_chart_data.ReportSummaryChartData(
                        data_points = [
                            openapi_client.models.report_summary_chart_data_data_point.ReportSummaryChartDataDataPoint(
                                label = '', 
                                value = 1.337, )
                            ], ), 
                    core_count_histogram = openapi_client.models.report_summary_histogram_chart_data.ReportSummaryHistogramChartData(
                        buckets = [
                            openapi_client.models.report_summary_histogram_chart_data_bucket.ReportSummaryHistogramChartDataBucket(
                                count = '', 
                                lower_bound = '', 
                                upper_bound = '', )
                            ], ), 
                    memory_bytes_histogram = openapi_client.models.report_summary_histogram_chart_data.ReportSummaryHistogramChartData(), 
                    memory_utilization = openapi_client.models.report_summary_chart_data.ReportSummaryChartData(), 
                    memory_utilization_chart = openapi_client.models.report_summary_utilization_chart_data.ReportSummaryUtilizationChartData(
                        free = '', 
                        used = '', ), 
                    operating_system = , 
                    storage_bytes_histogram = , 
                    storage_utilization = , 
                    storage_utilization_chart = openapi_client.models.report_summary_utilization_chart_data.ReportSummaryUtilizationChartData(
                        free = '', 
                        used = '', ), 
                    total_assets = '', 
                    total_cores = '', 
                    total_memory_bytes = '', 
                    total_storage_bytes = '', ),
                description = '',
                display_name = '',
                overlapping_asset_count = '',
                preference_set_findings = [
                    openapi_client.models.report_summary_group_preference_set_finding.ReportSummaryGroupPreferenceSetFinding(
                        description = '', 
                        display_name = '', 
                        machine_finding = openapi_client.models.report_summary_machine_finding.ReportSummaryMachineFinding(
                            allocated_asset_count = '', 
                            allocated_disk_types = [
                                'PERSISTENT_DISK_TYPE_UNSPECIFIED'
                                ], 
                            allocated_regions = [
                                ''
                                ], 
                            machine_series_allocations = [
                                openapi_client.models.report_summary_machine_series_allocation.ReportSummaryMachineSeriesAllocation(
                                    allocated_asset_count = '', 
                                    machine_series = openapi_client.models.machine_series.MachineSeries(
                                        code = '', ), )
                                ], ), 
                        machine_preferences = openapi_client.models.virtual_machine_preferences.VirtualMachinePreferences(
                            commitment_plan = 'COMMITMENT_PLAN_UNSPECIFIED', 
                            compute_engine_preferences = openapi_client.models.compute_engine_preferences.ComputeEnginePreferences(
                                license_type = 'LICENSE_TYPE_UNSPECIFIED', 
                                persistent_disk_type = 'PERSISTENT_DISK_TYPE_UNSPECIFIED', ), 
                            network_cost_parameters = openapi_client.models.virtual_machine_preferences_network_cost_parameters.VirtualMachinePreferencesNetworkCostParameters(
                                estimated_egress_traffic_percentage = 56, ), 
                            region_preferences = openapi_client.models.region_preferences.RegionPreferences(
                                preferred_regions = [
                                    ''
                                    ], ), 
                            sizing_optimization_custom_parameters = openapi_client.models.virtual_machine_preferences_sizing_optimization_custom_parameters.VirtualMachinePreferencesSizingOptimizationCustomParameters(
                                aggregation_method = 'AGGREGATION_METHOD_UNSPECIFIED', 
                                cpu_usage_percentage = 56, 
                                memory_usage_percentage = 56, 
                                storage_multiplier = 1.337, ), 
                            sizing_optimization_strategy = 'SIZING_OPTIMIZATION_STRATEGY_UNSPECIFIED', 
                            sole_tenancy_preferences = openapi_client.models.sole_tenancy_preferences.SoleTenancyPreferences(
                                commitment_plan = 'COMMITMENT_PLAN_UNSPECIFIED', 
                                cpu_overcommit_ratio = 1.337, 
                                host_maintenance_policy = 'HOST_MAINTENANCE_POLICY_UNSPECIFIED', 
                                node_types = [
                                    openapi_client.models.sole_tenant_node_type.SoleTenantNodeType(
                                        node_name = '', )
                                    ], ), 
                            target_product = 'COMPUTE_MIGRATION_TARGET_PRODUCT_UNSPECIFIED', 
                            vmware_engine_preferences = openapi_client.models.vmware_engine_preferences.VmwareEnginePreferences(
                                commitment_plan = 'COMMITMENT_PLAN_UNSPECIFIED', 
                                cpu_overcommit_ratio = 1.337, 
                                memory_overcommit_ratio = 1.337, 
                                storage_deduplication_compression_ratio = 1.337, ), ), 
                        monthly_cost_compute = openapi_client.models.money.Money(
                            currency_code = '', 
                            nanos = 56, 
                            units = '', ), 
                        monthly_cost_network_egress = openapi_client.models.money.Money(
                            currency_code = '', 
                            nanos = 56, 
                            units = '', ), 
                        monthly_cost_os_license = , 
                        monthly_cost_other = , 
                        monthly_cost_storage = , 
                        monthly_cost_total = , 
                        preferred_region = '', 
                        pricing_track = '', 
                        sole_tenant_finding = openapi_client.models.report_summary_sole_tenant_finding.ReportSummarySoleTenantFinding(
                            allocated_asset_count = '', 
                            node_allocations = [
                                openapi_client.models.report_summary_sole_tenant_node_allocation.ReportSummarySoleTenantNodeAllocation(
                                    allocated_asset_count = '', 
                                    node = openapi_client.models.sole_tenant_node_type.SoleTenantNodeType(
                                        node_name = '', ), 
                                    node_count = '', )
                                ], ), 
                        top_priority = '', 
                        vmware_engine_finding = openapi_client.models.report_summary_vm_ware_engine_finding.ReportSummaryVMWareEngineFinding(
                            allocated_asset_count = '', ), )
                    ]
            )
        else:
            return ReportSummaryGroupFinding(
        )
        """

    def testReportSummaryGroupFinding(self):
        """Test ReportSummaryGroupFinding"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_error_frames_response import ListErrorFramesResponse

class TestListErrorFramesResponse(unittest.TestCase):
    """ListErrorFramesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListErrorFramesResponse:
        """Test ListErrorFramesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListErrorFramesResponse`
        """
        model = ListErrorFramesResponse()
        if include_optional:
            return ListErrorFramesResponse(
                error_frames = [
                    openapi_client.models.error_frame.ErrorFrame(
                        ingestion_time = '', 
                        name = '', 
                        original_frame = openapi_client.models.asset_frame.AssetFrame(
                            attributes = {
                                'key' : ''
                                }, 
                            labels = {
                                'key' : ''
                                }, 
                            performance_samples = [
                                openapi_client.models.performance_sample.PerformanceSample(
                                    cpu = openapi_client.models.cpu_usage_sample.CpuUsageSample(
                                        utilized_percentage = 1.337, ), 
                                    disk = openapi_client.models.disk_usage_sample.DiskUsageSample(
                                        average_iops = 1.337, ), 
                                    memory = openapi_client.models.memory_usage_sample.MemoryUsageSample(
                                        utilized_percentage = 1.337, ), 
                                    network = openapi_client.models.network_usage_sample.NetworkUsageSample(
                                        average_egress_bps = 1.337, 
                                        average_ingress_bps = 1.337, ), 
                                    sample_time = '', )
                                ], 
                            report_time = '', 
                            trace_token = '', 
                            virtual_machine_details = openapi_client.models.virtual_machine_details.VirtualMachineDetails(
                                core_count = 56, 
                                create_time = '', 
                                guest_os = openapi_client.models.guest_os_details.GuestOsDetails(
                                    config = openapi_client.models.guest_config_details.GuestConfigDetails(
                                        fstab = openapi_client.models.fstab_entry_list.FstabEntryList(
                                            entries = [
                                                openapi_client.models.fstab_entry.FstabEntry(
                                                    file = '', 
                                                    freq = 56, 
                                                    mntops = '', 
                                                    passno = 56, 
                                                    spec = '', 
                                                    vfstype = '', )
                                                ], ), 
                                        hosts = openapi_client.models.hosts_entry_list.HostsEntryList(), 
                                        issue = '', 
                                        nfs_exports = openapi_client.models.nfs_export_list.NfsExportList(), 
                                        selinux = openapi_client.models.selinux.Selinux(
                                            enabled = True, 
                                            mode = '', ), ), 
                                    runtime = openapi_client.models.guest_runtime_details.GuestRuntimeDetails(
                                        domain = '', 
                                        installed_apps = openapi_client.models.guest_installed_application_list.GuestInstalledApplicationList(), 
                                        last_uptime = openapi_client.models.date.Date(
                                            day = 56, 
                                            month = 56, 
                                            year = 56, ), 
                                        machine_name = '', 
                                        network_info = openapi_client.models.runtime_network_info.RuntimeNetworkInfo(
                                            connections = openapi_client.models.network_connection_list.NetworkConnectionList(), 
                                            netstat = '', 
                                            netstat_time = openapi_client.models.date_time.DateTime(
                                                day = 56, 
                                                hours = 56, 
                                                minutes = 56, 
                                                month = 56, 
                                                nanos = 56, 
                                                seconds = 56, 
                                                time_zone = openapi_client.models.time_zone.TimeZone(
                                                    id = '', 
                                                    version = '', ), 
                                                utc_offset = '', 
                                                year = 56, ), ), 
                                        open_file_list = openapi_client.models.open_file_list.OpenFileList(), 
                                        processes = openapi_client.models.running_process_list.RunningProcessList(), 
                                        services = openapi_client.models.running_service_list.RunningServiceList(), ), ), 
                                memory_mb = 56, 
                                os_family = 'OS_FAMILY_UNKNOWN', 
                                os_name = '', 
                                os_version = '', 
                                platform = openapi_client.models.platform_details.PlatformDetails(
                                    aws_ec2_details = openapi_client.models.aws_ec2_platform_details.AwsEc2PlatformDetails(
                                        location = '', 
                                        machine_type_label = '', ), 
                                    azure_vm_details = openapi_client.models.azure_vm_platform_details.AzureVmPlatformDetails(
                                        location = '', 
                                        machine_type_label = '', 
                                        provisioning_state = '', ), 
                                    generic_details = openapi_client.models.generic_platform_details.GenericPlatformDetails(
                                        location = '', ), 
                                    physical_details = openapi_client.models.physical_platform_details.PhysicalPlatformDetails(
                                        location = '', ), 
                                    vmware_details = openapi_client.models.vmware_platform_details.VmwarePlatformDetails(
                                        esx_version = '', 
                                        osid = '', 
                                        vcenter_version = '', ), ), 
                                power_state = '', 
                                vcenter_folder = '', 
                                vcenter_url = '', 
                                vcenter_vm_id = '', 
                                vm_architecture = openapi_client.models.virtual_machine_architecture_details.VirtualMachineArchitectureDetails(
                                    bios = openapi_client.models.bios_details.BiosDetails(
                                        bios_manufacturer = '', 
                                        bios_name = '', 
                                        bios_release_date = '', 
                                        bios_version = '', 
                                        smbios_uuid = '', ), 
                                    cpu_architecture = '', 
                                    cpu_manufacturer = '', 
                                    cpu_name = '', 
                                    cpu_socket_count = 56, 
                                    cpu_thread_count = 56, 
                                    firmware = '', 
                                    hyperthreading = 'HYPER_THREADING_UNSPECIFIED', 
                                    vendor = '', ), 
                                vm_disks = openapi_client.models.virtual_machine_disk_details.VirtualMachineDiskDetails(
                                    disks = openapi_client.models.disk_entry_list.DiskEntryList(), 
                                    hdd_total_capacity_bytes = '', 
                                    hdd_total_free_bytes = '', 
                                    lsblk_json = '', ), 
                                vm_name = '', 
                                vm_network = openapi_client.models.virtual_machine_network_details.VirtualMachineNetworkDetails(
                                    default_gw = '', 
                                    network_adapters = openapi_client.models.network_adapter_list.NetworkAdapterList(), 
                                    primary_ip_address = '', 
                                    primary_mac_address = '', 
                                    public_ip_address = '', ), 
                                vm_uuid = '', ), ), 
                        violations = [
                            openapi_client.models.frame_violation_entry.FrameViolationEntry(
                                field = '', 
                                violation = '', )
                            ], )
                    ],
                next_page_token = '',
                unreachable = [
                    ''
                    ]
            )
        else:
            return ListErrorFramesResponse(
        )
        """

    def testListErrorFramesResponse(self):
        """Test ListErrorFramesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.disk_entry import DiskEntry

class TestDiskEntry(unittest.TestCase):
    """DiskEntry unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DiskEntry:
        """Test DiskEntry
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DiskEntry`
        """
        model = DiskEntry()
        if include_optional:
            return DiskEntry(
                disk_label = '',
                disk_label_type = '',
                hw_address = '',
                interface_type = '',
                partitions = openapi_client.models.disk_partition_list.DiskPartitionList(
                    entries = [
                        openapi_client.models.disk_partition.DiskPartition(
                            capacity_bytes = '', 
                            file_system = '', 
                            free_bytes = '', 
                            mount_point = '', 
                            sub_partitions = openapi_client.models.disk_partition_list.DiskPartitionList(), 
                            type = '', 
                            uuid = '', )
                        ], ),
                status = '',
                total_capacity_bytes = '',
                total_free_bytes = '',
                vmware_config = openapi_client.models.vmware_disk_config.VmwareDiskConfig(
                    backing_type = 'BACKING_TYPE_UNSPECIFIED', 
                    rdm_compatibility_mode = '', 
                    shared = True, 
                    vmdk_disk_mode = '', )
            )
        else:
            return DiskEntry(
        )
        """

    def testDiskEntry(self):
        """Test DiskEntry"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

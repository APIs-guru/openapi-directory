# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.fstab_entry_list import FstabEntryList
from openapi_client.models.hosts_entry_list import HostsEntryList
from openapi_client.models.nfs_export_list import NfsExportList
from openapi_client.models.selinux import Selinux
from typing import Optional, Set
from typing_extensions import Self

class GuestConfigDetails(BaseModel):
    """
    Guest OS config information.
    """ # noqa: E501
    fstab: Optional[FstabEntryList] = None
    hosts: Optional[HostsEntryList] = None
    issue: Optional[StrictStr] = Field(default=None, description="OS issue (typically /etc/issue in Linux).")
    nfs_exports: Optional[NfsExportList] = Field(default=None, alias="nfsExports")
    selinux: Optional[Selinux] = None
    __properties: ClassVar[List[str]] = ["fstab", "hosts", "issue", "nfsExports", "selinux"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GuestConfigDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fstab
        if self.fstab:
            _dict['fstab'] = self.fstab.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hosts
        if self.hosts:
            _dict['hosts'] = self.hosts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nfs_exports
        if self.nfs_exports:
            _dict['nfsExports'] = self.nfs_exports.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selinux
        if self.selinux:
            _dict['selinux'] = self.selinux.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GuestConfigDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fstab": FstabEntryList.from_dict(obj["fstab"]) if obj.get("fstab") is not None else None,
            "hosts": HostsEntryList.from_dict(obj["hosts"]) if obj.get("hosts") is not None else None,
            "issue": obj.get("issue"),
            "nfsExports": NfsExportList.from_dict(obj["nfsExports"]) if obj.get("nfsExports") is not None else None,
            "selinux": Selinux.from_dict(obj["selinux"]) if obj.get("selinux") is not None else None
        })
        return _obj



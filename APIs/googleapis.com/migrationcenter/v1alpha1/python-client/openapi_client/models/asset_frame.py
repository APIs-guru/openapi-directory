# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.performance_sample import PerformanceSample
from openapi_client.models.virtual_machine_details import VirtualMachineDetails
from typing import Optional, Set
from typing_extensions import Self

class AssetFrame(BaseModel):
    """
    Contains data reported from an inventory source on an asset.
    """ # noqa: E501
    attributes: Optional[Dict[str, StrictStr]] = Field(default=None, description="Generic asset attributes.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels as key value pairs.")
    performance_samples: Optional[List[PerformanceSample]] = Field(default=None, description="Asset performance data samples. Samples that are from more than 40 days ago or after tomorrow are ignored.", alias="performanceSamples")
    report_time: Optional[StrictStr] = Field(default=None, description="The time the data was reported.", alias="reportTime")
    trace_token: Optional[StrictStr] = Field(default=None, description="Optional. Trace token is optionally provided to assist with debugging and traceability.", alias="traceToken")
    virtual_machine_details: Optional[VirtualMachineDetails] = Field(default=None, alias="virtualMachineDetails")
    __properties: ClassVar[List[str]] = ["attributes", "labels", "performanceSamples", "reportTime", "traceToken", "virtualMachineDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetFrame from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in performance_samples (list)
        _items = []
        if self.performance_samples:
            for _item_performance_samples in self.performance_samples:
                if _item_performance_samples:
                    _items.append(_item_performance_samples.to_dict())
            _dict['performanceSamples'] = _items
        # override the default output from pydantic by calling `to_dict()` of virtual_machine_details
        if self.virtual_machine_details:
            _dict['virtualMachineDetails'] = self.virtual_machine_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetFrame from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": obj.get("attributes"),
            "labels": obj.get("labels"),
            "performanceSamples": [PerformanceSample.from_dict(_item) for _item in obj["performanceSamples"]] if obj.get("performanceSamples") is not None else None,
            "reportTime": obj.get("reportTime"),
            "traceToken": obj.get("traceToken"),
            "virtualMachineDetails": VirtualMachineDetails.from_dict(obj["virtualMachineDetails"]) if obj.get("virtualMachineDetails") is not None else None
        })
        return _obj



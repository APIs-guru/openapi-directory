# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.guest_os_details import GuestOsDetails
from openapi_client.models.platform_details import PlatformDetails
from openapi_client.models.virtual_machine_architecture_details import VirtualMachineArchitectureDetails
from openapi_client.models.virtual_machine_disk_details import VirtualMachineDiskDetails
from openapi_client.models.virtual_machine_network_details import VirtualMachineNetworkDetails
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachineDetails(BaseModel):
    """
    Details of a VirtualMachine.
    """ # noqa: E501
    core_count: Optional[StrictInt] = Field(default=None, description="Number of CPU cores in the VirtualMachine. Must be non-negative.", alias="coreCount")
    create_time: Optional[StrictStr] = Field(default=None, description="VM creation timestamp.", alias="createTime")
    guest_os: Optional[GuestOsDetails] = Field(default=None, alias="guestOs")
    memory_mb: Optional[StrictInt] = Field(default=None, description="The amount of memory in the VirtualMachine. Must be non-negative.", alias="memoryMb")
    os_family: Optional[StrictStr] = Field(default=None, description="What family the OS belong to, if known.", alias="osFamily")
    os_name: Optional[StrictStr] = Field(default=None, description="The name of the operating system running on the VirtualMachine.", alias="osName")
    os_version: Optional[StrictStr] = Field(default=None, description="The version of the operating system running on the virtual machine.", alias="osVersion")
    platform: Optional[PlatformDetails] = None
    power_state: Optional[StrictStr] = Field(default=None, description="Power state of VM (poweredOn or poweredOff).", alias="powerState")
    vcenter_folder: Optional[StrictStr] = Field(default=None, description="Folder name in vCenter where asset resides.", alias="vcenterFolder")
    vcenter_url: Optional[StrictStr] = Field(default=None, description="vCenter URL used in collection.", alias="vcenterUrl")
    vcenter_vm_id: Optional[StrictStr] = Field(default=None, description="vCenter VM ID.", alias="vcenterVmId")
    vm_architecture: Optional[VirtualMachineArchitectureDetails] = Field(default=None, alias="vmArchitecture")
    vm_disks: Optional[VirtualMachineDiskDetails] = Field(default=None, alias="vmDisks")
    vm_name: Optional[StrictStr] = Field(default=None, description="Virtual Machine display name.", alias="vmName")
    vm_network: Optional[VirtualMachineNetworkDetails] = Field(default=None, alias="vmNetwork")
    vm_uuid: Optional[StrictStr] = Field(default=None, description="Virtual Machine unique identifier.", alias="vmUuid")
    __properties: ClassVar[List[str]] = ["coreCount", "createTime", "guestOs", "memoryMb", "osFamily", "osName", "osVersion", "platform", "powerState", "vcenterFolder", "vcenterUrl", "vcenterVmId", "vmArchitecture", "vmDisks", "vmName", "vmNetwork", "vmUuid"]

    @field_validator('os_family')
    def os_family_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OS_FAMILY_UNKNOWN', 'OS_FAMILY_WINDOWS', 'OS_FAMILY_LINUX', 'OS_FAMILY_UNIX']):
            raise ValueError("must be one of enum values ('OS_FAMILY_UNKNOWN', 'OS_FAMILY_WINDOWS', 'OS_FAMILY_LINUX', 'OS_FAMILY_UNIX')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachineDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of guest_os
        if self.guest_os:
            _dict['guestOs'] = self.guest_os.to_dict()
        # override the default output from pydantic by calling `to_dict()` of platform
        if self.platform:
            _dict['platform'] = self.platform.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vm_architecture
        if self.vm_architecture:
            _dict['vmArchitecture'] = self.vm_architecture.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vm_disks
        if self.vm_disks:
            _dict['vmDisks'] = self.vm_disks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vm_network
        if self.vm_network:
            _dict['vmNetwork'] = self.vm_network.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachineDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coreCount": obj.get("coreCount"),
            "createTime": obj.get("createTime"),
            "guestOs": GuestOsDetails.from_dict(obj["guestOs"]) if obj.get("guestOs") is not None else None,
            "memoryMb": obj.get("memoryMb"),
            "osFamily": obj.get("osFamily"),
            "osName": obj.get("osName"),
            "osVersion": obj.get("osVersion"),
            "platform": PlatformDetails.from_dict(obj["platform"]) if obj.get("platform") is not None else None,
            "powerState": obj.get("powerState"),
            "vcenterFolder": obj.get("vcenterFolder"),
            "vcenterUrl": obj.get("vcenterUrl"),
            "vcenterVmId": obj.get("vcenterVmId"),
            "vmArchitecture": VirtualMachineArchitectureDetails.from_dict(obj["vmArchitecture"]) if obj.get("vmArchitecture") is not None else None,
            "vmDisks": VirtualMachineDiskDetails.from_dict(obj["vmDisks"]) if obj.get("vmDisks") is not None else None,
            "vmName": obj.get("vmName"),
            "vmNetwork": VirtualMachineNetworkDetails.from_dict(obj["vmNetwork"]) if obj.get("vmNetwork") is not None else None,
            "vmUuid": obj.get("vmUuid")
        })
        return _obj



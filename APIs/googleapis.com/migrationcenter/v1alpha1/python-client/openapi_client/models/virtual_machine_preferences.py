# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.compute_engine_preferences import ComputeEnginePreferences
from openapi_client.models.region_preferences import RegionPreferences
from openapi_client.models.sole_tenancy_preferences import SoleTenancyPreferences
from openapi_client.models.virtual_machine_preferences_network_cost_parameters import VirtualMachinePreferencesNetworkCostParameters
from openapi_client.models.virtual_machine_preferences_sizing_optimization_custom_parameters import VirtualMachinePreferencesSizingOptimizationCustomParameters
from openapi_client.models.vmware_engine_preferences import VmwareEnginePreferences
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachinePreferences(BaseModel):
    """
    VirtualMachinePreferences enables you to create sets of preferences, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
    """ # noqa: E501
    commitment_plan: Optional[StrictStr] = Field(default=None, description="Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.", alias="commitmentPlan")
    compute_engine_preferences: Optional[ComputeEnginePreferences] = Field(default=None, alias="computeEnginePreferences")
    network_cost_parameters: Optional[VirtualMachinePreferencesNetworkCostParameters] = Field(default=None, alias="networkCostParameters")
    region_preferences: Optional[RegionPreferences] = Field(default=None, alias="regionPreferences")
    sizing_optimization_custom_parameters: Optional[VirtualMachinePreferencesSizingOptimizationCustomParameters] = Field(default=None, alias="sizingOptimizationCustomParameters")
    sizing_optimization_strategy: Optional[StrictStr] = Field(default=None, description="Sizing optimization strategy specifies the preferred strategy used when extrapolating usage data to calculate insights and recommendations for a virtual machine. If you are unsure which value to set, a moderate sizing optimization strategy is often a good value to start with.", alias="sizingOptimizationStrategy")
    sole_tenancy_preferences: Optional[SoleTenancyPreferences] = Field(default=None, alias="soleTenancyPreferences")
    target_product: Optional[StrictStr] = Field(default=None, description="Target product for assets using this preference set. Specify either target product or business goal, but not both.", alias="targetProduct")
    vmware_engine_preferences: Optional[VmwareEnginePreferences] = Field(default=None, alias="vmwareEnginePreferences")
    __properties: ClassVar[List[str]] = ["commitmentPlan", "computeEnginePreferences", "networkCostParameters", "regionPreferences", "sizingOptimizationCustomParameters", "sizingOptimizationStrategy", "soleTenancyPreferences", "targetProduct", "vmwareEnginePreferences"]

    @field_validator('commitment_plan')
    def commitment_plan_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMMITMENT_PLAN_UNSPECIFIED', 'COMMITMENT_PLAN_NONE', 'COMMITMENT_PLAN_ONE_YEAR', 'COMMITMENT_PLAN_THREE_YEARS']):
            raise ValueError("must be one of enum values ('COMMITMENT_PLAN_UNSPECIFIED', 'COMMITMENT_PLAN_NONE', 'COMMITMENT_PLAN_ONE_YEAR', 'COMMITMENT_PLAN_THREE_YEARS')")
        return value

    @field_validator('sizing_optimization_strategy')
    def sizing_optimization_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SIZING_OPTIMIZATION_STRATEGY_UNSPECIFIED', 'SIZING_OPTIMIZATION_STRATEGY_SAME_AS_SOURCE', 'SIZING_OPTIMIZATION_STRATEGY_MODERATE', 'SIZING_OPTIMIZATION_STRATEGY_AGGRESSIVE', 'SIZING_OPTIMIZATION_STRATEGY_CUSTOM']):
            raise ValueError("must be one of enum values ('SIZING_OPTIMIZATION_STRATEGY_UNSPECIFIED', 'SIZING_OPTIMIZATION_STRATEGY_SAME_AS_SOURCE', 'SIZING_OPTIMIZATION_STRATEGY_MODERATE', 'SIZING_OPTIMIZATION_STRATEGY_AGGRESSIVE', 'SIZING_OPTIMIZATION_STRATEGY_CUSTOM')")
        return value

    @field_validator('target_product')
    def target_product_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPUTE_MIGRATION_TARGET_PRODUCT_UNSPECIFIED', 'COMPUTE_MIGRATION_TARGET_PRODUCT_COMPUTE_ENGINE', 'COMPUTE_MIGRATION_TARGET_PRODUCT_VMWARE_ENGINE', 'COMPUTE_MIGRATION_TARGET_PRODUCT_SOLE_TENANCY']):
            raise ValueError("must be one of enum values ('COMPUTE_MIGRATION_TARGET_PRODUCT_UNSPECIFIED', 'COMPUTE_MIGRATION_TARGET_PRODUCT_COMPUTE_ENGINE', 'COMPUTE_MIGRATION_TARGET_PRODUCT_VMWARE_ENGINE', 'COMPUTE_MIGRATION_TARGET_PRODUCT_SOLE_TENANCY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachinePreferences from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of compute_engine_preferences
        if self.compute_engine_preferences:
            _dict['computeEnginePreferences'] = self.compute_engine_preferences.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_cost_parameters
        if self.network_cost_parameters:
            _dict['networkCostParameters'] = self.network_cost_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of region_preferences
        if self.region_preferences:
            _dict['regionPreferences'] = self.region_preferences.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sizing_optimization_custom_parameters
        if self.sizing_optimization_custom_parameters:
            _dict['sizingOptimizationCustomParameters'] = self.sizing_optimization_custom_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sole_tenancy_preferences
        if self.sole_tenancy_preferences:
            _dict['soleTenancyPreferences'] = self.sole_tenancy_preferences.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vmware_engine_preferences
        if self.vmware_engine_preferences:
            _dict['vmwareEnginePreferences'] = self.vmware_engine_preferences.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachinePreferences from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commitmentPlan": obj.get("commitmentPlan"),
            "computeEnginePreferences": ComputeEnginePreferences.from_dict(obj["computeEnginePreferences"]) if obj.get("computeEnginePreferences") is not None else None,
            "networkCostParameters": VirtualMachinePreferencesNetworkCostParameters.from_dict(obj["networkCostParameters"]) if obj.get("networkCostParameters") is not None else None,
            "regionPreferences": RegionPreferences.from_dict(obj["regionPreferences"]) if obj.get("regionPreferences") is not None else None,
            "sizingOptimizationCustomParameters": VirtualMachinePreferencesSizingOptimizationCustomParameters.from_dict(obj["sizingOptimizationCustomParameters"]) if obj.get("sizingOptimizationCustomParameters") is not None else None,
            "sizingOptimizationStrategy": obj.get("sizingOptimizationStrategy"),
            "soleTenancyPreferences": SoleTenancyPreferences.from_dict(obj["soleTenancyPreferences"]) if obj.get("soleTenancyPreferences") is not None else None,
            "targetProduct": obj.get("targetProduct"),
            "vmwareEnginePreferences": VmwareEnginePreferences.from_dict(obj["vmwareEnginePreferences"]) if obj.get("vmwareEnginePreferences") is not None else None
        })
        return _obj



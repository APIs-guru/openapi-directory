# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Source(BaseModel):
    """
    Source represents an object from which asset information is streamed to Migration Center.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the source was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Free-text description.")
    display_name: Optional[StrictStr] = Field(default=None, description="User-friendly display name.", alias="displayName")
    error_frame_count: Optional[StrictInt] = Field(default=None, description="Output only. The number of frames that were reported by the source and contained errors.", alias="errorFrameCount")
    is_managed: Optional[StrictBool] = Field(default=None, description="If `true`, the source is managed by other service(s).", alias="isManaged")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The full name of the source.")
    pending_frame_count: Optional[StrictInt] = Field(default=None, description="Output only. Number of frames that are still being processed.", alias="pendingFrameCount")
    priority: Optional[StrictInt] = Field(default=None, description="The information confidence of the source. The higher the value, the higher the confidence.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the source.")
    type: Optional[StrictStr] = Field(default=None, description="Data source type.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the source was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "displayName", "errorFrameCount", "isManaged", "name", "pendingFrameCount", "priority", "state", "type", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'DELETING', 'INVALID']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'DELETING', 'INVALID')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SOURCE_TYPE_UNKNOWN', 'SOURCE_TYPE_UPLOAD', 'SOURCE_TYPE_GUEST_OS_SCAN', 'SOURCE_TYPE_INVENTORY_SCAN', 'SOURCE_TYPE_CUSTOM']):
            raise ValueError("must be one of enum values ('SOURCE_TYPE_UNKNOWN', 'SOURCE_TYPE_UPLOAD', 'SOURCE_TYPE_GUEST_OS_SCAN', 'SOURCE_TYPE_INVENTORY_SCAN', 'SOURCE_TYPE_CUSTOM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Source from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "error_frame_count",
            "name",
            "pending_frame_count",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Source from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "errorFrameCount": obj.get("errorFrameCount"),
            "isManaged": obj.get("isManaged"),
            "name": obj.get("name"),
            "pendingFrameCount": obj.get("pendingFrameCount"),
            "priority": obj.get("priority"),
            "state": obj.get("state"),
            "type": obj.get("type"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



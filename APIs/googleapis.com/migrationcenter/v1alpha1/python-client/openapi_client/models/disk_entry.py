# coding: utf-8

"""
    Migration Center API

    A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.disk_partition_list import DiskPartitionList
from openapi_client.models.vmware_disk_config import VmwareDiskConfig
from typing import Optional, Set
from typing_extensions import Self

class DiskEntry(BaseModel):
    """
    Single disk entry.
    """ # noqa: E501
    disk_label: Optional[StrictStr] = Field(default=None, description="Disk label.", alias="diskLabel")
    disk_label_type: Optional[StrictStr] = Field(default=None, description="Disk label type (e.g. BIOS/GPT)", alias="diskLabelType")
    hw_address: Optional[StrictStr] = Field(default=None, description="Disk hardware address (e.g. 0:1 for SCSI).", alias="hwAddress")
    interface_type: Optional[StrictStr] = Field(default=None, description="Disks interface type (e.g. SATA/SCSI)", alias="interfaceType")
    partitions: Optional[DiskPartitionList] = None
    status: Optional[StrictStr] = Field(default=None, description="Disk status (e.g. online).")
    total_capacity_bytes: Optional[StrictStr] = Field(default=None, description="Disk capacity.", alias="totalCapacityBytes")
    total_free_bytes: Optional[StrictStr] = Field(default=None, description="Disk free space.", alias="totalFreeBytes")
    vmware_config: Optional[VmwareDiskConfig] = Field(default=None, alias="vmwareConfig")
    __properties: ClassVar[List[str]] = ["diskLabel", "diskLabelType", "hwAddress", "interfaceType", "partitions", "status", "totalCapacityBytes", "totalFreeBytes", "vmwareConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DiskEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of partitions
        if self.partitions:
            _dict['partitions'] = self.partitions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vmware_config
        if self.vmware_config:
            _dict['vmwareConfig'] = self.vmware_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DiskEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "diskLabel": obj.get("diskLabel"),
            "diskLabelType": obj.get("diskLabelType"),
            "hwAddress": obj.get("hwAddress"),
            "interfaceType": obj.get("interfaceType"),
            "partitions": DiskPartitionList.from_dict(obj["partitions"]) if obj.get("partitions") is not None else None,
            "status": obj.get("status"),
            "totalCapacityBytes": obj.get("totalCapacityBytes"),
            "totalFreeBytes": obj.get("totalFreeBytes"),
            "vmwareConfig": VmwareDiskConfig.from_dict(obj["vmwareConfig"]) if obj.get("vmwareConfig") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Life Sciences API

    Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.container_killed_event import ContainerKilledEvent
from openapi_client.models.container_started_event import ContainerStartedEvent
from openapi_client.models.container_stopped_event import ContainerStoppedEvent
from openapi_client.models.delayed_event import DelayedEvent
from openapi_client.models.failed_event import FailedEvent
from openapi_client.models.pull_started_event import PullStartedEvent
from openapi_client.models.pull_stopped_event import PullStoppedEvent
from openapi_client.models.unexpected_exit_status_event import UnexpectedExitStatusEvent
from openapi_client.models.worker_assigned_event import WorkerAssignedEvent
from openapi_client.models.worker_released_event import WorkerReleasedEvent
from typing import Optional, Set
from typing_extensions import Self

class Event(BaseModel):
    """
    Carries information about events that occur during pipeline execution.
    """ # noqa: E501
    container_killed: Optional[ContainerKilledEvent] = Field(default=None, alias="containerKilled")
    container_started: Optional[ContainerStartedEvent] = Field(default=None, alias="containerStarted")
    container_stopped: Optional[ContainerStoppedEvent] = Field(default=None, alias="containerStopped")
    delayed: Optional[DelayedEvent] = None
    description: Optional[StrictStr] = Field(default=None, description="A human-readable description of the event. Note that these strings can change at any time without notice. Any application logic must use the information in the `details` field.")
    failed: Optional[FailedEvent] = None
    pull_started: Optional[PullStartedEvent] = Field(default=None, alias="pullStarted")
    pull_stopped: Optional[PullStoppedEvent] = Field(default=None, alias="pullStopped")
    timestamp: Optional[StrictStr] = Field(default=None, description="The time at which the event occurred.")
    unexpected_exit_status: Optional[UnexpectedExitStatusEvent] = Field(default=None, alias="unexpectedExitStatus")
    worker_assigned: Optional[WorkerAssignedEvent] = Field(default=None, alias="workerAssigned")
    worker_released: Optional[WorkerReleasedEvent] = Field(default=None, alias="workerReleased")
    __properties: ClassVar[List[str]] = ["containerKilled", "containerStarted", "containerStopped", "delayed", "description", "failed", "pullStarted", "pullStopped", "timestamp", "unexpectedExitStatus", "workerAssigned", "workerReleased"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Event from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of container_killed
        if self.container_killed:
            _dict['containerKilled'] = self.container_killed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of container_started
        if self.container_started:
            _dict['containerStarted'] = self.container_started.to_dict()
        # override the default output from pydantic by calling `to_dict()` of container_stopped
        if self.container_stopped:
            _dict['containerStopped'] = self.container_stopped.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delayed
        if self.delayed:
            _dict['delayed'] = self.delayed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of failed
        if self.failed:
            _dict['failed'] = self.failed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pull_started
        if self.pull_started:
            _dict['pullStarted'] = self.pull_started.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pull_stopped
        if self.pull_stopped:
            _dict['pullStopped'] = self.pull_stopped.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unexpected_exit_status
        if self.unexpected_exit_status:
            _dict['unexpectedExitStatus'] = self.unexpected_exit_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of worker_assigned
        if self.worker_assigned:
            _dict['workerAssigned'] = self.worker_assigned.to_dict()
        # override the default output from pydantic by calling `to_dict()` of worker_released
        if self.worker_released:
            _dict['workerReleased'] = self.worker_released.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Event from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containerKilled": ContainerKilledEvent.from_dict(obj["containerKilled"]) if obj.get("containerKilled") is not None else None,
            "containerStarted": ContainerStartedEvent.from_dict(obj["containerStarted"]) if obj.get("containerStarted") is not None else None,
            "containerStopped": ContainerStoppedEvent.from_dict(obj["containerStopped"]) if obj.get("containerStopped") is not None else None,
            "delayed": DelayedEvent.from_dict(obj["delayed"]) if obj.get("delayed") is not None else None,
            "description": obj.get("description"),
            "failed": FailedEvent.from_dict(obj["failed"]) if obj.get("failed") is not None else None,
            "pullStarted": PullStartedEvent.from_dict(obj["pullStarted"]) if obj.get("pullStarted") is not None else None,
            "pullStopped": PullStoppedEvent.from_dict(obj["pullStopped"]) if obj.get("pullStopped") is not None else None,
            "timestamp": obj.get("timestamp"),
            "unexpectedExitStatus": UnexpectedExitStatusEvent.from_dict(obj["unexpectedExitStatus"]) if obj.get("unexpectedExitStatus") is not None else None,
            "workerAssigned": WorkerAssignedEvent.from_dict(obj["workerAssigned"]) if obj.get("workerAssigned") is not None else None,
            "workerReleased": WorkerReleasedEvent.from_dict(obj["workerReleased"]) if obj.get("workerReleased") is not None else None
        })
        return _obj



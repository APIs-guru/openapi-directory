# coding: utf-8

"""
    Cloud Life Sciences API

    Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.action import Action
from openapi_client.models.resources import Resources
from openapi_client.models.secret import Secret
from typing import Optional, Set
from typing_extensions import Self

class Pipeline(BaseModel):
    """
    Specifies a series of actions to execute, expressed as Docker containers.
    """ # noqa: E501
    actions: Optional[List[Action]] = Field(default=None, description="The list of actions to execute, in the order they are specified.")
    encrypted_environment: Optional[Secret] = Field(default=None, alias="encryptedEnvironment")
    environment: Optional[Dict[str, StrictStr]] = Field(default=None, description="The environment to pass into every action. Each action can also specify additional environment variables but cannot delete an entry from this map (though they can overwrite it with a different value).")
    resources: Optional[Resources] = None
    timeout: Optional[StrictStr] = Field(default=None, description="The maximum amount of time to give the pipeline to complete. This includes the time spent waiting for a worker to be allocated. If the pipeline fails to complete before the timeout, it will be cancelled and the error code will be set to DEADLINE_EXCEEDED. If unspecified, it will default to 7 days.")
    __properties: ClassVar[List[str]] = ["actions", "encryptedEnvironment", "environment", "resources", "timeout"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Pipeline from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of encrypted_environment
        if self.encrypted_environment:
            _dict['encryptedEnvironment'] = self.encrypted_environment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resources
        if self.resources:
            _dict['resources'] = self.resources.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Pipeline from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": [Action.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "encryptedEnvironment": Secret.from_dict(obj["encryptedEnvironment"]) if obj.get("encryptedEnvironment") is not None else None,
            "environment": obj.get("environment"),
            "resources": Resources.from_dict(obj["resources"]) if obj.get("resources") is not None else None,
            "timeout": obj.get("timeout")
        })
        return _obj



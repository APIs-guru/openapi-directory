# coding: utf-8

"""
    Cloud Life Sciences API

    Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.metadata import Metadata

class TestMetadata(unittest.TestCase):
    """Metadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Metadata:
        """Test Metadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Metadata`
        """
        model = Metadata()
        if include_optional:
            return Metadata(
                create_time = '',
                end_time = '',
                events = [
                    openapi_client.models.event.Event(
                        container_killed = openapi_client.models.container_killed_event.ContainerKilledEvent(
                            action_id = 56, ), 
                        container_started = openapi_client.models.container_started_event.ContainerStartedEvent(
                            action_id = 56, 
                            ip_address = '', 
                            port_mappings = {
                                'key' : 56
                                }, ), 
                        container_stopped = openapi_client.models.container_stopped_event.ContainerStoppedEvent(
                            action_id = 56, 
                            exit_status = 56, 
                            stderr = '', ), 
                        delayed = openapi_client.models.delayed_event.DelayedEvent(
                            cause = '', 
                            metrics = [
                                ''
                                ], ), 
                        description = '', 
                        failed = openapi_client.models.failed_event.FailedEvent(
                            cause = '', 
                            code = 'OK', ), 
                        pull_started = openapi_client.models.pull_started_event.PullStartedEvent(
                            image_uri = '', ), 
                        pull_stopped = openapi_client.models.pull_stopped_event.PullStoppedEvent(
                            image_uri = '', ), 
                        timestamp = '', 
                        unexpected_exit_status = openapi_client.models.unexpected_exit_status_event.UnexpectedExitStatusEvent(
                            action_id = 56, 
                            exit_status = 56, ), 
                        worker_assigned = openapi_client.models.worker_assigned_event.WorkerAssignedEvent(
                            instance = '', 
                            machine_type = '', 
                            zone = '', ), 
                        worker_released = openapi_client.models.worker_released_event.WorkerReleasedEvent(
                            instance = '', 
                            zone = '', ), )
                    ],
                labels = {
                    'key' : ''
                    },
                pipeline = openapi_client.models.pipeline.Pipeline(
                    actions = [
                        openapi_client.models.action.Action(
                            always_run = True, 
                            block_external_network = True, 
                            commands = [
                                ''
                                ], 
                            container_name = '', 
                            credentials = openapi_client.models.secret.Secret(
                                cipher_text = '', 
                                key_name = '', ), 
                            disable_image_prefetch = True, 
                            disable_standard_error_capture = True, 
                            enable_fuse = True, 
                            encrypted_environment = openapi_client.models.secret.Secret(
                                cipher_text = '', 
                                key_name = '', ), 
                            entrypoint = '', 
                            environment = {
                                'key' : ''
                                }, 
                            ignore_exit_status = True, 
                            image_uri = '', 
                            labels = {
                                'key' : ''
                                }, 
                            mounts = [
                                openapi_client.models.mount.Mount(
                                    disk = '', 
                                    path = '', 
                                    read_only = True, )
                                ], 
                            pid_namespace = '', 
                            port_mappings = {
                                'key' : 56
                                }, 
                            publish_exposed_ports = True, 
                            run_in_background = True, 
                            timeout = '', )
                        ], 
                    encrypted_environment = , 
                    environment = {
                        'key' : ''
                        }, 
                    resources = openapi_client.models.resources.Resources(
                        regions = [
                            ''
                            ], 
                        virtual_machine = openapi_client.models.virtual_machine.VirtualMachine(
                            accelerators = [
                                openapi_client.models.accelerator.Accelerator(
                                    count = '', 
                                    type = '', )
                                ], 
                            boot_disk_size_gb = 56, 
                            boot_image = '', 
                            cpu_platform = '', 
                            disks = [
                                openapi_client.models.disk.Disk(
                                    name = '', 
                                    size_gb = 56, 
                                    source_image = '', 
                                    type = '', )
                                ], 
                            docker_cache_images = [
                                ''
                                ], 
                            enable_stackdriver_monitoring = True, 
                            machine_type = '', 
                            network = openapi_client.models.network.Network(
                                subnetwork = '', 
                                use_private_address = True, ), 
                            nvidia_driver_version = '', 
                            preemptible = True, 
                            reservation = '', 
                            service_account = openapi_client.models.service_account.ServiceAccount(
                                email = '', 
                                scopes = [
                                    ''
                                    ], ), 
                            volumes = [
                                openapi_client.models.volume.Volume(
                                    existing_disk = openapi_client.models.existing_disk.ExistingDisk(
                                        disk = '', ), 
                                    nfs_mount = openapi_client.models.nfs_mount.NFSMount(
                                        target = '', ), 
                                    persistent_disk = openapi_client.models.persistent_disk.PersistentDisk(
                                        size_gb = 56, 
                                        source_image = '', 
                                        type = '', ), 
                                    volume = '', )
                                ], ), 
                        zones = [
                            ''
                            ], ), 
                    timeout = '', ),
                pub_sub_topic = '',
                start_time = ''
            )
        else:
            return Metadata(
        )
        """

    def testMetadata(self):
        """Test Metadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Access Approval API

    An API for controlling access to data by Google personnel.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.access_approval_settings import AccessApprovalSettings

class TestAccessApprovalSettings(unittest.TestCase):
    """AccessApprovalSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AccessApprovalSettings:
        """Test AccessApprovalSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AccessApprovalSettings`
        """
        model = AccessApprovalSettings()
        if include_optional:
            return AccessApprovalSettings(
                active_key_version = '',
                ancestor_has_active_key_version = True,
                enrolled_ancestor = True,
                enrolled_services = [
                    openapi_client.models.enrolled_service.EnrolledService(
                        cloud_product = '', 
                        enrollment_level = 'ENROLLMENT_LEVEL_UNSPECIFIED', )
                    ],
                invalid_key_version = True,
                name = '',
                notification_emails = [
                    ''
                    ],
                notification_pubsub_topic = '',
                prefer_no_broad_approval_requests = True,
                preferred_request_expiration_days = 56
            )
        else:
            return AccessApprovalSettings(
        )
        """

    def testAccessApprovalSettings(self):
        """Test AccessApprovalSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

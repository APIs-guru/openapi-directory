# coding: utf-8

"""
    Access Approval API

    An API for controlling access to data by Google personnel.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enrolled_service import EnrolledService
from typing import Optional, Set
from typing_extensions import Self

class AccessApprovalSettings(BaseModel):
    """
    Settings on a Project/Folder/Organization related to Access Approval.
    """ # noqa: E501
    active_key_version: Optional[StrictStr] = Field(default=None, description="The asymmetric crypto key version to use for signing approval requests. Empty active_key_version indicates that a Google-managed key should be used for signing. This property will be ignored if set by an ancestor of this resource, and new non-empty values may not be set.", alias="activeKeyVersion")
    ancestor_has_active_key_version: Optional[StrictBool] = Field(default=None, description="Output only. This field is read only (not settable via UpdateAccessApprovalSettings method). If the field is true, that indicates that an ancestor of this Project or Folder has set active_key_version (this field will always be unset for the organization since organizations do not have ancestors).", alias="ancestorHasActiveKeyVersion")
    enrolled_ancestor: Optional[StrictBool] = Field(default=None, description="Output only. This field is read only (not settable via UpdateAccessApprovalSettings method). If the field is true, that indicates that at least one service is enrolled for Access Approval in one or more ancestors of the Project or Folder (this field will always be unset for the organization since organizations do not have ancestors).", alias="enrolledAncestor")
    enrolled_services: Optional[List[EnrolledService]] = Field(default=None, description="A list of Google Cloud Services for which the given resource has Access Approval enrolled. Access requests for the resource given by name against any of these services contained here will be required to have explicit approval. If name refers to an organization, enrollment can be done for individual services. If name refers to a folder or project, enrollment can only be done on an all or nothing basis. If a cloud_product is repeated in this list, the first entry will be honored and all following entries will be discarded. A maximum of 10 enrolled services will be enforced, to be expanded as the set of supported services is expanded.", alias="enrolledServices")
    invalid_key_version: Optional[StrictBool] = Field(default=None, description="Output only. This field is read only (not settable via UpdateAccessApprovalSettings method). If the field is true, that indicates that there is some configuration issue with the active_key_version configured at this level in the resource hierarchy (e.g. it doesn't exist or the Access Approval service account doesn't have the correct permissions on it, etc.) This key version is not necessarily the effective key version at this level, as key versions are inherited top-down.", alias="invalidKeyVersion")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the settings. Format is one of: * \"projects/{project}/accessApprovalSettings\" * \"folders/{folder}/accessApprovalSettings\" * \"organizations/{organization}/accessApprovalSettings\"")
    notification_emails: Optional[List[StrictStr]] = Field(default=None, description="A list of email addresses to which notifications relating to approval requests should be sent. Notifications relating to a resource will be sent to all emails in the settings of ancestor resources of that resource. A maximum of 50 email addresses are allowed.", alias="notificationEmails")
    notification_pubsub_topic: Optional[StrictStr] = Field(default=None, description="Optional. A pubsub topic to which notifications relating to approval requests should be sent.", alias="notificationPubsubTopic")
    prefer_no_broad_approval_requests: Optional[StrictBool] = Field(default=None, description="This preference is communicated to Google personnel when sending an approval request but can be overridden if necessary.", alias="preferNoBroadApprovalRequests")
    preferred_request_expiration_days: Optional[StrictInt] = Field(default=None, description="This preference is shared with Google personnel, but can be overridden if said personnel deems necessary. The approver ultimately can set the expiration at approval time.", alias="preferredRequestExpirationDays")
    __properties: ClassVar[List[str]] = ["activeKeyVersion", "ancestorHasActiveKeyVersion", "enrolledAncestor", "enrolledServices", "invalidKeyVersion", "name", "notificationEmails", "notificationPubsubTopic", "preferNoBroadApprovalRequests", "preferredRequestExpirationDays"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccessApprovalSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "ancestor_has_active_key_version",
            "enrolled_ancestor",
            "invalid_key_version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in enrolled_services (list)
        _items = []
        if self.enrolled_services:
            for _item_enrolled_services in self.enrolled_services:
                if _item_enrolled_services:
                    _items.append(_item_enrolled_services.to_dict())
            _dict['enrolledServices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccessApprovalSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeKeyVersion": obj.get("activeKeyVersion"),
            "ancestorHasActiveKeyVersion": obj.get("ancestorHasActiveKeyVersion"),
            "enrolledAncestor": obj.get("enrolledAncestor"),
            "enrolledServices": [EnrolledService.from_dict(_item) for _item in obj["enrolledServices"]] if obj.get("enrolledServices") is not None else None,
            "invalidKeyVersion": obj.get("invalidKeyVersion"),
            "name": obj.get("name"),
            "notificationEmails": obj.get("notificationEmails"),
            "notificationPubsubTopic": obj.get("notificationPubsubTopic"),
            "preferNoBroadApprovalRequests": obj.get("preferNoBroadApprovalRequests"),
            "preferredRequestExpirationDays": obj.get("preferredRequestExpirationDays")
        })
        return _obj



# coding: utf-8

"""
    Access Approval API

    An API for controlling access to data by Google personnel.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SignatureInfo(BaseModel):
    """
    Information about the digital signature of the resource.
    """ # noqa: E501
    customer_kms_key_version: Optional[StrictStr] = Field(default=None, description="The resource name of the customer CryptoKeyVersion used for signing.", alias="customerKmsKeyVersion")
    google_key_algorithm: Optional[StrictStr] = Field(default=None, description="The hashing algorithm used for signature verification. It will only be present in the case of Google managed keys.", alias="googleKeyAlgorithm")
    google_public_key_pem: Optional[StrictStr] = Field(default=None, description="The public key for the Google default signing, encoded in PEM format. The signature was created using a private key which may be verified using this public key.", alias="googlePublicKeyPem")
    serialized_approval_request: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The ApprovalRequest that is serialized without the SignatureInfo message field. This data is used with the hashing algorithm to generate the digital signature, and it can be used for signature verification.", alias="serializedApprovalRequest")
    signature: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The digital signature.")
    __properties: ClassVar[List[str]] = ["customerKmsKeyVersion", "googleKeyAlgorithm", "googlePublicKeyPem", "serializedApprovalRequest", "signature"]

    @field_validator('google_key_algorithm')
    def google_key_algorithm_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED', 'GOOGLE_SYMMETRIC_ENCRYPTION', 'AES_128_GCM', 'AES_256_GCM', 'AES_128_CBC', 'AES_256_CBC', 'AES_128_CTR', 'AES_256_CTR', 'RSA_SIGN_PSS_2048_SHA256', 'RSA_SIGN_PSS_3072_SHA256', 'RSA_SIGN_PSS_4096_SHA256', 'RSA_SIGN_PSS_4096_SHA512', 'RSA_SIGN_PKCS1_2048_SHA256', 'RSA_SIGN_PKCS1_3072_SHA256', 'RSA_SIGN_PKCS1_4096_SHA256', 'RSA_SIGN_PKCS1_4096_SHA512', 'RSA_SIGN_RAW_PKCS1_2048', 'RSA_SIGN_RAW_PKCS1_3072', 'RSA_SIGN_RAW_PKCS1_4096', 'RSA_DECRYPT_OAEP_2048_SHA256', 'RSA_DECRYPT_OAEP_3072_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA512', 'RSA_DECRYPT_OAEP_2048_SHA1', 'RSA_DECRYPT_OAEP_3072_SHA1', 'RSA_DECRYPT_OAEP_4096_SHA1', 'EC_SIGN_P256_SHA256', 'EC_SIGN_P384_SHA384', 'EC_SIGN_SECP256K1_SHA256', 'HMAC_SHA256', 'HMAC_SHA1', 'HMAC_SHA384', 'HMAC_SHA512', 'HMAC_SHA224', 'EXTERNAL_SYMMETRIC_ENCRYPTION']):
            raise ValueError("must be one of enum values ('CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED', 'GOOGLE_SYMMETRIC_ENCRYPTION', 'AES_128_GCM', 'AES_256_GCM', 'AES_128_CBC', 'AES_256_CBC', 'AES_128_CTR', 'AES_256_CTR', 'RSA_SIGN_PSS_2048_SHA256', 'RSA_SIGN_PSS_3072_SHA256', 'RSA_SIGN_PSS_4096_SHA256', 'RSA_SIGN_PSS_4096_SHA512', 'RSA_SIGN_PKCS1_2048_SHA256', 'RSA_SIGN_PKCS1_3072_SHA256', 'RSA_SIGN_PKCS1_4096_SHA256', 'RSA_SIGN_PKCS1_4096_SHA512', 'RSA_SIGN_RAW_PKCS1_2048', 'RSA_SIGN_RAW_PKCS1_3072', 'RSA_SIGN_RAW_PKCS1_4096', 'RSA_DECRYPT_OAEP_2048_SHA256', 'RSA_DECRYPT_OAEP_3072_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA512', 'RSA_DECRYPT_OAEP_2048_SHA1', 'RSA_DECRYPT_OAEP_3072_SHA1', 'RSA_DECRYPT_OAEP_4096_SHA1', 'EC_SIGN_P256_SHA256', 'EC_SIGN_P384_SHA384', 'EC_SIGN_SECP256K1_SHA256', 'HMAC_SHA256', 'HMAC_SHA1', 'HMAC_SHA384', 'HMAC_SHA512', 'HMAC_SHA224', 'EXTERNAL_SYMMETRIC_ENCRYPTION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SignatureInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SignatureInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customerKmsKeyVersion": obj.get("customerKmsKeyVersion"),
            "googleKeyAlgorithm": obj.get("googleKeyAlgorithm"),
            "googlePublicKeyPem": obj.get("googlePublicKeyPem"),
            "serializedApprovalRequest": obj.get("serializedApprovalRequest"),
            "signature": obj.get("signature")
        })
        return _obj



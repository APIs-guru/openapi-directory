# coding: utf-8

"""
    Access Approval API

    An API for controlling access to data by Google personnel.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.access_locations import AccessLocations
from openapi_client.models.access_reason import AccessReason
from openapi_client.models.approve_decision import ApproveDecision
from openapi_client.models.dismiss_decision import DismissDecision
from openapi_client.models.resource_properties import ResourceProperties
from typing import Optional, Set
from typing_extensions import Self

class ApprovalRequest(BaseModel):
    """
    A request for the customer to approve access to a resource.
    """ # noqa: E501
    approve: Optional[ApproveDecision] = None
    dismiss: Optional[DismissDecision] = None
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the request. Format is \"{projects|folders|organizations}/{id}/approvalRequests/{approval_request}\".")
    request_time: Optional[StrictStr] = Field(default=None, description="The time at which approval was requested.", alias="requestTime")
    requested_duration: Optional[StrictStr] = Field(default=None, description="The requested access duration.", alias="requestedDuration")
    requested_expiration: Optional[StrictStr] = Field(default=None, description="The original requested expiration for the approval. Calculated by adding the requested_duration to the request_time.", alias="requestedExpiration")
    requested_locations: Optional[AccessLocations] = Field(default=None, alias="requestedLocations")
    requested_reason: Optional[AccessReason] = Field(default=None, alias="requestedReason")
    requested_resource_name: Optional[StrictStr] = Field(default=None, description="The resource for which approval is being requested. The format of the resource name is defined at https://cloud.google.com/apis/design/resource_names. The resource name here may either be a \"full\" resource name (e.g. \"//library.googleapis.com/shelves/shelf1/books/book2\") or a \"relative\" resource name (e.g. \"shelves/shelf1/books/book2\") as described in the resource name specification.", alias="requestedResourceName")
    requested_resource_properties: Optional[ResourceProperties] = Field(default=None, alias="requestedResourceProperties")
    __properties: ClassVar[List[str]] = ["approve", "dismiss", "name", "requestTime", "requestedDuration", "requestedExpiration", "requestedLocations", "requestedReason", "requestedResourceName", "requestedResourceProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApprovalRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of approve
        if self.approve:
            _dict['approve'] = self.approve.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dismiss
        if self.dismiss:
            _dict['dismiss'] = self.dismiss.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requested_locations
        if self.requested_locations:
            _dict['requestedLocations'] = self.requested_locations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requested_reason
        if self.requested_reason:
            _dict['requestedReason'] = self.requested_reason.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requested_resource_properties
        if self.requested_resource_properties:
            _dict['requestedResourceProperties'] = self.requested_resource_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApprovalRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approve": ApproveDecision.from_dict(obj["approve"]) if obj.get("approve") is not None else None,
            "dismiss": DismissDecision.from_dict(obj["dismiss"]) if obj.get("dismiss") is not None else None,
            "name": obj.get("name"),
            "requestTime": obj.get("requestTime"),
            "requestedDuration": obj.get("requestedDuration"),
            "requestedExpiration": obj.get("requestedExpiration"),
            "requestedLocations": AccessLocations.from_dict(obj["requestedLocations"]) if obj.get("requestedLocations") is not None else None,
            "requestedReason": AccessReason.from_dict(obj["requestedReason"]) if obj.get("requestedReason") is not None else None,
            "requestedResourceName": obj.get("requestedResourceName"),
            "requestedResourceProperties": ResourceProperties.from_dict(obj["requestedResourceProperties"]) if obj.get("requestedResourceProperties") is not None else None
        })
        return _obj



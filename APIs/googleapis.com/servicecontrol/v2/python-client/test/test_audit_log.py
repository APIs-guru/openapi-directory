# coding: utf-8

"""
    Service Control API

    Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.audit_log import AuditLog

class TestAuditLog(unittest.TestCase):
    """AuditLog unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AuditLog:
        """Test AuditLog
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AuditLog`
        """
        model = AuditLog()
        if include_optional:
            return AuditLog(
                authentication_info = openapi_client.models.authentication_info.AuthenticationInfo(
                    authority_selector = '', 
                    principal_email = '', 
                    principal_subject = '', 
                    service_account_delegation_info = [
                        openapi_client.models.service_account_delegation_info.ServiceAccountDelegationInfo(
                            first_party_principal = openapi_client.models.first_party_principal.FirstPartyPrincipal(
                                principal_email = '', 
                                service_metadata = {
                                    'key' : null
                                    }, ), 
                            principal_subject = '', 
                            third_party_principal = openapi_client.models.third_party_principal.ThirdPartyPrincipal(
                                third_party_claims = {
                                    'key' : null
                                    }, ), )
                        ], 
                    service_account_key_name = '', 
                    service_delegation_history = openapi_client.models.service_delegation_history.ServiceDelegationHistory(
                        original_principal = '', ), 
                    third_party_principal = {
                        'key' : null
                        }, ),
                authorization_info = [
                    openapi_client.models.authorization_info.AuthorizationInfo(
                        granted = True, 
                        permission = '', 
                        resource = '', 
                        resource_attributes = openapi_client.models.resource.Resource(
                            annotations = {
                                'key' : ''
                                }, 
                            create_time = '', 
                            delete_time = '', 
                            display_name = '', 
                            etag = '', 
                            labels = {
                                'key' : ''
                                }, 
                            location = '', 
                            name = '', 
                            service = '', 
                            type = '', 
                            uid = '', 
                            update_time = '', ), )
                    ],
                metadata = {
                    'key' : null
                    },
                method_name = '',
                num_response_items = '',
                policy_violation_info = openapi_client.models.policy_violation_info.PolicyViolationInfo(
                    org_policy_violation_info = openapi_client.models.org_policy_violation_info.OrgPolicyViolationInfo(
                        payload = {
                            'key' : null
                            }, 
                        resource_tags = {
                            'key' : ''
                            }, 
                        resource_type = '', 
                        violation_info = [
                            openapi_client.models.violation_info.ViolationInfo(
                                checked_value = '', 
                                constraint = '', 
                                error_message = '', 
                                policy_type = 'POLICY_TYPE_UNSPECIFIED', )
                            ], ), ),
                request = {
                    'key' : null
                    },
                request_metadata = openapi_client.models.request_metadata.RequestMetadata(
                    caller_ip = '', 
                    caller_network = '', 
                    caller_supplied_user_agent = '', 
                    destination_attributes = openapi_client.models.peer.Peer(
                        ip = '', 
                        labels = {
                            'key' : ''
                            }, 
                        port = '', 
                        principal = '', 
                        region_code = '', ), 
                    request_attributes = openapi_client.models.request.Request(
                        auth = openapi_client.models.auth.Auth(
                            access_levels = [
                                ''
                                ], 
                            audiences = [
                                ''
                                ], 
                            claims = {
                                'key' : null
                                }, 
                            presenter = '', 
                            principal = '', ), 
                        headers = {
                            'key' : ''
                            }, 
                        host = '', 
                        id = '', 
                        method = '', 
                        path = '', 
                        protocol = '', 
                        query = '', 
                        reason = '', 
                        scheme = '', 
                        size = '', 
                        time = '', ), ),
                resource_location = openapi_client.models.resource_location.ResourceLocation(
                    current_locations = [
                        ''
                        ], 
                    original_locations = [
                        ''
                        ], ),
                resource_name = '',
                resource_original_state = {
                    'key' : null
                    },
                response = {
                    'key' : null
                    },
                service_data = {
                    'key' : null
                    },
                service_name = '',
                status = openapi_client.models.status.Status(
                    code = 56, 
                    details = [
                        {
                            'key' : null
                            }
                        ], 
                    message = '', )
            )
        else:
            return AuditLog(
        )
        """

    def testAuditLog(self):
        """Test AuditLog"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

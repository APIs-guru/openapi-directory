# coding: utf-8

"""
    Service Control API

    Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.report_request import ReportRequest

class TestReportRequest(unittest.TestCase):
    """ReportRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReportRequest:
        """Test ReportRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReportRequest`
        """
        model = ReportRequest()
        if include_optional:
            return ReportRequest(
                operations = [
                    openapi_client.models.attribute_context.AttributeContext(
                        api = openapi_client.models.api.Api(
                            operation = '', 
                            protocol = '', 
                            service = '', 
                            version = '', ), 
                        destination = openapi_client.models.peer.Peer(
                            ip = '', 
                            labels = {
                                'key' : ''
                                }, 
                            port = '', 
                            principal = '', 
                            region_code = '', ), 
                        extensions = [
                            {
                                'key' : null
                                }
                            ], 
                        origin = openapi_client.models.peer.Peer(
                            ip = '', 
                            port = '', 
                            principal = '', 
                            region_code = '', ), 
                        request = openapi_client.models.request.Request(
                            auth = openapi_client.models.auth.Auth(
                                access_levels = [
                                    ''
                                    ], 
                                audiences = [
                                    ''
                                    ], 
                                claims = {
                                    'key' : null
                                    }, 
                                presenter = '', 
                                principal = '', ), 
                            headers = {
                                'key' : ''
                                }, 
                            host = '', 
                            id = '', 
                            method = '', 
                            path = '', 
                            protocol = '', 
                            query = '', 
                            reason = '', 
                            scheme = '', 
                            size = '', 
                            time = '', ), 
                        resource = openapi_client.models.resource.Resource(
                            annotations = {
                                'key' : ''
                                }, 
                            create_time = '', 
                            delete_time = '', 
                            display_name = '', 
                            etag = '', 
                            location = '', 
                            name = '', 
                            service = '', 
                            type = '', 
                            uid = '', 
                            update_time = '', ), 
                        response = openapi_client.models.response.Response(
                            backend_latency = '', 
                            code = '', 
                            size = '', 
                            time = '', ), 
                        source = , )
                    ],
                service_config_id = ''
            )
        else:
            return ReportRequest(
        )
        """

    def testReportRequest(self):
        """Test ReportRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

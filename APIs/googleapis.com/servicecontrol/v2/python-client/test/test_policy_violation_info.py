# coding: utf-8

"""
    Service Control API

    Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.policy_violation_info import PolicyViolationInfo

class TestPolicyViolationInfo(unittest.TestCase):
    """PolicyViolationInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PolicyViolationInfo:
        """Test PolicyViolationInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PolicyViolationInfo`
        """
        model = PolicyViolationInfo()
        if include_optional:
            return PolicyViolationInfo(
                org_policy_violation_info = openapi_client.models.org_policy_violation_info.OrgPolicyViolationInfo(
                    payload = {
                        'key' : null
                        }, 
                    resource_tags = {
                        'key' : ''
                        }, 
                    resource_type = '', 
                    violation_info = [
                        openapi_client.models.violation_info.ViolationInfo(
                            checked_value = '', 
                            constraint = '', 
                            error_message = '', 
                            policy_type = 'POLICY_TYPE_UNSPECIFIED', )
                        ], )
            )
        else:
            return PolicyViolationInfo(
        )
        """

    def testPolicyViolationInfo(self):
        """Test PolicyViolationInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

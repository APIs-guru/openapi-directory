# coding: utf-8

"""
    Service Control API

    Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.service_account_delegation_info import ServiceAccountDelegationInfo
from openapi_client.models.service_delegation_history import ServiceDelegationHistory
from typing import Optional, Set
from typing_extensions import Self

class AuthenticationInfo(BaseModel):
    """
    Authentication information for the operation.
    """ # noqa: E501
    authority_selector: Optional[StrictStr] = Field(default=None, description="The authority selector specified by the requestor, if any. It is not guaranteed that the principal was allowed to use this authority.", alias="authoritySelector")
    principal_email: Optional[StrictStr] = Field(default=None, description="The email address of the authenticated user (or service account on behalf of third party principal) making the request. For third party identity callers, the `principal_subject` field is populated instead of this field. For privacy reasons, the principal email address is sometimes redacted. For more information, see [Caller identities in audit logs](https://cloud.google.com/logging/docs/audit#user-id).", alias="principalEmail")
    principal_subject: Optional[StrictStr] = Field(default=None, description="String representation of identity of requesting party. Populated for both first and third party identities.", alias="principalSubject")
    service_account_delegation_info: Optional[List[ServiceAccountDelegationInfo]] = Field(default=None, description="Identity delegation history of an authenticated service account that makes the request. It contains information on the real authorities that try to access GCP resources by delegating on a service account. When multiple authorities present, they are guaranteed to be sorted based on the original ordering of the identity delegation events.", alias="serviceAccountDelegationInfo")
    service_account_key_name: Optional[StrictStr] = Field(default=None, description="The name of the service account key used to create or exchange credentials for authenticating the service account making the request. This is a scheme-less URI full resource name. For example: \"//iam.googleapis.com/projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}\"", alias="serviceAccountKeyName")
    service_delegation_history: Optional[ServiceDelegationHistory] = Field(default=None, alias="serviceDelegationHistory")
    third_party_principal: Optional[Dict[str, Any]] = Field(default=None, description="The third party identification (if any) of the authenticated user making the request. When the JSON object represented here has a proto equivalent, the proto name will be indicated in the `@type` property.", alias="thirdPartyPrincipal")
    __properties: ClassVar[List[str]] = ["authoritySelector", "principalEmail", "principalSubject", "serviceAccountDelegationInfo", "serviceAccountKeyName", "serviceDelegationHistory", "thirdPartyPrincipal"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthenticationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in service_account_delegation_info (list)
        _items = []
        if self.service_account_delegation_info:
            for _item_service_account_delegation_info in self.service_account_delegation_info:
                if _item_service_account_delegation_info:
                    _items.append(_item_service_account_delegation_info.to_dict())
            _dict['serviceAccountDelegationInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of service_delegation_history
        if self.service_delegation_history:
            _dict['serviceDelegationHistory'] = self.service_delegation_history.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthenticationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authoritySelector": obj.get("authoritySelector"),
            "principalEmail": obj.get("principalEmail"),
            "principalSubject": obj.get("principalSubject"),
            "serviceAccountDelegationInfo": [ServiceAccountDelegationInfo.from_dict(_item) for _item in obj["serviceAccountDelegationInfo"]] if obj.get("serviceAccountDelegationInfo") is not None else None,
            "serviceAccountKeyName": obj.get("serviceAccountKeyName"),
            "serviceDelegationHistory": ServiceDelegationHistory.from_dict(obj["serviceDelegationHistory"]) if obj.get("serviceDelegationHistory") is not None else None,
            "thirdPartyPrincipal": obj.get("thirdPartyPrincipal")
        })
        return _obj



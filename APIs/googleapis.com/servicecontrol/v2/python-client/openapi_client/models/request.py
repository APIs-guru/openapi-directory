# coding: utf-8

"""
    Service Control API

    Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auth import Auth
from typing import Optional, Set
from typing_extensions import Self

class Request(BaseModel):
    """
    This message defines attributes for an HTTP request. If the actual request is not an HTTP request, the runtime system should try to map the actual request to an equivalent HTTP request.
    """ # noqa: E501
    auth: Optional[Auth] = None
    headers: Optional[Dict[str, StrictStr]] = Field(default=None, description="The HTTP request headers. If multiple headers share the same key, they must be merged according to the HTTP spec. All header keys must be lowercased, because HTTP header keys are case-insensitive.")
    host: Optional[StrictStr] = Field(default=None, description="The HTTP request `Host` header value.")
    id: Optional[StrictStr] = Field(default=None, description="The unique ID for a request, which can be propagated to downstream systems. The ID should have low probability of collision within a single day for a specific service.")
    method: Optional[StrictStr] = Field(default=None, description="The HTTP request method, such as `GET`, `POST`.")
    path: Optional[StrictStr] = Field(default=None, description="The HTTP URL path, excluding the query parameters.")
    protocol: Optional[StrictStr] = Field(default=None, description="The network protocol used with the request, such as \"http/1.1\", \"spdy/3\", \"h2\", \"h2c\", \"webrtc\", \"tcp\", \"udp\", \"quic\". See https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for details.")
    query: Optional[StrictStr] = Field(default=None, description="The HTTP URL query in the format of `name1=value1&name2=value2`, as it appears in the first line of the HTTP request. No decoding is performed.")
    reason: Optional[StrictStr] = Field(default=None, description="A special parameter for request reason. It is used by security systems to associate auditing information with a request.")
    scheme: Optional[StrictStr] = Field(default=None, description="The HTTP URL scheme, such as `http` and `https`.")
    size: Optional[StrictStr] = Field(default=None, description="The HTTP request size in bytes. If unknown, it must be -1.")
    time: Optional[StrictStr] = Field(default=None, description="The timestamp when the `destination` service receives the last byte of the request.")
    __properties: ClassVar[List[str]] = ["auth", "headers", "host", "id", "method", "path", "protocol", "query", "reason", "scheme", "size", "time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Request from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auth
        if self.auth:
            _dict['auth'] = self.auth.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Request from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auth": Auth.from_dict(obj["auth"]) if obj.get("auth") is not None else None,
            "headers": obj.get("headers"),
            "host": obj.get("host"),
            "id": obj.get("id"),
            "method": obj.get("method"),
            "path": obj.get("path"),
            "protocol": obj.get("protocol"),
            "query": obj.get("query"),
            "reason": obj.get("reason"),
            "scheme": obj.get("scheme"),
            "size": obj.get("size"),
            "time": obj.get("time")
        })
        return _obj



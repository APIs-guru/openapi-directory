# coding: utf-8

"""
    Service Control API

    Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.peer import Peer
from openapi_client.models.request import Request
from typing import Optional, Set
from typing_extensions import Self

class RequestMetadata(BaseModel):
    """
    Metadata about the request.
    """ # noqa: E501
    caller_ip: Optional[StrictStr] = Field(default=None, description="The IP address of the caller. For a caller from the internet, this will be the public IPv4 or IPv6 address. For calls made from inside Google's internal production network from one GCP service to another, `caller_ip` will be redacted to \"private\". For a caller from a Compute Engine VM with a external IP address, `caller_ip` will be the VM's external IP address. For a caller from a Compute Engine VM without a external IP address, if the VM is in the same organization (or project) as the accessed resource, `caller_ip` will be the VM's internal IPv4 address, otherwise `caller_ip` will be redacted to \"gce-internal-ip\". See https://cloud.google.com/compute/docs/vpc/ for more information.", alias="callerIp")
    caller_network: Optional[StrictStr] = Field(default=None, description="The network of the caller. Set only if the network host project is part of the same GCP organization (or project) as the accessed resource. See https://cloud.google.com/compute/docs/vpc/ for more information. This is a scheme-less URI full resource name. For example: \"//compute.googleapis.com/projects/PROJECT_ID/global/networks/NETWORK_ID\"", alias="callerNetwork")
    caller_supplied_user_agent: Optional[StrictStr] = Field(default=None, description="The user agent of the caller. This information is not authenticated and should be treated accordingly. For example: + `google-api-python-client/1.4.0`: The request was made by the Google API client for Python. + `Cloud SDK Command Line Tool apitools-client/1.0 gcloud/0.9.62`: The request was made by the Google Cloud SDK CLI (gcloud). + `AppEngine-Google; (+http://code.google.com/appengine; appid: s~my-project`: The request was made from the `my-project` App Engine app.", alias="callerSuppliedUserAgent")
    destination_attributes: Optional[Peer] = Field(default=None, alias="destinationAttributes")
    request_attributes: Optional[Request] = Field(default=None, alias="requestAttributes")
    __properties: ClassVar[List[str]] = ["callerIp", "callerNetwork", "callerSuppliedUserAgent", "destinationAttributes", "requestAttributes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequestMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destination_attributes
        if self.destination_attributes:
            _dict['destinationAttributes'] = self.destination_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_attributes
        if self.request_attributes:
            _dict['requestAttributes'] = self.request_attributes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequestMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callerIp": obj.get("callerIp"),
            "callerNetwork": obj.get("callerNetwork"),
            "callerSuppliedUserAgent": obj.get("callerSuppliedUserAgent"),
            "destinationAttributes": Peer.from_dict(obj["destinationAttributes"]) if obj.get("destinationAttributes") is not None else None,
            "requestAttributes": Request.from_dict(obj["requestAttributes"]) if obj.get("requestAttributes") is not None else None
        })
        return _obj



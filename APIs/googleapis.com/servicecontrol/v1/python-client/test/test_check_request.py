# coding: utf-8

"""
    Service Control API

    Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.check_request import CheckRequest

class TestCheckRequest(unittest.TestCase):
    """CheckRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CheckRequest:
        """Test CheckRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CheckRequest`
        """
        model = CheckRequest()
        if include_optional:
            return CheckRequest(
                operation = openapi_client.models.operation.Operation(
                    consumer_id = '', 
                    end_time = '', 
                    importance = 'LOW', 
                    labels = {
                        'key' : ''
                        }, 
                    log_entries = [
                        openapi_client.models.log_entry.LogEntry(
                            http_request = openapi_client.models.http_request.HttpRequest(
                                cache_fill_bytes = '', 
                                cache_hit = True, 
                                cache_lookup = True, 
                                cache_validated_with_origin_server = True, 
                                latency = '', 
                                protocol = '', 
                                referer = '', 
                                remote_ip = '', 
                                request_method = '', 
                                request_size = '', 
                                request_url = '', 
                                response_size = '', 
                                server_ip = '', 
                                status = 56, 
                                user_agent = '', ), 
                            insert_id = '', 
                            name = '', 
                            operation = openapi_client.models.log_entry_operation.LogEntryOperation(
                                first = True, 
                                id = '', 
                                last = True, 
                                producer = '', ), 
                            proto_payload = {
                                'key' : null
                                }, 
                            severity = 'DEFAULT', 
                            source_location = openapi_client.models.log_entry_source_location.LogEntrySourceLocation(
                                file = '', 
                                function = '', 
                                line = '', ), 
                            struct_payload = {
                                'key' : null
                                }, 
                            text_payload = '', 
                            timestamp = '', 
                            trace = '', )
                        ], 
                    metric_value_sets = [
                        openapi_client.models.metric_value_set.MetricValueSet(
                            metric_name = '', 
                            metric_values = [
                                openapi_client.models.metric_value.MetricValue(
                                    bool_value = True, 
                                    distribution_value = openapi_client.models.distribution.Distribution(
                                        bucket_counts = [
                                            ''
                                            ], 
                                        count = '', 
                                        exemplars = [
                                            openapi_client.models.exemplar.Exemplar(
                                                attachments = [
                                                    {
                                                        'key' : null
                                                        }
                                                    ], 
                                                timestamp = '', 
                                                value = 1.337, )
                                            ], 
                                        explicit_buckets = openapi_client.models.explicit_buckets.ExplicitBuckets(
                                            bounds = [
                                                1.337
                                                ], ), 
                                        exponential_buckets = openapi_client.models.exponential_buckets.ExponentialBuckets(
                                            growth_factor = 1.337, 
                                            num_finite_buckets = 56, 
                                            scale = 1.337, ), 
                                        linear_buckets = openapi_client.models.linear_buckets.LinearBuckets(
                                            num_finite_buckets = 56, 
                                            offset = 1.337, 
                                            width = 1.337, ), 
                                        maximum = 1.337, 
                                        mean = 1.337, 
                                        minimum = 1.337, 
                                        sum_of_squared_deviation = 1.337, ), 
                                    double_value = 1.337, 
                                    end_time = '', 
                                    int64_value = '', 
                                    money_value = openapi_client.models.money.Money(
                                        currency_code = '', 
                                        nanos = 56, 
                                        units = '', ), 
                                    start_time = '', 
                                    string_value = '', )
                                ], )
                        ], 
                    operation_id = '', 
                    operation_name = '', 
                    quota_properties = openapi_client.models.quota_properties.QuotaProperties(
                        quota_mode = 'ACQUIRE', ), 
                    resources = [
                        openapi_client.models.resource_info.ResourceInfo(
                            permission = '', 
                            resource_container = '', 
                            resource_location = '', 
                            resource_name = '', )
                        ], 
                    start_time = '', 
                    trace_spans = [
                        openapi_client.models.trace_span.TraceSpan(
                            attributes = openapi_client.models.attributes.Attributes(
                                attribute_map = {
                                    'key' : openapi_client.models.attribute_value.AttributeValue(
                                        bool_value = True, 
                                        int_value = '', 
                                        string_value = openapi_client.models.truncatable_string.TruncatableString(
                                            truncated_byte_count = 56, 
                                            value = '', ), )
                                    }, 
                                dropped_attributes_count = 56, ), 
                            child_span_count = 56, 
                            display_name = openapi_client.models.truncatable_string.TruncatableString(
                                truncated_byte_count = 56, 
                                value = '', ), 
                            end_time = '', 
                            name = '', 
                            parent_span_id = '', 
                            same_process_as_parent_span = True, 
                            span_id = '', 
                            span_kind = 'SPAN_KIND_UNSPECIFIED', 
                            start_time = '', 
                            status = openapi_client.models.status.Status(
                                code = 56, 
                                details = [
                                    {
                                        'key' : null
                                        }
                                    ], 
                                message = '', ), )
                        ], 
                    user_labels = {
                        'key' : ''
                        }, ),
                request_project_settings = True,
                service_config_id = '',
                skip_activation_check = True
            )
        else:
            return CheckRequest(
        )
        """

    def testCheckRequest(self):
        """Test CheckRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

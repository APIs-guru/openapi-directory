# coding: utf-8

"""
    Service Control API

    Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.trace_span import TraceSpan

class TestTraceSpan(unittest.TestCase):
    """TraceSpan unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TraceSpan:
        """Test TraceSpan
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TraceSpan`
        """
        model = TraceSpan()
        if include_optional:
            return TraceSpan(
                attributes = openapi_client.models.attributes.Attributes(
                    attribute_map = {
                        'key' : openapi_client.models.attribute_value.AttributeValue(
                            bool_value = True, 
                            int_value = '', 
                            string_value = openapi_client.models.truncatable_string.TruncatableString(
                                truncated_byte_count = 56, 
                                value = '', ), )
                        }, 
                    dropped_attributes_count = 56, ),
                child_span_count = 56,
                display_name = openapi_client.models.truncatable_string.TruncatableString(
                    truncated_byte_count = 56, 
                    value = '', ),
                end_time = '',
                name = '',
                parent_span_id = '',
                same_process_as_parent_span = True,
                span_id = '',
                span_kind = 'SPAN_KIND_UNSPECIFIED',
                start_time = '',
                status = openapi_client.models.status.Status(
                    code = 56, 
                    details = [
                        {
                            'key' : null
                            }
                        ], 
                    message = '', )
            )
        else:
            return TraceSpan(
        )
        """

    def testTraceSpan(self):
        """Test TraceSpan"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

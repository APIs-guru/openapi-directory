# coding: utf-8

"""
    Service Control API

    Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.metric_value_set import MetricValueSet

class TestMetricValueSet(unittest.TestCase):
    """MetricValueSet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MetricValueSet:
        """Test MetricValueSet
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MetricValueSet`
        """
        model = MetricValueSet()
        if include_optional:
            return MetricValueSet(
                metric_name = '',
                metric_values = [
                    openapi_client.models.metric_value.MetricValue(
                        bool_value = True, 
                        distribution_value = openapi_client.models.distribution.Distribution(
                            bucket_counts = [
                                ''
                                ], 
                            count = '', 
                            exemplars = [
                                openapi_client.models.exemplar.Exemplar(
                                    attachments = [
                                        {
                                            'key' : null
                                            }
                                        ], 
                                    timestamp = '', 
                                    value = 1.337, )
                                ], 
                            explicit_buckets = openapi_client.models.explicit_buckets.ExplicitBuckets(
                                bounds = [
                                    1.337
                                    ], ), 
                            exponential_buckets = openapi_client.models.exponential_buckets.ExponentialBuckets(
                                growth_factor = 1.337, 
                                num_finite_buckets = 56, 
                                scale = 1.337, ), 
                            linear_buckets = openapi_client.models.linear_buckets.LinearBuckets(
                                num_finite_buckets = 56, 
                                offset = 1.337, 
                                width = 1.337, ), 
                            maximum = 1.337, 
                            mean = 1.337, 
                            minimum = 1.337, 
                            sum_of_squared_deviation = 1.337, ), 
                        double_value = 1.337, 
                        end_time = '', 
                        int64_value = '', 
                        labels = {
                            'key' : ''
                            }, 
                        money_value = openapi_client.models.money.Money(
                            currency_code = '', 
                            nanos = 56, 
                            units = '', ), 
                        start_time = '', 
                        string_value = '', )
                    ]
            )
        else:
            return MetricValueSet(
        )
        """

    def testMetricValueSet(self):
        """Test MetricValueSet"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

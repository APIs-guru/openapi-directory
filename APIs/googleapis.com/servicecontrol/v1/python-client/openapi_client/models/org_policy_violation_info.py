# coding: utf-8

"""
    Service Control API

    Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.violation_info import ViolationInfo
from typing import Optional, Set
from typing_extensions import Self

class OrgPolicyViolationInfo(BaseModel):
    """
    Represents OrgPolicy Violation information.
    """ # noqa: E501
    payload: Optional[Dict[str, Any]] = Field(default=None, description="Optional. Resource payload that is currently in scope and is subjected to orgpolicy conditions. This payload may be the subset of the actual Resource that may come in the request. This payload should not contain any core content.")
    resource_tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Tags referenced on the resource at the time of evaluation. These also include the federated tags, if they are supplied in the CheckOrgPolicy or CheckCustomConstraints Requests. Optional field as of now. These tags are the Cloud tags that are available on the resource during the policy evaluation and will be available as part of the OrgPolicy check response for logging purposes.", alias="resourceTags")
    resource_type: Optional[StrictStr] = Field(default=None, description="Optional. Resource type that the orgpolicy is checked against. Example: compute.googleapis.com/Instance, store.googleapis.com/bucket", alias="resourceType")
    violation_info: Optional[List[ViolationInfo]] = Field(default=None, description="Optional. Policy violations", alias="violationInfo")
    __properties: ClassVar[List[str]] = ["payload", "resourceTags", "resourceType", "violationInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrgPolicyViolationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in violation_info (list)
        _items = []
        if self.violation_info:
            for _item_violation_info in self.violation_info:
                if _item_violation_info:
                    _items.append(_item_violation_info.to_dict())
            _dict['violationInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrgPolicyViolationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payload": obj.get("payload"),
            "resourceTags": obj.get("resourceTags"),
            "resourceType": obj.get("resourceType"),
            "violationInfo": [ViolationInfo.from_dict(_item) for _item in obj["violationInfo"]] if obj.get("violationInfo") is not None else None
        })
        return _obj



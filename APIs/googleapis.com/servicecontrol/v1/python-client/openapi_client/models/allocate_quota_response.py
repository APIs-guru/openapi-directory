# coding: utf-8

"""
    Service Control API

    Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.allocate_info import AllocateInfo
from openapi_client.models.metric_value_set import MetricValueSet
from openapi_client.models.quota_error import QuotaError
from typing import Optional, Set
from typing_extensions import Self

class AllocateQuotaResponse(BaseModel):
    """
    Response message for the AllocateQuota method.
    """ # noqa: E501
    allocate_errors: Optional[List[QuotaError]] = Field(default=None, description="Indicates the decision of the allocate.", alias="allocateErrors")
    allocate_info: Optional[AllocateInfo] = Field(default=None, alias="allocateInfo")
    operation_id: Optional[StrictStr] = Field(default=None, description="The same operation_id value used in the AllocateQuotaRequest. Used for logging and diagnostics purposes.", alias="operationId")
    quota_metrics: Optional[List[MetricValueSet]] = Field(default=None, description="Quota metrics to indicate the result of allocation. Depending on the request, one or more of the following metrics will be included: 1. Per quota group or per quota metric incremental usage will be specified using the following delta metric : \"serviceruntime.googleapis.com/api/consumer/quota_used_count\" 2. The quota limit reached condition will be specified using the following boolean metric : \"serviceruntime.googleapis.com/quota/exceeded\"", alias="quotaMetrics")
    service_config_id: Optional[StrictStr] = Field(default=None, description="ID of the actual config used to process the request.", alias="serviceConfigId")
    __properties: ClassVar[List[str]] = ["allocateErrors", "allocateInfo", "operationId", "quotaMetrics", "serviceConfigId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AllocateQuotaResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in allocate_errors (list)
        _items = []
        if self.allocate_errors:
            for _item_allocate_errors in self.allocate_errors:
                if _item_allocate_errors:
                    _items.append(_item_allocate_errors.to_dict())
            _dict['allocateErrors'] = _items
        # override the default output from pydantic by calling `to_dict()` of allocate_info
        if self.allocate_info:
            _dict['allocateInfo'] = self.allocate_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in quota_metrics (list)
        _items = []
        if self.quota_metrics:
            for _item_quota_metrics in self.quota_metrics:
                if _item_quota_metrics:
                    _items.append(_item_quota_metrics.to_dict())
            _dict['quotaMetrics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AllocateQuotaResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allocateErrors": [QuotaError.from_dict(_item) for _item in obj["allocateErrors"]] if obj.get("allocateErrors") is not None else None,
            "allocateInfo": AllocateInfo.from_dict(obj["allocateInfo"]) if obj.get("allocateInfo") is not None else None,
            "operationId": obj.get("operationId"),
            "quotaMetrics": [MetricValueSet.from_dict(_item) for _item in obj["quotaMetrics"]] if obj.get("quotaMetrics") is not None else None,
            "serviceConfigId": obj.get("serviceConfigId")
        })
        return _obj



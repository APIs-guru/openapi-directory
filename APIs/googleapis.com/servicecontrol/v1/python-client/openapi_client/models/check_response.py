# coding: utf-8

"""
    Service Control API

    Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.check_error import CheckError
from openapi_client.models.check_info import CheckInfo
from openapi_client.models.quota_info import QuotaInfo
from typing import Optional, Set
from typing_extensions import Self

class CheckResponse(BaseModel):
    """
    Response message for the Check method.
    """ # noqa: E501
    check_errors: Optional[List[CheckError]] = Field(default=None, description="Indicate the decision of the check. If no check errors are present, the service should process the operation. Otherwise the service should use the list of errors to determine the appropriate action.", alias="checkErrors")
    check_info: Optional[CheckInfo] = Field(default=None, alias="checkInfo")
    operation_id: Optional[StrictStr] = Field(default=None, description="The same operation_id value used in the CheckRequest. Used for logging and diagnostics purposes.", alias="operationId")
    quota_info: Optional[QuotaInfo] = Field(default=None, alias="quotaInfo")
    service_config_id: Optional[StrictStr] = Field(default=None, description="The actual config id used to process the request.", alias="serviceConfigId")
    service_rollout_id: Optional[StrictStr] = Field(default=None, description="The current service rollout id used to process the request.", alias="serviceRolloutId")
    __properties: ClassVar[List[str]] = ["checkErrors", "checkInfo", "operationId", "quotaInfo", "serviceConfigId", "serviceRolloutId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in check_errors (list)
        _items = []
        if self.check_errors:
            for _item_check_errors in self.check_errors:
                if _item_check_errors:
                    _items.append(_item_check_errors.to_dict())
            _dict['checkErrors'] = _items
        # override the default output from pydantic by calling `to_dict()` of check_info
        if self.check_info:
            _dict['checkInfo'] = self.check_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quota_info
        if self.quota_info:
            _dict['quotaInfo'] = self.quota_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checkErrors": [CheckError.from_dict(_item) for _item in obj["checkErrors"]] if obj.get("checkErrors") is not None else None,
            "checkInfo": CheckInfo.from_dict(obj["checkInfo"]) if obj.get("checkInfo") is not None else None,
            "operationId": obj.get("operationId"),
            "quotaInfo": QuotaInfo.from_dict(obj["quotaInfo"]) if obj.get("quotaInfo") is not None else None,
            "serviceConfigId": obj.get("serviceConfigId"),
            "serviceRolloutId": obj.get("serviceRolloutId")
        })
        return _obj



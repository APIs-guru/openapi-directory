# coding: utf-8

"""
    Service Control API

    Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attributes import Attributes
from openapi_client.models.status import Status
from openapi_client.models.truncatable_string import TruncatableString
from typing import Optional, Set
from typing_extensions import Self

class TraceSpan(BaseModel):
    """
    A span represents a single operation within a trace. Spans can be nested to form a trace tree. Often, a trace contains a root span that describes the end-to-end latency, and one or more subspans for its sub-operations. A trace can also contain multiple root spans, or none at all. Spans do not need to be contiguousâ€”there may be gaps or overlaps between spans in a trace.
    """ # noqa: E501
    attributes: Optional[Attributes] = None
    child_span_count: Optional[StrictInt] = Field(default=None, description="An optional number of child spans that were generated while this span was active. If set, allows implementation to detect missing child spans.", alias="childSpanCount")
    display_name: Optional[TruncatableString] = Field(default=None, alias="displayName")
    end_time: Optional[StrictStr] = Field(default=None, description="The end time of the span. On the client side, this is the time kept by the local machine where the span execution ends. On the server side, this is the time when the server application handler stops running.", alias="endTime")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the span in the following format: projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array. [SPAN_ID] is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array.")
    parent_span_id: Optional[StrictStr] = Field(default=None, description="The [SPAN_ID] of this span's parent span. If this is a root span, then this field must be empty.", alias="parentSpanId")
    same_process_as_parent_span: Optional[StrictBool] = Field(default=None, description="(Optional) Set this parameter to indicate whether this span is in the same process as its parent. If you do not set this parameter, Stackdriver Trace is unable to take advantage of this helpful information.", alias="sameProcessAsParentSpan")
    span_id: Optional[StrictStr] = Field(default=None, description="The [SPAN_ID] portion of the span's resource name.", alias="spanId")
    span_kind: Optional[StrictStr] = Field(default=None, description="Distinguishes between spans generated in a particular context. For example, two spans with the same name may be distinguished using `CLIENT` (caller) and `SERVER` (callee) to identify an RPC call.", alias="spanKind")
    start_time: Optional[StrictStr] = Field(default=None, description="The start time of the span. On the client side, this is the time kept by the local machine where the span execution starts. On the server side, this is the time when the server's application handler starts running.", alias="startTime")
    status: Optional[Status] = None
    __properties: ClassVar[List[str]] = ["attributes", "childSpanCount", "displayName", "endTime", "name", "parentSpanId", "sameProcessAsParentSpan", "spanId", "spanKind", "startTime", "status"]

    @field_validator('span_kind')
    def span_kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SPAN_KIND_UNSPECIFIED', 'INTERNAL', 'SERVER', 'CLIENT', 'PRODUCER', 'CONSUMER']):
            raise ValueError("must be one of enum values ('SPAN_KIND_UNSPECIFIED', 'INTERNAL', 'SERVER', 'CLIENT', 'PRODUCER', 'CONSUMER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TraceSpan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attributes
        if self.attributes:
            _dict['attributes'] = self.attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of display_name
        if self.display_name:
            _dict['displayName'] = self.display_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TraceSpan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": Attributes.from_dict(obj["attributes"]) if obj.get("attributes") is not None else None,
            "childSpanCount": obj.get("childSpanCount"),
            "displayName": TruncatableString.from_dict(obj["displayName"]) if obj.get("displayName") is not None else None,
            "endTime": obj.get("endTime"),
            "name": obj.get("name"),
            "parentSpanId": obj.get("parentSpanId"),
            "sameProcessAsParentSpan": obj.get("sameProcessAsParentSpan"),
            "spanId": obj.get("spanId"),
            "spanKind": obj.get("spanKind"),
            "startTime": obj.get("startTime"),
            "status": Status.from_dict(obj["status"]) if obj.get("status") is not None else None
        })
        return _obj



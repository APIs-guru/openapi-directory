# coding: utf-8

"""
    Service Control API

    Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class CheckError(BaseModel):
    """
    Defines the errors to be returned in google.api.servicecontrol.v1.CheckResponse.check_errors.
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, description="The error code.")
    detail: Optional[StrictStr] = Field(default=None, description="Free-form text providing details on the error cause of the error.")
    status: Optional[Status] = None
    subject: Optional[StrictStr] = Field(default=None, description="Subject to whom this error applies. See the specific code enum for more details on this field. For example: - \"project:\" - \"folder:\" - \"organization:\"")
    __properties: ClassVar[List[str]] = ["code", "detail", "status", "subject"]

    @field_validator('code')
    def code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ERROR_CODE_UNSPECIFIED', 'NOT_FOUND', 'PERMISSION_DENIED', 'RESOURCE_EXHAUSTED', 'BUDGET_EXCEEDED', 'DENIAL_OF_SERVICE_DETECTED', 'LOAD_SHEDDING', 'ABUSER_DETECTED', 'SERVICE_NOT_ACTIVATED', 'VISIBILITY_DENIED', 'BILLING_DISABLED', 'PROJECT_DELETED', 'PROJECT_INVALID', 'CONSUMER_INVALID', 'IP_ADDRESS_BLOCKED', 'REFERER_BLOCKED', 'CLIENT_APP_BLOCKED', 'API_TARGET_BLOCKED', 'API_KEY_INVALID', 'API_KEY_EXPIRED', 'API_KEY_NOT_FOUND', 'SPATULA_HEADER_INVALID', 'LOAS_ROLE_INVALID', 'NO_LOAS_PROJECT', 'LOAS_PROJECT_DISABLED', 'SECURITY_POLICY_VIOLATED', 'INVALID_CREDENTIAL', 'LOCATION_POLICY_VIOLATED', 'NAMESPACE_LOOKUP_UNAVAILABLE', 'SERVICE_STATUS_UNAVAILABLE', 'BILLING_STATUS_UNAVAILABLE', 'QUOTA_CHECK_UNAVAILABLE', 'LOAS_PROJECT_LOOKUP_UNAVAILABLE', 'CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE', 'SECURITY_POLICY_BACKEND_UNAVAILABLE', 'LOCATION_POLICY_BACKEND_UNAVAILABLE', 'INJECTED_ERROR']):
            raise ValueError("must be one of enum values ('ERROR_CODE_UNSPECIFIED', 'NOT_FOUND', 'PERMISSION_DENIED', 'RESOURCE_EXHAUSTED', 'BUDGET_EXCEEDED', 'DENIAL_OF_SERVICE_DETECTED', 'LOAD_SHEDDING', 'ABUSER_DETECTED', 'SERVICE_NOT_ACTIVATED', 'VISIBILITY_DENIED', 'BILLING_DISABLED', 'PROJECT_DELETED', 'PROJECT_INVALID', 'CONSUMER_INVALID', 'IP_ADDRESS_BLOCKED', 'REFERER_BLOCKED', 'CLIENT_APP_BLOCKED', 'API_TARGET_BLOCKED', 'API_KEY_INVALID', 'API_KEY_EXPIRED', 'API_KEY_NOT_FOUND', 'SPATULA_HEADER_INVALID', 'LOAS_ROLE_INVALID', 'NO_LOAS_PROJECT', 'LOAS_PROJECT_DISABLED', 'SECURITY_POLICY_VIOLATED', 'INVALID_CREDENTIAL', 'LOCATION_POLICY_VIOLATED', 'NAMESPACE_LOOKUP_UNAVAILABLE', 'SERVICE_STATUS_UNAVAILABLE', 'BILLING_STATUS_UNAVAILABLE', 'QUOTA_CHECK_UNAVAILABLE', 'LOAS_PROJECT_LOOKUP_UNAVAILABLE', 'CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE', 'SECURITY_POLICY_BACKEND_UNAVAILABLE', 'LOCATION_POLICY_BACKEND_UNAVAILABLE', 'INJECTED_ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "detail": obj.get("detail"),
            "status": Status.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "subject": obj.get("subject")
        })
        return _obj



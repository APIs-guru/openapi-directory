# coding: utf-8

"""
    Service Control API

    Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.http_request import HttpRequest
from openapi_client.models.log_entry_operation import LogEntryOperation
from openapi_client.models.log_entry_source_location import LogEntrySourceLocation
from typing import Optional, Set
from typing_extensions import Self

class LogEntry(BaseModel):
    """
    An individual log entry.
    """ # noqa: E501
    http_request: Optional[HttpRequest] = Field(default=None, alias="httpRequest")
    insert_id: Optional[StrictStr] = Field(default=None, description="A unique ID for the log entry used for deduplication. If omitted, the implementation will generate one based on operation_id.", alias="insertId")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="A set of user-defined (key, value) data that provides additional information about the log entry.")
    name: Optional[StrictStr] = Field(default=None, description="Required. The log to which this log entry belongs. Examples: `\"syslog\"`, `\"book_log\"`.")
    operation: Optional[LogEntryOperation] = None
    proto_payload: Optional[Dict[str, Any]] = Field(default=None, description="The log entry payload, represented as a protocol buffer that is expressed as a JSON object. The only accepted type currently is AuditLog.", alias="protoPayload")
    severity: Optional[StrictStr] = Field(default=None, description="The severity of the log entry. The default value is `LogSeverity.DEFAULT`.")
    source_location: Optional[LogEntrySourceLocation] = Field(default=None, alias="sourceLocation")
    struct_payload: Optional[Dict[str, Any]] = Field(default=None, description="The log entry payload, represented as a structure that is expressed as a JSON object.", alias="structPayload")
    text_payload: Optional[StrictStr] = Field(default=None, description="The log entry payload, represented as a Unicode string (UTF-8).", alias="textPayload")
    timestamp: Optional[StrictStr] = Field(default=None, description="The time the event described by the log entry occurred. If omitted, defaults to operation start time.")
    trace: Optional[StrictStr] = Field(default=None, description="Optional. Resource name of the trace associated with the log entry, if any. If this field contains a relative resource name, you can assume the name is relative to `//tracing.googleapis.com`. Example: `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`")
    __properties: ClassVar[List[str]] = ["httpRequest", "insertId", "labels", "name", "operation", "protoPayload", "severity", "sourceLocation", "structPayload", "textPayload", "timestamp", "trace"]

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEFAULT', 'DEBUG', 'INFO', 'NOTICE', 'WARNING', 'ERROR', 'CRITICAL', 'ALERT', 'EMERGENCY']):
            raise ValueError("must be one of enum values ('DEFAULT', 'DEBUG', 'INFO', 'NOTICE', 'WARNING', 'ERROR', 'CRITICAL', 'ALERT', 'EMERGENCY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LogEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of http_request
        if self.http_request:
            _dict['httpRequest'] = self.http_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation
        if self.operation:
            _dict['operation'] = self.operation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_location
        if self.source_location:
            _dict['sourceLocation'] = self.source_location.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LogEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "httpRequest": HttpRequest.from_dict(obj["httpRequest"]) if obj.get("httpRequest") is not None else None,
            "insertId": obj.get("insertId"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "operation": LogEntryOperation.from_dict(obj["operation"]) if obj.get("operation") is not None else None,
            "protoPayload": obj.get("protoPayload"),
            "severity": obj.get("severity"),
            "sourceLocation": LogEntrySourceLocation.from_dict(obj["sourceLocation"]) if obj.get("sourceLocation") is not None else None,
            "structPayload": obj.get("structPayload"),
            "textPayload": obj.get("textPayload"),
            "timestamp": obj.get("timestamp"),
            "trace": obj.get("trace")
        })
        return _obj



# coding: utf-8

"""
    Service Control API

    Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.log_entry import LogEntry
from openapi_client.models.metric_value_set import MetricValueSet
from openapi_client.models.quota_properties import QuotaProperties
from openapi_client.models.resource_info import ResourceInfo
from openapi_client.models.trace_span import TraceSpan
from typing import Optional, Set
from typing_extensions import Self

class Operation(BaseModel):
    """
    Represents information regarding an operation.
    """ # noqa: E501
    consumer_id: Optional[StrictStr] = Field(default=None, description="Identity of the consumer who is using the service. This field should be filled in for the operations initiated by a consumer, but not for service-initiated operations that are not related to a specific consumer. - This can be in one of the following formats: - project:PROJECT_ID, - project`_`number:PROJECT_NUMBER, - projects/PROJECT_ID or PROJECT_NUMBER, - folders/FOLDER_NUMBER, - organizations/ORGANIZATION_NUMBER, - api`_`key:API_KEY.", alias="consumerId")
    end_time: Optional[StrictStr] = Field(default=None, description="End time of the operation. Required when the operation is used in ServiceController.Report, but optional when the operation is used in ServiceController.Check.", alias="endTime")
    importance: Optional[StrictStr] = Field(default=None, description="DO NOT USE. This is an experimental field.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels describing the operation. Only the following labels are allowed: - Labels describing monitored resources as defined in the service configuration. - Default labels of metric values. When specified, labels defined in the metric value override these default. - The following labels defined by Google Cloud Platform: - `cloud.googleapis.com/location` describing the location where the operation happened, - `servicecontrol.googleapis.com/user_agent` describing the user agent of the API request, - `servicecontrol.googleapis.com/service_agent` describing the service used to handle the API request (e.g. ESP), - `servicecontrol.googleapis.com/platform` describing the platform where the API is served, such as App Engine, Compute Engine, or Kubernetes Engine.")
    log_entries: Optional[List[LogEntry]] = Field(default=None, description="Represents information to be logged.", alias="logEntries")
    metric_value_sets: Optional[List[MetricValueSet]] = Field(default=None, description="Represents information about this operation. Each MetricValueSet corresponds to a metric defined in the service configuration. The data type used in the MetricValueSet must agree with the data type specified in the metric definition. Within a single operation, it is not allowed to have more than one MetricValue instances that have the same metric names and identical label value combinations. If a request has such duplicated MetricValue instances, the entire request is rejected with an invalid argument error.", alias="metricValueSets")
    operation_id: Optional[StrictStr] = Field(default=None, description="Identity of the operation. This must be unique within the scope of the service that generated the operation. If the service calls Check() and Report() on the same operation, the two calls should carry the same id. UUID version 4 is recommended, though not required. In scenarios where an operation is computed from existing information and an idempotent id is desirable for deduplication purpose, UUID version 5 is recommended. See RFC 4122 for details.", alias="operationId")
    operation_name: Optional[StrictStr] = Field(default=None, description="Fully qualified name of the operation. Reserved for future use.", alias="operationName")
    quota_properties: Optional[QuotaProperties] = Field(default=None, alias="quotaProperties")
    resources: Optional[List[ResourceInfo]] = Field(default=None, description="The resources that are involved in the operation. The maximum supported number of entries in this field is 100.")
    start_time: Optional[StrictStr] = Field(default=None, description="Required. Start time of the operation.", alias="startTime")
    trace_spans: Optional[List[TraceSpan]] = Field(default=None, description="Unimplemented. A list of Cloud Trace spans. The span names shall contain the id of the destination project which can be either the produce or the consumer project.", alias="traceSpans")
    user_labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Private Preview. This feature is only available for approved services. User defined labels for the resource that this operation is associated with.", alias="userLabels")
    __properties: ClassVar[List[str]] = ["consumerId", "endTime", "importance", "labels", "logEntries", "metricValueSets", "operationId", "operationName", "quotaProperties", "resources", "startTime", "traceSpans", "userLabels"]

    @field_validator('importance')
    def importance_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LOW', 'HIGH', 'DEBUG', 'PROMOTED']):
            raise ValueError("must be one of enum values ('LOW', 'HIGH', 'DEBUG', 'PROMOTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Operation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in log_entries (list)
        _items = []
        if self.log_entries:
            for _item_log_entries in self.log_entries:
                if _item_log_entries:
                    _items.append(_item_log_entries.to_dict())
            _dict['logEntries'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metric_value_sets (list)
        _items = []
        if self.metric_value_sets:
            for _item_metric_value_sets in self.metric_value_sets:
                if _item_metric_value_sets:
                    _items.append(_item_metric_value_sets.to_dict())
            _dict['metricValueSets'] = _items
        # override the default output from pydantic by calling `to_dict()` of quota_properties
        if self.quota_properties:
            _dict['quotaProperties'] = self.quota_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item_resources in self.resources:
                if _item_resources:
                    _items.append(_item_resources.to_dict())
            _dict['resources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trace_spans (list)
        _items = []
        if self.trace_spans:
            for _item_trace_spans in self.trace_spans:
                if _item_trace_spans:
                    _items.append(_item_trace_spans.to_dict())
            _dict['traceSpans'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Operation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consumerId": obj.get("consumerId"),
            "endTime": obj.get("endTime"),
            "importance": obj.get("importance"),
            "labels": obj.get("labels"),
            "logEntries": [LogEntry.from_dict(_item) for _item in obj["logEntries"]] if obj.get("logEntries") is not None else None,
            "metricValueSets": [MetricValueSet.from_dict(_item) for _item in obj["metricValueSets"]] if obj.get("metricValueSets") is not None else None,
            "operationId": obj.get("operationId"),
            "operationName": obj.get("operationName"),
            "quotaProperties": QuotaProperties.from_dict(obj["quotaProperties"]) if obj.get("quotaProperties") is not None else None,
            "resources": [ResourceInfo.from_dict(_item) for _item in obj["resources"]] if obj.get("resources") is not None else None,
            "startTime": obj.get("startTime"),
            "traceSpans": [TraceSpan.from_dict(_item) for _item in obj["traceSpans"]] if obj.get("traceSpans") is not None else None,
            "userLabels": obj.get("userLabels")
        })
        return _obj



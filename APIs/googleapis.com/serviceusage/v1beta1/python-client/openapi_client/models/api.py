# coding: utf-8

"""
    Service Usage API

    Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.method import Method
from openapi_client.models.mixin import Mixin
from openapi_client.models.option import Option
from openapi_client.models.source_context import SourceContext
from typing import Optional, Set
from typing_extensions import Self

class Api(BaseModel):
    """
    Api is a light-weight descriptor for an API Interface. Interfaces are also described as \"protocol buffer services\" in some contexts, such as by the \"service\" keyword in a .proto file, but they are different from API Services, which represent a concrete implementation of an interface as opposed to simply a description of methods and bindings. They are also sometimes simply referred to as \"APIs\" in other contexts, such as the name of this message itself. See https://cloud.google.com/apis/design/glossary for detailed terminology.
    """ # noqa: E501
    methods: Optional[List[Method]] = Field(default=None, description="The methods of this interface, in unspecified order.")
    mixins: Optional[List[Mixin]] = Field(default=None, description="Included interfaces. See Mixin.")
    name: Optional[StrictStr] = Field(default=None, description="The fully qualified name of this interface, including package name followed by the interface's simple name.")
    options: Optional[List[Option]] = Field(default=None, description="Any metadata attached to the interface.")
    source_context: Optional[SourceContext] = Field(default=None, alias="sourceContext")
    syntax: Optional[StrictStr] = Field(default=None, description="The source syntax of the service.")
    version: Optional[StrictStr] = Field(default=None, description="A version string for this interface. If specified, must have the form `major-version.minor-version`, as in `1.10`. If the minor version is omitted, it defaults to zero. If the entire version field is empty, the major version is derived from the package name, as outlined below. If the field is not empty, the version in the package name will be verified to be consistent with what is provided here. The versioning schema uses [semantic versioning](http://semver.org) where the major version number indicates a breaking change and the minor version an additive, non-breaking change. Both version numbers are signals to users what to expect from different versions, and should be carefully chosen based on the product plan. The major version is also reflected in the package name of the interface, which must end in `v`, as in `google.feature.v1`. For major versions 0 and 1, the suffix can be omitted. Zero major versions must only be used for experimental, non-GA interfaces. ")
    __properties: ClassVar[List[str]] = ["methods", "mixins", "name", "options", "sourceContext", "syntax", "version"]

    @field_validator('syntax')
    def syntax_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SYNTAX_PROTO2', 'SYNTAX_PROTO3', 'SYNTAX_EDITIONS']):
            raise ValueError("must be one of enum values ('SYNTAX_PROTO2', 'SYNTAX_PROTO3', 'SYNTAX_EDITIONS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Api from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in methods (list)
        _items = []
        if self.methods:
            for _item_methods in self.methods:
                if _item_methods:
                    _items.append(_item_methods.to_dict())
            _dict['methods'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mixins (list)
        _items = []
        if self.mixins:
            for _item_mixins in self.mixins:
                if _item_mixins:
                    _items.append(_item_mixins.to_dict())
            _dict['mixins'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in options (list)
        _items = []
        if self.options:
            for _item_options in self.options:
                if _item_options:
                    _items.append(_item_options.to_dict())
            _dict['options'] = _items
        # override the default output from pydantic by calling `to_dict()` of source_context
        if self.source_context:
            _dict['sourceContext'] = self.source_context.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Api from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "methods": [Method.from_dict(_item) for _item in obj["methods"]] if obj.get("methods") is not None else None,
            "mixins": [Mixin.from_dict(_item) for _item in obj["mixins"]] if obj.get("mixins") is not None else None,
            "name": obj.get("name"),
            "options": [Option.from_dict(_item) for _item in obj["options"]] if obj.get("options") is not None else None,
            "sourceContext": SourceContext.from_dict(obj["sourceContext"]) if obj.get("sourceContext") is not None else None,
            "syntax": obj.get("syntax"),
            "version": obj.get("version")
        })
        return _obj



# coding: utf-8

"""
    Service Usage API

    Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ContextRule(BaseModel):
    """
    A context rule provides information about the context for an individual API element.
    """ # noqa: E501
    allowed_request_extensions: Optional[List[StrictStr]] = Field(default=None, description="A list of full type names or extension IDs of extensions allowed in grpc side channel from client to backend.", alias="allowedRequestExtensions")
    allowed_response_extensions: Optional[List[StrictStr]] = Field(default=None, description="A list of full type names or extension IDs of extensions allowed in grpc side channel from backend to client.", alias="allowedResponseExtensions")
    provided: Optional[List[StrictStr]] = Field(default=None, description="A list of full type names of provided contexts.")
    requested: Optional[List[StrictStr]] = Field(default=None, description="A list of full type names of requested contexts.")
    selector: Optional[StrictStr] = Field(default=None, description="Selects the methods to which this rule applies. Refer to selector for syntax details.")
    __properties: ClassVar[List[str]] = ["allowedRequestExtensions", "allowedResponseExtensions", "provided", "requested", "selector"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContextRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContextRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedRequestExtensions": obj.get("allowedRequestExtensions"),
            "allowedResponseExtensions": obj.get("allowedResponseExtensions"),
            "provided": obj.get("provided"),
            "requested": obj.get("requested"),
            "selector": obj.get("selector")
        })
        return _obj



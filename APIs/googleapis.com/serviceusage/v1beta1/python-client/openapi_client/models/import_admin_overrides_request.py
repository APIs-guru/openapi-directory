# coding: utf-8

"""
    Service Usage API

    Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.override_inline_source import OverrideInlineSource
from typing import Optional, Set
from typing_extensions import Self

class ImportAdminOverridesRequest(BaseModel):
    """
    Request message for ImportAdminOverrides
    """ # noqa: E501
    force: Optional[StrictBool] = Field(default=None, description="Whether to force the creation of the quota overrides. Setting the force parameter to 'true' ignores all quota safety checks that would fail the request. QuotaSafetyCheck lists all such validations.")
    force_only: Optional[List[StrictStr]] = Field(default=None, description="The list of quota safety checks to ignore before the override mutation. Unlike 'force' field that ignores all the quota safety checks, the 'force_only' field ignores only the specified checks; other checks are still enforced. The 'force' and 'force_only' fields cannot both be set.", alias="forceOnly")
    inline_source: Optional[OverrideInlineSource] = Field(default=None, alias="inlineSource")
    __properties: ClassVar[List[str]] = ["force", "forceOnly", "inlineSource"]

    @field_validator('force_only')
    def force_only_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['QUOTA_SAFETY_CHECK_UNSPECIFIED', 'LIMIT_DECREASE_BELOW_USAGE', 'LIMIT_DECREASE_PERCENTAGE_TOO_HIGH']):
                raise ValueError("each list item must be one of ('QUOTA_SAFETY_CHECK_UNSPECIFIED', 'LIMIT_DECREASE_BELOW_USAGE', 'LIMIT_DECREASE_PERCENTAGE_TOO_HIGH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImportAdminOverridesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of inline_source
        if self.inline_source:
            _dict['inlineSource'] = self.inline_source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImportAdminOverridesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "force": obj.get("force"),
            "forceOnly": obj.get("forceOnly"),
            "inlineSource": OverrideInlineSource.from_dict(obj["inlineSource"]) if obj.get("inlineSource") is not None else None
        })
        return _obj



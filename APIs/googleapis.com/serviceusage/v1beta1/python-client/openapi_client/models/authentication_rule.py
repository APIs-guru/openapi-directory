# coding: utf-8

"""
    Service Usage API

    Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auth_requirement import AuthRequirement
from openapi_client.models.o_auth_requirements import OAuthRequirements
from typing import Optional, Set
from typing_extensions import Self

class AuthenticationRule(BaseModel):
    """
    Authentication rules for the service. By default, if a method has any authentication requirements, every request must include a valid credential matching one of the requirements. It's an error to include more than one kind of credential in a single request. If a method doesn't have any auth requirements, request credentials will be ignored.
    """ # noqa: E501
    allow_without_credential: Optional[StrictBool] = Field(default=None, description="If true, the service accepts API keys without any other credential. This flag only applies to HTTP and gRPC requests.", alias="allowWithoutCredential")
    oauth: Optional[OAuthRequirements] = None
    requirements: Optional[List[AuthRequirement]] = Field(default=None, description="Requirements for additional authentication providers.")
    selector: Optional[StrictStr] = Field(default=None, description="Selects the methods to which this rule applies. Refer to selector for syntax details.")
    __properties: ClassVar[List[str]] = ["allowWithoutCredential", "oauth", "requirements", "selector"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthenticationRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of oauth
        if self.oauth:
            _dict['oauth'] = self.oauth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in requirements (list)
        _items = []
        if self.requirements:
            for _item_requirements in self.requirements:
                if _item_requirements:
                    _items.append(_item_requirements.to_dict())
            _dict['requirements'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthenticationRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowWithoutCredential": obj.get("allowWithoutCredential"),
            "oauth": OAuthRequirements.from_dict(obj["oauth"]) if obj.get("oauth") is not None else None,
            "requirements": [AuthRequirement.from_dict(_item) for _item in obj["requirements"]] if obj.get("requirements") is not None else None,
            "selector": obj.get("selector")
        })
        return _obj



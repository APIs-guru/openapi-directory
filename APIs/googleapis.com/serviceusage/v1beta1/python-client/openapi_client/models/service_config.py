# coding: utf-8

"""
    Service Usage API

    Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api import Api
from openapi_client.models.authentication import Authentication
from openapi_client.models.documentation import Documentation
from openapi_client.models.endpoint import Endpoint
from openapi_client.models.monitored_resource_descriptor import MonitoredResourceDescriptor
from openapi_client.models.monitoring import Monitoring
from openapi_client.models.quota import Quota
from openapi_client.models.usage import Usage
from typing import Optional, Set
from typing_extensions import Self

class ServiceConfig(BaseModel):
    """
    The configuration of the service.
    """ # noqa: E501
    apis: Optional[List[Api]] = Field(default=None, description="A list of API interfaces exported by this service. Contains only the names, versions, and method names of the interfaces.")
    authentication: Optional[Authentication] = None
    documentation: Optional[Documentation] = None
    endpoints: Optional[List[Endpoint]] = Field(default=None, description="Configuration for network endpoints. Contains only the names and aliases of the endpoints.")
    monitored_resources: Optional[List[MonitoredResourceDescriptor]] = Field(default=None, description="Defines the monitored resources used by this service. This is required by the Service.monitoring and Service.logging configurations.", alias="monitoredResources")
    monitoring: Optional[Monitoring] = None
    name: Optional[StrictStr] = Field(default=None, description="The DNS address at which this service is available. An example DNS address would be: `calendar.googleapis.com`.")
    quota: Optional[Quota] = None
    title: Optional[StrictStr] = Field(default=None, description="The product title for this service.")
    usage: Optional[Usage] = None
    __properties: ClassVar[List[str]] = ["apis", "authentication", "documentation", "endpoints", "monitoredResources", "monitoring", "name", "quota", "title", "usage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in apis (list)
        _items = []
        if self.apis:
            for _item_apis in self.apis:
                if _item_apis:
                    _items.append(_item_apis.to_dict())
            _dict['apis'] = _items
        # override the default output from pydantic by calling `to_dict()` of authentication
        if self.authentication:
            _dict['authentication'] = self.authentication.to_dict()
        # override the default output from pydantic by calling `to_dict()` of documentation
        if self.documentation:
            _dict['documentation'] = self.documentation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in endpoints (list)
        _items = []
        if self.endpoints:
            for _item_endpoints in self.endpoints:
                if _item_endpoints:
                    _items.append(_item_endpoints.to_dict())
            _dict['endpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in monitored_resources (list)
        _items = []
        if self.monitored_resources:
            for _item_monitored_resources in self.monitored_resources:
                if _item_monitored_resources:
                    _items.append(_item_monitored_resources.to_dict())
            _dict['monitoredResources'] = _items
        # override the default output from pydantic by calling `to_dict()` of monitoring
        if self.monitoring:
            _dict['monitoring'] = self.monitoring.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quota
        if self.quota:
            _dict['quota'] = self.quota.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apis": [Api.from_dict(_item) for _item in obj["apis"]] if obj.get("apis") is not None else None,
            "authentication": Authentication.from_dict(obj["authentication"]) if obj.get("authentication") is not None else None,
            "documentation": Documentation.from_dict(obj["documentation"]) if obj.get("documentation") is not None else None,
            "endpoints": [Endpoint.from_dict(_item) for _item in obj["endpoints"]] if obj.get("endpoints") is not None else None,
            "monitoredResources": [MonitoredResourceDescriptor.from_dict(_item) for _item in obj["monitoredResources"]] if obj.get("monitoredResources") is not None else None,
            "monitoring": Monitoring.from_dict(obj["monitoring"]) if obj.get("monitoring") is not None else None,
            "name": obj.get("name"),
            "quota": Quota.from_dict(obj["quota"]) if obj.get("quota") is not None else None,
            "title": obj.get("title"),
            "usage": Usage.from_dict(obj["usage"]) if obj.get("usage") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Service Usage API

    Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cpp_settings import CppSettings
from openapi_client.models.dotnet_settings import DotnetSettings
from openapi_client.models.go_settings import GoSettings
from openapi_client.models.java_settings import JavaSettings
from openapi_client.models.node_settings import NodeSettings
from openapi_client.models.php_settings import PhpSettings
from openapi_client.models.python_settings import PythonSettings
from openapi_client.models.ruby_settings import RubySettings
from typing import Optional, Set
from typing_extensions import Self

class ClientLibrarySettings(BaseModel):
    """
    Details about how and where to publish client libraries.
    """ # noqa: E501
    cpp_settings: Optional[CppSettings] = Field(default=None, alias="cppSettings")
    dotnet_settings: Optional[DotnetSettings] = Field(default=None, alias="dotnetSettings")
    go_settings: Optional[GoSettings] = Field(default=None, alias="goSettings")
    java_settings: Optional[JavaSettings] = Field(default=None, alias="javaSettings")
    launch_stage: Optional[StrictStr] = Field(default=None, description="Launch stage of this version of the API.", alias="launchStage")
    node_settings: Optional[NodeSettings] = Field(default=None, alias="nodeSettings")
    php_settings: Optional[PhpSettings] = Field(default=None, alias="phpSettings")
    python_settings: Optional[PythonSettings] = Field(default=None, alias="pythonSettings")
    rest_numeric_enums: Optional[StrictBool] = Field(default=None, description="When using transport=rest, the client request will encode enums as numbers rather than strings.", alias="restNumericEnums")
    ruby_settings: Optional[RubySettings] = Field(default=None, alias="rubySettings")
    version: Optional[StrictStr] = Field(default=None, description="Version of the API to apply these settings to. This is the full protobuf package for the API, ending in the version element. Examples: \"google.cloud.speech.v1\" and \"google.spanner.admin.database.v1\".")
    __properties: ClassVar[List[str]] = ["cppSettings", "dotnetSettings", "goSettings", "javaSettings", "launchStage", "nodeSettings", "phpSettings", "pythonSettings", "restNumericEnums", "rubySettings", "version"]

    @field_validator('launch_stage')
    def launch_stage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LAUNCH_STAGE_UNSPECIFIED', 'UNIMPLEMENTED', 'PRELAUNCH', 'EARLY_ACCESS', 'ALPHA', 'BETA', 'GA', 'DEPRECATED']):
            raise ValueError("must be one of enum values ('LAUNCH_STAGE_UNSPECIFIED', 'UNIMPLEMENTED', 'PRELAUNCH', 'EARLY_ACCESS', 'ALPHA', 'BETA', 'GA', 'DEPRECATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientLibrarySettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cpp_settings
        if self.cpp_settings:
            _dict['cppSettings'] = self.cpp_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dotnet_settings
        if self.dotnet_settings:
            _dict['dotnetSettings'] = self.dotnet_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of go_settings
        if self.go_settings:
            _dict['goSettings'] = self.go_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of java_settings
        if self.java_settings:
            _dict['javaSettings'] = self.java_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_settings
        if self.node_settings:
            _dict['nodeSettings'] = self.node_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of php_settings
        if self.php_settings:
            _dict['phpSettings'] = self.php_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of python_settings
        if self.python_settings:
            _dict['pythonSettings'] = self.python_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ruby_settings
        if self.ruby_settings:
            _dict['rubySettings'] = self.ruby_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientLibrarySettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cppSettings": CppSettings.from_dict(obj["cppSettings"]) if obj.get("cppSettings") is not None else None,
            "dotnetSettings": DotnetSettings.from_dict(obj["dotnetSettings"]) if obj.get("dotnetSettings") is not None else None,
            "goSettings": GoSettings.from_dict(obj["goSettings"]) if obj.get("goSettings") is not None else None,
            "javaSettings": JavaSettings.from_dict(obj["javaSettings"]) if obj.get("javaSettings") is not None else None,
            "launchStage": obj.get("launchStage"),
            "nodeSettings": NodeSettings.from_dict(obj["nodeSettings"]) if obj.get("nodeSettings") is not None else None,
            "phpSettings": PhpSettings.from_dict(obj["phpSettings"]) if obj.get("phpSettings") is not None else None,
            "pythonSettings": PythonSettings.from_dict(obj["pythonSettings"]) if obj.get("pythonSettings") is not None else None,
            "restNumericEnums": obj.get("restNumericEnums"),
            "rubySettings": RubySettings.from_dict(obj["rubySettings"]) if obj.get("rubySettings") is not None else None,
            "version": obj.get("version")
        })
        return _obj



# coding: utf-8

"""
    Service Usage API

    Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.quota_bucket import QuotaBucket
from typing import Optional, Set
from typing_extensions import Self

class ConsumerQuotaLimit(BaseModel):
    """
    Consumer quota settings for a quota limit.
    """ # noqa: E501
    allows_admin_overrides: Optional[StrictBool] = Field(default=None, description="Whether admin overrides are allowed on this limit", alias="allowsAdminOverrides")
    is_precise: Optional[StrictBool] = Field(default=None, description="Whether this limit is precise or imprecise.", alias="isPrecise")
    metric: Optional[StrictStr] = Field(default=None, description="The name of the parent metric of this limit. An example name would be: `compute.googleapis.com/cpus`")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the quota limit. An example name would be: `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion` The resource name is intended to be opaque and should not be parsed for its component strings, since its representation could change in the future.")
    quota_buckets: Optional[List[QuotaBucket]] = Field(default=None, description="Summary of the enforced quota buckets, organized by quota dimension, ordered from least specific to most specific (for example, the global default bucket, with no quota dimensions, will always appear first).", alias="quotaBuckets")
    supported_locations: Optional[List[StrictStr]] = Field(default=None, description="List of all supported locations. This field is present only if the limit has a {region} or {zone} dimension.", alias="supportedLocations")
    unit: Optional[StrictStr] = Field(default=None, description="The limit unit. An example unit would be `1/{project}/{region}` Note that `{project}` and `{region}` are not placeholders in this example; the literal characters `{` and `}` occur in the string.")
    __properties: ClassVar[List[str]] = ["allowsAdminOverrides", "isPrecise", "metric", "name", "quotaBuckets", "supportedLocations", "unit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsumerQuotaLimit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in quota_buckets (list)
        _items = []
        if self.quota_buckets:
            for _item_quota_buckets in self.quota_buckets:
                if _item_quota_buckets:
                    _items.append(_item_quota_buckets.to_dict())
            _dict['quotaBuckets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsumerQuotaLimit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowsAdminOverrides": obj.get("allowsAdminOverrides"),
            "isPrecise": obj.get("isPrecise"),
            "metric": obj.get("metric"),
            "name": obj.get("name"),
            "quotaBuckets": [QuotaBucket.from_dict(_item) for _item in obj["quotaBuckets"]] if obj.get("quotaBuckets") is not None else None,
            "supportedLocations": obj.get("supportedLocations"),
            "unit": obj.get("unit")
        })
        return _obj



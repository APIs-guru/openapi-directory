# coding: utf-8

"""
    Service Usage API

    Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class LongRunning(BaseModel):
    """
    Describes settings to use when generating API methods that use the long-running operation pattern. All default values below are from those used in the client library generators (e.g. [Java](https://github.com/googleapis/gapic-generator-java/blob/04c2faa191a9b5a10b92392fe8482279c4404803/src/main/java/com/google/api/generator/gapic/composer/common/RetrySettingsComposer.java)).
    """ # noqa: E501
    initial_poll_delay: Optional[StrictStr] = Field(default=None, description="Initial delay after which the first poll request will be made. Default value: 5 seconds.", alias="initialPollDelay")
    max_poll_delay: Optional[StrictStr] = Field(default=None, description="Maximum time between two subsequent poll requests. Default value: 45 seconds.", alias="maxPollDelay")
    poll_delay_multiplier: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Multiplier to gradually increase delay between subsequent polls until it reaches max_poll_delay. Default value: 1.5.", alias="pollDelayMultiplier")
    total_poll_timeout: Optional[StrictStr] = Field(default=None, description="Total polling timeout. Default value: 5 minutes.", alias="totalPollTimeout")
    __properties: ClassVar[List[str]] = ["initialPollDelay", "maxPollDelay", "pollDelayMultiplier", "totalPollTimeout"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LongRunning from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LongRunning from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "initialPollDelay": obj.get("initialPollDelay"),
            "maxPollDelay": obj.get("maxPollDelay"),
            "pollDelayMultiplier": obj.get("pollDelayMultiplier"),
            "totalPollTimeout": obj.get("totalPollTimeout")
        })
        return _obj



# coding: utf-8

"""
    Service Usage API

    Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.common_language_settings import CommonLanguageSettings
from typing import Optional, Set
from typing_extensions import Self

class DotnetSettings(BaseModel):
    """
    Settings for Dotnet client libraries.
    """ # noqa: E501
    common: Optional[CommonLanguageSettings] = None
    forced_namespace_aliases: Optional[List[StrictStr]] = Field(default=None, description="Namespaces which must be aliased in snippets due to a known (but non-generator-predictable) naming collision", alias="forcedNamespaceAliases")
    handwritten_signatures: Optional[List[StrictStr]] = Field(default=None, description="Method signatures (in the form \"service.method(signature)\") which are provided separately, so shouldn't be generated. Snippets *calling* these methods are still generated, however.", alias="handwrittenSignatures")
    ignored_resources: Optional[List[StrictStr]] = Field(default=None, description="List of full resource types to ignore during generation. This is typically used for API-specific Location resources, which should be handled by the generator as if they were actually the common Location resources. Example entry: \"documentai.googleapis.com/Location\"", alias="ignoredResources")
    renamed_resources: Optional[Dict[str, StrictStr]] = Field(default=None, description="Map from full resource types to the effective short name for the resource. This is used when otherwise resource named from different services would cause naming collisions. Example entry: \"datalabeling.googleapis.com/Dataset\": \"DataLabelingDataset\"", alias="renamedResources")
    renamed_services: Optional[Dict[str, StrictStr]] = Field(default=None, description="Map from original service names to renamed versions. This is used when the default generated types would cause a naming conflict. (Neither name is fully-qualified.) Example: Subscriber to SubscriberServiceApi.", alias="renamedServices")
    __properties: ClassVar[List[str]] = ["common", "forcedNamespaceAliases", "handwrittenSignatures", "ignoredResources", "renamedResources", "renamedServices"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DotnetSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of common
        if self.common:
            _dict['common'] = self.common.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DotnetSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "common": CommonLanguageSettings.from_dict(obj["common"]) if obj.get("common") is not None else None,
            "forcedNamespaceAliases": obj.get("forcedNamespaceAliases"),
            "handwrittenSignatures": obj.get("handwrittenSignatures"),
            "ignoredResources": obj.get("ignoredResources"),
            "renamedResources": obj.get("renamedResources"),
            "renamedServices": obj.get("renamedServices")
        })
        return _obj



# coding: utf-8

"""
    Service Usage API

    Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api import Api
from openapi_client.models.authentication import Authentication
from openapi_client.models.backend import Backend
from openapi_client.models.billing import Billing
from openapi_client.models.context import Context
from openapi_client.models.control import Control
from openapi_client.models.custom_error import CustomError
from openapi_client.models.documentation import Documentation
from openapi_client.models.endpoint import Endpoint
from openapi_client.models.enum import Enum
from openapi_client.models.http import Http
from openapi_client.models.log_descriptor import LogDescriptor
from openapi_client.models.logging import Logging
from openapi_client.models.metric_descriptor import MetricDescriptor
from openapi_client.models.monitored_resource_descriptor import MonitoredResourceDescriptor
from openapi_client.models.monitoring import Monitoring
from openapi_client.models.publishing import Publishing
from openapi_client.models.quota import Quota
from openapi_client.models.source_info import SourceInfo
from openapi_client.models.system_parameters import SystemParameters
from openapi_client.models.type import Type
from openapi_client.models.usage import Usage
from typing import Optional, Set
from typing_extensions import Self

class GoogleApiService(BaseModel):
    """
    `Service` is the root object of Google API service configuration (service config). It describes the basic information about a logical service, such as the service name and the user-facing title, and delegates other aspects to sub-sections. Each sub-section is either a proto message or a repeated proto message that configures a specific aspect, such as auth. For more information, see each proto message definition. Example: type: google.api.Service name: calendar.googleapis.com title: Google Calendar API apis: - name: google.calendar.v3.Calendar visibility: rules: - selector: \"google.calendar.v3.*\" restriction: PREVIEW backend: rules: - selector: \"google.calendar.v3.*\" address: calendar.example.com authentication: providers: - id: google_calendar_auth jwks_uri: https://www.googleapis.com/oauth2/v1/certs issuer: https://securetoken.google.com rules: - selector: \"*\" requirements: provider_id: google_calendar_auth
    """ # noqa: E501
    apis: Optional[List[Api]] = Field(default=None, description="A list of API interfaces exported by this service. Only the `name` field of the google.protobuf.Api needs to be provided by the configuration author, as the remaining fields will be derived from the IDL during the normalization process. It is an error to specify an API interface here which cannot be resolved against the associated IDL files.")
    authentication: Optional[Authentication] = None
    backend: Optional[Backend] = None
    billing: Optional[Billing] = None
    config_version: Optional[StrictInt] = Field(default=None, description="Obsolete. Do not use. This field has no semantic meaning. The service config compiler always sets this field to `3`.", alias="configVersion")
    context: Optional[Context] = None
    control: Optional[Control] = None
    custom_error: Optional[CustomError] = Field(default=None, alias="customError")
    documentation: Optional[Documentation] = None
    endpoints: Optional[List[Endpoint]] = Field(default=None, description="Configuration for network endpoints. If this is empty, then an endpoint with the same name as the service is automatically generated to service all defined APIs.")
    enums: Optional[List[Enum]] = Field(default=None, description="A list of all enum types included in this API service. Enums referenced directly or indirectly by the `apis` are automatically included. Enums which are not referenced but shall be included should be listed here by name by the configuration author. Example: enums: - name: google.someapi.v1.SomeEnum")
    http: Optional[Http] = None
    id: Optional[StrictStr] = Field(default=None, description="A unique ID for a specific instance of this message, typically assigned by the client for tracking purpose. Must be no longer than 63 characters and only lower case letters, digits, '.', '_' and '-' are allowed. If empty, the server may choose to generate one instead.")
    logging: Optional[Logging] = None
    logs: Optional[List[LogDescriptor]] = Field(default=None, description="Defines the logs used by this service.")
    metrics: Optional[List[MetricDescriptor]] = Field(default=None, description="Defines the metrics used by this service.")
    monitored_resources: Optional[List[MonitoredResourceDescriptor]] = Field(default=None, description="Defines the monitored resources used by this service. This is required by the Service.monitoring and Service.logging configurations.", alias="monitoredResources")
    monitoring: Optional[Monitoring] = None
    name: Optional[StrictStr] = Field(default=None, description="The service name, which is a DNS-like logical identifier for the service, such as `calendar.googleapis.com`. The service name typically goes through DNS verification to make sure the owner of the service also owns the DNS name.")
    producer_project_id: Optional[StrictStr] = Field(default=None, description="The Google project that owns this service.", alias="producerProjectId")
    publishing: Optional[Publishing] = None
    quota: Optional[Quota] = None
    source_info: Optional[SourceInfo] = Field(default=None, alias="sourceInfo")
    system_parameters: Optional[SystemParameters] = Field(default=None, alias="systemParameters")
    system_types: Optional[List[Type]] = Field(default=None, description="A list of all proto message types included in this API service. It serves similar purpose as [google.api.Service.types], except that these types are not needed by user-defined APIs. Therefore, they will not show up in the generated discovery doc. This field should only be used to define system APIs in ESF.", alias="systemTypes")
    title: Optional[StrictStr] = Field(default=None, description="The product title for this service, it is the name displayed in Google Cloud Console.")
    types: Optional[List[Type]] = Field(default=None, description="A list of all proto message types included in this API service. Types referenced directly or indirectly by the `apis` are automatically included. Messages which are not referenced but shall be included, such as types used by the `google.protobuf.Any` type, should be listed here by name by the configuration author. Example: types: - name: google.protobuf.Int32")
    usage: Optional[Usage] = None
    __properties: ClassVar[List[str]] = ["apis", "authentication", "backend", "billing", "configVersion", "context", "control", "customError", "documentation", "endpoints", "enums", "http", "id", "logging", "logs", "metrics", "monitoredResources", "monitoring", "name", "producerProjectId", "publishing", "quota", "sourceInfo", "systemParameters", "systemTypes", "title", "types", "usage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleApiService from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in apis (list)
        _items = []
        if self.apis:
            for _item_apis in self.apis:
                if _item_apis:
                    _items.append(_item_apis.to_dict())
            _dict['apis'] = _items
        # override the default output from pydantic by calling `to_dict()` of authentication
        if self.authentication:
            _dict['authentication'] = self.authentication.to_dict()
        # override the default output from pydantic by calling `to_dict()` of backend
        if self.backend:
            _dict['backend'] = self.backend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing
        if self.billing:
            _dict['billing'] = self.billing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of control
        if self.control:
            _dict['control'] = self.control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_error
        if self.custom_error:
            _dict['customError'] = self.custom_error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of documentation
        if self.documentation:
            _dict['documentation'] = self.documentation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in endpoints (list)
        _items = []
        if self.endpoints:
            for _item_endpoints in self.endpoints:
                if _item_endpoints:
                    _items.append(_item_endpoints.to_dict())
            _dict['endpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in enums (list)
        _items = []
        if self.enums:
            for _item_enums in self.enums:
                if _item_enums:
                    _items.append(_item_enums.to_dict())
            _dict['enums'] = _items
        # override the default output from pydantic by calling `to_dict()` of http
        if self.http:
            _dict['http'] = self.http.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logging
        if self.logging:
            _dict['logging'] = self.logging.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in logs (list)
        _items = []
        if self.logs:
            for _item_logs in self.logs:
                if _item_logs:
                    _items.append(_item_logs.to_dict())
            _dict['logs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['metrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in monitored_resources (list)
        _items = []
        if self.monitored_resources:
            for _item_monitored_resources in self.monitored_resources:
                if _item_monitored_resources:
                    _items.append(_item_monitored_resources.to_dict())
            _dict['monitoredResources'] = _items
        # override the default output from pydantic by calling `to_dict()` of monitoring
        if self.monitoring:
            _dict['monitoring'] = self.monitoring.to_dict()
        # override the default output from pydantic by calling `to_dict()` of publishing
        if self.publishing:
            _dict['publishing'] = self.publishing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quota
        if self.quota:
            _dict['quota'] = self.quota.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_info
        if self.source_info:
            _dict['sourceInfo'] = self.source_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of system_parameters
        if self.system_parameters:
            _dict['systemParameters'] = self.system_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in system_types (list)
        _items = []
        if self.system_types:
            for _item_system_types in self.system_types:
                if _item_system_types:
                    _items.append(_item_system_types.to_dict())
            _dict['systemTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in types (list)
        _items = []
        if self.types:
            for _item_types in self.types:
                if _item_types:
                    _items.append(_item_types.to_dict())
            _dict['types'] = _items
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleApiService from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apis": [Api.from_dict(_item) for _item in obj["apis"]] if obj.get("apis") is not None else None,
            "authentication": Authentication.from_dict(obj["authentication"]) if obj.get("authentication") is not None else None,
            "backend": Backend.from_dict(obj["backend"]) if obj.get("backend") is not None else None,
            "billing": Billing.from_dict(obj["billing"]) if obj.get("billing") is not None else None,
            "configVersion": obj.get("configVersion"),
            "context": Context.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "control": Control.from_dict(obj["control"]) if obj.get("control") is not None else None,
            "customError": CustomError.from_dict(obj["customError"]) if obj.get("customError") is not None else None,
            "documentation": Documentation.from_dict(obj["documentation"]) if obj.get("documentation") is not None else None,
            "endpoints": [Endpoint.from_dict(_item) for _item in obj["endpoints"]] if obj.get("endpoints") is not None else None,
            "enums": [Enum.from_dict(_item) for _item in obj["enums"]] if obj.get("enums") is not None else None,
            "http": Http.from_dict(obj["http"]) if obj.get("http") is not None else None,
            "id": obj.get("id"),
            "logging": Logging.from_dict(obj["logging"]) if obj.get("logging") is not None else None,
            "logs": [LogDescriptor.from_dict(_item) for _item in obj["logs"]] if obj.get("logs") is not None else None,
            "metrics": [MetricDescriptor.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None,
            "monitoredResources": [MonitoredResourceDescriptor.from_dict(_item) for _item in obj["monitoredResources"]] if obj.get("monitoredResources") is not None else None,
            "monitoring": Monitoring.from_dict(obj["monitoring"]) if obj.get("monitoring") is not None else None,
            "name": obj.get("name"),
            "producerProjectId": obj.get("producerProjectId"),
            "publishing": Publishing.from_dict(obj["publishing"]) if obj.get("publishing") is not None else None,
            "quota": Quota.from_dict(obj["quota"]) if obj.get("quota") is not None else None,
            "sourceInfo": SourceInfo.from_dict(obj["sourceInfo"]) if obj.get("sourceInfo") is not None else None,
            "systemParameters": SystemParameters.from_dict(obj["systemParameters"]) if obj.get("systemParameters") is not None else None,
            "systemTypes": [Type.from_dict(_item) for _item in obj["systemTypes"]] if obj.get("systemTypes") is not None else None,
            "title": obj.get("title"),
            "types": [Type.from_dict(_item) for _item in obj["types"]] if obj.get("types") is not None else None,
            "usage": Usage.from_dict(obj["usage"]) if obj.get("usage") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Service Usage API

    Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enable_rule import EnableRule
from typing import Optional, Set
from typing_extensions import Self

class ConsumerPolicy(BaseModel):
    """
    Consumer Policy is a set of rules that define what services or service groups can be used for a cloud resource hierarchy.
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Annotations is an unstructured key-value map stored with a policy that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. [AIP-128](https://google.aip.dev/128#annotations)")
    enable_rules: Optional[List[EnableRule]] = Field(default=None, description="Enable rules define usable services and service groups.", alias="enableRules")
    etag: Optional[StrictStr] = Field(default=None, description="An opaque tag indicating the current version of the policy, used for concurrency control.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the policy. We only allow consumer policy name as `default` for now: `projects/12345/consumerPolicies/default`, `folders/12345/consumerPolicies/default`, `organizations/12345/consumerPolicies/default`.")
    update_time: Optional[StrictStr] = Field(default=None, description="The last-modified time.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["annotations", "enableRules", "etag", "name", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsumerPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in enable_rules (list)
        _items = []
        if self.enable_rules:
            for _item_enable_rules in self.enable_rules:
                if _item_enable_rules:
                    _items.append(_item_enable_rules.to_dict())
            _dict['enableRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsumerPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "enableRules": [EnableRule.from_dict(_item) for _item in obj["enableRules"]] if obj.get("enableRules") is not None else None,
            "etag": obj.get("etag"),
            "name": obj.get("name"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



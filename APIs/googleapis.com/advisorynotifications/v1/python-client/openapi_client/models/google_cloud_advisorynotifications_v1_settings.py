# coding: utf-8

"""
    Advisory Notifications API

    An API for accessing Advisory Notifications in Google Cloud

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_advisorynotifications_v1_notification_settings import GoogleCloudAdvisorynotificationsV1NotificationSettings
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAdvisorynotificationsV1Settings(BaseModel):
    """
    Settings for Advisory Notifications.
    """ # noqa: E501
    etag: Optional[StrictStr] = Field(default=None, description="Required. Fingerprint for optimistic concurrency returned in Get requests. Must be provided for Update requests. If the value provided does not match the value known to the server, ABORTED will be thrown, and the client should retry the read-modify-write cycle.")
    name: Optional[StrictStr] = Field(default=None, description="Identifier. The resource name of the settings to retrieve. Format: organizations/{organization}/locations/{location}/settings.")
    notification_settings: Optional[Dict[str, GoogleCloudAdvisorynotificationsV1NotificationSettings]] = Field(default=None, description="Required. Map of each notification type and its settings to get/set all settings at once. The server will validate the value for each notification type.", alias="notificationSettings")
    __properties: ClassVar[List[str]] = ["etag", "name", "notificationSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAdvisorynotificationsV1Settings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in notification_settings (dict)
        _field_dict = {}
        if self.notification_settings:
            for _key_notification_settings in self.notification_settings:
                if self.notification_settings[_key_notification_settings]:
                    _field_dict[_key_notification_settings] = self.notification_settings[_key_notification_settings].to_dict()
            _dict['notificationSettings'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAdvisorynotificationsV1Settings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "etag": obj.get("etag"),
            "name": obj.get("name"),
            "notificationSettings": dict(
                (_k, GoogleCloudAdvisorynotificationsV1NotificationSettings.from_dict(_v))
                for _k, _v in obj["notificationSettings"].items()
            )
            if obj.get("notificationSettings") is not None
            else None
        })
        return _obj



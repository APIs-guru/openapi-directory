# coding: utf-8

"""
    Advisory Notifications API

    An API for accessing Advisory Notifications in Google Cloud

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_advisorynotifications_v1_message import GoogleCloudAdvisorynotificationsV1Message
from openapi_client.models.google_cloud_advisorynotifications_v1_subject import GoogleCloudAdvisorynotificationsV1Subject
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAdvisorynotificationsV1Notification(BaseModel):
    """
    A notification object for notifying customers about security and privacy issues.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time the notification was created.", alias="createTime")
    messages: Optional[List[GoogleCloudAdvisorynotificationsV1Message]] = Field(default=None, description="A list of messages in the notification.")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the notification. Format: organizations/{organization}/locations/{location}/notifications/{notification} or projects/{project}/locations/{location}/notifications/{notification}.")
    notification_type: Optional[StrictStr] = Field(default=None, description="Type of notification", alias="notificationType")
    subject: Optional[GoogleCloudAdvisorynotificationsV1Subject] = None
    __properties: ClassVar[List[str]] = ["createTime", "messages", "name", "notificationType", "subject"]

    @field_validator('notification_type')
    def notification_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NOTIFICATION_TYPE_UNSPECIFIED', 'NOTIFICATION_TYPE_SECURITY_PRIVACY_ADVISORY', 'NOTIFICATION_TYPE_SENSITIVE_ACTIONS', 'NOTIFICATION_TYPE_SECURITY_MSA', 'NOTIFICATION_TYPE_THREAT_HORIZONS']):
            raise ValueError("must be one of enum values ('NOTIFICATION_TYPE_UNSPECIFIED', 'NOTIFICATION_TYPE_SECURITY_PRIVACY_ADVISORY', 'NOTIFICATION_TYPE_SENSITIVE_ACTIONS', 'NOTIFICATION_TYPE_SECURITY_MSA', 'NOTIFICATION_TYPE_THREAT_HORIZONS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAdvisorynotificationsV1Notification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of subject
        if self.subject:
            _dict['subject'] = self.subject.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAdvisorynotificationsV1Notification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "messages": [GoogleCloudAdvisorynotificationsV1Message.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "name": obj.get("name"),
            "notificationType": obj.get("notificationType"),
            "subject": GoogleCloudAdvisorynotificationsV1Subject.from_dict(obj["subject"]) if obj.get("subject") is not None else None
        })
        return _obj



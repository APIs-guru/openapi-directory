# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.schema_config import SchemaConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudHealthcareV1beta1FhirBigQueryDestination(BaseModel):
    """
    The configuration for exporting to BigQuery.
    """ # noqa: E501
    dataset_uri: Optional[StrictStr] = Field(default=None, description="BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq://projectId.bqDatasetId`.", alias="datasetUri")
    force: Optional[StrictBool] = Field(default=None, description="Use `write_disposition` instead. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.")
    schema_config: Optional[SchemaConfig] = Field(default=None, alias="schemaConfig")
    write_disposition: Optional[StrictStr] = Field(default=None, description="Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.", alias="writeDisposition")
    __properties: ClassVar[List[str]] = ["datasetUri", "force", "schemaConfig", "writeDisposition"]

    @field_validator('write_disposition')
    def write_disposition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WRITE_DISPOSITION_UNSPECIFIED', 'WRITE_EMPTY', 'WRITE_TRUNCATE', 'WRITE_APPEND']):
            raise ValueError("must be one of enum values ('WRITE_DISPOSITION_UNSPECIFIED', 'WRITE_EMPTY', 'WRITE_TRUNCATE', 'WRITE_APPEND')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudHealthcareV1beta1FhirBigQueryDestination from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of schema_config
        if self.schema_config:
            _dict['schemaConfig'] = self.schema_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudHealthcareV1beta1FhirBigQueryDestination from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datasetUri": obj.get("datasetUri"),
            "force": obj.get("force"),
            "schemaConfig": SchemaConfig.from_dict(obj["schemaConfig"]) if obj.get("schemaConfig") is not None else None,
            "writeDisposition": obj.get("writeDisposition")
        })
        return _obj



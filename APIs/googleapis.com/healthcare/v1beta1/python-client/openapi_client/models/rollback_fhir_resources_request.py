# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.rollback_fhir_resource_filtering_fields import RollbackFhirResourceFilteringFields
from typing import Optional, Set
from typing_extensions import Self

class RollbackFhirResourcesRequest(BaseModel):
    """
    Request to roll back resources.
    """ # noqa: E501
    change_type: Optional[StrictStr] = Field(default=None, description="Optional. CREATE/UPDATE/DELETE/ALL for reverting all txns of a certain type.", alias="changeType")
    exclude_rollbacks: Optional[StrictBool] = Field(default=None, description="Optional. Specifies whether to exclude earlier rollbacks.", alias="excludeRollbacks")
    filtering_fields: Optional[RollbackFhirResourceFilteringFields] = Field(default=None, alias="filteringFields")
    force: Optional[StrictBool] = Field(default=None, description="Optional. When enabled, changes will be reverted without explicit confirmation")
    input_gcs_object: Optional[StrictStr] = Field(default=None, description="Optional. Cloud Storage object containing list of {resourceType}/{resourceId} lines, identifying resources to be reverted", alias="inputGcsObject")
    result_gcs_bucket: Optional[StrictStr] = Field(default=None, description="Required. Bucket to deposit result", alias="resultGcsBucket")
    rollback_time: Optional[StrictStr] = Field(default=None, description="Required. Time point to rollback to.", alias="rollbackTime")
    type: Optional[List[StrictStr]] = Field(default=None, description="Optional. If specified, revert only resources of these types")
    __properties: ClassVar[List[str]] = ["changeType", "excludeRollbacks", "filteringFields", "force", "inputGcsObject", "resultGcsBucket", "rollbackTime", "type"]

    @field_validator('change_type')
    def change_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHANGE_TYPE_UNSPECIFIED', 'ALL', 'CREATE', 'UPDATE', 'DELETE']):
            raise ValueError("must be one of enum values ('CHANGE_TYPE_UNSPECIFIED', 'ALL', 'CREATE', 'UPDATE', 'DELETE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RollbackFhirResourcesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filtering_fields
        if self.filtering_fields:
            _dict['filteringFields'] = self.filtering_fields.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RollbackFhirResourcesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "changeType": obj.get("changeType"),
            "excludeRollbacks": obj.get("excludeRollbacks"),
            "filteringFields": RollbackFhirResourceFilteringFields.from_dict(obj["filteringFields"]) if obj.get("filteringFields") is not None else None,
            "force": obj.get("force"),
            "inputGcsObject": obj.get("inputGcsObject"),
            "resultGcsBucket": obj.get("resultGcsBucket"),
            "rollbackTime": obj.get("rollbackTime"),
            "type": obj.get("type")
        })
        return _obj



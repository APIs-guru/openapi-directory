# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.hl7_schema_config import Hl7SchemaConfig
from openapi_client.models.hl7_types_config import Hl7TypesConfig
from typing import Optional, Set
from typing_extensions import Self

class SchemaPackage(BaseModel):
    """
    A schema package contains a set of schemas and type definitions.
    """ # noqa: E501
    ignore_min_occurs: Optional[StrictBool] = Field(default=None, description="Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.", alias="ignoreMinOccurs")
    schemas: Optional[List[Hl7SchemaConfig]] = Field(default=None, description="Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.")
    schematized_parsing_type: Optional[StrictStr] = Field(default=None, description="Determines how messages that fail to parse are handled.", alias="schematizedParsingType")
    types: Optional[List[Hl7TypesConfig]] = Field(default=None, description="Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.")
    unexpected_segment_handling: Optional[StrictStr] = Field(default=None, description="Determines how unexpected segments (segments not matched to the schema) are handled.", alias="unexpectedSegmentHandling")
    __properties: ClassVar[List[str]] = ["ignoreMinOccurs", "schemas", "schematizedParsingType", "types", "unexpectedSegmentHandling"]

    @field_validator('schematized_parsing_type')
    def schematized_parsing_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SCHEMATIZED_PARSING_TYPE_UNSPECIFIED', 'SOFT_FAIL', 'HARD_FAIL']):
            raise ValueError("must be one of enum values ('SCHEMATIZED_PARSING_TYPE_UNSPECIFIED', 'SOFT_FAIL', 'HARD_FAIL')")
        return value

    @field_validator('unexpected_segment_handling')
    def unexpected_segment_handling_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNEXPECTED_SEGMENT_HANDLING_MODE_UNSPECIFIED', 'FAIL', 'SKIP', 'PARSE']):
            raise ValueError("must be one of enum values ('UNEXPECTED_SEGMENT_HANDLING_MODE_UNSPECIFIED', 'FAIL', 'SKIP', 'PARSE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SchemaPackage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in schemas (list)
        _items = []
        if self.schemas:
            for _item_schemas in self.schemas:
                if _item_schemas:
                    _items.append(_item_schemas.to_dict())
            _dict['schemas'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in types (list)
        _items = []
        if self.types:
            for _item_types in self.types:
                if _item_types:
                    _items.append(_item_types.to_dict())
            _dict['types'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SchemaPackage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ignoreMinOccurs": obj.get("ignoreMinOccurs"),
            "schemas": [Hl7SchemaConfig.from_dict(_item) for _item in obj["schemas"]] if obj.get("schemas") is not None else None,
            "schematizedParsingType": obj.get("schematizedParsingType"),
            "types": [Hl7TypesConfig.from_dict(_item) for _item in obj["types"]] if obj.get("types") is not None else None,
            "unexpectedSegmentHandling": obj.get("unexpectedSegmentHandling")
        })
        return _obj



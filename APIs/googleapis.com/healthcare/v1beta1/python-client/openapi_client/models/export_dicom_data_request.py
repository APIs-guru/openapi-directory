# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dicom_filter_config import DicomFilterConfig
from openapi_client.models.google_cloud_healthcare_v1beta1_dicom_big_query_destination import GoogleCloudHealthcareV1beta1DicomBigQueryDestination
from openapi_client.models.google_cloud_healthcare_v1beta1_dicom_gcs_destination import GoogleCloudHealthcareV1beta1DicomGcsDestination
from typing import Optional, Set
from typing_extensions import Self

class ExportDicomDataRequest(BaseModel):
    """
    Exports data from the specified DICOM store. If a given resource, such as a DICOM object with the same SOPInstance UID, already exists in the output, it is overwritten with the version in the source dataset. Exported DICOM data persists when the DICOM store from which it was exported is deleted.
    """ # noqa: E501
    bigquery_destination: Optional[GoogleCloudHealthcareV1beta1DicomBigQueryDestination] = Field(default=None, alias="bigqueryDestination")
    filter_config: Optional[DicomFilterConfig] = Field(default=None, alias="filterConfig")
    gcs_destination: Optional[GoogleCloudHealthcareV1beta1DicomGcsDestination] = Field(default=None, alias="gcsDestination")
    __properties: ClassVar[List[str]] = ["bigqueryDestination", "filterConfig", "gcsDestination"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportDicomDataRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bigquery_destination
        if self.bigquery_destination:
            _dict['bigqueryDestination'] = self.bigquery_destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filter_config
        if self.filter_config:
            _dict['filterConfig'] = self.filter_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcs_destination
        if self.gcs_destination:
            _dict['gcsDestination'] = self.gcs_destination.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportDicomDataRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bigqueryDestination": GoogleCloudHealthcareV1beta1DicomBigQueryDestination.from_dict(obj["bigqueryDestination"]) if obj.get("bigqueryDestination") is not None else None,
            "filterConfig": DicomFilterConfig.from_dict(obj["filterConfig"]) if obj.get("filterConfig") is not None else None,
            "gcsDestination": GoogleCloudHealthcareV1beta1DicomGcsDestination.from_dict(obj["gcsDestination"]) if obj.get("gcsDestination") is not None else None
        })
        return _obj



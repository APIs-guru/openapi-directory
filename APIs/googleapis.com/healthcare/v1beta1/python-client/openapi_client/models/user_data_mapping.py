# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attribute import Attribute
from typing import Optional, Set
from typing_extensions import Self

class UserDataMapping(BaseModel):
    """
    Maps a resource to the associated user and Attributes.
    """ # noqa: E501
    archive_time: Optional[StrictStr] = Field(default=None, description="Output only. Indicates the time when this mapping was archived.", alias="archiveTime")
    archived: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether this mapping is archived.")
    data_id: Optional[StrictStr] = Field(default=None, description="Required. A unique identifier for the mapped resource.", alias="dataId")
    name: Optional[StrictStr] = Field(default=None, description="Resource name of the User data mapping, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/userDataMappings/{user_data_mapping_id}`.")
    resource_attributes: Optional[List[Attribute]] = Field(default=None, description="Attributes of the resource. Only explicitly set attributes are displayed here. Attribute definitions with defaults set implicitly apply to these User data mappings. Attributes listed here must be single valued, that is, exactly one value is specified for the field \"values\" in each Attribute.", alias="resourceAttributes")
    user_id: Optional[StrictStr] = Field(default=None, description="Required. User's UUID provided by the client.", alias="userId")
    __properties: ClassVar[List[str]] = ["archiveTime", "archived", "dataId", "name", "resourceAttributes", "userId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserDataMapping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "archive_time",
            "archived",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in resource_attributes (list)
        _items = []
        if self.resource_attributes:
            for _item_resource_attributes in self.resource_attributes:
                if _item_resource_attributes:
                    _items.append(_item_resource_attributes.to_dict())
            _dict['resourceAttributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserDataMapping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archiveTime": obj.get("archiveTime"),
            "archived": obj.get("archived"),
            "dataId": obj.get("dataId"),
            "name": obj.get("name"),
            "resourceAttributes": [Attribute.from_dict(_item) for _item in obj["resourceAttributes"]] if obj.get("resourceAttributes") is not None else None,
            "userId": obj.get("userId")
        })
        return _obj



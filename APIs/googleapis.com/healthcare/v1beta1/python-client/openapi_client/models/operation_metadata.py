# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.progress_counter import ProgressCounter
from typing import Optional, Set
from typing_extensions import Self

class OperationMetadata(BaseModel):
    """
    OperationMetadata provides information about the operation execution. Returned in the long-running operation's metadata field.
    """ # noqa: E501
    api_method_name: Optional[StrictStr] = Field(default=None, description="The name of the API method that initiated the operation.", alias="apiMethodName")
    cancel_requested: Optional[StrictBool] = Field(default=None, description="Specifies if cancellation was requested for the operation.", alias="cancelRequested")
    counter: Optional[ProgressCounter] = None
    create_time: Optional[StrictStr] = Field(default=None, description="The time at which the operation was created by the API.", alias="createTime")
    end_time: Optional[StrictStr] = Field(default=None, description="The time at which execution workloads were completed. Some tasks will complete after this time such as logging audit logs.", alias="endTime")
    logs_url: Optional[StrictStr] = Field(default=None, description="A link to audit and error logs in the log viewer. Error logs are generated only by some operations, listed at [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging). The `end_time` specified in this URL may not match the end time on the metadata because logs are written asynchronously from execution.", alias="logsUrl")
    __properties: ClassVar[List[str]] = ["apiMethodName", "cancelRequested", "counter", "createTime", "endTime", "logsUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OperationMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of counter
        if self.counter:
            _dict['counter'] = self.counter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OperationMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiMethodName": obj.get("apiMethodName"),
            "cancelRequested": obj.get("cancelRequested"),
            "counter": ProgressCounter.from_dict(obj["counter"]) if obj.get("counter") is not None else None,
            "createTime": obj.get("createTime"),
            "endTime": obj.get("endTime"),
            "logsUrl": obj.get("logsUrl")
        })
        return _obj



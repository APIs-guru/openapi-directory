# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.access_determination_log_config import AccessDeterminationLogConfig
from openapi_client.models.consent_header_handling import ConsentHeaderHandling
from typing import Optional, Set
from typing_extensions import Self

class ConsentConfig(BaseModel):
    """
    Configures whether to enforce consent for the FHIR store and which consent enforcement version is being used.
    """ # noqa: E501
    access_determination_log_config: Optional[AccessDeterminationLogConfig] = Field(default=None, alias="accessDeterminationLogConfig")
    access_enforced: Optional[StrictBool] = Field(default=None, description="Optional. If set to true, when accessing FHIR resources, the consent headers will be verified against consents given by patients. See the ConsentEnforcementVersion for the supported consent headers.", alias="accessEnforced")
    consent_header_handling: Optional[ConsentHeaderHandling] = Field(default=None, alias="consentHeaderHandling")
    enforced_admin_consents: Optional[List[StrictStr]] = Field(default=None, description="The versioned names of the enforced admin Consent resource(s), in the format `projects/{project_id}/locations/{location}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Consent/{resource_id}/_history/{version_id}`. For FHIR stores with `disable_resource_versioning=true`, the format is `projects/{project_id}/locations/{location}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Consent/{resource_id}`. This field can only be updated using ApplyAdminConsents.", alias="enforcedAdminConsents")
    version: Optional[StrictStr] = Field(default=None, description="Required. Specifies which consent enforcement version is being used for this FHIR store. This field can only be set once by either CreateFhirStore or UpdateFhirStore. After that, you must call ApplyConsents to change the version.")
    __properties: ClassVar[List[str]] = ["accessDeterminationLogConfig", "accessEnforced", "consentHeaderHandling", "enforcedAdminConsents", "version"]

    @field_validator('version')
    def version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONSENT_ENFORCEMENT_VERSION_UNSPECIFIED', 'V1']):
            raise ValueError("must be one of enum values ('CONSENT_ENFORCEMENT_VERSION_UNSPECIFIED', 'V1')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsentConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_determination_log_config
        if self.access_determination_log_config:
            _dict['accessDeterminationLogConfig'] = self.access_determination_log_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of consent_header_handling
        if self.consent_header_handling:
            _dict['consentHeaderHandling'] = self.consent_header_handling.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsentConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessDeterminationLogConfig": AccessDeterminationLogConfig.from_dict(obj["accessDeterminationLogConfig"]) if obj.get("accessDeterminationLogConfig") is not None else None,
            "accessEnforced": obj.get("accessEnforced"),
            "consentHeaderHandling": ConsentHeaderHandling.from_dict(obj["consentHeaderHandling"]) if obj.get("consentHeaderHandling") is not None else None,
            "enforcedAdminConsents": obj.get("enforcedAdminConsents"),
            "version": obj.get("version")
        })
        return _obj



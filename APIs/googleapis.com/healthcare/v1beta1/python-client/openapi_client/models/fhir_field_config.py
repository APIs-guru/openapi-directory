# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_healthcare_v1beta1_deidentify_field_metadata import GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata
from openapi_client.models.google_cloud_healthcare_v1beta1_deidentify_options import GoogleCloudHealthcareV1beta1DeidentifyOptions
from typing import Optional, Set
from typing_extensions import Self

class FhirFieldConfig(BaseModel):
    """
    Specifies how to handle the de-identification of a FHIR store.
    """ # noqa: E501
    field_metadata_list: Optional[List[GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata]] = Field(default=None, description="Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata `action` is passed through to the output dataset unmodified. All extensions will be processed according to keep_extensions. If a field can be matched by more than one FieldMetadata `action`, the first `action` option is applied. Overrides options and the union field `profile` in FhirFieldConfig.", alias="fieldMetadataList")
    options: Optional[GoogleCloudHealthcareV1beta1DeidentifyOptions] = None
    profile_type: Optional[StrictStr] = Field(default=None, description="Base profile type for handling FHIR fields.", alias="profileType")
    __properties: ClassVar[List[str]] = ["fieldMetadataList", "options", "profileType"]

    @field_validator('profile_type')
    def profile_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROFILE_TYPE_UNSPECIFIED', 'KEEP_ALL', 'BASIC', 'CLEAN_ALL']):
            raise ValueError("must be one of enum values ('PROFILE_TYPE_UNSPECIFIED', 'KEEP_ALL', 'BASIC', 'CLEAN_ALL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FhirFieldConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in field_metadata_list (list)
        _items = []
        if self.field_metadata_list:
            for _item_field_metadata_list in self.field_metadata_list:
                if _item_field_metadata_list:
                    _items.append(_item_field_metadata_list.to_dict())
            _dict['fieldMetadataList'] = _items
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FhirFieldConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fieldMetadataList": [GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata.from_dict(_item) for _item in obj["fieldMetadataList"]] if obj.get("fieldMetadataList") is not None else None,
            "options": GoogleCloudHealthcareV1beta1DeidentifyOptions.from_dict(obj["options"]) if obj.get("options") is not None else None,
            "profileType": obj.get("profileType")
        })
        return _obj



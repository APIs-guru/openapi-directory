# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.feature import Feature
from openapi_client.models.linked_entity import LinkedEntity
from openapi_client.models.text_span import TextSpan
from typing import Optional, Set
from typing_extensions import Self

class EntityMention(BaseModel):
    """
    An entity mention in the document.
    """ # noqa: E501
    additional_info: Optional[List[Feature]] = Field(default=None, description="Additional information about the entity mention. For example, for an entity mention of type `DATE` this can be its more specific date types from the following list: `ADMISSION_DATE`, `CONSULTATION_DATE`, `DISCHARGE_DATE`, `SERVICE_DATE`, `VISIT_DATE`, `DIAGNOSIS_DATE`, `MED_STARTED_DATE`, `MED_ENDED_DATE`, `NOTE_DATE`, `PROCEDURE_DATE`, `RADIATION_STARTED_DATE`, `RADIATION_ENDED_DATE`, `STAGE_DATE`", alias="additionalInfo")
    certainty_assessment: Optional[Feature] = Field(default=None, alias="certaintyAssessment")
    confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The model's confidence in this entity mention annotation. A number between 0 and 1.")
    linked_entities: Optional[List[LinkedEntity]] = Field(default=None, description="linked_entities are candidate ontological concepts that this entity mention may refer to. They are sorted by decreasing confidence.", alias="linkedEntities")
    mention_id: Optional[StrictStr] = Field(default=None, description="mention_id uniquely identifies each entity mention in a single response.", alias="mentionId")
    subject: Optional[Feature] = None
    temporal_assessment: Optional[Feature] = Field(default=None, alias="temporalAssessment")
    text: Optional[TextSpan] = None
    type: Optional[StrictStr] = Field(default=None, description="The semantic type of the entity: UNKNOWN_ENTITY_TYPE, ALONE, ANATOMICAL_STRUCTURE, ASSISTED_LIVING, BF_RESULT, BM_RESULT, BM_UNIT, BM_VALUE, BODY_FUNCTION, BODY_MEASUREMENT, COMPLIANT, DOESNOT_FOLLOWUP, FAMILY, FOLLOWSUP, LABORATORY_DATA, LAB_RESULT, LAB_UNIT, LAB_VALUE, MEDICAL_DEVICE, MEDICINE, MED_DOSE, MED_DURATION, MED_FORM, MED_FREQUENCY, MED_ROUTE, MED_STATUS, MED_STRENGTH, MED_TOTALDOSE, MED_UNIT, NON_COMPLIANT, OTHER_LIVINGSTATUS, PROBLEM, PROCEDURE, PROCEDURE_RESULT, PROC_METHOD, REASON_FOR_NONCOMPLIANCE, SEVERITY, SUBSTANCE_ABUSE, UNCLEAR_FOLLOWUP.")
    __properties: ClassVar[List[str]] = ["additionalInfo", "certaintyAssessment", "confidence", "linkedEntities", "mentionId", "subject", "temporalAssessment", "text", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EntityMention from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_info (list)
        _items = []
        if self.additional_info:
            for _item_additional_info in self.additional_info:
                if _item_additional_info:
                    _items.append(_item_additional_info.to_dict())
            _dict['additionalInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of certainty_assessment
        if self.certainty_assessment:
            _dict['certaintyAssessment'] = self.certainty_assessment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in linked_entities (list)
        _items = []
        if self.linked_entities:
            for _item_linked_entities in self.linked_entities:
                if _item_linked_entities:
                    _items.append(_item_linked_entities.to_dict())
            _dict['linkedEntities'] = _items
        # override the default output from pydantic by calling `to_dict()` of subject
        if self.subject:
            _dict['subject'] = self.subject.to_dict()
        # override the default output from pydantic by calling `to_dict()` of temporal_assessment
        if self.temporal_assessment:
            _dict['temporalAssessment'] = self.temporal_assessment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text
        if self.text:
            _dict['text'] = self.text.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EntityMention from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalInfo": [Feature.from_dict(_item) for _item in obj["additionalInfo"]] if obj.get("additionalInfo") is not None else None,
            "certaintyAssessment": Feature.from_dict(obj["certaintyAssessment"]) if obj.get("certaintyAssessment") is not None else None,
            "confidence": obj.get("confidence"),
            "linkedEntities": [LinkedEntity.from_dict(_item) for _item in obj["linkedEntities"]] if obj.get("linkedEntities") is not None else None,
            "mentionId": obj.get("mentionId"),
            "subject": Feature.from_dict(obj["subject"]) if obj.get("subject") is not None else None,
            "temporalAssessment": Feature.from_dict(obj["temporalAssessment"]) if obj.get("temporalAssessment") is not None else None,
            "text": TextSpan.from_dict(obj["text"]) if obj.get("text") is not None else None,
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.consent_accessor_scope import ConsentAccessorScope
from typing import Optional, Set
from typing_extensions import Self

class ExplainDataAccessConsentInfo(BaseModel):
    """
    The enforcing consent's metadata.
    """ # noqa: E501
    cascade_origins: Optional[List[StrictStr]] = Field(default=None, description="The compartment base resources that matched a cascading policy. Each resource has the following format: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/{resource_type}/{resource_id}`", alias="cascadeOrigins")
    consent_resource: Optional[StrictStr] = Field(default=None, description="The resource name of this consent resource. Format: `projects/{projectId}/datasets/{datasetId}/fhirStores/{fhirStoreId}/fhir/{resourceType}/{id}`.", alias="consentResource")
    enforcement_time: Optional[StrictStr] = Field(default=None, description="Last enforcement timestamp of this consent resource.", alias="enforcementTime")
    matching_accessor_scopes: Optional[List[ConsentAccessorScope]] = Field(default=None, description="A list of all the matching accessor scopes of this consent policy that enforced ExplainDataAccessConsentScope.accessor_scope.", alias="matchingAccessorScopes")
    patient_consent_owner: Optional[StrictStr] = Field(default=None, description="The patient owning the consent (only applicable for patient consents), in the format: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Patient/{patient_id}`", alias="patientConsentOwner")
    type: Optional[StrictStr] = Field(default=None, description="The policy type of consent resource (e.g. PATIENT, ADMIN).")
    variants: Optional[List[StrictStr]] = Field(default=None, description="The consent's variant combinations. A single consent may have multiple variants.")
    __properties: ClassVar[List[str]] = ["cascadeOrigins", "consentResource", "enforcementTime", "matchingAccessorScopes", "patientConsentOwner", "type", "variants"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONSENT_POLICY_TYPE_UNSPECIFIED', 'CONSENT_POLICY_TYPE_PATIENT', 'CONSENT_POLICY_TYPE_ADMIN']):
            raise ValueError("must be one of enum values ('CONSENT_POLICY_TYPE_UNSPECIFIED', 'CONSENT_POLICY_TYPE_PATIENT', 'CONSENT_POLICY_TYPE_ADMIN')")
        return value

    @field_validator('variants')
    def variants_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['VARIANT_UNSPECIFIED', 'VARIANT_STANDARD', 'VARIANT_CASCADE']):
                raise ValueError("each list item must be one of ('VARIANT_UNSPECIFIED', 'VARIANT_STANDARD', 'VARIANT_CASCADE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExplainDataAccessConsentInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in matching_accessor_scopes (list)
        _items = []
        if self.matching_accessor_scopes:
            for _item_matching_accessor_scopes in self.matching_accessor_scopes:
                if _item_matching_accessor_scopes:
                    _items.append(_item_matching_accessor_scopes.to_dict())
            _dict['matchingAccessorScopes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExplainDataAccessConsentInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cascadeOrigins": obj.get("cascadeOrigins"),
            "consentResource": obj.get("consentResource"),
            "enforcementTime": obj.get("enforcementTime"),
            "matchingAccessorScopes": [ConsentAccessorScope.from_dict(_item) for _item in obj["matchingAccessorScopes"]] if obj.get("matchingAccessorScopes") is not None else None,
            "patientConsentOwner": obj.get("patientConsentOwner"),
            "type": obj.get("type"),
            "variants": obj.get("variants")
        })
        return _obj



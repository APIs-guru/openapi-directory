# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_healthcare_v1beta1_annotation_big_query_destination import GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination
from openapi_client.models.info_type_config import InfoTypeConfig
from typing import Optional, Set
from typing_extensions import Self

class EvaluateAnnotationStoreRequest(BaseModel):
    """
    Request to evaluate an Annotation store against a ground truth [Annotation store].
    """ # noqa: E501
    bigquery_destination: Optional[GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination] = Field(default=None, alias="bigqueryDestination")
    eval_info_type_mapping: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. InfoType mapping for `eval_store`. Different resources can map to the same infoType. For example, `PERSON_NAME`, `PERSON`, `NAME`, and `HUMAN` are different. To map all of these into a single infoType (such as `PERSON_NAME`), specify the following mapping: ``` info_type_mapping[\"PERSON\"] = \"PERSON_NAME\" info_type_mapping[\"NAME\"] = \"PERSON_NAME\" info_type_mapping[\"HUMAN\"] = \"PERSON_NAME\" ``` Unmentioned infoTypes, such as `DATE`, are treated as identity mapping. For example: ``` info_type_mapping[\"DATE\"] = \"DATE\" ``` InfoTypes are case-insensitive.", alias="evalInfoTypeMapping")
    golden_info_type_mapping: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Similar to `eval_info_type_mapping`, infoType mapping for `golden_store`.", alias="goldenInfoTypeMapping")
    golden_store: Optional[StrictStr] = Field(default=None, description="Required. The Annotation store to use as ground truth, in the format of `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`.", alias="goldenStore")
    info_type_config: Optional[InfoTypeConfig] = Field(default=None, alias="infoTypeConfig")
    __properties: ClassVar[List[str]] = ["bigqueryDestination", "evalInfoTypeMapping", "goldenInfoTypeMapping", "goldenStore", "infoTypeConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EvaluateAnnotationStoreRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bigquery_destination
        if self.bigquery_destination:
            _dict['bigqueryDestination'] = self.bigquery_destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of info_type_config
        if self.info_type_config:
            _dict['infoTypeConfig'] = self.info_type_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EvaluateAnnotationStoreRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bigqueryDestination": GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.from_dict(obj["bigqueryDestination"]) if obj.get("bigqueryDestination") is not None else None,
            "evalInfoTypeMapping": obj.get("evalInfoTypeMapping"),
            "goldenInfoTypeMapping": obj.get("goldenInfoTypeMapping"),
            "goldenStore": obj.get("goldenStore"),
            "infoTypeConfig": InfoTypeConfig.from_dict(obj["infoTypeConfig"]) if obj.get("infoTypeConfig") is not None else None
        })
        return _obj



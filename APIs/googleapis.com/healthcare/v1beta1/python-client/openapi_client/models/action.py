# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image_config import ImageConfig
from typing import Optional, Set
from typing_extensions import Self

class Action(BaseModel):
    """
    Specifies a selection of tags and an `Action` to apply to each one.
    """ # noqa: E501
    clean_image_tag: Optional[ImageConfig] = Field(default=None, alias="cleanImageTag")
    clean_text_tag: Optional[Dict[str, Any]] = Field(default=None, description="Inspect text and transform sensitive text. Configurable using TextConfig. Supported [Value Representations] (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1): AE, LO, LT, PN, SH, ST, UC, UT, DA, DT, AS", alias="cleanTextTag")
    delete_tag: Optional[Dict[str, Any]] = Field(default=None, description="Delete tag.", alias="deleteTag")
    keep_tag: Optional[Dict[str, Any]] = Field(default=None, description="Keep tag unchanged.", alias="keepTag")
    queries: Optional[List[StrictStr]] = Field(default=None, description="Select all tags with the listed tag IDs, names, or Value Representations (VRs). Examples: ID: \"00100010\" Keyword: \"PatientName\" VR: \"PN\"")
    recurse_tag: Optional[Dict[str, Any]] = Field(default=None, description="Recursively apply DICOM de-id to tags nested in a sequence. Supported [Value Representation] (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1): SQ", alias="recurseTag")
    regen_uid_tag: Optional[Dict[str, Any]] = Field(default=None, description="Replace UID with a new generated UID. Supported [Value Representation] (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1): UI", alias="regenUidTag")
    remove_tag: Optional[Dict[str, Any]] = Field(default=None, description="Replace with empty tag.", alias="removeTag")
    reset_tag: Optional[Dict[str, Any]] = Field(default=None, description="Reset tag to a placeholder value.", alias="resetTag")
    __properties: ClassVar[List[str]] = ["cleanImageTag", "cleanTextTag", "deleteTag", "keepTag", "queries", "recurseTag", "regenUidTag", "removeTag", "resetTag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Action from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of clean_image_tag
        if self.clean_image_tag:
            _dict['cleanImageTag'] = self.clean_image_tag.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Action from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cleanImageTag": ImageConfig.from_dict(obj["cleanImageTag"]) if obj.get("cleanImageTag") is not None else None,
            "cleanTextTag": obj.get("cleanTextTag"),
            "deleteTag": obj.get("deleteTag"),
            "keepTag": obj.get("keepTag"),
            "queries": obj.get("queries"),
            "recurseTag": obj.get("recurseTag"),
            "regenUidTag": obj.get("regenUidTag"),
            "removeTag": obj.get("removeTag"),
            "resetTag": obj.get("resetTag")
        })
        return _obj



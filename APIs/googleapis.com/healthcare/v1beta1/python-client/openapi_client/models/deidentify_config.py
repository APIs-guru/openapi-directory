# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.annotation_config import AnnotationConfig
from openapi_client.models.deidentify_operation_metadata import DeidentifyOperationMetadata
from openapi_client.models.dicom_config import DicomConfig
from openapi_client.models.dicom_tag_config import DicomTagConfig
from openapi_client.models.fhir_config import FhirConfig
from openapi_client.models.fhir_field_config import FhirFieldConfig
from openapi_client.models.image_config import ImageConfig
from openapi_client.models.text_config import TextConfig
from typing import Optional, Set
from typing_extensions import Self

class DeidentifyConfig(BaseModel):
    """
    Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime.
    """ # noqa: E501
    annotation: Optional[AnnotationConfig] = None
    dicom: Optional[DicomConfig] = None
    dicom_tag_config: Optional[DicomTagConfig] = Field(default=None, alias="dicomTagConfig")
    fhir: Optional[FhirConfig] = None
    fhir_field_config: Optional[FhirFieldConfig] = Field(default=None, alias="fhirFieldConfig")
    image: Optional[ImageConfig] = None
    operation_metadata: Optional[DeidentifyOperationMetadata] = Field(default=None, alias="operationMetadata")
    text: Optional[TextConfig] = None
    use_regional_data_processing: Optional[StrictBool] = Field(default=None, description="Ensures in-flight data remains in the region of origin during de-identification. Using this option results in a significant reduction of throughput, and is not compatible with `LOCATION` or `ORGANIZATION_NAME` infoTypes. If the deprecated DicomConfig or FhirConfig are used, then `LOCATION` must be excluded within TextConfig, and must also be excluded within ImageConfig if image redaction is required.", alias="useRegionalDataProcessing")
    __properties: ClassVar[List[str]] = ["annotation", "dicom", "dicomTagConfig", "fhir", "fhirFieldConfig", "image", "operationMetadata", "text", "useRegionalDataProcessing"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeidentifyConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of annotation
        if self.annotation:
            _dict['annotation'] = self.annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dicom
        if self.dicom:
            _dict['dicom'] = self.dicom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dicom_tag_config
        if self.dicom_tag_config:
            _dict['dicomTagConfig'] = self.dicom_tag_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fhir
        if self.fhir:
            _dict['fhir'] = self.fhir.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fhir_field_config
        if self.fhir_field_config:
            _dict['fhirFieldConfig'] = self.fhir_field_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation_metadata
        if self.operation_metadata:
            _dict['operationMetadata'] = self.operation_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text
        if self.text:
            _dict['text'] = self.text.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeidentifyConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotation": AnnotationConfig.from_dict(obj["annotation"]) if obj.get("annotation") is not None else None,
            "dicom": DicomConfig.from_dict(obj["dicom"]) if obj.get("dicom") is not None else None,
            "dicomTagConfig": DicomTagConfig.from_dict(obj["dicomTagConfig"]) if obj.get("dicomTagConfig") is not None else None,
            "fhir": FhirConfig.from_dict(obj["fhir"]) if obj.get("fhir") is not None else None,
            "fhirFieldConfig": FhirFieldConfig.from_dict(obj["fhirFieldConfig"]) if obj.get("fhirFieldConfig") is not None else None,
            "image": ImageConfig.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "operationMetadata": DeidentifyOperationMetadata.from_dict(obj["operationMetadata"]) if obj.get("operationMetadata") is not None else None,
            "text": TextConfig.from_dict(obj["text"]) if obj.get("text") is not None else None,
            "useRegionalDataProcessing": obj.get("useRegionalDataProcessing")
        })
        return _obj



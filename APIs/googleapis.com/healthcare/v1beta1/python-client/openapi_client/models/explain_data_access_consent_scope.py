# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.consent_accessor_scope import ConsentAccessorScope
from openapi_client.models.explain_data_access_consent_info import ExplainDataAccessConsentInfo
from typing import Optional, Set
from typing_extensions import Self

class ExplainDataAccessConsentScope(BaseModel):
    """
    A single consent scope that provides info on who has access to the requested resource scope for a particular purpose and environment, enforced by which consent.
    """ # noqa: E501
    accessor_scope: Optional[ConsentAccessorScope] = Field(default=None, alias="accessorScope")
    decision: Optional[StrictStr] = Field(default=None, description="Whether the current consent scope is permitted or denied access on the requested resource.")
    enforcing_consents: Optional[List[ExplainDataAccessConsentInfo]] = Field(default=None, description="Metadata of the consent resources that enforce the consent scope's access.", alias="enforcingConsents")
    exceptions: Optional[List[ExplainDataAccessConsentScope]] = Field(default=None, description="Other consent scopes that created exceptions within this scope.")
    __properties: ClassVar[List[str]] = ["accessorScope", "decision", "enforcingConsents", "exceptions"]

    @field_validator('decision')
    def decision_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONSENT_DECISION_TYPE_UNSPECIFIED', 'CONSENT_DECISION_TYPE_PERMIT', 'CONSENT_DECISION_TYPE_DENY']):
            raise ValueError("must be one of enum values ('CONSENT_DECISION_TYPE_UNSPECIFIED', 'CONSENT_DECISION_TYPE_PERMIT', 'CONSENT_DECISION_TYPE_DENY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExplainDataAccessConsentScope from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accessor_scope
        if self.accessor_scope:
            _dict['accessorScope'] = self.accessor_scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in enforcing_consents (list)
        _items = []
        if self.enforcing_consents:
            for _item_enforcing_consents in self.enforcing_consents:
                if _item_enforcing_consents:
                    _items.append(_item_enforcing_consents.to_dict())
            _dict['enforcingConsents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in exceptions (list)
        _items = []
        if self.exceptions:
            for _item_exceptions in self.exceptions:
                if _item_exceptions:
                    _items.append(_item_exceptions.to_dict())
            _dict['exceptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExplainDataAccessConsentScope from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessorScope": ConsentAccessorScope.from_dict(obj["accessorScope"]) if obj.get("accessorScope") is not None else None,
            "decision": obj.get("decision"),
            "enforcingConsents": [ExplainDataAccessConsentInfo.from_dict(_item) for _item in obj["enforcingConsents"]] if obj.get("enforcingConsents") is not None else None,
            "exceptions": [ExplainDataAccessConsentScope.from_dict(_item) for _item in obj["exceptions"]] if obj.get("exceptions") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
ExplainDataAccessConsentScope.model_rebuild(raise_errors=False)


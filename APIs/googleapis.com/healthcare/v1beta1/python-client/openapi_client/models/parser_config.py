# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.schema_package import SchemaPackage
from typing import Optional, Set
from typing_extensions import Self

class ParserConfig(BaseModel):
    """
    The configuration for the parser. It determines how the server parses the messages.
    """ # noqa: E501
    allow_null_header: Optional[StrictBool] = Field(default=None, description="Determines whether messages with no header are allowed.", alias="allowNullHeader")
    var_schema: Optional[SchemaPackage] = Field(default=None, alias="schema")
    segment_terminator: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Byte(s) to use as the segment terminator. If this is unset, '\\r' is used as segment terminator, matching the HL7 version 2 specification.", alias="segmentTerminator")
    version: Optional[StrictStr] = Field(default=None, description="Immutable. Determines the version of both the default parser to be used when `schema` is not given, as well as the schematized parser used when `schema` is specified. This field is immutable after HL7v2 store creation.")
    __properties: ClassVar[List[str]] = ["allowNullHeader", "schema", "segmentTerminator", "version"]

    @field_validator('version')
    def version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PARSER_VERSION_UNSPECIFIED', 'V1', 'V2', 'V3']):
            raise ValueError("must be one of enum values ('PARSER_VERSION_UNSPECIFIED', 'V1', 'V2', 'V3')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParserConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParserConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowNullHeader": obj.get("allowNullHeader"),
            "schema": SchemaPackage.from_dict(obj["schema"]) if obj.get("schema") is not None else None,
            "segmentTerminator": obj.get("segmentTerminator"),
            "version": obj.get("version")
        })
        return _obj



# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image import Image
from openapi_client.models.signature import Signature
from typing import Optional, Set
from typing_extensions import Self

class ConsentArtifact(BaseModel):
    """
    Documentation of a user's consent.
    """ # noqa: E501
    consent_content_screenshots: Optional[List[Image]] = Field(default=None, description="Optional. Screenshots, PDFs, or other binary information documenting the user's consent.", alias="consentContentScreenshots")
    consent_content_version: Optional[StrictStr] = Field(default=None, description="Optional. An string indicating the version of the consent information shown to the user.", alias="consentContentVersion")
    guardian_signature: Optional[Signature] = Field(default=None, alias="guardianSignature")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Metadata associated with the Consent artifact. For example, the consent locale or user agent version.")
    name: Optional[StrictStr] = Field(default=None, description="Identifier. Resource name of the Consent artifact, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`. Cannot be changed after creation.")
    user_id: Optional[StrictStr] = Field(default=None, description="Required. User's UUID provided by the client.", alias="userId")
    user_signature: Optional[Signature] = Field(default=None, alias="userSignature")
    witness_signature: Optional[Signature] = Field(default=None, alias="witnessSignature")
    __properties: ClassVar[List[str]] = ["consentContentScreenshots", "consentContentVersion", "guardianSignature", "metadata", "name", "userId", "userSignature", "witnessSignature"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsentArtifact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in consent_content_screenshots (list)
        _items = []
        if self.consent_content_screenshots:
            for _item_consent_content_screenshots in self.consent_content_screenshots:
                if _item_consent_content_screenshots:
                    _items.append(_item_consent_content_screenshots.to_dict())
            _dict['consentContentScreenshots'] = _items
        # override the default output from pydantic by calling `to_dict()` of guardian_signature
        if self.guardian_signature:
            _dict['guardianSignature'] = self.guardian_signature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_signature
        if self.user_signature:
            _dict['userSignature'] = self.user_signature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of witness_signature
        if self.witness_signature:
            _dict['witnessSignature'] = self.witness_signature.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsentArtifact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consentContentScreenshots": [Image.from_dict(_item) for _item in obj["consentContentScreenshots"]] if obj.get("consentContentScreenshots") is not None else None,
            "consentContentVersion": obj.get("consentContentVersion"),
            "guardianSignature": Signature.from_dict(obj["guardianSignature"]) if obj.get("guardianSignature") is not None else None,
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "userId": obj.get("userId"),
            "userSignature": Signature.from_dict(obj["userSignature"]) if obj.get("userSignature") is not None else None,
            "witnessSignature": Signature.from_dict(obj["witnessSignature"]) if obj.get("witnessSignature") is not None else None
        })
        return _obj



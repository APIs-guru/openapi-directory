# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_healthcare_v1beta1_dicom_stream_config import GoogleCloudHealthcareV1beta1DicomStreamConfig
from openapi_client.models.notification_config import NotificationConfig
from typing import Optional, Set
from typing_extensions import Self

class DicomStore(BaseModel):
    """
    Represents a DICOM store.
    """ # noqa: E501
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="User-supplied key-value pairs used to organize DICOM stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.")
    name: Optional[StrictStr] = Field(default=None, description="Identifier. Resource name of the DICOM store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.")
    notification_config: Optional[NotificationConfig] = Field(default=None, alias="notificationConfig")
    stream_configs: Optional[List[GoogleCloudHealthcareV1beta1DicomStreamConfig]] = Field(default=None, description="Optional. A list of streaming configs used to configure the destination of streaming exports for every DICOM instance insertion in this DICOM store. After a new config is added to `stream_configs`, DICOM instance insertions are streamed to the new destination. When a config is removed from `stream_configs`, the server stops streaming to that destination. Each config must contain a unique destination.", alias="streamConfigs")
    __properties: ClassVar[List[str]] = ["labels", "name", "notificationConfig", "streamConfigs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DicomStore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of notification_config
        if self.notification_config:
            _dict['notificationConfig'] = self.notification_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in stream_configs (list)
        _items = []
        if self.stream_configs:
            for _item_stream_configs in self.stream_configs:
                if _item_stream_configs:
                    _items.append(_item_stream_configs.to_dict())
            _dict['streamConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DicomStore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "notificationConfig": NotificationConfig.from_dict(obj["notificationConfig"]) if obj.get("notificationConfig") is not None else None,
            "streamConfigs": [GoogleCloudHealthcareV1beta1DicomStreamConfig.from_dict(_item) for _item in obj["streamConfigs"]] if obj.get("streamConfigs") is not None else None
        })
        return _obj



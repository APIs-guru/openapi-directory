# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.annotation_source import AnnotationSource
from openapi_client.models.image_annotation import ImageAnnotation
from openapi_client.models.resource_annotation import ResourceAnnotation
from openapi_client.models.sensitive_text_annotation import SensitiveTextAnnotation
from typing import Optional, Set
from typing_extensions import Self

class Annotation(BaseModel):
    """
    An annotation record.
    """ # noqa: E501
    annotation_source: Optional[AnnotationSource] = Field(default=None, alias="annotationSource")
    custom_data: Optional[Dict[str, StrictStr]] = Field(default=None, description="Additional information for this annotation record, such as annotator and verifier information or study campaign.", alias="customData")
    image_annotation: Optional[ImageAnnotation] = Field(default=None, alias="imageAnnotation")
    name: Optional[StrictStr] = Field(default=None, description="Identifier. Resource name of the Annotation, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}/annotations/{annotation_id}`.")
    resource_annotation: Optional[ResourceAnnotation] = Field(default=None, alias="resourceAnnotation")
    text_annotation: Optional[SensitiveTextAnnotation] = Field(default=None, alias="textAnnotation")
    __properties: ClassVar[List[str]] = ["annotationSource", "customData", "imageAnnotation", "name", "resourceAnnotation", "textAnnotation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Annotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of annotation_source
        if self.annotation_source:
            _dict['annotationSource'] = self.annotation_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_annotation
        if self.image_annotation:
            _dict['imageAnnotation'] = self.image_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_annotation
        if self.resource_annotation:
            _dict['resourceAnnotation'] = self.resource_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_annotation
        if self.text_annotation:
            _dict['textAnnotation'] = self.text_annotation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Annotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotationSource": AnnotationSource.from_dict(obj["annotationSource"]) if obj.get("annotationSource") is not None else None,
            "customData": obj.get("customData"),
            "imageAnnotation": ImageAnnotation.from_dict(obj["imageAnnotation"]) if obj.get("imageAnnotation") is not None else None,
            "name": obj.get("name"),
            "resourceAnnotation": ResourceAnnotation.from_dict(obj["resourceAnnotation"]) if obj.get("resourceAnnotation") is not None else None,
            "textAnnotation": SensitiveTextAnnotation.from_dict(obj["textAnnotation"]) if obj.get("textAnnotation") is not None else None
        })
        return _obj



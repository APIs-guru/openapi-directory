# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.entity import Entity
from openapi_client.models.entity_mention import EntityMention
from openapi_client.models.entity_mention_relationship import EntityMentionRelationship
from typing import Optional, Set
from typing_extensions import Self

class AnalyzeEntitiesResponse(BaseModel):
    """
    Includes recognized entity mentions and relationships between them.
    """ # noqa: E501
    entities: Optional[List[Entity]] = Field(default=None, description="The union of all the candidate entities that the entity_mentions in this response could link to. These are UMLS concepts or normalized mention content.")
    entity_mentions: Optional[List[EntityMention]] = Field(default=None, description="The `entity_mentions` field contains all the annotated medical entities that were mentioned in the provided document.", alias="entityMentions")
    fhir_bundle: Optional[StrictStr] = Field(default=None, description="The FHIR bundle ([`R4`](http://hl7.org/fhir/R4/bundle.html)) that includes all the entities, the entity mentions, and the relationships in JSON format.", alias="fhirBundle")
    relationships: Optional[List[EntityMentionRelationship]] = Field(default=None, description="relationships contains all the binary relationships that were identified between entity mentions within the provided document.")
    __properties: ClassVar[List[str]] = ["entities", "entityMentions", "fhirBundle", "relationships"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalyzeEntitiesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in entities (list)
        _items = []
        if self.entities:
            for _item_entities in self.entities:
                if _item_entities:
                    _items.append(_item_entities.to_dict())
            _dict['entities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in entity_mentions (list)
        _items = []
        if self.entity_mentions:
            for _item_entity_mentions in self.entity_mentions:
                if _item_entity_mentions:
                    _items.append(_item_entity_mentions.to_dict())
            _dict['entityMentions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in relationships (list)
        _items = []
        if self.relationships:
            for _item_relationships in self.relationships:
                if _item_relationships:
                    _items.append(_item_relationships.to_dict())
            _dict['relationships'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalyzeEntitiesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entities": [Entity.from_dict(_item) for _item in obj["entities"]] if obj.get("entities") is not None else None,
            "entityMentions": [EntityMention.from_dict(_item) for _item in obj["entityMentions"]] if obj.get("entityMentions") is not None else None,
            "fhirBundle": obj.get("fhirBundle"),
            "relationships": [EntityMentionRelationship.from_dict(_item) for _item in obj["relationships"]] if obj.get("relationships") is not None else None
        })
        return _obj



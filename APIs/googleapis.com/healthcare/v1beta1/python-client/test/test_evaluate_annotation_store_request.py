# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.evaluate_annotation_store_request import EvaluateAnnotationStoreRequest

class TestEvaluateAnnotationStoreRequest(unittest.TestCase):
    """EvaluateAnnotationStoreRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EvaluateAnnotationStoreRequest:
        """Test EvaluateAnnotationStoreRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EvaluateAnnotationStoreRequest`
        """
        model = EvaluateAnnotationStoreRequest()
        if include_optional:
            return EvaluateAnnotationStoreRequest(
                bigquery_destination = openapi_client.models.google_cloud_healthcare_v1beta1_annotation_big_query_destination.GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination(
                    force = True, 
                    schema_type = 'SCHEMA_TYPE_UNSPECIFIED', 
                    table_uri = '', 
                    write_disposition = 'WRITE_DISPOSITION_UNSPECIFIED', ),
                eval_info_type_mapping = {
                    'key' : ''
                    },
                golden_info_type_mapping = {
                    'key' : ''
                    },
                golden_store = '',
                info_type_config = openapi_client.models.info_type_config.InfoTypeConfig(
                    evaluate_list = openapi_client.models.filter_list.FilterList(
                        info_types = [
                            ''
                            ], ), 
                    ignore_list = openapi_client.models.filter_list.FilterList(), 
                    strict_matching = True, )
            )
        else:
            return EvaluateAnnotationStoreRequest(
        )
        """

    def testEvaluateAnnotationStoreRequest(self):
        """Test EvaluateAnnotationStoreRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

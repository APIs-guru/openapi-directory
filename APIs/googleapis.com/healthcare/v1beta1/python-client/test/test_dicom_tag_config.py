# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.dicom_tag_config import DicomTagConfig

class TestDicomTagConfig(unittest.TestCase):
    """DicomTagConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DicomTagConfig:
        """Test DicomTagConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DicomTagConfig`
        """
        model = DicomTagConfig()
        if include_optional:
            return DicomTagConfig(
                actions = [
                    openapi_client.models.action.Action(
                        clean_image_tag = openapi_client.models.image_config.ImageConfig(
                            additional_info_types = [
                                ''
                                ], 
                            exclude_info_types = [
                                ''
                                ], 
                            text_redaction_mode = 'TEXT_REDACTION_MODE_UNSPECIFIED', ), 
                        clean_text_tag = openapi_client.models.clean_text_tag.cleanTextTag(), 
                        delete_tag = openapi_client.models.delete_tag.deleteTag(), 
                        keep_tag = openapi_client.models.keep_tag.keepTag(), 
                        queries = [
                            ''
                            ], 
                        recurse_tag = openapi_client.models.recurse_tag.recurseTag(), 
                        regen_uid_tag = openapi_client.models.regen_uid_tag.regenUidTag(), 
                        remove_tag = openapi_client.models.remove_tag.removeTag(), 
                        reset_tag = openapi_client.models.reset_tag.resetTag(), )
                    ],
                options = openapi_client.models.options.Options(
                    clean_descriptors = openapi_client.models.clean_descriptors_option.CleanDescriptorsOption(), 
                    clean_image = openapi_client.models.image_config.ImageConfig(
                        additional_info_types = [
                            ''
                            ], 
                        exclude_info_types = [
                            ''
                            ], 
                        text_redaction_mode = 'TEXT_REDACTION_MODE_UNSPECIFIED', ), 
                    primary_ids = 'PRIMARY_IDS_OPTION_UNSPECIFIED', ),
                profile_type = 'PROFILE_TYPE_UNSPECIFIED'
            )
        else:
            return DicomTagConfig(
        )
        """

    def testDicomTagConfig(self):
        """Test DicomTagConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

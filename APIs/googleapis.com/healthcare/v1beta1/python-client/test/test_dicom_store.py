# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.dicom_store import DicomStore

class TestDicomStore(unittest.TestCase):
    """DicomStore unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DicomStore:
        """Test DicomStore
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DicomStore`
        """
        model = DicomStore()
        if include_optional:
            return DicomStore(
                labels = {
                    'key' : ''
                    },
                name = '',
                notification_config = openapi_client.models.notification_config.NotificationConfig(
                    pubsub_topic = '', 
                    send_for_bulk_import = True, ),
                stream_configs = [
                    openapi_client.models.google_cloud_healthcare_v1beta1_dicom_stream_config.GoogleCloudHealthcareV1beta1DicomStreamConfig(
                        bigquery_destination = openapi_client.models.google_cloud_healthcare_v1beta1_dicom_big_query_destination.GoogleCloudHealthcareV1beta1DicomBigQueryDestination(
                            force = True, 
                            table_uri = '', 
                            write_disposition = 'WRITE_DISPOSITION_UNSPECIFIED', ), )
                    ]
            )
        else:
            return DicomStore(
        )
        """

    def testDicomStore(self):
        """Test DicomStore"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

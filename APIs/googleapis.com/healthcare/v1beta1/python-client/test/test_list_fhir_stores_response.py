# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_fhir_stores_response import ListFhirStoresResponse

class TestListFhirStoresResponse(unittest.TestCase):
    """ListFhirStoresResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListFhirStoresResponse:
        """Test ListFhirStoresResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListFhirStoresResponse`
        """
        model = ListFhirStoresResponse()
        if include_optional:
            return ListFhirStoresResponse(
                fhir_stores = [
                    openapi_client.models.fhir_store.FhirStore(
                        complex_data_type_reference_parsing = 'COMPLEX_DATA_TYPE_REFERENCE_PARSING_UNSPECIFIED', 
                        consent_config = openapi_client.models.consent_config.ConsentConfig(
                            access_determination_log_config = openapi_client.models.access_determination_log_config.AccessDeterminationLogConfig(
                                log_level = 'LOG_LEVEL_UNSPECIFIED', ), 
                            access_enforced = True, 
                            consent_header_handling = openapi_client.models.consent_header_handling.ConsentHeaderHandling(
                                profile = 'SCOPE_PROFILE_UNSPECIFIED', ), 
                            enforced_admin_consents = [
                                ''
                                ], 
                            version = 'CONSENT_ENFORCEMENT_VERSION_UNSPECIFIED', ), 
                        default_search_handling_strict = True, 
                        disable_referential_integrity = True, 
                        disable_resource_versioning = True, 
                        enable_history_modifications = True, 
                        enable_update_create = True, 
                        labels = {
                            'key' : ''
                            }, 
                        name = '', 
                        notification_config = openapi_client.models.notification_config.NotificationConfig(
                            pubsub_topic = '', 
                            send_for_bulk_import = True, ), 
                        notification_configs = [
                            openapi_client.models.fhir_notification_config.FhirNotificationConfig(
                                pubsub_topic = '', 
                                send_full_resource = True, 
                                send_previous_resource_on_delete = True, )
                            ], 
                        search_config = openapi_client.models.search_config.SearchConfig(
                            search_parameters = [
                                openapi_client.models.search_parameter.SearchParameter(
                                    canonical_url = '', 
                                    parameter = '', )
                                ], ), 
                        stream_configs = [
                            openapi_client.models.stream_config.StreamConfig(
                                bigquery_destination = openapi_client.models.google_cloud_healthcare_v1beta1_fhir_big_query_destination.GoogleCloudHealthcareV1beta1FhirBigQueryDestination(
                                    dataset_uri = '', 
                                    force = True, 
                                    schema_config = openapi_client.models.schema_config.SchemaConfig(
                                        last_updated_partition_config = openapi_client.models.time_partitioning.TimePartitioning(
                                            expiration_ms = '', 
                                            type = 'PARTITION_TYPE_UNSPECIFIED', ), 
                                        recursive_structure_depth = '', 
                                        schema_type = 'SCHEMA_TYPE_UNSPECIFIED', ), 
                                    write_disposition = 'WRITE_DISPOSITION_UNSPECIFIED', ), 
                                deidentified_store_destination = openapi_client.models.deidentified_store_destination.DeidentifiedStoreDestination(
                                    config = openapi_client.models.deidentify_config.DeidentifyConfig(
                                        annotation = openapi_client.models.annotation_config.AnnotationConfig(
                                            annotation_store_name = '', 
                                            store_quote = True, ), 
                                        dicom = openapi_client.models.dicom_config.DicomConfig(
                                            filter_profile = 'TAG_FILTER_PROFILE_UNSPECIFIED', 
                                            keep_list = openapi_client.models.tag_filter_list.TagFilterList(
                                                tags = [
                                                    ''
                                                    ], ), 
                                            remove_list = openapi_client.models.tag_filter_list.TagFilterList(), 
                                            skip_id_redaction = True, ), 
                                        dicom_tag_config = openapi_client.models.dicom_tag_config.DicomTagConfig(
                                            actions = [
                                                openapi_client.models.action.Action(
                                                    clean_image_tag = openapi_client.models.image_config.ImageConfig(
                                                        additional_info_types = [
                                                            ''
                                                            ], 
                                                        exclude_info_types = [
                                                            ''
                                                            ], 
                                                        text_redaction_mode = 'TEXT_REDACTION_MODE_UNSPECIFIED', ), 
                                                    clean_text_tag = openapi_client.models.clean_text_tag.cleanTextTag(), 
                                                    delete_tag = openapi_client.models.delete_tag.deleteTag(), 
                                                    keep_tag = openapi_client.models.keep_tag.keepTag(), 
                                                    queries = [
                                                        ''
                                                        ], 
                                                    recurse_tag = openapi_client.models.recurse_tag.recurseTag(), 
                                                    regen_uid_tag = openapi_client.models.regen_uid_tag.regenUidTag(), 
                                                    remove_tag = openapi_client.models.remove_tag.removeTag(), 
                                                    reset_tag = openapi_client.models.reset_tag.resetTag(), )
                                                ], 
                                            options = openapi_client.models.options.Options(
                                                clean_descriptors = openapi_client.models.clean_descriptors_option.CleanDescriptorsOption(), 
                                                clean_image = openapi_client.models.image_config.ImageConfig(
                                                    text_redaction_mode = 'TEXT_REDACTION_MODE_UNSPECIFIED', ), 
                                                primary_ids = 'PRIMARY_IDS_OPTION_UNSPECIFIED', ), 
                                            profile_type = 'PROFILE_TYPE_UNSPECIFIED', ), 
                                        fhir = openapi_client.models.fhir_config.FhirConfig(
                                            default_keep_extensions = True, 
                                            field_metadata_list = [
                                                openapi_client.models.field_metadata.FieldMetadata(
                                                    action = 'ACTION_UNSPECIFIED', 
                                                    paths = [
                                                        ''
                                                        ], )
                                                ], ), 
                                        fhir_field_config = openapi_client.models.fhir_field_config.FhirFieldConfig(
                                            profile_type = 'PROFILE_TYPE_UNSPECIFIED', ), 
                                        image = , 
                                        operation_metadata = openapi_client.models.deidentify_operation_metadata.DeidentifyOperationMetadata(
                                            fhir_output = openapi_client.models.fhir_output.FhirOutput(
                                                fhir_store = '', ), ), 
                                        text = openapi_client.models.text_config.TextConfig(
                                            additional_transformations = [
                                                openapi_client.models.info_type_transformation.InfoTypeTransformation(
                                                    character_mask_config = openapi_client.models.character_mask_config.CharacterMaskConfig(
                                                        masking_character = '', ), 
                                                    crypto_hash_config = openapi_client.models.crypto_hash_config.CryptoHashConfig(
                                                        crypto_key = 'YQ==', 
                                                        kms_wrapped = openapi_client.models.kms_wrapped_crypto_key.KmsWrappedCryptoKey(
                                                            crypto_key = '', 
                                                            wrapped_key = 'YQ==', ), ), 
                                                    date_shift_config = openapi_client.models.date_shift_config.DateShiftConfig(
                                                        crypto_key = 'YQ==', ), 
                                                    info_types = [
                                                        ''
                                                        ], 
                                                    redact_config = openapi_client.models.redact_config.RedactConfig(), 
                                                    replace_with_info_type_config = openapi_client.models.replace_with_info_type_config.ReplaceWithInfoTypeConfig(), )
                                                ], 
                                            profile_type = 'PROFILE_TYPE_UNSPECIFIED', 
                                            transformations = [
                                                openapi_client.models.info_type_transformation.InfoTypeTransformation(
                                                    redact_config = openapi_client.models.redact_config.RedactConfig(), 
                                                    replace_with_info_type_config = openapi_client.models.replace_with_info_type_config.ReplaceWithInfoTypeConfig(), )
                                                ], ), 
                                        use_regional_data_processing = True, ), 
                                    store = '', ), 
                                resource_types = [
                                    ''
                                    ], )
                            ], 
                        validation_config = openapi_client.models.validation_config.ValidationConfig(
                            disable_fhirpath_validation = True, 
                            disable_profile_validation = True, 
                            disable_reference_type_validation = True, 
                            disable_required_field_validation = True, 
                            enabled_implementation_guides = [
                                ''
                                ], ), 
                        version = 'VERSION_UNSPECIFIED', )
                    ],
                next_page_token = ''
            )
        else:
            return ListFhirStoresResponse(
        )
        """

    def testListFhirStoresResponse(self):
        """Test ListFhirStoresResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

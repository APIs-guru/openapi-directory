# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.deidentify_config import DeidentifyConfig

class TestDeidentifyConfig(unittest.TestCase):
    """DeidentifyConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeidentifyConfig:
        """Test DeidentifyConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeidentifyConfig`
        """
        model = DeidentifyConfig()
        if include_optional:
            return DeidentifyConfig(
                annotation = openapi_client.models.annotation_config.AnnotationConfig(
                    annotation_store_name = '', 
                    store_quote = True, ),
                dicom = openapi_client.models.dicom_config.DicomConfig(
                    filter_profile = 'TAG_FILTER_PROFILE_UNSPECIFIED', 
                    keep_list = openapi_client.models.tag_filter_list.TagFilterList(
                        tags = [
                            ''
                            ], ), 
                    remove_list = openapi_client.models.tag_filter_list.TagFilterList(), 
                    skip_id_redaction = True, ),
                dicom_tag_config = openapi_client.models.dicom_tag_config.DicomTagConfig(
                    actions = [
                        openapi_client.models.action.Action(
                            clean_image_tag = openapi_client.models.image_config.ImageConfig(
                                additional_info_types = [
                                    ''
                                    ], 
                                exclude_info_types = [
                                    ''
                                    ], 
                                text_redaction_mode = 'TEXT_REDACTION_MODE_UNSPECIFIED', ), 
                            clean_text_tag = openapi_client.models.clean_text_tag.cleanTextTag(), 
                            delete_tag = openapi_client.models.delete_tag.deleteTag(), 
                            keep_tag = openapi_client.models.keep_tag.keepTag(), 
                            queries = [
                                ''
                                ], 
                            recurse_tag = openapi_client.models.recurse_tag.recurseTag(), 
                            regen_uid_tag = openapi_client.models.regen_uid_tag.regenUidTag(), 
                            remove_tag = openapi_client.models.remove_tag.removeTag(), 
                            reset_tag = openapi_client.models.reset_tag.resetTag(), )
                        ], 
                    options = openapi_client.models.options.Options(
                        clean_descriptors = openapi_client.models.clean_descriptors_option.CleanDescriptorsOption(), 
                        clean_image = openapi_client.models.image_config.ImageConfig(
                            text_redaction_mode = 'TEXT_REDACTION_MODE_UNSPECIFIED', ), 
                        primary_ids = 'PRIMARY_IDS_OPTION_UNSPECIFIED', ), 
                    profile_type = 'PROFILE_TYPE_UNSPECIFIED', ),
                fhir = openapi_client.models.fhir_config.FhirConfig(
                    default_keep_extensions = True, 
                    field_metadata_list = [
                        openapi_client.models.field_metadata.FieldMetadata(
                            action = 'ACTION_UNSPECIFIED', 
                            paths = [
                                ''
                                ], )
                        ], ),
                fhir_field_config = openapi_client.models.fhir_field_config.FhirFieldConfig(
                    field_metadata_list = [
                        openapi_client.models.google_cloud_healthcare_v1beta1_deidentify_field_metadata.GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata(
                            character_mask_field = openapi_client.models.character_mask_field.CharacterMaskField(), 
                            clean_text_field = openapi_client.models.clean_text_field.CleanTextField(), 
                            crypto_hash_field = openapi_client.models.crypto_hash_field.CryptoHashField(), 
                            date_shift_field = openapi_client.models.date_shift_field.DateShiftField(), 
                            keep_field = openapi_client.models.keep_field.KeepField(), 
                            paths = [
                                ''
                                ], 
                            remove_field = openapi_client.models.remove_field.RemoveField(), )
                        ], 
                    options = openapi_client.models.google_cloud_healthcare_v1beta1_deidentify_options.GoogleCloudHealthcareV1beta1DeidentifyOptions(
                        character_mask_config = openapi_client.models.character_mask_config.CharacterMaskConfig(
                            masking_character = '', ), 
                        contextual_deid = openapi_client.models.contextual_deid_config.ContextualDeidConfig(), 
                        crypto_hash_config = openapi_client.models.crypto_hash_config.CryptoHashConfig(
                            crypto_key = 'YQ==', 
                            kms_wrapped = openapi_client.models.kms_wrapped_crypto_key.KmsWrappedCryptoKey(
                                crypto_key = '', 
                                wrapped_key = 'YQ==', ), ), 
                        date_shift_config = openapi_client.models.date_shift_config.DateShiftConfig(
                            crypto_key = 'YQ==', ), 
                        keep_extensions = openapi_client.models.keep_extensions_config.KeepExtensionsConfig(), ), 
                    profile_type = 'PROFILE_TYPE_UNSPECIFIED', ),
                image = openapi_client.models.image_config.ImageConfig(
                    additional_info_types = [
                        ''
                        ], 
                    exclude_info_types = [
                        ''
                        ], 
                    text_redaction_mode = 'TEXT_REDACTION_MODE_UNSPECIFIED', ),
                operation_metadata = openapi_client.models.deidentify_operation_metadata.DeidentifyOperationMetadata(
                    fhir_output = openapi_client.models.fhir_output.FhirOutput(
                        fhir_store = '', ), ),
                text = openapi_client.models.text_config.TextConfig(
                    additional_transformations = [
                        openapi_client.models.info_type_transformation.InfoTypeTransformation(
                            character_mask_config = openapi_client.models.character_mask_config.CharacterMaskConfig(
                                masking_character = '', ), 
                            crypto_hash_config = openapi_client.models.crypto_hash_config.CryptoHashConfig(
                                crypto_key = 'YQ==', 
                                kms_wrapped = openapi_client.models.kms_wrapped_crypto_key.KmsWrappedCryptoKey(
                                    crypto_key = '', 
                                    wrapped_key = 'YQ==', ), ), 
                            date_shift_config = openapi_client.models.date_shift_config.DateShiftConfig(
                                crypto_key = 'YQ==', ), 
                            info_types = [
                                ''
                                ], 
                            redact_config = openapi_client.models.redact_config.RedactConfig(), 
                            replace_with_info_type_config = openapi_client.models.replace_with_info_type_config.ReplaceWithInfoTypeConfig(), )
                        ], 
                    exclude_info_types = [
                        ''
                        ], 
                    profile_type = 'PROFILE_TYPE_UNSPECIFIED', 
                    transformations = [
                        openapi_client.models.info_type_transformation.InfoTypeTransformation()
                        ], ),
                use_regional_data_processing = True
            )
        else:
            return DeidentifyConfig(
        )
        """

    def testDeidentifyConfig(self):
        """Test DeidentifyConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

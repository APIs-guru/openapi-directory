# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.annotation import Annotation

class TestAnnotation(unittest.TestCase):
    """Annotation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Annotation:
        """Test Annotation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Annotation`
        """
        model = Annotation()
        if include_optional:
            return Annotation(
                annotation_source = openapi_client.models.annotation_source.AnnotationSource(
                    cloud_healthcare_source = openapi_client.models.cloud_healthcare_source.CloudHealthcareSource(
                        name = '', ), ),
                custom_data = {
                    'key' : ''
                    },
                image_annotation = openapi_client.models.image_annotation.ImageAnnotation(
                    bounding_polys = [
                        openapi_client.models.bounding_poly.BoundingPoly(
                            label = '', 
                            vertices = [
                                openapi_client.models.vertex.Vertex(
                                    x = 1.337, 
                                    y = 1.337, )
                                ], )
                        ], 
                    frame_index = 56, ),
                name = '',
                resource_annotation = openapi_client.models.resource_annotation.ResourceAnnotation(
                    label = '', ),
                text_annotation = openapi_client.models.sensitive_text_annotation.SensitiveTextAnnotation(
                    details = {
                        'key' : openapi_client.models.detail.Detail(
                            findings = [
                                openapi_client.models.finding.Finding(
                                    end = '', 
                                    info_type = '', 
                                    quote = '', 
                                    start = '', )
                                ], )
                        }, )
            )
        else:
            return Annotation(
        )
        """

    def testAnnotation(self):
        """Test Annotation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

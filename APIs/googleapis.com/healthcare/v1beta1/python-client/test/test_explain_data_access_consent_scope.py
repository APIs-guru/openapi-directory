# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.explain_data_access_consent_scope import ExplainDataAccessConsentScope

class TestExplainDataAccessConsentScope(unittest.TestCase):
    """ExplainDataAccessConsentScope unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExplainDataAccessConsentScope:
        """Test ExplainDataAccessConsentScope
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ExplainDataAccessConsentScope`
        """
        model = ExplainDataAccessConsentScope()
        if include_optional:
            return ExplainDataAccessConsentScope(
                accessor_scope = openapi_client.models.consent_accessor_scope.ConsentAccessorScope(
                    actor = '', 
                    environment = '', 
                    purpose = '', ),
                decision = 'CONSENT_DECISION_TYPE_UNSPECIFIED',
                enforcing_consents = [
                    openapi_client.models.explain_data_access_consent_info.ExplainDataAccessConsentInfo(
                        cascade_origins = [
                            ''
                            ], 
                        consent_resource = '', 
                        enforcement_time = '', 
                        matching_accessor_scopes = [
                            openapi_client.models.consent_accessor_scope.ConsentAccessorScope(
                                actor = '', 
                                environment = '', 
                                purpose = '', )
                            ], 
                        patient_consent_owner = '', 
                        type = 'CONSENT_POLICY_TYPE_UNSPECIFIED', 
                        variants = [
                            'VARIANT_UNSPECIFIED'
                            ], )
                    ],
                exceptions = [
                    openapi_client.models.explain_data_access_consent_scope.ExplainDataAccessConsentScope(
                        accessor_scope = openapi_client.models.consent_accessor_scope.ConsentAccessorScope(
                            actor = '', 
                            environment = '', 
                            purpose = '', ), 
                        decision = 'CONSENT_DECISION_TYPE_UNSPECIFIED', 
                        enforcing_consents = [
                            openapi_client.models.explain_data_access_consent_info.ExplainDataAccessConsentInfo(
                                cascade_origins = [
                                    ''
                                    ], 
                                consent_resource = '', 
                                enforcement_time = '', 
                                matching_accessor_scopes = [
                                    openapi_client.models.consent_accessor_scope.ConsentAccessorScope(
                                        actor = '', 
                                        environment = '', 
                                        purpose = '', )
                                    ], 
                                patient_consent_owner = '', 
                                type = 'CONSENT_POLICY_TYPE_UNSPECIFIED', 
                                variants = [
                                    'VARIANT_UNSPECIFIED'
                                    ], )
                            ], 
                        exceptions = [
                            openapi_client.models.explain_data_access_consent_scope.ExplainDataAccessConsentScope(
                                decision = 'CONSENT_DECISION_TYPE_UNSPECIFIED', )
                            ], )
                    ]
            )
        else:
            return ExplainDataAccessConsentScope(
        )
        """

    def testExplainDataAccessConsentScope(self):
        """Test ExplainDataAccessConsentScope"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

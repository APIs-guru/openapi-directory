# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.deidentify_dicom_store_request import DeidentifyDicomStoreRequest

class TestDeidentifyDicomStoreRequest(unittest.TestCase):
    """DeidentifyDicomStoreRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeidentifyDicomStoreRequest:
        """Test DeidentifyDicomStoreRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeidentifyDicomStoreRequest`
        """
        model = DeidentifyDicomStoreRequest()
        if include_optional:
            return DeidentifyDicomStoreRequest(
                config = openapi_client.models.deidentify_config.DeidentifyConfig(
                    dicom = openapi_client.models.dicom_config.DicomConfig(
                        filter_profile = 'TAG_FILTER_PROFILE_UNSPECIFIED', 
                        keep_list = openapi_client.models.tag_filter_list.TagFilterList(
                            tags = [
                                ''
                                ], ), 
                        remove_list = openapi_client.models.tag_filter_list.TagFilterList(), 
                        skip_id_redaction = True, ), 
                    fhir = openapi_client.models.fhir_config.FhirConfig(
                        default_keep_extensions = True, 
                        field_metadata_list = [
                            openapi_client.models.field_metadata.FieldMetadata(
                                action = 'ACTION_UNSPECIFIED', 
                                paths = [
                                    ''
                                    ], )
                            ], ), 
                    image = openapi_client.models.image_config.ImageConfig(
                        text_redaction_mode = 'TEXT_REDACTION_MODE_UNSPECIFIED', ), 
                    text = openapi_client.models.text_config.TextConfig(
                        additional_transformations = [
                            openapi_client.models.info_type_transformation.InfoTypeTransformation(
                                character_mask_config = openapi_client.models.character_mask_config.CharacterMaskConfig(
                                    masking_character = '', ), 
                                crypto_hash_config = openapi_client.models.crypto_hash_config.CryptoHashConfig(
                                    crypto_key = 'YQ==', 
                                    kms_wrapped = openapi_client.models.kms_wrapped_crypto_key.KmsWrappedCryptoKey(
                                        crypto_key = '', 
                                        wrapped_key = 'YQ==', ), ), 
                                date_shift_config = openapi_client.models.date_shift_config.DateShiftConfig(
                                    crypto_key = 'YQ==', ), 
                                info_types = [
                                    ''
                                    ], 
                                redact_config = openapi_client.models.redact_config.RedactConfig(), 
                                replace_with_info_type_config = openapi_client.models.replace_with_info_type_config.ReplaceWithInfoTypeConfig(), )
                            ], 
                        exclude_info_types = [
                            ''
                            ], 
                        transformations = [
                            openapi_client.models.info_type_transformation.InfoTypeTransformation()
                            ], ), 
                    use_regional_data_processing = True, ),
                destination_store = '',
                filter_config = openapi_client.models.dicom_filter_config.DicomFilterConfig(
                    resource_paths_gcs_uri = '', ),
                gcs_config_uri = ''
            )
        else:
            return DeidentifyDicomStoreRequest(
        )
        """

    def testDeidentifyDicomStoreRequest(self):
        """Test DeidentifyDicomStoreRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

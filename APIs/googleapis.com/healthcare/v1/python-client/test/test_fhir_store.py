# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.fhir_store import FhirStore

class TestFhirStore(unittest.TestCase):
    """FhirStore unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FhirStore:
        """Test FhirStore
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FhirStore`
        """
        model = FhirStore()
        if include_optional:
            return FhirStore(
                complex_data_type_reference_parsing = 'COMPLEX_DATA_TYPE_REFERENCE_PARSING_UNSPECIFIED',
                default_search_handling_strict = True,
                disable_referential_integrity = True,
                disable_resource_versioning = True,
                enable_update_create = True,
                labels = {
                    'key' : ''
                    },
                name = '',
                notification_config = openapi_client.models.notification_config.NotificationConfig(
                    pubsub_topic = '', 
                    send_for_bulk_import = True, ),
                notification_configs = [
                    openapi_client.models.fhir_notification_config.FhirNotificationConfig(
                        pubsub_topic = '', 
                        send_full_resource = True, 
                        send_previous_resource_on_delete = True, )
                    ],
                stream_configs = [
                    openapi_client.models.stream_config.StreamConfig(
                        bigquery_destination = openapi_client.models.google_cloud_healthcare_v1_fhir_big_query_destination.GoogleCloudHealthcareV1FhirBigQueryDestination(
                            dataset_uri = '', 
                            force = True, 
                            schema_config = openapi_client.models.schema_config.SchemaConfig(
                                last_updated_partition_config = openapi_client.models.time_partitioning.TimePartitioning(
                                    expiration_ms = '', 
                                    type = 'PARTITION_TYPE_UNSPECIFIED', ), 
                                recursive_structure_depth = '', 
                                schema_type = 'SCHEMA_TYPE_UNSPECIFIED', ), 
                            write_disposition = 'WRITE_DISPOSITION_UNSPECIFIED', ), 
                        deidentified_store_destination = openapi_client.models.deidentified_store_destination.DeidentifiedStoreDestination(
                            config = openapi_client.models.deidentify_config.DeidentifyConfig(
                                dicom = openapi_client.models.dicom_config.DicomConfig(
                                    filter_profile = 'TAG_FILTER_PROFILE_UNSPECIFIED', 
                                    keep_list = openapi_client.models.tag_filter_list.TagFilterList(
                                        tags = [
                                            ''
                                            ], ), 
                                    remove_list = openapi_client.models.tag_filter_list.TagFilterList(), 
                                    skip_id_redaction = True, ), 
                                fhir = openapi_client.models.fhir_config.FhirConfig(
                                    default_keep_extensions = True, 
                                    field_metadata_list = [
                                        openapi_client.models.field_metadata.FieldMetadata(
                                            action = 'ACTION_UNSPECIFIED', 
                                            paths = [
                                                ''
                                                ], )
                                        ], ), 
                                image = openapi_client.models.image_config.ImageConfig(
                                    text_redaction_mode = 'TEXT_REDACTION_MODE_UNSPECIFIED', ), 
                                text = openapi_client.models.text_config.TextConfig(
                                    additional_transformations = [
                                        openapi_client.models.info_type_transformation.InfoTypeTransformation(
                                            character_mask_config = openapi_client.models.character_mask_config.CharacterMaskConfig(
                                                masking_character = '', ), 
                                            crypto_hash_config = openapi_client.models.crypto_hash_config.CryptoHashConfig(
                                                crypto_key = 'YQ==', 
                                                kms_wrapped = openapi_client.models.kms_wrapped_crypto_key.KmsWrappedCryptoKey(
                                                    crypto_key = '', 
                                                    wrapped_key = 'YQ==', ), ), 
                                            date_shift_config = openapi_client.models.date_shift_config.DateShiftConfig(
                                                crypto_key = 'YQ==', ), 
                                            info_types = [
                                                ''
                                                ], 
                                            redact_config = openapi_client.models.redact_config.RedactConfig(), 
                                            replace_with_info_type_config = openapi_client.models.replace_with_info_type_config.ReplaceWithInfoTypeConfig(), )
                                        ], 
                                    exclude_info_types = [
                                        ''
                                        ], 
                                    transformations = [
                                        openapi_client.models.info_type_transformation.InfoTypeTransformation()
                                        ], ), 
                                use_regional_data_processing = True, ), 
                            store = '', ), 
                        resource_types = [
                            ''
                            ], )
                    ],
                validation_config = openapi_client.models.validation_config.ValidationConfig(
                    disable_fhirpath_validation = True, 
                    disable_profile_validation = True, 
                    disable_reference_type_validation = True, 
                    disable_required_field_validation = True, 
                    enabled_implementation_guides = [
                        ''
                        ], ),
                version = 'VERSION_UNSPECIFIED'
            )
        else:
            return FhirStore(
        )
        """

    def testFhirStore(self):
        """Test FhirStore"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

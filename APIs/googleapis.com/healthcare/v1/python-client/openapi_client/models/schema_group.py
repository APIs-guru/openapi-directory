# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SchemaGroup(BaseModel):
    """
    An HL7v2 logical group construct.
    """ # noqa: E501
    choice: Optional[StrictBool] = Field(default=None, description="True indicates that this is a choice group, meaning that only one of its segments can exist in a given message.")
    max_occurs: Optional[StrictInt] = Field(default=None, description="The maximum number of times this group can be repeated. 0 or -1 means unbounded.", alias="maxOccurs")
    members: Optional[List[GroupOrSegment]] = Field(default=None, description="Nested groups and/or segments.")
    min_occurs: Optional[StrictInt] = Field(default=None, description="The minimum number of times this group must be present/repeated.", alias="minOccurs")
    name: Optional[StrictStr] = Field(default=None, description="The name of this group. For example, \"ORDER_DETAIL\".")
    __properties: ClassVar[List[str]] = ["choice", "maxOccurs", "members", "minOccurs", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SchemaGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in members (list)
        _items = []
        if self.members:
            for _item_members in self.members:
                if _item_members:
                    _items.append(_item_members.to_dict())
            _dict['members'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SchemaGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "choice": obj.get("choice"),
            "maxOccurs": obj.get("maxOccurs"),
            "members": [GroupOrSegment.from_dict(_item) for _item in obj["members"]] if obj.get("members") is not None else None,
            "minOccurs": obj.get("minOccurs"),
            "name": obj.get("name")
        })
        return _obj

from openapi_client.models.group_or_segment import GroupOrSegment
# TODO: Rewrite to not use raise_errors
SchemaGroup.model_rebuild(raise_errors=False)


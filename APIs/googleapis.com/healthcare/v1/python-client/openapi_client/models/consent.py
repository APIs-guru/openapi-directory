# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_healthcare_v1_consent_policy import GoogleCloudHealthcareV1ConsentPolicy
from typing import Optional, Set
from typing_extensions import Self

class Consent(BaseModel):
    """
    Represents a user's consent.
    """ # noqa: E501
    consent_artifact: Optional[StrictStr] = Field(default=None, description="Required. The resource name of the Consent artifact that contains proof of the end user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.", alias="consentArtifact")
    expire_time: Optional[StrictStr] = Field(default=None, description="Timestamp in UTC of when this Consent is considered expired.", alias="expireTime")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. User-supplied key-value pairs used to organize Consent resources. Metadata keys must: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - begin with a letter - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes Metadata values must be: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes No more than 64 metadata entries can be associated with a given consent.")
    name: Optional[StrictStr] = Field(default=None, description="Identifier. Resource name of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. Cannot be changed after creation.")
    policies: Optional[List[GoogleCloudHealthcareV1ConsentPolicy]] = Field(default=None, description="Optional. Represents a user's consent in terms of the resources that can be accessed and under what conditions.")
    revision_create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp that the revision was created.", alias="revisionCreateTime")
    revision_id: Optional[StrictStr] = Field(default=None, description="Output only. The revision ID of the Consent. The format is an 8-character hexadecimal string. Refer to a specific revision of a Consent by appending `@{revision_id}` to the Consent's resource name.", alias="revisionId")
    state: Optional[StrictStr] = Field(default=None, description="Required. Indicates the current state of this Consent.")
    ttl: Optional[StrictStr] = Field(default=None, description="Input only. The time to live for this Consent from when it is created.")
    user_id: Optional[StrictStr] = Field(default=None, description="Required. User's UUID provided by the client.", alias="userId")
    __properties: ClassVar[List[str]] = ["consentArtifact", "expireTime", "metadata", "name", "policies", "revisionCreateTime", "revisionId", "state", "ttl", "userId"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'ARCHIVED', 'REVOKED', 'DRAFT', 'REJECTED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'ARCHIVED', 'REVOKED', 'DRAFT', 'REJECTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Consent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "revision_create_time",
            "revision_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in policies (list)
        _items = []
        if self.policies:
            for _item_policies in self.policies:
                if _item_policies:
                    _items.append(_item_policies.to_dict())
            _dict['policies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Consent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consentArtifact": obj.get("consentArtifact"),
            "expireTime": obj.get("expireTime"),
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "policies": [GoogleCloudHealthcareV1ConsentPolicy.from_dict(_item) for _item in obj["policies"]] if obj.get("policies") is not None else None,
            "revisionCreateTime": obj.get("revisionCreateTime"),
            "revisionId": obj.get("revisionId"),
            "state": obj.get("state"),
            "ttl": obj.get("ttl"),
            "userId": obj.get("userId")
        })
        return _obj



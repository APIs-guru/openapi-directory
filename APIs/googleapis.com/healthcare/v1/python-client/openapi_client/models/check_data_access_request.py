# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.consent_list import ConsentList
from typing import Optional, Set
from typing_extensions import Self

class CheckDataAccessRequest(BaseModel):
    """
    Checks if a particular data_id of a User data mapping in the given consent store is consented for a given use.
    """ # noqa: E501
    consent_list: Optional[ConsentList] = Field(default=None, alias="consentList")
    data_id: Optional[StrictStr] = Field(default=None, description="Required. The unique identifier of the resource to check access for. This identifier must correspond to a User data mapping in the given consent store.", alias="dataId")
    request_attributes: Optional[Dict[str, StrictStr]] = Field(default=None, description="The values of request attributes associated with this access request.", alias="requestAttributes")
    response_view: Optional[StrictStr] = Field(default=None, description="Optional. The view for CheckDataAccessResponse. If unspecified, defaults to `BASIC` and returns `consented` as `TRUE` or `FALSE`.", alias="responseView")
    __properties: ClassVar[List[str]] = ["consentList", "dataId", "requestAttributes", "responseView"]

    @field_validator('response_view')
    def response_view_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESPONSE_VIEW_UNSPECIFIED', 'BASIC', 'FULL']):
            raise ValueError("must be one of enum values ('RESPONSE_VIEW_UNSPECIFIED', 'BASIC', 'FULL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckDataAccessRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of consent_list
        if self.consent_list:
            _dict['consentList'] = self.consent_list.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckDataAccessRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consentList": ConsentList.from_dict(obj["consentList"]) if obj.get("consentList") is not None else None,
            "dataId": obj.get("dataId"),
            "requestAttributes": obj.get("requestAttributes"),
            "responseView": obj.get("responseView")
        })
        return _obj



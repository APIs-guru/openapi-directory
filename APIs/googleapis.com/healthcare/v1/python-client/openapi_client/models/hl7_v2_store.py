# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.hl7_v2_notification_config import Hl7V2NotificationConfig
from openapi_client.models.parser_config import ParserConfig
from typing import Optional, Set
from typing_extensions import Self

class Hl7V2Store(BaseModel):
    """
    Represents an HL7v2 store.
    """ # noqa: E501
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.")
    name: Optional[StrictStr] = Field(default=None, description="Identifier. Resource name of the HL7v2 store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.")
    notification_configs: Optional[List[Hl7V2NotificationConfig]] = Field(default=None, description="A list of notification configs. Each configuration uses a filter to determine whether to publish a message (both Ingest & Create) on the corresponding notification destination. Only the message name is sent as part of the notification. Supplied by the client.", alias="notificationConfigs")
    parser_config: Optional[ParserConfig] = Field(default=None, alias="parserConfig")
    reject_duplicate_message: Optional[StrictBool] = Field(default=None, description="Determines whether to reject duplicate messages. A duplicate message is a message with the same raw bytes as a message that has already been ingested/created in this HL7v2 store. The default value is false, meaning that the store accepts the duplicate messages and it also returns the same ACK message in the IngestMessageResponse as has been returned previously. Note that only one resource is created in the store. When this field is set to true, CreateMessage/IngestMessage requests with a duplicate message will be rejected by the store, and IngestMessageErrorDetail returns a NACK message upon rejection.", alias="rejectDuplicateMessage")
    __properties: ClassVar[List[str]] = ["labels", "name", "notificationConfigs", "parserConfig", "rejectDuplicateMessage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Hl7V2Store from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in notification_configs (list)
        _items = []
        if self.notification_configs:
            for _item_notification_configs in self.notification_configs:
                if _item_notification_configs:
                    _items.append(_item_notification_configs.to_dict())
            _dict['notificationConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of parser_config
        if self.parser_config:
            _dict['parserConfig'] = self.parser_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Hl7V2Store from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "notificationConfigs": [Hl7V2NotificationConfig.from_dict(_item) for _item in obj["notificationConfigs"]] if obj.get("notificationConfigs") is not None else None,
            "parserConfig": ParserConfig.from_dict(obj["parserConfig"]) if obj.get("parserConfig") is not None else None,
            "rejectDuplicateMessage": obj.get("rejectDuplicateMessage")
        })
        return _obj



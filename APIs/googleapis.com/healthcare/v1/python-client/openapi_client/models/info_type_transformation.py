# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.character_mask_config import CharacterMaskConfig
from openapi_client.models.crypto_hash_config import CryptoHashConfig
from openapi_client.models.date_shift_config import DateShiftConfig
from typing import Optional, Set
from typing_extensions import Self

class InfoTypeTransformation(BaseModel):
    """
    A transformation to apply to text that is identified as a specific info_type.
    """ # noqa: E501
    character_mask_config: Optional[CharacterMaskConfig] = Field(default=None, alias="characterMaskConfig")
    crypto_hash_config: Optional[CryptoHashConfig] = Field(default=None, alias="cryptoHashConfig")
    date_shift_config: Optional[DateShiftConfig] = Field(default=None, alias="dateShiftConfig")
    info_types: Optional[List[StrictStr]] = Field(default=None, description="InfoTypes to apply this transformation to. If this is not specified, the transformation applies to any info_type.", alias="infoTypes")
    redact_config: Optional[Dict[str, Any]] = Field(default=None, description="Define how to redact sensitive values. Default behaviour is erase. For example, \"My name is Jane.\" becomes \"My name is .\"", alias="redactConfig")
    replace_with_info_type_config: Optional[Dict[str, Any]] = Field(default=None, description="When using the INSPECT_AND_TRANSFORM action, each match is replaced with the name of the info_type. For example, \"My name is Jane\" becomes \"My name is [PERSON_NAME].\" The TRANSFORM action is equivalent to redacting.", alias="replaceWithInfoTypeConfig")
    __properties: ClassVar[List[str]] = ["characterMaskConfig", "cryptoHashConfig", "dateShiftConfig", "infoTypes", "redactConfig", "replaceWithInfoTypeConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InfoTypeTransformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of character_mask_config
        if self.character_mask_config:
            _dict['characterMaskConfig'] = self.character_mask_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of crypto_hash_config
        if self.crypto_hash_config:
            _dict['cryptoHashConfig'] = self.crypto_hash_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_shift_config
        if self.date_shift_config:
            _dict['dateShiftConfig'] = self.date_shift_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InfoTypeTransformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "characterMaskConfig": CharacterMaskConfig.from_dict(obj["characterMaskConfig"]) if obj.get("characterMaskConfig") is not None else None,
            "cryptoHashConfig": CryptoHashConfig.from_dict(obj["cryptoHashConfig"]) if obj.get("cryptoHashConfig") is not None else None,
            "dateShiftConfig": DateShiftConfig.from_dict(obj["dateShiftConfig"]) if obj.get("dateShiftConfig") is not None else None,
            "infoTypes": obj.get("infoTypes"),
            "redactConfig": obj.get("redactConfig"),
            "replaceWithInfoTypeConfig": obj.get("replaceWithInfoTypeConfig")
        })
        return _obj



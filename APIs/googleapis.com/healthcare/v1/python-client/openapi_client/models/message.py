# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.parsed_data import ParsedData
from openapi_client.models.patient_id import PatientId
from openapi_client.models.schematized_data import SchematizedData
from typing import Optional, Set
from typing_extensions import Self

class Message(BaseModel):
    """
    A complete HL7v2 message. See [Introduction to HL7 Standards] (https://www.hl7.org/implement/standards/index.cfm?ref=common) for details on the standard.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The datetime when the message was created. Set by the server.", alias="createTime")
    data: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Required. Raw message bytes.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.")
    message_type: Optional[StrictStr] = Field(default=None, description="The message type for this message. MSH-9.1.", alias="messageType")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the Message, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`. Assigned by the server.")
    parsed_data: Optional[ParsedData] = Field(default=None, alias="parsedData")
    patient_ids: Optional[List[PatientId]] = Field(default=None, description="All patient IDs listed in the PID-2, PID-3, and PID-4 segments of this message.", alias="patientIds")
    schematized_data: Optional[SchematizedData] = Field(default=None, alias="schematizedData")
    send_facility: Optional[StrictStr] = Field(default=None, description="The hospital that this message came from. MSH-4.", alias="sendFacility")
    send_time: Optional[StrictStr] = Field(default=None, description="The datetime the sending application sent this message. MSH-7.", alias="sendTime")
    __properties: ClassVar[List[str]] = ["createTime", "data", "labels", "messageType", "name", "parsedData", "patientIds", "schematizedData", "sendFacility", "sendTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Message from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parsed_data
        if self.parsed_data:
            _dict['parsedData'] = self.parsed_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in patient_ids (list)
        _items = []
        if self.patient_ids:
            for _item_patient_ids in self.patient_ids:
                if _item_patient_ids:
                    _items.append(_item_patient_ids.to_dict())
            _dict['patientIds'] = _items
        # override the default output from pydantic by calling `to_dict()` of schematized_data
        if self.schematized_data:
            _dict['schematizedData'] = self.schematized_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Message from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "data": obj.get("data"),
            "labels": obj.get("labels"),
            "messageType": obj.get("messageType"),
            "name": obj.get("name"),
            "parsedData": ParsedData.from_dict(obj["parsedData"]) if obj.get("parsedData") is not None else None,
            "patientIds": [PatientId.from_dict(_item) for _item in obj["patientIds"]] if obj.get("patientIds") is not None else None,
            "schematizedData": SchematizedData.from_dict(obj["schematizedData"]) if obj.get("schematizedData") is not None else None,
            "sendFacility": obj.get("sendFacility"),
            "sendTime": obj.get("sendTime")
        })
        return _obj



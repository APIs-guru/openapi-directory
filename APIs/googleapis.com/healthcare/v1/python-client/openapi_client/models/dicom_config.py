# coding: utf-8

"""
    Cloud Healthcare API

    Manage, store, and access healthcare data in Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.tag_filter_list import TagFilterList
from typing import Optional, Set
from typing_extensions import Self

class DicomConfig(BaseModel):
    """
    Specifies the parameters needed for de-identification of DICOM stores.
    """ # noqa: E501
    filter_profile: Optional[StrictStr] = Field(default=None, description="Tag filtering profile that determines which tags to keep/remove.", alias="filterProfile")
    keep_list: Optional[TagFilterList] = Field(default=None, alias="keepList")
    remove_list: Optional[TagFilterList] = Field(default=None, alias="removeList")
    skip_id_redaction: Optional[StrictBool] = Field(default=None, description="If true, skip replacing StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID, and MediaStorageSOPInstanceUID and leave them untouched. The Cloud Healthcare API regenerates these UIDs by default based on the DICOM Standard's reasoning: \"Whilst these UIDs cannot be mapped directly to an individual out of context, given access to the original images, or to a database of the original images containing the UIDs, it would be possible to recover the individual's identity.\" http://dicom.nema.org/medical/dicom/current/output/chtml/part15/sect_E.3.9.html", alias="skipIdRedaction")
    __properties: ClassVar[List[str]] = ["filterProfile", "keepList", "removeList", "skipIdRedaction"]

    @field_validator('filter_profile')
    def filter_profile_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TAG_FILTER_PROFILE_UNSPECIFIED', 'MINIMAL_KEEP_LIST_PROFILE', 'ATTRIBUTE_CONFIDENTIALITY_BASIC_PROFILE', 'KEEP_ALL_PROFILE', 'DEIDENTIFY_TAG_CONTENTS']):
            raise ValueError("must be one of enum values ('TAG_FILTER_PROFILE_UNSPECIFIED', 'MINIMAL_KEEP_LIST_PROFILE', 'ATTRIBUTE_CONFIDENTIALITY_BASIC_PROFILE', 'KEEP_ALL_PROFILE', 'DEIDENTIFY_TAG_CONTENTS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DicomConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of keep_list
        if self.keep_list:
            _dict['keepList'] = self.keep_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remove_list
        if self.remove_list:
            _dict['removeList'] = self.remove_list.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DicomConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filterProfile": obj.get("filterProfile"),
            "keepList": TagFilterList.from_dict(obj["keepList"]) if obj.get("keepList") is not None else None,
            "removeList": TagFilterList.from_dict(obj["removeList"]) if obj.get("removeList") is not None else None,
            "skipIdRedaction": obj.get("skipIdRedaction")
        })
        return _obj



# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.search_request import SearchRequest

class TestSearchRequest(unittest.TestCase):
    """SearchRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchRequest:
        """Test SearchRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchRequest`
        """
        model = SearchRequest()
        if include_optional:
            return SearchRequest(
                context_attributes = [
                    openapi_client.models.context_attribute.ContextAttribute(
                        name = '', 
                        values = [
                            ''
                            ], )
                    ],
                data_source_restrictions = [
                    openapi_client.models.data_source_restriction.DataSourceRestriction(
                        filter_options = [
                            openapi_client.models.filter_options.FilterOptions(
                                filter = openapi_client.models.filter.Filter(
                                    composite_filter = openapi_client.models.composite_filter.CompositeFilter(
                                        logic_operator = 'AND', 
                                        sub_filters = [
                                            openapi_client.models.filter.Filter(
                                                value_filter = openapi_client.models.value_filter.ValueFilter(
                                                    operator_name = '', 
                                                    value = openapi_client.models.value.Value(
                                                        boolean_value = True, 
                                                        date_value = openapi_client.models.date.Date(
                                                            day = 56, 
                                                            month = 56, 
                                                            year = 56, ), 
                                                        double_value = 1.337, 
                                                        integer_value = '', 
                                                        string_value = '', 
                                                        timestamp_value = '', ), ), )
                                            ], ), 
                                    value_filter = openapi_client.models.value_filter.ValueFilter(
                                        operator_name = '', ), ), 
                                object_type = '', )
                            ], 
                        source = openapi_client.models.source.Source(
                            name = '', 
                            predefined_source = 'NONE', ), )
                    ],
                facet_options = [
                    openapi_client.models.facet_options.FacetOptions(
                        integer_faceting_options = openapi_client.models.integer_faceting_options.IntegerFacetingOptions(
                            integer_buckets = [
                                ''
                                ], ), 
                        num_facet_buckets = 56, 
                        object_type = '', 
                        operator_name = '', 
                        source_name = '', )
                    ],
                page_size = 56,
                query = '',
                query_interpretation_options = openapi_client.models.query_interpretation_options.QueryInterpretationOptions(
                    disable_nl_interpretation = True, 
                    disable_supplemental_results = True, 
                    enable_verbatim_mode = True, ),
                request_options = openapi_client.models.request_options.RequestOptions(
                    debug_options = openapi_client.models.debug_options.DebugOptions(
                        enable_debugging = True, ), 
                    language_code = '', 
                    search_application_id = '', 
                    time_zone = '', ),
                sort_options = openapi_client.models.sort_options.SortOptions(
                    operator_name = '', 
                    sort_order = 'ASCENDING', ),
                start = 56
            )
        else:
            return SearchRequest(
        )
        """

    def testSearchRequest(self):
        """Test SearchRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

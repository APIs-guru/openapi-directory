# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.search_response import SearchResponse

class TestSearchResponse(unittest.TestCase):
    """SearchResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchResponse:
        """Test SearchResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchResponse`
        """
        model = SearchResponse()
        if include_optional:
            return SearchResponse(
                debug_info = openapi_client.models.response_debug_info.ResponseDebugInfo(
                    formatted_debug_info = '', ),
                error_info = openapi_client.models.error_info.ErrorInfo(
                    error_messages = [
                        openapi_client.models.error_message.ErrorMessage(
                            error_message = '', 
                            source = openapi_client.models.source.Source(
                                name = '', 
                                predefined_source = 'NONE', ), )
                        ], ),
                facet_results = [
                    openapi_client.models.facet_result.FacetResult(
                        buckets = [
                            openapi_client.models.facet_bucket.FacetBucket(
                                count = 56, 
                                filter = openapi_client.models.filter.Filter(
                                    composite_filter = openapi_client.models.composite_filter.CompositeFilter(
                                        logic_operator = 'AND', 
                                        sub_filters = [
                                            openapi_client.models.filter.Filter(
                                                value_filter = openapi_client.models.value_filter.ValueFilter(
                                                    operator_name = '', 
                                                    value = openapi_client.models.value.Value(
                                                        boolean_value = True, 
                                                        date_value = openapi_client.models.date.Date(
                                                            day = 56, 
                                                            month = 56, 
                                                            year = 56, ), 
                                                        double_value = 1.337, 
                                                        integer_value = '', 
                                                        string_value = '', 
                                                        timestamp_value = '', ), ), )
                                            ], ), 
                                    value_filter = openapi_client.models.value_filter.ValueFilter(
                                        operator_name = '', ), ), 
                                percentage = 56, 
                                value = openapi_client.models.value.Value(
                                    boolean_value = True, 
                                    double_value = 1.337, 
                                    integer_value = '', 
                                    string_value = '', 
                                    timestamp_value = '', ), )
                            ], 
                        object_type = '', 
                        operator_name = '', 
                        source_name = '', )
                    ],
                has_more_results = True,
                query_interpretation = openapi_client.models.query_interpretation.QueryInterpretation(
                    interpretation_type = 'NONE', 
                    interpreted_query = '', 
                    reason = 'UNSPECIFIED', ),
                result_count_estimate = '',
                result_count_exact = '',
                result_counts = openapi_client.models.result_counts.ResultCounts(
                    source_result_counts = [
                        openapi_client.models.source_result_count.SourceResultCount(
                            has_more_results = True, 
                            result_count_estimate = '', 
                            result_count_exact = '', 
                            source = openapi_client.models.source.Source(
                                name = '', 
                                predefined_source = 'NONE', ), )
                        ], ),
                results = [
                    openapi_client.models.search_result.SearchResult(
                        clustered_results = [
                            openapi_client.models.search_result.SearchResult(
                                debug_info = openapi_client.models.result_debug_info.ResultDebugInfo(
                                    formatted_debug_info = '', ), 
                                metadata = openapi_client.models.metadata.Metadata(
                                    create_time = '', 
                                    display_options = openapi_client.models.result_display_metadata.ResultDisplayMetadata(
                                        metalines = [
                                            openapi_client.models.result_display_line.ResultDisplayLine(
                                                fields = [
                                                    openapi_client.models.result_display_field.ResultDisplayField(
                                                        label = '', 
                                                        operator_name = '', 
                                                        property = openapi_client.models.named_property.NamedProperty(
                                                            boolean_value = True, 
                                                            date_values = openapi_client.models.date_values.DateValues(
                                                                values = [
                                                                    openapi_client.models.date.Date(
                                                                        day = 56, 
                                                                        month = 56, 
                                                                        year = 56, )
                                                                    ], ), 
                                                            double_values = openapi_client.models.double_values.DoubleValues(), 
                                                            enum_values = openapi_client.models.enum_values.EnumValues(), 
                                                            html_values = openapi_client.models.html_values.HtmlValues(), 
                                                            integer_values = openapi_client.models.integer_values.IntegerValues(), 
                                                            name = '', 
                                                            object_values = openapi_client.models.object_values.ObjectValues(), 
                                                            text_values = openapi_client.models.text_values.TextValues(), 
                                                            timestamp_values = openapi_client.models.timestamp_values.TimestampValues(), ), )
                                                    ], )
                                            ], 
                                        object_type_label = '', ), 
                                    fields = [
                                        openapi_client.models.named_property.NamedProperty(
                                            boolean_value = True, 
                                            name = '', )
                                        ], 
                                    mime_type = '', 
                                    object_type = '', 
                                    owner = openapi_client.models.person.Person(
                                        email_addresses = [
                                            openapi_client.models.email_address.EmailAddress(
                                                custom_type = '', 
                                                email_address = '', 
                                                email_url = '', 
                                                primary = True, 
                                                type = '', )
                                            ], 
                                        name = '', 
                                        obfuscated_id = '', 
                                        person_names = [
                                            openapi_client.models.name.Name(
                                                display_name = '', )
                                            ], 
                                        phone_numbers = [
                                            openapi_client.models.phone_number.PhoneNumber(
                                                phone_number = '', 
                                                type = 'OTHER', )
                                            ], 
                                        photos = [
                                            openapi_client.models.photo.Photo(
                                                url = '', )
                                            ], ), 
                                    source = openapi_client.models.source.Source(
                                        name = '', 
                                        predefined_source = 'NONE', ), 
                                    thumbnail_url = '', 
                                    update_time = '', ), 
                                snippet = openapi_client.models.snippet.Snippet(
                                    match_ranges = [
                                        openapi_client.models.match_range.MatchRange(
                                            end = 56, 
                                            start = 56, )
                                        ], ), 
                                title = '', 
                                url = '', )
                            ], 
                        debug_info = openapi_client.models.result_debug_info.ResultDebugInfo(
                            formatted_debug_info = '', ), 
                        metadata = openapi_client.models.metadata.Metadata(
                            create_time = '', 
                            mime_type = '', 
                            object_type = '', 
                            thumbnail_url = '', 
                            update_time = '', ), 
                        snippet = openapi_client.models.snippet.Snippet(), 
                        title = '', 
                        url = '', )
                    ],
                spell_results = [
                    openapi_client.models.spell_result.SpellResult(
                        suggested_query = '', 
                        suggested_query_html = openapi_client.models.safe_html_proto.SafeHtmlProto(
                            private_do_not_access_or_else_safe_html_wrapped_value = '', ), 
                        suggestion_type = 'SUGGESTION_TYPE_UNSPECIFIED', )
                    ],
                structured_results = [
                    openapi_client.models.structured_result.StructuredResult(
                        person = openapi_client.models.person.Person(
                            email_addresses = [
                                openapi_client.models.email_address.EmailAddress(
                                    custom_type = '', 
                                    email_address = '', 
                                    email_url = '', 
                                    primary = True, 
                                    type = '', )
                                ], 
                            name = '', 
                            obfuscated_id = '', 
                            person_names = [
                                openapi_client.models.name.Name(
                                    display_name = '', )
                                ], 
                            phone_numbers = [
                                openapi_client.models.phone_number.PhoneNumber(
                                    phone_number = '', 
                                    type = 'OTHER', )
                                ], 
                            photos = [
                                openapi_client.models.photo.Photo(
                                    url = '', )
                                ], ), )
                    ]
            )
        else:
            return SearchResponse(
        )
        """

    def testSearchResponse(self):
        """Test SearchResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.model_schema import ModelSchema

class TestModelSchema(unittest.TestCase):
    """ModelSchema unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ModelSchema:
        """Test ModelSchema
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ModelSchema`
        """
        model = ModelSchema()
        if include_optional:
            return ModelSchema(
                object_definitions = [
                    openapi_client.models.object_definition.ObjectDefinition(
                        name = '', 
                        options = openapi_client.models.object_options.ObjectOptions(
                            display_options = openapi_client.models.object_display_options.ObjectDisplayOptions(
                                metalines = [
                                    openapi_client.models.metaline.Metaline(
                                        properties = [
                                            openapi_client.models.displayed_property.DisplayedProperty(
                                                property_name = '', )
                                            ], )
                                    ], 
                                object_display_label = '', ), 
                            freshness_options = openapi_client.models.freshness_options.FreshnessOptions(
                                freshness_duration = '', 
                                freshness_property = '', ), 
                            suggestion_filtering_operators = [
                                ''
                                ], ), 
                        property_definitions = [
                            openapi_client.models.property_definition.PropertyDefinition(
                                boolean_property_options = openapi_client.models.boolean_property_options.BooleanPropertyOptions(
                                    operator_options = openapi_client.models.boolean_operator_options.BooleanOperatorOptions(
                                        operator_name = '', ), ), 
                                date_property_options = openapi_client.models.date_property_options.DatePropertyOptions(), 
                                double_property_options = openapi_client.models.double_property_options.DoublePropertyOptions(), 
                                enum_property_options = openapi_client.models.enum_property_options.EnumPropertyOptions(
                                    ordered_ranking = 'NO_ORDER', 
                                    possible_values = [
                                        openapi_client.models.enum_value_pair.EnumValuePair(
                                            integer_value = 56, 
                                            string_value = '', )
                                        ], ), 
                                html_property_options = openapi_client.models.html_property_options.HtmlPropertyOptions(
                                    retrieval_importance = openapi_client.models.retrieval_importance.RetrievalImportance(
                                        importance = 'DEFAULT', ), ), 
                                integer_property_options = openapi_client.models.integer_property_options.IntegerPropertyOptions(
                                    integer_faceting_options = openapi_client.models.integer_faceting_options.IntegerFacetingOptions(
                                        integer_buckets = [
                                            ''
                                            ], ), 
                                    maximum_value = '', 
                                    minimum_value = '', 
                                    ordered_ranking = 'NO_ORDER', ), 
                                is_facetable = True, 
                                is_repeatable = True, 
                                is_returnable = True, 
                                is_sortable = True, 
                                is_suggestable = True, 
                                is_wildcard_searchable = True, 
                                name = '', 
                                object_property_options = openapi_client.models.object_property_options.ObjectPropertyOptions(
                                    subobject_properties = [
                                        openapi_client.models.property_definition.PropertyDefinition(
                                            is_facetable = True, 
                                            is_repeatable = True, 
                                            is_returnable = True, 
                                            is_sortable = True, 
                                            is_suggestable = True, 
                                            is_wildcard_searchable = True, 
                                            name = '', 
                                            text_property_options = openapi_client.models.text_property_options.TextPropertyOptions(), 
                                            timestamp_property_options = openapi_client.models.timestamp_property_options.TimestampPropertyOptions(), )
                                        ], ), 
                                text_property_options = openapi_client.models.text_property_options.TextPropertyOptions(), 
                                timestamp_property_options = openapi_client.models.timestamp_property_options.TimestampPropertyOptions(), )
                            ], )
                    ],
                operation_ids = [
                    ''
                    ]
            )
        else:
            return ModelSchema(
        )
        """

    def testModelSchema(self):
        """Test ModelSchema"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

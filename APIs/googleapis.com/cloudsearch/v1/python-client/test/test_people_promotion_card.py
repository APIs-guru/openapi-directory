# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.people_promotion_card import PeoplePromotionCard

class TestPeoplePromotionCard(unittest.TestCase):
    """PeoplePromotionCard unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PeoplePromotionCard:
        """Test PeoplePromotionCard
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PeoplePromotionCard`
        """
        model = PeoplePromotionCard()
        if include_optional:
            return PeoplePromotionCard(
                people = [
                    openapi_client.models.person_core.PersonCore(
                        address_me_as = '', 
                        admin_to = [
                            openapi_client.models.person_core.PersonCore(
                                address_me_as = '', 
                                admins = [
                                    
                                    ], 
                                availability_status = 'UNKNOWN', 
                                birthday = openapi_client.models.date.Date(
                                    day = 56, 
                                    month = 56, 
                                    year = 56, ), 
                                calendar_url = openapi_client.models.safe_url_proto.SafeUrlProto(
                                    private_do_not_access_or_else_safe_url_wrapped_value = '', ), 
                                chat_url = openapi_client.models.safe_url_proto.SafeUrlProto(
                                    private_do_not_access_or_else_safe_url_wrapped_value = '', ), 
                                cost_center = '', 
                                department = '', 
                                direct_reports = [
                                    
                                    ], 
                                dotted_line_managers = [
                                    
                                    ], 
                                dotted_line_reports = [
                                    
                                    ], 
                                emails = [
                                    ''
                                    ], 
                                employee_id = '', 
                                fingerprint = '', 
                                fte_permille = '', 
                                geo_location = openapi_client.models.map_info.MapInfo(
                                    lat = 1.337, 
                                    location_url = , 
                                    long = 1.337, 
                                    map_tile = [
                                        openapi_client.models.map_tile.MapTile(
                                            image_url = , 
                                            tile_x = 1.337, 
                                            tile_y = 1.337, )
                                        ], 
                                    zoom = 56, ), 
                                gmail_url = '', 
                                job_title = '', 
                                keyword_types = [
                                    ''
                                    ], 
                                keywords = {
                                    'key' : ''
                                    }, 
                                links = [
                                    openapi_client.models.enterprise_topaz_frontend_teams_link.EnterpriseTopazFrontendTeamsLink(
                                        type = '', 
                                        url = , )
                                    ], 
                                location = '', 
                                managers = [
                                    
                                    ], 
                                mission = '', 
                                name = '', 
                                office_location = '', 
                                person_id = '', 
                                phone_numbers = [
                                    openapi_client.models.enterprise_topaz_frontend_teams_person_core_phone_number.EnterpriseTopazFrontendTeamsPersonCorePhoneNumber(
                                        phone_number = '', 
                                        phone_url = , 
                                        type = 'UNKNOWN', )
                                    ], 
                                photo_url = , 
                                postal_address = '', 
                                total_direct_reports_count = 56, 
                                total_dlr_count = 56, 
                                total_fte_count = '', 
                                username = '', 
                                waldo_come_back_time = '', )
                            ], 
                        admins = [
                            
                            ], 
                        availability_status = 'UNKNOWN', 
                        birthday = openapi_client.models.date.Date(
                            day = 56, 
                            month = 56, 
                            year = 56, ), 
                        calendar_url = , 
                        chat_url = , 
                        cost_center = '', 
                        department = '', 
                        direct_reports = [
                            
                            ], 
                        dotted_line_managers = [
                            
                            ], 
                        dotted_line_reports = [
                            
                            ], 
                        emails = [
                            ''
                            ], 
                        employee_id = '', 
                        fingerprint = '', 
                        fte_permille = '', 
                        geo_location = openapi_client.models.map_info.MapInfo(
                            lat = 1.337, 
                            long = 1.337, 
                            zoom = 56, ), 
                        gmail_url = '', 
                        job_title = '', 
                        keyword_types = [
                            ''
                            ], 
                        keywords = {
                            'key' : ''
                            }, 
                        links = [
                            openapi_client.models.enterprise_topaz_frontend_teams_link.EnterpriseTopazFrontendTeamsLink(
                                type = '', )
                            ], 
                        location = '', 
                        managers = [
                            
                            ], 
                        mission = '', 
                        name = '', 
                        office_location = '', 
                        person_id = '', 
                        phone_numbers = [
                            openapi_client.models.enterprise_topaz_frontend_teams_person_core_phone_number.EnterpriseTopazFrontendTeamsPersonCorePhoneNumber(
                                phone_number = '', 
                                type = 'UNKNOWN', )
                            ], 
                        photo_url = , 
                        postal_address = '', 
                        total_direct_reports_count = 56, 
                        total_dlr_count = 56, 
                        total_fte_count = '', 
                        username = '', 
                        waldo_come_back_time = '', )
                    ]
            )
        else:
            return PeoplePromotionCard(
        )
        """

    def testPeoplePromotionCard(self):
        """Test PeoplePromotionCard"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

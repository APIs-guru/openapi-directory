# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.enterprise_topaz_sidekick_find_meeting_time_card_proto import EnterpriseTopazSidekickFindMeetingTimeCardProto

class TestEnterpriseTopazSidekickFindMeetingTimeCardProto(unittest.TestCase):
    """EnterpriseTopazSidekickFindMeetingTimeCardProto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EnterpriseTopazSidekickFindMeetingTimeCardProto:
        """Test EnterpriseTopazSidekickFindMeetingTimeCardProto
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EnterpriseTopazSidekickFindMeetingTimeCardProto`
        """
        model = EnterpriseTopazSidekickFindMeetingTimeCardProto()
        if include_optional:
            return EnterpriseTopazSidekickFindMeetingTimeCardProto(
                common_available_time_slots = [
                    openapi_client.models.enterprise_topaz_sidekick_time_slot.EnterpriseTopazSidekickTimeSlot(
                        end_time_day = '', 
                        end_time_hour_and_minute = '', 
                        end_time_in_millis = '', 
                        start_time_day = '', 
                        start_time_hour_and_minute = '', 
                        start_time_in_millis = '', )
                    ],
                invitees = [
                    openapi_client.models.enterprise_topaz_sidekick_person.EnterpriseTopazSidekickPerson(
                        affinity_level = 'UNKNOWN', 
                        attending_status = 'AWAITING', 
                        email = '', 
                        gaia_id = '', 
                        is_group = True, 
                        name = '', 
                        obfuscated_gaia_id = '', 
                        photo_url = '', )
                    ],
                requester = openapi_client.models.enterprise_topaz_sidekick_person.EnterpriseTopazSidekickPerson(
                    affinity_level = 'UNKNOWN', 
                    attending_status = 'AWAITING', 
                    email = '', 
                    gaia_id = '', 
                    is_group = True, 
                    name = '', 
                    obfuscated_gaia_id = '', 
                    photo_url = '', ),
                scheduled_meeting = openapi_client.models.enterprise_topaz_sidekick_scheduled_meeting.EnterpriseTopazSidekickScheduledMeeting(
                    meeting_location = '', 
                    meeting_time = openapi_client.models.enterprise_topaz_sidekick_time_slot.EnterpriseTopazSidekickTimeSlot(
                        end_time_day = '', 
                        end_time_hour_and_minute = '', 
                        end_time_in_millis = '', 
                        start_time_day = '', 
                        start_time_hour_and_minute = '', 
                        start_time_in_millis = '', ), 
                    meeting_title = '', ),
                skipped_invitees = [
                    openapi_client.models.enterprise_topaz_sidekick_person.EnterpriseTopazSidekickPerson(
                        affinity_level = 'UNKNOWN', 
                        attending_status = 'AWAITING', 
                        email = '', 
                        gaia_id = '', 
                        is_group = True, 
                        name = '', 
                        obfuscated_gaia_id = '', 
                        photo_url = '', )
                    ],
                time_boundaries = openapi_client.models.enterprise_topaz_sidekick_time_slot.EnterpriseTopazSidekickTimeSlot(
                    end_time_day = '', 
                    end_time_hour_and_minute = '', 
                    end_time_in_millis = '', 
                    start_time_day = '', 
                    start_time_hour_and_minute = '', 
                    start_time_in_millis = '', ),
                timezone_id = ''
            )
        else:
            return EnterpriseTopazSidekickFindMeetingTimeCardProto(
        )
        """

    def testEnterpriseTopazSidekickFindMeetingTimeCardProto(self):
        """Test EnterpriseTopazSidekickFindMeetingTimeCardProto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

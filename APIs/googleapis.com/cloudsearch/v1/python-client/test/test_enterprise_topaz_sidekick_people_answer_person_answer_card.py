# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.enterprise_topaz_sidekick_people_answer_person_answer_card import EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard

class TestEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard(unittest.TestCase):
    """EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard:
        """Test EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard`
        """
        model = EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard()
        if include_optional:
            return EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard(
                answer = [
                    openapi_client.models.safe_html_proto.SafeHtmlProto(
                        private_do_not_access_or_else_safe_html_wrapped_value = '', )
                    ],
                answer_text = openapi_client.models.enterprise_topaz_sidekick_answer_answer_list.EnterpriseTopazSidekickAnswerAnswerList(
                    labeled_answer = [
                        openapi_client.models.enterprise_topaz_sidekick_answer_answer_list_labeled_answer.EnterpriseTopazSidekickAnswerAnswerListLabeledAnswer(
                            answer = '', 
                            label = '', )
                        ], 
                    type = 'UNKNOWN', ),
                disambiguation_info = openapi_client.models.enterprise_topaz_sidekick_people_answer_disambiguation_info.EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo(
                    disambiguation = [
                        openapi_client.models.enterprise_topaz_sidekick_people_answer_disambiguation_info_disambiguation_person.EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson(
                            person = openapi_client.models.enterprise_topaz_sidekick_common_person.EnterpriseTopazSidekickCommonPerson(
                                birthday = openapi_client.models.enterprise_topaz_sidekick_common_person_birthday.EnterpriseTopazSidekickCommonPersonBirthday(
                                    value = '', ), 
                                cell_phone = '', 
                                department = '', 
                                desk_location = '', 
                                desk_phone = '', 
                                display_name = '', 
                                email = '', 
                                family_name = '', 
                                full_address = '', 
                                gaia_id = '', 
                                given_name = '', 
                                job_title = '', 
                                manager = openapi_client.models.enterprise_topaz_sidekick_common_person.EnterpriseTopazSidekickCommonPerson(
                                    cell_phone = '', 
                                    department = '', 
                                    desk_location = '', 
                                    desk_phone = '', 
                                    display_name = '', 
                                    email = '', 
                                    family_name = '', 
                                    full_address = '', 
                                    gaia_id = '', 
                                    given_name = '', 
                                    job_title = '', 
                                    obfuscated_id = '', 
                                    photo_url = '', 
                                    street_address = '', ), 
                                obfuscated_id = '', 
                                photo_url = '', 
                                street_address = '', ), 
                            query = '', )
                        ], 
                    name = '', ),
                header = openapi_client.models.enterprise_topaz_sidekick_people_answer_people_answer_card_header.EnterpriseTopazSidekickPeopleAnswerPeopleAnswerCardHeader(
                    title = '', ),
                response_status = 'UNKNOWN',
                status_message = '',
                subject = openapi_client.models.enterprise_topaz_sidekick_common_person.EnterpriseTopazSidekickCommonPerson(
                    birthday = openapi_client.models.enterprise_topaz_sidekick_common_person_birthday.EnterpriseTopazSidekickCommonPersonBirthday(
                        value = '', ), 
                    cell_phone = '', 
                    department = '', 
                    desk_location = '', 
                    desk_phone = '', 
                    display_name = '', 
                    email = '', 
                    family_name = '', 
                    full_address = '', 
                    gaia_id = '', 
                    given_name = '', 
                    job_title = '', 
                    manager = openapi_client.models.enterprise_topaz_sidekick_common_person.EnterpriseTopazSidekickCommonPerson(
                        cell_phone = '', 
                        department = '', 
                        desk_location = '', 
                        desk_phone = '', 
                        display_name = '', 
                        email = '', 
                        family_name = '', 
                        full_address = '', 
                        gaia_id = '', 
                        given_name = '', 
                        job_title = '', 
                        obfuscated_id = '', 
                        photo_url = '', 
                        street_address = '', ), 
                    obfuscated_id = '', 
                    photo_url = '', 
                    street_address = '', )
            )
        else:
            return EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard(
        )
        """

    def testEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard(self):
        """Test EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

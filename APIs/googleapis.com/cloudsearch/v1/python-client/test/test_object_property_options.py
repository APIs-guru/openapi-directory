# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.object_property_options import ObjectPropertyOptions

class TestObjectPropertyOptions(unittest.TestCase):
    """ObjectPropertyOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ObjectPropertyOptions:
        """Test ObjectPropertyOptions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ObjectPropertyOptions`
        """
        model = ObjectPropertyOptions()
        if include_optional:
            return ObjectPropertyOptions(
                subobject_properties = [
                    openapi_client.models.property_definition.PropertyDefinition(
                        boolean_property_options = openapi_client.models.boolean_property_options.BooleanPropertyOptions(
                            operator_options = openapi_client.models.boolean_operator_options.BooleanOperatorOptions(
                                operator_name = '', ), ), 
                        date_property_options = openapi_client.models.date_property_options.DatePropertyOptions(), 
                        display_options = openapi_client.models.property_display_options.PropertyDisplayOptions(
                            display_label = '', ), 
                        double_property_options = openapi_client.models.double_property_options.DoublePropertyOptions(), 
                        enum_property_options = openapi_client.models.enum_property_options.EnumPropertyOptions(
                            ordered_ranking = 'NO_ORDER', 
                            possible_values = [
                                openapi_client.models.enum_value_pair.EnumValuePair(
                                    integer_value = 56, 
                                    string_value = '', )
                                ], ), 
                        html_property_options = openapi_client.models.html_property_options.HtmlPropertyOptions(
                            retrieval_importance = openapi_client.models.retrieval_importance.RetrievalImportance(
                                importance = 'DEFAULT', ), ), 
                        integer_property_options = openapi_client.models.integer_property_options.IntegerPropertyOptions(
                            integer_faceting_options = openapi_client.models.integer_faceting_options.IntegerFacetingOptions(
                                integer_buckets = [
                                    ''
                                    ], ), 
                            maximum_value = '', 
                            minimum_value = '', 
                            ordered_ranking = 'NO_ORDER', ), 
                        is_facetable = True, 
                        is_repeatable = True, 
                        is_returnable = True, 
                        is_sortable = True, 
                        is_suggestable = True, 
                        is_wildcard_searchable = True, 
                        name = '', 
                        object_property_options = openapi_client.models.object_property_options.ObjectPropertyOptions(), 
                        text_property_options = openapi_client.models.text_property_options.TextPropertyOptions(), 
                        timestamp_property_options = openapi_client.models.timestamp_property_options.TimestampPropertyOptions(), )
                    ]
            )
        else:
            return ObjectPropertyOptions(
        )
        """

    def testObjectPropertyOptions(self):
        """Test ObjectPropertyOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

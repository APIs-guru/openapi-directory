# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.metadata import Metadata

class TestMetadata(unittest.TestCase):
    """Metadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Metadata:
        """Test Metadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Metadata`
        """
        model = Metadata()
        if include_optional:
            return Metadata(
                create_time = '',
                display_options = openapi_client.models.result_display_metadata.ResultDisplayMetadata(
                    metalines = [
                        openapi_client.models.result_display_line.ResultDisplayLine(
                            fields = [
                                openapi_client.models.result_display_field.ResultDisplayField(
                                    label = '', 
                                    operator_name = '', 
                                    property = openapi_client.models.named_property.NamedProperty(
                                        boolean_value = True, 
                                        date_values = openapi_client.models.date_values.DateValues(
                                            values = [
                                                openapi_client.models.date.Date(
                                                    day = 56, 
                                                    month = 56, 
                                                    year = 56, )
                                                ], ), 
                                        double_values = openapi_client.models.double_values.DoubleValues(), 
                                        enum_values = openapi_client.models.enum_values.EnumValues(), 
                                        html_values = openapi_client.models.html_values.HtmlValues(), 
                                        integer_values = openapi_client.models.integer_values.IntegerValues(), 
                                        name = '', 
                                        object_values = openapi_client.models.object_values.ObjectValues(), 
                                        text_values = openapi_client.models.text_values.TextValues(), 
                                        timestamp_values = openapi_client.models.timestamp_values.TimestampValues(), ), )
                                ], )
                        ], 
                    object_type_label = '', ),
                fields = [
                    openapi_client.models.named_property.NamedProperty(
                        boolean_value = True, 
                        date_values = openapi_client.models.date_values.DateValues(
                            values = [
                                openapi_client.models.date.Date(
                                    day = 56, 
                                    month = 56, 
                                    year = 56, )
                                ], ), 
                        double_values = openapi_client.models.double_values.DoubleValues(), 
                        enum_values = openapi_client.models.enum_values.EnumValues(), 
                        html_values = openapi_client.models.html_values.HtmlValues(), 
                        integer_values = openapi_client.models.integer_values.IntegerValues(), 
                        name = '', 
                        object_values = openapi_client.models.object_values.ObjectValues(), 
                        text_values = openapi_client.models.text_values.TextValues(), 
                        timestamp_values = openapi_client.models.timestamp_values.TimestampValues(), )
                    ],
                mime_type = '',
                object_type = '',
                owner = openapi_client.models.person.Person(
                    email_addresses = [
                        openapi_client.models.email_address.EmailAddress(
                            custom_type = '', 
                            email_address = '', 
                            email_url = '', 
                            primary = True, 
                            type = '', )
                        ], 
                    name = '', 
                    obfuscated_id = '', 
                    person_names = [
                        openapi_client.models.name.Name(
                            display_name = '', )
                        ], 
                    phone_numbers = [
                        openapi_client.models.phone_number.PhoneNumber(
                            phone_number = '', 
                            type = 'OTHER', )
                        ], 
                    photos = [
                        openapi_client.models.photo.Photo(
                            url = '', )
                        ], ),
                source = openapi_client.models.source.Source(
                    name = '', 
                    predefined_source = 'NONE', ),
                thumbnail_url = '',
                update_time = ''
            )
        else:
            return Metadata(
        )
        """

    def testMetadata(self):
        """Test Metadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

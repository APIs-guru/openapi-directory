# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_items_response import ListItemsResponse

class TestListItemsResponse(unittest.TestCase):
    """ListItemsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListItemsResponse:
        """Test ListItemsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListItemsResponse`
        """
        model = ListItemsResponse()
        if include_optional:
            return ListItemsResponse(
                items = [
                    openapi_client.models.item.Item(
                        acl = openapi_client.models.item_acl.ItemAcl(
                            acl_inheritance_type = 'NOT_APPLICABLE', 
                            denied_readers = [
                                openapi_client.models.principal.Principal(
                                    group_resource_name = '', 
                                    gsuite_principal = openapi_client.models.g_suite_principal.GSuitePrincipal(
                                        gsuite_domain = True, 
                                        gsuite_group_email = '', 
                                        gsuite_user_email = '', ), 
                                    user_resource_name = '', )
                                ], 
                            inherit_acl_from = '', 
                            owners = [
                                openapi_client.models.principal.Principal(
                                    group_resource_name = '', 
                                    user_resource_name = '', )
                                ], 
                            readers = [
                                
                                ], ), 
                        content = openapi_client.models.item_content.ItemContent(
                            content_data_ref = openapi_client.models.upload_item_ref.UploadItemRef(
                                name = '', ), 
                            content_format = 'UNSPECIFIED', 
                            hash = '', 
                            inline_content = 'YQ==', ), 
                        item_type = 'UNSPECIFIED', 
                        metadata = openapi_client.models.item_metadata.ItemMetadata(
                            container_name = '', 
                            content_language = '', 
                            context_attributes = [
                                openapi_client.models.context_attribute.ContextAttribute(
                                    name = '', 
                                    values = [
                                        ''
                                        ], )
                                ], 
                            create_time = '', 
                            hash = '', 
                            interactions = [
                                openapi_client.models.interaction.Interaction(
                                    interaction_time = '', 
                                    principal = , 
                                    type = 'UNSPECIFIED', )
                                ], 
                            keywords = [
                                ''
                                ], 
                            mime_type = '', 
                            object_type = '', 
                            search_quality_metadata = openapi_client.models.search_quality_metadata.SearchQualityMetadata(
                                quality = 1.337, ), 
                            source_repository_url = '', 
                            title = '', 
                            update_time = '', ), 
                        name = '', 
                        payload = 'YQ==', 
                        queue = '', 
                        status = openapi_client.models.item_status.ItemStatus(
                            code = 'CODE_UNSPECIFIED', 
                            processing_errors = [
                                openapi_client.models.processing_error.ProcessingError(
                                    code = 'PROCESSING_ERROR_CODE_UNSPECIFIED', 
                                    error_message = '', 
                                    field_violations = [
                                        openapi_client.models.field_violation.FieldViolation(
                                            description = '', 
                                            field = '', )
                                        ], )
                                ], 
                            repository_errors = [
                                openapi_client.models.repository_error.RepositoryError(
                                    error_message = '', 
                                    http_status_code = 56, 
                                    type = 'UNKNOWN', )
                                ], ), 
                        structured_data = openapi_client.models.item_structured_data.ItemStructuredData(
                            hash = '', 
                            object = openapi_client.models.structured_data_object.StructuredDataObject(
                                properties = [
                                    openapi_client.models.named_property.NamedProperty(
                                        boolean_value = True, 
                                        date_values = openapi_client.models.date_values.DateValues(), 
                                        double_values = openapi_client.models.double_values.DoubleValues(), 
                                        enum_values = openapi_client.models.enum_values.EnumValues(), 
                                        html_values = openapi_client.models.html_values.HtmlValues(), 
                                        integer_values = openapi_client.models.integer_values.IntegerValues(), 
                                        name = '', 
                                        object_values = openapi_client.models.object_values.ObjectValues(), 
                                        text_values = openapi_client.models.text_values.TextValues(), 
                                        timestamp_values = openapi_client.models.timestamp_values.TimestampValues(), )
                                    ], ), ), 
                        version = 'YQ==', )
                    ],
                next_page_token = ''
            )
        else:
            return ListItemsResponse(
        )
        """

    def testListItemsResponse(self):
        """Test ListItemsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

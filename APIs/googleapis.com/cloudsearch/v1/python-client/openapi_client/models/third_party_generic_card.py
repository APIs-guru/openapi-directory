# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.content import Content
from openapi_client.models.context import Context
from typing import Optional, Set
from typing_extensions import Self

class ThirdPartyGenericCard(BaseModel):
    """
    ThirdPartyGenericCard
    """ # noqa: E501
    card_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the card.", alias="cardId")
    category: Optional[StrictStr] = Field(default=None, description="Category that the card belongs to.")
    content: Optional[Content] = None
    context: Optional[Context] = None
    is_dismissible: Optional[StrictBool] = Field(default=None, description="Whether the card can be dismissed.", alias="isDismissible")
    priority: Optional[StrictInt] = Field(default=None, description="Priority of the card, where 0 is the highest priority.")
    __properties: ClassVar[List[str]] = ["cardId", "category", "content", "context", "isDismissible", "priority"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ThirdPartyGenericCard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ThirdPartyGenericCard from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cardId": obj.get("cardId"),
            "category": obj.get("category"),
            "content": Content.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "context": Context.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "isDismissible": obj.get("isDismissible"),
            "priority": obj.get("priority")
        })
        return _obj



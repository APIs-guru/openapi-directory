# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class QueryInterpretation(BaseModel):
    """
    QueryInterpretation
    """ # noqa: E501
    interpretation_type: Optional[StrictStr] = Field(default=None, alias="interpretationType")
    interpreted_query: Optional[StrictStr] = Field(default=None, description="The interpretation of the query used in search. For example, queries with natural language intent like \"email from john\" will be interpreted as \"from:john source:mail\". This field will not be filled when the reason is NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY.", alias="interpretedQuery")
    reason: Optional[StrictStr] = Field(default=None, description="The reason for interpretation of the query. This field will not be UNSPECIFIED if the interpretation type is not NONE.")
    __properties: ClassVar[List[str]] = ["interpretationType", "interpretedQuery", "reason"]

    @field_validator('interpretation_type')
    def interpretation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'BLEND', 'REPLACE']):
            raise ValueError("must be one of enum values ('NONE', 'BLEND', 'REPLACE')")
        return value

    @field_validator('reason')
    def reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'QUERY_HAS_NATURAL_LANGUAGE_INTENT', 'NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'QUERY_HAS_NATURAL_LANGUAGE_INTENT', 'NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryInterpretation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryInterpretation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "interpretationType": obj.get("interpretationType"),
            "interpretedQuery": obj.get("interpretedQuery"),
            "reason": obj.get("reason")
        })
        return _obj



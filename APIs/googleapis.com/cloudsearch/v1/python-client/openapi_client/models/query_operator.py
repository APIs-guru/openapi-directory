# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class QueryOperator(BaseModel):
    """
    The definition of a operator that can be used in a Search/Suggest request.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="Display name of the operator", alias="displayName")
    enum_values: Optional[List[StrictStr]] = Field(default=None, description="Potential list of values for the opeatror field. This field is only filled when we can safely enumerate all the possible values of this operator.", alias="enumValues")
    greater_than_operator_name: Optional[StrictStr] = Field(default=None, description="Indicates the operator name that can be used to isolate the property using the greater-than operator.", alias="greaterThanOperatorName")
    is_facetable: Optional[StrictBool] = Field(default=None, description="Can this operator be used to get facets.", alias="isFacetable")
    is_repeatable: Optional[StrictBool] = Field(default=None, description="Indicates if multiple values can be set for this property.", alias="isRepeatable")
    is_returnable: Optional[StrictBool] = Field(default=None, description="Will the property associated with this facet be returned as part of search results.", alias="isReturnable")
    is_sortable: Optional[StrictBool] = Field(default=None, description="Can this operator be used to sort results.", alias="isSortable")
    is_suggestable: Optional[StrictBool] = Field(default=None, description="Can get suggestions for this field.", alias="isSuggestable")
    less_than_operator_name: Optional[StrictStr] = Field(default=None, description="Indicates the operator name that can be used to isolate the property using the less-than operator.", alias="lessThanOperatorName")
    object_type: Optional[StrictStr] = Field(default=None, description="The name of the object corresponding to the operator. This field is only filled for schema-specific operators, and is unset for common operators.", alias="objectType")
    operator_name: Optional[StrictStr] = Field(default=None, description="The name of the operator.", alias="operatorName")
    type: Optional[StrictStr] = Field(default=None, description="The type of the operator.")
    __properties: ClassVar[List[str]] = ["displayName", "enumValues", "greaterThanOperatorName", "isFacetable", "isRepeatable", "isReturnable", "isSortable", "isSuggestable", "lessThanOperatorName", "objectType", "operatorName", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'INTEGER', 'DOUBLE', 'TIMESTAMP', 'BOOLEAN', 'ENUM', 'DATE', 'TEXT', 'HTML']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'INTEGER', 'DOUBLE', 'TIMESTAMP', 'BOOLEAN', 'ENUM', 'DATE', 'TEXT', 'HTML')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryOperator from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryOperator from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "enumValues": obj.get("enumValues"),
            "greaterThanOperatorName": obj.get("greaterThanOperatorName"),
            "isFacetable": obj.get("isFacetable"),
            "isRepeatable": obj.get("isRepeatable"),
            "isReturnable": obj.get("isReturnable"),
            "isSortable": obj.get("isSortable"),
            "isSuggestable": obj.get("isSuggestable"),
            "lessThanOperatorName": obj.get("lessThanOperatorName"),
            "objectType": obj.get("objectType"),
            "operatorName": obj.get("operatorName"),
            "type": obj.get("type")
        })
        return _obj



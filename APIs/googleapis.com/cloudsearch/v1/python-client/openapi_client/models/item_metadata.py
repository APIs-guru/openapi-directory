# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.context_attribute import ContextAttribute
from openapi_client.models.interaction import Interaction
from openapi_client.models.search_quality_metadata import SearchQualityMetadata
from typing import Optional, Set
from typing_extensions import Self

class ItemMetadata(BaseModel):
    """
    Available metadata fields for the item.
    """ # noqa: E501
    container_name: Optional[StrictStr] = Field(default=None, description="The name of the container for this item. Deletion of the container item leads to automatic deletion of this item. Note: ACLs are not inherited from a container item. To provide ACL inheritance for an item, use the inheritAclFrom field. The maximum length is 1536 characters.", alias="containerName")
    content_language: Optional[StrictStr] = Field(default=None, description="The BCP-47 language code for the item, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. The maximum length is 32 characters.", alias="contentLanguage")
    context_attributes: Optional[List[ContextAttribute]] = Field(default=None, description="A set of named attributes associated with the item. This can be used for influencing the ranking of the item based on the context in the request. The maximum number of elements is 10.", alias="contextAttributes")
    create_time: Optional[StrictStr] = Field(default=None, description="The time when the item was created in the source repository.", alias="createTime")
    hash: Optional[StrictStr] = Field(default=None, description="Hashing value provided by the API caller. This can be used with the items.push method to calculate modified state. The maximum length is 2048 characters.")
    interactions: Optional[List[Interaction]] = Field(default=None, description="A list of interactions for the item. Interactions are used to improve Search quality, but are not exposed to end users. The maximum number of elements is 1000.")
    keywords: Optional[List[StrictStr]] = Field(default=None, description="Additional keywords or phrases that should match the item. Used internally for user generated content. The maximum number of elements is 100. The maximum length is 8192 characters.")
    mime_type: Optional[StrictStr] = Field(default=None, description="The original mime-type of ItemContent.content in the source repository. The maximum length is 256 characters.", alias="mimeType")
    object_type: Optional[StrictStr] = Field(default=None, description="The type of the item. This should correspond to the name of an object definition in the schema registered for the data source. For example, if the schema for the data source contains an object definition with name 'document', then item indexing requests for objects of that type should set objectType to 'document'. The maximum length is 256 characters.", alias="objectType")
    search_quality_metadata: Optional[SearchQualityMetadata] = Field(default=None, alias="searchQualityMetadata")
    source_repository_url: Optional[StrictStr] = Field(default=None, description="Link to the source repository serving the data. Seach results apply this link to the title. Whitespace or special characters may cause Cloud Seach result links to trigger a redirect notice; to avoid this, encode the URL. The maximum length is 2048 characters.", alias="sourceRepositoryUrl")
    title: Optional[StrictStr] = Field(default=None, description="The title of the item. If given, this will be the displayed title of the Search result. The maximum length is 2048 characters.")
    update_time: Optional[StrictStr] = Field(default=None, description="The time when the item was last modified in the source repository.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["containerName", "contentLanguage", "contextAttributes", "createTime", "hash", "interactions", "keywords", "mimeType", "objectType", "searchQualityMetadata", "sourceRepositoryUrl", "title", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in context_attributes (list)
        _items = []
        if self.context_attributes:
            for _item_context_attributes in self.context_attributes:
                if _item_context_attributes:
                    _items.append(_item_context_attributes.to_dict())
            _dict['contextAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in interactions (list)
        _items = []
        if self.interactions:
            for _item_interactions in self.interactions:
                if _item_interactions:
                    _items.append(_item_interactions.to_dict())
            _dict['interactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of search_quality_metadata
        if self.search_quality_metadata:
            _dict['searchQualityMetadata'] = self.search_quality_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containerName": obj.get("containerName"),
            "contentLanguage": obj.get("contentLanguage"),
            "contextAttributes": [ContextAttribute.from_dict(_item) for _item in obj["contextAttributes"]] if obj.get("contextAttributes") is not None else None,
            "createTime": obj.get("createTime"),
            "hash": obj.get("hash"),
            "interactions": [Interaction.from_dict(_item) for _item in obj["interactions"]] if obj.get("interactions") is not None else None,
            "keywords": obj.get("keywords"),
            "mimeType": obj.get("mimeType"),
            "objectType": obj.get("objectType"),
            "searchQualityMetadata": SearchQualityMetadata.from_dict(obj["searchQualityMetadata"]) if obj.get("searchQualityMetadata") is not None else None,
            "sourceRepositoryUrl": obj.get("sourceRepositoryUrl"),
            "title": obj.get("title"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



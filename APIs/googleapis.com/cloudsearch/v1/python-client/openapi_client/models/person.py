# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.email_address import EmailAddress
from openapi_client.models.name import Name
from openapi_client.models.phone_number import PhoneNumber
from openapi_client.models.photo import Photo
from typing import Optional, Set
from typing_extensions import Self

class Person(BaseModel):
    """
    Object to represent a person.
    """ # noqa: E501
    email_addresses: Optional[List[EmailAddress]] = Field(default=None, description="The person's email addresses", alias="emailAddresses")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the person to provide information about. See [`People.get`](https://developers.google.com/people/api/rest/v1/people/get) from the Google People API.")
    obfuscated_id: Optional[StrictStr] = Field(default=None, description="Obfuscated ID of a person.", alias="obfuscatedId")
    person_names: Optional[List[Name]] = Field(default=None, description="The person's name", alias="personNames")
    phone_numbers: Optional[List[PhoneNumber]] = Field(default=None, description="The person's phone numbers", alias="phoneNumbers")
    photos: Optional[List[Photo]] = Field(default=None, description="A person's read-only photo. A picture shown next to the person's name to help others recognize the person in search results.")
    __properties: ClassVar[List[str]] = ["emailAddresses", "name", "obfuscatedId", "personNames", "phoneNumbers", "photos"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Person from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in email_addresses (list)
        _items = []
        if self.email_addresses:
            for _item_email_addresses in self.email_addresses:
                if _item_email_addresses:
                    _items.append(_item_email_addresses.to_dict())
            _dict['emailAddresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in person_names (list)
        _items = []
        if self.person_names:
            for _item_person_names in self.person_names:
                if _item_person_names:
                    _items.append(_item_person_names.to_dict())
            _dict['personNames'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phone_numbers (list)
        _items = []
        if self.phone_numbers:
            for _item_phone_numbers in self.phone_numbers:
                if _item_phone_numbers:
                    _items.append(_item_phone_numbers.to_dict())
            _dict['phoneNumbers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in photos (list)
        _items = []
        if self.photos:
            for _item_photos in self.photos:
                if _item_photos:
                    _items.append(_item_photos.to_dict())
            _dict['photos'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Person from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "emailAddresses": [EmailAddress.from_dict(_item) for _item in obj["emailAddresses"]] if obj.get("emailAddresses") is not None else None,
            "name": obj.get("name"),
            "obfuscatedId": obj.get("obfuscatedId"),
            "personNames": [Name.from_dict(_item) for _item in obj["personNames"]] if obj.get("personNames") is not None else None,
            "phoneNumbers": [PhoneNumber.from_dict(_item) for _item in obj["phoneNumbers"]] if obj.get("phoneNumbers") is not None else None,
            "photos": [Photo.from_dict(_item) for _item in obj["photos"]] if obj.get("photos") is not None else None
        })
        return _obj



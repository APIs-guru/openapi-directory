# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseTopazSidekickRankingParams(BaseModel):
    """
    Ranking params.
    """ # noqa: E501
    end_time_ms: Optional[StrictStr] = Field(default=None, description="The end-time that this object will expect to occur. If the type is marked as FIXED, then this end-time will persist after bidding. If the type is marked as FLEXIBLE, this field is NOT expected to be filled and will be filled in after it has won a bid. Expected to be set when type is set to FIXED.", alias="endTimeMs")
    priority: Optional[StrictStr] = Field(default=None, description="The priority to determine between objects that have the same start_time_ms The lower-value of priority == ranked higher. Max-priority = 0. Expected to be set for all types.")
    score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The score of the card to be used to break priority-ties")
    span_ms: Optional[StrictStr] = Field(default=None, description="The span that this card will take in the stream Expected to be set when type is set to FLEXIBLE.", alias="spanMs")
    start_time_ms: Optional[StrictStr] = Field(default=None, description="The start-time that this object will bid-for If the type is marked as FIXED, then this start-time will persist after bidding. If the type is marked as FLEXIBLE, then it will occur at the given time or sometime after the requested time. Expected to be set for all types.", alias="startTimeMs")
    type: Optional[StrictStr] = Field(default=None, description="The packing type of this object.")
    __properties: ClassVar[List[str]] = ["endTimeMs", "priority", "score", "spanMs", "startTimeMs", "type"]

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'CRITICAL', 'IMPORTANT', 'HIGH', 'NORMAL', 'BEST_EFFORT']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'CRITICAL', 'IMPORTANT', 'HIGH', 'NORMAL', 'BEST_EFFORT')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FIXED', 'FLEXIBLE']):
            raise ValueError("must be one of enum values ('FIXED', 'FLEXIBLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickRankingParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickRankingParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTimeMs": obj.get("endTimeMs"),
            "priority": obj.get("priority"),
            "score": obj.get("score"),
            "spanMs": obj.get("spanMs"),
            "startTimeMs": obj.get("startTimeMs"),
            "type": obj.get("type")
        })
        return _obj



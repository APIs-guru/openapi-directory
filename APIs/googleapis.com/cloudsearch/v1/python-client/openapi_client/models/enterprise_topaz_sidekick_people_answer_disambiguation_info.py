# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_topaz_sidekick_people_answer_disambiguation_info_disambiguation_person import EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo(BaseModel):
    """
    Metadata for disambiguation.
    """ # noqa: E501
    disambiguation: Optional[List[EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson]] = Field(default=None, description="A list of people that also matched the query. This list is not complete.")
    name: Optional[StrictStr] = Field(default=None, description="The name that was extracted from the query. This may be in the form of the given name, last name, full name, LDAP, or email address. This name can be considered suitable for displaying to the user and can largely be considered to be normalized (e.g. \"Bob's\" -> \"Bob\").")
    __properties: ClassVar[List[str]] = ["disambiguation", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in disambiguation (list)
        _items = []
        if self.disambiguation:
            for _item_disambiguation in self.disambiguation:
                if _item_disambiguation:
                    _items.append(_item_disambiguation.to_dict())
            _dict['disambiguation'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disambiguation": [EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson.from_dict(_item) for _item in obj["disambiguation"]] if obj.get("disambiguation") is not None else None,
            "name": obj.get("name")
        })
        return _obj



# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_topaz_sidekick_document_per_category_list_document_per_category_list_entry import EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseTopazSidekickDocumentPerCategoryList(BaseModel):
    """
    EnterpriseTopazSidekickDocumentPerCategoryList
    """ # noqa: E501
    documents: Optional[List[EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry]] = None
    help_message: Optional[StrictStr] = Field(default=None, description="Localized message explaining how the documents were derived (e.g. from the last 30 days activity). This field is optional.", alias="helpMessage")
    list_type: Optional[StrictStr] = Field(default=None, alias="listType")
    list_type_description: Optional[StrictStr] = Field(default=None, description="Description of the types of documents present in the list.", alias="listTypeDescription")
    response_message: Optional[StrictStr] = Field(default=None, description="Response message in case no documents are present in the card.", alias="responseMessage")
    __properties: ClassVar[List[str]] = ["documents", "helpMessage", "listType", "listTypeDescription", "responseMessage"]

    @field_validator('list_type')
    def list_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_LIST_TYPE', 'MENTIONS', 'SHARES', 'NEEDS_ATTENTION', 'VIEWS', 'EDITS']):
            raise ValueError("must be one of enum values ('UNKNOWN_LIST_TYPE', 'MENTIONS', 'SHARES', 'NEEDS_ATTENTION', 'VIEWS', 'EDITS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickDocumentPerCategoryList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in documents (list)
        _items = []
        if self.documents:
            for _item_documents in self.documents:
                if _item_documents:
                    _items.append(_item_documents.to_dict())
            _dict['documents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickDocumentPerCategoryList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "documents": [EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry.from_dict(_item) for _item in obj["documents"]] if obj.get("documents") is not None else None,
            "helpMessage": obj.get("helpMessage"),
            "listType": obj.get("listType"),
            "listTypeDescription": obj.get("listTypeDescription"),
            "responseMessage": obj.get("responseMessage")
        })
        return _obj



# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.integer_faceting_options import IntegerFacetingOptions
from openapi_client.models.integer_operator_options import IntegerOperatorOptions
from typing import Optional, Set
from typing_extensions import Self

class IntegerPropertyOptions(BaseModel):
    """
    The options for integer properties.
    """ # noqa: E501
    integer_faceting_options: Optional[IntegerFacetingOptions] = Field(default=None, alias="integerFacetingOptions")
    maximum_value: Optional[StrictStr] = Field(default=None, description="The maximum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values greater than the maximum are accepted and ranked with the same weight as items indexed with the maximum value.", alias="maximumValue")
    minimum_value: Optional[StrictStr] = Field(default=None, description="The minimum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values less than the minimum are accepted and ranked with the same weight as items indexed with the minimum value.", alias="minimumValue")
    operator_options: Optional[IntegerOperatorOptions] = Field(default=None, alias="operatorOptions")
    ordered_ranking: Optional[StrictStr] = Field(default=None, description="Used to specify the ordered ranking for the integer. Can only be used if isRepeatable is false.", alias="orderedRanking")
    __properties: ClassVar[List[str]] = ["integerFacetingOptions", "maximumValue", "minimumValue", "operatorOptions", "orderedRanking"]

    @field_validator('ordered_ranking')
    def ordered_ranking_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NO_ORDER', 'ASCENDING', 'DESCENDING']):
            raise ValueError("must be one of enum values ('NO_ORDER', 'ASCENDING', 'DESCENDING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntegerPropertyOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of integer_faceting_options
        if self.integer_faceting_options:
            _dict['integerFacetingOptions'] = self.integer_faceting_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operator_options
        if self.operator_options:
            _dict['operatorOptions'] = self.operator_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntegerPropertyOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "integerFacetingOptions": IntegerFacetingOptions.from_dict(obj["integerFacetingOptions"]) if obj.get("integerFacetingOptions") is not None else None,
            "maximumValue": obj.get("maximumValue"),
            "minimumValue": obj.get("minimumValue"),
            "operatorOptions": IntegerOperatorOptions.from_dict(obj["operatorOptions"]) if obj.get("operatorOptions") is not None else None,
            "orderedRanking": obj.get("orderedRanking")
        })
        return _obj



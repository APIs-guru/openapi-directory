# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.context_attribute import ContextAttribute
from openapi_client.models.data_source_restriction import DataSourceRestriction
from openapi_client.models.facet_options import FacetOptions
from openapi_client.models.query_interpretation_options import QueryInterpretationOptions
from openapi_client.models.request_options import RequestOptions
from openapi_client.models.sort_options import SortOptions
from typing import Optional, Set
from typing_extensions import Self

class SearchRequest(BaseModel):
    """
    The search API request.
    """ # noqa: E501
    context_attributes: Optional[List[ContextAttribute]] = Field(default=None, description="Context attributes for the request which will be used to adjust ranking of search results. The maximum number of elements is 10.", alias="contextAttributes")
    data_source_restrictions: Optional[List[DataSourceRestriction]] = Field(default=None, description="The sources to use for querying. If not specified, all data sources from the current search application are used.", alias="dataSourceRestrictions")
    facet_options: Optional[List[FacetOptions]] = Field(default=None, alias="facetOptions")
    page_size: Optional[StrictInt] = Field(default=None, description="Maximum number of search results to return in one page. Valid values are between 1 and 100, inclusive. Default value is 10. Minimum value is 50 when results beyond 2000 are requested.", alias="pageSize")
    query: Optional[StrictStr] = Field(default=None, description="The raw query string. See supported search operators in the [Narrow your search with operators](https://support.google.com/cloudsearch/answer/6172299)")
    query_interpretation_options: Optional[QueryInterpretationOptions] = Field(default=None, alias="queryInterpretationOptions")
    request_options: Optional[RequestOptions] = Field(default=None, alias="requestOptions")
    sort_options: Optional[SortOptions] = Field(default=None, alias="sortOptions")
    start: Optional[StrictInt] = Field(default=None, description="Starting index of the results.")
    __properties: ClassVar[List[str]] = ["contextAttributes", "dataSourceRestrictions", "facetOptions", "pageSize", "query", "queryInterpretationOptions", "requestOptions", "sortOptions", "start"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in context_attributes (list)
        _items = []
        if self.context_attributes:
            for _item_context_attributes in self.context_attributes:
                if _item_context_attributes:
                    _items.append(_item_context_attributes.to_dict())
            _dict['contextAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_source_restrictions (list)
        _items = []
        if self.data_source_restrictions:
            for _item_data_source_restrictions in self.data_source_restrictions:
                if _item_data_source_restrictions:
                    _items.append(_item_data_source_restrictions.to_dict())
            _dict['dataSourceRestrictions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in facet_options (list)
        _items = []
        if self.facet_options:
            for _item_facet_options in self.facet_options:
                if _item_facet_options:
                    _items.append(_item_facet_options.to_dict())
            _dict['facetOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of query_interpretation_options
        if self.query_interpretation_options:
            _dict['queryInterpretationOptions'] = self.query_interpretation_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_options
        if self.request_options:
            _dict['requestOptions'] = self.request_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sort_options
        if self.sort_options:
            _dict['sortOptions'] = self.sort_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contextAttributes": [ContextAttribute.from_dict(_item) for _item in obj["contextAttributes"]] if obj.get("contextAttributes") is not None else None,
            "dataSourceRestrictions": [DataSourceRestriction.from_dict(_item) for _item in obj["dataSourceRestrictions"]] if obj.get("dataSourceRestrictions") is not None else None,
            "facetOptions": [FacetOptions.from_dict(_item) for _item in obj["facetOptions"]] if obj.get("facetOptions") is not None else None,
            "pageSize": obj.get("pageSize"),
            "query": obj.get("query"),
            "queryInterpretationOptions": QueryInterpretationOptions.from_dict(obj["queryInterpretationOptions"]) if obj.get("queryInterpretationOptions") is not None else None,
            "requestOptions": RequestOptions.from_dict(obj["requestOptions"]) if obj.get("requestOptions") is not None else None,
            "sortOptions": SortOptions.from_dict(obj["sortOptions"]) if obj.get("sortOptions") is not None else None,
            "start": obj.get("start")
        })
        return _obj



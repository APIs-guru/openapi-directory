# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_topaz_sidekick_common_person import EnterpriseTopazSidekickCommonPerson
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata(BaseModel):
    """
    Meta data for drive documents.
    """ # noqa: E501
    document_id: Optional[StrictStr] = Field(default=None, description="The drive document cosmo id. Client could use the id to build a URL to open a document. Please use Document.document_id.", alias="documentId")
    is_private: Optional[StrictBool] = Field(default=None, description="Additional field to identify whether a document is private since scope set to LIMITED can mean both that the doc is private or that it's shared with others. is_private indicates whether the doc is not shared with anyone except for the owner.", alias="isPrivate")
    last_comment_time_ms: Optional[StrictStr] = Field(default=None, description="Timestamp of the most recent comment added to the document in milliseconds since epoch.", alias="lastCommentTimeMs")
    last_edit_time_ms: Optional[StrictStr] = Field(default=None, description="Timestamp of the most recent edit from the current user in milliseconds since epoch.", alias="lastEditTimeMs")
    last_modification_time_millis: Optional[StrictStr] = Field(default=None, description="Last modification time of the document (independent of the user that modified it).", alias="lastModificationTimeMillis")
    last_updated_time_ms: Optional[StrictStr] = Field(default=None, description="Timestamp of the last updated time of the document in milliseconds since epoch.", alias="lastUpdatedTimeMs")
    last_view_time_ms: Optional[StrictStr] = Field(default=None, description="Timestamp of the most recent view from the current user in milliseconds since epoch.", alias="lastViewTimeMs")
    owner: Optional[EnterpriseTopazSidekickCommonPerson] = None
    scope: Optional[StrictStr] = Field(default=None, description="ACL scope of the document which identifies the sharing status of the doc (e.g., limited, shared with link, team drive, ...).")
    __properties: ClassVar[List[str]] = ["documentId", "isPrivate", "lastCommentTimeMs", "lastEditTimeMs", "lastModificationTimeMillis", "lastUpdatedTimeMs", "lastViewTimeMs", "owner", "scope"]

    @field_validator('scope')
    def scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_DOCUMENT_SCOPE', 'LIMITED', 'DASHER_DOMAIN_WITH_LINK', 'DASHER_DOMAIN', 'PUBLIC_WITH_LINK', 'PUBLIC', 'TEAM_DRIVE']):
            raise ValueError("must be one of enum values ('UNKNOWN_DOCUMENT_SCOPE', 'LIMITED', 'DASHER_DOMAIN_WITH_LINK', 'DASHER_DOMAIN', 'PUBLIC_WITH_LINK', 'PUBLIC', 'TEAM_DRIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "documentId": obj.get("documentId"),
            "isPrivate": obj.get("isPrivate"),
            "lastCommentTimeMs": obj.get("lastCommentTimeMs"),
            "lastEditTimeMs": obj.get("lastEditTimeMs"),
            "lastModificationTimeMillis": obj.get("lastModificationTimeMillis"),
            "lastUpdatedTimeMs": obj.get("lastUpdatedTimeMs"),
            "lastViewTimeMs": obj.get("lastViewTimeMs"),
            "owner": EnterpriseTopazSidekickCommonPerson.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "scope": obj.get("scope")
        })
        return _obj



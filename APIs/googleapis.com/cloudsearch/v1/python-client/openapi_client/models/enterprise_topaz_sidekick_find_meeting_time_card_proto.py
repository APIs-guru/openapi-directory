# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_topaz_sidekick_person import EnterpriseTopazSidekickPerson
from openapi_client.models.enterprise_topaz_sidekick_scheduled_meeting import EnterpriseTopazSidekickScheduledMeeting
from openapi_client.models.enterprise_topaz_sidekick_time_slot import EnterpriseTopazSidekickTimeSlot
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseTopazSidekickFindMeetingTimeCardProto(BaseModel):
    """
    Response to find meeting time among a set of people.
    """ # noqa: E501
    common_available_time_slots: Optional[List[EnterpriseTopazSidekickTimeSlot]] = Field(default=None, description="Slots when all attendees have availability.", alias="commonAvailableTimeSlots")
    invitees: Optional[List[EnterpriseTopazSidekickPerson]] = Field(default=None, description="Invitees to the event.")
    requester: Optional[EnterpriseTopazSidekickPerson] = None
    scheduled_meeting: Optional[EnterpriseTopazSidekickScheduledMeeting] = Field(default=None, alias="scheduledMeeting")
    skipped_invitees: Optional[List[EnterpriseTopazSidekickPerson]] = Field(default=None, description="Invitees that have been skipped in the computation, most likely because they are groups.", alias="skippedInvitees")
    time_boundaries: Optional[EnterpriseTopazSidekickTimeSlot] = Field(default=None, alias="timeBoundaries")
    timezone_id: Optional[StrictStr] = Field(default=None, description="Timezone ID.", alias="timezoneId")
    __properties: ClassVar[List[str]] = ["commonAvailableTimeSlots", "invitees", "requester", "scheduledMeeting", "skippedInvitees", "timeBoundaries", "timezoneId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickFindMeetingTimeCardProto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in common_available_time_slots (list)
        _items = []
        if self.common_available_time_slots:
            for _item_common_available_time_slots in self.common_available_time_slots:
                if _item_common_available_time_slots:
                    _items.append(_item_common_available_time_slots.to_dict())
            _dict['commonAvailableTimeSlots'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invitees (list)
        _items = []
        if self.invitees:
            for _item_invitees in self.invitees:
                if _item_invitees:
                    _items.append(_item_invitees.to_dict())
            _dict['invitees'] = _items
        # override the default output from pydantic by calling `to_dict()` of requester
        if self.requester:
            _dict['requester'] = self.requester.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scheduled_meeting
        if self.scheduled_meeting:
            _dict['scheduledMeeting'] = self.scheduled_meeting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in skipped_invitees (list)
        _items = []
        if self.skipped_invitees:
            for _item_skipped_invitees in self.skipped_invitees:
                if _item_skipped_invitees:
                    _items.append(_item_skipped_invitees.to_dict())
            _dict['skippedInvitees'] = _items
        # override the default output from pydantic by calling `to_dict()` of time_boundaries
        if self.time_boundaries:
            _dict['timeBoundaries'] = self.time_boundaries.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickFindMeetingTimeCardProto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commonAvailableTimeSlots": [EnterpriseTopazSidekickTimeSlot.from_dict(_item) for _item in obj["commonAvailableTimeSlots"]] if obj.get("commonAvailableTimeSlots") is not None else None,
            "invitees": [EnterpriseTopazSidekickPerson.from_dict(_item) for _item in obj["invitees"]] if obj.get("invitees") is not None else None,
            "requester": EnterpriseTopazSidekickPerson.from_dict(obj["requester"]) if obj.get("requester") is not None else None,
            "scheduledMeeting": EnterpriseTopazSidekickScheduledMeeting.from_dict(obj["scheduledMeeting"]) if obj.get("scheduledMeeting") is not None else None,
            "skippedInvitees": [EnterpriseTopazSidekickPerson.from_dict(_item) for _item in obj["skippedInvitees"]] if obj.get("skippedInvitees") is not None else None,
            "timeBoundaries": EnterpriseTopazSidekickTimeSlot.from_dict(obj["timeBoundaries"]) if obj.get("timeBoundaries") is not None else None,
            "timezoneId": obj.get("timezoneId")
        })
        return _obj



# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.g_suite_principal import GSuitePrincipal
from typing import Optional, Set
from typing_extensions import Self

class DataSource(BaseModel):
    """
    Datasource is a logical namespace for items to be indexed. All items must belong to a datasource. This is the prerequisite before items can be indexed into Cloud Search. 
    """ # noqa: E501
    disable_modifications: Optional[StrictBool] = Field(default=None, description="If true, sets the datasource to read-only mode. In read-only mode, the Indexing API rejects any requests to index or delete items in this source. Enabling read-only mode does not stop the processing of previously accepted data.", alias="disableModifications")
    disable_serving: Optional[StrictBool] = Field(default=None, description="Disable serving any search or assist results.", alias="disableServing")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. Display name of the datasource The maximum length is 300 characters.", alias="displayName")
    indexing_service_accounts: Optional[List[StrictStr]] = Field(default=None, description="List of service accounts that have indexing access.", alias="indexingServiceAccounts")
    items_visibility: Optional[List[GSuitePrincipal]] = Field(default=None, description="This field restricts visibility to items at the datasource level. Items within the datasource are restricted to the union of users and groups included in this field. Note that, this does not ensure access to a specific item, as users need to have ACL permissions on the contained items. This ensures a high level access on the entire datasource, and that the individual items are not shared outside this visibility.", alias="itemsVisibility")
    name: Optional[StrictStr] = Field(default=None, description="The name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource.")
    operation_ids: Optional[List[StrictStr]] = Field(default=None, description="IDs of the Long Running Operations (LROs) currently running for this schema.", alias="operationIds")
    return_thumbnail_urls: Optional[StrictBool] = Field(default=None, description="Can a user request to get thumbnail URI for Items indexed in this data source.", alias="returnThumbnailUrls")
    short_name: Optional[StrictStr] = Field(default=None, description="A short name or alias for the source. This value will be used to match the 'source' operator. For example, if the short name is *<value>* then queries like *source:<value>* will only return results for this source. The value must be unique across all datasources. The value must only contain alphanumeric characters (a-zA-Z0-9). The value cannot start with 'google' and cannot be one of the following: mail, gmail, docs, drive, groups, sites, calendar, hangouts, gplus, keep, people, teams. Its maximum length is 32 characters.", alias="shortName")
    __properties: ClassVar[List[str]] = ["disableModifications", "disableServing", "displayName", "indexingServiceAccounts", "itemsVisibility", "name", "operationIds", "returnThumbnailUrls", "shortName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items_visibility (list)
        _items = []
        if self.items_visibility:
            for _item_items_visibility in self.items_visibility:
                if _item_items_visibility:
                    _items.append(_item_items_visibility.to_dict())
            _dict['itemsVisibility'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disableModifications": obj.get("disableModifications"),
            "disableServing": obj.get("disableServing"),
            "displayName": obj.get("displayName"),
            "indexingServiceAccounts": obj.get("indexingServiceAccounts"),
            "itemsVisibility": [GSuitePrincipal.from_dict(_item) for _item in obj["itemsVisibility"]] if obj.get("itemsVisibility") is not None else None,
            "name": obj.get("name"),
            "operationIds": obj.get("operationIds"),
            "returnThumbnailUrls": obj.get("returnThumbnailUrls"),
            "shortName": obj.get("shortName")
        })
        return _obj



# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.date_values import DateValues
from openapi_client.models.double_values import DoubleValues
from openapi_client.models.enum_values import EnumValues
from openapi_client.models.html_values import HtmlValues
from openapi_client.models.integer_values import IntegerValues
from openapi_client.models.text_values import TextValues
from openapi_client.models.timestamp_values import TimestampValues
from typing import Optional, Set
from typing_extensions import Self

class NamedProperty(BaseModel):
    """
    A typed name-value pair for structured data. The type of the value should be the same as the registered type for the `name` property in the object definition of `objectType`.
    """ # noqa: E501
    boolean_value: Optional[StrictBool] = Field(default=None, alias="booleanValue")
    date_values: Optional[DateValues] = Field(default=None, alias="dateValues")
    double_values: Optional[DoubleValues] = Field(default=None, alias="doubleValues")
    enum_values: Optional[EnumValues] = Field(default=None, alias="enumValues")
    html_values: Optional[HtmlValues] = Field(default=None, alias="htmlValues")
    integer_values: Optional[IntegerValues] = Field(default=None, alias="integerValues")
    name: Optional[StrictStr] = Field(default=None, description="The name of the property. This name should correspond to the name of the property that was registered for object definition in the schema. The maximum allowable length for this property is 256 characters.")
    object_values: Optional[ObjectValues] = Field(default=None, alias="objectValues")
    text_values: Optional[TextValues] = Field(default=None, alias="textValues")
    timestamp_values: Optional[TimestampValues] = Field(default=None, alias="timestampValues")
    __properties: ClassVar[List[str]] = ["booleanValue", "dateValues", "doubleValues", "enumValues", "htmlValues", "integerValues", "name", "objectValues", "textValues", "timestampValues"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NamedProperty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_values
        if self.date_values:
            _dict['dateValues'] = self.date_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of double_values
        if self.double_values:
            _dict['doubleValues'] = self.double_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enum_values
        if self.enum_values:
            _dict['enumValues'] = self.enum_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of html_values
        if self.html_values:
            _dict['htmlValues'] = self.html_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integer_values
        if self.integer_values:
            _dict['integerValues'] = self.integer_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object_values
        if self.object_values:
            _dict['objectValues'] = self.object_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_values
        if self.text_values:
            _dict['textValues'] = self.text_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timestamp_values
        if self.timestamp_values:
            _dict['timestampValues'] = self.timestamp_values.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NamedProperty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "booleanValue": obj.get("booleanValue"),
            "dateValues": DateValues.from_dict(obj["dateValues"]) if obj.get("dateValues") is not None else None,
            "doubleValues": DoubleValues.from_dict(obj["doubleValues"]) if obj.get("doubleValues") is not None else None,
            "enumValues": EnumValues.from_dict(obj["enumValues"]) if obj.get("enumValues") is not None else None,
            "htmlValues": HtmlValues.from_dict(obj["htmlValues"]) if obj.get("htmlValues") is not None else None,
            "integerValues": IntegerValues.from_dict(obj["integerValues"]) if obj.get("integerValues") is not None else None,
            "name": obj.get("name"),
            "objectValues": ObjectValues.from_dict(obj["objectValues"]) if obj.get("objectValues") is not None else None,
            "textValues": TextValues.from_dict(obj["textValues"]) if obj.get("textValues") is not None else None,
            "timestampValues": TimestampValues.from_dict(obj["timestampValues"]) if obj.get("timestampValues") is not None else None
        })
        return _obj

from openapi_client.models.object_values import ObjectValues
# TODO: Rewrite to not use raise_errors
NamedProperty.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Context(BaseModel):
    """
    Context
    """ # noqa: E501
    app: Optional[List[StrictStr]] = Field(default=None, description="[Optional] App where the card should be shown. If missing, the card will be shown in TOPAZ.")
    day_of_week: Optional[List[StrictInt]] = Field(default=None, description="[Optional] Day of week when the card should be shown, where 0 is Monday.", alias="dayOfWeek")
    end_date_sec: Optional[StrictStr] = Field(default=None, description="[Optional] Date (in seconds since epoch) when the card should stop being shown. If missing, end_date_sec will be set to Jan 1st, 2100.", alias="endDateSec")
    end_day_offset_sec: Optional[StrictStr] = Field(default=None, description="[Optional] End time in seconds, within a day, when the card should stop being shown if it's within [start_date_sec, end_date_sec]. If missing, this is set to 86400 (24 hours x 3600 sec/hour), i.e., midnight next day.", alias="endDayOffsetSec")
    locale: Optional[List[StrictStr]] = Field(default=None, description="[Optional] The locales for which the card should be triggered (e.g., en_US and en_CA). If missing, the card is going to show to clients regardless of their locale.")
    location: Optional[List[StrictStr]] = Field(default=None, description="[Optional] Text-free locations where the card should be shown. This is expected to match the user's location in focus. If no location is specified, the card will be shown for any location.")
    query: Optional[List[StrictStr]] = Field(default=None, description="[Required only for Answer and RHS cards - will be ignored for Homepage] cards. It's the exact case-insensitive queries that will trigger the Answer or RHS card.")
    start_date_sec: Optional[StrictStr] = Field(default=None, description="[Optional] Date (in seconds since epoch) when the card should start being shown. If missing, start_date_sec will be Jan 1st, 1970 UTC.", alias="startDateSec")
    start_day_offset_sec: Optional[StrictStr] = Field(default=None, description="[Optional] Start time in seconds, within a day, when the card should be shown if it's within [start_date_sec, end_date_sec]. If 0, the card will be shown from 12:00am on.", alias="startDayOffsetSec")
    surface: Optional[List[StrictStr]] = Field(default=None, description="[Optional] Surface where the card should be shown in. If missing, the card will be shown in any surface.")
    type: Optional[List[StrictStr]] = Field(default=None, description="[Required] Type of the card (homepage, Answer or RHS).")
    __properties: ClassVar[List[str]] = ["app", "dayOfWeek", "endDateSec", "endDayOffsetSec", "locale", "location", "query", "startDateSec", "startDayOffsetSec", "surface", "type"]

    @field_validator('app')
    def app_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['UNKNOWN_APP', 'TOPAZ', 'MOMA']):
                raise ValueError("each list item must be one of ('UNKNOWN_APP', 'TOPAZ', 'MOMA')")
        return value

    @field_validator('surface')
    def surface_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['UNKNOWN_SURFACE', 'DESKTOP', 'ANDROID', 'IOS', 'MOBILE', 'ANY']):
                raise ValueError("each list item must be one of ('UNKNOWN_SURFACE', 'DESKTOP', 'ANDROID', 'IOS', 'MOBILE', 'ANY')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['UNKNOWN_CARD_TYPE', 'HOMEPAGE_CARD', 'ANSWER_CARD', 'RHS_CARD']):
                raise ValueError("each list item must be one of ('UNKNOWN_CARD_TYPE', 'HOMEPAGE_CARD', 'ANSWER_CARD', 'RHS_CARD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Context from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Context from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app": obj.get("app"),
            "dayOfWeek": obj.get("dayOfWeek"),
            "endDateSec": obj.get("endDateSec"),
            "endDayOffsetSec": obj.get("endDayOffsetSec"),
            "locale": obj.get("locale"),
            "location": obj.get("location"),
            "query": obj.get("query"),
            "startDateSec": obj.get("startDateSec"),
            "startDayOffsetSec": obj.get("startDayOffsetSec"),
            "surface": obj.get("surface"),
            "type": obj.get("type")
        })
        return _obj



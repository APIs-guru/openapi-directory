# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_source_restriction import DataSourceRestriction
from openapi_client.models.facet_options import FacetOptions
from openapi_client.models.query_interpretation_config import QueryInterpretationConfig
from openapi_client.models.scoring_config import ScoringConfig
from openapi_client.models.sort_options import SortOptions
from openapi_client.models.source_config import SourceConfig
from typing import Optional, Set
from typing_extensions import Self

class SearchApplication(BaseModel):
    """
    SearchApplication
    """ # noqa: E501
    data_source_restrictions: Optional[List[DataSourceRestriction]] = Field(default=None, description="Retrictions applied to the configurations. The maximum number of elements is 10.", alias="dataSourceRestrictions")
    default_facet_options: Optional[List[FacetOptions]] = Field(default=None, description="The default fields for returning facet results. The sources specified here also have been included in data_source_restrictions above.", alias="defaultFacetOptions")
    default_sort_options: Optional[SortOptions] = Field(default=None, alias="defaultSortOptions")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name of the Search Application. The maximum length is 300 characters.", alias="displayName")
    enable_audit_log: Optional[StrictBool] = Field(default=None, description="Indicates whether audit logging is on/off for requests made for the search application in query APIs.", alias="enableAuditLog")
    name: Optional[StrictStr] = Field(default=None, description="The name of the Search Application. Format: searchapplications/{application_id}.")
    operation_ids: Optional[List[StrictStr]] = Field(default=None, description="Output only. IDs of the Long Running Operations (LROs) currently running for this schema. Output only field.", alias="operationIds")
    query_interpretation_config: Optional[QueryInterpretationConfig] = Field(default=None, alias="queryInterpretationConfig")
    return_result_thumbnail_urls: Optional[StrictBool] = Field(default=None, description="With each result we should return the URI for its thumbnail (when applicable)", alias="returnResultThumbnailUrls")
    scoring_config: Optional[ScoringConfig] = Field(default=None, alias="scoringConfig")
    source_config: Optional[List[SourceConfig]] = Field(default=None, description="Configuration for a sources specified in data_source_restrictions.", alias="sourceConfig")
    __properties: ClassVar[List[str]] = ["dataSourceRestrictions", "defaultFacetOptions", "defaultSortOptions", "displayName", "enableAuditLog", "name", "operationIds", "queryInterpretationConfig", "returnResultThumbnailUrls", "scoringConfig", "sourceConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchApplication from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "operation_ids",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data_source_restrictions (list)
        _items = []
        if self.data_source_restrictions:
            for _item_data_source_restrictions in self.data_source_restrictions:
                if _item_data_source_restrictions:
                    _items.append(_item_data_source_restrictions.to_dict())
            _dict['dataSourceRestrictions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in default_facet_options (list)
        _items = []
        if self.default_facet_options:
            for _item_default_facet_options in self.default_facet_options:
                if _item_default_facet_options:
                    _items.append(_item_default_facet_options.to_dict())
            _dict['defaultFacetOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of default_sort_options
        if self.default_sort_options:
            _dict['defaultSortOptions'] = self.default_sort_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query_interpretation_config
        if self.query_interpretation_config:
            _dict['queryInterpretationConfig'] = self.query_interpretation_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scoring_config
        if self.scoring_config:
            _dict['scoringConfig'] = self.scoring_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in source_config (list)
        _items = []
        if self.source_config:
            for _item_source_config in self.source_config:
                if _item_source_config:
                    _items.append(_item_source_config.to_dict())
            _dict['sourceConfig'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchApplication from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataSourceRestrictions": [DataSourceRestriction.from_dict(_item) for _item in obj["dataSourceRestrictions"]] if obj.get("dataSourceRestrictions") is not None else None,
            "defaultFacetOptions": [FacetOptions.from_dict(_item) for _item in obj["defaultFacetOptions"]] if obj.get("defaultFacetOptions") is not None else None,
            "defaultSortOptions": SortOptions.from_dict(obj["defaultSortOptions"]) if obj.get("defaultSortOptions") is not None else None,
            "displayName": obj.get("displayName"),
            "enableAuditLog": obj.get("enableAuditLog"),
            "name": obj.get("name"),
            "operationIds": obj.get("operationIds"),
            "queryInterpretationConfig": QueryInterpretationConfig.from_dict(obj["queryInterpretationConfig"]) if obj.get("queryInterpretationConfig") is not None else None,
            "returnResultThumbnailUrls": obj.get("returnResultThumbnailUrls"),
            "scoringConfig": ScoringConfig.from_dict(obj["scoringConfig"]) if obj.get("scoringConfig") is not None else None,
            "sourceConfig": [SourceConfig.from_dict(_item) for _item in obj["sourceConfig"]] if obj.get("sourceConfig") is not None else None
        })
        return _obj



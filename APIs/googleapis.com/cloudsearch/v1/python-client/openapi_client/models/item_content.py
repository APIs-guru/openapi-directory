# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.upload_item_ref import UploadItemRef
from typing import Optional, Set
from typing_extensions import Self

class ItemContent(BaseModel):
    """
    Content of an item to be indexed and surfaced by Cloud Search. Only UTF-8 encoded strings are allowed as inlineContent. If the content is uploaded and not binary, it must be UTF-8 encoded.
    """ # noqa: E501
    content_data_ref: Optional[UploadItemRef] = Field(default=None, alias="contentDataRef")
    content_format: Optional[StrictStr] = Field(default=None, alias="contentFormat")
    hash: Optional[StrictStr] = Field(default=None, description="Hashing info calculated and provided by the API client for content. Can be used with the items.push method to calculate modified state. The maximum length is 2048 characters.")
    inline_content: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Content that is supplied inlined within the update method. The maximum length is 102400 bytes (100 KiB).", alias="inlineContent")
    __properties: ClassVar[List[str]] = ["contentDataRef", "contentFormat", "hash", "inlineContent"]

    @field_validator('content_format')
    def content_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'HTML', 'TEXT', 'RAW']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'HTML', 'TEXT', 'RAW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content_data_ref
        if self.content_data_ref:
            _dict['contentDataRef'] = self.content_data_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentDataRef": UploadItemRef.from_dict(obj["contentDataRef"]) if obj.get("contentDataRef") is not None else None,
            "contentFormat": obj.get("contentFormat"),
            "hash": obj.get("hash"),
            "inlineContent": obj.get("inlineContent")
        })
        return _obj



# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_topaz_frontend_teams_link import EnterpriseTopazFrontendTeamsLink
from openapi_client.models.enterprise_topaz_frontend_teams_person_core_phone_number import EnterpriseTopazFrontendTeamsPersonCorePhoneNumber
from openapi_client.models.map_info import MapInfo
from openapi_client.models.model_date import ModelDate
from openapi_client.models.safe_url_proto import SafeUrlProto
from typing import Optional, Set
from typing_extensions import Self

class PersonCore(BaseModel):
    """
    Information for rendering a person. NEXT ID: 37
    """ # noqa: E501
    address_me_as: Optional[StrictStr] = Field(default=None, description="Instructions for how to address this person (e.g. custom pronouns). For google.com this is a set of pronouns from a defined list of options.", alias="addressMeAs")
    admin_to: Optional[List[PersonCore]] = Field(default=None, description="People the profile owner is an admin to. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.", alias="adminTo")
    admins: Optional[List[PersonCore]] = Field(default=None, description="The profile owner's admins in no particular order. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.")
    availability_status: Optional[StrictStr] = Field(default=None, alias="availabilityStatus")
    birthday: Optional[ModelDate] = None
    calendar_url: Optional[SafeUrlProto] = Field(default=None, alias="calendarUrl")
    chat_url: Optional[SafeUrlProto] = Field(default=None, alias="chatUrl")
    cost_center: Optional[StrictStr] = Field(default=None, description="Person's cost center as a string, e.g. \"926: Googler Apps\".", alias="costCenter")
    department: Optional[StrictStr] = Field(default=None, description="The person's Organization department, e.g. \"People Operations\". For google.com this is usually called \"area\".")
    direct_reports: Optional[List[PersonCore]] = Field(default=None, description="A subset of the profile owner's direct reports. The number of entities here may be less than total_direct_reports_count, because typically ProfileResponse does not include all the person's reports, if there are too many to retrieve efficiently. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.", alias="directReports")
    dotted_line_managers: Optional[List[PersonCore]] = Field(default=None, description="The profile owner's direct dotted line managers in no particular order. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.", alias="dottedLineManagers")
    dotted_line_reports: Optional[List[PersonCore]] = Field(default=None, description="A subset of the profile owner's dotted-line reports. The number of entities here may be less than total_dlr_count. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.", alias="dottedLineReports")
    emails: Optional[List[StrictStr]] = Field(default=None, description="E-mail addresses of the person. The primary or preferred email should be first.")
    employee_id: Optional[StrictStr] = Field(default=None, description="Person's employee number (external ID of type \"organization\") For google.com this is the badge number (e.g. 2 for Larry Page).", alias="employeeId")
    fingerprint: Optional[StrictStr] = Field(default=None, description="A fingerprint used by PAPI to reliably determine if a resource has changed Externally it is used as part of the etag.")
    fte_permille: Optional[StrictStr] = Field(default=None, description="Full-time equivalent (in ‰) (e.g. 800 for a person who's working 80%).", alias="ftePermille")
    geo_location: Optional[MapInfo] = Field(default=None, alias="geoLocation")
    gmail_url: Optional[StrictStr] = Field(default=None, alias="gmailUrl")
    job_title: Optional[StrictStr] = Field(default=None, description="Profile owner's job title (e.g. \"Software Engineer\"). For google.com this is the Workday preferred job title.", alias="jobTitle")
    keyword_types: Optional[List[StrictStr]] = Field(default=None, description="List of keys to use from the map 'keywords'.", alias="keywordTypes")
    keywords: Optional[Dict[str, StrictStr]] = Field(default=None, description="Custom keywords the domain admin has added.")
    links: Optional[List[EnterpriseTopazFrontendTeamsLink]] = Field(default=None, description="Custom links the profile owner has added.")
    location: Optional[StrictStr] = Field(default=None, description="Detailed desk location within the company. For google.com this is the desk location code (e.g. \"DE-MUC-ARP-6T2-6T2C0C\") if the person has a desk.")
    managers: Optional[List[PersonCore]] = Field(default=None, description="The profile owner's management chain from top to bottom, where managers[0] is the CEO, manager[N-2] is the person's manager's manager and managers[N-1] is the person's direct manager. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.")
    mission: Optional[StrictStr] = Field(default=None, description="Custom mission statement the profile owner has added.")
    name: Optional[StrictStr] = Field(default=None, description="Human-readable Unicode display name.")
    office_location: Optional[StrictStr] = Field(default=None, description="Office/building identifier within the company. For google.com this is the office code (e.g. \"DE-MUC-ARP\").", alias="officeLocation")
    person_id: Optional[StrictStr] = Field(default=None, description="The person's obfuscated Gaia ID.", alias="personId")
    phone_numbers: Optional[List[EnterpriseTopazFrontendTeamsPersonCorePhoneNumber]] = Field(default=None, alias="phoneNumbers")
    photo_url: Optional[SafeUrlProto] = Field(default=None, alias="photoUrl")
    postal_address: Optional[StrictStr] = Field(default=None, description="Postal address of office/building.", alias="postalAddress")
    total_direct_reports_count: Optional[StrictInt] = Field(default=None, description="Total count of the profile owner's direct reports.", alias="totalDirectReportsCount")
    total_dlr_count: Optional[StrictInt] = Field(default=None, description="Total count of the profile owner's dotted-line reports.", alias="totalDlrCount")
    total_fte_count: Optional[StrictStr] = Field(default=None, description="The sum of all profile owner's reports and their own full-time-equivalents in ‰ (e.g. 1800 if one report is working 80% and profile owner 100%).", alias="totalFteCount")
    username: Optional[StrictStr] = Field(default=None, description="External ID of type \"login_id\" for the profile. For google.com this is the username/LDAP.")
    waldo_come_back_time: Optional[StrictStr] = Field(default=None, alias="waldoComeBackTime")
    __properties: ClassVar[List[str]] = ["addressMeAs", "adminTo", "admins", "availabilityStatus", "birthday", "calendarUrl", "chatUrl", "costCenter", "department", "directReports", "dottedLineManagers", "dottedLineReports", "emails", "employeeId", "fingerprint", "ftePermille", "geoLocation", "gmailUrl", "jobTitle", "keywordTypes", "keywords", "links", "location", "managers", "mission", "name", "officeLocation", "personId", "phoneNumbers", "photoUrl", "postalAddress", "totalDirectReportsCount", "totalDlrCount", "totalFteCount", "username", "waldoComeBackTime"]

    @field_validator('availability_status')
    def availability_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'OUT_OF_OFFICE', 'OUTSIDE_WORKING_HOURS', 'AVAILABLE']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'OUT_OF_OFFICE', 'OUTSIDE_WORKING_HOURS', 'AVAILABLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersonCore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in admin_to (list)
        _items = []
        if self.admin_to:
            for _item_admin_to in self.admin_to:
                if _item_admin_to:
                    _items.append(_item_admin_to.to_dict())
            _dict['adminTo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in admins (list)
        _items = []
        if self.admins:
            for _item_admins in self.admins:
                if _item_admins:
                    _items.append(_item_admins.to_dict())
            _dict['admins'] = _items
        # override the default output from pydantic by calling `to_dict()` of birthday
        if self.birthday:
            _dict['birthday'] = self.birthday.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calendar_url
        if self.calendar_url:
            _dict['calendarUrl'] = self.calendar_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of chat_url
        if self.chat_url:
            _dict['chatUrl'] = self.chat_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in direct_reports (list)
        _items = []
        if self.direct_reports:
            for _item_direct_reports in self.direct_reports:
                if _item_direct_reports:
                    _items.append(_item_direct_reports.to_dict())
            _dict['directReports'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dotted_line_managers (list)
        _items = []
        if self.dotted_line_managers:
            for _item_dotted_line_managers in self.dotted_line_managers:
                if _item_dotted_line_managers:
                    _items.append(_item_dotted_line_managers.to_dict())
            _dict['dottedLineManagers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dotted_line_reports (list)
        _items = []
        if self.dotted_line_reports:
            for _item_dotted_line_reports in self.dotted_line_reports:
                if _item_dotted_line_reports:
                    _items.append(_item_dotted_line_reports.to_dict())
            _dict['dottedLineReports'] = _items
        # override the default output from pydantic by calling `to_dict()` of geo_location
        if self.geo_location:
            _dict['geoLocation'] = self.geo_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in managers (list)
        _items = []
        if self.managers:
            for _item_managers in self.managers:
                if _item_managers:
                    _items.append(_item_managers.to_dict())
            _dict['managers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phone_numbers (list)
        _items = []
        if self.phone_numbers:
            for _item_phone_numbers in self.phone_numbers:
                if _item_phone_numbers:
                    _items.append(_item_phone_numbers.to_dict())
            _dict['phoneNumbers'] = _items
        # override the default output from pydantic by calling `to_dict()` of photo_url
        if self.photo_url:
            _dict['photoUrl'] = self.photo_url.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersonCore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addressMeAs": obj.get("addressMeAs"),
            "adminTo": [PersonCore.from_dict(_item) for _item in obj["adminTo"]] if obj.get("adminTo") is not None else None,
            "admins": [PersonCore.from_dict(_item) for _item in obj["admins"]] if obj.get("admins") is not None else None,
            "availabilityStatus": obj.get("availabilityStatus"),
            "birthday": ModelDate.from_dict(obj["birthday"]) if obj.get("birthday") is not None else None,
            "calendarUrl": SafeUrlProto.from_dict(obj["calendarUrl"]) if obj.get("calendarUrl") is not None else None,
            "chatUrl": SafeUrlProto.from_dict(obj["chatUrl"]) if obj.get("chatUrl") is not None else None,
            "costCenter": obj.get("costCenter"),
            "department": obj.get("department"),
            "directReports": [PersonCore.from_dict(_item) for _item in obj["directReports"]] if obj.get("directReports") is not None else None,
            "dottedLineManagers": [PersonCore.from_dict(_item) for _item in obj["dottedLineManagers"]] if obj.get("dottedLineManagers") is not None else None,
            "dottedLineReports": [PersonCore.from_dict(_item) for _item in obj["dottedLineReports"]] if obj.get("dottedLineReports") is not None else None,
            "emails": obj.get("emails"),
            "employeeId": obj.get("employeeId"),
            "fingerprint": obj.get("fingerprint"),
            "ftePermille": obj.get("ftePermille"),
            "geoLocation": MapInfo.from_dict(obj["geoLocation"]) if obj.get("geoLocation") is not None else None,
            "gmailUrl": obj.get("gmailUrl"),
            "jobTitle": obj.get("jobTitle"),
            "keywordTypes": obj.get("keywordTypes"),
            "keywords": obj.get("keywords"),
            "links": [EnterpriseTopazFrontendTeamsLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "location": obj.get("location"),
            "managers": [PersonCore.from_dict(_item) for _item in obj["managers"]] if obj.get("managers") is not None else None,
            "mission": obj.get("mission"),
            "name": obj.get("name"),
            "officeLocation": obj.get("officeLocation"),
            "personId": obj.get("personId"),
            "phoneNumbers": [EnterpriseTopazFrontendTeamsPersonCorePhoneNumber.from_dict(_item) for _item in obj["phoneNumbers"]] if obj.get("phoneNumbers") is not None else None,
            "photoUrl": SafeUrlProto.from_dict(obj["photoUrl"]) if obj.get("photoUrl") is not None else None,
            "postalAddress": obj.get("postalAddress"),
            "totalDirectReportsCount": obj.get("totalDirectReportsCount"),
            "totalDlrCount": obj.get("totalDlrCount"),
            "totalFteCount": obj.get("totalFteCount"),
            "username": obj.get("username"),
            "waldoComeBackTime": obj.get("waldoComeBackTime")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
PersonCore.model_rebuild(raise_errors=False)


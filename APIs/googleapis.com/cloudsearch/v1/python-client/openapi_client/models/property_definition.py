# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.boolean_property_options import BooleanPropertyOptions
from openapi_client.models.date_property_options import DatePropertyOptions
from openapi_client.models.double_property_options import DoublePropertyOptions
from openapi_client.models.enum_property_options import EnumPropertyOptions
from openapi_client.models.html_property_options import HtmlPropertyOptions
from openapi_client.models.integer_property_options import IntegerPropertyOptions
from openapi_client.models.property_display_options import PropertyDisplayOptions
from openapi_client.models.text_property_options import TextPropertyOptions
from openapi_client.models.timestamp_property_options import TimestampPropertyOptions
from typing import Optional, Set
from typing_extensions import Self

class PropertyDefinition(BaseModel):
    """
    The definition of a property within an object.
    """ # noqa: E501
    boolean_property_options: Optional[BooleanPropertyOptions] = Field(default=None, alias="booleanPropertyOptions")
    date_property_options: Optional[DatePropertyOptions] = Field(default=None, alias="datePropertyOptions")
    display_options: Optional[PropertyDisplayOptions] = Field(default=None, alias="displayOptions")
    double_property_options: Optional[DoublePropertyOptions] = Field(default=None, alias="doublePropertyOptions")
    enum_property_options: Optional[EnumPropertyOptions] = Field(default=None, alias="enumPropertyOptions")
    html_property_options: Optional[HtmlPropertyOptions] = Field(default=None, alias="htmlPropertyOptions")
    integer_property_options: Optional[IntegerPropertyOptions] = Field(default=None, alias="integerPropertyOptions")
    is_facetable: Optional[StrictBool] = Field(default=None, description="Indicates that the property can be used for generating facets. Cannot be true for properties whose type is object. IsReturnable must be true to set this option. Only supported for boolean, enum, integer, and text properties.", alias="isFacetable")
    is_repeatable: Optional[StrictBool] = Field(default=None, description="Indicates that multiple values are allowed for the property. For example, a document only has one description but can have multiple comments. Cannot be true for properties whose type is a boolean. If set to false, properties that contain more than one value cause the indexing request for that item to be rejected.", alias="isRepeatable")
    is_returnable: Optional[StrictBool] = Field(default=None, description="Indicates that the property identifies data that should be returned in search results via the Query API. If set to *true*, indicates that Query API users can use matching property fields in results. However, storing fields requires more space allocation and uses more bandwidth for search queries, which impacts performance over large datasets. Set to *true* here only if the field is needed for search results. Cannot be true for properties whose type is an object.", alias="isReturnable")
    is_sortable: Optional[StrictBool] = Field(default=None, description="Indicates that the property can be used for sorting. Cannot be true for properties that are repeatable. Cannot be true for properties whose type is object. IsReturnable must be true to set this option. Only supported for boolean, date, double, integer, and timestamp properties.", alias="isSortable")
    is_suggestable: Optional[StrictBool] = Field(default=None, description="Indicates that the property can be used for generating query suggestions.", alias="isSuggestable")
    is_wildcard_searchable: Optional[StrictBool] = Field(default=None, description="Indicates that users can perform wildcard search for this property. Only supported for Text properties. IsReturnable must be true to set this option. In a given datasource maximum of 5 properties can be marked as is_wildcard_searchable. For more details, see [Define object properties](https://developers.google.com/cloud-search/docs/guides/schema-guide#properties)", alias="isWildcardSearchable")
    name: Optional[StrictStr] = Field(default=None, description="The name of the property. Item indexing requests sent to the Indexing API should set the property name equal to this value. For example, if name is *subject_line*, then indexing requests for document items with subject fields should set the name for that field equal to *subject_line*. Use the name as the identifier for the object property. Once registered as a property for an object, you cannot re-use this name for another property within that object. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The maximum length is 256 characters.")
    object_property_options: Optional[ObjectPropertyOptions] = Field(default=None, alias="objectPropertyOptions")
    text_property_options: Optional[TextPropertyOptions] = Field(default=None, alias="textPropertyOptions")
    timestamp_property_options: Optional[TimestampPropertyOptions] = Field(default=None, alias="timestampPropertyOptions")
    __properties: ClassVar[List[str]] = ["booleanPropertyOptions", "datePropertyOptions", "displayOptions", "doublePropertyOptions", "enumPropertyOptions", "htmlPropertyOptions", "integerPropertyOptions", "isFacetable", "isRepeatable", "isReturnable", "isSortable", "isSuggestable", "isWildcardSearchable", "name", "objectPropertyOptions", "textPropertyOptions", "timestampPropertyOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PropertyDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of boolean_property_options
        if self.boolean_property_options:
            _dict['booleanPropertyOptions'] = self.boolean_property_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_property_options
        if self.date_property_options:
            _dict['datePropertyOptions'] = self.date_property_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of display_options
        if self.display_options:
            _dict['displayOptions'] = self.display_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of double_property_options
        if self.double_property_options:
            _dict['doublePropertyOptions'] = self.double_property_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enum_property_options
        if self.enum_property_options:
            _dict['enumPropertyOptions'] = self.enum_property_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of html_property_options
        if self.html_property_options:
            _dict['htmlPropertyOptions'] = self.html_property_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integer_property_options
        if self.integer_property_options:
            _dict['integerPropertyOptions'] = self.integer_property_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object_property_options
        if self.object_property_options:
            _dict['objectPropertyOptions'] = self.object_property_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_property_options
        if self.text_property_options:
            _dict['textPropertyOptions'] = self.text_property_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timestamp_property_options
        if self.timestamp_property_options:
            _dict['timestampPropertyOptions'] = self.timestamp_property_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PropertyDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "booleanPropertyOptions": BooleanPropertyOptions.from_dict(obj["booleanPropertyOptions"]) if obj.get("booleanPropertyOptions") is not None else None,
            "datePropertyOptions": DatePropertyOptions.from_dict(obj["datePropertyOptions"]) if obj.get("datePropertyOptions") is not None else None,
            "displayOptions": PropertyDisplayOptions.from_dict(obj["displayOptions"]) if obj.get("displayOptions") is not None else None,
            "doublePropertyOptions": DoublePropertyOptions.from_dict(obj["doublePropertyOptions"]) if obj.get("doublePropertyOptions") is not None else None,
            "enumPropertyOptions": EnumPropertyOptions.from_dict(obj["enumPropertyOptions"]) if obj.get("enumPropertyOptions") is not None else None,
            "htmlPropertyOptions": HtmlPropertyOptions.from_dict(obj["htmlPropertyOptions"]) if obj.get("htmlPropertyOptions") is not None else None,
            "integerPropertyOptions": IntegerPropertyOptions.from_dict(obj["integerPropertyOptions"]) if obj.get("integerPropertyOptions") is not None else None,
            "isFacetable": obj.get("isFacetable"),
            "isRepeatable": obj.get("isRepeatable"),
            "isReturnable": obj.get("isReturnable"),
            "isSortable": obj.get("isSortable"),
            "isSuggestable": obj.get("isSuggestable"),
            "isWildcardSearchable": obj.get("isWildcardSearchable"),
            "name": obj.get("name"),
            "objectPropertyOptions": ObjectPropertyOptions.from_dict(obj["objectPropertyOptions"]) if obj.get("objectPropertyOptions") is not None else None,
            "textPropertyOptions": TextPropertyOptions.from_dict(obj["textPropertyOptions"]) if obj.get("textPropertyOptions") is not None else None,
            "timestampPropertyOptions": TimestampPropertyOptions.from_dict(obj["timestampPropertyOptions"]) if obj.get("timestampPropertyOptions") is not None else None
        })
        return _obj

from openapi_client.models.object_property_options import ObjectPropertyOptions
# TODO: Rewrite to not use raise_errors
PropertyDefinition.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_topaz_sidekick_common_person_birthday import EnterpriseTopazSidekickCommonPersonBirthday
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseTopazSidekickCommonPerson(BaseModel):
    """
    Common representation of a person.
    """ # noqa: E501
    birthday: Optional[EnterpriseTopazSidekickCommonPersonBirthday] = None
    cell_phone: Optional[StrictStr] = Field(default=None, description="Cell phone number.", alias="cellPhone")
    department: Optional[StrictStr] = Field(default=None, description="The department the person works in (e.g. Engineering).")
    desk_location: Optional[StrictStr] = Field(default=None, description="Desk location (e.g. US-MTV-PR55-5-5B1I).", alias="deskLocation")
    desk_phone: Optional[StrictStr] = Field(default=None, description="Work desk phone number.", alias="deskPhone")
    display_name: Optional[StrictStr] = Field(default=None, description="The full name.", alias="displayName")
    email: Optional[StrictStr] = Field(default=None, description="Email.")
    family_name: Optional[StrictStr] = Field(default=None, description="The last name.", alias="familyName")
    full_address: Optional[StrictStr] = Field(default=None, description="The fully formatted address (e.g. 1255 Pear Avenue, Mountain View 94043, United States).", alias="fullAddress")
    gaia_id: Optional[StrictStr] = Field(default=None, description="This field is deprecated. The obfuscated_id should be used instead.", alias="gaiaId")
    given_name: Optional[StrictStr] = Field(default=None, description="The first name.", alias="givenName")
    job_title: Optional[StrictStr] = Field(default=None, description="The person's job title (e.g. Software Engineer).", alias="jobTitle")
    manager: Optional[EnterpriseTopazSidekickCommonPerson] = None
    obfuscated_id: Optional[StrictStr] = Field(default=None, description="The obfuscated GAIA ID.", alias="obfuscatedId")
    photo_url: Optional[StrictStr] = Field(default=None, description="The URL for the Focus profile picture.", alias="photoUrl")
    street_address: Optional[StrictStr] = Field(default=None, description="The street address (e.g. 1255 Pear Avenue).", alias="streetAddress")
    __properties: ClassVar[List[str]] = ["birthday", "cellPhone", "department", "deskLocation", "deskPhone", "displayName", "email", "familyName", "fullAddress", "gaiaId", "givenName", "jobTitle", "manager", "obfuscatedId", "photoUrl", "streetAddress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickCommonPerson from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of birthday
        if self.birthday:
            _dict['birthday'] = self.birthday.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manager
        if self.manager:
            _dict['manager'] = self.manager.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickCommonPerson from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "birthday": EnterpriseTopazSidekickCommonPersonBirthday.from_dict(obj["birthday"]) if obj.get("birthday") is not None else None,
            "cellPhone": obj.get("cellPhone"),
            "department": obj.get("department"),
            "deskLocation": obj.get("deskLocation"),
            "deskPhone": obj.get("deskPhone"),
            "displayName": obj.get("displayName"),
            "email": obj.get("email"),
            "familyName": obj.get("familyName"),
            "fullAddress": obj.get("fullAddress"),
            "gaiaId": obj.get("gaiaId"),
            "givenName": obj.get("givenName"),
            "jobTitle": obj.get("jobTitle"),
            "manager": EnterpriseTopazSidekickCommonPerson.from_dict(obj["manager"]) if obj.get("manager") is not None else None,
            "obfuscatedId": obj.get("obfuscatedId"),
            "photoUrl": obj.get("photoUrl"),
            "streetAddress": obj.get("streetAddress")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
EnterpriseTopazSidekickCommonPerson.model_rebuild(raise_errors=False)


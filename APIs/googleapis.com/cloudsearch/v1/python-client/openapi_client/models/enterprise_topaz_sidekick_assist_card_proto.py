# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_topaz_sidekick_agenda_entry import EnterpriseTopazSidekickAgendaEntry
from openapi_client.models.enterprise_topaz_sidekick_agenda_group_card_proto import EnterpriseTopazSidekickAgendaGroupCardProto
from openapi_client.models.enterprise_topaz_sidekick_answer_suggested_query_answer_card import EnterpriseTopazSidekickAnswerSuggestedQueryAnswerCard
from openapi_client.models.enterprise_topaz_sidekick_card_metadata import EnterpriseTopazSidekickCardMetadata
from openapi_client.models.enterprise_topaz_sidekick_conflicting_events_card_proto import EnterpriseTopazSidekickConflictingEventsCardProto
from openapi_client.models.enterprise_topaz_sidekick_document_per_category_list import EnterpriseTopazSidekickDocumentPerCategoryList
from openapi_client.models.enterprise_topaz_sidekick_find_meeting_time_card_proto import EnterpriseTopazSidekickFindMeetingTimeCardProto
from openapi_client.models.enterprise_topaz_sidekick_generic_answer_card import EnterpriseTopazSidekickGenericAnswerCard
from openapi_client.models.enterprise_topaz_sidekick_get_and_keep_ahead_card_proto import EnterpriseTopazSidekickGetAndKeepAheadCardProto
from openapi_client.models.enterprise_topaz_sidekick_meeting_notes_card_proto import EnterpriseTopazSidekickMeetingNotesCardProto
from openapi_client.models.enterprise_topaz_sidekick_meeting_notes_card_request import EnterpriseTopazSidekickMeetingNotesCardRequest
from openapi_client.models.enterprise_topaz_sidekick_people_answer_person_answer_card import EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard
from openapi_client.models.enterprise_topaz_sidekick_people_answer_related_people_answer_card import EnterpriseTopazSidekickPeopleAnswerRelatedPeopleAnswerCard
from openapi_client.models.enterprise_topaz_sidekick_people_disambiguation_card import EnterpriseTopazSidekickPeopleDisambiguationCard
from openapi_client.models.enterprise_topaz_sidekick_person_profile_card import EnterpriseTopazSidekickPersonProfileCard
from openapi_client.models.enterprise_topaz_sidekick_personalized_docs_card_proto import EnterpriseTopazSidekickPersonalizedDocsCardProto
from openapi_client.models.enterprise_topaz_sidekick_recent_documents_card_proto import EnterpriseTopazSidekickRecentDocumentsCardProto
from openapi_client.models.enterprise_topaz_sidekick_share_meeting_docs_card_proto import EnterpriseTopazSidekickShareMeetingDocsCardProto
from openapi_client.models.people_promotion_card import PeoplePromotionCard
from openapi_client.models.third_party_generic_card import ThirdPartyGenericCard
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseTopazSidekickAssistCardProto(BaseModel):
    """
    Wrapper proto for the Assist cards.
    """ # noqa: E501
    agenda_group_card_proto: Optional[EnterpriseTopazSidekickAgendaGroupCardProto] = Field(default=None, alias="agendaGroupCardProto")
    card_metadata: Optional[EnterpriseTopazSidekickCardMetadata] = Field(default=None, alias="cardMetadata")
    card_type: Optional[StrictStr] = Field(default=None, description="Card type.", alias="cardType")
    conflicting_meetings_card: Optional[EnterpriseTopazSidekickConflictingEventsCardProto] = Field(default=None, alias="conflictingMeetingsCard")
    document_list_card: Optional[EnterpriseTopazSidekickDocumentPerCategoryList] = Field(default=None, alias="documentListCard")
    documents_with_mentions: Optional[EnterpriseTopazSidekickDocumentPerCategoryList] = Field(default=None, alias="documentsWithMentions")
    find_meeting_time_card: Optional[EnterpriseTopazSidekickFindMeetingTimeCardProto] = Field(default=None, alias="findMeetingTimeCard")
    generic_answer_card: Optional[EnterpriseTopazSidekickGenericAnswerCard] = Field(default=None, alias="genericAnswerCard")
    get_and_keep_ahead_card: Optional[EnterpriseTopazSidekickGetAndKeepAheadCardProto] = Field(default=None, alias="getAndKeepAheadCard")
    meeting: Optional[EnterpriseTopazSidekickAgendaEntry] = None
    meeting_notes_card: Optional[EnterpriseTopazSidekickMeetingNotesCardProto] = Field(default=None, alias="meetingNotesCard")
    meeting_notes_card_request: Optional[EnterpriseTopazSidekickMeetingNotesCardRequest] = Field(default=None, alias="meetingNotesCardRequest")
    people_disambiguation_card: Optional[EnterpriseTopazSidekickPeopleDisambiguationCard] = Field(default=None, alias="peopleDisambiguationCard")
    people_promotion_card: Optional[PeoplePromotionCard] = Field(default=None, alias="peoplePromotionCard")
    person_answer_card: Optional[EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard] = Field(default=None, alias="personAnswerCard")
    person_profile_card: Optional[EnterpriseTopazSidekickPersonProfileCard] = Field(default=None, alias="personProfileCard")
    personalized_docs_card: Optional[EnterpriseTopazSidekickPersonalizedDocsCardProto] = Field(default=None, alias="personalizedDocsCard")
    related_people_answer_card: Optional[EnterpriseTopazSidekickPeopleAnswerRelatedPeopleAnswerCard] = Field(default=None, alias="relatedPeopleAnswerCard")
    share_meeting_docs_card: Optional[EnterpriseTopazSidekickShareMeetingDocsCardProto] = Field(default=None, alias="shareMeetingDocsCard")
    shared_documents: Optional[EnterpriseTopazSidekickDocumentPerCategoryList] = Field(default=None, alias="sharedDocuments")
    suggested_query_answer_card: Optional[EnterpriseTopazSidekickAnswerSuggestedQueryAnswerCard] = Field(default=None, alias="suggestedQueryAnswerCard")
    third_party_answer_card: Optional[ThirdPartyGenericCard] = Field(default=None, alias="thirdPartyAnswerCard")
    work_in_progress_card_proto: Optional[EnterpriseTopazSidekickRecentDocumentsCardProto] = Field(default=None, alias="workInProgressCardProto")
    __properties: ClassVar[List[str]] = ["agendaGroupCardProto", "cardMetadata", "cardType", "conflictingMeetingsCard", "documentListCard", "documentsWithMentions", "findMeetingTimeCard", "genericAnswerCard", "getAndKeepAheadCard", "meeting", "meetingNotesCard", "meetingNotesCardRequest", "peopleDisambiguationCard", "peoplePromotionCard", "personAnswerCard", "personProfileCard", "personalizedDocsCard", "relatedPeopleAnswerCard", "shareMeetingDocsCard", "sharedDocuments", "suggestedQueryAnswerCard", "thirdPartyAnswerCard", "workInProgressCardProto"]

    @field_validator('card_type')
    def card_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_TYPE', 'AGENDA', 'CHANGELISTS', 'CONFLICTING_MEETINGS', 'CREATE_NOTES_FOR_MEETING', 'CREATE_NOTES_FOR_MEETING_REQUEST', 'CUSTOMER_NEWS', 'FIND_MEETING_TIME', 'NEXT_MEETING', 'PERSONALIZED_DOCS', 'TRENDING_DOCS', 'UPCOMING_TRIP', 'SUMMARY', 'MEETINGS', 'HOMEPAGE', 'SHARE_MEETING_DOCS', 'DISCOVER_PEOPLE', 'HOMEPAGE_V3', 'AGENDA_GROUP', 'WORK_IN_PROGRESS', 'GET_AND_KEEP_AHEAD', 'GENERIC_ANSWER_CARD', 'THIRD_PARTY_ANSWER_CARD', 'DOMAIN_TRENDING_DOCS', 'TEAM_TRENDING_DOCS', 'DOCUMENT_LIST_ANSWER_CARD', 'SUGGESTED_QUERY_ANSWER_CARD', 'PERSON_ANSWER_CARD', 'RELATED_PEOPLE_ANSWER_CARD', 'PERSON_KNOWLEDGE_CARD', 'PEOPLE_SEARCH_PROMOTION_CARD']):
            raise ValueError("must be one of enum values ('UNKNOWN_TYPE', 'AGENDA', 'CHANGELISTS', 'CONFLICTING_MEETINGS', 'CREATE_NOTES_FOR_MEETING', 'CREATE_NOTES_FOR_MEETING_REQUEST', 'CUSTOMER_NEWS', 'FIND_MEETING_TIME', 'NEXT_MEETING', 'PERSONALIZED_DOCS', 'TRENDING_DOCS', 'UPCOMING_TRIP', 'SUMMARY', 'MEETINGS', 'HOMEPAGE', 'SHARE_MEETING_DOCS', 'DISCOVER_PEOPLE', 'HOMEPAGE_V3', 'AGENDA_GROUP', 'WORK_IN_PROGRESS', 'GET_AND_KEEP_AHEAD', 'GENERIC_ANSWER_CARD', 'THIRD_PARTY_ANSWER_CARD', 'DOMAIN_TRENDING_DOCS', 'TEAM_TRENDING_DOCS', 'DOCUMENT_LIST_ANSWER_CARD', 'SUGGESTED_QUERY_ANSWER_CARD', 'PERSON_ANSWER_CARD', 'RELATED_PEOPLE_ANSWER_CARD', 'PERSON_KNOWLEDGE_CARD', 'PEOPLE_SEARCH_PROMOTION_CARD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickAssistCardProto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agenda_group_card_proto
        if self.agenda_group_card_proto:
            _dict['agendaGroupCardProto'] = self.agenda_group_card_proto.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card_metadata
        if self.card_metadata:
            _dict['cardMetadata'] = self.card_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conflicting_meetings_card
        if self.conflicting_meetings_card:
            _dict['conflictingMeetingsCard'] = self.conflicting_meetings_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_list_card
        if self.document_list_card:
            _dict['documentListCard'] = self.document_list_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of documents_with_mentions
        if self.documents_with_mentions:
            _dict['documentsWithMentions'] = self.documents_with_mentions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of find_meeting_time_card
        if self.find_meeting_time_card:
            _dict['findMeetingTimeCard'] = self.find_meeting_time_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of generic_answer_card
        if self.generic_answer_card:
            _dict['genericAnswerCard'] = self.generic_answer_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of get_and_keep_ahead_card
        if self.get_and_keep_ahead_card:
            _dict['getAndKeepAheadCard'] = self.get_and_keep_ahead_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of meeting
        if self.meeting:
            _dict['meeting'] = self.meeting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of meeting_notes_card
        if self.meeting_notes_card:
            _dict['meetingNotesCard'] = self.meeting_notes_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of meeting_notes_card_request
        if self.meeting_notes_card_request:
            _dict['meetingNotesCardRequest'] = self.meeting_notes_card_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of people_disambiguation_card
        if self.people_disambiguation_card:
            _dict['peopleDisambiguationCard'] = self.people_disambiguation_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of people_promotion_card
        if self.people_promotion_card:
            _dict['peoplePromotionCard'] = self.people_promotion_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of person_answer_card
        if self.person_answer_card:
            _dict['personAnswerCard'] = self.person_answer_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of person_profile_card
        if self.person_profile_card:
            _dict['personProfileCard'] = self.person_profile_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of personalized_docs_card
        if self.personalized_docs_card:
            _dict['personalizedDocsCard'] = self.personalized_docs_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of related_people_answer_card
        if self.related_people_answer_card:
            _dict['relatedPeopleAnswerCard'] = self.related_people_answer_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of share_meeting_docs_card
        if self.share_meeting_docs_card:
            _dict['shareMeetingDocsCard'] = self.share_meeting_docs_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shared_documents
        if self.shared_documents:
            _dict['sharedDocuments'] = self.shared_documents.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suggested_query_answer_card
        if self.suggested_query_answer_card:
            _dict['suggestedQueryAnswerCard'] = self.suggested_query_answer_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of third_party_answer_card
        if self.third_party_answer_card:
            _dict['thirdPartyAnswerCard'] = self.third_party_answer_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_in_progress_card_proto
        if self.work_in_progress_card_proto:
            _dict['workInProgressCardProto'] = self.work_in_progress_card_proto.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickAssistCardProto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agendaGroupCardProto": EnterpriseTopazSidekickAgendaGroupCardProto.from_dict(obj["agendaGroupCardProto"]) if obj.get("agendaGroupCardProto") is not None else None,
            "cardMetadata": EnterpriseTopazSidekickCardMetadata.from_dict(obj["cardMetadata"]) if obj.get("cardMetadata") is not None else None,
            "cardType": obj.get("cardType"),
            "conflictingMeetingsCard": EnterpriseTopazSidekickConflictingEventsCardProto.from_dict(obj["conflictingMeetingsCard"]) if obj.get("conflictingMeetingsCard") is not None else None,
            "documentListCard": EnterpriseTopazSidekickDocumentPerCategoryList.from_dict(obj["documentListCard"]) if obj.get("documentListCard") is not None else None,
            "documentsWithMentions": EnterpriseTopazSidekickDocumentPerCategoryList.from_dict(obj["documentsWithMentions"]) if obj.get("documentsWithMentions") is not None else None,
            "findMeetingTimeCard": EnterpriseTopazSidekickFindMeetingTimeCardProto.from_dict(obj["findMeetingTimeCard"]) if obj.get("findMeetingTimeCard") is not None else None,
            "genericAnswerCard": EnterpriseTopazSidekickGenericAnswerCard.from_dict(obj["genericAnswerCard"]) if obj.get("genericAnswerCard") is not None else None,
            "getAndKeepAheadCard": EnterpriseTopazSidekickGetAndKeepAheadCardProto.from_dict(obj["getAndKeepAheadCard"]) if obj.get("getAndKeepAheadCard") is not None else None,
            "meeting": EnterpriseTopazSidekickAgendaEntry.from_dict(obj["meeting"]) if obj.get("meeting") is not None else None,
            "meetingNotesCard": EnterpriseTopazSidekickMeetingNotesCardProto.from_dict(obj["meetingNotesCard"]) if obj.get("meetingNotesCard") is not None else None,
            "meetingNotesCardRequest": EnterpriseTopazSidekickMeetingNotesCardRequest.from_dict(obj["meetingNotesCardRequest"]) if obj.get("meetingNotesCardRequest") is not None else None,
            "peopleDisambiguationCard": EnterpriseTopazSidekickPeopleDisambiguationCard.from_dict(obj["peopleDisambiguationCard"]) if obj.get("peopleDisambiguationCard") is not None else None,
            "peoplePromotionCard": PeoplePromotionCard.from_dict(obj["peoplePromotionCard"]) if obj.get("peoplePromotionCard") is not None else None,
            "personAnswerCard": EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard.from_dict(obj["personAnswerCard"]) if obj.get("personAnswerCard") is not None else None,
            "personProfileCard": EnterpriseTopazSidekickPersonProfileCard.from_dict(obj["personProfileCard"]) if obj.get("personProfileCard") is not None else None,
            "personalizedDocsCard": EnterpriseTopazSidekickPersonalizedDocsCardProto.from_dict(obj["personalizedDocsCard"]) if obj.get("personalizedDocsCard") is not None else None,
            "relatedPeopleAnswerCard": EnterpriseTopazSidekickPeopleAnswerRelatedPeopleAnswerCard.from_dict(obj["relatedPeopleAnswerCard"]) if obj.get("relatedPeopleAnswerCard") is not None else None,
            "shareMeetingDocsCard": EnterpriseTopazSidekickShareMeetingDocsCardProto.from_dict(obj["shareMeetingDocsCard"]) if obj.get("shareMeetingDocsCard") is not None else None,
            "sharedDocuments": EnterpriseTopazSidekickDocumentPerCategoryList.from_dict(obj["sharedDocuments"]) if obj.get("sharedDocuments") is not None else None,
            "suggestedQueryAnswerCard": EnterpriseTopazSidekickAnswerSuggestedQueryAnswerCard.from_dict(obj["suggestedQueryAnswerCard"]) if obj.get("suggestedQueryAnswerCard") is not None else None,
            "thirdPartyAnswerCard": ThirdPartyGenericCard.from_dict(obj["thirdPartyAnswerCard"]) if obj.get("thirdPartyAnswerCard") is not None else None,
            "workInProgressCardProto": EnterpriseTopazSidekickRecentDocumentsCardProto.from_dict(obj["workInProgressCardProto"]) if obj.get("workInProgressCardProto") is not None else None
        })
        return _obj



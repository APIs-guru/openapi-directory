# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.integer_faceting_options import IntegerFacetingOptions
from typing import Optional, Set
from typing_extensions import Self

class FacetOptions(BaseModel):
    """
    Specifies operators to return facet results for. There will be one FacetResult for every source_name/object_type/operator_name combination.
    """ # noqa: E501
    integer_faceting_options: Optional[IntegerFacetingOptions] = Field(default=None, alias="integerFacetingOptions")
    num_facet_buckets: Optional[StrictInt] = Field(default=None, description="Maximum number of facet buckets that should be returned for this facet. Defaults to 10. Maximum value is 100.", alias="numFacetBuckets")
    object_type: Optional[StrictStr] = Field(default=None, description="If object_type is set, only those objects of that type will be used to compute facets. If empty, then all objects will be used to compute facets.", alias="objectType")
    operator_name: Optional[StrictStr] = Field(default=None, description="The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions", alias="operatorName")
    source_name: Optional[StrictStr] = Field(default=None, description="Source name to facet on. Format: datasources/{source_id} If empty, all data sources will be used.", alias="sourceName")
    __properties: ClassVar[List[str]] = ["integerFacetingOptions", "numFacetBuckets", "objectType", "operatorName", "sourceName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FacetOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of integer_faceting_options
        if self.integer_faceting_options:
            _dict['integerFacetingOptions'] = self.integer_faceting_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FacetOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "integerFacetingOptions": IntegerFacetingOptions.from_dict(obj["integerFacetingOptions"]) if obj.get("integerFacetingOptions") is not None else None,
            "numFacetBuckets": obj.get("numFacetBuckets"),
            "objectType": obj.get("objectType"),
            "operatorName": obj.get("operatorName"),
            "sourceName": obj.get("sourceName")
        })
        return _obj



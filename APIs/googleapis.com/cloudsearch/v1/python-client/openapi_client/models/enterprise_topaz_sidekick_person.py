# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseTopazSidekickPerson(BaseModel):
    """
    Person.
    """ # noqa: E501
    affinity_level: Optional[StrictStr] = Field(default=None, description="The level of affinity this person has with the requesting user.", alias="affinityLevel")
    attending_status: Optional[StrictStr] = Field(default=None, description="Attendance status of the person when included in a meeting event.", alias="attendingStatus")
    email: Optional[StrictStr] = Field(default=None, description="Email.")
    gaia_id: Optional[StrictStr] = Field(default=None, description="Gaia id.", alias="gaiaId")
    is_group: Optional[StrictBool] = Field(default=None, description="Whether the invitee is a group.", alias="isGroup")
    name: Optional[StrictStr] = Field(default=None, description="Name.")
    obfuscated_gaia_id: Optional[StrictStr] = Field(default=None, description="Obfuscated Gaia id.", alias="obfuscatedGaiaId")
    photo_url: Optional[StrictStr] = Field(default=None, description="Absolute URL to the profile photo of the person.", alias="photoUrl")
    __properties: ClassVar[List[str]] = ["affinityLevel", "attendingStatus", "email", "gaiaId", "isGroup", "name", "obfuscatedGaiaId", "photoUrl"]

    @field_validator('affinity_level')
    def affinity_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'LOW', 'MEDIUM', 'HIGH']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'LOW', 'MEDIUM', 'HIGH')")
        return value

    @field_validator('attending_status')
    def attending_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AWAITING', 'true', 'false', 'MAYBE']):
            raise ValueError("must be one of enum values ('AWAITING', 'true', 'false', 'MAYBE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickPerson from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickPerson from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affinityLevel": obj.get("affinityLevel"),
            "attendingStatus": obj.get("attendingStatus"),
            "email": obj.get("email"),
            "gaiaId": obj.get("gaiaId"),
            "isGroup": obj.get("isGroup"),
            "name": obj.get("name"),
            "obfuscatedGaiaId": obj.get("obfuscatedGaiaId"),
            "photoUrl": obj.get("photoUrl")
        })
        return _obj



# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.freshness_options import FreshnessOptions
from openapi_client.models.object_display_options import ObjectDisplayOptions
from typing import Optional, Set
from typing_extensions import Self

class ObjectOptions(BaseModel):
    """
    The options for an object.
    """ # noqa: E501
    display_options: Optional[ObjectDisplayOptions] = Field(default=None, alias="displayOptions")
    freshness_options: Optional[FreshnessOptions] = Field(default=None, alias="freshnessOptions")
    suggestion_filtering_operators: Optional[List[StrictStr]] = Field(default=None, description="Operators that can be used to filter suggestions. For Suggest API, only operators mentioned here will be honored in the FilterOptions. Only TEXT and ENUM operators are supported. NOTE: \"objecttype\", \"type\" and \"mimetype\" are already supported. This property is to configure schema specific operators. Even though this is an array, only one operator can be specified. This is an array for future extensibility. Operators mapping to multiple properties within the same object are not supported. If the operator spans across different object types, this option has to be set once for each object definition.", alias="suggestionFilteringOperators")
    __properties: ClassVar[List[str]] = ["displayOptions", "freshnessOptions", "suggestionFilteringOperators"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObjectOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of display_options
        if self.display_options:
            _dict['displayOptions'] = self.display_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of freshness_options
        if self.freshness_options:
            _dict['freshnessOptions'] = self.freshness_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObjectOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayOptions": ObjectDisplayOptions.from_dict(obj["displayOptions"]) if obj.get("displayOptions") is not None else None,
            "freshnessOptions": FreshnessOptions.from_dict(obj["freshnessOptions"]) if obj.get("freshnessOptions") is not None else None,
            "suggestionFilteringOperators": obj.get("suggestionFilteringOperators")
        })
        return _obj



# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.principal import Principal
from typing import Optional, Set
from typing_extensions import Self

class ItemAcl(BaseModel):
    """
    Access control list information for the item. For more information see [Map ACLs](https://developers.google.com/cloud-search/docs/guides/acls).
    """ # noqa: E501
    acl_inheritance_type: Optional[StrictStr] = Field(default=None, description="Sets the type of access rules to apply when an item inherits its ACL from a parent. This should always be set in tandem with the inheritAclFrom field. Also, when the inheritAclFrom field is set, this field should be set to a valid AclInheritanceType.", alias="aclInheritanceType")
    denied_readers: Optional[List[Principal]] = Field(default=None, description="List of principals who are explicitly denied access to the item in search results. While principals are denied access by default, use denied readers to handle exceptions and override the list allowed readers. The maximum number of elements is 100.", alias="deniedReaders")
    inherit_acl_from: Optional[StrictStr] = Field(default=None, description="The name of the item to inherit the Access Permission List (ACL) from. Note: ACL inheritance *only* provides access permissions to child items and does not define structural relationships, nor does it provide convenient ways to delete large groups of items. Deleting an ACL parent from the index only alters the access permissions of child items that reference the parent in the inheritAclFrom field. The item is still in the index, but may not visible in search results. By contrast, deletion of a container item also deletes all items that reference the container via the containerName field. The maximum length for this field is 1536 characters.", alias="inheritAclFrom")
    owners: Optional[List[Principal]] = Field(default=None, description="Optional. List of owners for the item. This field has no bearing on document access permissions. It does, however, offer a slight ranking boosts items where the querying user is an owner. The maximum number of elements is 5.")
    readers: Optional[List[Principal]] = Field(default=None, description="List of principals who are allowed to see the item in search results. Optional if inheriting permissions from another item or if the item is not intended to be visible, such as virtual containers. The maximum number of elements is 1000.")
    __properties: ClassVar[List[str]] = ["aclInheritanceType", "deniedReaders", "inheritAclFrom", "owners", "readers"]

    @field_validator('acl_inheritance_type')
    def acl_inheritance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NOT_APPLICABLE', 'CHILD_OVERRIDE', 'PARENT_OVERRIDE', 'BOTH_PERMIT']):
            raise ValueError("must be one of enum values ('NOT_APPLICABLE', 'CHILD_OVERRIDE', 'PARENT_OVERRIDE', 'BOTH_PERMIT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemAcl from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in denied_readers (list)
        _items = []
        if self.denied_readers:
            for _item_denied_readers in self.denied_readers:
                if _item_denied_readers:
                    _items.append(_item_denied_readers.to_dict())
            _dict['deniedReaders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in owners (list)
        _items = []
        if self.owners:
            for _item_owners in self.owners:
                if _item_owners:
                    _items.append(_item_owners.to_dict())
            _dict['owners'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in readers (list)
        _items = []
        if self.readers:
            for _item_readers in self.readers:
                if _item_readers:
                    _items.append(_item_readers.to_dict())
            _dict['readers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemAcl from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aclInheritanceType": obj.get("aclInheritanceType"),
            "deniedReaders": [Principal.from_dict(_item) for _item in obj["deniedReaders"]] if obj.get("deniedReaders") is not None else None,
            "inheritAclFrom": obj.get("inheritAclFrom"),
            "owners": [Principal.from_dict(_item) for _item in obj["owners"]] if obj.get("owners") is not None else None,
            "readers": [Principal.from_dict(_item) for _item in obj["readers"]] if obj.get("readers") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_topaz_sidekick_common_debug_info import EnterpriseTopazSidekickCommonDebugInfo
from openapi_client.models.enterprise_topaz_sidekick_common_document_drive_document_metadata import EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata
from openapi_client.models.enterprise_topaz_sidekick_common_document_justification import EnterpriseTopazSidekickCommonDocumentJustification
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseTopazSidekickCommonDocument(BaseModel):
    """
    Representation of a document. NEXT_TAG: 15
    """ # noqa: E501
    access_type: Optional[StrictStr] = Field(default=None, description="Access type, i.e., whether the user has access to the document or not.", alias="accessType")
    debug_info: Optional[EnterpriseTopazSidekickCommonDebugInfo] = Field(default=None, alias="debugInfo")
    document_id: Optional[StrictStr] = Field(default=None, description="Document id.", alias="documentId")
    drive_document_metadata: Optional[EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata] = Field(default=None, alias="driveDocumentMetadata")
    generic_url: Optional[StrictStr] = Field(default=None, description="Generic Drive-based url in the format of drive.google.com/open to be used for deeplink", alias="genericUrl")
    justification: Optional[EnterpriseTopazSidekickCommonDocumentJustification] = None
    mime_type: Optional[StrictStr] = Field(default=None, description="MIME type", alias="mimeType")
    provenance: Optional[StrictStr] = Field(default=None, description="Document provenance.")
    reason: Optional[StrictStr] = Field(default=None, description="Justification of why this document is being returned.")
    snippet: Optional[StrictStr] = Field(default=None, description="A sampling of the text from the document.")
    thumbnail_url: Optional[StrictStr] = Field(default=None, description="Thumbnail URL.", alias="thumbnailUrl")
    title: Optional[StrictStr] = Field(default=None, description="Title of the document.")
    type: Optional[StrictStr] = Field(default=None, description="Type of the document.")
    url: Optional[StrictStr] = Field(default=None, description="Absolute URL of the document.")
    __properties: ClassVar[List[str]] = ["accessType", "debugInfo", "documentId", "driveDocumentMetadata", "genericUrl", "justification", "mimeType", "provenance", "reason", "snippet", "thumbnailUrl", "title", "type", "url"]

    @field_validator('access_type')
    def access_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_ACCESS', 'ALLOWED', 'NOT_ALLOWED']):
            raise ValueError("must be one of enum values ('UNKNOWN_ACCESS', 'ALLOWED', 'NOT_ALLOWED')")
        return value

    @field_validator('provenance')
    def provenance_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_PROVENANCE', 'CALENDAR_DESCRIPTION', 'CALENDAR_ATTACHMENT', 'MINED', 'CALENDAR_ASSIST_ATTACHMENT']):
            raise ValueError("must be one of enum values ('UNKNOWN_PROVENANCE', 'CALENDAR_DESCRIPTION', 'CALENDAR_ATTACHMENT', 'MINED', 'CALENDAR_ASSIST_ATTACHMENT')")
        return value

    @field_validator('reason')
    def reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'TRENDING_IN_COLLABORATORS', 'TRENDING_IN_DOMAIN', 'FREQUENTLY_VIEWED', 'FREQUENTLY_EDITED', 'NEW_UPDATES', 'NEW_COMMENTS', 'EVENT_DESCRIPTION', 'EVENT_ATTACHMENT', 'EVENT_METADATA_ATTACHMENT', 'MINED_DOCUMENT', 'NEW_MENTIONS', 'NEW_SHARES']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'TRENDING_IN_COLLABORATORS', 'TRENDING_IN_DOMAIN', 'FREQUENTLY_VIEWED', 'FREQUENTLY_EDITED', 'NEW_UPDATES', 'NEW_COMMENTS', 'EVENT_DESCRIPTION', 'EVENT_ATTACHMENT', 'EVENT_METADATA_ATTACHMENT', 'MINED_DOCUMENT', 'NEW_MENTIONS', 'NEW_SHARES')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'DOCUMENT', 'PRESENTATION', 'SPREADSHEET', 'PDF', 'IMAGE', 'BINARY_BLOB', 'FUSION_TABLE', 'FOLDER', 'DRAWING', 'VIDEO', 'FORM', 'LINK_URL', 'LINK_GO', 'LINK_GOO_GL', 'LINK_BIT_LY', 'LINK_GMAIL', 'LINK_MAILTO', 'VIDEO_YOUTUBE', 'VIDEO_LIVE', 'GROUPS', 'NEWS', 'SITES', 'HANGOUT', 'AUDIO', 'MS_WORD', 'MS_POWERPOINT', 'MS_EXCEL', 'MS_OUTLOOK']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'DOCUMENT', 'PRESENTATION', 'SPREADSHEET', 'PDF', 'IMAGE', 'BINARY_BLOB', 'FUSION_TABLE', 'FOLDER', 'DRAWING', 'VIDEO', 'FORM', 'LINK_URL', 'LINK_GO', 'LINK_GOO_GL', 'LINK_BIT_LY', 'LINK_GMAIL', 'LINK_MAILTO', 'VIDEO_YOUTUBE', 'VIDEO_LIVE', 'GROUPS', 'NEWS', 'SITES', 'HANGOUT', 'AUDIO', 'MS_WORD', 'MS_POWERPOINT', 'MS_EXCEL', 'MS_OUTLOOK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickCommonDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of debug_info
        if self.debug_info:
            _dict['debugInfo'] = self.debug_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of drive_document_metadata
        if self.drive_document_metadata:
            _dict['driveDocumentMetadata'] = self.drive_document_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of justification
        if self.justification:
            _dict['justification'] = self.justification.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickCommonDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessType": obj.get("accessType"),
            "debugInfo": EnterpriseTopazSidekickCommonDebugInfo.from_dict(obj["debugInfo"]) if obj.get("debugInfo") is not None else None,
            "documentId": obj.get("documentId"),
            "driveDocumentMetadata": EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.from_dict(obj["driveDocumentMetadata"]) if obj.get("driveDocumentMetadata") is not None else None,
            "genericUrl": obj.get("genericUrl"),
            "justification": EnterpriseTopazSidekickCommonDocumentJustification.from_dict(obj["justification"]) if obj.get("justification") is not None else None,
            "mimeType": obj.get("mimeType"),
            "provenance": obj.get("provenance"),
            "reason": obj.get("reason"),
            "snippet": obj.get("snippet"),
            "thumbnailUrl": obj.get("thumbnailUrl"),
            "title": obj.get("title"),
            "type": obj.get("type"),
            "url": obj.get("url")
        })
        return _obj



# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.repository_error import RepositoryError
from typing import Optional, Set
from typing_extensions import Self

class PushItem(BaseModel):
    """
    Represents an item to be pushed to the indexing queue.
    """ # noqa: E501
    content_hash: Optional[StrictStr] = Field(default=None, description="Content hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.", alias="contentHash")
    metadata_hash: Optional[StrictStr] = Field(default=None, description="The metadata hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.", alias="metadataHash")
    payload: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Provides additional document state information for the connector, such as an alternate repository ID and other metadata. The maximum length is 8192 bytes.")
    queue: Optional[StrictStr] = Field(default=None, description="Queue to which this item belongs. The `default` queue is chosen if this field is not specified. The maximum length is 512 characters.")
    repository_error: Optional[RepositoryError] = Field(default=None, alias="repositoryError")
    structured_data_hash: Optional[StrictStr] = Field(default=None, description="Structured data hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.", alias="structuredDataHash")
    type: Optional[StrictStr] = Field(default=None, description="The type of the push operation that defines the push behavior.")
    __properties: ClassVar[List[str]] = ["contentHash", "metadataHash", "payload", "queue", "repositoryError", "structuredDataHash", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'MODIFIED', 'NOT_MODIFIED', 'REPOSITORY_ERROR', 'REQUEUE']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'MODIFIED', 'NOT_MODIFIED', 'REPOSITORY_ERROR', 'REQUEUE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PushItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of repository_error
        if self.repository_error:
            _dict['repositoryError'] = self.repository_error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PushItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentHash": obj.get("contentHash"),
            "metadataHash": obj.get("metadataHash"),
            "payload": obj.get("payload"),
            "queue": obj.get("queue"),
            "repositoryError": RepositoryError.from_dict(obj["repositoryError"]) if obj.get("repositoryError") is not None else None,
            "structuredDataHash": obj.get("structuredDataHash"),
            "type": obj.get("type")
        })
        return _obj



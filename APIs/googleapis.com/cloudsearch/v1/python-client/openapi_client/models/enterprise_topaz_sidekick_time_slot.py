# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseTopazSidekickTimeSlot(BaseModel):
    """
    Slot of time.
    """ # noqa: E501
    end_time_day: Optional[StrictStr] = Field(default=None, description="Day end time at the user's timezone.", alias="endTimeDay")
    end_time_hour_and_minute: Optional[StrictStr] = Field(default=None, description="Hour and minute of the end time at the user's timezone.", alias="endTimeHourAndMinute")
    end_time_in_millis: Optional[StrictStr] = Field(default=None, description="End time in milliseconds.", alias="endTimeInMillis")
    start_time_day: Optional[StrictStr] = Field(default=None, description="Day start time at user's timezone.", alias="startTimeDay")
    start_time_hour_and_minute: Optional[StrictStr] = Field(default=None, description="Hour and minute of the start time at the user's timezone.", alias="startTimeHourAndMinute")
    start_time_in_millis: Optional[StrictStr] = Field(default=None, description="Start time in milliseconds.", alias="startTimeInMillis")
    __properties: ClassVar[List[str]] = ["endTimeDay", "endTimeHourAndMinute", "endTimeInMillis", "startTimeDay", "startTimeHourAndMinute", "startTimeInMillis"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickTimeSlot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickTimeSlot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTimeDay": obj.get("endTimeDay"),
            "endTimeHourAndMinute": obj.get("endTimeHourAndMinute"),
            "endTimeInMillis": obj.get("endTimeInMillis"),
            "startTimeDay": obj.get("startTimeDay"),
            "startTimeHourAndMinute": obj.get("startTimeHourAndMinute"),
            "startTimeInMillis": obj.get("startTimeInMillis")
        })
        return _obj



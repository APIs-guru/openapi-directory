# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error_info import ErrorInfo
from openapi_client.models.facet_result import FacetResult
from openapi_client.models.query_interpretation import QueryInterpretation
from openapi_client.models.response_debug_info import ResponseDebugInfo
from openapi_client.models.result_counts import ResultCounts
from openapi_client.models.search_result import SearchResult
from openapi_client.models.spell_result import SpellResult
from openapi_client.models.structured_result import StructuredResult
from typing import Optional, Set
from typing_extensions import Self

class SearchResponse(BaseModel):
    """
    The search API response.
    """ # noqa: E501
    debug_info: Optional[ResponseDebugInfo] = Field(default=None, alias="debugInfo")
    error_info: Optional[ErrorInfo] = Field(default=None, alias="errorInfo")
    facet_results: Optional[List[FacetResult]] = Field(default=None, description="Repeated facet results.", alias="facetResults")
    has_more_results: Optional[StrictBool] = Field(default=None, description="Whether there are more search results matching the query.", alias="hasMoreResults")
    query_interpretation: Optional[QueryInterpretation] = Field(default=None, alias="queryInterpretation")
    result_count_estimate: Optional[StrictStr] = Field(default=None, description="The estimated result count for this query.", alias="resultCountEstimate")
    result_count_exact: Optional[StrictStr] = Field(default=None, description="The exact result count for this query.", alias="resultCountExact")
    result_counts: Optional[ResultCounts] = Field(default=None, alias="resultCounts")
    results: Optional[List[SearchResult]] = Field(default=None, description="Results from a search query.")
    spell_results: Optional[List[SpellResult]] = Field(default=None, description="Suggested spelling for the query.", alias="spellResults")
    structured_results: Optional[List[StructuredResult]] = Field(default=None, description="Structured results for the user query. These results are not counted against the page_size.", alias="structuredResults")
    __properties: ClassVar[List[str]] = ["debugInfo", "errorInfo", "facetResults", "hasMoreResults", "queryInterpretation", "resultCountEstimate", "resultCountExact", "resultCounts", "results", "spellResults", "structuredResults"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of debug_info
        if self.debug_info:
            _dict['debugInfo'] = self.debug_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error_info
        if self.error_info:
            _dict['errorInfo'] = self.error_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in facet_results (list)
        _items = []
        if self.facet_results:
            for _item_facet_results in self.facet_results:
                if _item_facet_results:
                    _items.append(_item_facet_results.to_dict())
            _dict['facetResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of query_interpretation
        if self.query_interpretation:
            _dict['queryInterpretation'] = self.query_interpretation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of result_counts
        if self.result_counts:
            _dict['resultCounts'] = self.result_counts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item_results in self.results:
                if _item_results:
                    _items.append(_item_results.to_dict())
            _dict['results'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in spell_results (list)
        _items = []
        if self.spell_results:
            for _item_spell_results in self.spell_results:
                if _item_spell_results:
                    _items.append(_item_spell_results.to_dict())
            _dict['spellResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in structured_results (list)
        _items = []
        if self.structured_results:
            for _item_structured_results in self.structured_results:
                if _item_structured_results:
                    _items.append(_item_structured_results.to_dict())
            _dict['structuredResults'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "debugInfo": ResponseDebugInfo.from_dict(obj["debugInfo"]) if obj.get("debugInfo") is not None else None,
            "errorInfo": ErrorInfo.from_dict(obj["errorInfo"]) if obj.get("errorInfo") is not None else None,
            "facetResults": [FacetResult.from_dict(_item) for _item in obj["facetResults"]] if obj.get("facetResults") is not None else None,
            "hasMoreResults": obj.get("hasMoreResults"),
            "queryInterpretation": QueryInterpretation.from_dict(obj["queryInterpretation"]) if obj.get("queryInterpretation") is not None else None,
            "resultCountEstimate": obj.get("resultCountEstimate"),
            "resultCountExact": obj.get("resultCountExact"),
            "resultCounts": ResultCounts.from_dict(obj["resultCounts"]) if obj.get("resultCounts") is not None else None,
            "results": [SearchResult.from_dict(_item) for _item in obj["results"]] if obj.get("results") is not None else None,
            "spellResults": [SpellResult.from_dict(_item) for _item in obj["spellResults"]] if obj.get("spellResults") is not None else None,
            "structuredResults": [StructuredResult.from_dict(_item) for _item in obj["structuredResults"]] if obj.get("structuredResults") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Search API

    Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_topaz_sidekick_nlp_metadata import EnterpriseTopazSidekickNlpMetadata
from openapi_client.models.enterprise_topaz_sidekick_ranking_params import EnterpriseTopazSidekickRankingParams
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseTopazSidekickCardMetadata(BaseModel):
    """
    Card metadata.
    """ # noqa: E501
    card_category: Optional[StrictStr] = Field(default=None, description="Declares a preference for how this card should be packed in MSCR. All cards in a response must correspond to a single category. As a result, cards may be dropped from the response if this field is set. Any card that does not match the category of the card with the highest priority in the response will be dropped.", alias="cardCategory")
    card_id: Optional[StrictStr] = Field(default=None, description="An ID to identify the card and match actions to it. Be thoughtful of new card IDs since actions will be associated to that ID. E.g., if two card IDs collide, the system will think that the actions have been applied to the same card. Similarly, if EAS can return multiple cards of the same type (e.g., Meetings), ensure that the card_id identifies a given instance of the card so that, e.g., dismissals only affect the dismissed card as opposed to affecting all meeting cards.", alias="cardId")
    chronology: Optional[StrictStr] = Field(default=None, description="Chronology.")
    debug_info: Optional[StrictStr] = Field(default=None, description="Debug info (only reported if request's debug_level > 0).", alias="debugInfo")
    nlp_metadata: Optional[EnterpriseTopazSidekickNlpMetadata] = Field(default=None, alias="nlpMetadata")
    ranking_params: Optional[EnterpriseTopazSidekickRankingParams] = Field(default=None, alias="rankingParams")
    render_mode: Optional[StrictStr] = Field(default=None, description="Render mode.", alias="renderMode")
    __properties: ClassVar[List[str]] = ["cardCategory", "cardId", "chronology", "debugInfo", "nlpMetadata", "rankingParams", "renderMode"]

    @field_validator('card_category')
    def card_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEFAULT', 'ANSWER', 'KNOWLEDGE', 'HOMEPAGE']):
            raise ValueError("must be one of enum values ('DEFAULT', 'ANSWER', 'KNOWLEDGE', 'HOMEPAGE')")
        return value

    @field_validator('chronology')
    def chronology_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'PAST', 'RECENTLY_PAST', 'PRESENT', 'NEAR_FUTURE', 'FUTURE']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'PAST', 'RECENTLY_PAST', 'PRESENT', 'NEAR_FUTURE', 'FUTURE')")
        return value

    @field_validator('render_mode')
    def render_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_RENDER', 'COLLAPSED', 'EXPANDED']):
            raise ValueError("must be one of enum values ('UNKNOWN_RENDER', 'COLLAPSED', 'EXPANDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickCardMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of nlp_metadata
        if self.nlp_metadata:
            _dict['nlpMetadata'] = self.nlp_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ranking_params
        if self.ranking_params:
            _dict['rankingParams'] = self.ranking_params.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseTopazSidekickCardMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cardCategory": obj.get("cardCategory"),
            "cardId": obj.get("cardId"),
            "chronology": obj.get("chronology"),
            "debugInfo": obj.get("debugInfo"),
            "nlpMetadata": EnterpriseTopazSidekickNlpMetadata.from_dict(obj["nlpMetadata"]) if obj.get("nlpMetadata") is not None else None,
            "rankingParams": EnterpriseTopazSidekickRankingParams.from_dict(obj["rankingParams"]) if obj.get("rankingParams") is not None else None,
            "renderMode": obj.get("renderMode")
        })
        return _obj



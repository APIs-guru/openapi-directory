openapi: 3.0.0
servers:
  - url: https://admin-remotebuildexecution.googleapis.com/
info:
  contact:
    name: Google
    url: https://google.com
    x-twitter: youtube
  description: Supplies a Remote Execution API service for tools such as bazel.
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: Remote Build Execution API
  version: v1alpha
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-apisguru-categories:
    - analytics
    - media
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
    - format: openapi
      url: https://admin-remotebuildexecution.googleapis.com/$discovery/rest?version=v1alpha
      version: "3.0"
  x-providerName: googleapis.com
  x-serviceName: remotebuildexecution
externalDocs:
  url: https://cloud.google.com/remote-build-execution/docs/
tags:
  - name: projects
paths:
  /v1alpha/{name}:
    delete:
      description: Deletes the specified worker pool. Returns a long running operation, which contains a `google.protobuf.Empty` response on completion. While the long running operation is in progress, any call to `GetWorkerPool` returns a worker pool in state `DELETING`.
      operationId: remotebuildexecution.projects.instances.workerpools.delete
      parameters:
        - description: "Name of the worker pool to delete. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]/workerpools/[POOL_ID]`."
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoogleLongrunningOperation"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: remotebuildexecution.projects.operations.get
      parameters:
        - description: The name of the operation resource.
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoogleLongrunningOperation"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    patch:
      description: Updates an existing worker pool with a specified size and/or configuration. Returns a long running operation, which contains a worker pool on completion. While the long running operation is in progress, any call to `GetWorkerPool` returns a worker pool in state `UPDATING`.
      operationId: remotebuildexecution.projects.instances.workerpools.patch
      parameters:
        - description: "WorkerPool resource name formatted as: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]/workerpools/[POOL_ID]`. name should not be populated when creating a worker pool since it is provided in the `poolId` field."
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: Deprecated, use instance.logging_enabled instead. Whether to enable Stackdriver logging for this instance.
          in: query
          name: loggingEnabled
          schema:
            type: boolean
        - description: "Deprecated, use instance.Name instead. Name of the instance to update. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`."
          in: query
          name: name1
          schema:
            type: string
        - description: The update mask applies to instance. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask If an empty update_mask is provided, only the non-default valued field in the worker pool field will be updated. Note that in order to update a field to the default value (zero, false, empty string) an explicit update_mask must be provided.
          in: query
          name: updateMask
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaUpdateWorkerPoolRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoogleLongrunningOperation"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  /v1alpha/{name}:testNotify:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Sends a test notification to the specified instance. Returns a `google.protobuf.Empty` on success.
      operationId: remotebuildexecution.projects.instances.testNotify
      parameters:
        - description: "Name of the instance for which to send a test notification. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`."
          in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaTestNotifyInstanceRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoogleProtobufEmpty"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  /v1alpha/{parent}/instances:
    get:
      description: Lists instances in a project.
      operationId: remotebuildexecution.projects.instances.list
      parameters:
        - description: "Required. Resource name of the project. Format: `projects/[PROJECT_ID]`."
          in: path
          name: parent
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaListInstancesResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Creates a new instance in the specified region. Returns a long running operation which contains an instance on completion. While the long running operation is in progress, any call to `GetInstance` returns an instance in state `CREATING`.
      operationId: remotebuildexecution.projects.instances.create
      parameters:
        - description: "Required. Resource name of the project containing the instance. Format: `projects/[PROJECT_ID]`."
          in: path
          name: parent
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaCreateInstanceRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoogleLongrunningOperation"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  /v1alpha/{parent}/workerpools:
    get:
      description: Lists worker pools in an instance.
      operationId: remotebuildexecution.projects.instances.workerpools.list
      parameters:
        - description: "Resource name of the instance. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`."
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: "Optional. A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. String values are case-insensitive. The comparison operator must be either `:`, `=`, `!=`, `>`, `>=`, `<=` or `<`. The `:` operator can be used with string fields to match substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. You can also filter on nested fields. To filter on multiple expressions, you can separate expression using `AND` and `OR` operators, using parentheses to specify precedence. If neither operator is specified, `AND` is assumed. Examples: Include only pools with more than 100 reserved workers: `(worker_count > 100) (worker_config.reserved = true)` Include only pools with a certain label or machines of the e2-standard family: `worker_config.labels.key1 : * OR worker_config.machine_type: e2-standard`"
          in: query
          name: filter
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Creates a new worker pool with a specified size and configuration. Returns a long running operation which contains a worker pool on completion. While the long running operation is in progress, any call to `GetWorkerPool` returns a worker pool in state `CREATING`.
      operationId: remotebuildexecution.projects.instances.workerpools.create
      parameters:
        - description: "Resource name of the instance in which to create the new worker pool. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`."
          in: path
          name: parent
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaCreateWorkerPoolRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoogleLongrunningOperation"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
components:
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        enum:
          - "1"
          - "2"
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        enum:
          - json
          - media
          - proto
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
  schemas:
    BuildBazelRemoteExecutionV2Action:
      description: An `Action` captures all the information about an execution which is required to reproduce it. `Action`s are the core component of the [Execution] service. A single `Action` represents a repeatable action that can be performed by the execution service. `Action`s can be succinctly identified by the digest of their wire format encoding and, once an `Action` has been executed, will be cached in the action cache. Future requests can then use the cached result rather than needing to run afresh. When a server completes execution of an Action, it MAY choose to cache the result in the ActionCache unless `do_not_cache` is `true`. Clients SHOULD expect the server to do so. By default, future calls to Execute the same `Action` will also serve their results from the cache. Clients must take care to understand the caching behaviour. Ideally, all `Action`s will be reproducible so that serving a result from cache is always desirable and correct.
      properties:
        commandDigest:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2Digest"
          description: The digest of the Command to run, which MUST be present in the ContentAddressableStorage.
        doNotCache:
          description: If true, then the `Action`'s result cannot be cached, and in-flight requests for the same `Action` may not be merged.
          type: boolean
        inputRootDigest:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2Digest"
          description: The digest of the root Directory for the input files. The files in the directory tree are available in the correct location on the build machine before the command is executed. The root directory, as well as every subdirectory and content blob referred to, MUST be in the ContentAddressableStorage.
        platform:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2Platform"
          description: "The optional platform requirements for the execution environment. The server MAY choose to execute the action on any worker satisfying the requirements, so the client SHOULD ensure that running the action on any such worker will have the same result. A detailed lexicon for this can be found in the accompanying platform.md. New in version 2.2: clients SHOULD set these platform properties as well as those in the Command. Servers SHOULD prefer those set here."
        salt:
          description: An optional additional salt value used to place this `Action` into a separate cache namespace from other instances having the same field contents. This salt typically comes from operational configuration specific to sources such as repo and service configuration, and allows disowning an entire set of ActionResults that might have been poisoned by buggy software or tool failures.
          format: byte
          type: string
        timeout:
          description: A timeout after which the execution should be killed. If the timeout is absent, then the client is specifying that the execution should continue as long as the server will let it. The server SHOULD impose a timeout if the client does not specify one, however, if the client does specify a timeout that is longer than the server's maximum timeout, the server MUST reject the request. The timeout is only intended to cover the "execution" of the specified action and not time in queue nor any overheads before or after execution such as marshalling inputs/outputs. The server SHOULD avoid including time spent the client doesn't have control over, and MAY extend or reduce the timeout to account for delays or speedups that occur during execution itself (e.g., lazily loading data from the Content Addressable Storage, live migration of virtual machines, emulation overhead). The timeout is a part of the Action message, and therefore two `Actions` with different timeouts are different, even if they are otherwise identical. This is because, if they were not, running an `Action` with a lower timeout than is required might result in a cache hit from an execution run with a longer timeout, hiding the fact that the timeout is too short. By encoding it directly in the `Action`, a lower timeout will result in a cache miss and the execution timeout will fail immediately, rather than whenever the cache entry gets evicted.
          format: google-duration
          type: string
      type: object
    BuildBazelRemoteExecutionV2ActionResult:
      description: An ActionResult represents the result of an Action being run. It is advised that at least one field (for example `ActionResult.execution_metadata.Worker`) have a non-default value, to ensure that the serialized value is non-empty, which can then be used as a basic data sanity check.
      properties:
        executionMetadata:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2ExecutedActionMetadata"
          description: The details of the execution that originally produced this result.
        exitCode:
          description: The exit code of the command.
          format: int32
          type: integer
        outputDirectories:
          description: 'The output directories of the action. For each output directory requested in the `output_directories` or `output_paths` field of the Action, if the corresponding directory existed after the action completed, a single entry will be present in the output list, which will contain the digest of a Tree message containing the directory tree, and the path equal exactly to the corresponding Action output_directories member. As an example, suppose the Action had an output directory `a/b/dir` and the execution produced the following contents in `a/b/dir`: a file named `bar` and a directory named `foo` with an executable file named `baz`. Then, output_directory will contain (hashes shortened for readability): ```json // OutputDirectory proto: { path: "a/b/dir" tree_digest: { hash: "4a73bc9d03...", size: 55 } } // Tree proto with hash "4a73bc9d03..." and size 55: { root: { files: [ { name: "bar", digest: { hash: "4a73bc9d03...", size: 65534 } } ], directories: [ { name: "foo", digest: { hash: "4cf2eda940...", size: 43 } } ] } children : { // (Directory proto with hash "4cf2eda940..." and size 43) files: [ { name: "baz", digest: { hash: "b2c941073e...", size: 1294, }, is_executable: true } ] } } ``` If an output of the same name as listed in `output_files` of the Command was found in `output_directories`, but was not a directory, the server will return a FAILED_PRECONDITION.'
          items:
            $ref: "#/components/schemas/BuildBazelRemoteExecutionV2OutputDirectory"
          type: array
        outputDirectorySymlinks:
          deprecated: true
          description: The output directories of the action that are symbolic links to other directories. Those may be links to other output directories, or input directories, or even absolute paths outside of the working directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. For each output directory requested in the `output_directories` field of the Action, if the directory existed after the action completed, a single entry will be present either in this field, or in the `output_directories` field, if the directory was not a symbolic link. If an output of the same name was found, but was a symbolic link to a file instead of a directory, the server will return a FAILED_PRECONDITION. If the action does not produce the requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted. DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API should still populate this field in addition to `output_symlinks`.
          items:
            $ref: "#/components/schemas/BuildBazelRemoteExecutionV2OutputSymlink"
          type: array
        outputFileSymlinks:
          deprecated: true
          description: The output files of the action that are symbolic links to other files. Those may be links to other output files, or input files, or even absolute paths outside of the working directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. For each output file requested in the `output_files` or `output_paths` field of the Action, if the corresponding file existed after the action completed, a single entry will be present either in this field, or in the `output_files` field, if the file was not a symbolic link. If an output symbolic link of the same name as listed in `output_files` of the Command was found, but its target type was not a regular file, the server will return a FAILED_PRECONDITION. If the action does not produce the requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted. DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API should still populate this field in addition to `output_symlinks`.
          items:
            $ref: "#/components/schemas/BuildBazelRemoteExecutionV2OutputSymlink"
          type: array
        outputFiles:
          description: The output files of the action. For each output file requested in the `output_files` or `output_paths` field of the Action, if the corresponding file existed after the action completed, a single entry will be present either in this field, or the `output_file_symlinks` field if the file was a symbolic link to another file (`output_symlinks` field after v2.1). If an output listed in `output_files` was found, but was a directory rather than a regular file, the server will return a FAILED_PRECONDITION. If the action does not produce the requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted.
          items:
            $ref: "#/components/schemas/BuildBazelRemoteExecutionV2OutputFile"
          type: array
        outputSymlinks:
          description: "New in v2.1: this field will only be populated if the command `output_paths` field was used, and not the pre v2.1 `output_files` or `output_directories` fields. The output paths of the action that are symbolic links to other paths. Those may be links to other outputs, or inputs, or even absolute paths outside of the working directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. A single entry for each output requested in `output_paths` field of the Action, if the corresponding path existed after the action completed and was a symbolic link. If the action does not produce a requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted."
          items:
            $ref: "#/components/schemas/BuildBazelRemoteExecutionV2OutputSymlink"
          type: array
        stderrDigest:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2Digest"
          description: The digest for a blob containing the standard error of the action, which can be retrieved from the ContentAddressableStorage.
        stderrRaw:
          description: The standard error buffer of the action. The server SHOULD NOT inline stderr unless requested by the client in the GetActionResultRequest message. The server MAY omit inlining, even if requested, and MUST do so if inlining would cause the response to exceed message size limits. Clients SHOULD NOT populate this field when uploading to the cache.
          format: byte
          type: string
        stdoutDigest:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2Digest"
          description: The digest for a blob containing the standard output of the action, which can be retrieved from the ContentAddressableStorage.
        stdoutRaw:
          description: The standard output buffer of the action. The server SHOULD NOT inline stdout unless requested by the client in the GetActionResultRequest message. The server MAY omit inlining, even if requested, and MUST do so if inlining would cause the response to exceed message size limits. Clients SHOULD NOT populate this field when uploading to the cache.
          format: byte
          type: string
      type: object
    BuildBazelRemoteExecutionV2Command:
      description: A `Command` is the actual command executed by a worker running an Action and specifications of its environment. Except as otherwise required, the environment (such as which system libraries or binaries are available, and what filesystems are mounted where) is defined by and specific to the implementation of the remote execution API.
      properties:
        arguments:
          description: The arguments to the command. The first argument specifies the command to run, which may be either an absolute path, a path relative to the working directory, or an unqualified path (without path separators) which will be resolved using the operating system's equivalent of the PATH environment variable. Path separators native to the operating system running on the worker SHOULD be used. If the `environment_variables` list contains an entry for the PATH environment variable, it SHOULD be respected. If not, the resolution process is implementation-defined. Changed in v2.3. v2.2 and older require that no PATH lookups are performed, and that relative paths are resolved relative to the input root. This behavior can, however, not be relied upon, as most implementations already followed the rules described above.
          items:
            type: string
          type: array
        environmentVariables:
          description: The environment variables to set when running the program. The worker may provide its own default environment variables; these defaults can be overridden using this field. Additional variables can also be specified. In order to ensure that equivalent Commands always hash to the same value, the environment variables MUST be lexicographically sorted by name. Sorting of strings is done by code point, equivalently, by the UTF-8 bytes.
          items:
            $ref: "#/components/schemas/BuildBazelRemoteExecutionV2CommandEnvironmentVariable"
          type: array
        outputDirectories:
          deprecated: true
          description: "A list of the output directories that the client expects to retrieve from the action. Only the listed directories will be returned (an entire directory structure will be returned as a Tree message digest, see OutputDirectory), as well as files listed in `output_files`. Other files or directories that may be created during command execution are discarded. The paths are relative to the working directory of the action execution. The paths are specified using a single forward slash (`/`) as a path separator, even if the execution platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a leading slash, being a relative path. The special value of empty string is allowed, although not recommended, and can be used to capture the entire working directory tree, including inputs. In order to ensure consistent hashing of the same Action, the output paths MUST be sorted lexicographically by code point (or, equivalently, by UTF-8 bytes). An output directory cannot be duplicated or have the same path as any of the listed output files. An output directory is allowed to be a parent of another output directory. Directories leading up to the output directories (but not the output directories themselves) are created by the worker prior to execution, even if they are not explicitly part of the input root. DEPRECATED since 2.1: Use `output_paths` instead."
          items:
            type: string
          type: array
        outputFiles:
          deprecated: true
          description: "A list of the output files that the client expects to retrieve from the action. Only the listed files, as well as directories listed in `output_directories`, will be returned to the client as output. Other files or directories that may be created during command execution are discarded. The paths are relative to the working directory of the action execution. The paths are specified using a single forward slash (`/`) as a path separator, even if the execution platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a leading slash, being a relative path. In order to ensure consistent hashing of the same Action, the output paths MUST be sorted lexicographically by code point (or, equivalently, by UTF-8 bytes). An output file cannot be duplicated, be a parent of another output file, or have the same path as any of the listed output directories. Directories leading up to the output files are created by the worker prior to execution, even if they are not explicitly part of the input root. DEPRECATED since v2.1: Use `output_paths` instead."
          items:
            type: string
          type: array
        outputNodeProperties:
          description: A list of keys for node properties the client expects to retrieve for output files and directories. Keys are either names of string-based NodeProperty or names of fields in NodeProperties. In order to ensure that equivalent `Action`s always hash to the same value, the node properties MUST be lexicographically sorted by name. Sorting of strings is done by code point, equivalently, by the UTF-8 bytes. The interpretation of string-based properties is server-dependent. If a property is not recognized by the server, the server will return an `INVALID_ARGUMENT`.
          items:
            type: string
          type: array
        outputPaths:
          description: "A list of the output paths that the client expects to retrieve from the action. Only the listed paths will be returned to the client as output. The type of the output (file or directory) is not specified, and will be determined by the server after action execution. If the resulting path is a file, it will be returned in an OutputFile typed field. If the path is a directory, the entire directory structure will be returned as a Tree message digest, see OutputDirectory Other files or directories that may be created during command execution are discarded. The paths are relative to the working directory of the action execution. The paths are specified using a single forward slash (`/`) as a path separator, even if the execution platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a leading slash, being a relative path. In order to ensure consistent hashing of the same Action, the output paths MUST be deduplicated and sorted lexicographically by code point (or, equivalently, by UTF-8 bytes). Directories leading up to the output paths are created by the worker prior to execution, even if they are not explicitly part of the input root. New in v2.1: this field supersedes the DEPRECATED `output_files` and `output_directories` fields. If `output_paths` is used, `output_files` and `output_directories` will be ignored!"
          items:
            type: string
          type: array
        platform:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2Platform"
          deprecated: true
          description: "The platform requirements for the execution environment. The server MAY choose to execute the action on any worker satisfying the requirements, so the client SHOULD ensure that running the action on any such worker will have the same result. A detailed lexicon for this can be found in the accompanying platform.md. DEPRECATED as of v2.2: platform properties are now specified directly in the action. See documentation note in the Action for migration."
        workingDirectory:
          description: The working directory, relative to the input root, for the command to run in. It must be a directory which exists in the input tree. If it is left empty, then the action is run in the input root.
          type: string
      type: object
    BuildBazelRemoteExecutionV2CommandEnvironmentVariable:
      description: An `EnvironmentVariable` is one variable to set in the running program's environment.
      properties:
        name:
          description: The variable name.
          type: string
        value:
          description: The variable value.
          type: string
      type: object
    BuildBazelRemoteExecutionV2Digest:
      description: "A content digest. A digest for a given blob consists of the size of the blob and its hash. The hash algorithm to use is defined by the server. The size is considered to be an integral part of the digest and cannot be separated. That is, even if the `hash` field is correctly specified but `size_bytes` is not, the server MUST reject the request. The reason for including the size in the digest is as follows: in a great many cases, the server needs to know the size of the blob it is about to work with prior to starting an operation with it, such as flattening Merkle tree structures or streaming it to a worker. Technically, the server could implement a separate metadata store, but this results in a significantly more complicated implementation as opposed to having the client specify the size up-front (or storing the size along with the digest in every message where digests are embedded). This does mean that the API leaks some implementation details of (what we consider to be) a reasonable server implementation, but we consider this to be a worthwhile tradeoff. When a `Digest` is used to refer to a proto message, it always refers to the message in binary encoded form. To ensure consistent hashing, clients and servers MUST ensure that they serialize messages according to the following rules, even if there are alternate valid encodings for the same message: * Fields are serialized in tag order. * There are no unknown fields. * There are no duplicate fields. * Fields are serialized according to the default semantics for their type. Most protocol buffer implementations will always follow these rules when serializing, but care should be taken to avoid shortcuts. For instance, concatenating two messages to merge them may produce duplicate fields."
      properties:
        hash:
          description: The hash. In the case of SHA-256, it will always be a lowercase hex string exactly 64 characters long.
          type: string
        sizeBytes:
          description: The size of the blob, in bytes.
          format: int64
          type: string
      type: object
    BuildBazelRemoteExecutionV2Directory:
      description: 'A `Directory` represents a directory node in a file tree, containing zero or more children FileNodes, DirectoryNodes and SymlinkNodes. Each `Node` contains its name in the directory, either the digest of its content (either a file blob or a `Directory` proto) or a symlink target, as well as possibly some metadata about the file or directory. In order to ensure that two equivalent directory trees hash to the same value, the following restrictions MUST be obeyed when constructing a a `Directory`: * Every child in the directory must have a path of exactly one segment. Multiple levels of directory hierarchy may not be collapsed. * Each child in the directory must have a unique path segment (file name). Note that while the API itself is case-sensitive, the environment where the Action is executed may or may not be case-sensitive. That is, it is legal to call the API with a Directory that has both "Foo" and "foo" as children, but the Action may be rejected by the remote system upon execution. * The files, directories and symlinks in the directory must each be sorted in lexicographical order by path. The path strings must be sorted by code point, equivalently, by UTF-8 bytes. * The NodeProperties of files, directories, and symlinks must be sorted in lexicographical order by property name. A `Directory` that obeys the restrictions is said to be in canonical form. As an example, the following could be used for a file named `bar` and a directory named `foo` with an executable file named `baz` (hashes shortened for readability): ```json // (Directory proto) { files: [ { name: "bar", digest: { hash: "4a73bc9d03...", size: 65534 }, node_properties: [ { "name": "MTime", "value": "2017-01-15T01:30:15.01Z" } ] } ], directories: [ { name: "foo", digest: { hash: "4cf2eda940...", size: 43 } } ] } // (Directory proto with hash "4cf2eda940..." and size 43) { files: [ { name: "baz", digest: { hash: "b2c941073e...", size: 1294, }, is_executable: true } ] } ```'
      properties:
        directories:
          description: The subdirectories in the directory.
          items:
            $ref: "#/components/schemas/BuildBazelRemoteExecutionV2DirectoryNode"
          type: array
        files:
          description: The files in the directory.
          items:
            $ref: "#/components/schemas/BuildBazelRemoteExecutionV2FileNode"
          type: array
        nodeProperties:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2NodeProperties"
        symlinks:
          description: The symlinks in the directory.
          items:
            $ref: "#/components/schemas/BuildBazelRemoteExecutionV2SymlinkNode"
          type: array
      type: object
    BuildBazelRemoteExecutionV2DirectoryNode:
      description: A `DirectoryNode` represents a child of a Directory which is itself a `Directory` and its associated metadata.
      properties:
        digest:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2Digest"
          description: The digest of the Directory object represented. See Digest for information about how to take the digest of a proto message.
        name:
          description: The name of the directory.
          type: string
      type: object
    BuildBazelRemoteExecutionV2ExecuteOperationMetadata:
      description: Metadata about an ongoing execution, which will be contained in the metadata field of the Operation.
      properties:
        actionDigest:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2Digest"
          description: The digest of the Action being executed.
        partialExecutionMetadata:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2ExecutedActionMetadata"
          description: The client can read this field to view details about the ongoing execution.
        stage:
          description: The current stage of execution.
          enum:
            - UNKNOWN
            - CACHE_CHECK
            - QUEUED
            - EXECUTING
            - COMPLETED
          type: string
        stderrStreamName:
          description: If set, the client can use this resource name with ByteStream.Read to stream the standard error from the endpoint hosting streamed responses.
          type: string
        stdoutStreamName:
          description: If set, the client can use this resource name with ByteStream.Read to stream the standard output from the endpoint hosting streamed responses.
          type: string
      type: object
    BuildBazelRemoteExecutionV2ExecuteResponse:
      description: The response message for Execution.Execute, which will be contained in the response field of the Operation.
      properties:
        cachedResult:
          description: True if the result was served from cache, false if it was executed.
          type: boolean
        message:
          description: Freeform informational message with details on the execution of the action that may be displayed to the user upon failure or when requested explicitly.
          type: string
        result:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2ActionResult"
          description: The result of the action.
        serverLogs:
          additionalProperties:
            $ref: "#/components/schemas/BuildBazelRemoteExecutionV2LogFile"
          description: An optional list of additional log outputs the server wishes to provide. A server can use this to return execution-specific logs however it wishes. This is intended primarily to make it easier for users to debug issues that may be outside of the actual job execution, such as by identifying the worker executing the action or by providing logs from the worker's setup phase. The keys SHOULD be human readable so that a client can display them to a user.
          type: object
        status:
          $ref: "#/components/schemas/GoogleRpcStatus"
          description: If the status has a code other than `OK`, it indicates that the action did not finish execution. For example, if the operation times out during execution, the status will have a `DEADLINE_EXCEEDED` code. Servers MUST use this field for errors in execution, rather than the error field on the `Operation` object. If the status code is other than `OK`, then the result MUST NOT be cached. For an error status, the `result` field is optional; the server may populate the output-, stdout-, and stderr-related fields if it has any information available, such as the stdout and stderr of a timed-out action.
      type: object
    BuildBazelRemoteExecutionV2ExecutedActionMetadata:
      description: ExecutedActionMetadata contains details about a completed execution.
      properties:
        auxiliaryMetadata:
          description: Details that are specific to the kind of worker used. For example, on POSIX-like systems this could contain a message with getrusage(2) statistics.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        executionCompletedTimestamp:
          description: When the worker completed executing the action command.
          format: google-datetime
          type: string
        executionStartTimestamp:
          description: When the worker started executing the action command.
          format: google-datetime
          type: string
        inputFetchCompletedTimestamp:
          description: When the worker finished fetching action inputs.
          format: google-datetime
          type: string
        inputFetchStartTimestamp:
          description: When the worker started fetching action inputs.
          format: google-datetime
          type: string
        outputUploadCompletedTimestamp:
          description: When the worker finished uploading action outputs.
          format: google-datetime
          type: string
        outputUploadStartTimestamp:
          description: When the worker started uploading action outputs.
          format: google-datetime
          type: string
        queuedTimestamp:
          description: When was the action added to the queue.
          format: google-datetime
          type: string
        virtualExecutionDuration:
          description: "New in v2.3: the amount of time the worker spent executing the action command, potentially computed using a worker-specific virtual clock. The virtual execution duration is only intended to cover the \"execution\" of the specified action and not time in queue nor any overheads before or after execution such as marshalling inputs/outputs. The server SHOULD avoid including time spent the client doesn't have control over, and MAY extend or reduce the execution duration to account for delays or speedups that occur during execution itself (e.g., lazily loading data from the Content Addressable Storage, live migration of virtual machines, emulation overhead). The method of timekeeping used to compute the virtual execution duration MUST be consistent with what is used to enforce the Action's `timeout`. There is no relationship between the virtual execution duration and the values of `execution_start_timestamp` and `execution_completed_timestamp`."
          format: google-duration
          type: string
        worker:
          description: The name of the worker which ran the execution.
          type: string
        workerCompletedTimestamp:
          description: When the worker completed the action, including all stages.
          format: google-datetime
          type: string
        workerStartTimestamp:
          description: When the worker received the action.
          format: google-datetime
          type: string
      type: object
    BuildBazelRemoteExecutionV2FileNode:
      description: A `FileNode` represents a single file and associated metadata.
      properties:
        digest:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2Digest"
          description: The digest of the file's content.
        isExecutable:
          description: True if file is executable, false otherwise.
          type: boolean
        name:
          description: The name of the file.
          type: string
        nodeProperties:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2NodeProperties"
      type: object
    BuildBazelRemoteExecutionV2LogFile:
      description: A `LogFile` is a log stored in the CAS.
      properties:
        digest:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2Digest"
          description: The digest of the log contents.
        humanReadable:
          description: This is a hint as to the purpose of the log, and is set to true if the log is human-readable text that can be usefully displayed to a user, and false otherwise. For instance, if a command-line client wishes to print the server logs to the terminal for a failed action, this allows it to avoid displaying a binary file.
          type: boolean
      type: object
    BuildBazelRemoteExecutionV2NodeProperties:
      description: Node properties for FileNodes, DirectoryNodes, and SymlinkNodes. The server is responsible for specifying the properties that it accepts.
      properties:
        mtime:
          description: The file's last modification timestamp.
          format: google-datetime
          type: string
        properties:
          description: A list of string-based NodeProperties.
          items:
            $ref: "#/components/schemas/BuildBazelRemoteExecutionV2NodeProperty"
          type: array
        unixMode:
          description: The UNIX file mode, e.g., 0755.
          format: uint32
          type: integer
      type: object
    BuildBazelRemoteExecutionV2NodeProperty:
      description: A single property for FileNodes, DirectoryNodes, and SymlinkNodes. The server is responsible for specifying the property `name`s that it accepts. If permitted by the server, the same `name` may occur multiple times.
      properties:
        name:
          description: The property name.
          type: string
        value:
          description: The property value.
          type: string
      type: object
    BuildBazelRemoteExecutionV2OutputDirectory:
      description: An `OutputDirectory` is the output in an `ActionResult` corresponding to a directory's full contents rather than a single file.
      properties:
        isTopologicallySorted:
          description: "If set, consumers MAY make the following assumptions about the directories contained in the the Tree, so that it may be instantiated on a local file system by scanning through it sequentially: - All directories with the same binary representation are stored exactly once. - All directories, apart from the root directory, are referenced by at least one parent directory. - Directories are stored in topological order, with parents being stored before the child. The root directory is thus the first to be stored. Additionally, the Tree MUST be encoded as a stream of records, where each record has the following format: - A tag byte, having one of the following two values: - (1 << 3) | 2 == 0x0a: First record (the root directory). - (2 << 3) | 2 == 0x12: Any subsequent records (child directories). - The size of the directory, encoded as a base 128 varint. - The contents of the directory, encoded as a binary serialized Protobuf message. This encoding is a subset of the Protobuf wire format of the Tree message. As it is only permitted to store data associated with field numbers 1 and 2, the tag MUST be encoded as a single byte. More details on the Protobuf wire format can be found here: https://developers.google.com/protocol-buffers/docs/encoding It is recommended that implementations using this feature construct Tree objects manually using the specification given above, as opposed to using a Protobuf library to marshal a full Tree message. As individual Directory messages already need to be marshaled to compute their digests, constructing the Tree object manually avoids redundant marshaling."
          type: boolean
        path:
          description: The full path of the directory relative to the working directory. The path separator is a forward slash `/`. Since this is a relative path, it MUST NOT begin with a leading forward slash. The empty string value is allowed, and it denotes the entire working directory.
          type: string
        treeDigest:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2Digest"
          description: The digest of the encoded Tree proto containing the directory's contents.
      type: object
    BuildBazelRemoteExecutionV2OutputFile:
      description: An `OutputFile` is similar to a FileNode, but it is used as an output in an `ActionResult`. It allows a full file path rather than only a name.
      properties:
        contents:
          description: The contents of the file if inlining was requested. The server SHOULD NOT inline file contents unless requested by the client in the GetActionResultRequest message. The server MAY omit inlining, even if requested, and MUST do so if inlining would cause the response to exceed message size limits. Clients SHOULD NOT populate this field when uploading to the cache.
          format: byte
          type: string
        digest:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2Digest"
          description: The digest of the file's content.
        isExecutable:
          description: True if file is executable, false otherwise.
          type: boolean
        nodeProperties:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2NodeProperties"
        path:
          description: The full path of the file relative to the working directory, including the filename. The path separator is a forward slash `/`. Since this is a relative path, it MUST NOT begin with a leading forward slash.
          type: string
      type: object
    BuildBazelRemoteExecutionV2OutputSymlink:
      description: An `OutputSymlink` is similar to a Symlink, but it is used as an output in an `ActionResult`. `OutputSymlink` is binary-compatible with `SymlinkNode`.
      properties:
        nodeProperties:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2NodeProperties"
        path:
          description: The full path of the symlink relative to the working directory, including the filename. The path separator is a forward slash `/`. Since this is a relative path, it MUST NOT begin with a leading forward slash.
          type: string
        target:
          description: The target path of the symlink. The path separator is a forward slash `/`. The target path can be relative to the parent directory of the symlink or it can be an absolute path starting with `/`. Support for absolute paths can be checked using the Capabilities API. `..` components are allowed anywhere in the target path.
          type: string
      type: object
    BuildBazelRemoteExecutionV2Platform:
      description: A `Platform` is a set of requirements, such as hardware, operating system, or compiler toolchain, for an Action's execution environment. A `Platform` is represented as a series of key-value pairs representing the properties that are required of the platform.
      properties:
        properties:
          description: The properties that make up this platform. In order to ensure that equivalent `Platform`s always hash to the same value, the properties MUST be lexicographically sorted by name, and then by value. Sorting of strings is done by code point, equivalently, by the UTF-8 bytes.
          items:
            $ref: "#/components/schemas/BuildBazelRemoteExecutionV2PlatformProperty"
          type: array
      type: object
    BuildBazelRemoteExecutionV2PlatformProperty:
      description: A single property for the environment. The server is responsible for specifying the property `name`s that it accepts. If an unknown `name` is provided in the requirements for an Action, the server SHOULD reject the execution request. If permitted by the server, the same `name` may occur multiple times. The server is also responsible for specifying the interpretation of property `value`s. For instance, a property describing how much RAM must be available may be interpreted as allowing a worker with 16GB to fulfill a request for 8GB, while a property describing the OS environment on which the action must be performed may require an exact match with the worker's OS. The server MAY use the `value` of one or more properties to determine how it sets up the execution environment, such as by making specific system files available to the worker. Both names and values are typically case-sensitive. Note that the platform is implicitly part of the action digest, so even tiny changes in the names or values (like changing case) may result in different action cache entries.
      properties:
        name:
          description: The property name.
          type: string
        value:
          description: The property value.
          type: string
      type: object
    BuildBazelRemoteExecutionV2RequestMetadata:
      description: "An optional Metadata to attach to any RPC request to tell the server about an external context of the request. The server may use this for logging or other purposes. To use it, the client attaches the header to the call using the canonical proto serialization: * name: `build.bazel.remote.execution.v2.requestmetadata-bin` * contents: the base64 encoded binary `RequestMetadata` message. Note: the gRPC library serializes binary headers encoded in base64 by default (https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests). Therefore, if the gRPC library is used to pass/retrieve this metadata, the user may ignore the base64 encoding and assume it is simply serialized as a binary message."
      properties:
        actionId:
          description: An identifier that ties multiple requests to the same action. For example, multiple requests to the CAS, Action Cache, and Execution API are used in order to compile foo.cc.
          type: string
        actionMnemonic:
          description: A brief description of the kind of action, for example, CppCompile or GoLink. There is no standard agreed set of values for this, and they are expected to vary between different client tools.
          type: string
        configurationId:
          description: An identifier for the configuration in which the target was built, e.g. for differentiating building host tools or different target platforms. There is no expectation that this value will have any particular structure, or equality across invocations, though some client tools may offer these guarantees.
          type: string
        correlatedInvocationsId:
          description: An identifier to tie multiple tool invocations together. For example, runs of foo_test, bar_test and baz_test on a post-submit of a given patch.
          type: string
        targetId:
          description: An identifier for the target which produced this action. No guarantees are made around how many actions may relate to a single target.
          type: string
        toolDetails:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2ToolDetails"
          description: The details for the tool invoking the requests.
        toolInvocationId:
          description: An identifier that ties multiple actions together to a final result. For example, multiple actions are required to build and run foo_test.
          type: string
      type: object
    BuildBazelRemoteExecutionV2SymlinkNode:
      description: A `SymlinkNode` represents a symbolic link.
      properties:
        name:
          description: The name of the symlink.
          type: string
        nodeProperties:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2NodeProperties"
        target:
          description: The target path of the symlink. The path separator is a forward slash `/`. The target path can be relative to the parent directory of the symlink or it can be an absolute path starting with `/`. Support for absolute paths can be checked using the Capabilities API. `..` components are allowed anywhere in the target path as logical canonicalization may lead to different behavior in the presence of directory symlinks (e.g. `foo/../bar` may not be the same as `bar`). To reduce potential cache misses, canonicalization is still recommended where this is possible without impacting correctness.
          type: string
      type: object
    BuildBazelRemoteExecutionV2ToolDetails:
      description: Details for the tool used to call the API.
      properties:
        toolName:
          description: Name of the tool, e.g. bazel.
          type: string
        toolVersion:
          description: Version of the tool used for the request, e.g. 5.0.3.
          type: string
      type: object
    BuildBazelRemoteExecutionV2Tree:
      description: A `Tree` contains all the Directory protos in a single directory Merkle tree, compressed into one message.
      properties:
        children:
          description: "All the child directories: the directories referred to by the root and, recursively, all its children. In order to reconstruct the directory tree, the client must take the digests of each of the child directories and then build up a tree starting from the `root`. Servers SHOULD ensure that these are ordered consistently such that two actions producing equivalent output directories on the same server implementation also produce Tree messages with matching digests."
          items:
            $ref: "#/components/schemas/BuildBazelRemoteExecutionV2Directory"
          type: array
        root:
          $ref: "#/components/schemas/BuildBazelRemoteExecutionV2Directory"
          description: The root directory in the tree.
      type: object
    GoogleDevtoolsRemotebuildbotCommandDurations:
      description: CommandDuration contains the various duration metrics tracked when a bot performs a command.
      properties:
        casRelease:
          description: The time spent to release the CAS blobs used by the task.
          format: google-duration
          type: string
        cmWaitForAssignment:
          description: The time spent waiting for Container Manager to assign an asynchronous container for execution.
          format: google-duration
          type: string
        dockerPrep:
          description: The time spent preparing the command to be run in a Docker container (includes pulling the Docker image, if necessary).
          format: google-duration
          type: string
        dockerPrepStartTime:
          description: The timestamp when docker preparation begins.
          format: google-datetime
          type: string
        download:
          description: The time spent downloading the input files and constructing the working directory.
          format: google-duration
          type: string
        downloadStartTime:
          description: The timestamp when downloading the input files begins.
          format: google-datetime
          type: string
        execStartTime:
          description: The timestamp when execution begins.
          format: google-datetime
          type: string
        execution:
          description: The time spent executing the command (i.e., doing useful work).
          format: google-duration
          type: string
        isoPrepDone:
          description: The timestamp when preparation is done and bot starts downloading files.
          format: google-datetime
          type: string
        overall:
          description: The time spent completing the command, in total.
          format: google-duration
          type: string
        stderr:
          description: The time spent uploading the stderr logs.
          format: google-duration
          type: string
        stdout:
          description: The time spent uploading the stdout logs.
          format: google-duration
          type: string
        upload:
          description: The time spent uploading the output files.
          format: google-duration
          type: string
        uploadStartTime:
          description: The timestamp when uploading the output files begins.
          format: google-datetime
          type: string
      type: object
    GoogleDevtoolsRemotebuildbotCommandEvents:
      description: CommandEvents contains counters for the number of warnings and errors that occurred during the execution of a command.
      properties:
        cmUsage:
          description: Indicates if and how Container Manager is being used for task execution.
          enum:
            - CONFIG_NONE
            - CONFIG_MATCH
            - CONFIG_MISMATCH
          type: string
        dockerCacheHit:
          description: Indicates whether we are using a cached Docker image (true) or had to pull the Docker image (false) for this command.
          type: boolean
        dockerImageName:
          description: Docker Image name.
          type: string
        inputCacheMissBytes:
          description: The input cache miss rate as a fraction of the total size of input files.
          format: float
          type: number
        inputCacheMissFiles:
          description: The input cache miss rate as a fraction of the number of input files.
          format: float
          type: number
        numErrors:
          description: The number of errors reported.
          format: uint64
          type: string
        numWarnings:
          description: The number of warnings reported.
          format: uint64
          type: string
        outputLocation:
          description: Indicates whether output files and/or output directories were found relative to the execution root or to the user provided work directory or both or none.
          enum:
            - LOCATION_UNDEFINED
            - LOCATION_NONE
            - LOCATION_EXEC_ROOT_RELATIVE
            - LOCATION_WORKING_DIR_RELATIVE
            - LOCATION_EXEC_ROOT_AND_WORKING_DIR_RELATIVE
            - LOCATION_EXEC_ROOT_RELATIVE_OUTPUT_OUTSIDE_WORKING_DIR
            - LOCATION_EXEC_ROOT_AND_WORKING_DIR_RELATIVE_OUTPUT_OUTSIDE_WORKING_DIR
          type: string
          x-enumDeprecated:
            - false
            - false
            - false
            - false
            - false
            - true
            - true
        usedAsyncContainer:
          description: Indicates whether an asynchronous container was used for execution.
          type: boolean
      type: object
    GoogleDevtoolsRemotebuildbotCommandStatus:
      description: The internal status of the command result.
      properties:
        code:
          description: The status code.
          enum:
            - OK
            - INVALID_ARGUMENT
            - DEADLINE_EXCEEDED
            - NOT_FOUND
            - PERMISSION_DENIED
            - INTERNAL
            - ABORTED
            - FAILED_PRECONDITION
            - CLEANUP_ERROR
            - DOWNLOAD_INPUTS_ERROR
            - UNKNOWN
            - UPLOAD_OUTPUTS_ERROR
            - UPLOAD_OUTPUTS_BYTES_LIMIT_EXCEEDED
            - DOCKER_LOGIN_ERROR
            - DOCKER_IMAGE_PULL_ERROR
            - DOCKER_IMAGE_EXIST_ERROR
            - DUPLICATE_INPUTS
            - DOCKER_IMAGE_PERMISSION_DENIED
            - DOCKER_IMAGE_NOT_FOUND
            - WORKING_DIR_NOT_FOUND
            - WORKING_DIR_NOT_IN_BASE_DIR
            - DOCKER_UNAVAILABLE
            - NO_CUDA_CAPABLE_DEVICE
            - REMOTE_CAS_DOWNLOAD_ERROR
            - REMOTE_CAS_UPLOAD_ERROR
            - LOCAL_CASPROXY_NOT_RUNNING
            - DOCKER_CREATE_CONTAINER_ERROR
            - DOCKER_INVALID_ULIMIT
            - DOCKER_UNKNOWN_RUNTIME
            - DOCKER_UNKNOWN_CAPABILITY
            - DOCKER_UNKNOWN_ERROR
            - DOCKER_CREATE_COMPUTE_SYSTEM_ERROR
            - DOCKER_PREPARELAYER_ERROR
            - DOCKER_INCOMPATIBLE_OS_ERROR
            - DOCKER_CREATE_RUNTIME_FILE_NOT_FOUND
            - DOCKER_CREATE_RUNTIME_PERMISSION_DENIED
            - DOCKER_CREATE_PROCESS_FILE_NOT_FOUND
            - DOCKER_CREATE_COMPUTE_SYSTEM_INCORRECT_PARAMETER_ERROR
            - DOCKER_TOO_MANY_SYMBOLIC_LINK_LEVELS
            - LOCAL_CONTAINER_MANAGER_NOT_RUNNING
            - DOCKER_IMAGE_VPCSC_PERMISSION_DENIED
            - WORKING_DIR_NOT_RELATIVE
            - DOCKER_MISSING_CONTAINER
            - DOCKER_MISSING_BLOB_IN_IMAGE
            - DOCKER_INVALID_VOLUME
            - DOCKER_CREATE_RUNTIME_CANNOT_MOUNT_TO_PROC
            - DOCKER_START_RUNTIME_FILE_NOT_FOUND
            - DOCKER_CREATE_INVALID_LAYERCHAIN_JSON
            - INCOMPATIBLE_CUDA_VERSION
            - LOCAL_WORKER_MANAGER_NOT_RUNNING
            - DOCKER_START_RUNTIME_FILE_FORMAT_ERROR
            - DOCKER_START_RUNTIME_PERMISSION_DENIED
            - DOCKER_PERMISSION_DENIED
          type: string
        message:
          description: The error message.
          type: string
      type: object
    GoogleDevtoolsRemotebuildbotResourceUsage:
      description: ResourceUsage is the system resource usage of the host machine.
      properties:
        botState:
          enum:
            - UNSPECIFIED
            - IDLE
            - BUSY
          type: string
        cpuUsedPercent:
          format: double
          type: number
        diskUsage:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildbotResourceUsageStat"
        dockerRootDiskUsage:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildbotResourceUsageStat"
        memoryUsage:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildbotResourceUsageStat"
        totalDiskIoStats:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildbotResourceUsageIOStats"
      type: object
    GoogleDevtoolsRemotebuildbotResourceUsageIOStats:
      properties:
        readBytesCount:
          format: uint64
          type: string
        readCount:
          format: uint64
          type: string
        readTimeMs:
          format: uint64
          type: string
        writeBytesCount:
          format: uint64
          type: string
        writeCount:
          format: uint64
          type: string
        writeTimeMs:
          format: uint64
          type: string
      type: object
    GoogleDevtoolsRemotebuildbotResourceUsageStat:
      properties:
        total:
          format: uint64
          type: string
        used:
          format: uint64
          type: string
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig:
      description: AcceleratorConfig defines the accelerator cards to attach to the VM.
      properties:
        acceleratorCount:
          description: The number of guest accelerator cards exposed to each VM.
          format: int64
          type: string
        acceleratorType:
          description: The type of accelerator to attach to each VM, e.g. "nvidia-tesla-k80" for nVidia Tesla K80.
          type: string
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaAutoscale:
      description: Autoscale defines the autoscaling policy of a worker pool.
      properties:
        maxSize:
          description: Optional. The maximal number of workers. Must be equal to or greater than min_size.
          format: int64
          type: string
        minIdleWorkers:
          description: Optional. The minimum number of idle workers the autoscaler will aim to have in the pool at all times that are immediately available to accept a surge in build traffic. The pool size will still be constrained by min_size and max_size.
          format: int64
          type: string
        minSize:
          description: Optional. The minimal number of workers. Must be greater than 0.
          format: int64
          type: string
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaCreateInstanceRequest:
      description: The request used for `CreateInstance`.
      properties:
        instance:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance"
          description: Required. Specifies the instance to create. The name in the instance, if specified in the instance, is ignored.
        instanceId:
          description: "Required. ID of the created instance. A valid `instance_id` must: be 6-50 characters long, contain only lowercase letters, digits, hyphens and underscores, start with a lowercase letter, and end with a lowercase letter or a digit."
          type: string
        parent:
          description: "Required. Resource name of the project containing the instance. Format: `projects/[PROJECT_ID]`."
          type: string
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaCreateWorkerPoolRequest:
      description: The request used for `CreateWorkerPool`.
      properties:
        parent:
          description: "Resource name of the instance in which to create the new worker pool. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`."
          type: string
        poolId:
          description: "ID of the created worker pool. A valid pool ID must: be 6-50 characters long, contain only lowercase letters, digits, hyphens and underscores, start with a lowercase letter, and end with a lowercase letter or a digit."
          type: string
        workerPool:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool"
          description: Specifies the worker pool to create. The name in the worker pool, if specified, is ignored.
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaDeleteInstanceRequest:
      description: The request used for `DeleteInstance`.
      properties:
        name:
          description: "Required. Name of the instance to delete. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`."
          type: string
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaDeleteWorkerPoolRequest:
      description: The request used for DeleteWorkerPool.
      properties:
        name:
          description: "Name of the worker pool to delete. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]/workerpools/[POOL_ID]`."
          type: string
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks:
      description: Disks defines the disks that would be attached to the workers.
      properties:
        dockerRootDisk:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk"
          description: Optional. Specifies the configuration for the docker root disk to be attached. If not specified, RBE will default to the RBE managed docker root disk.
        localSsd:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksLocalSSD"
          description: Optional. Specifies the number of local SSDs to be attached. If specified, local SSDs will be used as the working directory.
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksLocalSSD:
      description: LocalSSD specifies how to attach local SSD to the workers.
      properties:
        count:
          description: Optional. The number of Local SSDs to be attached.
          format: int64
          type: string
        sizeGb:
          description: Output only. The size of the local SSD in gb. Intended for informational purposes only.
          format: int64
          readOnly: true
          type: string
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk:
      description: PersistentDisk specifies how to attach a persistent disk to the workers.
      properties:
        diskSizeGb:
          description: Required. Size of the disk in GB.
          format: int64
          type: string
        diskType:
          description: Required. Type of disk attached (supported types are pd-standard and pd-ssd).
          type: string
        sourceImage:
          description: Required. VM image to use for the disk.
          type: string
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy:
      description: FeaturePolicy defines features allowed to be used on RBE instances, as well as instance-wide behavior changes that take effect without opt-in or opt-out at usage time.
      properties:
        actionHermeticity:
          description: "Defines the hermeticity policy for actions on this instance. DO NOT USE: Experimental / unlaunched feature."
          enum:
            - ACTION_HERMETICITY_UNSPECIFIED
            - ACTION_HERMETICITY_OFF
            - ACTION_HERMETICITY_ENFORCED
            - ACTION_HERMETICITY_BEST_EFFORT
          type: string
        actionIsolation:
          description: "Defines the isolation policy for actions on this instance. DO NOT USE: Experimental / unlaunched feature."
          enum:
            - ACTION_ISOLATION_UNSPECIFIED
            - ACTION_ISOLATION_OFF
            - ACTION_ISOLATION_ENFORCED
          type: string
        containerImageSources:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature"
          description: 'Which container image sources are allowed. Currently only RBE-supported registry (gcr.io) is allowed. One can allow all repositories under a project or one specific repository only. E.g. container_image_sources { policy: RESTRICTED allowed_values: [ "gcr.io/project-foo", "gcr.io/project-bar/repo-baz", ] } will allow any repositories under "gcr.io/project-foo" plus the repository "gcr.io/project-bar/repo-baz". Default (UNSPECIFIED) is equivalent to any source is allowed.'
        dockerAddCapabilities:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature"
          description: Whether dockerAddCapabilities can be used or what capabilities are allowed.
        dockerChrootPath:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature"
          description: Whether dockerChrootPath can be used.
        dockerNetwork:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature"
          description: Whether dockerNetwork can be used or what network modes are allowed. E.g. one may allow `off` value only via `allowed_values`.
        dockerPrivileged:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature"
          description: Whether dockerPrivileged can be used.
        dockerRunAsContainerProvidedUser:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature"
          description: Whether dockerRunAsContainerProvidedUser can be used.
        dockerRunAsRoot:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature"
          description: Whether dockerRunAsRoot can be used.
        dockerRuntime:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature"
          description: Whether dockerRuntime is allowed to be set or what runtimes are allowed. Note linux_isolation takes precedence, and if set, docker_runtime values may be rejected if they are incompatible with the selected isolation.
        dockerSiblingContainers:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature"
          description: Whether dockerSiblingContainers can be used.
        dockerUlimits:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature"
          description: Whether dockerUlimits are allowed to be set.
        linuxExecution:
          description: "Defines how Linux actions are allowed to execute. DO NOT USE: Experimental / unlaunched feature."
          enum:
            - LINUX_EXECUTION_UNSPECIFIED
            - LINUX_EXECUTION_FORBIDDEN
            - LINUX_EXECUTION_UNRESTRICTED
            - LINUX_EXECUTION_HARDENED_GVISOR
            - LINUX_EXECUTION_HARDENED_GVISOR_OR_TERMINAL
          type: string
        linuxIsolation:
          description: linux_isolation allows overriding the docker runtime used for containers started on Linux.
          enum:
            - LINUX_ISOLATION_UNSPECIFIED
            - GVISOR
            - OFF
          type: string
        macExecution:
          description: "Defines how Windows actions are allowed to execute. DO NOT USE: Experimental / unlaunched feature."
          enum:
            - MAC_EXECUTION_UNSPECIFIED
            - MAC_EXECUTION_FORBIDDEN
          type: string
        vmVerification:
          description: Whether to verify CreateBotSession and UpdateBotSession from the bot.
          enum:
            - VM_VERIFICATION_UNSPECIFIED
            - VM_VERIFICATION_GCP_TOKEN
            - VM_VERIFICATION_OFF
          type: string
        windowsExecution:
          description: "Defines how Windows actions are allowed to execute. DO NOT USE: Experimental / unlaunched feature."
          enum:
            - WINDOWS_EXECUTION_UNSPECIFIED
            - WINDOWS_EXECUTION_FORBIDDEN
            - WINDOWS_EXECUTION_UNRESTRICTED
            - WINDOWS_EXECUTION_TERMINAL
          type: string
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature:
      description: Defines whether a feature can be used or what values are accepted.
      properties:
        allowedValues:
          description: A list of acceptable values. Only effective when the policy is `RESTRICTED`.
          items:
            type: string
          type: array
        policy:
          description: The policy of the feature.
          enum:
            - POLICY_UNSPECIFIED
            - ALLOWED
            - FORBIDDEN
            - RESTRICTED
          type: string
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaGetInstanceRequest:
      description: The request used for `GetInstance`.
      properties:
        name:
          description: "Required. Name of the instance to retrieve. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`."
          type: string
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaGetWorkerPoolRequest:
      description: The request used for GetWorkerPool.
      properties:
        name:
          description: "Name of the worker pool to retrieve. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]/workerpools/[POOL_ID]`."
          type: string
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance:
      description: Instance conceptually encapsulates all Remote Build Execution resources for remote builds. An instance consists of storage and compute resources (for example, `ContentAddressableStorage`, `ActionCache`, `WorkerPools`) used for running remote builds. All Remote Build Execution API calls are scoped to an instance.
      properties:
        featurePolicy:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy"
          description: The policy to define whether or not RBE features can be used or how they can be used.
        location:
          description: The location is a GCP region. Currently only `us-central1` is supported.
          type: string
        loggingEnabled:
          description: Output only. Whether stack driver logging is enabled for the instance.
          readOnly: true
          type: boolean
        name:
          description: "Output only. Instance resource name formatted as: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`. Name should not be populated when creating an instance since it is provided in the `instance_id` field."
          readOnly: true
          type: string
        schedulerNotificationConfig:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaSchedulerNotificationConfig"
          description: The instance's configuration for scheduler notifications. Absence implies that this feature is not enabled for this instance.
        state:
          description: Output only. State of the instance.
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - RUNNING
            - INACTIVE
          readOnly: true
          type: string
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaListInstancesRequest:
      description: The request used for `ListInstances`.
      properties:
        parent:
          description: "Required. Resource name of the project. Format: `projects/[PROJECT_ID]`."
          type: string
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaListInstancesResponse:
      description: The response used for `ListInstances`.
      properties:
        instances:
          description: The list of instances in a given project.
          items:
            $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance"
          type: array
        unreachable:
          description: Unreachable regions.
          items:
            type: string
          type: array
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest:
      properties:
        filter:
          description: "Optional. A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. String values are case-insensitive. The comparison operator must be either `:`, `=`, `!=`, `>`, `>=`, `<=` or `<`. The `:` operator can be used with string fields to match substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. You can also filter on nested fields. To filter on multiple expressions, you can separate expression using `AND` and `OR` operators, using parentheses to specify precedence. If neither operator is specified, `AND` is assumed. Examples: Include only pools with more than 100 reserved workers: `(worker_count > 100) (worker_config.reserved = true)` Include only pools with a certain label or machines of the e2-standard family: `worker_config.labels.key1 : * OR worker_config.machine_type: e2-standard`"
          type: string
        parent:
          description: "Resource name of the instance. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`."
          type: string
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsResponse:
      properties:
        workerPools:
          description: The list of worker pools in a given instance.
          items:
            $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool"
          type: array
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaSchedulerNotificationConfig:
      description: Defines configurations for an instance's scheduler notifications, where a target Pub/Sub topic will be notified whenever a task (e.g. an action or reservation) completes on this instance.
      properties:
        topic:
          description: "The Pub/Sub topic resource name to issue notifications to. Note that the topic does not need to be owned by the same project as this instance. Format: `projects//topics/`."
          type: string
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaTestNotifyInstanceRequest:
      description: The request used for `TestNotifyInstance`.
      properties: {}
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaUpdateInstanceRequest:
      description: The request used for `UpdateInstance`.
      properties:
        instance:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance"
          description: Specifies the instance to update.
        loggingEnabled:
          deprecated: true
          description: Deprecated, use instance.logging_enabled instead. Whether to enable Stackdriver logging for this instance.
          type: boolean
        name:
          deprecated: true
          description: "Deprecated, use instance.Name instead. Name of the instance to update. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`."
          type: string
        updateMask:
          description: The update mask applies to instance. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask If an empty update_mask is provided, only the non-default valued field in the worker pool field will be updated. Note that in order to update a field to the default value (zero, false, empty string) an explicit update_mask must be provided.
          format: google-fieldmask
          type: string
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaUpdateWorkerPoolRequest:
      description: The request used for UpdateWorkerPool.
      properties:
        updateMask:
          description: The update mask applies to worker_pool. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask If an empty update_mask is provided, only the non-default valued field in the worker pool field will be updated. Note that in order to update a field to the default value (zero, false, empty string) an explicit update_mask must be provided.
          format: google-fieldmask
          type: string
        workerPool:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool"
          description: Specifies the worker pool to update.
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig:
      description: Defines the configuration to be used for creating workers in the worker pool.
      properties:
        accelerator:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig"
          description: The accelerator card attached to each VM.
        attachedDisks:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks"
          description: Optional. Specifies the disks that will be attached.
        diskSizeGb:
          description: Required. Size of the disk attached to the worker, in GB. See https://cloud.google.com/compute/docs/disks/
          format: int64
          type: string
        diskType:
          description: Required. Disk Type to use for the worker. See [Storage options](https://cloud.google.com/compute/docs/disks/#introduction). Currently only `pd-standard` and `pd-ssd` are supported.
          type: string
        labels:
          additionalProperties:
            type: string
          description: Labels associated with the workers. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International letters are permitted. Label keys must start with a letter. Label values are optional. There can not be more than 64 labels per resource.
          type: object
        machineType:
          description: Required. Machine type of the worker, such as `e2-standard-2`. See https://cloud.google.com/compute/docs/machine-types for a list of supported machine types. Note that `f1-micro` and `g1-small` are not yet supported.
          type: string
        maxConcurrentActions:
          description: The maximum number of actions a worker can execute concurrently.
          format: int64
          type: string
        minCpuPlatform:
          description: Minimum CPU platform to use when creating the worker. See [CPU Platforms](https://cloud.google.com/compute/docs/cpu-platforms).
          type: string
        networkAccess:
          description: 'Determines the type of network access granted to workers. Possible values: - "public": Workers can connect to the public internet. - "private": Workers can only connect to Google APIs and services. - "restricted-private": Workers can only connect to Google APIs that are reachable through `restricted.googleapis.com` (`199.36.153.4/30`).'
          type: string
        reserved:
          description: Determines whether the worker is reserved (equivalent to a Compute Engine on-demand VM and therefore won't be preempted). See [Preemptible VMs](https://cloud.google.com/preemptible-vms/) for more details.
          type: boolean
        soleTenantNodeType:
          description: The node type name to be used for sole-tenant nodes.
          type: string
        userServiceAccounts:
          description: Optional. List of user service accounts. The last service account in the list is what the user code will run as. The rest of the service accounts constitute the impersonation chain. For example, if len(user_service_accounts) == 2 and if the VM's service account is RBE's P4SA, then RBE'S P4SA should be granted the Service Account Token Creator role on user_service_accounts[0] and user_service_accounts[0] should be granted the Service Account Token Creator role on user_service_accounts[1].
          items:
            type: string
          type: array
        vmImage:
          description: The name of the image used by each VM.
          type: string
        zones:
          description: Optional. Zones in the region where the pool VMs should be. Leave empty for no restrictions.
          items:
            type: string
          type: array
      type: object
    GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool:
      description: A worker pool resource in the Remote Build Execution API.
      properties:
        autoscale:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaAutoscale"
          description: The autoscale policy to apply on a pool.
        channel:
          description: Channel specifies the release channel of the pool.
          type: string
        hostOs:
          description: HostOS specifies the OS version of the image for the worker VMs.
          type: string
        name:
          description: "WorkerPool resource name formatted as: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]/workerpools/[POOL_ID]`. name should not be populated when creating a worker pool since it is provided in the `poolId` field."
          type: string
        state:
          description: Output only. State of the worker pool.
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - RUNNING
            - UPDATING
            - DELETING
            - INACTIVE
          type: string
        workerConfig:
          $ref: "#/components/schemas/GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig"
          description: Specifies the properties, such as machine type and disk size, used for creating workers in a worker pool.
        workerCount:
          description: The desired number of workers in the worker pool. Must be a value between 0 and 15000.
          format: int64
          type: string
      type: object
    GoogleDevtoolsRemoteworkersV1test2AdminTemp:
      description: AdminTemp is a prelimiary set of administration tasks. It's called "Temp" because we do not yet know the best way to represent admin tasks; it's possible that this will be entirely replaced in later versions of this API. If this message proves to be sufficient, it will be renamed in the alpha or beta release of this API. This message (suitably marshalled into a protobuf.Any) can be used as the inline_assignment field in a lease; the lease assignment field should simply be `"admin"` in these cases. This message is heavily based on Swarming administration tasks from the LUCI project (http://github.com/luci/luci-py/appengine/swarming).
      properties:
        arg:
          description: The argument to the admin action; see `Command` for semantics.
          type: string
        command:
          description: The admin action; see `Command` for legal values.
          enum:
            - UNSPECIFIED
            - BOT_UPDATE
            - BOT_RESTART
            - BOT_TERMINATE
            - HOST_RESTART
          type: string
      type: object
    GoogleDevtoolsRemoteworkersV1test2Blob:
      description: Describes a blob of binary content with its digest.
      properties:
        contents:
          description: The contents of the blob.
          format: byte
          type: string
        digest:
          $ref: "#/components/schemas/GoogleDevtoolsRemoteworkersV1test2Digest"
          description: The digest of the blob. This should be verified by the receiver.
      type: object
    GoogleDevtoolsRemoteworkersV1test2CommandOutputs:
      description: DEPRECATED - use CommandResult instead. Describes the actual outputs from the task.
      properties:
        exitCode:
          description: exit_code is only fully reliable if the status' code is OK. If the task exceeded its deadline or was cancelled, the process may still produce an exit code as it is cancelled, and this will be populated, but a successful (zero) is unlikely to be correct unless the status code is OK.
          format: int32
          type: integer
        outputs:
          $ref: "#/components/schemas/GoogleDevtoolsRemoteworkersV1test2Digest"
          description: "The output files. The blob referenced by the digest should contain one of the following (implementation-dependent): * A marshalled DirectoryMetadata of the returned filesystem * A LUCI-style .isolated file"
      type: object
    GoogleDevtoolsRemoteworkersV1test2CommandOverhead:
      description: DEPRECATED - use CommandResult instead. Can be used as part of CompleteRequest.metadata, or are part of a more sophisticated message.
      properties:
        duration:
          description: The elapsed time between calling Accept and Complete. The server will also have its own idea of what this should be, but this excludes the overhead of the RPCs and the bot response time.
          format: google-duration
          type: string
        overhead:
          description: The amount of time *not* spent executing the command (ie uploading/downloading files).
          format: google-duration
          type: string
      type: object
    GoogleDevtoolsRemoteworkersV1test2CommandResult:
      description: All information about the execution of a command, suitable for providing as the Bots interface's `Lease.result` field.
      properties:
        duration:
          deprecated: true
          description: The elapsed time between calling Accept and Complete. The server will also have its own idea of what this should be, but this excludes the overhead of the RPCs and the bot response time.
          format: google-duration
          type: string
        exitCode:
          description: The exit code of the process. An exit code of "0" should only be trusted if `status` has a code of OK (otherwise it may simply be unset).
          format: int32
          type: integer
        metadata:
          description: Implementation-dependent metadata about the task. Both servers and bots may define messages which can be encoded here; bots are free to provide metadata in multiple formats, and servers are free to choose one or more of the values to process and ignore others. In particular, it is *not* considered an error for the bot to provide the server with a field that it doesn't know about.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        outputs:
          $ref: "#/components/schemas/GoogleDevtoolsRemoteworkersV1test2Digest"
          description: "The output files. The blob referenced by the digest should contain one of the following (implementation-dependent): * A marshalled DirectoryMetadata of the returned filesystem * A LUCI-style .isolated file"
        overhead:
          deprecated: true
          description: The amount of time *not* spent executing the command (ie uploading/downloading files).
          format: google-duration
          type: string
        status:
          $ref: "#/components/schemas/GoogleRpcStatus"
          description: An overall status for the command. For example, if the command timed out, this might have a code of DEADLINE_EXCEEDED; if it was killed by the OS for memory exhaustion, it might have a code of RESOURCE_EXHAUSTED.
      type: object
    GoogleDevtoolsRemoteworkersV1test2CommandTask:
      description: Describes a shell-style task to execute, suitable for providing as the Bots interface's `Lease.payload` field.
      properties:
        expectedOutputs:
          $ref: "#/components/schemas/GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs"
          description: The expected outputs from the task.
        inputs:
          $ref: "#/components/schemas/GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs"
          description: The inputs to the task.
        timeouts:
          $ref: "#/components/schemas/GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts"
          description: The timeouts of this task.
      type: object
    GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs:
      description: Describes the inputs to a shell-style task.
      properties:
        arguments:
          description: The command itself to run (e.g., argv). This field should be passed directly to the underlying operating system, and so it must be sensible to that operating system. For example, on Windows, the first argument might be "C:\Windows\System32\ping.exe" - that is, using drive letters and backslashes. A command for a *nix system, on the other hand, would use forward slashes. All other fields in the RWAPI must consistently use forward slashes, since those fields may be interpretted by both the service and the bot.
          items:
            type: string
          type: array
        environmentVariables:
          description: All environment variables required by the task.
          items:
            $ref: "#/components/schemas/GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable"
          type: array
        files:
          description: The input filesystem to be set up prior to the task beginning. The contents should be a repeated set of FileMetadata messages though other formats are allowed if better for the implementation (eg, a LUCI-style .isolated file). This field is repeated since implementations might want to cache the metadata, in which case it may be useful to break up portions of the filesystem that change frequently (eg, specific input files) from those that don't (eg, standard header files).
          items:
            $ref: "#/components/schemas/GoogleDevtoolsRemoteworkersV1test2Digest"
          type: array
        inlineBlobs:
          description: Inline contents for blobs expected to be needed by the bot to execute the task. For example, contents of entries in `files` or blobs that are indirectly referenced by an entry there. The bot should check against this list before downloading required task inputs to reduce the number of communications between itself and the remote CAS server.
          items:
            $ref: "#/components/schemas/GoogleDevtoolsRemoteworkersV1test2Blob"
          type: array
        workingDirectory:
          description: Directory from which a command is executed. It is a relative directory with respect to the bot's working directory (i.e., "./"). If it is non-empty, then it must exist under "./". Otherwise, "./" will be used.
          type: string
      type: object
    GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable:
      description: An environment variable required by this task.
      properties:
        name:
          description: The envvar name.
          type: string
        value:
          description: The envvar value.
          type: string
      type: object
    GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs:
      description: Describes the expected outputs of the command.
      properties:
        directories:
          description: A list of expected directories, relative to the execution root. All paths MUST be delimited by forward slashes.
          items:
            type: string
          type: array
        files:
          description: A list of expected files, relative to the execution root. All paths MUST be delimited by forward slashes.
          items:
            type: string
          type: array
        stderrDestination:
          description: The destination to which any stderr should be sent. The method by which the bot should send the stream contents to that destination is not defined in this API. As examples, the destination could be a file referenced in the `files` field in this message, or it could be a URI that must be written via the ByteStream API.
          type: string
        stdoutDestination:
          description: The destination to which any stdout should be sent. The method by which the bot should send the stream contents to that destination is not defined in this API. As examples, the destination could be a file referenced in the `files` field in this message, or it could be a URI that must be written via the ByteStream API.
          type: string
      type: object
    GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts:
      description: Describes the timeouts associated with this task.
      properties:
        execution:
          description: This specifies the maximum time that the task can run, excluding the time required to download inputs or upload outputs. That is, the worker will terminate the task if it runs longer than this.
          format: google-duration
          type: string
        idle:
          description: This specifies the maximum amount of time the task can be idle - that is, go without generating some output in either stdout or stderr. If the process is silent for more than the specified time, the worker will terminate the task.
          format: google-duration
          type: string
        shutdown:
          description: If the execution or IO timeouts are exceeded, the worker will try to gracefully terminate the task and return any existing logs. However, tasks may be hard-frozen in which case this process will fail. This timeout specifies how long to wait for a terminated task to shut down gracefully (e.g. via SIGTERM) before we bring down the hammer (e.g. SIGKILL on *nix, CTRL_BREAK_EVENT on Windows).
          format: google-duration
          type: string
      type: object
    GoogleDevtoolsRemoteworkersV1test2Digest:
      description: The CommandTask and CommandResult messages assume the existence of a service that can serve blobs of content, identified by a hash and size known as a "digest." The method by which these blobs may be retrieved is not specified here, but a model implementation is in the Remote Execution API's "ContentAddressibleStorage" interface. In the context of the RWAPI, a Digest will virtually always refer to the contents of a file or a directory. The latter is represented by the byte-encoded Directory message.
      properties:
        hash:
          description: A string-encoded hash (eg "1a2b3c", not the byte array [0x1a, 0x2b, 0x3c]) using an implementation-defined hash algorithm (eg SHA-256).
          type: string
        sizeBytes:
          description: The size of the contents. While this is not strictly required as part of an identifier (after all, any given hash will have exactly one canonical size), it's useful in almost all cases when one might want to send or retrieve blobs of content and is included here for this reason.
          format: int64
          type: string
      type: object
    GoogleDevtoolsRemoteworkersV1test2Directory:
      description: The contents of a directory. Similar to the equivalent message in the Remote Execution API.
      properties:
        directories:
          description: Any subdirectories
          items:
            $ref: "#/components/schemas/GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata"
          type: array
        files:
          description: The files in this directory
          items:
            $ref: "#/components/schemas/GoogleDevtoolsRemoteworkersV1test2FileMetadata"
          type: array
      type: object
    GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata:
      description: The metadata for a directory. Similar to the equivalent message in the Remote Execution API.
      properties:
        digest:
          $ref: "#/components/schemas/GoogleDevtoolsRemoteworkersV1test2Digest"
          description: A pointer to the contents of the directory, in the form of a marshalled Directory message.
        path:
          description: The path of the directory, as in FileMetadata.path.
          type: string
      type: object
    GoogleDevtoolsRemoteworkersV1test2FileMetadata:
      description: The metadata for a file. Similar to the equivalent message in the Remote Execution API.
      properties:
        contents:
          description: If the file is small enough, its contents may also or alternatively be listed here.
          format: byte
          type: string
        digest:
          $ref: "#/components/schemas/GoogleDevtoolsRemoteworkersV1test2Digest"
          description: A pointer to the contents of the file. The method by which a client retrieves the contents from a CAS system is not defined here.
        isExecutable:
          description: Properties of the file
          type: boolean
        path:
          description: The path of this file. If this message is part of the CommandOutputs.outputs fields, the path is relative to the execution root and must correspond to an entry in CommandTask.outputs.files. If this message is part of a Directory message, then the path is relative to the root of that directory. All paths MUST be delimited by forward slashes.
          type: string
      type: object
    GoogleLongrunningOperation:
      description: This resource represents a long-running operation that is the result of a network API call.
      properties:
        done:
          description: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
          type: boolean
        error:
          $ref: "#/components/schemas/GoogleRpcStatus"
          description: The error result of the operation in case of failure or cancellation.
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
          type: object
        name:
          description: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
          type: string
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
          type: object
      type: object
    GoogleProtobufEmpty:
      description: "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }"
      properties: {}
      type: object
    GoogleRpcStatus:
      description: "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
          type: integer
        details:
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        message:
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
          type: string
      type: object
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
      type: oauth2
    Oauth2c:
      description: Oauth 2.0 authorizationCode authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
          tokenUrl: https://accounts.google.com/o/oauth2/token
      type: oauth2

# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.build_bazel_remote_execution_v2_execute_response import BuildBazelRemoteExecutionV2ExecuteResponse

class TestBuildBazelRemoteExecutionV2ExecuteResponse(unittest.TestCase):
    """BuildBazelRemoteExecutionV2ExecuteResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BuildBazelRemoteExecutionV2ExecuteResponse:
        """Test BuildBazelRemoteExecutionV2ExecuteResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BuildBazelRemoteExecutionV2ExecuteResponse`
        """
        model = BuildBazelRemoteExecutionV2ExecuteResponse()
        if include_optional:
            return BuildBazelRemoteExecutionV2ExecuteResponse(
                cached_result = True,
                message = '',
                result = openapi_client.models.build_bazel_remote_execution_v2_action_result.BuildBazelRemoteExecutionV2ActionResult(
                    execution_metadata = openapi_client.models.build_bazel_remote_execution_v2_executed_action_metadata.BuildBazelRemoteExecutionV2ExecutedActionMetadata(
                        auxiliary_metadata = [
                            {
                                'key' : null
                                }
                            ], 
                        execution_completed_timestamp = '', 
                        execution_start_timestamp = '', 
                        input_fetch_completed_timestamp = '', 
                        input_fetch_start_timestamp = '', 
                        output_upload_completed_timestamp = '', 
                        output_upload_start_timestamp = '', 
                        queued_timestamp = '', 
                        virtual_execution_duration = '', 
                        worker = '', 
                        worker_completed_timestamp = '', 
                        worker_start_timestamp = '', ), 
                    exit_code = 56, 
                    output_directories = [
                        openapi_client.models.build_bazel_remote_execution_v2_output_directory.BuildBazelRemoteExecutionV2OutputDirectory(
                            is_topologically_sorted = True, 
                            path = '', 
                            tree_digest = openapi_client.models.build_bazel_remote_execution_v2_digest.BuildBazelRemoteExecutionV2Digest(
                                hash = '', 
                                size_bytes = '', ), )
                        ], 
                    output_directory_symlinks = [
                        openapi_client.models.build_bazel_remote_execution_v2_output_symlink.BuildBazelRemoteExecutionV2OutputSymlink(
                            node_properties = openapi_client.models.build_bazel_remote_execution_v2_node_properties.BuildBazelRemoteExecutionV2NodeProperties(
                                mtime = '', 
                                properties = [
                                    openapi_client.models.build_bazel_remote_execution_v2_node_property.BuildBazelRemoteExecutionV2NodeProperty(
                                        name = '', 
                                        value = '', )
                                    ], 
                                unix_mode = 56, ), 
                            path = '', 
                            target = '', )
                        ], 
                    output_file_symlinks = [
                        openapi_client.models.build_bazel_remote_execution_v2_output_symlink.BuildBazelRemoteExecutionV2OutputSymlink(
                            path = '', 
                            target = '', )
                        ], 
                    output_files = [
                        openapi_client.models.build_bazel_remote_execution_v2_output_file.BuildBazelRemoteExecutionV2OutputFile(
                            contents = 'YQ==', 
                            digest = openapi_client.models.build_bazel_remote_execution_v2_digest.BuildBazelRemoteExecutionV2Digest(
                                hash = '', 
                                size_bytes = '', ), 
                            is_executable = True, 
                            path = '', )
                        ], 
                    output_symlinks = [
                        
                        ], 
                    stderr_digest = , 
                    stderr_raw = 'YQ==', 
                    stdout_digest = , 
                    stdout_raw = 'YQ==', ),
                server_logs = {
                    'key' : openapi_client.models.build_bazel_remote_execution_v2_log_file.BuildBazelRemoteExecutionV2LogFile(
                        digest = openapi_client.models.build_bazel_remote_execution_v2_digest.BuildBazelRemoteExecutionV2Digest(
                            hash = '', 
                            size_bytes = '', ), 
                        human_readable = True, )
                    },
                status = openapi_client.models.google_rpc_status.GoogleRpcStatus(
                    code = 56, 
                    details = [
                        {
                            'key' : null
                            }
                        ], 
                    message = '', )
            )
        else:
            return BuildBazelRemoteExecutionV2ExecuteResponse(
        )
        """

    def testBuildBazelRemoteExecutionV2ExecuteResponse(self):
        """Test BuildBazelRemoteExecutionV2ExecuteResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

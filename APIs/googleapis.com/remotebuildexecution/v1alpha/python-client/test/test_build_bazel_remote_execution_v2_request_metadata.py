# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.build_bazel_remote_execution_v2_request_metadata import BuildBazelRemoteExecutionV2RequestMetadata

class TestBuildBazelRemoteExecutionV2RequestMetadata(unittest.TestCase):
    """BuildBazelRemoteExecutionV2RequestMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BuildBazelRemoteExecutionV2RequestMetadata:
        """Test BuildBazelRemoteExecutionV2RequestMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BuildBazelRemoteExecutionV2RequestMetadata`
        """
        model = BuildBazelRemoteExecutionV2RequestMetadata()
        if include_optional:
            return BuildBazelRemoteExecutionV2RequestMetadata(
                action_id = '',
                action_mnemonic = '',
                configuration_id = '',
                correlated_invocations_id = '',
                target_id = '',
                tool_details = openapi_client.models.build_bazel_remote_execution_v2_tool_details.BuildBazelRemoteExecutionV2ToolDetails(
                    tool_name = '', 
                    tool_version = '', ),
                tool_invocation_id = ''
            )
        else:
            return BuildBazelRemoteExecutionV2RequestMetadata(
        )
        """

    def testBuildBazelRemoteExecutionV2RequestMetadata(self):
        """Test BuildBazelRemoteExecutionV2RequestMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

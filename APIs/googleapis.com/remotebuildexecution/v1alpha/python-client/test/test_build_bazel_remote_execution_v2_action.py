# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.build_bazel_remote_execution_v2_action import BuildBazelRemoteExecutionV2Action

class TestBuildBazelRemoteExecutionV2Action(unittest.TestCase):
    """BuildBazelRemoteExecutionV2Action unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BuildBazelRemoteExecutionV2Action:
        """Test BuildBazelRemoteExecutionV2Action
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BuildBazelRemoteExecutionV2Action`
        """
        model = BuildBazelRemoteExecutionV2Action()
        if include_optional:
            return BuildBazelRemoteExecutionV2Action(
                command_digest = openapi_client.models.build_bazel_remote_execution_v2_digest.BuildBazelRemoteExecutionV2Digest(
                    hash = '', 
                    size_bytes = '', ),
                do_not_cache = True,
                input_root_digest = openapi_client.models.build_bazel_remote_execution_v2_digest.BuildBazelRemoteExecutionV2Digest(
                    hash = '', 
                    size_bytes = '', ),
                platform = openapi_client.models.build_bazel_remote_execution_v2_platform.BuildBazelRemoteExecutionV2Platform(
                    properties = [
                        openapi_client.models.build_bazel_remote_execution_v2_platform_property.BuildBazelRemoteExecutionV2PlatformProperty(
                            name = '', 
                            value = '', )
                        ], ),
                salt = 'YQ==',
                timeout = ''
            )
        else:
            return BuildBazelRemoteExecutionV2Action(
        )
        """

    def testBuildBazelRemoteExecutionV2Action(self):
        """Test BuildBazelRemoteExecutionV2Action"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_devtools_remotebuildbot_command_durations import GoogleDevtoolsRemotebuildbotCommandDurations

class TestGoogleDevtoolsRemotebuildbotCommandDurations(unittest.TestCase):
    """GoogleDevtoolsRemotebuildbotCommandDurations unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleDevtoolsRemotebuildbotCommandDurations:
        """Test GoogleDevtoolsRemotebuildbotCommandDurations
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleDevtoolsRemotebuildbotCommandDurations`
        """
        model = GoogleDevtoolsRemotebuildbotCommandDurations()
        if include_optional:
            return GoogleDevtoolsRemotebuildbotCommandDurations(
                cas_release = '',
                cm_wait_for_assignment = '',
                docker_prep = '',
                docker_prep_start_time = '',
                download = '',
                download_start_time = '',
                exec_start_time = '',
                execution = '',
                iso_prep_done = '',
                overall = '',
                stderr = '',
                stdout = '',
                upload = '',
                upload_start_time = ''
            )
        else:
            return GoogleDevtoolsRemotebuildbotCommandDurations(
        )
        """

    def testGoogleDevtoolsRemotebuildbotCommandDurations(self):
        """Test GoogleDevtoolsRemotebuildbotCommandDurations"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

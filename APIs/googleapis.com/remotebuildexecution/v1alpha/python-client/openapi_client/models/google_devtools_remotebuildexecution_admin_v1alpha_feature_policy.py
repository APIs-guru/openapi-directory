# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_devtools_remotebuildexecution_admin_v1alpha_feature_policy_feature import GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature
from typing import Optional, Set
from typing_extensions import Self

class GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy(BaseModel):
    """
    FeaturePolicy defines features allowed to be used on RBE instances, as well as instance-wide behavior changes that take effect without opt-in or opt-out at usage time.
    """ # noqa: E501
    action_hermeticity: Optional[StrictStr] = Field(default=None, description="Defines the hermeticity policy for actions on this instance. DO NOT USE: Experimental / unlaunched feature.", alias="actionHermeticity")
    action_isolation: Optional[StrictStr] = Field(default=None, description="Defines the isolation policy for actions on this instance. DO NOT USE: Experimental / unlaunched feature.", alias="actionIsolation")
    container_image_sources: Optional[GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature] = Field(default=None, alias="containerImageSources")
    docker_add_capabilities: Optional[GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature] = Field(default=None, alias="dockerAddCapabilities")
    docker_chroot_path: Optional[GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature] = Field(default=None, alias="dockerChrootPath")
    docker_network: Optional[GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature] = Field(default=None, alias="dockerNetwork")
    docker_privileged: Optional[GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature] = Field(default=None, alias="dockerPrivileged")
    docker_run_as_container_provided_user: Optional[GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature] = Field(default=None, alias="dockerRunAsContainerProvidedUser")
    docker_run_as_root: Optional[GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature] = Field(default=None, alias="dockerRunAsRoot")
    docker_runtime: Optional[GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature] = Field(default=None, alias="dockerRuntime")
    docker_sibling_containers: Optional[GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature] = Field(default=None, alias="dockerSiblingContainers")
    docker_ulimits: Optional[GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature] = Field(default=None, alias="dockerUlimits")
    linux_execution: Optional[StrictStr] = Field(default=None, description="Defines how Linux actions are allowed to execute. DO NOT USE: Experimental / unlaunched feature.", alias="linuxExecution")
    linux_isolation: Optional[StrictStr] = Field(default=None, description="linux_isolation allows overriding the docker runtime used for containers started on Linux.", alias="linuxIsolation")
    mac_execution: Optional[StrictStr] = Field(default=None, description="Defines how Windows actions are allowed to execute. DO NOT USE: Experimental / unlaunched feature.", alias="macExecution")
    vm_verification: Optional[StrictStr] = Field(default=None, description="Whether to verify CreateBotSession and UpdateBotSession from the bot.", alias="vmVerification")
    windows_execution: Optional[StrictStr] = Field(default=None, description="Defines how Windows actions are allowed to execute. DO NOT USE: Experimental / unlaunched feature.", alias="windowsExecution")
    __properties: ClassVar[List[str]] = ["actionHermeticity", "actionIsolation", "containerImageSources", "dockerAddCapabilities", "dockerChrootPath", "dockerNetwork", "dockerPrivileged", "dockerRunAsContainerProvidedUser", "dockerRunAsRoot", "dockerRuntime", "dockerSiblingContainers", "dockerUlimits", "linuxExecution", "linuxIsolation", "macExecution", "vmVerification", "windowsExecution"]

    @field_validator('action_hermeticity')
    def action_hermeticity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTION_HERMETICITY_UNSPECIFIED', 'ACTION_HERMETICITY_OFF', 'ACTION_HERMETICITY_ENFORCED', 'ACTION_HERMETICITY_BEST_EFFORT']):
            raise ValueError("must be one of enum values ('ACTION_HERMETICITY_UNSPECIFIED', 'ACTION_HERMETICITY_OFF', 'ACTION_HERMETICITY_ENFORCED', 'ACTION_HERMETICITY_BEST_EFFORT')")
        return value

    @field_validator('action_isolation')
    def action_isolation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTION_ISOLATION_UNSPECIFIED', 'ACTION_ISOLATION_OFF', 'ACTION_ISOLATION_ENFORCED']):
            raise ValueError("must be one of enum values ('ACTION_ISOLATION_UNSPECIFIED', 'ACTION_ISOLATION_OFF', 'ACTION_ISOLATION_ENFORCED')")
        return value

    @field_validator('linux_execution')
    def linux_execution_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LINUX_EXECUTION_UNSPECIFIED', 'LINUX_EXECUTION_FORBIDDEN', 'LINUX_EXECUTION_UNRESTRICTED', 'LINUX_EXECUTION_HARDENED_GVISOR', 'LINUX_EXECUTION_HARDENED_GVISOR_OR_TERMINAL']):
            raise ValueError("must be one of enum values ('LINUX_EXECUTION_UNSPECIFIED', 'LINUX_EXECUTION_FORBIDDEN', 'LINUX_EXECUTION_UNRESTRICTED', 'LINUX_EXECUTION_HARDENED_GVISOR', 'LINUX_EXECUTION_HARDENED_GVISOR_OR_TERMINAL')")
        return value

    @field_validator('linux_isolation')
    def linux_isolation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LINUX_ISOLATION_UNSPECIFIED', 'GVISOR', 'false']):
            raise ValueError("must be one of enum values ('LINUX_ISOLATION_UNSPECIFIED', 'GVISOR', 'false')")
        return value

    @field_validator('mac_execution')
    def mac_execution_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MAC_EXECUTION_UNSPECIFIED', 'MAC_EXECUTION_FORBIDDEN']):
            raise ValueError("must be one of enum values ('MAC_EXECUTION_UNSPECIFIED', 'MAC_EXECUTION_FORBIDDEN')")
        return value

    @field_validator('vm_verification')
    def vm_verification_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VM_VERIFICATION_UNSPECIFIED', 'VM_VERIFICATION_GCP_TOKEN', 'VM_VERIFICATION_OFF']):
            raise ValueError("must be one of enum values ('VM_VERIFICATION_UNSPECIFIED', 'VM_VERIFICATION_GCP_TOKEN', 'VM_VERIFICATION_OFF')")
        return value

    @field_validator('windows_execution')
    def windows_execution_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WINDOWS_EXECUTION_UNSPECIFIED', 'WINDOWS_EXECUTION_FORBIDDEN', 'WINDOWS_EXECUTION_UNRESTRICTED', 'WINDOWS_EXECUTION_TERMINAL']):
            raise ValueError("must be one of enum values ('WINDOWS_EXECUTION_UNSPECIFIED', 'WINDOWS_EXECUTION_FORBIDDEN', 'WINDOWS_EXECUTION_UNRESTRICTED', 'WINDOWS_EXECUTION_TERMINAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of container_image_sources
        if self.container_image_sources:
            _dict['containerImageSources'] = self.container_image_sources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of docker_add_capabilities
        if self.docker_add_capabilities:
            _dict['dockerAddCapabilities'] = self.docker_add_capabilities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of docker_chroot_path
        if self.docker_chroot_path:
            _dict['dockerChrootPath'] = self.docker_chroot_path.to_dict()
        # override the default output from pydantic by calling `to_dict()` of docker_network
        if self.docker_network:
            _dict['dockerNetwork'] = self.docker_network.to_dict()
        # override the default output from pydantic by calling `to_dict()` of docker_privileged
        if self.docker_privileged:
            _dict['dockerPrivileged'] = self.docker_privileged.to_dict()
        # override the default output from pydantic by calling `to_dict()` of docker_run_as_container_provided_user
        if self.docker_run_as_container_provided_user:
            _dict['dockerRunAsContainerProvidedUser'] = self.docker_run_as_container_provided_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of docker_run_as_root
        if self.docker_run_as_root:
            _dict['dockerRunAsRoot'] = self.docker_run_as_root.to_dict()
        # override the default output from pydantic by calling `to_dict()` of docker_runtime
        if self.docker_runtime:
            _dict['dockerRuntime'] = self.docker_runtime.to_dict()
        # override the default output from pydantic by calling `to_dict()` of docker_sibling_containers
        if self.docker_sibling_containers:
            _dict['dockerSiblingContainers'] = self.docker_sibling_containers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of docker_ulimits
        if self.docker_ulimits:
            _dict['dockerUlimits'] = self.docker_ulimits.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionHermeticity": obj.get("actionHermeticity"),
            "actionIsolation": obj.get("actionIsolation"),
            "containerImageSources": GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.from_dict(obj["containerImageSources"]) if obj.get("containerImageSources") is not None else None,
            "dockerAddCapabilities": GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.from_dict(obj["dockerAddCapabilities"]) if obj.get("dockerAddCapabilities") is not None else None,
            "dockerChrootPath": GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.from_dict(obj["dockerChrootPath"]) if obj.get("dockerChrootPath") is not None else None,
            "dockerNetwork": GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.from_dict(obj["dockerNetwork"]) if obj.get("dockerNetwork") is not None else None,
            "dockerPrivileged": GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.from_dict(obj["dockerPrivileged"]) if obj.get("dockerPrivileged") is not None else None,
            "dockerRunAsContainerProvidedUser": GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.from_dict(obj["dockerRunAsContainerProvidedUser"]) if obj.get("dockerRunAsContainerProvidedUser") is not None else None,
            "dockerRunAsRoot": GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.from_dict(obj["dockerRunAsRoot"]) if obj.get("dockerRunAsRoot") is not None else None,
            "dockerRuntime": GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.from_dict(obj["dockerRuntime"]) if obj.get("dockerRuntime") is not None else None,
            "dockerSiblingContainers": GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.from_dict(obj["dockerSiblingContainers"]) if obj.get("dockerSiblingContainers") is not None else None,
            "dockerUlimits": GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature.from_dict(obj["dockerUlimits"]) if obj.get("dockerUlimits") is not None else None,
            "linuxExecution": obj.get("linuxExecution"),
            "linuxIsolation": obj.get("linuxIsolation"),
            "macExecution": obj.get("macExecution"),
            "vmVerification": obj.get("vmVerification"),
            "windowsExecution": obj.get("windowsExecution")
        })
        return _obj



# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.build_bazel_remote_execution_v2_digest import BuildBazelRemoteExecutionV2Digest
from openapi_client.models.build_bazel_remote_execution_v2_executed_action_metadata import BuildBazelRemoteExecutionV2ExecutedActionMetadata
from openapi_client.models.build_bazel_remote_execution_v2_output_directory import BuildBazelRemoteExecutionV2OutputDirectory
from openapi_client.models.build_bazel_remote_execution_v2_output_file import BuildBazelRemoteExecutionV2OutputFile
from openapi_client.models.build_bazel_remote_execution_v2_output_symlink import BuildBazelRemoteExecutionV2OutputSymlink
from typing import Optional, Set
from typing_extensions import Self

class BuildBazelRemoteExecutionV2ActionResult(BaseModel):
    """
    An ActionResult represents the result of an Action being run. It is advised that at least one field (for example `ActionResult.execution_metadata.Worker`) have a non-default value, to ensure that the serialized value is non-empty, which can then be used as a basic data sanity check.
    """ # noqa: E501
    execution_metadata: Optional[BuildBazelRemoteExecutionV2ExecutedActionMetadata] = Field(default=None, alias="executionMetadata")
    exit_code: Optional[StrictInt] = Field(default=None, description="The exit code of the command.", alias="exitCode")
    output_directories: Optional[List[BuildBazelRemoteExecutionV2OutputDirectory]] = Field(default=None, description="The output directories of the action. For each output directory requested in the `output_directories` or `output_paths` field of the Action, if the corresponding directory existed after the action completed, a single entry will be present in the output list, which will contain the digest of a Tree message containing the directory tree, and the path equal exactly to the corresponding Action output_directories member. As an example, suppose the Action had an output directory `a/b/dir` and the execution produced the following contents in `a/b/dir`: a file named `bar` and a directory named `foo` with an executable file named `baz`. Then, output_directory will contain (hashes shortened for readability): ```json // OutputDirectory proto: { path: \"a/b/dir\" tree_digest: { hash: \"4a73bc9d03...\", size: 55 } } // Tree proto with hash \"4a73bc9d03...\" and size 55: { root: { files: [ { name: \"bar\", digest: { hash: \"4a73bc9d03...\", size: 65534 } } ], directories: [ { name: \"foo\", digest: { hash: \"4cf2eda940...\", size: 43 } } ] } children : { // (Directory proto with hash \"4cf2eda940...\" and size 43) files: [ { name: \"baz\", digest: { hash: \"b2c941073e...\", size: 1294, }, is_executable: true } ] } } ``` If an output of the same name as listed in `output_files` of the Command was found in `output_directories`, but was not a directory, the server will return a FAILED_PRECONDITION.", alias="outputDirectories")
    output_directory_symlinks: Optional[List[BuildBazelRemoteExecutionV2OutputSymlink]] = Field(default=None, description="The output directories of the action that are symbolic links to other directories. Those may be links to other output directories, or input directories, or even absolute paths outside of the working directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. For each output directory requested in the `output_directories` field of the Action, if the directory existed after the action completed, a single entry will be present either in this field, or in the `output_directories` field, if the directory was not a symbolic link. If an output of the same name was found, but was a symbolic link to a file instead of a directory, the server will return a FAILED_PRECONDITION. If the action does not produce the requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted. DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API should still populate this field in addition to `output_symlinks`.", alias="outputDirectorySymlinks")
    output_file_symlinks: Optional[List[BuildBazelRemoteExecutionV2OutputSymlink]] = Field(default=None, description="The output files of the action that are symbolic links to other files. Those may be links to other output files, or input files, or even absolute paths outside of the working directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. For each output file requested in the `output_files` or `output_paths` field of the Action, if the corresponding file existed after the action completed, a single entry will be present either in this field, or in the `output_files` field, if the file was not a symbolic link. If an output symbolic link of the same name as listed in `output_files` of the Command was found, but its target type was not a regular file, the server will return a FAILED_PRECONDITION. If the action does not produce the requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted. DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API should still populate this field in addition to `output_symlinks`.", alias="outputFileSymlinks")
    output_files: Optional[List[BuildBazelRemoteExecutionV2OutputFile]] = Field(default=None, description="The output files of the action. For each output file requested in the `output_files` or `output_paths` field of the Action, if the corresponding file existed after the action completed, a single entry will be present either in this field, or the `output_file_symlinks` field if the file was a symbolic link to another file (`output_symlinks` field after v2.1). If an output listed in `output_files` was found, but was a directory rather than a regular file, the server will return a FAILED_PRECONDITION. If the action does not produce the requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted.", alias="outputFiles")
    output_symlinks: Optional[List[BuildBazelRemoteExecutionV2OutputSymlink]] = Field(default=None, description="New in v2.1: this field will only be populated if the command `output_paths` field was used, and not the pre v2.1 `output_files` or `output_directories` fields. The output paths of the action that are symbolic links to other paths. Those may be links to other outputs, or inputs, or even absolute paths outside of the working directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. A single entry for each output requested in `output_paths` field of the Action, if the corresponding path existed after the action completed and was a symbolic link. If the action does not produce a requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is sorted.", alias="outputSymlinks")
    stderr_digest: Optional[BuildBazelRemoteExecutionV2Digest] = Field(default=None, alias="stderrDigest")
    stderr_raw: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The standard error buffer of the action. The server SHOULD NOT inline stderr unless requested by the client in the GetActionResultRequest message. The server MAY omit inlining, even if requested, and MUST do so if inlining would cause the response to exceed message size limits. Clients SHOULD NOT populate this field when uploading to the cache.", alias="stderrRaw")
    stdout_digest: Optional[BuildBazelRemoteExecutionV2Digest] = Field(default=None, alias="stdoutDigest")
    stdout_raw: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The standard output buffer of the action. The server SHOULD NOT inline stdout unless requested by the client in the GetActionResultRequest message. The server MAY omit inlining, even if requested, and MUST do so if inlining would cause the response to exceed message size limits. Clients SHOULD NOT populate this field when uploading to the cache.", alias="stdoutRaw")
    __properties: ClassVar[List[str]] = ["executionMetadata", "exitCode", "outputDirectories", "outputDirectorySymlinks", "outputFileSymlinks", "outputFiles", "outputSymlinks", "stderrDigest", "stderrRaw", "stdoutDigest", "stdoutRaw"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildBazelRemoteExecutionV2ActionResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of execution_metadata
        if self.execution_metadata:
            _dict['executionMetadata'] = self.execution_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in output_directories (list)
        _items = []
        if self.output_directories:
            for _item_output_directories in self.output_directories:
                if _item_output_directories:
                    _items.append(_item_output_directories.to_dict())
            _dict['outputDirectories'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in output_directory_symlinks (list)
        _items = []
        if self.output_directory_symlinks:
            for _item_output_directory_symlinks in self.output_directory_symlinks:
                if _item_output_directory_symlinks:
                    _items.append(_item_output_directory_symlinks.to_dict())
            _dict['outputDirectorySymlinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in output_file_symlinks (list)
        _items = []
        if self.output_file_symlinks:
            for _item_output_file_symlinks in self.output_file_symlinks:
                if _item_output_file_symlinks:
                    _items.append(_item_output_file_symlinks.to_dict())
            _dict['outputFileSymlinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in output_files (list)
        _items = []
        if self.output_files:
            for _item_output_files in self.output_files:
                if _item_output_files:
                    _items.append(_item_output_files.to_dict())
            _dict['outputFiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in output_symlinks (list)
        _items = []
        if self.output_symlinks:
            for _item_output_symlinks in self.output_symlinks:
                if _item_output_symlinks:
                    _items.append(_item_output_symlinks.to_dict())
            _dict['outputSymlinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of stderr_digest
        if self.stderr_digest:
            _dict['stderrDigest'] = self.stderr_digest.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stdout_digest
        if self.stdout_digest:
            _dict['stdoutDigest'] = self.stdout_digest.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildBazelRemoteExecutionV2ActionResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "executionMetadata": BuildBazelRemoteExecutionV2ExecutedActionMetadata.from_dict(obj["executionMetadata"]) if obj.get("executionMetadata") is not None else None,
            "exitCode": obj.get("exitCode"),
            "outputDirectories": [BuildBazelRemoteExecutionV2OutputDirectory.from_dict(_item) for _item in obj["outputDirectories"]] if obj.get("outputDirectories") is not None else None,
            "outputDirectorySymlinks": [BuildBazelRemoteExecutionV2OutputSymlink.from_dict(_item) for _item in obj["outputDirectorySymlinks"]] if obj.get("outputDirectorySymlinks") is not None else None,
            "outputFileSymlinks": [BuildBazelRemoteExecutionV2OutputSymlink.from_dict(_item) for _item in obj["outputFileSymlinks"]] if obj.get("outputFileSymlinks") is not None else None,
            "outputFiles": [BuildBazelRemoteExecutionV2OutputFile.from_dict(_item) for _item in obj["outputFiles"]] if obj.get("outputFiles") is not None else None,
            "outputSymlinks": [BuildBazelRemoteExecutionV2OutputSymlink.from_dict(_item) for _item in obj["outputSymlinks"]] if obj.get("outputSymlinks") is not None else None,
            "stderrDigest": BuildBazelRemoteExecutionV2Digest.from_dict(obj["stderrDigest"]) if obj.get("stderrDigest") is not None else None,
            "stderrRaw": obj.get("stderrRaw"),
            "stdoutDigest": BuildBazelRemoteExecutionV2Digest.from_dict(obj["stdoutDigest"]) if obj.get("stdoutDigest") is not None else None,
            "stdoutRaw": obj.get("stdoutRaw")
        })
        return _obj



# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.build_bazel_remote_execution_v2_digest import BuildBazelRemoteExecutionV2Digest
from openapi_client.models.build_bazel_remote_execution_v2_platform import BuildBazelRemoteExecutionV2Platform
from typing import Optional, Set
from typing_extensions import Self

class BuildBazelRemoteExecutionV2Action(BaseModel):
    """
    An `Action` captures all the information about an execution which is required to reproduce it. `Action`s are the core component of the [Execution] service. A single `Action` represents a repeatable action that can be performed by the execution service. `Action`s can be succinctly identified by the digest of their wire format encoding and, once an `Action` has been executed, will be cached in the action cache. Future requests can then use the cached result rather than needing to run afresh. When a server completes execution of an Action, it MAY choose to cache the result in the ActionCache unless `do_not_cache` is `true`. Clients SHOULD expect the server to do so. By default, future calls to Execute the same `Action` will also serve their results from the cache. Clients must take care to understand the caching behaviour. Ideally, all `Action`s will be reproducible so that serving a result from cache is always desirable and correct.
    """ # noqa: E501
    command_digest: Optional[BuildBazelRemoteExecutionV2Digest] = Field(default=None, alias="commandDigest")
    do_not_cache: Optional[StrictBool] = Field(default=None, description="If true, then the `Action`'s result cannot be cached, and in-flight requests for the same `Action` may not be merged.", alias="doNotCache")
    input_root_digest: Optional[BuildBazelRemoteExecutionV2Digest] = Field(default=None, alias="inputRootDigest")
    platform: Optional[BuildBazelRemoteExecutionV2Platform] = None
    salt: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="An optional additional salt value used to place this `Action` into a separate cache namespace from other instances having the same field contents. This salt typically comes from operational configuration specific to sources such as repo and service configuration, and allows disowning an entire set of ActionResults that might have been poisoned by buggy software or tool failures.")
    timeout: Optional[StrictStr] = Field(default=None, description="A timeout after which the execution should be killed. If the timeout is absent, then the client is specifying that the execution should continue as long as the server will let it. The server SHOULD impose a timeout if the client does not specify one, however, if the client does specify a timeout that is longer than the server's maximum timeout, the server MUST reject the request. The timeout is only intended to cover the \"execution\" of the specified action and not time in queue nor any overheads before or after execution such as marshalling inputs/outputs. The server SHOULD avoid including time spent the client doesn't have control over, and MAY extend or reduce the timeout to account for delays or speedups that occur during execution itself (e.g., lazily loading data from the Content Addressable Storage, live migration of virtual machines, emulation overhead). The timeout is a part of the Action message, and therefore two `Actions` with different timeouts are different, even if they are otherwise identical. This is because, if they were not, running an `Action` with a lower timeout than is required might result in a cache hit from an execution run with a longer timeout, hiding the fact that the timeout is too short. By encoding it directly in the `Action`, a lower timeout will result in a cache miss and the execution timeout will fail immediately, rather than whenever the cache entry gets evicted.")
    __properties: ClassVar[List[str]] = ["commandDigest", "doNotCache", "inputRootDigest", "platform", "salt", "timeout"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildBazelRemoteExecutionV2Action from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of command_digest
        if self.command_digest:
            _dict['commandDigest'] = self.command_digest.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input_root_digest
        if self.input_root_digest:
            _dict['inputRootDigest'] = self.input_root_digest.to_dict()
        # override the default output from pydantic by calling `to_dict()` of platform
        if self.platform:
            _dict['platform'] = self.platform.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildBazelRemoteExecutionV2Action from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commandDigest": BuildBazelRemoteExecutionV2Digest.from_dict(obj["commandDigest"]) if obj.get("commandDigest") is not None else None,
            "doNotCache": obj.get("doNotCache"),
            "inputRootDigest": BuildBazelRemoteExecutionV2Digest.from_dict(obj["inputRootDigest"]) if obj.get("inputRootDigest") is not None else None,
            "platform": BuildBazelRemoteExecutionV2Platform.from_dict(obj["platform"]) if obj.get("platform") is not None else None,
            "salt": obj.get("salt"),
            "timeout": obj.get("timeout")
        })
        return _obj



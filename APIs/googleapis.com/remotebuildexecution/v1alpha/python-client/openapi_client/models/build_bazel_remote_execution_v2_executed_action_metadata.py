# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BuildBazelRemoteExecutionV2ExecutedActionMetadata(BaseModel):
    """
    ExecutedActionMetadata contains details about a completed execution.
    """ # noqa: E501
    auxiliary_metadata: Optional[List[Dict[str, Any]]] = Field(default=None, description="Details that are specific to the kind of worker used. For example, on POSIX-like systems this could contain a message with getrusage(2) statistics.", alias="auxiliaryMetadata")
    execution_completed_timestamp: Optional[StrictStr] = Field(default=None, description="When the worker completed executing the action command.", alias="executionCompletedTimestamp")
    execution_start_timestamp: Optional[StrictStr] = Field(default=None, description="When the worker started executing the action command.", alias="executionStartTimestamp")
    input_fetch_completed_timestamp: Optional[StrictStr] = Field(default=None, description="When the worker finished fetching action inputs.", alias="inputFetchCompletedTimestamp")
    input_fetch_start_timestamp: Optional[StrictStr] = Field(default=None, description="When the worker started fetching action inputs.", alias="inputFetchStartTimestamp")
    output_upload_completed_timestamp: Optional[StrictStr] = Field(default=None, description="When the worker finished uploading action outputs.", alias="outputUploadCompletedTimestamp")
    output_upload_start_timestamp: Optional[StrictStr] = Field(default=None, description="When the worker started uploading action outputs.", alias="outputUploadStartTimestamp")
    queued_timestamp: Optional[StrictStr] = Field(default=None, description="When was the action added to the queue.", alias="queuedTimestamp")
    virtual_execution_duration: Optional[StrictStr] = Field(default=None, description="New in v2.3: the amount of time the worker spent executing the action command, potentially computed using a worker-specific virtual clock. The virtual execution duration is only intended to cover the \"execution\" of the specified action and not time in queue nor any overheads before or after execution such as marshalling inputs/outputs. The server SHOULD avoid including time spent the client doesn't have control over, and MAY extend or reduce the execution duration to account for delays or speedups that occur during execution itself (e.g., lazily loading data from the Content Addressable Storage, live migration of virtual machines, emulation overhead). The method of timekeeping used to compute the virtual execution duration MUST be consistent with what is used to enforce the Action's `timeout`. There is no relationship between the virtual execution duration and the values of `execution_start_timestamp` and `execution_completed_timestamp`.", alias="virtualExecutionDuration")
    worker: Optional[StrictStr] = Field(default=None, description="The name of the worker which ran the execution.")
    worker_completed_timestamp: Optional[StrictStr] = Field(default=None, description="When the worker completed the action, including all stages.", alias="workerCompletedTimestamp")
    worker_start_timestamp: Optional[StrictStr] = Field(default=None, description="When the worker received the action.", alias="workerStartTimestamp")
    __properties: ClassVar[List[str]] = ["auxiliaryMetadata", "executionCompletedTimestamp", "executionStartTimestamp", "inputFetchCompletedTimestamp", "inputFetchStartTimestamp", "outputUploadCompletedTimestamp", "outputUploadStartTimestamp", "queuedTimestamp", "virtualExecutionDuration", "worker", "workerCompletedTimestamp", "workerStartTimestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildBazelRemoteExecutionV2ExecutedActionMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildBazelRemoteExecutionV2ExecutedActionMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auxiliaryMetadata": obj.get("auxiliaryMetadata"),
            "executionCompletedTimestamp": obj.get("executionCompletedTimestamp"),
            "executionStartTimestamp": obj.get("executionStartTimestamp"),
            "inputFetchCompletedTimestamp": obj.get("inputFetchCompletedTimestamp"),
            "inputFetchStartTimestamp": obj.get("inputFetchStartTimestamp"),
            "outputUploadCompletedTimestamp": obj.get("outputUploadCompletedTimestamp"),
            "outputUploadStartTimestamp": obj.get("outputUploadStartTimestamp"),
            "queuedTimestamp": obj.get("queuedTimestamp"),
            "virtualExecutionDuration": obj.get("virtualExecutionDuration"),
            "worker": obj.get("worker"),
            "workerCompletedTimestamp": obj.get("workerCompletedTimestamp"),
            "workerStartTimestamp": obj.get("workerStartTimestamp")
        })
        return _obj



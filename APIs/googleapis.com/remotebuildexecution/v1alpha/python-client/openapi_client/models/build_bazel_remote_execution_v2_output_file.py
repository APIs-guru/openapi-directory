# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.build_bazel_remote_execution_v2_digest import BuildBazelRemoteExecutionV2Digest
from openapi_client.models.build_bazel_remote_execution_v2_node_properties import BuildBazelRemoteExecutionV2NodeProperties
from typing import Optional, Set
from typing_extensions import Self

class BuildBazelRemoteExecutionV2OutputFile(BaseModel):
    """
    An `OutputFile` is similar to a FileNode, but it is used as an output in an `ActionResult`. It allows a full file path rather than only a name.
    """ # noqa: E501
    contents: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The contents of the file if inlining was requested. The server SHOULD NOT inline file contents unless requested by the client in the GetActionResultRequest message. The server MAY omit inlining, even if requested, and MUST do so if inlining would cause the response to exceed message size limits. Clients SHOULD NOT populate this field when uploading to the cache.")
    digest: Optional[BuildBazelRemoteExecutionV2Digest] = None
    is_executable: Optional[StrictBool] = Field(default=None, description="True if file is executable, false otherwise.", alias="isExecutable")
    node_properties: Optional[BuildBazelRemoteExecutionV2NodeProperties] = Field(default=None, alias="nodeProperties")
    path: Optional[StrictStr] = Field(default=None, description="The full path of the file relative to the working directory, including the filename. The path separator is a forward slash `/`. Since this is a relative path, it MUST NOT begin with a leading forward slash.")
    __properties: ClassVar[List[str]] = ["contents", "digest", "isExecutable", "nodeProperties", "path"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildBazelRemoteExecutionV2OutputFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of digest
        if self.digest:
            _dict['digest'] = self.digest.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_properties
        if self.node_properties:
            _dict['nodeProperties'] = self.node_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildBazelRemoteExecutionV2OutputFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contents": obj.get("contents"),
            "digest": BuildBazelRemoteExecutionV2Digest.from_dict(obj["digest"]) if obj.get("digest") is not None else None,
            "isExecutable": obj.get("isExecutable"),
            "nodeProperties": BuildBazelRemoteExecutionV2NodeProperties.from_dict(obj["nodeProperties"]) if obj.get("nodeProperties") is not None else None,
            "path": obj.get("path")
        })
        return _obj



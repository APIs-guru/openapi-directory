# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_devtools_remotebuildexecution_admin_v1alpha_accelerator_config import GoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig
from openapi_client.models.google_devtools_remotebuildexecution_admin_v1alpha_disks import GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks
from typing import Optional, Set
from typing_extensions import Self

class GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig(BaseModel):
    """
    Defines the configuration to be used for creating workers in the worker pool.
    """ # noqa: E501
    accelerator: Optional[GoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig] = None
    attached_disks: Optional[GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks] = Field(default=None, alias="attachedDisks")
    disk_size_gb: Optional[StrictStr] = Field(default=None, description="Required. Size of the disk attached to the worker, in GB. See https://cloud.google.com/compute/docs/disks/", alias="diskSizeGb")
    disk_type: Optional[StrictStr] = Field(default=None, description="Required. Disk Type to use for the worker. See [Storage options](https://cloud.google.com/compute/docs/disks/#introduction). Currently only `pd-standard` and `pd-ssd` are supported.", alias="diskType")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels associated with the workers. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International letters are permitted. Label keys must start with a letter. Label values are optional. There can not be more than 64 labels per resource.")
    machine_type: Optional[StrictStr] = Field(default=None, description="Required. Machine type of the worker, such as `e2-standard-2`. See https://cloud.google.com/compute/docs/machine-types for a list of supported machine types. Note that `f1-micro` and `g1-small` are not yet supported.", alias="machineType")
    max_concurrent_actions: Optional[StrictStr] = Field(default=None, description="The maximum number of actions a worker can execute concurrently.", alias="maxConcurrentActions")
    min_cpu_platform: Optional[StrictStr] = Field(default=None, description="Minimum CPU platform to use when creating the worker. See [CPU Platforms](https://cloud.google.com/compute/docs/cpu-platforms).", alias="minCpuPlatform")
    network_access: Optional[StrictStr] = Field(default=None, description="Determines the type of network access granted to workers. Possible values: - \"public\": Workers can connect to the public internet. - \"private\": Workers can only connect to Google APIs and services. - \"restricted-private\": Workers can only connect to Google APIs that are reachable through `restricted.googleapis.com` (`199.36.153.4/30`).", alias="networkAccess")
    reserved: Optional[StrictBool] = Field(default=None, description="Determines whether the worker is reserved (equivalent to a Compute Engine on-demand VM and therefore won't be preempted). See [Preemptible VMs](https://cloud.google.com/preemptible-vms/) for more details.")
    sole_tenant_node_type: Optional[StrictStr] = Field(default=None, description="The node type name to be used for sole-tenant nodes.", alias="soleTenantNodeType")
    user_service_accounts: Optional[List[StrictStr]] = Field(default=None, description="Optional. List of user service accounts. The last service account in the list is what the user code will run as. The rest of the service accounts constitute the impersonation chain. For example, if len(user_service_accounts) == 2 and if the VM's service account is RBE's P4SA, then RBE'S P4SA should be granted the Service Account Token Creator role on user_service_accounts[0] and user_service_accounts[0] should be granted the Service Account Token Creator role on user_service_accounts[1].", alias="userServiceAccounts")
    vm_image: Optional[StrictStr] = Field(default=None, description="The name of the image used by each VM.", alias="vmImage")
    zones: Optional[List[StrictStr]] = Field(default=None, description="Optional. Zones in the region where the pool VMs should be. Leave empty for no restrictions.")
    __properties: ClassVar[List[str]] = ["accelerator", "attachedDisks", "diskSizeGb", "diskType", "labels", "machineType", "maxConcurrentActions", "minCpuPlatform", "networkAccess", "reserved", "soleTenantNodeType", "userServiceAccounts", "vmImage", "zones"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accelerator
        if self.accelerator:
            _dict['accelerator'] = self.accelerator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attached_disks
        if self.attached_disks:
            _dict['attachedDisks'] = self.attached_disks.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accelerator": GoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig.from_dict(obj["accelerator"]) if obj.get("accelerator") is not None else None,
            "attachedDisks": GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks.from_dict(obj["attachedDisks"]) if obj.get("attachedDisks") is not None else None,
            "diskSizeGb": obj.get("diskSizeGb"),
            "diskType": obj.get("diskType"),
            "labels": obj.get("labels"),
            "machineType": obj.get("machineType"),
            "maxConcurrentActions": obj.get("maxConcurrentActions"),
            "minCpuPlatform": obj.get("minCpuPlatform"),
            "networkAccess": obj.get("networkAccess"),
            "reserved": obj.get("reserved"),
            "soleTenantNodeType": obj.get("soleTenantNodeType"),
            "userServiceAccounts": obj.get("userServiceAccounts"),
            "vmImage": obj.get("vmImage"),
            "zones": obj.get("zones")
        })
        return _obj



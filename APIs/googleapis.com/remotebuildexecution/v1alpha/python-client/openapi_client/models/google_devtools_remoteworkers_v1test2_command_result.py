# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_devtools_remoteworkers_v1test2_digest import GoogleDevtoolsRemoteworkersV1test2Digest
from openapi_client.models.google_rpc_status import GoogleRpcStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleDevtoolsRemoteworkersV1test2CommandResult(BaseModel):
    """
    All information about the execution of a command, suitable for providing as the Bots interface's `Lease.result` field.
    """ # noqa: E501
    duration: Optional[StrictStr] = Field(default=None, description="The elapsed time between calling Accept and Complete. The server will also have its own idea of what this should be, but this excludes the overhead of the RPCs and the bot response time.")
    exit_code: Optional[StrictInt] = Field(default=None, description="The exit code of the process. An exit code of \"0\" should only be trusted if `status` has a code of OK (otherwise it may simply be unset).", alias="exitCode")
    metadata: Optional[List[Dict[str, Any]]] = Field(default=None, description="Implementation-dependent metadata about the task. Both servers and bots may define messages which can be encoded here; bots are free to provide metadata in multiple formats, and servers are free to choose one or more of the values to process and ignore others. In particular, it is *not* considered an error for the bot to provide the server with a field that it doesn't know about.")
    outputs: Optional[GoogleDevtoolsRemoteworkersV1test2Digest] = None
    overhead: Optional[StrictStr] = Field(default=None, description="The amount of time *not* spent executing the command (ie uploading/downloading files).")
    status: Optional[GoogleRpcStatus] = None
    __properties: ClassVar[List[str]] = ["duration", "exitCode", "metadata", "outputs", "overhead", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsRemoteworkersV1test2CommandResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of outputs
        if self.outputs:
            _dict['outputs'] = self.outputs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsRemoteworkersV1test2CommandResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "duration": obj.get("duration"),
            "exitCode": obj.get("exitCode"),
            "metadata": obj.get("metadata"),
            "outputs": GoogleDevtoolsRemoteworkersV1test2Digest.from_dict(obj["outputs"]) if obj.get("outputs") is not None else None,
            "overhead": obj.get("overhead"),
            "status": GoogleRpcStatus.from_dict(obj["status"]) if obj.get("status") is not None else None
        })
        return _obj



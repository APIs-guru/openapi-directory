# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.build_bazel_remote_execution_v2_action_result import BuildBazelRemoteExecutionV2ActionResult
from openapi_client.models.build_bazel_remote_execution_v2_log_file import BuildBazelRemoteExecutionV2LogFile
from openapi_client.models.google_rpc_status import GoogleRpcStatus
from typing import Optional, Set
from typing_extensions import Self

class BuildBazelRemoteExecutionV2ExecuteResponse(BaseModel):
    """
    The response message for Execution.Execute, which will be contained in the response field of the Operation.
    """ # noqa: E501
    cached_result: Optional[StrictBool] = Field(default=None, description="True if the result was served from cache, false if it was executed.", alias="cachedResult")
    message: Optional[StrictStr] = Field(default=None, description="Freeform informational message with details on the execution of the action that may be displayed to the user upon failure or when requested explicitly.")
    result: Optional[BuildBazelRemoteExecutionV2ActionResult] = None
    server_logs: Optional[Dict[str, BuildBazelRemoteExecutionV2LogFile]] = Field(default=None, description="An optional list of additional log outputs the server wishes to provide. A server can use this to return execution-specific logs however it wishes. This is intended primarily to make it easier for users to debug issues that may be outside of the actual job execution, such as by identifying the worker executing the action or by providing logs from the worker's setup phase. The keys SHOULD be human readable so that a client can display them to a user.", alias="serverLogs")
    status: Optional[GoogleRpcStatus] = None
    __properties: ClassVar[List[str]] = ["cachedResult", "message", "result", "serverLogs", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildBazelRemoteExecutionV2ExecuteResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in server_logs (dict)
        _field_dict = {}
        if self.server_logs:
            for _key_server_logs in self.server_logs:
                if self.server_logs[_key_server_logs]:
                    _field_dict[_key_server_logs] = self.server_logs[_key_server_logs].to_dict()
            _dict['serverLogs'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildBazelRemoteExecutionV2ExecuteResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cachedResult": obj.get("cachedResult"),
            "message": obj.get("message"),
            "result": BuildBazelRemoteExecutionV2ActionResult.from_dict(obj["result"]) if obj.get("result") is not None else None,
            "serverLogs": dict(
                (_k, BuildBazelRemoteExecutionV2LogFile.from_dict(_v))
                for _k, _v in obj["serverLogs"].items()
            )
            if obj.get("serverLogs") is not None
            else None,
            "status": GoogleRpcStatus.from_dict(obj["status"]) if obj.get("status") is not None else None
        })
        return _obj



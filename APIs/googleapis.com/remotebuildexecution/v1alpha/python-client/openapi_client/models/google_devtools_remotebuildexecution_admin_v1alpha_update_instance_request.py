# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_devtools_remotebuildexecution_admin_v1alpha_instance import GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance
from typing import Optional, Set
from typing_extensions import Self

class GoogleDevtoolsRemotebuildexecutionAdminV1alphaUpdateInstanceRequest(BaseModel):
    """
    The request used for `UpdateInstance`.
    """ # noqa: E501
    instance: Optional[GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance] = None
    logging_enabled: Optional[StrictBool] = Field(default=None, description="Deprecated, use instance.logging_enabled instead. Whether to enable Stackdriver logging for this instance.", alias="loggingEnabled")
    name: Optional[StrictStr] = Field(default=None, description="Deprecated, use instance.Name instead. Name of the instance to update. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`.")
    update_mask: Optional[StrictStr] = Field(default=None, description="The update mask applies to instance. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask If an empty update_mask is provided, only the non-default valued field in the worker pool field will be updated. Note that in order to update a field to the default value (zero, false, empty string) an explicit update_mask must be provided.", alias="updateMask")
    __properties: ClassVar[List[str]] = ["instance", "loggingEnabled", "name", "updateMask"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsRemotebuildexecutionAdminV1alphaUpdateInstanceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of instance
        if self.instance:
            _dict['instance'] = self.instance.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsRemotebuildexecutionAdminV1alphaUpdateInstanceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "instance": GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance.from_dict(obj["instance"]) if obj.get("instance") is not None else None,
            "loggingEnabled": obj.get("loggingEnabled"),
            "name": obj.get("name"),
            "updateMask": obj.get("updateMask")
        })
        return _obj



# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_devtools_remotebuildexecution_admin_v1alpha_autoscale import GoogleDevtoolsRemotebuildexecutionAdminV1alphaAutoscale
from openapi_client.models.google_devtools_remotebuildexecution_admin_v1alpha_worker_config import GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool(BaseModel):
    """
    A worker pool resource in the Remote Build Execution API.
    """ # noqa: E501
    autoscale: Optional[GoogleDevtoolsRemotebuildexecutionAdminV1alphaAutoscale] = None
    channel: Optional[StrictStr] = Field(default=None, description="Channel specifies the release channel of the pool.")
    host_os: Optional[StrictStr] = Field(default=None, description="HostOS specifies the OS version of the image for the worker VMs.", alias="hostOs")
    name: Optional[StrictStr] = Field(default=None, description="WorkerPool resource name formatted as: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]/workerpools/[POOL_ID]`. name should not be populated when creating a worker pool since it is provided in the `poolId` field.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the worker pool.")
    worker_config: Optional[GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig] = Field(default=None, alias="workerConfig")
    worker_count: Optional[StrictStr] = Field(default=None, description="The desired number of workers in the worker pool. Must be a value between 0 and 15000.", alias="workerCount")
    __properties: ClassVar[List[str]] = ["autoscale", "channel", "hostOs", "name", "state", "workerConfig", "workerCount"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'RUNNING', 'UPDATING', 'DELETING', 'INACTIVE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'RUNNING', 'UPDATING', 'DELETING', 'INACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of autoscale
        if self.autoscale:
            _dict['autoscale'] = self.autoscale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of worker_config
        if self.worker_config:
            _dict['workerConfig'] = self.worker_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoscale": GoogleDevtoolsRemotebuildexecutionAdminV1alphaAutoscale.from_dict(obj["autoscale"]) if obj.get("autoscale") is not None else None,
            "channel": obj.get("channel"),
            "hostOs": obj.get("hostOs"),
            "name": obj.get("name"),
            "state": obj.get("state"),
            "workerConfig": GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig.from_dict(obj["workerConfig"]) if obj.get("workerConfig") is not None else None,
            "workerCount": obj.get("workerCount")
        })
        return _obj



# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.build_bazel_remote_execution_v2_digest import BuildBazelRemoteExecutionV2Digest
from openapi_client.models.build_bazel_remote_execution_v2_executed_action_metadata import BuildBazelRemoteExecutionV2ExecutedActionMetadata
from typing import Optional, Set
from typing_extensions import Self

class BuildBazelRemoteExecutionV2ExecuteOperationMetadata(BaseModel):
    """
    Metadata about an ongoing execution, which will be contained in the metadata field of the Operation.
    """ # noqa: E501
    action_digest: Optional[BuildBazelRemoteExecutionV2Digest] = Field(default=None, alias="actionDigest")
    partial_execution_metadata: Optional[BuildBazelRemoteExecutionV2ExecutedActionMetadata] = Field(default=None, alias="partialExecutionMetadata")
    stage: Optional[StrictStr] = Field(default=None, description="The current stage of execution.")
    stderr_stream_name: Optional[StrictStr] = Field(default=None, description="If set, the client can use this resource name with ByteStream.Read to stream the standard error from the endpoint hosting streamed responses.", alias="stderrStreamName")
    stdout_stream_name: Optional[StrictStr] = Field(default=None, description="If set, the client can use this resource name with ByteStream.Read to stream the standard output from the endpoint hosting streamed responses.", alias="stdoutStreamName")
    __properties: ClassVar[List[str]] = ["actionDigest", "partialExecutionMetadata", "stage", "stderrStreamName", "stdoutStreamName"]

    @field_validator('stage')
    def stage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'CACHE_CHECK', 'QUEUED', 'EXECUTING', 'COMPLETED']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'CACHE_CHECK', 'QUEUED', 'EXECUTING', 'COMPLETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildBazelRemoteExecutionV2ExecuteOperationMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of action_digest
        if self.action_digest:
            _dict['actionDigest'] = self.action_digest.to_dict()
        # override the default output from pydantic by calling `to_dict()` of partial_execution_metadata
        if self.partial_execution_metadata:
            _dict['partialExecutionMetadata'] = self.partial_execution_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildBazelRemoteExecutionV2ExecuteOperationMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionDigest": BuildBazelRemoteExecutionV2Digest.from_dict(obj["actionDigest"]) if obj.get("actionDigest") is not None else None,
            "partialExecutionMetadata": BuildBazelRemoteExecutionV2ExecutedActionMetadata.from_dict(obj["partialExecutionMetadata"]) if obj.get("partialExecutionMetadata") is not None else None,
            "stage": obj.get("stage"),
            "stderrStreamName": obj.get("stderrStreamName"),
            "stdoutStreamName": obj.get("stdoutStreamName")
        })
        return _obj



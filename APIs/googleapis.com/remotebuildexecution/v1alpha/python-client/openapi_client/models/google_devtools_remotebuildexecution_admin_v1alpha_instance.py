# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_devtools_remotebuildexecution_admin_v1alpha_feature_policy import GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy
from openapi_client.models.google_devtools_remotebuildexecution_admin_v1alpha_scheduler_notification_config import GoogleDevtoolsRemotebuildexecutionAdminV1alphaSchedulerNotificationConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance(BaseModel):
    """
    Instance conceptually encapsulates all Remote Build Execution resources for remote builds. An instance consists of storage and compute resources (for example, `ContentAddressableStorage`, `ActionCache`, `WorkerPools`) used for running remote builds. All Remote Build Execution API calls are scoped to an instance.
    """ # noqa: E501
    feature_policy: Optional[GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy] = Field(default=None, alias="featurePolicy")
    location: Optional[StrictStr] = Field(default=None, description="The location is a GCP region. Currently only `us-central1` is supported.")
    logging_enabled: Optional[StrictBool] = Field(default=None, description="Output only. Whether stack driver logging is enabled for the instance.", alias="loggingEnabled")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Instance resource name formatted as: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`. Name should not be populated when creating an instance since it is provided in the `instance_id` field.")
    scheduler_notification_config: Optional[GoogleDevtoolsRemotebuildexecutionAdminV1alphaSchedulerNotificationConfig] = Field(default=None, alias="schedulerNotificationConfig")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the instance.")
    __properties: ClassVar[List[str]] = ["featurePolicy", "location", "loggingEnabled", "name", "schedulerNotificationConfig", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'RUNNING', 'INACTIVE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'RUNNING', 'INACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "logging_enabled",
            "name",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of feature_policy
        if self.feature_policy:
            _dict['featurePolicy'] = self.feature_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scheduler_notification_config
        if self.scheduler_notification_config:
            _dict['schedulerNotificationConfig'] = self.scheduler_notification_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "featurePolicy": GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy.from_dict(obj["featurePolicy"]) if obj.get("featurePolicy") is not None else None,
            "location": obj.get("location"),
            "loggingEnabled": obj.get("loggingEnabled"),
            "name": obj.get("name"),
            "schedulerNotificationConfig": GoogleDevtoolsRemotebuildexecutionAdminV1alphaSchedulerNotificationConfig.from_dict(obj["schedulerNotificationConfig"]) if obj.get("schedulerNotificationConfig") is not None else None,
            "state": obj.get("state")
        })
        return _obj



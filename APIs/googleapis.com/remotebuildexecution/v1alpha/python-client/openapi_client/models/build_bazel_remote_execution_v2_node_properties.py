# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.build_bazel_remote_execution_v2_node_property import BuildBazelRemoteExecutionV2NodeProperty
from typing import Optional, Set
from typing_extensions import Self

class BuildBazelRemoteExecutionV2NodeProperties(BaseModel):
    """
    Node properties for FileNodes, DirectoryNodes, and SymlinkNodes. The server is responsible for specifying the properties that it accepts.
    """ # noqa: E501
    mtime: Optional[StrictStr] = Field(default=None, description="The file's last modification timestamp.")
    properties: Optional[List[BuildBazelRemoteExecutionV2NodeProperty]] = Field(default=None, description="A list of string-based NodeProperties.")
    unix_mode: Optional[StrictInt] = Field(default=None, description="The UNIX file mode, e.g., 0755.", alias="unixMode")
    __properties: ClassVar[List[str]] = ["mtime", "properties", "unixMode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildBazelRemoteExecutionV2NodeProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in properties (list)
        _items = []
        if self.properties:
            for _item_properties in self.properties:
                if _item_properties:
                    _items.append(_item_properties.to_dict())
            _dict['properties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildBazelRemoteExecutionV2NodeProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mtime": obj.get("mtime"),
            "properties": [BuildBazelRemoteExecutionV2NodeProperty.from_dict(_item) for _item in obj["properties"]] if obj.get("properties") is not None else None,
            "unixMode": obj.get("unixMode")
        })
        return _obj



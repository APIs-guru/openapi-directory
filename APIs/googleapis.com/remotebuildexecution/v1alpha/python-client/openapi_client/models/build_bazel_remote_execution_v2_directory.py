# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.build_bazel_remote_execution_v2_directory_node import BuildBazelRemoteExecutionV2DirectoryNode
from openapi_client.models.build_bazel_remote_execution_v2_file_node import BuildBazelRemoteExecutionV2FileNode
from openapi_client.models.build_bazel_remote_execution_v2_node_properties import BuildBazelRemoteExecutionV2NodeProperties
from openapi_client.models.build_bazel_remote_execution_v2_symlink_node import BuildBazelRemoteExecutionV2SymlinkNode
from typing import Optional, Set
from typing_extensions import Self

class BuildBazelRemoteExecutionV2Directory(BaseModel):
    """
    A `Directory` represents a directory node in a file tree, containing zero or more children FileNodes, DirectoryNodes and SymlinkNodes. Each `Node` contains its name in the directory, either the digest of its content (either a file blob or a `Directory` proto) or a symlink target, as well as possibly some metadata about the file or directory. In order to ensure that two equivalent directory trees hash to the same value, the following restrictions MUST be obeyed when constructing a a `Directory`: * Every child in the directory must have a path of exactly one segment. Multiple levels of directory hierarchy may not be collapsed. * Each child in the directory must have a unique path segment (file name). Note that while the API itself is case-sensitive, the environment where the Action is executed may or may not be case-sensitive. That is, it is legal to call the API with a Directory that has both \"Foo\" and \"foo\" as children, but the Action may be rejected by the remote system upon execution. * The files, directories and symlinks in the directory must each be sorted in lexicographical order by path. The path strings must be sorted by code point, equivalently, by UTF-8 bytes. * The NodeProperties of files, directories, and symlinks must be sorted in lexicographical order by property name. A `Directory` that obeys the restrictions is said to be in canonical form. As an example, the following could be used for a file named `bar` and a directory named `foo` with an executable file named `baz` (hashes shortened for readability): ```json // (Directory proto) { files: [ { name: \"bar\", digest: { hash: \"4a73bc9d03...\", size: 65534 }, node_properties: [ { \"name\": \"MTime\", \"value\": \"2017-01-15T01:30:15.01Z\" } ] } ], directories: [ { name: \"foo\", digest: { hash: \"4cf2eda940...\", size: 43 } } ] } // (Directory proto with hash \"4cf2eda940...\" and size 43) { files: [ { name: \"baz\", digest: { hash: \"b2c941073e...\", size: 1294, }, is_executable: true } ] } ```
    """ # noqa: E501
    directories: Optional[List[BuildBazelRemoteExecutionV2DirectoryNode]] = Field(default=None, description="The subdirectories in the directory.")
    files: Optional[List[BuildBazelRemoteExecutionV2FileNode]] = Field(default=None, description="The files in the directory.")
    node_properties: Optional[BuildBazelRemoteExecutionV2NodeProperties] = Field(default=None, alias="nodeProperties")
    symlinks: Optional[List[BuildBazelRemoteExecutionV2SymlinkNode]] = Field(default=None, description="The symlinks in the directory.")
    __properties: ClassVar[List[str]] = ["directories", "files", "nodeProperties", "symlinks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildBazelRemoteExecutionV2Directory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in directories (list)
        _items = []
        if self.directories:
            for _item_directories in self.directories:
                if _item_directories:
                    _items.append(_item_directories.to_dict())
            _dict['directories'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item_files in self.files:
                if _item_files:
                    _items.append(_item_files.to_dict())
            _dict['files'] = _items
        # override the default output from pydantic by calling `to_dict()` of node_properties
        if self.node_properties:
            _dict['nodeProperties'] = self.node_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in symlinks (list)
        _items = []
        if self.symlinks:
            for _item_symlinks in self.symlinks:
                if _item_symlinks:
                    _items.append(_item_symlinks.to_dict())
            _dict['symlinks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildBazelRemoteExecutionV2Directory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "directories": [BuildBazelRemoteExecutionV2DirectoryNode.from_dict(_item) for _item in obj["directories"]] if obj.get("directories") is not None else None,
            "files": [BuildBazelRemoteExecutionV2FileNode.from_dict(_item) for _item in obj["files"]] if obj.get("files") is not None else None,
            "nodeProperties": BuildBazelRemoteExecutionV2NodeProperties.from_dict(obj["nodeProperties"]) if obj.get("nodeProperties") is not None else None,
            "symlinks": [BuildBazelRemoteExecutionV2SymlinkNode.from_dict(_item) for _item in obj["symlinks"]] if obj.get("symlinks") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.build_bazel_remote_execution_v2_tool_details import BuildBazelRemoteExecutionV2ToolDetails
from typing import Optional, Set
from typing_extensions import Self

class BuildBazelRemoteExecutionV2RequestMetadata(BaseModel):
    """
    An optional Metadata to attach to any RPC request to tell the server about an external context of the request. The server may use this for logging or other purposes. To use it, the client attaches the header to the call using the canonical proto serialization: * name: `build.bazel.remote.execution.v2.requestmetadata-bin` * contents: the base64 encoded binary `RequestMetadata` message. Note: the gRPC library serializes binary headers encoded in base64 by default (https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests). Therefore, if the gRPC library is used to pass/retrieve this metadata, the user may ignore the base64 encoding and assume it is simply serialized as a binary message.
    """ # noqa: E501
    action_id: Optional[StrictStr] = Field(default=None, description="An identifier that ties multiple requests to the same action. For example, multiple requests to the CAS, Action Cache, and Execution API are used in order to compile foo.cc.", alias="actionId")
    action_mnemonic: Optional[StrictStr] = Field(default=None, description="A brief description of the kind of action, for example, CppCompile or GoLink. There is no standard agreed set of values for this, and they are expected to vary between different client tools.", alias="actionMnemonic")
    configuration_id: Optional[StrictStr] = Field(default=None, description="An identifier for the configuration in which the target was built, e.g. for differentiating building host tools or different target platforms. There is no expectation that this value will have any particular structure, or equality across invocations, though some client tools may offer these guarantees.", alias="configurationId")
    correlated_invocations_id: Optional[StrictStr] = Field(default=None, description="An identifier to tie multiple tool invocations together. For example, runs of foo_test, bar_test and baz_test on a post-submit of a given patch.", alias="correlatedInvocationsId")
    target_id: Optional[StrictStr] = Field(default=None, description="An identifier for the target which produced this action. No guarantees are made around how many actions may relate to a single target.", alias="targetId")
    tool_details: Optional[BuildBazelRemoteExecutionV2ToolDetails] = Field(default=None, alias="toolDetails")
    tool_invocation_id: Optional[StrictStr] = Field(default=None, description="An identifier that ties multiple actions together to a final result. For example, multiple actions are required to build and run foo_test.", alias="toolInvocationId")
    __properties: ClassVar[List[str]] = ["actionId", "actionMnemonic", "configurationId", "correlatedInvocationsId", "targetId", "toolDetails", "toolInvocationId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildBazelRemoteExecutionV2RequestMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tool_details
        if self.tool_details:
            _dict['toolDetails'] = self.tool_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildBazelRemoteExecutionV2RequestMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionId": obj.get("actionId"),
            "actionMnemonic": obj.get("actionMnemonic"),
            "configurationId": obj.get("configurationId"),
            "correlatedInvocationsId": obj.get("correlatedInvocationsId"),
            "targetId": obj.get("targetId"),
            "toolDetails": BuildBazelRemoteExecutionV2ToolDetails.from_dict(obj["toolDetails"]) if obj.get("toolDetails") is not None else None,
            "toolInvocationId": obj.get("toolInvocationId")
        })
        return _obj



# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_devtools_remotebuildbot_resource_usage_io_stats import GoogleDevtoolsRemotebuildbotResourceUsageIOStats
from openapi_client.models.google_devtools_remotebuildbot_resource_usage_stat import GoogleDevtoolsRemotebuildbotResourceUsageStat
from typing import Optional, Set
from typing_extensions import Self

class GoogleDevtoolsRemotebuildbotResourceUsage(BaseModel):
    """
    ResourceUsage is the system resource usage of the host machine.
    """ # noqa: E501
    bot_state: Optional[StrictStr] = Field(default=None, alias="botState")
    cpu_used_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuUsedPercent")
    disk_usage: Optional[GoogleDevtoolsRemotebuildbotResourceUsageStat] = Field(default=None, alias="diskUsage")
    docker_root_disk_usage: Optional[GoogleDevtoolsRemotebuildbotResourceUsageStat] = Field(default=None, alias="dockerRootDiskUsage")
    memory_usage: Optional[GoogleDevtoolsRemotebuildbotResourceUsageStat] = Field(default=None, alias="memoryUsage")
    total_disk_io_stats: Optional[GoogleDevtoolsRemotebuildbotResourceUsageIOStats] = Field(default=None, alias="totalDiskIoStats")
    __properties: ClassVar[List[str]] = ["botState", "cpuUsedPercent", "diskUsage", "dockerRootDiskUsage", "memoryUsage", "totalDiskIoStats"]

    @field_validator('bot_state')
    def bot_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'IDLE', 'BUSY']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'IDLE', 'BUSY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsRemotebuildbotResourceUsage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of disk_usage
        if self.disk_usage:
            _dict['diskUsage'] = self.disk_usage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of docker_root_disk_usage
        if self.docker_root_disk_usage:
            _dict['dockerRootDiskUsage'] = self.docker_root_disk_usage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of memory_usage
        if self.memory_usage:
            _dict['memoryUsage'] = self.memory_usage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_disk_io_stats
        if self.total_disk_io_stats:
            _dict['totalDiskIoStats'] = self.total_disk_io_stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsRemotebuildbotResourceUsage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "botState": obj.get("botState"),
            "cpuUsedPercent": obj.get("cpuUsedPercent"),
            "diskUsage": GoogleDevtoolsRemotebuildbotResourceUsageStat.from_dict(obj["diskUsage"]) if obj.get("diskUsage") is not None else None,
            "dockerRootDiskUsage": GoogleDevtoolsRemotebuildbotResourceUsageStat.from_dict(obj["dockerRootDiskUsage"]) if obj.get("dockerRootDiskUsage") is not None else None,
            "memoryUsage": GoogleDevtoolsRemotebuildbotResourceUsageStat.from_dict(obj["memoryUsage"]) if obj.get("memoryUsage") is not None else None,
            "totalDiskIoStats": GoogleDevtoolsRemotebuildbotResourceUsageIOStats.from_dict(obj["totalDiskIoStats"]) if obj.get("totalDiskIoStats") is not None else None
        })
        return _obj



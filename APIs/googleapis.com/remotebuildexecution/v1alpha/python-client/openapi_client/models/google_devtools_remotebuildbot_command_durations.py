# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleDevtoolsRemotebuildbotCommandDurations(BaseModel):
    """
    CommandDuration contains the various duration metrics tracked when a bot performs a command.
    """ # noqa: E501
    cas_release: Optional[StrictStr] = Field(default=None, description="The time spent to release the CAS blobs used by the task.", alias="casRelease")
    cm_wait_for_assignment: Optional[StrictStr] = Field(default=None, description="The time spent waiting for Container Manager to assign an asynchronous container for execution.", alias="cmWaitForAssignment")
    docker_prep: Optional[StrictStr] = Field(default=None, description="The time spent preparing the command to be run in a Docker container (includes pulling the Docker image, if necessary).", alias="dockerPrep")
    docker_prep_start_time: Optional[StrictStr] = Field(default=None, description="The timestamp when docker preparation begins.", alias="dockerPrepStartTime")
    download: Optional[StrictStr] = Field(default=None, description="The time spent downloading the input files and constructing the working directory.")
    download_start_time: Optional[StrictStr] = Field(default=None, description="The timestamp when downloading the input files begins.", alias="downloadStartTime")
    exec_start_time: Optional[StrictStr] = Field(default=None, description="The timestamp when execution begins.", alias="execStartTime")
    execution: Optional[StrictStr] = Field(default=None, description="The time spent executing the command (i.e., doing useful work).")
    iso_prep_done: Optional[StrictStr] = Field(default=None, description="The timestamp when preparation is done and bot starts downloading files.", alias="isoPrepDone")
    overall: Optional[StrictStr] = Field(default=None, description="The time spent completing the command, in total.")
    stderr: Optional[StrictStr] = Field(default=None, description="The time spent uploading the stderr logs.")
    stdout: Optional[StrictStr] = Field(default=None, description="The time spent uploading the stdout logs.")
    upload: Optional[StrictStr] = Field(default=None, description="The time spent uploading the output files.")
    upload_start_time: Optional[StrictStr] = Field(default=None, description="The timestamp when uploading the output files begins.", alias="uploadStartTime")
    __properties: ClassVar[List[str]] = ["casRelease", "cmWaitForAssignment", "dockerPrep", "dockerPrepStartTime", "download", "downloadStartTime", "execStartTime", "execution", "isoPrepDone", "overall", "stderr", "stdout", "upload", "uploadStartTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsRemotebuildbotCommandDurations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsRemotebuildbotCommandDurations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "casRelease": obj.get("casRelease"),
            "cmWaitForAssignment": obj.get("cmWaitForAssignment"),
            "dockerPrep": obj.get("dockerPrep"),
            "dockerPrepStartTime": obj.get("dockerPrepStartTime"),
            "download": obj.get("download"),
            "downloadStartTime": obj.get("downloadStartTime"),
            "execStartTime": obj.get("execStartTime"),
            "execution": obj.get("execution"),
            "isoPrepDone": obj.get("isoPrepDone"),
            "overall": obj.get("overall"),
            "stderr": obj.get("stderr"),
            "stdout": obj.get("stdout"),
            "upload": obj.get("upload"),
            "uploadStartTime": obj.get("uploadStartTime")
        })
        return _obj



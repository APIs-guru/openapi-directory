# coding: utf-8

"""
    Remote Build Execution API

    Supplies a Remote Execution API service for tools such as bazel.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleDevtoolsRemotebuildbotCommandEvents(BaseModel):
    """
    CommandEvents contains counters for the number of warnings and errors that occurred during the execution of a command.
    """ # noqa: E501
    cm_usage: Optional[StrictStr] = Field(default=None, description="Indicates if and how Container Manager is being used for task execution.", alias="cmUsage")
    docker_cache_hit: Optional[StrictBool] = Field(default=None, description="Indicates whether we are using a cached Docker image (true) or had to pull the Docker image (false) for this command.", alias="dockerCacheHit")
    docker_image_name: Optional[StrictStr] = Field(default=None, description="Docker Image name.", alias="dockerImageName")
    input_cache_miss_bytes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The input cache miss rate as a fraction of the total size of input files.", alias="inputCacheMissBytes")
    input_cache_miss_files: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The input cache miss rate as a fraction of the number of input files.", alias="inputCacheMissFiles")
    num_errors: Optional[StrictStr] = Field(default=None, description="The number of errors reported.", alias="numErrors")
    num_warnings: Optional[StrictStr] = Field(default=None, description="The number of warnings reported.", alias="numWarnings")
    output_location: Optional[StrictStr] = Field(default=None, description="Indicates whether output files and/or output directories were found relative to the execution root or to the user provided work directory or both or none.", alias="outputLocation")
    used_async_container: Optional[StrictBool] = Field(default=None, description="Indicates whether an asynchronous container was used for execution.", alias="usedAsyncContainer")
    __properties: ClassVar[List[str]] = ["cmUsage", "dockerCacheHit", "dockerImageName", "inputCacheMissBytes", "inputCacheMissFiles", "numErrors", "numWarnings", "outputLocation", "usedAsyncContainer"]

    @field_validator('cm_usage')
    def cm_usage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONFIG_NONE', 'CONFIG_MATCH', 'CONFIG_MISMATCH']):
            raise ValueError("must be one of enum values ('CONFIG_NONE', 'CONFIG_MATCH', 'CONFIG_MISMATCH')")
        return value

    @field_validator('output_location')
    def output_location_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LOCATION_UNDEFINED', 'LOCATION_NONE', 'LOCATION_EXEC_ROOT_RELATIVE', 'LOCATION_WORKING_DIR_RELATIVE', 'LOCATION_EXEC_ROOT_AND_WORKING_DIR_RELATIVE', 'LOCATION_EXEC_ROOT_RELATIVE_OUTPUT_OUTSIDE_WORKING_DIR', 'LOCATION_EXEC_ROOT_AND_WORKING_DIR_RELATIVE_OUTPUT_OUTSIDE_WORKING_DIR']):
            raise ValueError("must be one of enum values ('LOCATION_UNDEFINED', 'LOCATION_NONE', 'LOCATION_EXEC_ROOT_RELATIVE', 'LOCATION_WORKING_DIR_RELATIVE', 'LOCATION_EXEC_ROOT_AND_WORKING_DIR_RELATIVE', 'LOCATION_EXEC_ROOT_RELATIVE_OUTPUT_OUTSIDE_WORKING_DIR', 'LOCATION_EXEC_ROOT_AND_WORKING_DIR_RELATIVE_OUTPUT_OUTSIDE_WORKING_DIR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsRemotebuildbotCommandEvents from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsRemotebuildbotCommandEvents from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cmUsage": obj.get("cmUsage"),
            "dockerCacheHit": obj.get("dockerCacheHit"),
            "dockerImageName": obj.get("dockerImageName"),
            "inputCacheMissBytes": obj.get("inputCacheMissBytes"),
            "inputCacheMissFiles": obj.get("inputCacheMissFiles"),
            "numErrors": obj.get("numErrors"),
            "numWarnings": obj.get("numWarnings"),
            "outputLocation": obj.get("outputLocation"),
            "usedAsyncContainer": obj.get("usedAsyncContainer")
        })
        return _obj



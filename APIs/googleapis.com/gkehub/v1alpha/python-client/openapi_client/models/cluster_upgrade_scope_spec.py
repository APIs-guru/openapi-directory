# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cluster_upgrade_gke_upgrade_override import ClusterUpgradeGKEUpgradeOverride
from openapi_client.models.cluster_upgrade_post_conditions import ClusterUpgradePostConditions
from typing import Optional, Set
from typing_extensions import Self

class ClusterUpgradeScopeSpec(BaseModel):
    """
    **ClusterUpgrade**: The configuration for the scope-level ClusterUpgrade feature.
    """ # noqa: E501
    gke_upgrade_overrides: Optional[List[ClusterUpgradeGKEUpgradeOverride]] = Field(default=None, description="Allow users to override some properties of each GKE upgrade.", alias="gkeUpgradeOverrides")
    post_conditions: Optional[ClusterUpgradePostConditions] = Field(default=None, alias="postConditions")
    upstream_scopes: Optional[List[StrictStr]] = Field(default=None, description="This scope consumes upgrades that have COMPLETE status code in the upstream scopes. See UpgradeStatus.Code for code definitions. The scope name should be in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project. This is defined as repeated for future proof reasons. Initial implementation will enforce at most one upstream scope.", alias="upstreamScopes")
    __properties: ClassVar[List[str]] = ["gkeUpgradeOverrides", "postConditions", "upstreamScopes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterUpgradeScopeSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in gke_upgrade_overrides (list)
        _items = []
        if self.gke_upgrade_overrides:
            for _item_gke_upgrade_overrides in self.gke_upgrade_overrides:
                if _item_gke_upgrade_overrides:
                    _items.append(_item_gke_upgrade_overrides.to_dict())
            _dict['gkeUpgradeOverrides'] = _items
        # override the default output from pydantic by calling `to_dict()` of post_conditions
        if self.post_conditions:
            _dict['postConditions'] = self.post_conditions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterUpgradeScopeSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gkeUpgradeOverrides": [ClusterUpgradeGKEUpgradeOverride.from_dict(_item) for _item in obj["gkeUpgradeOverrides"]] if obj.get("gkeUpgradeOverrides") is not None else None,
            "postConditions": ClusterUpgradePostConditions.from_dict(obj["postConditions"]) if obj.get("postConditions") is not None else None,
            "upstreamScopes": obj.get("upstreamScopes")
        })
        return _obj



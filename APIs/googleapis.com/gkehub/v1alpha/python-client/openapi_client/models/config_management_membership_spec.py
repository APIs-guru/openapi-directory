# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.config_management_binauthz_config import ConfigManagementBinauthzConfig
from openapi_client.models.config_management_config_sync import ConfigManagementConfigSync
from openapi_client.models.config_management_hierarchy_controller_config import ConfigManagementHierarchyControllerConfig
from openapi_client.models.config_management_policy_controller import ConfigManagementPolicyController
from typing import Optional, Set
from typing_extensions import Self

class ConfigManagementMembershipSpec(BaseModel):
    """
    **Anthos Config Management**: Configuration for a single cluster. Intended to parallel the ConfigManagement CR.
    """ # noqa: E501
    binauthz: Optional[ConfigManagementBinauthzConfig] = None
    cluster: Optional[StrictStr] = Field(default=None, description="The user-specified cluster name used by Config Sync cluster-name-selector annotation or ClusterSelector, for applying configs to only a subset of clusters. Omit this field if the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector. Set this field if a name different from the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector.")
    config_sync: Optional[ConfigManagementConfigSync] = Field(default=None, alias="configSync")
    hierarchy_controller: Optional[ConfigManagementHierarchyControllerConfig] = Field(default=None, alias="hierarchyController")
    management: Optional[StrictStr] = Field(default=None, description="Enables automatic Feature management.")
    policy_controller: Optional[ConfigManagementPolicyController] = Field(default=None, alias="policyController")
    version: Optional[StrictStr] = Field(default=None, description="Version of ACM installed.")
    __properties: ClassVar[List[str]] = ["binauthz", "cluster", "configSync", "hierarchyController", "management", "policyController", "version"]

    @field_validator('management')
    def management_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MANAGEMENT_UNSPECIFIED', 'MANAGEMENT_AUTOMATIC', 'MANAGEMENT_MANUAL']):
            raise ValueError("must be one of enum values ('MANAGEMENT_UNSPECIFIED', 'MANAGEMENT_AUTOMATIC', 'MANAGEMENT_MANUAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigManagementMembershipSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of binauthz
        if self.binauthz:
            _dict['binauthz'] = self.binauthz.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config_sync
        if self.config_sync:
            _dict['configSync'] = self.config_sync.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hierarchy_controller
        if self.hierarchy_controller:
            _dict['hierarchyController'] = self.hierarchy_controller.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy_controller
        if self.policy_controller:
            _dict['policyController'] = self.policy_controller.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigManagementMembershipSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "binauthz": ConfigManagementBinauthzConfig.from_dict(obj["binauthz"]) if obj.get("binauthz") is not None else None,
            "cluster": obj.get("cluster"),
            "configSync": ConfigManagementConfigSync.from_dict(obj["configSync"]) if obj.get("configSync") is not None else None,
            "hierarchyController": ConfigManagementHierarchyControllerConfig.from_dict(obj["hierarchyController"]) if obj.get("hierarchyController") is not None else None,
            "management": obj.get("management"),
            "policyController": ConfigManagementPolicyController.from_dict(obj["policyController"]) if obj.get("policyController") is not None else None,
            "version": obj.get("version")
        })
        return _obj



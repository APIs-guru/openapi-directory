# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_dev_experience_feature_state import AppDevExperienceFeatureState
from openapi_client.models.cluster_upgrade_membership_state import ClusterUpgradeMembershipState
from openapi_client.models.config_management_membership_state import ConfigManagementMembershipState
from openapi_client.models.feature_state import FeatureState
from openapi_client.models.identity_service_membership_state import IdentityServiceMembershipState
from openapi_client.models.metering_membership_state import MeteringMembershipState
from openapi_client.models.policy_controller_membership_state import PolicyControllerMembershipState
from openapi_client.models.service_mesh_membership_state import ServiceMeshMembershipState
from typing import Optional, Set
from typing_extensions import Self

class MembershipFeatureState(BaseModel):
    """
    MembershipFeatureState contains Feature status information for a single Membership.
    """ # noqa: E501
    appdevexperience: Optional[AppDevExperienceFeatureState] = None
    clusterupgrade: Optional[ClusterUpgradeMembershipState] = None
    configmanagement: Optional[ConfigManagementMembershipState] = None
    fleetobservability: Optional[Dict[str, Any]] = Field(default=None, description="**FleetObservability**: Membership-specific Feature state for fleetobservability.")
    identityservice: Optional[IdentityServiceMembershipState] = None
    metering: Optional[MeteringMembershipState] = None
    namespaceactuation: Optional[Dict[str, Any]] = Field(default=None, description="**Namespace Actuation**: An empty state left as an example membership-specific Feature state.")
    policycontroller: Optional[PolicyControllerMembershipState] = None
    servicemesh: Optional[ServiceMeshMembershipState] = None
    state: Optional[FeatureState] = None
    __properties: ClassVar[List[str]] = ["appdevexperience", "clusterupgrade", "configmanagement", "fleetobservability", "identityservice", "metering", "namespaceactuation", "policycontroller", "servicemesh", "state"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MembershipFeatureState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of appdevexperience
        if self.appdevexperience:
            _dict['appdevexperience'] = self.appdevexperience.to_dict()
        # override the default output from pydantic by calling `to_dict()` of clusterupgrade
        if self.clusterupgrade:
            _dict['clusterupgrade'] = self.clusterupgrade.to_dict()
        # override the default output from pydantic by calling `to_dict()` of configmanagement
        if self.configmanagement:
            _dict['configmanagement'] = self.configmanagement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of identityservice
        if self.identityservice:
            _dict['identityservice'] = self.identityservice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metering
        if self.metering:
            _dict['metering'] = self.metering.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policycontroller
        if self.policycontroller:
            _dict['policycontroller'] = self.policycontroller.to_dict()
        # override the default output from pydantic by calling `to_dict()` of servicemesh
        if self.servicemesh:
            _dict['servicemesh'] = self.servicemesh.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MembershipFeatureState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appdevexperience": AppDevExperienceFeatureState.from_dict(obj["appdevexperience"]) if obj.get("appdevexperience") is not None else None,
            "clusterupgrade": ClusterUpgradeMembershipState.from_dict(obj["clusterupgrade"]) if obj.get("clusterupgrade") is not None else None,
            "configmanagement": ConfigManagementMembershipState.from_dict(obj["configmanagement"]) if obj.get("configmanagement") is not None else None,
            "fleetobservability": obj.get("fleetobservability"),
            "identityservice": IdentityServiceMembershipState.from_dict(obj["identityservice"]) if obj.get("identityservice") is not None else None,
            "metering": MeteringMembershipState.from_dict(obj["metering"]) if obj.get("metering") is not None else None,
            "namespaceactuation": obj.get("namespaceactuation"),
            "policycontroller": PolicyControllerMembershipState.from_dict(obj["policycontroller"]) if obj.get("policycontroller") is not None else None,
            "servicemesh": ServiceMeshMembershipState.from_dict(obj["servicemesh"]) if obj.get("servicemesh") is not None else None,
            "state": FeatureState.from_dict(obj["state"]) if obj.get("state") is not None else None
        })
        return _obj



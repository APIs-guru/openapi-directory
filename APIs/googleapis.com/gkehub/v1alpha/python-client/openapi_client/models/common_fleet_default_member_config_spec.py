# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.config_management_membership_spec import ConfigManagementMembershipSpec
from openapi_client.models.identity_service_membership_spec import IdentityServiceMembershipSpec
from openapi_client.models.policy_controller_membership_spec import PolicyControllerMembershipSpec
from openapi_client.models.service_mesh_membership_spec import ServiceMeshMembershipSpec
from typing import Optional, Set
from typing_extensions import Self

class CommonFleetDefaultMemberConfigSpec(BaseModel):
    """
    CommonFleetDefaultMemberConfigSpec contains default configuration information for memberships of a fleet
    """ # noqa: E501
    configmanagement: Optional[ConfigManagementMembershipSpec] = None
    identityservice: Optional[IdentityServiceMembershipSpec] = None
    mesh: Optional[ServiceMeshMembershipSpec] = None
    policycontroller: Optional[PolicyControllerMembershipSpec] = None
    __properties: ClassVar[List[str]] = ["configmanagement", "identityservice", "mesh", "policycontroller"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommonFleetDefaultMemberConfigSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of configmanagement
        if self.configmanagement:
            _dict['configmanagement'] = self.configmanagement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of identityservice
        if self.identityservice:
            _dict['identityservice'] = self.identityservice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mesh
        if self.mesh:
            _dict['mesh'] = self.mesh.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policycontroller
        if self.policycontroller:
            _dict['policycontroller'] = self.policycontroller.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommonFleetDefaultMemberConfigSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configmanagement": ConfigManagementMembershipSpec.from_dict(obj["configmanagement"]) if obj.get("configmanagement") is not None else None,
            "identityservice": IdentityServiceMembershipSpec.from_dict(obj["identityservice"]) if obj.get("identityservice") is not None else None,
            "mesh": ServiceMeshMembershipSpec.from_dict(obj["mesh"]) if obj.get("mesh") is not None else None,
            "policycontroller": PolicyControllerMembershipSpec.from_dict(obj["policycontroller"]) if obj.get("policycontroller") is not None else None
        })
        return _obj



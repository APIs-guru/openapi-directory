# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.config_management_binauthz_state import ConfigManagementBinauthzState
from openapi_client.models.config_management_config_sync_state import ConfigManagementConfigSyncState
from openapi_client.models.config_management_hierarchy_controller_state import ConfigManagementHierarchyControllerState
from openapi_client.models.config_management_membership_spec import ConfigManagementMembershipSpec
from openapi_client.models.config_management_operator_state import ConfigManagementOperatorState
from openapi_client.models.config_management_policy_controller_state import ConfigManagementPolicyControllerState
from typing import Optional, Set
from typing_extensions import Self

class ConfigManagementMembershipState(BaseModel):
    """
    **Anthos Config Management**: State for a single cluster.
    """ # noqa: E501
    binauthz_state: Optional[ConfigManagementBinauthzState] = Field(default=None, alias="binauthzState")
    cluster_name: Optional[StrictStr] = Field(default=None, description="This field is set to the `cluster_name` field of the Membership Spec if it is not empty. Otherwise, it is set to the cluster's fleet membership name.", alias="clusterName")
    config_sync_state: Optional[ConfigManagementConfigSyncState] = Field(default=None, alias="configSyncState")
    hierarchy_controller_state: Optional[ConfigManagementHierarchyControllerState] = Field(default=None, alias="hierarchyControllerState")
    membership_spec: Optional[ConfigManagementMembershipSpec] = Field(default=None, alias="membershipSpec")
    operator_state: Optional[ConfigManagementOperatorState] = Field(default=None, alias="operatorState")
    policy_controller_state: Optional[ConfigManagementPolicyControllerState] = Field(default=None, alias="policyControllerState")
    __properties: ClassVar[List[str]] = ["binauthzState", "clusterName", "configSyncState", "hierarchyControllerState", "membershipSpec", "operatorState", "policyControllerState"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigManagementMembershipState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of binauthz_state
        if self.binauthz_state:
            _dict['binauthzState'] = self.binauthz_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config_sync_state
        if self.config_sync_state:
            _dict['configSyncState'] = self.config_sync_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hierarchy_controller_state
        if self.hierarchy_controller_state:
            _dict['hierarchyControllerState'] = self.hierarchy_controller_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of membership_spec
        if self.membership_spec:
            _dict['membershipSpec'] = self.membership_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operator_state
        if self.operator_state:
            _dict['operatorState'] = self.operator_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy_controller_state
        if self.policy_controller_state:
            _dict['policyControllerState'] = self.policy_controller_state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigManagementMembershipState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "binauthzState": ConfigManagementBinauthzState.from_dict(obj["binauthzState"]) if obj.get("binauthzState") is not None else None,
            "clusterName": obj.get("clusterName"),
            "configSyncState": ConfigManagementConfigSyncState.from_dict(obj["configSyncState"]) if obj.get("configSyncState") is not None else None,
            "hierarchyControllerState": ConfigManagementHierarchyControllerState.from_dict(obj["hierarchyControllerState"]) if obj.get("hierarchyControllerState") is not None else None,
            "membershipSpec": ConfigManagementMembershipSpec.from_dict(obj["membershipSpec"]) if obj.get("membershipSpec") is not None else None,
            "operatorState": ConfigManagementOperatorState.from_dict(obj["operatorState"]) if obj.get("operatorState") is not None else None,
            "policyControllerState": ConfigManagementPolicyControllerState.from_dict(obj["policyControllerState"]) if obj.get("policyControllerState") is not None else None
        })
        return _obj



# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ConfigManagementConfigSyncDeploymentState(BaseModel):
    """
    The state of ConfigSync's deployment on a cluster
    """ # noqa: E501
    admission_webhook: Optional[StrictStr] = Field(default=None, description="Deployment state of admission-webhook", alias="admissionWebhook")
    git_sync: Optional[StrictStr] = Field(default=None, description="Deployment state of the git-sync pod", alias="gitSync")
    importer: Optional[StrictStr] = Field(default=None, description="Deployment state of the importer pod")
    monitor: Optional[StrictStr] = Field(default=None, description="Deployment state of the monitor pod")
    reconciler_manager: Optional[StrictStr] = Field(default=None, description="Deployment state of reconciler-manager pod", alias="reconcilerManager")
    root_reconciler: Optional[StrictStr] = Field(default=None, description="Deployment state of root-reconciler", alias="rootReconciler")
    syncer: Optional[StrictStr] = Field(default=None, description="Deployment state of the syncer pod")
    __properties: ClassVar[List[str]] = ["admissionWebhook", "gitSync", "importer", "monitor", "reconcilerManager", "rootReconciler", "syncer"]

    @field_validator('admission_webhook')
    def admission_webhook_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEPLOYMENT_STATE_UNSPECIFIED', 'NOT_INSTALLED', 'INSTALLED', 'ERROR', 'PENDING']):
            raise ValueError("must be one of enum values ('DEPLOYMENT_STATE_UNSPECIFIED', 'NOT_INSTALLED', 'INSTALLED', 'ERROR', 'PENDING')")
        return value

    @field_validator('git_sync')
    def git_sync_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEPLOYMENT_STATE_UNSPECIFIED', 'NOT_INSTALLED', 'INSTALLED', 'ERROR', 'PENDING']):
            raise ValueError("must be one of enum values ('DEPLOYMENT_STATE_UNSPECIFIED', 'NOT_INSTALLED', 'INSTALLED', 'ERROR', 'PENDING')")
        return value

    @field_validator('importer')
    def importer_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEPLOYMENT_STATE_UNSPECIFIED', 'NOT_INSTALLED', 'INSTALLED', 'ERROR', 'PENDING']):
            raise ValueError("must be one of enum values ('DEPLOYMENT_STATE_UNSPECIFIED', 'NOT_INSTALLED', 'INSTALLED', 'ERROR', 'PENDING')")
        return value

    @field_validator('monitor')
    def monitor_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEPLOYMENT_STATE_UNSPECIFIED', 'NOT_INSTALLED', 'INSTALLED', 'ERROR', 'PENDING']):
            raise ValueError("must be one of enum values ('DEPLOYMENT_STATE_UNSPECIFIED', 'NOT_INSTALLED', 'INSTALLED', 'ERROR', 'PENDING')")
        return value

    @field_validator('reconciler_manager')
    def reconciler_manager_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEPLOYMENT_STATE_UNSPECIFIED', 'NOT_INSTALLED', 'INSTALLED', 'ERROR', 'PENDING']):
            raise ValueError("must be one of enum values ('DEPLOYMENT_STATE_UNSPECIFIED', 'NOT_INSTALLED', 'INSTALLED', 'ERROR', 'PENDING')")
        return value

    @field_validator('root_reconciler')
    def root_reconciler_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEPLOYMENT_STATE_UNSPECIFIED', 'NOT_INSTALLED', 'INSTALLED', 'ERROR', 'PENDING']):
            raise ValueError("must be one of enum values ('DEPLOYMENT_STATE_UNSPECIFIED', 'NOT_INSTALLED', 'INSTALLED', 'ERROR', 'PENDING')")
        return value

    @field_validator('syncer')
    def syncer_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEPLOYMENT_STATE_UNSPECIFIED', 'NOT_INSTALLED', 'INSTALLED', 'ERROR', 'PENDING']):
            raise ValueError("must be one of enum values ('DEPLOYMENT_STATE_UNSPECIFIED', 'NOT_INSTALLED', 'INSTALLED', 'ERROR', 'PENDING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigManagementConfigSyncDeploymentState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigManagementConfigSyncDeploymentState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "admissionWebhook": obj.get("admissionWebhook"),
            "gitSync": obj.get("gitSync"),
            "importer": obj.get("importer"),
            "monitor": obj.get("monitor"),
            "reconcilerManager": obj.get("reconcilerManager"),
            "rootReconciler": obj.get("rootReconciler"),
            "syncer": obj.get("syncer")
        })
        return _obj



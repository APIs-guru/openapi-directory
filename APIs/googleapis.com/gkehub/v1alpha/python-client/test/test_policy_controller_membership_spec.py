# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.policy_controller_membership_spec import PolicyControllerMembershipSpec

class TestPolicyControllerMembershipSpec(unittest.TestCase):
    """PolicyControllerMembershipSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PolicyControllerMembershipSpec:
        """Test PolicyControllerMembershipSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PolicyControllerMembershipSpec`
        """
        model = PolicyControllerMembershipSpec()
        if include_optional:
            return PolicyControllerMembershipSpec(
                policy_controller_hub_config = openapi_client.models.policy_controller_hub_config.PolicyControllerHubConfig(
                    audit_interval_seconds = '', 
                    constraint_violation_limit = '', 
                    deployment_configs = {
                        'key' : openapi_client.models.policy_controller_policy_controller_deployment_config.PolicyControllerPolicyControllerDeploymentConfig(
                            container_resources = openapi_client.models.policy_controller_resource_requirements.PolicyControllerResourceRequirements(
                                limits = openapi_client.models.policy_controller_resource_list.PolicyControllerResourceList(
                                    cpu = '', 
                                    memory = '', ), 
                                requests = openapi_client.models.policy_controller_resource_list.PolicyControllerResourceList(
                                    cpu = '', 
                                    memory = '', ), ), 
                            pod_affinity = 'AFFINITY_UNSPECIFIED', 
                            pod_anti_affinity = True, 
                            pod_tolerations = [
                                openapi_client.models.policy_controller_toleration.PolicyControllerToleration(
                                    effect = '', 
                                    key = '', 
                                    operator = '', 
                                    value = '', )
                                ], 
                            replica_count = '', )
                        }, 
                    exemptable_namespaces = [
                        ''
                        ], 
                    install_spec = 'INSTALL_SPEC_UNSPECIFIED', 
                    log_denies_enabled = True, 
                    monitoring = openapi_client.models.policy_controller_monitoring_config.PolicyControllerMonitoringConfig(
                        backends = [
                            'MONITORING_BACKEND_UNSPECIFIED'
                            ], ), 
                    mutation_enabled = True, 
                    policy_content = openapi_client.models.policy_controller_policy_content_spec.PolicyControllerPolicyContentSpec(
                        bundles = {
                            'key' : openapi_client.models.policy_controller_bundle_install_spec.PolicyControllerBundleInstallSpec(
                                exempted_namespaces = [
                                    ''
                                    ], )
                            }, 
                        template_library = openapi_client.models.policy_controller_template_library_config.PolicyControllerTemplateLibraryConfig(
                            installation = 'INSTALLATION_UNSPECIFIED', ), ), 
                    referential_rules_enabled = True, ),
                version = ''
            )
        else:
            return PolicyControllerMembershipSpec(
        )
        """

    def testPolicyControllerMembershipSpec(self):
        """Test PolicyControllerMembershipSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.config_management_config_sync_state import ConfigManagementConfigSyncState

class TestConfigManagementConfigSyncState(unittest.TestCase):
    """ConfigManagementConfigSyncState unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConfigManagementConfigSyncState:
        """Test ConfigManagementConfigSyncState
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConfigManagementConfigSyncState`
        """
        model = ConfigManagementConfigSyncState()
        if include_optional:
            return ConfigManagementConfigSyncState(
                deployment_state = openapi_client.models.config_management_config_sync_deployment_state.ConfigManagementConfigSyncDeploymentState(
                    admission_webhook = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                    git_sync = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                    importer = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                    monitor = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                    reconciler_manager = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                    root_reconciler = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                    syncer = 'DEPLOYMENT_STATE_UNSPECIFIED', ),
                errors = [
                    openapi_client.models.config_management_config_sync_error.ConfigManagementConfigSyncError(
                        error_message = '', )
                    ],
                reposync_crd = 'CRD_STATE_UNSPECIFIED',
                rootsync_crd = 'CRD_STATE_UNSPECIFIED',
                state = 'STATE_UNSPECIFIED',
                sync_state = openapi_client.models.config_management_sync_state.ConfigManagementSyncState(
                    code = 'SYNC_CODE_UNSPECIFIED', 
                    errors = [
                        openapi_client.models.config_management_sync_error.ConfigManagementSyncError(
                            code = '', 
                            error_message = '', 
                            error_resources = [
                                openapi_client.models.config_management_error_resource.ConfigManagementErrorResource(
                                    resource_gvk = openapi_client.models.config_management_group_version_kind.ConfigManagementGroupVersionKind(
                                        group = '', 
                                        kind = '', 
                                        version = '', ), 
                                    resource_name = '', 
                                    resource_namespace = '', 
                                    source_path = '', )
                                ], )
                        ], 
                    import_token = '', 
                    last_sync = '', 
                    last_sync_time = '', 
                    source_token = '', 
                    sync_token = '', ),
                version = openapi_client.models.config_management_config_sync_version.ConfigManagementConfigSyncVersion(
                    admission_webhook = '', 
                    git_sync = '', 
                    importer = '', 
                    monitor = '', 
                    reconciler_manager = '', 
                    root_reconciler = '', 
                    syncer = '', )
            )
        else:
            return ConfigManagementConfigSyncState(
        )
        """

    def testConfigManagementConfigSyncState(self):
        """Test ConfigManagementConfigSyncState"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

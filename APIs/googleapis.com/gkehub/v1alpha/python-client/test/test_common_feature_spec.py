# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.common_feature_spec import CommonFeatureSpec

class TestCommonFeatureSpec(unittest.TestCase):
    """CommonFeatureSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CommonFeatureSpec:
        """Test CommonFeatureSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CommonFeatureSpec`
        """
        model = CommonFeatureSpec()
        if include_optional:
            return CommonFeatureSpec(
                anthosobservability = openapi_client.models.anthos_observability_feature_spec.AnthosObservabilityFeatureSpec(
                    default_membership_spec = openapi_client.models.anthos_observability_membership_spec.AnthosObservabilityMembershipSpec(
                        do_not_optimize_metrics = True, 
                        enable_stackdriver_on_applications = True, 
                        version = '', ), ),
                appdevexperience = None,
                cloudauditlogging = openapi_client.models.cloud_audit_logging_feature_spec.CloudAuditLoggingFeatureSpec(
                    allowlisted_service_accounts = [
                        ''
                        ], ),
                clusterupgrade = openapi_client.models.cluster_upgrade_fleet_spec.ClusterUpgradeFleetSpec(
                    gke_upgrade_overrides = [
                        openapi_client.models.cluster_upgrade_gke_upgrade_override.ClusterUpgradeGKEUpgradeOverride(
                            post_conditions = openapi_client.models.cluster_upgrade_post_conditions.ClusterUpgradePostConditions(
                                soaking = '', ), 
                            upgrade = openapi_client.models.cluster_upgrade_gke_upgrade.ClusterUpgradeGKEUpgrade(
                                name = '', 
                                version = '', ), )
                        ], 
                    post_conditions = openapi_client.models.cluster_upgrade_post_conditions.ClusterUpgradePostConditions(
                        soaking = '', ), 
                    upstream_fleets = [
                        ''
                        ], ),
                dataplanev2 = openapi_client.models.dataplane_v2_feature_spec.DataplaneV2FeatureSpec(
                    enable_encryption = True, ),
                fleetobservability = openapi_client.models.fleet_observability_feature_spec.FleetObservabilityFeatureSpec(
                    logging_config = openapi_client.models.fleet_observability_logging_config.FleetObservabilityLoggingConfig(
                        default_config = openapi_client.models.fleet_observability_routing_config.FleetObservabilityRoutingConfig(
                            mode = 'MODE_UNSPECIFIED', ), 
                        fleet_scope_logs_config = openapi_client.models.fleet_observability_routing_config.FleetObservabilityRoutingConfig(
                            mode = 'MODE_UNSPECIFIED', ), ), ),
                multiclusteringress = openapi_client.models.multi_cluster_ingress_feature_spec.MultiClusterIngressFeatureSpec(
                    billing = 'BILLING_UNSPECIFIED', 
                    config_membership = '', ),
                namespaceactuation = openapi_client.models.namespace_actuation_feature_spec.NamespaceActuationFeatureSpec(
                    actuation_mode = 'ACTUATION_MODE_UNSPECIFIED', ),
                workloadcertificate = openapi_client.models.feature_spec.FeatureSpec(
                    default_config = openapi_client.models.membership_spec.MembershipSpec(
                        certificate_management = 'CERTIFICATE_MANAGEMENT_UNSPECIFIED', ), 
                    provision_google_ca = 'GOOGLE_CA_PROVISIONING_UNSPECIFIED', )
            )
        else:
            return CommonFeatureSpec(
        )
        """

    def testCommonFeatureSpec(self):
        """Test CommonFeatureSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

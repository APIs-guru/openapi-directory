# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.identity_service_azure_ad_config import IdentityServiceAzureADConfig
from openapi_client.models.identity_service_google_config import IdentityServiceGoogleConfig
from openapi_client.models.identity_service_oidc_config import IdentityServiceOidcConfig
from typing import Optional, Set
from typing_extensions import Self

class IdentityServiceAuthMethod(BaseModel):
    """
    Configuration of an auth method for a member/cluster. Only one authentication method (e.g., OIDC and LDAP) can be set per AuthMethod.
    """ # noqa: E501
    azuread_config: Optional[IdentityServiceAzureADConfig] = Field(default=None, alias="azureadConfig")
    google_config: Optional[IdentityServiceGoogleConfig] = Field(default=None, alias="googleConfig")
    name: Optional[StrictStr] = Field(default=None, description="Identifier for auth config.")
    oidc_config: Optional[IdentityServiceOidcConfig] = Field(default=None, alias="oidcConfig")
    proxy: Optional[StrictStr] = Field(default=None, description="Proxy server address to use for auth method.")
    __properties: ClassVar[List[str]] = ["azureadConfig", "googleConfig", "name", "oidcConfig", "proxy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentityServiceAuthMethod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of azuread_config
        if self.azuread_config:
            _dict['azureadConfig'] = self.azuread_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google_config
        if self.google_config:
            _dict['googleConfig'] = self.google_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oidc_config
        if self.oidc_config:
            _dict['oidcConfig'] = self.oidc_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentityServiceAuthMethod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "azureadConfig": IdentityServiceAzureADConfig.from_dict(obj["azureadConfig"]) if obj.get("azureadConfig") is not None else None,
            "googleConfig": IdentityServiceGoogleConfig.from_dict(obj["googleConfig"]) if obj.get("googleConfig") is not None else None,
            "name": obj.get("name"),
            "oidcConfig": IdentityServiceOidcConfig.from_dict(obj["oidcConfig"]) if obj.get("oidcConfig") is not None else None,
            "proxy": obj.get("proxy")
        })
        return _obj



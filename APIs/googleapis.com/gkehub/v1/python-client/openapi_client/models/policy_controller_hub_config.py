# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.policy_controller_monitoring_config import PolicyControllerMonitoringConfig
from openapi_client.models.policy_controller_policy_content_spec import PolicyControllerPolicyContentSpec
from openapi_client.models.policy_controller_policy_controller_deployment_config import PolicyControllerPolicyControllerDeploymentConfig
from typing import Optional, Set
from typing_extensions import Self

class PolicyControllerHubConfig(BaseModel):
    """
    Configuration for Policy Controller
    """ # noqa: E501
    audit_interval_seconds: Optional[StrictStr] = Field(default=None, description="Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.", alias="auditIntervalSeconds")
    constraint_violation_limit: Optional[StrictStr] = Field(default=None, description="The maximum number of audit violations to be stored in a constraint. If not set, the internal default (currently 20) will be used.", alias="constraintViolationLimit")
    deployment_configs: Optional[Dict[str, PolicyControllerPolicyControllerDeploymentConfig]] = Field(default=None, description="Map of deployment configs to deployments (\"admission\", \"audit\", \"mutation').", alias="deploymentConfigs")
    exemptable_namespaces: Optional[List[StrictStr]] = Field(default=None, description="The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.", alias="exemptableNamespaces")
    install_spec: Optional[StrictStr] = Field(default=None, description="The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.", alias="installSpec")
    log_denies_enabled: Optional[StrictBool] = Field(default=None, description="Logs all denies and dry run failures.", alias="logDeniesEnabled")
    monitoring: Optional[PolicyControllerMonitoringConfig] = None
    mutation_enabled: Optional[StrictBool] = Field(default=None, description="Enables the ability to mutate resources using Policy Controller.", alias="mutationEnabled")
    policy_content: Optional[PolicyControllerPolicyContentSpec] = Field(default=None, alias="policyContent")
    referential_rules_enabled: Optional[StrictBool] = Field(default=None, description="Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.", alias="referentialRulesEnabled")
    __properties: ClassVar[List[str]] = ["auditIntervalSeconds", "constraintViolationLimit", "deploymentConfigs", "exemptableNamespaces", "installSpec", "logDeniesEnabled", "monitoring", "mutationEnabled", "policyContent", "referentialRulesEnabled"]

    @field_validator('install_spec')
    def install_spec_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INSTALL_SPEC_UNSPECIFIED', 'INSTALL_SPEC_NOT_INSTALLED', 'INSTALL_SPEC_ENABLED', 'INSTALL_SPEC_SUSPENDED', 'INSTALL_SPEC_DETACHED']):
            raise ValueError("must be one of enum values ('INSTALL_SPEC_UNSPECIFIED', 'INSTALL_SPEC_NOT_INSTALLED', 'INSTALL_SPEC_ENABLED', 'INSTALL_SPEC_SUSPENDED', 'INSTALL_SPEC_DETACHED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyControllerHubConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in deployment_configs (dict)
        _field_dict = {}
        if self.deployment_configs:
            for _key_deployment_configs in self.deployment_configs:
                if self.deployment_configs[_key_deployment_configs]:
                    _field_dict[_key_deployment_configs] = self.deployment_configs[_key_deployment_configs].to_dict()
            _dict['deploymentConfigs'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of monitoring
        if self.monitoring:
            _dict['monitoring'] = self.monitoring.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy_content
        if self.policy_content:
            _dict['policyContent'] = self.policy_content.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyControllerHubConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auditIntervalSeconds": obj.get("auditIntervalSeconds"),
            "constraintViolationLimit": obj.get("constraintViolationLimit"),
            "deploymentConfigs": dict(
                (_k, PolicyControllerPolicyControllerDeploymentConfig.from_dict(_v))
                for _k, _v in obj["deploymentConfigs"].items()
            )
            if obj.get("deploymentConfigs") is not None
            else None,
            "exemptableNamespaces": obj.get("exemptableNamespaces"),
            "installSpec": obj.get("installSpec"),
            "logDeniesEnabled": obj.get("logDeniesEnabled"),
            "monitoring": PolicyControllerMonitoringConfig.from_dict(obj["monitoring"]) if obj.get("monitoring") is not None else None,
            "mutationEnabled": obj.get("mutationEnabled"),
            "policyContent": PolicyControllerPolicyContentSpec.from_dict(obj["policyContent"]) if obj.get("policyContent") is not None else None,
            "referentialRulesEnabled": obj.get("referentialRulesEnabled")
        })
        return _obj



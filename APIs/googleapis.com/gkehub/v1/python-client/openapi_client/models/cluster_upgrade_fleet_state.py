# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cluster_upgrade_gke_upgrade_feature_state import ClusterUpgradeGKEUpgradeFeatureState
from openapi_client.models.cluster_upgrade_ignored_membership import ClusterUpgradeIgnoredMembership
from typing import Optional, Set
from typing_extensions import Self

class ClusterUpgradeFleetState(BaseModel):
    """
    **ClusterUpgrade**: The state for the fleet-level ClusterUpgrade feature.
    """ # noqa: E501
    downstream_fleets: Optional[List[StrictStr]] = Field(default=None, description="This fleets whose upstream_fleets contain the current fleet. The fleet name should be either fleet project number or id.", alias="downstreamFleets")
    gke_state: Optional[ClusterUpgradeGKEUpgradeFeatureState] = Field(default=None, alias="gkeState")
    ignored: Optional[Dict[str, ClusterUpgradeIgnoredMembership]] = Field(default=None, description="A list of memberships ignored by the feature. For example, manually upgraded clusters can be ignored if they are newer than the default versions of its release channel. The membership resource is in the format: `projects/{p}/locations/{l}/membership/{m}`.")
    __properties: ClassVar[List[str]] = ["downstreamFleets", "gkeState", "ignored"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterUpgradeFleetState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gke_state
        if self.gke_state:
            _dict['gkeState'] = self.gke_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in ignored (dict)
        _field_dict = {}
        if self.ignored:
            for _key_ignored in self.ignored:
                if self.ignored[_key_ignored]:
                    _field_dict[_key_ignored] = self.ignored[_key_ignored].to_dict()
            _dict['ignored'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterUpgradeFleetState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "downstreamFleets": obj.get("downstreamFleets"),
            "gkeState": ClusterUpgradeGKEUpgradeFeatureState.from_dict(obj["gkeState"]) if obj.get("gkeState") is not None else None,
            "ignored": dict(
                (_k, ClusterUpgradeIgnoredMembership.from_dict(_v))
                for _k, _v in obj["ignored"].items()
            )
            if obj.get("ignored") is not None
            else None
        })
        return _obj



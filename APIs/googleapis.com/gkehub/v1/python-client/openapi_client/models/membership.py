# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.authority import Authority
from openapi_client.models.membership_endpoint import MembershipEndpoint
from openapi_client.models.membership_state import MembershipState
from openapi_client.models.monitoring_config import MonitoringConfig
from typing import Optional, Set
from typing_extensions import Self

class Membership(BaseModel):
    """
    Membership contains information about a member cluster.
    """ # noqa: E501
    authority: Optional[Authority] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. When the Membership was created.", alias="createTime")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. When the Membership was deleted.", alias="deleteTime")
    description: Optional[StrictStr] = Field(default=None, description="Output only. Description of this membership, limited to 63 characters. Must match the regex: `a-zA-Z0-9*` This field is present for legacy purposes.")
    endpoint: Optional[MembershipEndpoint] = None
    external_id: Optional[StrictStr] = Field(default=None, description="Optional. An externally-generated and managed ID for this Membership. This ID may be modified after creation, but this is not recommended. The ID must match the regex: `a-zA-Z0-9*` If this Membership represents a Kubernetes cluster, this value should be set to the UID of the `kube-system` namespace object.", alias="externalId")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Labels for this membership.")
    last_connection_time: Optional[StrictStr] = Field(default=None, description="Output only. For clusters using Connect, the timestamp of the most recent connection established with Google Cloud. This time is updated every several minutes, not continuously. For clusters that do not use GKE Connect, or that have never connected successfully, this field will be unset.", alias="lastConnectionTime")
    monitoring_config: Optional[MonitoringConfig] = Field(default=None, alias="monitoringConfig")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The full, unique name of this Membership resource in the format `projects/*/locations/*/memberships/{membership_id}`, set during creation. `membership_id` must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or `-` 3. It must start and end with an alphanumeric character Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`, with a maximum length of 63 characters.")
    state: Optional[MembershipState] = None
    unique_id: Optional[StrictStr] = Field(default=None, description="Output only. Google-generated UUID for this resource. This is unique across all Membership resources. If a Membership resource is deleted and another resource with the same name is created, it gets a different unique_id.", alias="uniqueId")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. When the Membership was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["authority", "createTime", "deleteTime", "description", "endpoint", "externalId", "labels", "lastConnectionTime", "monitoringConfig", "name", "state", "uniqueId", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Membership from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "delete_time",
            "description",
            "last_connection_time",
            "name",
            "unique_id",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of authority
        if self.authority:
            _dict['authority'] = self.authority.to_dict()
        # override the default output from pydantic by calling `to_dict()` of endpoint
        if self.endpoint:
            _dict['endpoint'] = self.endpoint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monitoring_config
        if self.monitoring_config:
            _dict['monitoringConfig'] = self.monitoring_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Membership from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authority": Authority.from_dict(obj["authority"]) if obj.get("authority") is not None else None,
            "createTime": obj.get("createTime"),
            "deleteTime": obj.get("deleteTime"),
            "description": obj.get("description"),
            "endpoint": MembershipEndpoint.from_dict(obj["endpoint"]) if obj.get("endpoint") is not None else None,
            "externalId": obj.get("externalId"),
            "labels": obj.get("labels"),
            "lastConnectionTime": obj.get("lastConnectionTime"),
            "monitoringConfig": MonitoringConfig.from_dict(obj["monitoringConfig"]) if obj.get("monitoringConfig") is not None else None,
            "name": obj.get("name"),
            "state": MembershipState.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "uniqueId": obj.get("uniqueId"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



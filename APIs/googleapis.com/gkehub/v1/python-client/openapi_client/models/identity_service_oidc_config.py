# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class IdentityServiceOidcConfig(BaseModel):
    """
    Configuration for OIDC Auth flow.
    """ # noqa: E501
    certificate_authority_data: Optional[StrictStr] = Field(default=None, description="PEM-encoded CA for OIDC provider.", alias="certificateAuthorityData")
    client_id: Optional[StrictStr] = Field(default=None, description="ID for OIDC client application.", alias="clientId")
    client_secret: Optional[StrictStr] = Field(default=None, description="Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH.", alias="clientSecret")
    deploy_cloud_console_proxy: Optional[StrictBool] = Field(default=None, description="Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console.", alias="deployCloudConsoleProxy")
    enable_access_token: Optional[StrictBool] = Field(default=None, description="Enable access token.", alias="enableAccessToken")
    encrypted_client_secret: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Output only. Encrypted OIDC Client secret", alias="encryptedClientSecret")
    extra_params: Optional[StrictStr] = Field(default=None, description="Comma-separated list of key-value pairs.", alias="extraParams")
    group_prefix: Optional[StrictStr] = Field(default=None, description="Prefix to prepend to group name.", alias="groupPrefix")
    groups_claim: Optional[StrictStr] = Field(default=None, description="Claim in OIDC ID token that holds group information.", alias="groupsClaim")
    issuer_uri: Optional[StrictStr] = Field(default=None, description="URI for the OIDC provider. This should point to the level below .well-known/openid-configuration.", alias="issuerUri")
    kubectl_redirect_uri: Optional[StrictStr] = Field(default=None, description="Registered redirect uri to redirect users going through OAuth flow using kubectl plugin.", alias="kubectlRedirectUri")
    scopes: Optional[StrictStr] = Field(default=None, description="Comma-separated list of identifiers.")
    user_claim: Optional[StrictStr] = Field(default=None, description="Claim in OIDC ID token that holds username.", alias="userClaim")
    user_prefix: Optional[StrictStr] = Field(default=None, description="Prefix to prepend to user name.", alias="userPrefix")
    __properties: ClassVar[List[str]] = ["certificateAuthorityData", "clientId", "clientSecret", "deployCloudConsoleProxy", "enableAccessToken", "encryptedClientSecret", "extraParams", "groupPrefix", "groupsClaim", "issuerUri", "kubectlRedirectUri", "scopes", "userClaim", "userPrefix"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentityServiceOidcConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "encrypted_client_secret",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentityServiceOidcConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificateAuthorityData": obj.get("certificateAuthorityData"),
            "clientId": obj.get("clientId"),
            "clientSecret": obj.get("clientSecret"),
            "deployCloudConsoleProxy": obj.get("deployCloudConsoleProxy"),
            "enableAccessToken": obj.get("enableAccessToken"),
            "encryptedClientSecret": obj.get("encryptedClientSecret"),
            "extraParams": obj.get("extraParams"),
            "groupPrefix": obj.get("groupPrefix"),
            "groupsClaim": obj.get("groupsClaim"),
            "issuerUri": obj.get("issuerUri"),
            "kubectlRedirectUri": obj.get("kubectlRedirectUri"),
            "scopes": obj.get("scopes"),
            "userClaim": obj.get("userClaim"),
            "userPrefix": obj.get("userPrefix")
        })
        return _obj



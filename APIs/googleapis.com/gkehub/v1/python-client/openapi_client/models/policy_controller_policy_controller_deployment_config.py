# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.policy_controller_resource_requirements import PolicyControllerResourceRequirements
from openapi_client.models.policy_controller_toleration import PolicyControllerToleration
from typing import Optional, Set
from typing_extensions import Self

class PolicyControllerPolicyControllerDeploymentConfig(BaseModel):
    """
    Deployment-specific configuration.
    """ # noqa: E501
    container_resources: Optional[PolicyControllerResourceRequirements] = Field(default=None, alias="containerResources")
    pod_affinity: Optional[StrictStr] = Field(default=None, description="Pod affinity configuration.", alias="podAffinity")
    pod_anti_affinity: Optional[StrictBool] = Field(default=None, description="Pod anti-affinity enablement. Deprecated: use `pod_affinity` instead.", alias="podAntiAffinity")
    pod_tolerations: Optional[List[PolicyControllerToleration]] = Field(default=None, description="Pod tolerations of node taints.", alias="podTolerations")
    replica_count: Optional[StrictStr] = Field(default=None, description="Pod replica count.", alias="replicaCount")
    __properties: ClassVar[List[str]] = ["containerResources", "podAffinity", "podAntiAffinity", "podTolerations", "replicaCount"]

    @field_validator('pod_affinity')
    def pod_affinity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AFFINITY_UNSPECIFIED', 'NO_AFFINITY', 'ANTI_AFFINITY']):
            raise ValueError("must be one of enum values ('AFFINITY_UNSPECIFIED', 'NO_AFFINITY', 'ANTI_AFFINITY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyControllerPolicyControllerDeploymentConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of container_resources
        if self.container_resources:
            _dict['containerResources'] = self.container_resources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in pod_tolerations (list)
        _items = []
        if self.pod_tolerations:
            for _item_pod_tolerations in self.pod_tolerations:
                if _item_pod_tolerations:
                    _items.append(_item_pod_tolerations.to_dict())
            _dict['podTolerations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyControllerPolicyControllerDeploymentConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containerResources": PolicyControllerResourceRequirements.from_dict(obj["containerResources"]) if obj.get("containerResources") is not None else None,
            "podAffinity": obj.get("podAffinity"),
            "podAntiAffinity": obj.get("podAntiAffinity"),
            "podTolerations": [PolicyControllerToleration.from_dict(_item) for _item in obj["podTolerations"]] if obj.get("podTolerations") is not None else None,
            "replicaCount": obj.get("replicaCount")
        })
        return _obj



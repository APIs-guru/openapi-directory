# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.config_management_git_config import ConfigManagementGitConfig
from openapi_client.models.config_management_oci_config import ConfigManagementOciConfig
from typing import Optional, Set
from typing_extensions import Self

class ConfigManagementConfigSync(BaseModel):
    """
    Configuration for Config Sync
    """ # noqa: E501
    allow_vertical_scale: Optional[StrictBool] = Field(default=None, description="Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.", alias="allowVerticalScale")
    enabled: Optional[StrictBool] = Field(default=None, description="Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.")
    git: Optional[ConfigManagementGitConfig] = None
    metrics_gcp_service_account_email: Optional[StrictStr] = Field(default=None, description="The Email of the Google Cloud Service Account (GSA) used for exporting Config Sync metrics to Cloud Monitoring and Cloud Monarch when Workload Identity is enabled. The GSA should have the Monitoring Metric Writer (roles/monitoring.metricWriter) IAM role. The Kubernetes ServiceAccount `default` in the namespace `config-management-monitoring` should be bound to the GSA.", alias="metricsGcpServiceAccountEmail")
    oci: Optional[ConfigManagementOciConfig] = None
    prevent_drift: Optional[StrictBool] = Field(default=None, description="Set to true to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.", alias="preventDrift")
    source_format: Optional[StrictStr] = Field(default=None, description="Specifies whether the Config Sync Repo is in \"hierarchical\" or \"unstructured\" mode.", alias="sourceFormat")
    __properties: ClassVar[List[str]] = ["allowVerticalScale", "enabled", "git", "metricsGcpServiceAccountEmail", "oci", "preventDrift", "sourceFormat"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigManagementConfigSync from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of git
        if self.git:
            _dict['git'] = self.git.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oci
        if self.oci:
            _dict['oci'] = self.oci.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigManagementConfigSync from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowVerticalScale": obj.get("allowVerticalScale"),
            "enabled": obj.get("enabled"),
            "git": ConfigManagementGitConfig.from_dict(obj["git"]) if obj.get("git") is not None else None,
            "metricsGcpServiceAccountEmail": obj.get("metricsGcpServiceAccountEmail"),
            "oci": ConfigManagementOciConfig.from_dict(obj["oci"]) if obj.get("oci") is not None else None,
            "preventDrift": obj.get("preventDrift"),
            "sourceFormat": obj.get("sourceFormat")
        })
        return _obj



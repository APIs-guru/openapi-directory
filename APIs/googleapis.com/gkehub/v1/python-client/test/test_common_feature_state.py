# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.common_feature_state import CommonFeatureState

class TestCommonFeatureState(unittest.TestCase):
    """CommonFeatureState unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CommonFeatureState:
        """Test CommonFeatureState
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CommonFeatureState`
        """
        model = CommonFeatureState()
        if include_optional:
            return CommonFeatureState(
                appdevexperience = openapi_client.models.app_dev_experience_feature_state.AppDevExperienceFeatureState(
                    networking_install_succeeded = openapi_client.models.status.Status(
                        code = 'CODE_UNSPECIFIED', 
                        description = '', ), ),
                clusterupgrade = openapi_client.models.cluster_upgrade_fleet_state.ClusterUpgradeFleetState(
                    downstream_fleets = [
                        ''
                        ], 
                    gke_state = openapi_client.models.cluster_upgrade_gke_upgrade_feature_state.ClusterUpgradeGKEUpgradeFeatureState(
                        conditions = [
                            openapi_client.models.cluster_upgrade_gke_upgrade_feature_condition.ClusterUpgradeGKEUpgradeFeatureCondition(
                                reason = '', 
                                status = '', 
                                type = '', 
                                update_time = '', )
                            ], 
                        upgrade_state = [
                            openapi_client.models.cluster_upgrade_gke_upgrade_state.ClusterUpgradeGKEUpgradeState(
                                stats = {
                                    'key' : ''
                                    }, 
                                status = openapi_client.models.cluster_upgrade_upgrade_status.ClusterUpgradeUpgradeStatus(
                                    code = 'CODE_UNSPECIFIED', 
                                    reason = '', 
                                    update_time = '', ), 
                                upgrade = openapi_client.models.cluster_upgrade_gke_upgrade.ClusterUpgradeGKEUpgrade(
                                    name = '', 
                                    version = '', ), )
                            ], ), 
                    ignored = {
                        'key' : openapi_client.models.cluster_upgrade_ignored_membership.ClusterUpgradeIgnoredMembership(
                            ignored_time = '', 
                            reason = '', )
                        }, ),
                fleetobservability = openapi_client.models.fleet_observability_feature_state.FleetObservabilityFeatureState(
                    logging = openapi_client.models.fleet_observability_fleet_observability_logging_state.FleetObservabilityFleetObservabilityLoggingState(
                        default_log = openapi_client.models.fleet_observability_fleet_observability_base_feature_state.FleetObservabilityFleetObservabilityBaseFeatureState(
                            code = 'CODE_UNSPECIFIED', 
                            errors = [
                                openapi_client.models.fleet_observability_feature_error.FleetObservabilityFeatureError(
                                    code = '', 
                                    description = '', )
                                ], ), 
                        scope_log = openapi_client.models.fleet_observability_fleet_observability_base_feature_state.FleetObservabilityFleetObservabilityBaseFeatureState(
                            code = 'CODE_UNSPECIFIED', ), ), 
                    monitoring = openapi_client.models.fleet_observability_fleet_observability_monitoring_state.FleetObservabilityFleetObservabilityMonitoringState(
                        state = , ), ),
                state = openapi_client.models.feature_state.FeatureState(
                    code = 'CODE_UNSPECIFIED', 
                    description = '', 
                    update_time = '', )
            )
        else:
            return CommonFeatureState(
        )
        """

    def testCommonFeatureState(self):
        """Test CommonFeatureState"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

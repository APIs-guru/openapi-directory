# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.membership_feature_state import MembershipFeatureState

class TestMembershipFeatureState(unittest.TestCase):
    """MembershipFeatureState unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MembershipFeatureState:
        """Test MembershipFeatureState
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MembershipFeatureState`
        """
        model = MembershipFeatureState()
        if include_optional:
            return MembershipFeatureState(
                appdevexperience = openapi_client.models.app_dev_experience_feature_state.AppDevExperienceFeatureState(
                    networking_install_succeeded = openapi_client.models.status.Status(
                        code = 'CODE_UNSPECIFIED', 
                        description = '', ), ),
                clusterupgrade = openapi_client.models.cluster_upgrade_membership_state.ClusterUpgradeMembershipState(
                    ignored = openapi_client.models.cluster_upgrade_ignored_membership.ClusterUpgradeIgnoredMembership(
                        ignored_time = '', 
                        reason = '', ), 
                    upgrades = [
                        openapi_client.models.cluster_upgrade_membership_gke_upgrade_state.ClusterUpgradeMembershipGKEUpgradeState(
                            status = openapi_client.models.cluster_upgrade_upgrade_status.ClusterUpgradeUpgradeStatus(
                                code = 'CODE_UNSPECIFIED', 
                                reason = '', 
                                update_time = '', ), 
                            upgrade = openapi_client.models.cluster_upgrade_gke_upgrade.ClusterUpgradeGKEUpgrade(
                                name = '', 
                                version = '', ), )
                        ], ),
                configmanagement = openapi_client.models.config_management_membership_state.ConfigManagementMembershipState(
                    cluster_name = '', 
                    config_sync_state = openapi_client.models.config_management_config_sync_state.ConfigManagementConfigSyncState(
                        deployment_state = openapi_client.models.config_management_config_sync_deployment_state.ConfigManagementConfigSyncDeploymentState(
                            admission_webhook = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                            git_sync = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                            importer = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                            monitor = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                            reconciler_manager = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                            root_reconciler = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                            syncer = 'DEPLOYMENT_STATE_UNSPECIFIED', ), 
                        errors = [
                            openapi_client.models.config_management_config_sync_error.ConfigManagementConfigSyncError(
                                error_message = '', )
                            ], 
                        reposync_crd = 'CRD_STATE_UNSPECIFIED', 
                        rootsync_crd = 'CRD_STATE_UNSPECIFIED', 
                        state = 'STATE_UNSPECIFIED', 
                        sync_state = openapi_client.models.config_management_sync_state.ConfigManagementSyncState(
                            code = 'SYNC_CODE_UNSPECIFIED', 
                            import_token = '', 
                            last_sync = '', 
                            last_sync_time = '', 
                            source_token = '', 
                            sync_token = '', ), 
                        version = openapi_client.models.config_management_config_sync_version.ConfigManagementConfigSyncVersion(
                            admission_webhook = '', 
                            git_sync = '', 
                            importer = '', 
                            monitor = '', 
                            reconciler_manager = '', 
                            root_reconciler = '', 
                            syncer = '', ), ), 
                    hierarchy_controller_state = openapi_client.models.config_management_hierarchy_controller_state.ConfigManagementHierarchyControllerState(
                        state = openapi_client.models.config_management_hierarchy_controller_deployment_state.ConfigManagementHierarchyControllerDeploymentState(
                            extension = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                            hnc = 'DEPLOYMENT_STATE_UNSPECIFIED', ), ), 
                    membership_spec = openapi_client.models.config_management_membership_spec.ConfigManagementMembershipSpec(
                        cluster = '', 
                        config_sync = openapi_client.models.config_management_config_sync.ConfigManagementConfigSync(
                            allow_vertical_scale = True, 
                            enabled = True, 
                            git = openapi_client.models.config_management_git_config.ConfigManagementGitConfig(
                                gcp_service_account_email = '', 
                                https_proxy = '', 
                                policy_dir = '', 
                                secret_type = '', 
                                sync_branch = '', 
                                sync_repo = '', 
                                sync_rev = '', 
                                sync_wait_secs = '', ), 
                            metrics_gcp_service_account_email = '', 
                            oci = openapi_client.models.config_management_oci_config.ConfigManagementOciConfig(
                                gcp_service_account_email = '', 
                                policy_dir = '', 
                                secret_type = '', 
                                sync_repo = '', 
                                sync_wait_secs = '', ), 
                            prevent_drift = True, 
                            source_format = '', ), 
                        hierarchy_controller = openapi_client.models.config_management_hierarchy_controller_config.ConfigManagementHierarchyControllerConfig(
                            enable_hierarchical_resource_quota = True, 
                            enable_pod_tree_labels = True, 
                            enabled = True, ), 
                        management = 'MANAGEMENT_UNSPECIFIED', 
                        policy_controller = openapi_client.models.config_management_policy_controller.ConfigManagementPolicyController(
                            audit_interval_seconds = '', 
                            enabled = True, 
                            exemptable_namespaces = [
                                ''
                                ], 
                            log_denies_enabled = True, 
                            monitoring = openapi_client.models.config_management_policy_controller_monitoring.ConfigManagementPolicyControllerMonitoring(
                                backends = [
                                    'MONITORING_BACKEND_UNSPECIFIED'
                                    ], ), 
                            mutation_enabled = True, 
                            referential_rules_enabled = True, 
                            template_library_installed = True, 
                            update_time = '', ), ), 
                    operator_state = openapi_client.models.config_management_operator_state.ConfigManagementOperatorState(), 
                    policy_controller_state = openapi_client.models.config_management_policy_controller_state.ConfigManagementPolicyControllerState(
                        migration = openapi_client.models.config_management_policy_controller_migration.ConfigManagementPolicyControllerMigration(
                            copy_time = '', 
                            stage = 'STAGE_UNSPECIFIED', ), ), ),
                fleetobservability = openapi_client.models.fleet_observability_membership_state.FleetObservabilityMembershipState(),
                identityservice = openapi_client.models.identity_service_membership_state.IdentityServiceMembershipState(
                    failure_reason = '', 
                    installed_version = '', 
                    member_config = openapi_client.models.identity_service_membership_spec.IdentityServiceMembershipSpec(
                        auth_methods = [
                            openapi_client.models.identity_service_auth_method.IdentityServiceAuthMethod(
                                azuread_config = openapi_client.models.identity_service_azure_ad_config.IdentityServiceAzureADConfig(
                                    client_id = '', 
                                    client_secret = '', 
                                    encrypted_client_secret = 'YQ==', 
                                    kubectl_redirect_uri = '', 
                                    tenant = '', ), 
                                google_config = openapi_client.models.identity_service_google_config.IdentityServiceGoogleConfig(
                                    disable = True, ), 
                                name = '', 
                                oidc_config = openapi_client.models.identity_service_oidc_config.IdentityServiceOidcConfig(
                                    certificate_authority_data = '', 
                                    client_id = '', 
                                    client_secret = '', 
                                    deploy_cloud_console_proxy = True, 
                                    enable_access_token = True, 
                                    encrypted_client_secret = 'YQ==', 
                                    extra_params = '', 
                                    group_prefix = '', 
                                    groups_claim = '', 
                                    issuer_uri = '', 
                                    kubectl_redirect_uri = '', 
                                    scopes = '', 
                                    user_claim = '', 
                                    user_prefix = '', ), 
                                proxy = '', )
                            ], ), 
                    state = 'DEPLOYMENT_STATE_UNSPECIFIED', ),
                policycontroller = openapi_client.models.policy_controller_membership_state.PolicyControllerMembershipState(
                    component_states = {
                        'key' : openapi_client.models.policy_controller_on_cluster_state.PolicyControllerOnClusterState(
                            details = '', 
                            state = 'LIFECYCLE_STATE_UNSPECIFIED', )
                        }, 
                    policy_content_state = openapi_client.models.policy_controller_policy_content_state.PolicyControllerPolicyContentState(
                        bundle_states = {
                            'key' : openapi_client.models.policy_controller_on_cluster_state.PolicyControllerOnClusterState(
                                details = '', 
                                state = 'LIFECYCLE_STATE_UNSPECIFIED', )
                            }, 
                        referential_sync_config_state = , 
                        template_library_state = , ), 
                    state = 'LIFECYCLE_STATE_UNSPECIFIED', ),
                servicemesh = openapi_client.models.service_mesh_membership_state.ServiceMeshMembershipState(
                    control_plane_management = openapi_client.models.service_mesh_control_plane_management.ServiceMeshControlPlaneManagement(
                        details = [
                            openapi_client.models.service_mesh_status_details.ServiceMeshStatusDetails(
                                code = '', )
                            ], 
                        state = 'LIFECYCLE_STATE_UNSPECIFIED', ), 
                    data_plane_management = openapi_client.models.service_mesh_data_plane_management.ServiceMeshDataPlaneManagement(
                        state = 'LIFECYCLE_STATE_UNSPECIFIED', ), ),
                state = openapi_client.models.feature_state.FeatureState(
                    code = 'CODE_UNSPECIFIED', 
                    description = '', 
                    update_time = '', )
            )
        else:
            return MembershipFeatureState(
        )
        """

    def testMembershipFeatureState(self):
        """Test MembershipFeatureState"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.config_management_membership_state import ConfigManagementMembershipState

class TestConfigManagementMembershipState(unittest.TestCase):
    """ConfigManagementMembershipState unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConfigManagementMembershipState:
        """Test ConfigManagementMembershipState
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConfigManagementMembershipState`
        """
        model = ConfigManagementMembershipState()
        if include_optional:
            return ConfigManagementMembershipState(
                cluster_name = '',
                config_sync_state = openapi_client.models.config_management_config_sync_state.ConfigManagementConfigSyncState(
                    deployment_state = openapi_client.models.config_management_config_sync_deployment_state.ConfigManagementConfigSyncDeploymentState(
                        admission_webhook = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                        git_sync = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                        importer = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                        monitor = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                        reconciler_manager = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                        root_reconciler = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                        syncer = 'DEPLOYMENT_STATE_UNSPECIFIED', ), 
                    errors = [
                        openapi_client.models.config_management_config_sync_error.ConfigManagementConfigSyncError(
                            error_message = '', )
                        ], 
                    reposync_crd = 'CRD_STATE_UNSPECIFIED', 
                    rootsync_crd = 'CRD_STATE_UNSPECIFIED', 
                    state = 'STATE_UNSPECIFIED', 
                    sync_state = openapi_client.models.config_management_sync_state.ConfigManagementSyncState(
                        code = 'SYNC_CODE_UNSPECIFIED', 
                        import_token = '', 
                        last_sync = '', 
                        last_sync_time = '', 
                        source_token = '', 
                        sync_token = '', ), 
                    version = openapi_client.models.config_management_config_sync_version.ConfigManagementConfigSyncVersion(
                        admission_webhook = '', 
                        git_sync = '', 
                        importer = '', 
                        monitor = '', 
                        reconciler_manager = '', 
                        root_reconciler = '', 
                        syncer = '', ), ),
                hierarchy_controller_state = openapi_client.models.config_management_hierarchy_controller_state.ConfigManagementHierarchyControllerState(
                    state = openapi_client.models.config_management_hierarchy_controller_deployment_state.ConfigManagementHierarchyControllerDeploymentState(
                        extension = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                        hnc = 'DEPLOYMENT_STATE_UNSPECIFIED', ), 
                    version = openapi_client.models.config_management_hierarchy_controller_version.ConfigManagementHierarchyControllerVersion(
                        extension = '', 
                        hnc = '', ), ),
                membership_spec = openapi_client.models.config_management_membership_spec.ConfigManagementMembershipSpec(
                    cluster = '', 
                    config_sync = openapi_client.models.config_management_config_sync.ConfigManagementConfigSync(
                        allow_vertical_scale = True, 
                        enabled = True, 
                        git = openapi_client.models.config_management_git_config.ConfigManagementGitConfig(
                            gcp_service_account_email = '', 
                            https_proxy = '', 
                            policy_dir = '', 
                            secret_type = '', 
                            sync_branch = '', 
                            sync_repo = '', 
                            sync_rev = '', 
                            sync_wait_secs = '', ), 
                        metrics_gcp_service_account_email = '', 
                        oci = openapi_client.models.config_management_oci_config.ConfigManagementOciConfig(
                            gcp_service_account_email = '', 
                            policy_dir = '', 
                            secret_type = '', 
                            sync_repo = '', 
                            sync_wait_secs = '', ), 
                        prevent_drift = True, 
                        source_format = '', ), 
                    hierarchy_controller = openapi_client.models.config_management_hierarchy_controller_config.ConfigManagementHierarchyControllerConfig(
                        enable_hierarchical_resource_quota = True, 
                        enable_pod_tree_labels = True, 
                        enabled = True, ), 
                    management = 'MANAGEMENT_UNSPECIFIED', 
                    policy_controller = openapi_client.models.config_management_policy_controller.ConfigManagementPolicyController(
                        audit_interval_seconds = '', 
                        enabled = True, 
                        exemptable_namespaces = [
                            ''
                            ], 
                        log_denies_enabled = True, 
                        monitoring = openapi_client.models.config_management_policy_controller_monitoring.ConfigManagementPolicyControllerMonitoring(
                            backends = [
                                'MONITORING_BACKEND_UNSPECIFIED'
                                ], ), 
                        mutation_enabled = True, 
                        referential_rules_enabled = True, 
                        template_library_installed = True, 
                        update_time = '', ), 
                    version = '', ),
                operator_state = openapi_client.models.config_management_operator_state.ConfigManagementOperatorState(
                    deployment_state = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                    errors = [
                        openapi_client.models.config_management_install_error.ConfigManagementInstallError(
                            error_message = '', )
                        ], 
                    version = '', ),
                policy_controller_state = openapi_client.models.config_management_policy_controller_state.ConfigManagementPolicyControllerState(
                    deployment_state = openapi_client.models.config_management_gatekeeper_deployment_state.ConfigManagementGatekeeperDeploymentState(
                        gatekeeper_audit = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                        gatekeeper_controller_manager_state = 'DEPLOYMENT_STATE_UNSPECIFIED', 
                        gatekeeper_mutation = 'DEPLOYMENT_STATE_UNSPECIFIED', ), 
                    migration = openapi_client.models.config_management_policy_controller_migration.ConfigManagementPolicyControllerMigration(
                        copy_time = '', 
                        stage = 'STAGE_UNSPECIFIED', ), 
                    version = openapi_client.models.config_management_policy_controller_version.ConfigManagementPolicyControllerVersion(), )
            )
        else:
            return ConfigManagementMembershipState(
        )
        """

    def testConfigManagementMembershipState(self):
        """Test ConfigManagementMembershipState"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

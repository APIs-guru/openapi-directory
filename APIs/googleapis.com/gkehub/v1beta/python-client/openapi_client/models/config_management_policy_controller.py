# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.config_management_policy_controller_monitoring import ConfigManagementPolicyControllerMonitoring
from typing import Optional, Set
from typing_extensions import Self

class ConfigManagementPolicyController(BaseModel):
    """
    Configuration for Policy Controller
    """ # noqa: E501
    audit_interval_seconds: Optional[StrictStr] = Field(default=None, description="Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.", alias="auditIntervalSeconds")
    enabled: Optional[StrictBool] = Field(default=None, description="Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.")
    exemptable_namespaces: Optional[List[StrictStr]] = Field(default=None, description="The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.", alias="exemptableNamespaces")
    log_denies_enabled: Optional[StrictBool] = Field(default=None, description="Logs all denies and dry run failures.", alias="logDeniesEnabled")
    monitoring: Optional[ConfigManagementPolicyControllerMonitoring] = None
    mutation_enabled: Optional[StrictBool] = Field(default=None, description="Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.", alias="mutationEnabled")
    referential_rules_enabled: Optional[StrictBool] = Field(default=None, description="Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.", alias="referentialRulesEnabled")
    template_library_installed: Optional[StrictBool] = Field(default=None, description="Installs the default template library along with Policy Controller.", alias="templateLibraryInstalled")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Last time this membership spec was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["auditIntervalSeconds", "enabled", "exemptableNamespaces", "logDeniesEnabled", "monitoring", "mutationEnabled", "referentialRulesEnabled", "templateLibraryInstalled", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigManagementPolicyController from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of monitoring
        if self.monitoring:
            _dict['monitoring'] = self.monitoring.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigManagementPolicyController from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auditIntervalSeconds": obj.get("auditIntervalSeconds"),
            "enabled": obj.get("enabled"),
            "exemptableNamespaces": obj.get("exemptableNamespaces"),
            "logDeniesEnabled": obj.get("logDeniesEnabled"),
            "monitoring": ConfigManagementPolicyControllerMonitoring.from_dict(obj["monitoring"]) if obj.get("monitoring") is not None else None,
            "mutationEnabled": obj.get("mutationEnabled"),
            "referentialRulesEnabled": obj.get("referentialRulesEnabled"),
            "templateLibraryInstalled": obj.get("templateLibraryInstalled"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



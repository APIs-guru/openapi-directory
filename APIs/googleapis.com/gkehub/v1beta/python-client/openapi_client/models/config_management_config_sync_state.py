# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.config_management_config_sync_deployment_state import ConfigManagementConfigSyncDeploymentState
from openapi_client.models.config_management_config_sync_error import ConfigManagementConfigSyncError
from openapi_client.models.config_management_config_sync_version import ConfigManagementConfigSyncVersion
from openapi_client.models.config_management_sync_state import ConfigManagementSyncState
from typing import Optional, Set
from typing_extensions import Self

class ConfigManagementConfigSyncState(BaseModel):
    """
    State information for ConfigSync
    """ # noqa: E501
    deployment_state: Optional[ConfigManagementConfigSyncDeploymentState] = Field(default=None, alias="deploymentState")
    errors: Optional[List[ConfigManagementConfigSyncError]] = Field(default=None, description="Errors pertaining to the installation of Config Sync.")
    reposync_crd: Optional[StrictStr] = Field(default=None, description="The state of the Reposync CRD", alias="reposyncCrd")
    rootsync_crd: Optional[StrictStr] = Field(default=None, description="The state of the RootSync CRD", alias="rootsyncCrd")
    state: Optional[StrictStr] = Field(default=None, description="The state of CS This field summarizes the other fields in this message.")
    sync_state: Optional[ConfigManagementSyncState] = Field(default=None, alias="syncState")
    version: Optional[ConfigManagementConfigSyncVersion] = None
    __properties: ClassVar[List[str]] = ["deploymentState", "errors", "reposyncCrd", "rootsyncCrd", "state", "syncState", "version"]

    @field_validator('reposync_crd')
    def reposync_crd_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CRD_STATE_UNSPECIFIED', 'NOT_INSTALLED', 'INSTALLED', 'TERMINATING', 'INSTALLING']):
            raise ValueError("must be one of enum values ('CRD_STATE_UNSPECIFIED', 'NOT_INSTALLED', 'INSTALLED', 'TERMINATING', 'INSTALLING')")
        return value

    @field_validator('rootsync_crd')
    def rootsync_crd_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CRD_STATE_UNSPECIFIED', 'NOT_INSTALLED', 'INSTALLED', 'TERMINATING', 'INSTALLING']):
            raise ValueError("must be one of enum values ('CRD_STATE_UNSPECIFIED', 'NOT_INSTALLED', 'INSTALLED', 'TERMINATING', 'INSTALLING')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CONFIG_SYNC_NOT_INSTALLED', 'CONFIG_SYNC_INSTALLED', 'CONFIG_SYNC_ERROR', 'CONFIG_SYNC_PENDING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CONFIG_SYNC_NOT_INSTALLED', 'CONFIG_SYNC_INSTALLED', 'CONFIG_SYNC_ERROR', 'CONFIG_SYNC_PENDING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigManagementConfigSyncState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of deployment_state
        if self.deployment_state:
            _dict['deploymentState'] = self.deployment_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of sync_state
        if self.sync_state:
            _dict['syncState'] = self.sync_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version
        if self.version:
            _dict['version'] = self.version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigManagementConfigSyncState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deploymentState": ConfigManagementConfigSyncDeploymentState.from_dict(obj["deploymentState"]) if obj.get("deploymentState") is not None else None,
            "errors": [ConfigManagementConfigSyncError.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "reposyncCrd": obj.get("reposyncCrd"),
            "rootsyncCrd": obj.get("rootsyncCrd"),
            "state": obj.get("state"),
            "syncState": ConfigManagementSyncState.from_dict(obj["syncState"]) if obj.get("syncState") is not None else None,
            "version": ConfigManagementConfigSyncVersion.from_dict(obj["version"]) if obj.get("version") is not None else None
        })
        return _obj



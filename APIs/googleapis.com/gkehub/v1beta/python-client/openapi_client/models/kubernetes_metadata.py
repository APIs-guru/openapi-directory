# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class KubernetesMetadata(BaseModel):
    """
    KubernetesMetadata provides informational metadata for Memberships representing Kubernetes clusters.
    """ # noqa: E501
    kubernetes_api_server_version: Optional[StrictStr] = Field(default=None, description="Output only. Kubernetes API server version string as reported by `/version`.", alias="kubernetesApiServerVersion")
    memory_mb: Optional[StrictInt] = Field(default=None, description="Output only. The total memory capacity as reported by the sum of all Kubernetes nodes resources, defined in MB.", alias="memoryMb")
    node_count: Optional[StrictInt] = Field(default=None, description="Output only. Node count as reported by Kubernetes nodes resources.", alias="nodeCount")
    node_provider_id: Optional[StrictStr] = Field(default=None, description="Output only. Node providerID as reported by the first node in the list of nodes on the Kubernetes endpoint. On Kubernetes platforms that support zero-node clusters (like GKE-on-GCP), the node_count will be zero and the node_provider_id will be empty.", alias="nodeProviderId")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which these details were last updated. This update_time is different from the Membership-level update_time since EndpointDetails are updated internally for API consumers.", alias="updateTime")
    vcpu_count: Optional[StrictInt] = Field(default=None, description="Output only. vCPU count as reported by Kubernetes nodes resources.", alias="vcpuCount")
    __properties: ClassVar[List[str]] = ["kubernetesApiServerVersion", "memoryMb", "nodeCount", "nodeProviderId", "updateTime", "vcpuCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KubernetesMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "kubernetes_api_server_version",
            "memory_mb",
            "node_count",
            "node_provider_id",
            "update_time",
            "vcpu_count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KubernetesMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "kubernetesApiServerVersion": obj.get("kubernetesApiServerVersion"),
            "memoryMb": obj.get("memoryMb"),
            "nodeCount": obj.get("nodeCount"),
            "nodeProviderId": obj.get("nodeProviderId"),
            "updateTime": obj.get("updateTime"),
            "vcpuCount": obj.get("vcpuCount")
        })
        return _obj



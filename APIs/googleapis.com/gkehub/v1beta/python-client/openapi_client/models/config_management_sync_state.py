# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.config_management_sync_error import ConfigManagementSyncError
from typing import Optional, Set
from typing_extensions import Self

class ConfigManagementSyncState(BaseModel):
    """
    State indicating an ACM's progress syncing configurations to a cluster
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, description="Sync status code")
    errors: Optional[List[ConfigManagementSyncError]] = Field(default=None, description="A list of errors resulting from problematic configs. This list will be truncated after 100 errors, although it is unlikely for that many errors to simultaneously exist.")
    import_token: Optional[StrictStr] = Field(default=None, description="Token indicating the state of the importer.", alias="importToken")
    last_sync: Optional[StrictStr] = Field(default=None, description="Deprecated: use last_sync_time instead. Timestamp of when ACM last successfully synced the repo The time format is specified in https://golang.org/pkg/time/#Time.String", alias="lastSync")
    last_sync_time: Optional[StrictStr] = Field(default=None, description="Timestamp type of when ACM last successfully synced the repo", alias="lastSyncTime")
    source_token: Optional[StrictStr] = Field(default=None, description="Token indicating the state of the repo.", alias="sourceToken")
    sync_token: Optional[StrictStr] = Field(default=None, description="Token indicating the state of the syncer.", alias="syncToken")
    __properties: ClassVar[List[str]] = ["code", "errors", "importToken", "lastSync", "lastSyncTime", "sourceToken", "syncToken"]

    @field_validator('code')
    def code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SYNC_CODE_UNSPECIFIED', 'SYNCED', 'PENDING', 'ERROR', 'NOT_CONFIGURED', 'NOT_INSTALLED', 'UNAUTHORIZED', 'UNREACHABLE']):
            raise ValueError("must be one of enum values ('SYNC_CODE_UNSPECIFIED', 'SYNCED', 'PENDING', 'ERROR', 'NOT_CONFIGURED', 'NOT_INSTALLED', 'UNAUTHORIZED', 'UNREACHABLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigManagementSyncState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigManagementSyncState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "errors": [ConfigManagementSyncError.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "importToken": obj.get("importToken"),
            "lastSync": obj.get("lastSync"),
            "lastSyncTime": obj.get("lastSyncTime"),
            "sourceToken": obj.get("sourceToken"),
            "syncToken": obj.get("syncToken")
        })
        return _obj



# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_features_response import ListFeaturesResponse

class TestListFeaturesResponse(unittest.TestCase):
    """ListFeaturesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListFeaturesResponse:
        """Test ListFeaturesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListFeaturesResponse`
        """
        model = ListFeaturesResponse()
        if include_optional:
            return ListFeaturesResponse(
                next_page_token = '',
                resources = [
                    openapi_client.models.feature.Feature(
                        create_time = '', 
                        delete_time = '', 
                        fleet_default_member_config = openapi_client.models.common_fleet_default_member_config_spec.CommonFleetDefaultMemberConfigSpec(
                            configmanagement = openapi_client.models.config_management_membership_spec.ConfigManagementMembershipSpec(
                                binauthz = openapi_client.models.config_management_binauthz_config.ConfigManagementBinauthzConfig(
                                    enabled = True, ), 
                                cluster = '', 
                                config_sync = openapi_client.models.config_management_config_sync.ConfigManagementConfigSync(
                                    allow_vertical_scale = True, 
                                    enabled = True, 
                                    git = openapi_client.models.config_management_git_config.ConfigManagementGitConfig(
                                        gcp_service_account_email = '', 
                                        https_proxy = '', 
                                        policy_dir = '', 
                                        secret_type = '', 
                                        sync_branch = '', 
                                        sync_repo = '', 
                                        sync_rev = '', 
                                        sync_wait_secs = '', ), 
                                    metrics_gcp_service_account_email = '', 
                                    oci = openapi_client.models.config_management_oci_config.ConfigManagementOciConfig(
                                        gcp_service_account_email = '', 
                                        policy_dir = '', 
                                        secret_type = '', 
                                        sync_repo = '', 
                                        sync_wait_secs = '', ), 
                                    prevent_drift = True, 
                                    source_format = '', ), 
                                hierarchy_controller = openapi_client.models.config_management_hierarchy_controller_config.ConfigManagementHierarchyControllerConfig(
                                    enable_hierarchical_resource_quota = True, 
                                    enable_pod_tree_labels = True, 
                                    enabled = True, ), 
                                management = 'MANAGEMENT_UNSPECIFIED', 
                                policy_controller = openapi_client.models.config_management_policy_controller.ConfigManagementPolicyController(
                                    audit_interval_seconds = '', 
                                    enabled = True, 
                                    exemptable_namespaces = [
                                        ''
                                        ], 
                                    log_denies_enabled = True, 
                                    monitoring = openapi_client.models.config_management_policy_controller_monitoring.ConfigManagementPolicyControllerMonitoring(
                                        backends = [
                                            'MONITORING_BACKEND_UNSPECIFIED'
                                            ], ), 
                                    mutation_enabled = True, 
                                    referential_rules_enabled = True, 
                                    template_library_installed = True, 
                                    update_time = '', ), 
                                version = '', ), 
                            identityservice = openapi_client.models.identity_service_membership_spec.IdentityServiceMembershipSpec(
                                auth_methods = [
                                    openapi_client.models.identity_service_auth_method.IdentityServiceAuthMethod(
                                        azuread_config = openapi_client.models.identity_service_azure_ad_config.IdentityServiceAzureADConfig(
                                            client_id = '', 
                                            client_secret = '', 
                                            encrypted_client_secret = 'YQ==', 
                                            kubectl_redirect_uri = '', 
                                            tenant = '', ), 
                                        google_config = openapi_client.models.identity_service_google_config.IdentityServiceGoogleConfig(
                                            disable = True, ), 
                                        name = '', 
                                        oidc_config = openapi_client.models.identity_service_oidc_config.IdentityServiceOidcConfig(
                                            certificate_authority_data = '', 
                                            client_id = '', 
                                            client_secret = '', 
                                            deploy_cloud_console_proxy = True, 
                                            enable_access_token = True, 
                                            encrypted_client_secret = 'YQ==', 
                                            extra_params = '', 
                                            group_prefix = '', 
                                            groups_claim = '', 
                                            issuer_uri = '', 
                                            kubectl_redirect_uri = '', 
                                            scopes = '', 
                                            user_claim = '', 
                                            user_prefix = '', ), 
                                        proxy = '', )
                                    ], ), 
                            mesh = openapi_client.models.service_mesh_membership_spec.ServiceMeshMembershipSpec(
                                control_plane = 'CONTROL_PLANE_MANAGEMENT_UNSPECIFIED', 
                                management = 'MANAGEMENT_UNSPECIFIED', ), 
                            policycontroller = openapi_client.models.policy_controller_membership_spec.PolicyControllerMembershipSpec(
                                policy_controller_hub_config = openapi_client.models.policy_controller_hub_config.PolicyControllerHubConfig(
                                    audit_interval_seconds = '', 
                                    constraint_violation_limit = '', 
                                    deployment_configs = {
                                        'key' : openapi_client.models.policy_controller_policy_controller_deployment_config.PolicyControllerPolicyControllerDeploymentConfig(
                                            container_resources = openapi_client.models.policy_controller_resource_requirements.PolicyControllerResourceRequirements(
                                                limits = openapi_client.models.policy_controller_resource_list.PolicyControllerResourceList(
                                                    cpu = '', 
                                                    memory = '', ), 
                                                requests = openapi_client.models.policy_controller_resource_list.PolicyControllerResourceList(
                                                    cpu = '', 
                                                    memory = '', ), ), 
                                            pod_affinity = 'AFFINITY_UNSPECIFIED', 
                                            pod_anti_affinity = True, 
                                            pod_tolerations = [
                                                openapi_client.models.policy_controller_toleration.PolicyControllerToleration(
                                                    effect = '', 
                                                    key = '', 
                                                    operator = '', 
                                                    value = '', )
                                                ], 
                                            replica_count = '', )
                                        }, 
                                    install_spec = 'INSTALL_SPEC_UNSPECIFIED', 
                                    log_denies_enabled = True, 
                                    mutation_enabled = True, 
                                    policy_content = openapi_client.models.policy_controller_policy_content_spec.PolicyControllerPolicyContentSpec(
                                        bundles = {
                                            'key' : openapi_client.models.policy_controller_bundle_install_spec.PolicyControllerBundleInstallSpec(
                                                exempted_namespaces = [
                                                    ''
                                                    ], )
                                            }, 
                                        template_library = openapi_client.models.policy_controller_template_library_config.PolicyControllerTemplateLibraryConfig(
                                            installation = 'INSTALLATION_UNSPECIFIED', ), ), 
                                    referential_rules_enabled = True, ), 
                                version = '', ), ), 
                        labels = {
                            'key' : ''
                            }, 
                        membership_specs = {
                            'key' : openapi_client.models.membership_feature_spec.MembershipFeatureSpec(
                                anthosobservability = openapi_client.models.anthos_observability_membership_spec.AnthosObservabilityMembershipSpec(
                                    do_not_optimize_metrics = True, 
                                    enable_stackdriver_on_applications = True, 
                                    version = '', ), 
                                cloudbuild = openapi_client.models.membership_spec.MembershipSpec(
                                    security_policy = 'SECURITY_POLICY_UNSPECIFIED', 
                                    version = '', ), 
                                fleetobservability = openapi_client.models.fleet_observability_membership_spec.FleetObservabilityMembershipSpec(), 
                                origin = openapi_client.models.origin.Origin(
                                    type = 'TYPE_UNSPECIFIED', ), )
                            }, 
                        membership_states = {
                            'key' : openapi_client.models.membership_feature_state.MembershipFeatureState(
                                appdevexperience = openapi_client.models.app_dev_experience_feature_state.AppDevExperienceFeatureState(
                                    networking_install_succeeded = openapi_client.models.status.Status(
                                        code = 'CODE_UNSPECIFIED', 
                                        description = '', ), ), 
                                clusterupgrade = openapi_client.models.cluster_upgrade_membership_state.ClusterUpgradeMembershipState(
                                    ignored = openapi_client.models.cluster_upgrade_ignored_membership.ClusterUpgradeIgnoredMembership(
                                        ignored_time = '', 
                                        reason = '', ), 
                                    upgrades = [
                                        openapi_client.models.cluster_upgrade_membership_gke_upgrade_state.ClusterUpgradeMembershipGKEUpgradeState(
                                            status = openapi_client.models.cluster_upgrade_upgrade_status.ClusterUpgradeUpgradeStatus(
                                                code = 'CODE_UNSPECIFIED', 
                                                reason = '', 
                                                update_time = '', ), 
                                            upgrade = openapi_client.models.cluster_upgrade_gke_upgrade.ClusterUpgradeGKEUpgrade(
                                                name = '', 
                                                version = '', ), )
                                        ], ), 
                                metering = openapi_client.models.metering_membership_state.MeteringMembershipState(
                                    last_measurement_time = '', 
                                    precise_last_measured_cluster_vcpu_capacity = 1.337, ), 
                                servicemesh = openapi_client.models.service_mesh_membership_state.ServiceMeshMembershipState(
                                    control_plane_management = openapi_client.models.service_mesh_control_plane_management.ServiceMeshControlPlaneManagement(
                                        details = [
                                            openapi_client.models.service_mesh_status_details.ServiceMeshStatusDetails(
                                                code = '', )
                                            ], 
                                        state = 'LIFECYCLE_STATE_UNSPECIFIED', ), 
                                    data_plane_management = openapi_client.models.service_mesh_data_plane_management.ServiceMeshDataPlaneManagement(
                                        state = 'LIFECYCLE_STATE_UNSPECIFIED', ), ), 
                                state = openapi_client.models.feature_state.FeatureState(
                                    code = 'CODE_UNSPECIFIED', 
                                    description = '', 
                                    update_time = '', ), )
                            }, 
                        name = '', 
                        resource_state = openapi_client.models.feature_resource_state.FeatureResourceState(), 
                        scope_specs = {
                            'key' : openapi_client.models.scope_feature_spec.ScopeFeatureSpec()
                            }, 
                        scope_states = {
                            'key' : openapi_client.models.scope_feature_state.ScopeFeatureState()
                            }, 
                        spec = openapi_client.models.common_feature_spec.CommonFeatureSpec(
                            dataplanev2 = openapi_client.models.dataplane_v2_feature_spec.DataplaneV2FeatureSpec(
                                enable_encryption = True, ), 
                            multiclusteringress = openapi_client.models.multi_cluster_ingress_feature_spec.MultiClusterIngressFeatureSpec(
                                billing = 'BILLING_UNSPECIFIED', 
                                config_membership = '', ), ), 
                        state = openapi_client.models.common_feature_state.CommonFeatureState(), 
                        update_time = '', )
                    ]
            )
        else:
            return ListFeaturesResponse(
        )
        """

    def testListFeaturesResponse(self):
        """Test ListFeaturesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

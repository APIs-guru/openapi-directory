# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OnPremCluster(BaseModel):
    """
    OnPremCluster contains information specific to GKE On-Prem clusters.
    """ # noqa: E501
    admin_cluster: Optional[StrictBool] = Field(default=None, description="Immutable. Whether the cluster is an admin cluster.", alias="adminCluster")
    cluster_missing: Optional[StrictBool] = Field(default=None, description="Output only. If cluster_missing is set then it denotes that API(gkeonprem.googleapis.com) resource for this GKE On-Prem cluster no longer exists.", alias="clusterMissing")
    cluster_type: Optional[StrictStr] = Field(default=None, description="Immutable. The on prem cluster's type.", alias="clusterType")
    resource_link: Optional[StrictStr] = Field(default=None, description="Immutable. Self-link of the Google Cloud resource for the GKE On-Prem cluster. For example: //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/vmwareClusters/my-cluster //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/bareMetalClusters/my-cluster", alias="resourceLink")
    __properties: ClassVar[List[str]] = ["adminCluster", "clusterMissing", "clusterType", "resourceLink"]

    @field_validator('cluster_type')
    def cluster_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CLUSTERTYPE_UNSPECIFIED', 'BOOTSTRAP', 'HYBRID', 'STANDALONE', 'USER']):
            raise ValueError("must be one of enum values ('CLUSTERTYPE_UNSPECIFIED', 'BOOTSTRAP', 'HYBRID', 'STANDALONE', 'USER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OnPremCluster from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cluster_missing",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OnPremCluster from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adminCluster": obj.get("adminCluster"),
            "clusterMissing": obj.get("clusterMissing"),
            "clusterType": obj.get("clusterType"),
            "resourceLink": obj.get("resourceLink")
        })
        return _obj



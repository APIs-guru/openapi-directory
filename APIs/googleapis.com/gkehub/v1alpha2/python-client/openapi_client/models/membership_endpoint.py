# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.appliance_cluster import ApplianceCluster
from openapi_client.models.edge_cluster import EdgeCluster
from openapi_client.models.gke_cluster import GkeCluster
from openapi_client.models.kubernetes_metadata import KubernetesMetadata
from openapi_client.models.kubernetes_resource import KubernetesResource
from openapi_client.models.multi_cloud_cluster import MultiCloudCluster
from openapi_client.models.on_prem_cluster import OnPremCluster
from typing import Optional, Set
from typing_extensions import Self

class MembershipEndpoint(BaseModel):
    """
    MembershipEndpoint contains information needed to contact a Kubernetes API, endpoint and any additional Kubernetes metadata.
    """ # noqa: E501
    appliance_cluster: Optional[ApplianceCluster] = Field(default=None, alias="applianceCluster")
    edge_cluster: Optional[EdgeCluster] = Field(default=None, alias="edgeCluster")
    gke_cluster: Optional[GkeCluster] = Field(default=None, alias="gkeCluster")
    kubernetes_metadata: Optional[KubernetesMetadata] = Field(default=None, alias="kubernetesMetadata")
    kubernetes_resource: Optional[KubernetesResource] = Field(default=None, alias="kubernetesResource")
    multi_cloud_cluster: Optional[MultiCloudCluster] = Field(default=None, alias="multiCloudCluster")
    on_prem_cluster: Optional[OnPremCluster] = Field(default=None, alias="onPremCluster")
    __properties: ClassVar[List[str]] = ["applianceCluster", "edgeCluster", "gkeCluster", "kubernetesMetadata", "kubernetesResource", "multiCloudCluster", "onPremCluster"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MembershipEndpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of appliance_cluster
        if self.appliance_cluster:
            _dict['applianceCluster'] = self.appliance_cluster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of edge_cluster
        if self.edge_cluster:
            _dict['edgeCluster'] = self.edge_cluster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gke_cluster
        if self.gke_cluster:
            _dict['gkeCluster'] = self.gke_cluster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kubernetes_metadata
        if self.kubernetes_metadata:
            _dict['kubernetesMetadata'] = self.kubernetes_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kubernetes_resource
        if self.kubernetes_resource:
            _dict['kubernetesResource'] = self.kubernetes_resource.to_dict()
        # override the default output from pydantic by calling `to_dict()` of multi_cloud_cluster
        if self.multi_cloud_cluster:
            _dict['multiCloudCluster'] = self.multi_cloud_cluster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of on_prem_cluster
        if self.on_prem_cluster:
            _dict['onPremCluster'] = self.on_prem_cluster.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MembershipEndpoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applianceCluster": ApplianceCluster.from_dict(obj["applianceCluster"]) if obj.get("applianceCluster") is not None else None,
            "edgeCluster": EdgeCluster.from_dict(obj["edgeCluster"]) if obj.get("edgeCluster") is not None else None,
            "gkeCluster": GkeCluster.from_dict(obj["gkeCluster"]) if obj.get("gkeCluster") is not None else None,
            "kubernetesMetadata": KubernetesMetadata.from_dict(obj["kubernetesMetadata"]) if obj.get("kubernetesMetadata") is not None else None,
            "kubernetesResource": KubernetesResource.from_dict(obj["kubernetesResource"]) if obj.get("kubernetesResource") is not None else None,
            "multiCloudCluster": MultiCloudCluster.from_dict(obj["multiCloudCluster"]) if obj.get("multiCloudCluster") is not None else None,
            "onPremCluster": OnPremCluster.from_dict(obj["onPremCluster"]) if obj.get("onPremCluster") is not None else None
        })
        return _obj



# coding: utf-8

"""
    GKE Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource_manifest import ResourceManifest
from openapi_client.models.resource_options import ResourceOptions
from typing import Optional, Set
from typing_extensions import Self

class KubernetesResource(BaseModel):
    """
    KubernetesResource contains the YAML manifests and configuration for Membership Kubernetes resources in the cluster. After CreateMembership or UpdateMembership, these resources should be re-applied in the cluster.
    """ # noqa: E501
    connect_resources: Optional[List[ResourceManifest]] = Field(default=None, description="Output only. The Kubernetes resources for installing the GKE Connect agent. This field is only populated in the Membership returned from a successful long-running operation from CreateMembership or UpdateMembership. It is not populated during normal GetMembership or ListMemberships requests. To get the resource manifest after the initial registration, the caller should make a UpdateMembership call with an empty field mask.", alias="connectResources")
    membership_cr_manifest: Optional[StrictStr] = Field(default=None, description="Input only. The YAML representation of the Membership CR. This field is ignored for GKE clusters where Hub can read the CR directly. Callers should provide the CR that is currently present in the cluster during Create or Update, or leave this field empty if none exists. The CR manifest is used to validate the cluster has not been registered with another Membership.", alias="membershipCrManifest")
    membership_resources: Optional[List[ResourceManifest]] = Field(default=None, description="Output only. Additional Kubernetes resources that need to be applied to the cluster after Membership creation, and after every update. This field is only populated in the Membership returned from a successful long-running operation from CreateMembership or UpdateMembership. It is not populated during normal GetMembership or ListMemberships requests. To get the resource manifest after the initial registration, the caller should make a UpdateMembership call with an empty field mask.", alias="membershipResources")
    resource_options: Optional[ResourceOptions] = Field(default=None, alias="resourceOptions")
    __properties: ClassVar[List[str]] = ["connectResources", "membershipCrManifest", "membershipResources", "resourceOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KubernetesResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "connect_resources",
            "membership_resources",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in connect_resources (list)
        _items = []
        if self.connect_resources:
            for _item_connect_resources in self.connect_resources:
                if _item_connect_resources:
                    _items.append(_item_connect_resources.to_dict())
            _dict['connectResources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in membership_resources (list)
        _items = []
        if self.membership_resources:
            for _item_membership_resources in self.membership_resources:
                if _item_membership_resources:
                    _items.append(_item_membership_resources.to_dict())
            _dict['membershipResources'] = _items
        # override the default output from pydantic by calling `to_dict()` of resource_options
        if self.resource_options:
            _dict['resourceOptions'] = self.resource_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KubernetesResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectResources": [ResourceManifest.from_dict(_item) for _item in obj["connectResources"]] if obj.get("connectResources") is not None else None,
            "membershipCrManifest": obj.get("membershipCrManifest"),
            "membershipResources": [ResourceManifest.from_dict(_item) for _item in obj["membershipResources"]] if obj.get("membershipResources") is not None else None,
            "resourceOptions": ResourceOptions.from_dict(obj["resourceOptions"]) if obj.get("resourceOptions") is not None else None
        })
        return _obj



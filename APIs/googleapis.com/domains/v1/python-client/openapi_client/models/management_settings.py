# coding: utf-8

"""
    Cloud Domains API

    Enables management and configuration of domain names.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ManagementSettings(BaseModel):
    """
    Defines renewal, billing, and transfer settings for a `Registration`.
    """ # noqa: E501
    preferred_renewal_method: Optional[StrictStr] = Field(default=None, description="Optional. The desired renewal method for this `Registration`. The actual `renewal_method` is automatically updated to reflect this choice. If unset or equal to `RENEWAL_METHOD_UNSPECIFIED`, the actual `renewalMethod` is treated as if it were set to `AUTOMATIC_RENEWAL`. You cannot use `RENEWAL_DISABLED` during resource creation, and you can update the renewal status only when the `Registration` resource has state `ACTIVE` or `SUSPENDED`. When `preferred_renewal_method` is set to `AUTOMATIC_RENEWAL`, the actual `renewal_method` can be set to `RENEWAL_DISABLED` in case of problems with the billing account or reported domain abuse. In such cases, check the `issues` field on the `Registration`. After the problem is resolved, the `renewal_method` is automatically updated to `preferred_renewal_method` in a few hours.", alias="preferredRenewalMethod")
    renewal_method: Optional[StrictStr] = Field(default=None, description="Output only. The actual renewal method for this `Registration`. When `preferred_renewal_method` is set to `AUTOMATIC_RENEWAL`, the actual `renewal_method` can be equal to `RENEWAL_DISABLED`â€”for example, when there are problems with the billing account or reported domain abuse. In such cases, check the `issues` field on the `Registration`. After the problem is resolved, the `renewal_method` is automatically updated to `preferred_renewal_method` in a few hours.", alias="renewalMethod")
    transfer_lock_state: Optional[StrictStr] = Field(default=None, description="Controls whether the domain can be transferred to another registrar.", alias="transferLockState")
    __properties: ClassVar[List[str]] = ["preferredRenewalMethod", "renewalMethod", "transferLockState"]

    @field_validator('preferred_renewal_method')
    def preferred_renewal_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RENEWAL_METHOD_UNSPECIFIED', 'AUTOMATIC_RENEWAL', 'MANUAL_RENEWAL', 'RENEWAL_DISABLED']):
            raise ValueError("must be one of enum values ('RENEWAL_METHOD_UNSPECIFIED', 'AUTOMATIC_RENEWAL', 'MANUAL_RENEWAL', 'RENEWAL_DISABLED')")
        return value

    @field_validator('renewal_method')
    def renewal_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RENEWAL_METHOD_UNSPECIFIED', 'AUTOMATIC_RENEWAL', 'MANUAL_RENEWAL', 'RENEWAL_DISABLED']):
            raise ValueError("must be one of enum values ('RENEWAL_METHOD_UNSPECIFIED', 'AUTOMATIC_RENEWAL', 'MANUAL_RENEWAL', 'RENEWAL_DISABLED')")
        return value

    @field_validator('transfer_lock_state')
    def transfer_lock_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRANSFER_LOCK_STATE_UNSPECIFIED', 'UNLOCKED', 'LOCKED']):
            raise ValueError("must be one of enum values ('TRANSFER_LOCK_STATE_UNSPECIFIED', 'UNLOCKED', 'LOCKED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagementSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "renewal_method",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagementSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "preferredRenewalMethod": obj.get("preferredRenewalMethod"),
            "renewalMethod": obj.get("renewalMethod"),
            "transferLockState": obj.get("transferLockState")
        })
        return _obj



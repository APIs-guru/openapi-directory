# coding: utf-8

"""
    Cloud Domains API

    Enables management and configuration of domain names.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.contact import Contact
from typing import Optional, Set
from typing_extensions import Self

class ContactSettings(BaseModel):
    """
    Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical.
    """ # noqa: E501
    admin_contact: Optional[Contact] = Field(default=None, alias="adminContact")
    privacy: Optional[StrictStr] = Field(default=None, description="Required. Privacy setting for the contacts associated with the `Registration`.")
    registrant_contact: Optional[Contact] = Field(default=None, alias="registrantContact")
    technical_contact: Optional[Contact] = Field(default=None, alias="technicalContact")
    __properties: ClassVar[List[str]] = ["adminContact", "privacy", "registrantContact", "technicalContact"]

    @field_validator('privacy')
    def privacy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONTACT_PRIVACY_UNSPECIFIED', 'PUBLIC_CONTACT_DATA', 'PRIVATE_CONTACT_DATA', 'REDACTED_CONTACT_DATA']):
            raise ValueError("must be one of enum values ('CONTACT_PRIVACY_UNSPECIFIED', 'PUBLIC_CONTACT_DATA', 'PRIVATE_CONTACT_DATA', 'REDACTED_CONTACT_DATA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContactSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of admin_contact
        if self.admin_contact:
            _dict['adminContact'] = self.admin_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of registrant_contact
        if self.registrant_contact:
            _dict['registrantContact'] = self.registrant_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of technical_contact
        if self.technical_contact:
            _dict['technicalContact'] = self.technical_contact.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContactSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adminContact": Contact.from_dict(obj["adminContact"]) if obj.get("adminContact") is not None else None,
            "privacy": obj.get("privacy"),
            "registrantContact": Contact.from_dict(obj["registrantContact"]) if obj.get("registrantContact") is not None else None,
            "technicalContact": Contact.from_dict(obj["technicalContact"]) if obj.get("technicalContact") is not None else None
        })
        return _obj



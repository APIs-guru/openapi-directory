# coding: utf-8

"""
    Cloud Domains API

    Enables management and configuration of domain names.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.money import Money
from typing import Optional, Set
from typing_extensions import Self

class TransferParameters(BaseModel):
    """
    Deprecated: For more information, see [Cloud Domains feature deprecation](https://cloud.google.com/domains/docs/deprecations/feature-deprecations). Parameters required to transfer a domain from another registrar.
    """ # noqa: E501
    current_registrar: Optional[StrictStr] = Field(default=None, description="The registrar that currently manages the domain.", alias="currentRegistrar")
    current_registrar_uri: Optional[StrictStr] = Field(default=None, description="The URL of the registrar that currently manages the domain.", alias="currentRegistrarUri")
    domain_name: Optional[StrictStr] = Field(default=None, description="The domain name. Unicode domain names are expressed in Punycode format.", alias="domainName")
    name_servers: Optional[List[StrictStr]] = Field(default=None, description="The name servers that currently store the configuration of the domain.", alias="nameServers")
    supported_privacy: Optional[List[StrictStr]] = Field(default=None, description="Contact privacy options that the domain supports.", alias="supportedPrivacy")
    transfer_lock_state: Optional[StrictStr] = Field(default=None, description="Indicates whether the domain is protected by a transfer lock. For a transfer to succeed, this must show `UNLOCKED`. To unlock a domain, go to its current registrar.", alias="transferLockState")
    yearly_price: Optional[Money] = Field(default=None, alias="yearlyPrice")
    __properties: ClassVar[List[str]] = ["currentRegistrar", "currentRegistrarUri", "domainName", "nameServers", "supportedPrivacy", "transferLockState", "yearlyPrice"]

    @field_validator('supported_privacy')
    def supported_privacy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['CONTACT_PRIVACY_UNSPECIFIED', 'PUBLIC_CONTACT_DATA', 'PRIVATE_CONTACT_DATA', 'REDACTED_CONTACT_DATA']):
                raise ValueError("each list item must be one of ('CONTACT_PRIVACY_UNSPECIFIED', 'PUBLIC_CONTACT_DATA', 'PRIVATE_CONTACT_DATA', 'REDACTED_CONTACT_DATA')")
        return value

    @field_validator('transfer_lock_state')
    def transfer_lock_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRANSFER_LOCK_STATE_UNSPECIFIED', 'UNLOCKED', 'LOCKED']):
            raise ValueError("must be one of enum values ('TRANSFER_LOCK_STATE_UNSPECIFIED', 'UNLOCKED', 'LOCKED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransferParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of yearly_price
        if self.yearly_price:
            _dict['yearlyPrice'] = self.yearly_price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransferParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentRegistrar": obj.get("currentRegistrar"),
            "currentRegistrarUri": obj.get("currentRegistrarUri"),
            "domainName": obj.get("domainName"),
            "nameServers": obj.get("nameServers"),
            "supportedPrivacy": obj.get("supportedPrivacy"),
            "transferLockState": obj.get("transferLockState"),
            "yearlyPrice": Money.from_dict(obj["yearlyPrice"]) if obj.get("yearlyPrice") is not None else None
        })
        return _obj



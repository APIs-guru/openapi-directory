# coding: utf-8

"""
    Cloud Domains API

    Enables management and configuration of domain names.

    The version of the OpenAPI document: v1alpha2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.money import Money
from openapi_client.models.registration import Registration
from typing import Optional, Set
from typing_extensions import Self

class RegisterDomainRequest(BaseModel):
    """
    Request for the `RegisterDomain` method.
    """ # noqa: E501
    contact_notices: Optional[List[StrictStr]] = Field(default=None, description="The list of contact notices that the caller acknowledges. The notices needed here depend on the values specified in `registration.contact_settings`.", alias="contactNotices")
    domain_notices: Optional[List[StrictStr]] = Field(default=None, description="The list of domain notices that you acknowledge. Call `RetrieveRegisterParameters` to see the notices that need acknowledgement.", alias="domainNotices")
    registration: Optional[Registration] = None
    validate_only: Optional[StrictBool] = Field(default=None, description="When true, only validation is performed, without actually registering the domain. Follows: https://cloud.google.com/apis/design/design_patterns#request_validation", alias="validateOnly")
    yearly_price: Optional[Money] = Field(default=None, alias="yearlyPrice")
    __properties: ClassVar[List[str]] = ["contactNotices", "domainNotices", "registration", "validateOnly", "yearlyPrice"]

    @field_validator('contact_notices')
    def contact_notices_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['CONTACT_NOTICE_UNSPECIFIED', 'PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT']):
                raise ValueError("each list item must be one of ('CONTACT_NOTICE_UNSPECIFIED', 'PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT')")
        return value

    @field_validator('domain_notices')
    def domain_notices_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['DOMAIN_NOTICE_UNSPECIFIED', 'HSTS_PRELOADED']):
                raise ValueError("each list item must be one of ('DOMAIN_NOTICE_UNSPECIFIED', 'HSTS_PRELOADED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RegisterDomainRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of registration
        if self.registration:
            _dict['registration'] = self.registration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of yearly_price
        if self.yearly_price:
            _dict['yearlyPrice'] = self.yearly_price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RegisterDomainRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contactNotices": obj.get("contactNotices"),
            "domainNotices": obj.get("domainNotices"),
            "registration": Registration.from_dict(obj["registration"]) if obj.get("registration") is not None else None,
            "validateOnly": obj.get("validateOnly"),
            "yearlyPrice": Money.from_dict(obj["yearlyPrice"]) if obj.get("yearlyPrice") is not None else None
        })
        return _obj



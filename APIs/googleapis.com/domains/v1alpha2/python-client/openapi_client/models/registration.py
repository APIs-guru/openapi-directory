# coding: utf-8

"""
    Cloud Domains API

    Enables management and configuration of domain names.

    The version of the OpenAPI document: v1alpha2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.contact_settings import ContactSettings
from openapi_client.models.dns_settings import DnsSettings
from openapi_client.models.management_settings import ManagementSettings
from typing import Optional, Set
from typing_extensions import Self

class Registration(BaseModel):
    """
    The `Registration` resource facilitates managing and configuring domain name registrations. There are several ways to create a new `Registration` resource: To create a new `Registration` resource, find a suitable domain name by calling the `SearchDomains` method with a query to see available domain name options. After choosing a name, call `RetrieveRegisterParameters` to ensure availability and obtain information like pricing, which is needed to build a call to `RegisterDomain`. Another way to create a new `Registration` is to transfer an existing domain from another registrar (Deprecated: For more information, see [Cloud Domains feature deprecation](https://cloud.google.com/domains/docs/deprecations/feature-deprecations)). First, go to the current registrar to unlock the domain for transfer and retrieve the domain's transfer authorization code. Then call `RetrieveTransferParameters` to confirm that the domain is unlocked and to get values needed to build a call to `TransferDomain`. Finally, you can create a new `Registration` by importing an existing domain managed with [Google Domains](https://domains.google/) (Deprecated: For more information, see [Cloud Domains feature deprecation](https://cloud.google.com/domains/docs/deprecations/feature-deprecations)). First, call `RetrieveImportableDomains` to list domains to which the calling user has sufficient access. Then call `ImportDomain` on any domain names you want to use with Cloud Domains.
    """ # noqa: E501
    contact_settings: Optional[ContactSettings] = Field(default=None, alias="contactSettings")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The creation timestamp of the `Registration` resource.", alias="createTime")
    dns_settings: Optional[DnsSettings] = Field(default=None, alias="dnsSettings")
    domain_name: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The domain name. Unicode domain names must be expressed in Punycode format.", alias="domainName")
    expire_time: Optional[StrictStr] = Field(default=None, description="Output only. The expiration timestamp of the `Registration`.", alias="expireTime")
    issues: Optional[List[StrictStr]] = Field(default=None, description="Output only. The set of issues with the `Registration` that require attention.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Set of labels associated with the `Registration`.")
    management_settings: Optional[ManagementSettings] = Field(default=None, alias="managementSettings")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the `Registration` resource, in the format `projects/*/locations/*/registrations/`.")
    pending_contact_settings: Optional[ContactSettings] = Field(default=None, alias="pendingContactSettings")
    register_failure_reason: Optional[StrictStr] = Field(default=None, description="Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.", alias="registerFailureReason")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the `Registration`")
    supported_privacy: Optional[List[StrictStr]] = Field(default=None, description="Output only. Set of options for the `contact_settings.privacy` field that this `Registration` supports.", alias="supportedPrivacy")
    transfer_failure_reason: Optional[StrictStr] = Field(default=None, description="Output only. Deprecated: For more information, see [Cloud Domains feature deprecation](https://cloud.google.com/domains/docs/deprecations/feature-deprecations). The reason the domain transfer failed. Only set for domains in TRANSFER_FAILED state.", alias="transferFailureReason")
    __properties: ClassVar[List[str]] = ["contactSettings", "createTime", "dnsSettings", "domainName", "expireTime", "issues", "labels", "managementSettings", "name", "pendingContactSettings", "registerFailureReason", "state", "supportedPrivacy", "transferFailureReason"]

    @field_validator('issues')
    def issues_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ISSUE_UNSPECIFIED', 'CONTACT_SUPPORT', 'UNVERIFIED_EMAIL', 'PROBLEM_WITH_BILLING']):
                raise ValueError("each list item must be one of ('ISSUE_UNSPECIFIED', 'CONTACT_SUPPORT', 'UNVERIFIED_EMAIL', 'PROBLEM_WITH_BILLING')")
        return value

    @field_validator('register_failure_reason')
    def register_failure_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REGISTER_FAILURE_REASON_UNSPECIFIED', 'REGISTER_FAILURE_REASON_UNKNOWN', 'DOMAIN_NOT_AVAILABLE', 'INVALID_CONTACTS']):
            raise ValueError("must be one of enum values ('REGISTER_FAILURE_REASON_UNSPECIFIED', 'REGISTER_FAILURE_REASON_UNKNOWN', 'DOMAIN_NOT_AVAILABLE', 'INVALID_CONTACTS')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'REGISTRATION_PENDING', 'REGISTRATION_FAILED', 'TRANSFER_PENDING', 'TRANSFER_FAILED', 'IMPORT_PENDING', 'ACTIVE', 'SUSPENDED', 'EXPORTED', 'EXPIRED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'REGISTRATION_PENDING', 'REGISTRATION_FAILED', 'TRANSFER_PENDING', 'TRANSFER_FAILED', 'IMPORT_PENDING', 'ACTIVE', 'SUSPENDED', 'EXPORTED', 'EXPIRED')")
        return value

    @field_validator('supported_privacy')
    def supported_privacy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['CONTACT_PRIVACY_UNSPECIFIED', 'PUBLIC_CONTACT_DATA', 'PRIVATE_CONTACT_DATA', 'REDACTED_CONTACT_DATA']):
                raise ValueError("each list item must be one of ('CONTACT_PRIVACY_UNSPECIFIED', 'PUBLIC_CONTACT_DATA', 'PRIVATE_CONTACT_DATA', 'REDACTED_CONTACT_DATA')")
        return value

    @field_validator('transfer_failure_reason')
    def transfer_failure_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRANSFER_FAILURE_REASON_UNSPECIFIED', 'TRANSFER_FAILURE_REASON_UNKNOWN', 'EMAIL_CONFIRMATION_FAILURE', 'DOMAIN_NOT_REGISTERED', 'DOMAIN_HAS_TRANSFER_LOCK', 'INVALID_AUTHORIZATION_CODE', 'TRANSFER_CANCELLED', 'TRANSFER_REJECTED', 'INVALID_REGISTRANT_EMAIL_ADDRESS', 'DOMAIN_NOT_ELIGIBLE_FOR_TRANSFER', 'TRANSFER_ALREADY_PENDING']):
            raise ValueError("must be one of enum values ('TRANSFER_FAILURE_REASON_UNSPECIFIED', 'TRANSFER_FAILURE_REASON_UNKNOWN', 'EMAIL_CONFIRMATION_FAILURE', 'DOMAIN_NOT_REGISTERED', 'DOMAIN_HAS_TRANSFER_LOCK', 'INVALID_AUTHORIZATION_CODE', 'TRANSFER_CANCELLED', 'TRANSFER_REJECTED', 'INVALID_REGISTRANT_EMAIL_ADDRESS', 'DOMAIN_NOT_ELIGIBLE_FOR_TRANSFER', 'TRANSFER_ALREADY_PENDING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Registration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "expire_time",
            "issues",
            "name",
            "register_failure_reason",
            "state",
            "supported_privacy",
            "transfer_failure_reason",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contact_settings
        if self.contact_settings:
            _dict['contactSettings'] = self.contact_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dns_settings
        if self.dns_settings:
            _dict['dnsSettings'] = self.dns_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of management_settings
        if self.management_settings:
            _dict['managementSettings'] = self.management_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pending_contact_settings
        if self.pending_contact_settings:
            _dict['pendingContactSettings'] = self.pending_contact_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Registration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contactSettings": ContactSettings.from_dict(obj["contactSettings"]) if obj.get("contactSettings") is not None else None,
            "createTime": obj.get("createTime"),
            "dnsSettings": DnsSettings.from_dict(obj["dnsSettings"]) if obj.get("dnsSettings") is not None else None,
            "domainName": obj.get("domainName"),
            "expireTime": obj.get("expireTime"),
            "issues": obj.get("issues"),
            "labels": obj.get("labels"),
            "managementSettings": ManagementSettings.from_dict(obj["managementSettings"]) if obj.get("managementSettings") is not None else None,
            "name": obj.get("name"),
            "pendingContactSettings": ContactSettings.from_dict(obj["pendingContactSettings"]) if obj.get("pendingContactSettings") is not None else None,
            "registerFailureReason": obj.get("registerFailureReason"),
            "state": obj.get("state"),
            "supportedPrivacy": obj.get("supportedPrivacy"),
            "transferFailureReason": obj.get("transferFailureReason")
        })
        return _obj



# coding: utf-8

"""
    Cloud Domains API

    Enables management and configuration of domain names.

    The version of the OpenAPI document: v1alpha2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.custom_dns import CustomDns
from openapi_client.models.glue_record import GlueRecord
from openapi_client.models.google_domains_dns import GoogleDomainsDns
from typing import Optional, Set
from typing_extensions import Self

class DnsSettings(BaseModel):
    """
    Defines the DNS configuration of a `Registration`, including name servers, DNSSEC, and glue records.
    """ # noqa: E501
    custom_dns: Optional[CustomDns] = Field(default=None, alias="customDns")
    glue_records: Optional[List[GlueRecord]] = Field(default=None, description="The list of glue records for this `Registration`. Commonly empty.", alias="glueRecords")
    google_domains_dns: Optional[GoogleDomainsDns] = Field(default=None, alias="googleDomainsDns")
    __properties: ClassVar[List[str]] = ["customDns", "glueRecords", "googleDomainsDns"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DnsSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_dns
        if self.custom_dns:
            _dict['customDns'] = self.custom_dns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in glue_records (list)
        _items = []
        if self.glue_records:
            for _item_glue_records in self.glue_records:
                if _item_glue_records:
                    _items.append(_item_glue_records.to_dict())
            _dict['glueRecords'] = _items
        # override the default output from pydantic by calling `to_dict()` of google_domains_dns
        if self.google_domains_dns:
            _dict['googleDomainsDns'] = self.google_domains_dns.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DnsSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customDns": CustomDns.from_dict(obj["customDns"]) if obj.get("customDns") is not None else None,
            "glueRecords": [GlueRecord.from_dict(_item) for _item in obj["glueRecords"]] if obj.get("glueRecords") is not None else None,
            "googleDomainsDns": GoogleDomainsDns.from_dict(obj["googleDomainsDns"]) if obj.get("googleDomainsDns") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Domains API

    Enables management and configuration of domain names.

    The version of the OpenAPI document: v1alpha2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ds_record import DsRecord
from typing import Optional, Set
from typing_extensions import Self

class GoogleDomainsDns(BaseModel):
    """
    Deprecated: For more information, see [Cloud Domains feature deprecation](https://cloud.google.com/domains/docs/deprecations/feature-deprecations). Configuration for using the free DNS zone provided by Google Domains as a `Registration`'s `dns_provider`. You cannot configure the DNS zone itself using the API. To configure the DNS zone, go to [Google Domains](https://domains.google/).
    """ # noqa: E501
    ds_records: Optional[List[DsRecord]] = Field(default=None, description="Output only. The list of DS records published for this domain. The list is automatically populated when `ds_state` is `DS_RECORDS_PUBLISHED`, otherwise it remains empty.", alias="dsRecords")
    ds_state: Optional[StrictStr] = Field(default=None, description="Required. The state of DS records for this domain. Used to enable or disable automatic DNSSEC.", alias="dsState")
    name_servers: Optional[List[StrictStr]] = Field(default=None, description="Output only. A list of name servers that store the DNS zone for this domain. Each name server is a domain name, with Unicode domain names expressed in Punycode format. This field is automatically populated with the name servers assigned to the Google Domains DNS zone.", alias="nameServers")
    __properties: ClassVar[List[str]] = ["dsRecords", "dsState", "nameServers"]

    @field_validator('ds_state')
    def ds_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DS_STATE_UNSPECIFIED', 'DS_RECORDS_UNPUBLISHED', 'DS_RECORDS_PUBLISHED']):
            raise ValueError("must be one of enum values ('DS_STATE_UNSPECIFIED', 'DS_RECORDS_UNPUBLISHED', 'DS_RECORDS_PUBLISHED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleDomainsDns from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "ds_records",
            "name_servers",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ds_records (list)
        _items = []
        if self.ds_records:
            for _item_ds_records in self.ds_records:
                if _item_ds_records:
                    _items.append(_item_ds_records.to_dict())
            _dict['dsRecords'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleDomainsDns from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dsRecords": [DsRecord.from_dict(_item) for _item in obj["dsRecords"]] if obj.get("dsRecords") is not None else None,
            "dsState": obj.get("dsState"),
            "nameServers": obj.get("nameServers")
        })
        return _obj



# coding: utf-8

"""
    Cloud Domains API

    Enables management and configuration of domain names.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DsRecord(BaseModel):
    """
    Defines a Delegation Signer (DS) record, which is needed to enable DNSSEC for a domain. It contains a digest (hash) of a DNSKEY record that must be present in the domain's DNS zone.
    """ # noqa: E501
    algorithm: Optional[StrictStr] = Field(default=None, description="The algorithm used to generate the referenced DNSKEY.")
    digest: Optional[StrictStr] = Field(default=None, description="The digest generated from the referenced DNSKEY.")
    digest_type: Optional[StrictStr] = Field(default=None, description="The hash function used to generate the digest of the referenced DNSKEY.", alias="digestType")
    key_tag: Optional[StrictInt] = Field(default=None, description="The key tag of the record. Must be set in range 0 -- 65535.", alias="keyTag")
    __properties: ClassVar[List[str]] = ["algorithm", "digest", "digestType", "keyTag"]

    @field_validator('algorithm')
    def algorithm_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALGORITHM_UNSPECIFIED', 'RSAMD5', 'DH', 'DSA', 'ECC', 'RSASHA1', 'DSANSEC3SHA1', 'RSASHA1NSEC3SHA1', 'RSASHA256', 'RSASHA512', 'ECCGOST', 'ECDSAP256SHA256', 'ECDSAP384SHA384', 'ED25519', 'ED448', 'INDIRECT', 'PRIVATEDNS', 'PRIVATEOID']):
            raise ValueError("must be one of enum values ('ALGORITHM_UNSPECIFIED', 'RSAMD5', 'DH', 'DSA', 'ECC', 'RSASHA1', 'DSANSEC3SHA1', 'RSASHA1NSEC3SHA1', 'RSASHA256', 'RSASHA512', 'ECCGOST', 'ECDSAP256SHA256', 'ECDSAP384SHA384', 'ED25519', 'ED448', 'INDIRECT', 'PRIVATEDNS', 'PRIVATEOID')")
        return value

    @field_validator('digest_type')
    def digest_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DIGEST_TYPE_UNSPECIFIED', 'SHA1', 'SHA256', 'GOST3411', 'SHA384']):
            raise ValueError("must be one of enum values ('DIGEST_TYPE_UNSPECIFIED', 'SHA1', 'SHA256', 'GOST3411', 'SHA384')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DsRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DsRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algorithm": obj.get("algorithm"),
            "digest": obj.get("digest"),
            "digestType": obj.get("digestType"),
            "keyTag": obj.get("keyTag")
        })
        return _obj



# coding: utf-8

"""
    Accelerated Mobile Pages (AMP) URL API

    Retrieves the list of AMP URLs (and equivalent AMP Cache URLs) for a given list of public URL(s). 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amp_url import AmpUrl
from openapi_client.models.amp_url_error import AmpUrlError
from typing import Optional, Set
from typing_extensions import Self

class BatchGetAmpUrlsResponse(BaseModel):
    """
    Batch AMP URL response.
    """ # noqa: E501
    amp_urls: Optional[List[AmpUrl]] = Field(default=None, description="For each URL in BatchAmpUrlsRequest, the URL response. The response might not be in the same order as URLs in the batch request. If BatchAmpUrlsRequest contains duplicate URLs, AmpUrl is generated only once.", alias="ampUrls")
    url_errors: Optional[List[AmpUrlError]] = Field(default=None, description="The errors for requested URLs that have no AMP URL.", alias="urlErrors")
    __properties: ClassVar[List[str]] = ["ampUrls", "urlErrors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BatchGetAmpUrlsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in amp_urls (list)
        _items = []
        if self.amp_urls:
            for _item_amp_urls in self.amp_urls:
                if _item_amp_urls:
                    _items.append(_item_amp_urls.to_dict())
            _dict['ampUrls'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in url_errors (list)
        _items = []
        if self.url_errors:
            for _item_url_errors in self.url_errors:
                if _item_url_errors:
                    _items.append(_item_url_errors.to_dict())
            _dict['urlErrors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BatchGetAmpUrlsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ampUrls": [AmpUrl.from_dict(_item) for _item in obj["ampUrls"]] if obj.get("ampUrls") is not None else None,
            "urlErrors": [AmpUrlError.from_dict(_item) for _item in obj["urlErrors"]] if obj.get("urlErrors") is not None else None
        })
        return _obj



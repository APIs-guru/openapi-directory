# coding: utf-8

"""
    Semantic Tile API

    Serves vector tiles containing geospatial data. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.terrain_tile import TerrainTile

class TestTerrainTile(unittest.TestCase):
    """TerrainTile unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TerrainTile:
        """Test TerrainTile
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TerrainTile`
        """
        model = TerrainTile()
        if include_optional:
            return TerrainTile(
                coordinates = openapi_client.models.tile_coordinates.TileCoordinates(
                    x = 56, 
                    y = 56, 
                    zoom = 56, ),
                first_derivative = openapi_client.models.first_derivative_elevation_grid.FirstDerivativeElevationGrid(
                    altitude_multiplier = 1.337, 
                    rows = [
                        openapi_client.models.row.Row(
                            altitude_diffs = [
                                56
                                ], )
                        ], ),
                name = '',
                second_derivative = openapi_client.models.second_derivative_elevation_grid.SecondDerivativeElevationGrid(
                    altitude_multiplier = 1.337, 
                    column_count = 56, 
                    encoded_data = 'YQ==', 
                    row_count = 56, )
            )
        else:
            return TerrainTile(
        )
        """

    def testTerrainTile(self):
        """Test TerrainTile"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

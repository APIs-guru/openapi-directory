# coding: utf-8

"""
    Semantic Tile API

    Serves vector tiles containing geospatial data. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.feature_tile import FeatureTile

class TestFeatureTile(unittest.TestCase):
    """FeatureTile unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FeatureTile:
        """Test FeatureTile
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FeatureTile`
        """
        model = FeatureTile()
        if include_optional:
            return FeatureTile(
                coordinates = openapi_client.models.tile_coordinates.TileCoordinates(
                    x = 56, 
                    y = 56, 
                    zoom = 56, ),
                features = [
                    openapi_client.models.feature.Feature(
                        display_name = '', 
                        geometry = openapi_client.models.geometry.Geometry(
                            areas = [
                                openapi_client.models.area.Area(
                                    basemap_z_order = openapi_client.models.basemap_z_order.BasemapZOrder(
                                        z_grade = 56, 
                                        z_plane = 56, 
                                        z_within_grade = 56, ), 
                                    has_external_edges = True, 
                                    internal_edges = [
                                        56
                                        ], 
                                    loop_breaks = [
                                        56
                                        ], 
                                    triangle_indices = [
                                        56
                                        ], 
                                    type = 'TRIANGLE_FAN', 
                                    vertex_offsets = openapi_client.models.vertex2_d_list.Vertex2DList(
                                        x_offsets = [
                                            56
                                            ], 
                                        y_offsets = [
                                            56
                                            ], ), 
                                    z_order = 56, )
                                ], 
                            extruded_areas = [
                                openapi_client.models.extruded_area.ExtrudedArea(
                                    area = openapi_client.models.area.Area(
                                        has_external_edges = True, 
                                        type = 'TRIANGLE_FAN', 
                                        z_order = 56, ), 
                                    max_z = 56, 
                                    min_z = 56, )
                                ], 
                            lines = [
                                openapi_client.models.line.Line(
                                    z_order = 56, )
                                ], 
                            modeled_volumes = [
                                openapi_client.models.modeled_volume.ModeledVolume(
                                    strips = [
                                        openapi_client.models.triangle_strip.TriangleStrip(
                                            vertex_indices = [
                                                56
                                                ], )
                                        ], )
                                ], ), 
                        place_id = '', 
                        relations = [
                            openapi_client.models.relation.Relation(
                                related_feature_index = 56, 
                                relation_type = 'RELATION_TYPE_UNSPECIFIED', )
                            ], 
                        segment_info = openapi_client.models.segment_info.SegmentInfo(
                            road_info = openapi_client.models.road_info.RoadInfo(
                                is_private = True, ), ), 
                        type = 'FEATURE_TYPE_UNSPECIFIED', )
                    ],
                name = '',
                providers = [
                    openapi_client.models.provider_info.ProviderInfo(
                        description = '', )
                    ],
                status = 'STATUS_OK',
                version_id = ''
            )
        else:
            return FeatureTile(
        )
        """

    def testFeatureTile(self):
        """Test FeatureTile"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

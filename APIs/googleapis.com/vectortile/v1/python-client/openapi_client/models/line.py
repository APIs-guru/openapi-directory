# coding: utf-8

"""
    Semantic Tile API

    Serves vector tiles containing geospatial data. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.basemap_z_order import BasemapZOrder
from openapi_client.models.vertex2_d_list import Vertex2DList
from typing import Optional, Set
from typing_extensions import Self

class Line(BaseModel):
    """
    Represents a 2D polyline. Used to represent segments such as roads, train tracks, etc.
    """ # noqa: E501
    basemap_z_order: Optional[BasemapZOrder] = Field(default=None, alias="basemapZOrder")
    vertex_offsets: Optional[Vertex2DList] = Field(default=None, alias="vertexOffsets")
    z_order: Optional[StrictInt] = Field(default=None, description="The z-order of the line. Lines with a lower z-order should be rendered beneath lines with a higher z-order. This z-ordering does not imply anything about the altitude of the area relative to the ground, but it can be used to prevent z-fighting during rendering on the client. In general, larger and more important road features will have a higher z-order line associated with them. This z-ordering can only be used to compare lines, and cannot be compared with the z_order field in the Area message. The z-order may be negative or zero. Prefer Line.basemap_z_order.", alias="zOrder")
    __properties: ClassVar[List[str]] = ["basemapZOrder", "vertexOffsets", "zOrder"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Line from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of basemap_z_order
        if self.basemap_z_order:
            _dict['basemapZOrder'] = self.basemap_z_order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vertex_offsets
        if self.vertex_offsets:
            _dict['vertexOffsets'] = self.vertex_offsets.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Line from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "basemapZOrder": BasemapZOrder.from_dict(obj["basemapZOrder"]) if obj.get("basemapZOrder") is not None else None,
            "vertexOffsets": Vertex2DList.from_dict(obj["vertexOffsets"]) if obj.get("vertexOffsets") is not None else None,
            "zOrder": obj.get("zOrder")
        })
        return _obj



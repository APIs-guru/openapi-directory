# coding: utf-8

"""
    Semantic Tile API

    Serves vector tiles containing geospatial data. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.geometry import Geometry
from openapi_client.models.relation import Relation
from openapi_client.models.segment_info import SegmentInfo
from typing import Optional, Set
from typing_extensions import Self

class Feature(BaseModel):
    """
    A feature representing a single geographic entity.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="The localized name of this feature. Currently only returned for roads.", alias="displayName")
    geometry: Optional[Geometry] = None
    place_id: Optional[StrictStr] = Field(default=None, description="Place ID of this feature, suitable for use in Places API details requests.", alias="placeId")
    relations: Optional[List[Relation]] = Field(default=None, description="Relations to other features.")
    segment_info: Optional[SegmentInfo] = Field(default=None, alias="segmentInfo")
    type: Optional[StrictStr] = Field(default=None, description="The type of this feature.")
    __properties: ClassVar[List[str]] = ["displayName", "geometry", "placeId", "relations", "segmentInfo", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FEATURE_TYPE_UNSPECIFIED', 'STRUCTURE', 'BAR', 'BANK', 'LODGING', 'CAFE', 'RESTAURANT', 'EVENT_VENUE', 'TOURIST_DESTINATION', 'SHOPPING', 'SCHOOL', 'SEGMENT', 'ROAD', 'LOCAL_ROAD', 'ARTERIAL_ROAD', 'HIGHWAY', 'CONTROLLED_ACCESS_HIGHWAY', 'FOOTPATH', 'RAIL', 'FERRY', 'REGION', 'PARK', 'BEACH', 'FOREST', 'POLITICAL', 'ADMINISTRATIVE_AREA1', 'LOCALITY', 'SUBLOCALITY', 'WATER']):
            raise ValueError("must be one of enum values ('FEATURE_TYPE_UNSPECIFIED', 'STRUCTURE', 'BAR', 'BANK', 'LODGING', 'CAFE', 'RESTAURANT', 'EVENT_VENUE', 'TOURIST_DESTINATION', 'SHOPPING', 'SCHOOL', 'SEGMENT', 'ROAD', 'LOCAL_ROAD', 'ARTERIAL_ROAD', 'HIGHWAY', 'CONTROLLED_ACCESS_HIGHWAY', 'FOOTPATH', 'RAIL', 'FERRY', 'REGION', 'PARK', 'BEACH', 'FOREST', 'POLITICAL', 'ADMINISTRATIVE_AREA1', 'LOCALITY', 'SUBLOCALITY', 'WATER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Feature from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of geometry
        if self.geometry:
            _dict['geometry'] = self.geometry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in relations (list)
        _items = []
        if self.relations:
            for _item_relations in self.relations:
                if _item_relations:
                    _items.append(_item_relations.to_dict())
            _dict['relations'] = _items
        # override the default output from pydantic by calling `to_dict()` of segment_info
        if self.segment_info:
            _dict['segmentInfo'] = self.segment_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Feature from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "geometry": Geometry.from_dict(obj["geometry"]) if obj.get("geometry") is not None else None,
            "placeId": obj.get("placeId"),
            "relations": [Relation.from_dict(_item) for _item in obj["relations"]] if obj.get("relations") is not None else None,
            "segmentInfo": SegmentInfo.from_dict(obj["segmentInfo"]) if obj.get("segmentInfo") is not None else None,
            "type": obj.get("type")
        })
        return _obj



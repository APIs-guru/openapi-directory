# coding: utf-8

"""
    Semantic Tile API

    Serves vector tiles containing geospatial data. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.first_derivative_elevation_grid import FirstDerivativeElevationGrid
from openapi_client.models.second_derivative_elevation_grid import SecondDerivativeElevationGrid
from openapi_client.models.tile_coordinates import TileCoordinates
from typing import Optional, Set
from typing_extensions import Self

class TerrainTile(BaseModel):
    """
    A tile containing information about the terrain located in the region it covers.
    """ # noqa: E501
    coordinates: Optional[TileCoordinates] = None
    first_derivative: Optional[FirstDerivativeElevationGrid] = Field(default=None, alias="firstDerivative")
    name: Optional[StrictStr] = Field(default=None, description="Resource name of the tile. The tile resource name is prefixed by its collection ID `terrain/` followed by the resource ID, which encodes the tile's global x and y coordinates and zoom level as `@,,z`. For example, `terrain/@1,2,3z`.")
    second_derivative: Optional[SecondDerivativeElevationGrid] = Field(default=None, alias="secondDerivative")
    __properties: ClassVar[List[str]] = ["coordinates", "firstDerivative", "name", "secondDerivative"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TerrainTile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of coordinates
        if self.coordinates:
            _dict['coordinates'] = self.coordinates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of first_derivative
        if self.first_derivative:
            _dict['firstDerivative'] = self.first_derivative.to_dict()
        # override the default output from pydantic by calling `to_dict()` of second_derivative
        if self.second_derivative:
            _dict['secondDerivative'] = self.second_derivative.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TerrainTile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coordinates": TileCoordinates.from_dict(obj["coordinates"]) if obj.get("coordinates") is not None else None,
            "firstDerivative": FirstDerivativeElevationGrid.from_dict(obj["firstDerivative"]) if obj.get("firstDerivative") is not None else None,
            "name": obj.get("name"),
            "secondDerivative": SecondDerivativeElevationGrid.from_dict(obj["secondDerivative"]) if obj.get("secondDerivative") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Semantic Tile API

    Serves vector tiles containing geospatial data. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.terrain_tile import TerrainTile

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class TerraintilesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def vectortile_terraintiles_get(
        self,
        name: Annotated[StrictStr, Field(description="Required. Resource name of the tile. The tile resource name is prefixed by its collection ID `terraintiles/` followed by the resource ID, which encodes the tile's global x and y coordinates and zoom level as `@,,z`. For example, `terraintiles/@1,2,3z`.")],
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        altitude_precision_centimeters: Annotated[Optional[StrictInt], Field(description="The precision of terrain altitudes in centimeters. Possible values: between 1 (cm level precision) and 1,000,000 (10-kilometer level precision).")] = None,
        client_info_api_client: Annotated[Optional[StrictStr], Field(description="API client name and version. For example, the SDK calling the API. The exact format is up to the client.")] = None,
        client_info_application_id: Annotated[Optional[StrictStr], Field(description="Application ID, such as the package name on Android and the bundle identifier on iOS platforms.")] = None,
        client_info_application_version: Annotated[Optional[StrictStr], Field(description="Application version number, such as \"1.2.3\". The exact format is application-dependent.")] = None,
        client_info_device_model: Annotated[Optional[StrictStr], Field(description="Device model as reported by the device. The exact format is platform-dependent.")] = None,
        client_info_operating_system: Annotated[Optional[StrictStr], Field(description="Operating system name and version as reported by the OS. For example, \"Mac OS X 10.10.4\". The exact format is platform-dependent.")] = None,
        client_info_platform: Annotated[Optional[StrictStr], Field(description="Platform where the application is running.")] = None,
        client_info_user_id: Annotated[Optional[StrictStr], Field(description="Required. A client-generated user ID. The ID should be generated and persisted during the first user session or whenever a pre-existing ID is not found. The exact format is up to the client. This must be non-empty in a GetFeatureTileRequest (whether via the header or GetFeatureTileRequest.client_info).")] = None,
        max_elevation_resolution_cells: Annotated[Optional[StrictInt], Field(description="The maximum allowed resolution for the returned elevation heightmap. Possible values: between 1 and 1024 (and not less than min_elevation_resolution_cells). Over-sized heightmaps will be non-uniformly down-sampled such that each edge is no longer than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 100px (width) * 30px (height) max_elevation_resolution: 30 New resolution: 30px (width) * 30px (height)")] = None,
        min_elevation_resolution_cells: Annotated[Optional[StrictInt], Field(description=" api-linter: core::0131::request-unknown-fields=disabled aip.dev/not-precedent: Maintaining existing request parameter pattern. The minimum allowed resolution for the returned elevation heightmap. Possible values: between 0 and 1024 (and not more than max_elevation_resolution_cells). Zero is supported for backward compatibility. Under-sized heightmaps will be non-uniformly up-sampled such that each edge is no shorter than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 30px (width) * 10px (height) min_elevation_resolution: 30 New resolution: 30px (width) * 30px (height)")] = None,
        terrain_formats: Annotated[Optional[List[StrictStr]], Field(description="Terrain formats that the client understands.")] = None,
        enable_modeled_volumes: Annotated[Optional[StrictBool], Field(description="Flag indicating whether 3D building models should be enabled. If this is set structures will be returned as 3D modeled volumes rather than 2.5D extruded areas where possible.")] = None,
        enable_political_features: Annotated[Optional[StrictBool], Field(description="Flag indicating whether political features should be returned.")] = None,
        enable_private_roads: Annotated[Optional[StrictBool], Field(description="Flag indicating whether the returned tile will contain road features that are marked private. Private roads are indicated by the Feature.segment_info.road_info.is_private field.")] = None,
        enable_unclipped_buildings: Annotated[Optional[StrictBool], Field(description="Flag indicating whether unclipped buildings should be returned. If this is set, building render ops will extend beyond the tile boundary. Buildings will only be returned on the tile that contains their centroid.")] = None,
        language_code: Annotated[Optional[StrictStr], Field(description="Required. The BCP-47 language code corresponding to the language in which the name was requested, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.")] = None,
        region_code: Annotated[Optional[StrictStr], Field(description="Required. The Unicode country/region code (CLDR) of the location from which the request is coming from, such as \"US\" and \"419\". For more information, see http://www.unicode.org/reports/tr35/#unicode_region_subtag.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TerrainTile:
        """vectortile_terraintiles_get

        Gets a terrain tile by its tile resource name.

        :param name: Required. Resource name of the tile. The tile resource name is prefixed by its collection ID `terraintiles/` followed by the resource ID, which encodes the tile's global x and y coordinates and zoom level as `@,,z`. For example, `terraintiles/@1,2,3z`. (required)
        :type name: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param altitude_precision_centimeters: The precision of terrain altitudes in centimeters. Possible values: between 1 (cm level precision) and 1,000,000 (10-kilometer level precision).
        :type altitude_precision_centimeters: int
        :param client_info_api_client: API client name and version. For example, the SDK calling the API. The exact format is up to the client.
        :type client_info_api_client: str
        :param client_info_application_id: Application ID, such as the package name on Android and the bundle identifier on iOS platforms.
        :type client_info_application_id: str
        :param client_info_application_version: Application version number, such as \"1.2.3\". The exact format is application-dependent.
        :type client_info_application_version: str
        :param client_info_device_model: Device model as reported by the device. The exact format is platform-dependent.
        :type client_info_device_model: str
        :param client_info_operating_system: Operating system name and version as reported by the OS. For example, \"Mac OS X 10.10.4\". The exact format is platform-dependent.
        :type client_info_operating_system: str
        :param client_info_platform: Platform where the application is running.
        :type client_info_platform: str
        :param client_info_user_id: Required. A client-generated user ID. The ID should be generated and persisted during the first user session or whenever a pre-existing ID is not found. The exact format is up to the client. This must be non-empty in a GetFeatureTileRequest (whether via the header or GetFeatureTileRequest.client_info).
        :type client_info_user_id: str
        :param max_elevation_resolution_cells: The maximum allowed resolution for the returned elevation heightmap. Possible values: between 1 and 1024 (and not less than min_elevation_resolution_cells). Over-sized heightmaps will be non-uniformly down-sampled such that each edge is no longer than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 100px (width) * 30px (height) max_elevation_resolution: 30 New resolution: 30px (width) * 30px (height)
        :type max_elevation_resolution_cells: int
        :param min_elevation_resolution_cells:  api-linter: core::0131::request-unknown-fields=disabled aip.dev/not-precedent: Maintaining existing request parameter pattern. The minimum allowed resolution for the returned elevation heightmap. Possible values: between 0 and 1024 (and not more than max_elevation_resolution_cells). Zero is supported for backward compatibility. Under-sized heightmaps will be non-uniformly up-sampled such that each edge is no shorter than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 30px (width) * 10px (height) min_elevation_resolution: 30 New resolution: 30px (width) * 30px (height)
        :type min_elevation_resolution_cells: int
        :param terrain_formats: Terrain formats that the client understands.
        :type terrain_formats: List[str]
        :param enable_modeled_volumes: Flag indicating whether 3D building models should be enabled. If this is set structures will be returned as 3D modeled volumes rather than 2.5D extruded areas where possible.
        :type enable_modeled_volumes: bool
        :param enable_political_features: Flag indicating whether political features should be returned.
        :type enable_political_features: bool
        :param enable_private_roads: Flag indicating whether the returned tile will contain road features that are marked private. Private roads are indicated by the Feature.segment_info.road_info.is_private field.
        :type enable_private_roads: bool
        :param enable_unclipped_buildings: Flag indicating whether unclipped buildings should be returned. If this is set, building render ops will extend beyond the tile boundary. Buildings will only be returned on the tile that contains their centroid.
        :type enable_unclipped_buildings: bool
        :param language_code: Required. The BCP-47 language code corresponding to the language in which the name was requested, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
        :type language_code: str
        :param region_code: Required. The Unicode country/region code (CLDR) of the location from which the request is coming from, such as \"US\" and \"419\". For more information, see http://www.unicode.org/reports/tr35/#unicode_region_subtag.
        :type region_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vectortile_terraintiles_get_serialize(
            name=name,
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            altitude_precision_centimeters=altitude_precision_centimeters,
            client_info_api_client=client_info_api_client,
            client_info_application_id=client_info_application_id,
            client_info_application_version=client_info_application_version,
            client_info_device_model=client_info_device_model,
            client_info_operating_system=client_info_operating_system,
            client_info_platform=client_info_platform,
            client_info_user_id=client_info_user_id,
            max_elevation_resolution_cells=max_elevation_resolution_cells,
            min_elevation_resolution_cells=min_elevation_resolution_cells,
            terrain_formats=terrain_formats,
            enable_modeled_volumes=enable_modeled_volumes,
            enable_political_features=enable_political_features,
            enable_private_roads=enable_private_roads,
            enable_unclipped_buildings=enable_unclipped_buildings,
            language_code=language_code,
            region_code=region_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TerrainTile",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def vectortile_terraintiles_get_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Required. Resource name of the tile. The tile resource name is prefixed by its collection ID `terraintiles/` followed by the resource ID, which encodes the tile's global x and y coordinates and zoom level as `@,,z`. For example, `terraintiles/@1,2,3z`.")],
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        altitude_precision_centimeters: Annotated[Optional[StrictInt], Field(description="The precision of terrain altitudes in centimeters. Possible values: between 1 (cm level precision) and 1,000,000 (10-kilometer level precision).")] = None,
        client_info_api_client: Annotated[Optional[StrictStr], Field(description="API client name and version. For example, the SDK calling the API. The exact format is up to the client.")] = None,
        client_info_application_id: Annotated[Optional[StrictStr], Field(description="Application ID, such as the package name on Android and the bundle identifier on iOS platforms.")] = None,
        client_info_application_version: Annotated[Optional[StrictStr], Field(description="Application version number, such as \"1.2.3\". The exact format is application-dependent.")] = None,
        client_info_device_model: Annotated[Optional[StrictStr], Field(description="Device model as reported by the device. The exact format is platform-dependent.")] = None,
        client_info_operating_system: Annotated[Optional[StrictStr], Field(description="Operating system name and version as reported by the OS. For example, \"Mac OS X 10.10.4\". The exact format is platform-dependent.")] = None,
        client_info_platform: Annotated[Optional[StrictStr], Field(description="Platform where the application is running.")] = None,
        client_info_user_id: Annotated[Optional[StrictStr], Field(description="Required. A client-generated user ID. The ID should be generated and persisted during the first user session or whenever a pre-existing ID is not found. The exact format is up to the client. This must be non-empty in a GetFeatureTileRequest (whether via the header or GetFeatureTileRequest.client_info).")] = None,
        max_elevation_resolution_cells: Annotated[Optional[StrictInt], Field(description="The maximum allowed resolution for the returned elevation heightmap. Possible values: between 1 and 1024 (and not less than min_elevation_resolution_cells). Over-sized heightmaps will be non-uniformly down-sampled such that each edge is no longer than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 100px (width) * 30px (height) max_elevation_resolution: 30 New resolution: 30px (width) * 30px (height)")] = None,
        min_elevation_resolution_cells: Annotated[Optional[StrictInt], Field(description=" api-linter: core::0131::request-unknown-fields=disabled aip.dev/not-precedent: Maintaining existing request parameter pattern. The minimum allowed resolution for the returned elevation heightmap. Possible values: between 0 and 1024 (and not more than max_elevation_resolution_cells). Zero is supported for backward compatibility. Under-sized heightmaps will be non-uniformly up-sampled such that each edge is no shorter than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 30px (width) * 10px (height) min_elevation_resolution: 30 New resolution: 30px (width) * 30px (height)")] = None,
        terrain_formats: Annotated[Optional[List[StrictStr]], Field(description="Terrain formats that the client understands.")] = None,
        enable_modeled_volumes: Annotated[Optional[StrictBool], Field(description="Flag indicating whether 3D building models should be enabled. If this is set structures will be returned as 3D modeled volumes rather than 2.5D extruded areas where possible.")] = None,
        enable_political_features: Annotated[Optional[StrictBool], Field(description="Flag indicating whether political features should be returned.")] = None,
        enable_private_roads: Annotated[Optional[StrictBool], Field(description="Flag indicating whether the returned tile will contain road features that are marked private. Private roads are indicated by the Feature.segment_info.road_info.is_private field.")] = None,
        enable_unclipped_buildings: Annotated[Optional[StrictBool], Field(description="Flag indicating whether unclipped buildings should be returned. If this is set, building render ops will extend beyond the tile boundary. Buildings will only be returned on the tile that contains their centroid.")] = None,
        language_code: Annotated[Optional[StrictStr], Field(description="Required. The BCP-47 language code corresponding to the language in which the name was requested, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.")] = None,
        region_code: Annotated[Optional[StrictStr], Field(description="Required. The Unicode country/region code (CLDR) of the location from which the request is coming from, such as \"US\" and \"419\". For more information, see http://www.unicode.org/reports/tr35/#unicode_region_subtag.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TerrainTile]:
        """vectortile_terraintiles_get

        Gets a terrain tile by its tile resource name.

        :param name: Required. Resource name of the tile. The tile resource name is prefixed by its collection ID `terraintiles/` followed by the resource ID, which encodes the tile's global x and y coordinates and zoom level as `@,,z`. For example, `terraintiles/@1,2,3z`. (required)
        :type name: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param altitude_precision_centimeters: The precision of terrain altitudes in centimeters. Possible values: between 1 (cm level precision) and 1,000,000 (10-kilometer level precision).
        :type altitude_precision_centimeters: int
        :param client_info_api_client: API client name and version. For example, the SDK calling the API. The exact format is up to the client.
        :type client_info_api_client: str
        :param client_info_application_id: Application ID, such as the package name on Android and the bundle identifier on iOS platforms.
        :type client_info_application_id: str
        :param client_info_application_version: Application version number, such as \"1.2.3\". The exact format is application-dependent.
        :type client_info_application_version: str
        :param client_info_device_model: Device model as reported by the device. The exact format is platform-dependent.
        :type client_info_device_model: str
        :param client_info_operating_system: Operating system name and version as reported by the OS. For example, \"Mac OS X 10.10.4\". The exact format is platform-dependent.
        :type client_info_operating_system: str
        :param client_info_platform: Platform where the application is running.
        :type client_info_platform: str
        :param client_info_user_id: Required. A client-generated user ID. The ID should be generated and persisted during the first user session or whenever a pre-existing ID is not found. The exact format is up to the client. This must be non-empty in a GetFeatureTileRequest (whether via the header or GetFeatureTileRequest.client_info).
        :type client_info_user_id: str
        :param max_elevation_resolution_cells: The maximum allowed resolution for the returned elevation heightmap. Possible values: between 1 and 1024 (and not less than min_elevation_resolution_cells). Over-sized heightmaps will be non-uniformly down-sampled such that each edge is no longer than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 100px (width) * 30px (height) max_elevation_resolution: 30 New resolution: 30px (width) * 30px (height)
        :type max_elevation_resolution_cells: int
        :param min_elevation_resolution_cells:  api-linter: core::0131::request-unknown-fields=disabled aip.dev/not-precedent: Maintaining existing request parameter pattern. The minimum allowed resolution for the returned elevation heightmap. Possible values: between 0 and 1024 (and not more than max_elevation_resolution_cells). Zero is supported for backward compatibility. Under-sized heightmaps will be non-uniformly up-sampled such that each edge is no shorter than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 30px (width) * 10px (height) min_elevation_resolution: 30 New resolution: 30px (width) * 30px (height)
        :type min_elevation_resolution_cells: int
        :param terrain_formats: Terrain formats that the client understands.
        :type terrain_formats: List[str]
        :param enable_modeled_volumes: Flag indicating whether 3D building models should be enabled. If this is set structures will be returned as 3D modeled volumes rather than 2.5D extruded areas where possible.
        :type enable_modeled_volumes: bool
        :param enable_political_features: Flag indicating whether political features should be returned.
        :type enable_political_features: bool
        :param enable_private_roads: Flag indicating whether the returned tile will contain road features that are marked private. Private roads are indicated by the Feature.segment_info.road_info.is_private field.
        :type enable_private_roads: bool
        :param enable_unclipped_buildings: Flag indicating whether unclipped buildings should be returned. If this is set, building render ops will extend beyond the tile boundary. Buildings will only be returned on the tile that contains their centroid.
        :type enable_unclipped_buildings: bool
        :param language_code: Required. The BCP-47 language code corresponding to the language in which the name was requested, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
        :type language_code: str
        :param region_code: Required. The Unicode country/region code (CLDR) of the location from which the request is coming from, such as \"US\" and \"419\". For more information, see http://www.unicode.org/reports/tr35/#unicode_region_subtag.
        :type region_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vectortile_terraintiles_get_serialize(
            name=name,
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            altitude_precision_centimeters=altitude_precision_centimeters,
            client_info_api_client=client_info_api_client,
            client_info_application_id=client_info_application_id,
            client_info_application_version=client_info_application_version,
            client_info_device_model=client_info_device_model,
            client_info_operating_system=client_info_operating_system,
            client_info_platform=client_info_platform,
            client_info_user_id=client_info_user_id,
            max_elevation_resolution_cells=max_elevation_resolution_cells,
            min_elevation_resolution_cells=min_elevation_resolution_cells,
            terrain_formats=terrain_formats,
            enable_modeled_volumes=enable_modeled_volumes,
            enable_political_features=enable_political_features,
            enable_private_roads=enable_private_roads,
            enable_unclipped_buildings=enable_unclipped_buildings,
            language_code=language_code,
            region_code=region_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TerrainTile",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def vectortile_terraintiles_get_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Required. Resource name of the tile. The tile resource name is prefixed by its collection ID `terraintiles/` followed by the resource ID, which encodes the tile's global x and y coordinates and zoom level as `@,,z`. For example, `terraintiles/@1,2,3z`.")],
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        altitude_precision_centimeters: Annotated[Optional[StrictInt], Field(description="The precision of terrain altitudes in centimeters. Possible values: between 1 (cm level precision) and 1,000,000 (10-kilometer level precision).")] = None,
        client_info_api_client: Annotated[Optional[StrictStr], Field(description="API client name and version. For example, the SDK calling the API. The exact format is up to the client.")] = None,
        client_info_application_id: Annotated[Optional[StrictStr], Field(description="Application ID, such as the package name on Android and the bundle identifier on iOS platforms.")] = None,
        client_info_application_version: Annotated[Optional[StrictStr], Field(description="Application version number, such as \"1.2.3\". The exact format is application-dependent.")] = None,
        client_info_device_model: Annotated[Optional[StrictStr], Field(description="Device model as reported by the device. The exact format is platform-dependent.")] = None,
        client_info_operating_system: Annotated[Optional[StrictStr], Field(description="Operating system name and version as reported by the OS. For example, \"Mac OS X 10.10.4\". The exact format is platform-dependent.")] = None,
        client_info_platform: Annotated[Optional[StrictStr], Field(description="Platform where the application is running.")] = None,
        client_info_user_id: Annotated[Optional[StrictStr], Field(description="Required. A client-generated user ID. The ID should be generated and persisted during the first user session or whenever a pre-existing ID is not found. The exact format is up to the client. This must be non-empty in a GetFeatureTileRequest (whether via the header or GetFeatureTileRequest.client_info).")] = None,
        max_elevation_resolution_cells: Annotated[Optional[StrictInt], Field(description="The maximum allowed resolution for the returned elevation heightmap. Possible values: between 1 and 1024 (and not less than min_elevation_resolution_cells). Over-sized heightmaps will be non-uniformly down-sampled such that each edge is no longer than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 100px (width) * 30px (height) max_elevation_resolution: 30 New resolution: 30px (width) * 30px (height)")] = None,
        min_elevation_resolution_cells: Annotated[Optional[StrictInt], Field(description=" api-linter: core::0131::request-unknown-fields=disabled aip.dev/not-precedent: Maintaining existing request parameter pattern. The minimum allowed resolution for the returned elevation heightmap. Possible values: between 0 and 1024 (and not more than max_elevation_resolution_cells). Zero is supported for backward compatibility. Under-sized heightmaps will be non-uniformly up-sampled such that each edge is no shorter than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 30px (width) * 10px (height) min_elevation_resolution: 30 New resolution: 30px (width) * 30px (height)")] = None,
        terrain_formats: Annotated[Optional[List[StrictStr]], Field(description="Terrain formats that the client understands.")] = None,
        enable_modeled_volumes: Annotated[Optional[StrictBool], Field(description="Flag indicating whether 3D building models should be enabled. If this is set structures will be returned as 3D modeled volumes rather than 2.5D extruded areas where possible.")] = None,
        enable_political_features: Annotated[Optional[StrictBool], Field(description="Flag indicating whether political features should be returned.")] = None,
        enable_private_roads: Annotated[Optional[StrictBool], Field(description="Flag indicating whether the returned tile will contain road features that are marked private. Private roads are indicated by the Feature.segment_info.road_info.is_private field.")] = None,
        enable_unclipped_buildings: Annotated[Optional[StrictBool], Field(description="Flag indicating whether unclipped buildings should be returned. If this is set, building render ops will extend beyond the tile boundary. Buildings will only be returned on the tile that contains their centroid.")] = None,
        language_code: Annotated[Optional[StrictStr], Field(description="Required. The BCP-47 language code corresponding to the language in which the name was requested, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.")] = None,
        region_code: Annotated[Optional[StrictStr], Field(description="Required. The Unicode country/region code (CLDR) of the location from which the request is coming from, such as \"US\" and \"419\". For more information, see http://www.unicode.org/reports/tr35/#unicode_region_subtag.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """vectortile_terraintiles_get

        Gets a terrain tile by its tile resource name.

        :param name: Required. Resource name of the tile. The tile resource name is prefixed by its collection ID `terraintiles/` followed by the resource ID, which encodes the tile's global x and y coordinates and zoom level as `@,,z`. For example, `terraintiles/@1,2,3z`. (required)
        :type name: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param altitude_precision_centimeters: The precision of terrain altitudes in centimeters. Possible values: between 1 (cm level precision) and 1,000,000 (10-kilometer level precision).
        :type altitude_precision_centimeters: int
        :param client_info_api_client: API client name and version. For example, the SDK calling the API. The exact format is up to the client.
        :type client_info_api_client: str
        :param client_info_application_id: Application ID, such as the package name on Android and the bundle identifier on iOS platforms.
        :type client_info_application_id: str
        :param client_info_application_version: Application version number, such as \"1.2.3\". The exact format is application-dependent.
        :type client_info_application_version: str
        :param client_info_device_model: Device model as reported by the device. The exact format is platform-dependent.
        :type client_info_device_model: str
        :param client_info_operating_system: Operating system name and version as reported by the OS. For example, \"Mac OS X 10.10.4\". The exact format is platform-dependent.
        :type client_info_operating_system: str
        :param client_info_platform: Platform where the application is running.
        :type client_info_platform: str
        :param client_info_user_id: Required. A client-generated user ID. The ID should be generated and persisted during the first user session or whenever a pre-existing ID is not found. The exact format is up to the client. This must be non-empty in a GetFeatureTileRequest (whether via the header or GetFeatureTileRequest.client_info).
        :type client_info_user_id: str
        :param max_elevation_resolution_cells: The maximum allowed resolution for the returned elevation heightmap. Possible values: between 1 and 1024 (and not less than min_elevation_resolution_cells). Over-sized heightmaps will be non-uniformly down-sampled such that each edge is no longer than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 100px (width) * 30px (height) max_elevation_resolution: 30 New resolution: 30px (width) * 30px (height)
        :type max_elevation_resolution_cells: int
        :param min_elevation_resolution_cells:  api-linter: core::0131::request-unknown-fields=disabled aip.dev/not-precedent: Maintaining existing request parameter pattern. The minimum allowed resolution for the returned elevation heightmap. Possible values: between 0 and 1024 (and not more than max_elevation_resolution_cells). Zero is supported for backward compatibility. Under-sized heightmaps will be non-uniformly up-sampled such that each edge is no shorter than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 30px (width) * 10px (height) min_elevation_resolution: 30 New resolution: 30px (width) * 30px (height)
        :type min_elevation_resolution_cells: int
        :param terrain_formats: Terrain formats that the client understands.
        :type terrain_formats: List[str]
        :param enable_modeled_volumes: Flag indicating whether 3D building models should be enabled. If this is set structures will be returned as 3D modeled volumes rather than 2.5D extruded areas where possible.
        :type enable_modeled_volumes: bool
        :param enable_political_features: Flag indicating whether political features should be returned.
        :type enable_political_features: bool
        :param enable_private_roads: Flag indicating whether the returned tile will contain road features that are marked private. Private roads are indicated by the Feature.segment_info.road_info.is_private field.
        :type enable_private_roads: bool
        :param enable_unclipped_buildings: Flag indicating whether unclipped buildings should be returned. If this is set, building render ops will extend beyond the tile boundary. Buildings will only be returned on the tile that contains their centroid.
        :type enable_unclipped_buildings: bool
        :param language_code: Required. The BCP-47 language code corresponding to the language in which the name was requested, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
        :type language_code: str
        :param region_code: Required. The Unicode country/region code (CLDR) of the location from which the request is coming from, such as \"US\" and \"419\". For more information, see http://www.unicode.org/reports/tr35/#unicode_region_subtag.
        :type region_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vectortile_terraintiles_get_serialize(
            name=name,
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            altitude_precision_centimeters=altitude_precision_centimeters,
            client_info_api_client=client_info_api_client,
            client_info_application_id=client_info_application_id,
            client_info_application_version=client_info_application_version,
            client_info_device_model=client_info_device_model,
            client_info_operating_system=client_info_operating_system,
            client_info_platform=client_info_platform,
            client_info_user_id=client_info_user_id,
            max_elevation_resolution_cells=max_elevation_resolution_cells,
            min_elevation_resolution_cells=min_elevation_resolution_cells,
            terrain_formats=terrain_formats,
            enable_modeled_volumes=enable_modeled_volumes,
            enable_political_features=enable_political_features,
            enable_private_roads=enable_private_roads,
            enable_unclipped_buildings=enable_unclipped_buildings,
            language_code=language_code,
            region_code=region_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TerrainTile",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _vectortile_terraintiles_get_serialize(
        self,
        name,
        xgafv,
        access_token,
        alt,
        param_callback,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_protocol,
        upload_type,
        altitude_precision_centimeters,
        client_info_api_client,
        client_info_application_id,
        client_info_application_version,
        client_info_device_model,
        client_info_operating_system,
        client_info_platform,
        client_info_user_id,
        max_elevation_resolution_cells,
        min_elevation_resolution_cells,
        terrain_formats,
        enable_modeled_volumes,
        enable_political_features,
        enable_private_roads,
        enable_unclipped_buildings,
        language_code,
        region_code,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'terrainFormats': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['name'] = name
        # process the query parameters
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if altitude_precision_centimeters is not None:
            
            _query_params.append(('altitudePrecisionCentimeters', altitude_precision_centimeters))
            
        if client_info_api_client is not None:
            
            _query_params.append(('clientInfo.apiClient', client_info_api_client))
            
        if client_info_application_id is not None:
            
            _query_params.append(('clientInfo.applicationId', client_info_application_id))
            
        if client_info_application_version is not None:
            
            _query_params.append(('clientInfo.applicationVersion', client_info_application_version))
            
        if client_info_device_model is not None:
            
            _query_params.append(('clientInfo.deviceModel', client_info_device_model))
            
        if client_info_operating_system is not None:
            
            _query_params.append(('clientInfo.operatingSystem', client_info_operating_system))
            
        if client_info_platform is not None:
            
            _query_params.append(('clientInfo.platform', client_info_platform))
            
        if client_info_user_id is not None:
            
            _query_params.append(('clientInfo.userId', client_info_user_id))
            
        if max_elevation_resolution_cells is not None:
            
            _query_params.append(('maxElevationResolutionCells', max_elevation_resolution_cells))
            
        if min_elevation_resolution_cells is not None:
            
            _query_params.append(('minElevationResolutionCells', min_elevation_resolution_cells))
            
        if terrain_formats is not None:
            
            _query_params.append(('terrainFormats', terrain_formats))
            
        if enable_modeled_volumes is not None:
            
            _query_params.append(('enableModeledVolumes', enable_modeled_volumes))
            
        if enable_political_features is not None:
            
            _query_params.append(('enablePoliticalFeatures', enable_political_features))
            
        if enable_private_roads is not None:
            
            _query_params.append(('enablePrivateRoads', enable_private_roads))
            
        if enable_unclipped_buildings is not None:
            
            _query_params.append(('enableUnclippedBuildings', enable_unclipped_buildings))
            
        if language_code is not None:
            
            _query_params.append(('languageCode', language_code))
            
        if region_code is not None:
            
            _query_params.append(('regionCode', region_code))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/{name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



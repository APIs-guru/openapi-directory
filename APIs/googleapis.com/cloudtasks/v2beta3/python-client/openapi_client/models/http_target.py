# coding: utf-8

"""
    Cloud Tasks API

    Manages the execution of large numbers of distributed requests.

    The version of the OpenAPI document: v2beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.header_override import HeaderOverride
from openapi_client.models.o_auth_token import OAuthToken
from openapi_client.models.oidc_token import OidcToken
from openapi_client.models.uri_override import UriOverride
from typing import Optional, Set
from typing_extensions import Self

class HttpTarget(BaseModel):
    """
    HTTP target. When specified as a Queue, all the tasks with [HttpRequest] will be overridden according to the target.
    """ # noqa: E501
    header_overrides: Optional[List[HeaderOverride]] = Field(default=None, description="HTTP target headers. This map contains the header field names and values. Headers will be set when running the CreateTask and/or BufferTask. These headers represent a subset of the headers that will be configured for the task's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Several predefined headers, prefixed with \"X-CloudTasks-\", can be used to define properties of the task. * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. `Content-Type` won't be set by Cloud Tasks. You can explicitly set `Content-Type` to a media type when the task is created. For example,`Content-Type` can be set to `\"application/octet-stream\"` or `\"application/json\"`. The default value is set to `\"application/json\"`. * User-Agent: This will be set to `\"Google-Cloud-Tasks\"`. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB. Queue-level headers to override headers of all the tasks in the queue.", alias="headerOverrides")
    http_method: Optional[StrictStr] = Field(default=None, description="The HTTP method to use for the request. When specified, it overrides HttpRequest for the task. Note that if the value is set to HttpMethod the HttpRequest of the task will be ignored at execution time.", alias="httpMethod")
    oauth_token: Optional[OAuthToken] = Field(default=None, alias="oauthToken")
    oidc_token: Optional[OidcToken] = Field(default=None, alias="oidcToken")
    uri_override: Optional[UriOverride] = Field(default=None, alias="uriOverride")
    __properties: ClassVar[List[str]] = ["headerOverrides", "httpMethod", "oauthToken", "oidcToken", "uriOverride"]

    @field_validator('http_method')
    def http_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HTTP_METHOD_UNSPECIFIED', 'POST', 'GET', 'HEAD', 'PUT', 'DELETE', 'PATCH', 'OPTIONS']):
            raise ValueError("must be one of enum values ('HTTP_METHOD_UNSPECIFIED', 'POST', 'GET', 'HEAD', 'PUT', 'DELETE', 'PATCH', 'OPTIONS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HttpTarget from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in header_overrides (list)
        _items = []
        if self.header_overrides:
            for _item_header_overrides in self.header_overrides:
                if _item_header_overrides:
                    _items.append(_item_header_overrides.to_dict())
            _dict['headerOverrides'] = _items
        # override the default output from pydantic by calling `to_dict()` of oauth_token
        if self.oauth_token:
            _dict['oauthToken'] = self.oauth_token.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oidc_token
        if self.oidc_token:
            _dict['oidcToken'] = self.oidc_token.to_dict()
        # override the default output from pydantic by calling `to_dict()` of uri_override
        if self.uri_override:
            _dict['uriOverride'] = self.uri_override.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HttpTarget from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "headerOverrides": [HeaderOverride.from_dict(_item) for _item in obj["headerOverrides"]] if obj.get("headerOverrides") is not None else None,
            "httpMethod": obj.get("httpMethod"),
            "oauthToken": OAuthToken.from_dict(obj["oauthToken"]) if obj.get("oauthToken") is not None else None,
            "oidcToken": OidcToken.from_dict(obj["oidcToken"]) if obj.get("oidcToken") is not None else None,
            "uriOverride": UriOverride.from_dict(obj["uriOverride"]) if obj.get("uriOverride") is not None else None
        })
        return _obj



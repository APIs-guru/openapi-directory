# coding: utf-8

"""
    Cloud Tasks API

    Manages the execution of large numbers of distributed requests.

    The version of the OpenAPI document: v2beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_queues_response import ListQueuesResponse

class TestListQueuesResponse(unittest.TestCase):
    """ListQueuesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListQueuesResponse:
        """Test ListQueuesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListQueuesResponse`
        """
        model = ListQueuesResponse()
        if include_optional:
            return ListQueuesResponse(
                next_page_token = '',
                queues = [
                    openapi_client.models.queue.Queue(
                        app_engine_http_target = openapi_client.models.app_engine_http_target.AppEngineHttpTarget(
                            app_engine_routing_override = openapi_client.models.app_engine_routing.AppEngineRouting(
                                host = '', 
                                instance = '', 
                                service = '', 
                                version = '', ), ), 
                        http_target = openapi_client.models.http_target.HttpTarget(
                            header_overrides = [
                                openapi_client.models.header_override.HeaderOverride(
                                    header = openapi_client.models.header.Header(
                                        key = '', 
                                        value = '', ), )
                                ], 
                            http_method = 'HTTP_METHOD_UNSPECIFIED', 
                            oauth_token = openapi_client.models.o_auth_token.OAuthToken(
                                scope = '', 
                                service_account_email = '', ), 
                            oidc_token = openapi_client.models.oidc_token.OidcToken(
                                audience = '', 
                                service_account_email = '', ), 
                            uri_override = openapi_client.models.uri_override.UriOverride(
                                host = '', 
                                path_override = openapi_client.models.path_override.PathOverride(
                                    path = '', ), 
                                port = '', 
                                query_override = openapi_client.models.query_override.QueryOverride(
                                    query_params = '', ), 
                                scheme = 'SCHEME_UNSPECIFIED', 
                                uri_override_enforce_mode = 'URI_OVERRIDE_ENFORCE_MODE_UNSPECIFIED', ), ), 
                        name = '', 
                        pull_target = openapi_client.models.pull_target.PullTarget(), 
                        purge_time = '', 
                        rate_limits = openapi_client.models.rate_limits.RateLimits(
                            max_burst_size = 56, 
                            max_concurrent_tasks = 56, 
                            max_tasks_dispatched_per_second = 1.337, ), 
                        retry_config = openapi_client.models.retry_config.RetryConfig(
                            max_attempts = 56, 
                            max_backoff = '', 
                            max_doublings = 56, 
                            max_retry_duration = '', 
                            min_backoff = '', 
                            unlimited_attempts = True, ), 
                        state = 'STATE_UNSPECIFIED', 
                        stats = openapi_client.models.queue_stats.QueueStats(
                            concurrent_dispatches_count = '', 
                            effective_execution_rate = 1.337, 
                            executed_last_minute_count = '', 
                            oldest_estimated_arrival_time = '', 
                            tasks_count = '', ), 
                        task_ttl = '', 
                        tombstone_ttl = '', )
                    ]
            )
        else:
            return ListQueuesResponse(
        )
        """

    def testListQueuesResponse(self):
        """Test ListQueuesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

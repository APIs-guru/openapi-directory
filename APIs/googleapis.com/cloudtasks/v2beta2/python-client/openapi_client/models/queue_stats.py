# coding: utf-8

"""
    Cloud Tasks API

    Manages the execution of large numbers of distributed requests.

    The version of the OpenAPI document: v2beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class QueueStats(BaseModel):
    """
    Statistics for a queue.
    """ # noqa: E501
    concurrent_dispatches_count: Optional[StrictStr] = Field(default=None, description="Output only. The number of requests that the queue has dispatched but has not received a reply for yet.", alias="concurrentDispatchesCount")
    effective_execution_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. The current maximum number of tasks per second executed by the queue. The maximum value of this variable is controlled by the RateLimits of the Queue. However, this value could be less to avoid overloading the endpoints tasks in the queue are targeting.", alias="effectiveExecutionRate")
    executed_last_minute_count: Optional[StrictStr] = Field(default=None, description="Output only. The number of tasks that the queue has dispatched and received a reply for during the last minute. This variable counts both successful and non-successful executions.", alias="executedLastMinuteCount")
    oldest_estimated_arrival_time: Optional[StrictStr] = Field(default=None, description="Output only. An estimation of the nearest time in the future where a task in the queue is scheduled to be executed.", alias="oldestEstimatedArrivalTime")
    tasks_count: Optional[StrictStr] = Field(default=None, description="Output only. An estimation of the number of tasks in the queue, that is, the tasks in the queue that haven't been executed, the tasks in the queue which the queue has dispatched but has not yet received a reply for, and the failed tasks that the queue is retrying.", alias="tasksCount")
    __properties: ClassVar[List[str]] = ["concurrentDispatchesCount", "effectiveExecutionRate", "executedLastMinuteCount", "oldestEstimatedArrivalTime", "tasksCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueueStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "concurrent_dispatches_count",
            "effective_execution_rate",
            "executed_last_minute_count",
            "oldest_estimated_arrival_time",
            "tasks_count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueueStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "concurrentDispatchesCount": obj.get("concurrentDispatchesCount"),
            "effectiveExecutionRate": obj.get("effectiveExecutionRate"),
            "executedLastMinuteCount": obj.get("executedLastMinuteCount"),
            "oldestEstimatedArrivalTime": obj.get("oldestEstimatedArrivalTime"),
            "tasksCount": obj.get("tasksCount")
        })
        return _obj



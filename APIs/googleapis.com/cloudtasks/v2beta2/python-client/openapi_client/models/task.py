# coding: utf-8

"""
    Cloud Tasks API

    Manages the execution of large numbers of distributed requests.

    The version of the OpenAPI document: v2beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_engine_http_request import AppEngineHttpRequest
from openapi_client.models.http_request import HttpRequest
from openapi_client.models.pull_message import PullMessage
from openapi_client.models.task_status import TaskStatus
from typing import Optional, Set
from typing_extensions import Self

class Task(BaseModel):
    """
    A unit of scheduled work.
    """ # noqa: E501
    app_engine_http_request: Optional[AppEngineHttpRequest] = Field(default=None, alias="appEngineHttpRequest")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time that the task was created. `create_time` will be truncated to the nearest second.", alias="createTime")
    http_request: Optional[HttpRequest] = Field(default=None, alias="httpRequest")
    name: Optional[StrictStr] = Field(default=None, description="Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.")
    pull_message: Optional[PullMessage] = Field(default=None, alias="pullMessage")
    schedule_time: Optional[StrictStr] = Field(default=None, description="The time when the task is scheduled to be attempted. For App Engine queues, this is when the task will be attempted or retried. For pull queues, this is the time when the task is available to be leased; if a task is currently leased, this is the time when the current lease expires, that is, the time that the task was leased plus the lease_duration. `schedule_time` will be truncated to the nearest microsecond.", alias="scheduleTime")
    status: Optional[TaskStatus] = None
    view: Optional[StrictStr] = Field(default=None, description="Output only. The view specifies which subset of the Task has been returned.")
    __properties: ClassVar[List[str]] = ["appEngineHttpRequest", "createTime", "httpRequest", "name", "pullMessage", "scheduleTime", "status", "view"]

    @field_validator('view')
    def view_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VIEW_UNSPECIFIED', 'BASIC', 'FULL']):
            raise ValueError("must be one of enum values ('VIEW_UNSPECIFIED', 'BASIC', 'FULL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Task from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_engine_http_request
        if self.app_engine_http_request:
            _dict['appEngineHttpRequest'] = self.app_engine_http_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of http_request
        if self.http_request:
            _dict['httpRequest'] = self.http_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pull_message
        if self.pull_message:
            _dict['pullMessage'] = self.pull_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Task from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appEngineHttpRequest": AppEngineHttpRequest.from_dict(obj["appEngineHttpRequest"]) if obj.get("appEngineHttpRequest") is not None else None,
            "createTime": obj.get("createTime"),
            "httpRequest": HttpRequest.from_dict(obj["httpRequest"]) if obj.get("httpRequest") is not None else None,
            "name": obj.get("name"),
            "pullMessage": PullMessage.from_dict(obj["pullMessage"]) if obj.get("pullMessage") is not None else None,
            "scheduleTime": obj.get("scheduleTime"),
            "status": TaskStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "view": obj.get("view")
        })
        return _obj



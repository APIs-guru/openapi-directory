# coding: utf-8

"""
    Google Identity Toolkit API

    Help the third party sites to implement federated login.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.identitytoolkit_relyingparty_verify_password_request import IdentitytoolkitRelyingpartyVerifyPasswordRequest

class TestIdentitytoolkitRelyingpartyVerifyPasswordRequest(unittest.TestCase):
    """IdentitytoolkitRelyingpartyVerifyPasswordRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IdentitytoolkitRelyingpartyVerifyPasswordRequest:
        """Test IdentitytoolkitRelyingpartyVerifyPasswordRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IdentitytoolkitRelyingpartyVerifyPasswordRequest`
        """
        model = IdentitytoolkitRelyingpartyVerifyPasswordRequest()
        if include_optional:
            return IdentitytoolkitRelyingpartyVerifyPasswordRequest(
                captcha_challenge = '',
                captcha_response = '',
                delegated_project_number = '',
                email = '',
                id_token = '',
                instance_id = '',
                password = '',
                pending_id_token = '',
                return_secure_token = True,
                tenant_id = '',
                tenant_project_number = ''
            )
        else:
            return IdentitytoolkitRelyingpartyVerifyPasswordRequest(
        )
        """

    def testIdentitytoolkitRelyingpartyVerifyPasswordRequest(self):
        """Test IdentitytoolkitRelyingpartyVerifyPasswordRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

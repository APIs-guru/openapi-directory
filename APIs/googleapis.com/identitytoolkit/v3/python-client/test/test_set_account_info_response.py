# coding: utf-8

"""
    Google Identity Toolkit API

    Help the third party sites to implement federated login.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.set_account_info_response import SetAccountInfoResponse

class TestSetAccountInfoResponse(unittest.TestCase):
    """SetAccountInfoResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SetAccountInfoResponse:
        """Test SetAccountInfoResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SetAccountInfoResponse`
        """
        model = SetAccountInfoResponse()
        if include_optional:
            return SetAccountInfoResponse(
                display_name = '',
                email = '',
                email_verified = True,
                expires_in = '',
                id_token = '',
                kind = 'identitytoolkit#SetAccountInfoResponse',
                local_id = '',
                new_email = '',
                password_hash = 'YQ==',
                photo_url = '',
                provider_user_info = [
                    openapi_client.models.set_account_info_response_provider_user_info_inner.SetAccountInfoResponse_providerUserInfo_inner(
                        display_name = '', 
                        federated_id = '', 
                        photo_url = '', 
                        provider_id = '', )
                    ],
                refresh_token = ''
            )
        else:
            return SetAccountInfoResponse(
        )
        """

    def testSetAccountInfoResponse(self):
        """Test SetAccountInfoResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Google Identity Toolkit API

    Help the third party sites to implement federated login.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.identitytoolkit_relyingparty_get_project_config_response import IdentitytoolkitRelyingpartyGetProjectConfigResponse

class TestIdentitytoolkitRelyingpartyGetProjectConfigResponse(unittest.TestCase):
    """IdentitytoolkitRelyingpartyGetProjectConfigResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IdentitytoolkitRelyingpartyGetProjectConfigResponse:
        """Test IdentitytoolkitRelyingpartyGetProjectConfigResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IdentitytoolkitRelyingpartyGetProjectConfigResponse`
        """
        model = IdentitytoolkitRelyingpartyGetProjectConfigResponse()
        if include_optional:
            return IdentitytoolkitRelyingpartyGetProjectConfigResponse(
                allow_password_user = True,
                api_key = '',
                authorized_domains = [
                    ''
                    ],
                change_email_template = openapi_client.models.email_template.EmailTemplate(
                    body = '', 
                    format = '', 
                    from = '', 
                    from_display_name = '', 
                    reply_to = '', 
                    subject = '', ),
                dynamic_links_domain = '',
                enable_anonymous_user = True,
                idp_config = [
                    openapi_client.models.idp_config.IdpConfig(
                        client_id = '', 
                        enabled = True, 
                        experiment_percent = 56, 
                        provider = '', 
                        secret = '', 
                        whitelisted_audiences = [
                            ''
                            ], )
                    ],
                legacy_reset_password_template = openapi_client.models.email_template.EmailTemplate(
                    body = '', 
                    format = '', 
                    from = '', 
                    from_display_name = '', 
                    reply_to = '', 
                    subject = '', ),
                project_id = '',
                reset_password_template = openapi_client.models.email_template.EmailTemplate(
                    body = '', 
                    format = '', 
                    from = '', 
                    from_display_name = '', 
                    reply_to = '', 
                    subject = '', ),
                use_email_sending = True,
                verify_email_template = openapi_client.models.email_template.EmailTemplate(
                    body = '', 
                    format = '', 
                    from = '', 
                    from_display_name = '', 
                    reply_to = '', 
                    subject = '', )
            )
        else:
            return IdentitytoolkitRelyingpartyGetProjectConfigResponse(
        )
        """

    def testIdentitytoolkitRelyingpartyGetProjectConfigResponse(self):
        """Test IdentitytoolkitRelyingpartyGetProjectConfigResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Google Identity Toolkit API

    Help the third party sites to implement federated login.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Relyingparty(BaseModel):
    """
    Request of getting a code for user confirmation (reset password, change email etc.)
    """ # noqa: E501
    android_install_app: Optional[StrictBool] = Field(default=None, description="whether or not to install the android app on the device where the link is opened", alias="androidInstallApp")
    android_minimum_version: Optional[StrictStr] = Field(default=None, description="minimum version of the app. if the version on the device is lower than this version then the user is taken to the play store to upgrade the app", alias="androidMinimumVersion")
    android_package_name: Optional[StrictStr] = Field(default=None, description="android package name of the android app to handle the action code", alias="androidPackageName")
    can_handle_code_in_app: Optional[StrictBool] = Field(default=None, description="whether or not the app can handle the oob code without first going to web", alias="canHandleCodeInApp")
    captcha_resp: Optional[StrictStr] = Field(default=None, description="The recaptcha response from the user.", alias="captchaResp")
    challenge: Optional[StrictStr] = Field(default=None, description="The recaptcha challenge presented to the user.")
    continue_url: Optional[StrictStr] = Field(default=None, description="The url to continue to the Gitkit app", alias="continueUrl")
    email: Optional[StrictStr] = Field(default=None, description="The email of the user.")
    i_os_app_store_id: Optional[StrictStr] = Field(default=None, description="iOS app store id to download the app if it's not already installed", alias="iOSAppStoreId")
    i_os_bundle_id: Optional[StrictStr] = Field(default=None, description="the iOS bundle id of iOS app to handle the action code", alias="iOSBundleId")
    id_token: Optional[StrictStr] = Field(default=None, description="The user's Gitkit login token for email change.", alias="idToken")
    kind: Optional[StrictStr] = Field(default='identitytoolkit#relyingparty', description="The fixed string \"identitytoolkit#relyingparty\".")
    new_email: Optional[StrictStr] = Field(default=None, description="The new email if the code is for email change.", alias="newEmail")
    request_type: Optional[StrictStr] = Field(default=None, description="The request type.", alias="requestType")
    user_ip: Optional[StrictStr] = Field(default=None, description="The IP address of the user.", alias="userIp")
    __properties: ClassVar[List[str]] = ["androidInstallApp", "androidMinimumVersion", "androidPackageName", "canHandleCodeInApp", "captchaResp", "challenge", "continueUrl", "email", "iOSAppStoreId", "iOSBundleId", "idToken", "kind", "newEmail", "requestType", "userIp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Relyingparty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Relyingparty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "androidInstallApp": obj.get("androidInstallApp"),
            "androidMinimumVersion": obj.get("androidMinimumVersion"),
            "androidPackageName": obj.get("androidPackageName"),
            "canHandleCodeInApp": obj.get("canHandleCodeInApp"),
            "captchaResp": obj.get("captchaResp"),
            "challenge": obj.get("challenge"),
            "continueUrl": obj.get("continueUrl"),
            "email": obj.get("email"),
            "iOSAppStoreId": obj.get("iOSAppStoreId"),
            "iOSBundleId": obj.get("iOSBundleId"),
            "idToken": obj.get("idToken"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'identitytoolkit#relyingparty',
            "newEmail": obj.get("newEmail"),
            "requestType": obj.get("requestType"),
            "userIp": obj.get("userIp")
        })
        return _obj



# coding: utf-8

"""
    Google Identity Toolkit API

    Help the third party sites to implement federated login.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VerifyPasswordResponse(BaseModel):
    """
    Request of verifying the password.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="The name of the user.", alias="displayName")
    email: Optional[StrictStr] = Field(default=None, description="The email returned by the IdP. NOTE: The federated login user may not own the email.")
    expires_in: Optional[StrictStr] = Field(default=None, description="If idToken is STS id token, then this field will be expiration time of STS id token in seconds.", alias="expiresIn")
    id_token: Optional[StrictStr] = Field(default=None, description="The GITKit token for authenticated user.", alias="idToken")
    kind: Optional[StrictStr] = Field(default='identitytoolkit#VerifyPasswordResponse', description="The fixed string \"identitytoolkit#VerifyPasswordResponse\".")
    local_id: Optional[StrictStr] = Field(default=None, description="The RP local ID if it's already been mapped to the IdP account identified by the federated ID.", alias="localId")
    oauth_access_token: Optional[StrictStr] = Field(default=None, description="The OAuth2 access token.", alias="oauthAccessToken")
    oauth_authorization_code: Optional[StrictStr] = Field(default=None, description="The OAuth2 authorization code.", alias="oauthAuthorizationCode")
    oauth_expire_in: Optional[StrictInt] = Field(default=None, description="The lifetime in seconds of the OAuth2 access token.", alias="oauthExpireIn")
    photo_url: Optional[StrictStr] = Field(default=None, description="The URI of the user's photo at IdP", alias="photoUrl")
    refresh_token: Optional[StrictStr] = Field(default=None, description="If idToken is STS id token, then this field will be refresh token.", alias="refreshToken")
    registered: Optional[StrictBool] = Field(default=None, description="Whether the email is registered.")
    __properties: ClassVar[List[str]] = ["displayName", "email", "expiresIn", "idToken", "kind", "localId", "oauthAccessToken", "oauthAuthorizationCode", "oauthExpireIn", "photoUrl", "refreshToken", "registered"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VerifyPasswordResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VerifyPasswordResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "email": obj.get("email"),
            "expiresIn": obj.get("expiresIn"),
            "idToken": obj.get("idToken"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'identitytoolkit#VerifyPasswordResponse',
            "localId": obj.get("localId"),
            "oauthAccessToken": obj.get("oauthAccessToken"),
            "oauthAuthorizationCode": obj.get("oauthAuthorizationCode"),
            "oauthExpireIn": obj.get("oauthExpireIn"),
            "photoUrl": obj.get("photoUrl"),
            "refreshToken": obj.get("refreshToken"),
            "registered": obj.get("registered")
        })
        return _obj



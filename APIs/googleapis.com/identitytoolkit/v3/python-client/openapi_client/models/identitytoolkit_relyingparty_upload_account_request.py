# coding: utf-8

"""
    Google Identity Toolkit API

    Help the third party sites to implement federated login.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.user_info import UserInfo
from typing import Optional, Set
from typing_extensions import Self

class IdentitytoolkitRelyingpartyUploadAccountRequest(BaseModel):
    """
    Request to upload user account in batch.
    """ # noqa: E501
    allow_overwrite: Optional[StrictBool] = Field(default=None, description="Whether allow overwrite existing account when user local_id exists.", alias="allowOverwrite")
    block_size: Optional[StrictInt] = Field(default=None, alias="blockSize")
    cpu_mem_cost: Optional[StrictInt] = Field(default=None, description="The following 4 fields are for standard scrypt algorithm.", alias="cpuMemCost")
    delegated_project_number: Optional[StrictStr] = Field(default=None, description="GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.", alias="delegatedProjectNumber")
    dk_len: Optional[StrictInt] = Field(default=None, alias="dkLen")
    hash_algorithm: Optional[StrictStr] = Field(default=None, description="The password hash algorithm.", alias="hashAlgorithm")
    memory_cost: Optional[StrictInt] = Field(default=None, description="Memory cost for hash calculation. Used by scrypt similar algorithms.", alias="memoryCost")
    parallelization: Optional[StrictInt] = None
    rounds: Optional[StrictInt] = Field(default=None, description="Rounds for hash calculation. Used by scrypt and similar algorithms.")
    salt_separator: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The salt separator.", alias="saltSeparator")
    sanity_check: Optional[StrictBool] = Field(default=None, description="If true, backend will do sanity check(including duplicate email and federated id) when uploading account.", alias="sanityCheck")
    signer_key: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The key for to hash the password.", alias="signerKey")
    target_project_id: Optional[StrictStr] = Field(default=None, description="Specify which project (field value is actually project id) to operate. Only used when provided credential.", alias="targetProjectId")
    users: Optional[List[UserInfo]] = Field(default=None, description="The account info to be stored.")
    __properties: ClassVar[List[str]] = ["allowOverwrite", "blockSize", "cpuMemCost", "delegatedProjectNumber", "dkLen", "hashAlgorithm", "memoryCost", "parallelization", "rounds", "saltSeparator", "sanityCheck", "signerKey", "targetProjectId", "users"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentitytoolkitRelyingpartyUploadAccountRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item_users in self.users:
                if _item_users:
                    _items.append(_item_users.to_dict())
            _dict['users'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentitytoolkitRelyingpartyUploadAccountRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowOverwrite": obj.get("allowOverwrite"),
            "blockSize": obj.get("blockSize"),
            "cpuMemCost": obj.get("cpuMemCost"),
            "delegatedProjectNumber": obj.get("delegatedProjectNumber"),
            "dkLen": obj.get("dkLen"),
            "hashAlgorithm": obj.get("hashAlgorithm"),
            "memoryCost": obj.get("memoryCost"),
            "parallelization": obj.get("parallelization"),
            "rounds": obj.get("rounds"),
            "saltSeparator": obj.get("saltSeparator"),
            "sanityCheck": obj.get("sanityCheck"),
            "signerKey": obj.get("signerKey"),
            "targetProjectId": obj.get("targetProjectId"),
            "users": [UserInfo.from_dict(_item) for _item in obj["users"]] if obj.get("users") is not None else None
        })
        return _obj



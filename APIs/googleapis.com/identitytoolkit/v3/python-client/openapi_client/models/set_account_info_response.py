# coding: utf-8

"""
    Google Identity Toolkit API

    Help the third party sites to implement federated login.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.set_account_info_response_provider_user_info_inner import SetAccountInfoResponseProviderUserInfoInner
from typing import Optional, Set
from typing_extensions import Self

class SetAccountInfoResponse(BaseModel):
    """
    Respone of setting the account information.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="The name of the user.", alias="displayName")
    email: Optional[StrictStr] = Field(default=None, description="The email of the user.")
    email_verified: Optional[StrictBool] = Field(default=None, description="If email has been verified.", alias="emailVerified")
    expires_in: Optional[StrictStr] = Field(default=None, description="If idToken is STS id token, then this field will be expiration time of STS id token in seconds.", alias="expiresIn")
    id_token: Optional[StrictStr] = Field(default=None, description="The Gitkit id token to login the newly sign up user.", alias="idToken")
    kind: Optional[StrictStr] = Field(default='identitytoolkit#SetAccountInfoResponse', description="The fixed string \"identitytoolkit#SetAccountInfoResponse\".")
    local_id: Optional[StrictStr] = Field(default=None, description="The local ID of the user.", alias="localId")
    new_email: Optional[StrictStr] = Field(default=None, description="The new email the user attempts to change to.", alias="newEmail")
    password_hash: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The user's hashed password.", alias="passwordHash")
    photo_url: Optional[StrictStr] = Field(default=None, description="The photo url of the user.", alias="photoUrl")
    provider_user_info: Optional[List[SetAccountInfoResponseProviderUserInfoInner]] = Field(default=None, description="The user's profiles at the associated IdPs.", alias="providerUserInfo")
    refresh_token: Optional[StrictStr] = Field(default=None, description="If idToken is STS id token, then this field will be refresh token.", alias="refreshToken")
    __properties: ClassVar[List[str]] = ["displayName", "email", "emailVerified", "expiresIn", "idToken", "kind", "localId", "newEmail", "passwordHash", "photoUrl", "providerUserInfo", "refreshToken"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SetAccountInfoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in provider_user_info (list)
        _items = []
        if self.provider_user_info:
            for _item_provider_user_info in self.provider_user_info:
                if _item_provider_user_info:
                    _items.append(_item_provider_user_info.to_dict())
            _dict['providerUserInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SetAccountInfoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "email": obj.get("email"),
            "emailVerified": obj.get("emailVerified"),
            "expiresIn": obj.get("expiresIn"),
            "idToken": obj.get("idToken"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'identitytoolkit#SetAccountInfoResponse',
            "localId": obj.get("localId"),
            "newEmail": obj.get("newEmail"),
            "passwordHash": obj.get("passwordHash"),
            "photoUrl": obj.get("photoUrl"),
            "providerUserInfo": [SetAccountInfoResponseProviderUserInfoInner.from_dict(_item) for _item in obj["providerUserInfo"]] if obj.get("providerUserInfo") is not None else None,
            "refreshToken": obj.get("refreshToken")
        })
        return _obj



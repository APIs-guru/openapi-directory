# coding: utf-8

"""
    Google Identity Toolkit API

    Help the third party sites to implement federated login.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateAuthUriResponse(BaseModel):
    """
    Response of creating the IDP authentication URL.
    """ # noqa: E501
    all_providers: Optional[List[StrictStr]] = Field(default=None, description="all providers the user has once used to do federated login", alias="allProviders")
    auth_uri: Optional[StrictStr] = Field(default=None, description="The URI used by the IDP to authenticate the user.", alias="authUri")
    captcha_required: Optional[StrictBool] = Field(default=None, description="True if captcha is required.", alias="captchaRequired")
    for_existing_provider: Optional[StrictBool] = Field(default=None, description="True if the authUri is for user's existing provider.", alias="forExistingProvider")
    kind: Optional[StrictStr] = Field(default='identitytoolkit#CreateAuthUriResponse', description="The fixed string identitytoolkit#CreateAuthUriResponse\".")
    provider_id: Optional[StrictStr] = Field(default=None, description="The provider ID of the auth URI.", alias="providerId")
    registered: Optional[StrictBool] = Field(default=None, description="Whether the user is registered if the identifier is an email.")
    session_id: Optional[StrictStr] = Field(default=None, description="Session ID which should be passed in the following verifyAssertion request.", alias="sessionId")
    signin_methods: Optional[List[StrictStr]] = Field(default=None, description="All sign-in methods this user has used.", alias="signinMethods")
    __properties: ClassVar[List[str]] = ["allProviders", "authUri", "captchaRequired", "forExistingProvider", "kind", "providerId", "registered", "sessionId", "signinMethods"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAuthUriResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAuthUriResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allProviders": obj.get("allProviders"),
            "authUri": obj.get("authUri"),
            "captchaRequired": obj.get("captchaRequired"),
            "forExistingProvider": obj.get("forExistingProvider"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'identitytoolkit#CreateAuthUriResponse',
            "providerId": obj.get("providerId"),
            "registered": obj.get("registered"),
            "sessionId": obj.get("sessionId"),
            "signinMethods": obj.get("signinMethods")
        })
        return _obj



# coding: utf-8

"""
    Google Identity Toolkit API

    Help the third party sites to implement federated login.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.user_info_provider_user_info_inner import UserInfoProviderUserInfoInner
from typing import Optional, Set
from typing_extensions import Self

class UserInfo(BaseModel):
    """
    Template for an individual account info.
    """ # noqa: E501
    created_at: Optional[StrictStr] = Field(default=None, description="User creation timestamp.", alias="createdAt")
    custom_attributes: Optional[StrictStr] = Field(default=None, description="The custom attributes to be set in the user's id token.", alias="customAttributes")
    custom_auth: Optional[StrictBool] = Field(default=None, description="Whether the user is authenticated by the developer.", alias="customAuth")
    disabled: Optional[StrictBool] = Field(default=None, description="Whether the user is disabled.")
    display_name: Optional[StrictStr] = Field(default=None, description="The name of the user.", alias="displayName")
    email: Optional[StrictStr] = Field(default=None, description="The email of the user.")
    email_verified: Optional[StrictBool] = Field(default=None, description="Whether the email has been verified.", alias="emailVerified")
    last_login_at: Optional[StrictStr] = Field(default=None, description="last login timestamp.", alias="lastLoginAt")
    local_id: Optional[StrictStr] = Field(default=None, description="The local ID of the user.", alias="localId")
    password_hash: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The user's hashed password.", alias="passwordHash")
    password_updated_at: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The timestamp when the password was last updated.", alias="passwordUpdatedAt")
    phone_number: Optional[StrictStr] = Field(default=None, description="User's phone number.", alias="phoneNumber")
    photo_url: Optional[StrictStr] = Field(default=None, description="The URL of the user profile photo.", alias="photoUrl")
    provider_user_info: Optional[List[UserInfoProviderUserInfoInner]] = Field(default=None, description="The IDP of the user.", alias="providerUserInfo")
    raw_password: Optional[StrictStr] = Field(default=None, description="The user's plain text password.", alias="rawPassword")
    salt: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The user's password salt.")
    screen_name: Optional[StrictStr] = Field(default=None, description="User's screen name at Twitter or login name at Github.", alias="screenName")
    valid_since: Optional[StrictStr] = Field(default=None, description="Timestamp in seconds for valid login token.", alias="validSince")
    version: Optional[StrictInt] = Field(default=None, description="Version of the user's password.")
    __properties: ClassVar[List[str]] = ["createdAt", "customAttributes", "customAuth", "disabled", "displayName", "email", "emailVerified", "lastLoginAt", "localId", "passwordHash", "passwordUpdatedAt", "phoneNumber", "photoUrl", "providerUserInfo", "rawPassword", "salt", "screenName", "validSince", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in provider_user_info (list)
        _items = []
        if self.provider_user_info:
            for _item_provider_user_info in self.provider_user_info:
                if _item_provider_user_info:
                    _items.append(_item_provider_user_info.to_dict())
            _dict['providerUserInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "customAttributes": obj.get("customAttributes"),
            "customAuth": obj.get("customAuth"),
            "disabled": obj.get("disabled"),
            "displayName": obj.get("displayName"),
            "email": obj.get("email"),
            "emailVerified": obj.get("emailVerified"),
            "lastLoginAt": obj.get("lastLoginAt"),
            "localId": obj.get("localId"),
            "passwordHash": obj.get("passwordHash"),
            "passwordUpdatedAt": obj.get("passwordUpdatedAt"),
            "phoneNumber": obj.get("phoneNumber"),
            "photoUrl": obj.get("photoUrl"),
            "providerUserInfo": [UserInfoProviderUserInfoInner.from_dict(_item) for _item in obj["providerUserInfo"]] if obj.get("providerUserInfo") is not None else None,
            "rawPassword": obj.get("rawPassword"),
            "salt": obj.get("salt"),
            "screenName": obj.get("screenName"),
            "validSince": obj.get("validSince"),
            "version": obj.get("version")
        })
        return _obj



# coding: utf-8

"""
    Google Identity Toolkit API

    Help the third party sites to implement federated login.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.email_template import EmailTemplate
from openapi_client.models.idp_config import IdpConfig
from typing import Optional, Set
from typing_extensions import Self

class IdentitytoolkitRelyingpartyGetProjectConfigResponse(BaseModel):
    """
    Response of getting the project configuration.
    """ # noqa: E501
    allow_password_user: Optional[StrictBool] = Field(default=None, description="Whether to allow password user sign in or sign up.", alias="allowPasswordUser")
    api_key: Optional[StrictStr] = Field(default=None, description="Browser API key, needed when making http request to Apiary.", alias="apiKey")
    authorized_domains: Optional[List[StrictStr]] = Field(default=None, description="Authorized domains.", alias="authorizedDomains")
    change_email_template: Optional[EmailTemplate] = Field(default=None, alias="changeEmailTemplate")
    dynamic_links_domain: Optional[StrictStr] = Field(default=None, alias="dynamicLinksDomain")
    enable_anonymous_user: Optional[StrictBool] = Field(default=None, description="Whether anonymous user is enabled.", alias="enableAnonymousUser")
    idp_config: Optional[List[IdpConfig]] = Field(default=None, description="OAuth2 provider configuration.", alias="idpConfig")
    legacy_reset_password_template: Optional[EmailTemplate] = Field(default=None, alias="legacyResetPasswordTemplate")
    project_id: Optional[StrictStr] = Field(default=None, description="Project ID of the relying party.", alias="projectId")
    reset_password_template: Optional[EmailTemplate] = Field(default=None, alias="resetPasswordTemplate")
    use_email_sending: Optional[StrictBool] = Field(default=None, description="Whether to use email sending provided by Firebear.", alias="useEmailSending")
    verify_email_template: Optional[EmailTemplate] = Field(default=None, alias="verifyEmailTemplate")
    __properties: ClassVar[List[str]] = ["allowPasswordUser", "apiKey", "authorizedDomains", "changeEmailTemplate", "dynamicLinksDomain", "enableAnonymousUser", "idpConfig", "legacyResetPasswordTemplate", "projectId", "resetPasswordTemplate", "useEmailSending", "verifyEmailTemplate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentitytoolkitRelyingpartyGetProjectConfigResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of change_email_template
        if self.change_email_template:
            _dict['changeEmailTemplate'] = self.change_email_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in idp_config (list)
        _items = []
        if self.idp_config:
            for _item_idp_config in self.idp_config:
                if _item_idp_config:
                    _items.append(_item_idp_config.to_dict())
            _dict['idpConfig'] = _items
        # override the default output from pydantic by calling `to_dict()` of legacy_reset_password_template
        if self.legacy_reset_password_template:
            _dict['legacyResetPasswordTemplate'] = self.legacy_reset_password_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reset_password_template
        if self.reset_password_template:
            _dict['resetPasswordTemplate'] = self.reset_password_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of verify_email_template
        if self.verify_email_template:
            _dict['verifyEmailTemplate'] = self.verify_email_template.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentitytoolkitRelyingpartyGetProjectConfigResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowPasswordUser": obj.get("allowPasswordUser"),
            "apiKey": obj.get("apiKey"),
            "authorizedDomains": obj.get("authorizedDomains"),
            "changeEmailTemplate": EmailTemplate.from_dict(obj["changeEmailTemplate"]) if obj.get("changeEmailTemplate") is not None else None,
            "dynamicLinksDomain": obj.get("dynamicLinksDomain"),
            "enableAnonymousUser": obj.get("enableAnonymousUser"),
            "idpConfig": [IdpConfig.from_dict(_item) for _item in obj["idpConfig"]] if obj.get("idpConfig") is not None else None,
            "legacyResetPasswordTemplate": EmailTemplate.from_dict(obj["legacyResetPasswordTemplate"]) if obj.get("legacyResetPasswordTemplate") is not None else None,
            "projectId": obj.get("projectId"),
            "resetPasswordTemplate": EmailTemplate.from_dict(obj["resetPasswordTemplate"]) if obj.get("resetPasswordTemplate") is not None else None,
            "useEmailSending": obj.get("useEmailSending"),
            "verifyEmailTemplate": EmailTemplate.from_dict(obj["verifyEmailTemplate"]) if obj.get("verifyEmailTemplate") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Identity Toolkit API

    Help the third party sites to implement federated login.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IdentitytoolkitRelyingpartyCreateAuthUriRequest(BaseModel):
    """
    Request to get the IDP authentication URL.
    """ # noqa: E501
    app_id: Optional[StrictStr] = Field(default=None, description="The app ID of the mobile app, base64(CERT_SHA1):PACKAGE_NAME for Android, BUNDLE_ID for iOS.", alias="appId")
    auth_flow_type: Optional[StrictStr] = Field(default=None, description="Explicitly specify the auth flow type. Currently only support \"CODE_FLOW\" type. The field is only used for Google provider.", alias="authFlowType")
    client_id: Optional[StrictStr] = Field(default=None, description="The relying party OAuth client ID.", alias="clientId")
    context: Optional[StrictStr] = Field(default=None, description="The opaque value used by the client to maintain context info between the authentication request and the IDP callback.")
    continue_uri: Optional[StrictStr] = Field(default=None, description="The URI to which the IDP redirects the user after the federated login flow.", alias="continueUri")
    custom_parameter: Optional[Dict[str, StrictStr]] = Field(default=None, description="The query parameter that client can customize by themselves in auth url. The following parameters are reserved for server so that they cannot be customized by clients: client_id, response_type, scope, redirect_uri, state, oauth_token.", alias="customParameter")
    hosted_domain: Optional[StrictStr] = Field(default=None, description="The hosted domain to restrict sign-in to accounts at that domain for Google Apps hosted accounts.", alias="hostedDomain")
    identifier: Optional[StrictStr] = Field(default=None, description="The email or federated ID of the user.")
    oauth_consumer_key: Optional[StrictStr] = Field(default=None, description="The developer's consumer key for OpenId OAuth Extension", alias="oauthConsumerKey")
    oauth_scope: Optional[StrictStr] = Field(default=None, description="Additional oauth scopes, beyond the basid user profile, that the user would be prompted to grant", alias="oauthScope")
    openid_realm: Optional[StrictStr] = Field(default=None, description="Optional realm for OpenID protocol. The sub string \"scheme://domain:port\" of the param \"continueUri\" is used if this is not set.", alias="openidRealm")
    ota_app: Optional[StrictStr] = Field(default=None, description="The native app package for OTA installation.", alias="otaApp")
    provider_id: Optional[StrictStr] = Field(default=None, description="The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.", alias="providerId")
    session_id: Optional[StrictStr] = Field(default=None, description="The session_id passed by client.", alias="sessionId")
    tenant_id: Optional[StrictStr] = Field(default=None, description="For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.", alias="tenantId")
    tenant_project_number: Optional[StrictStr] = Field(default=None, description="Tenant project number to be used for idp discovery.", alias="tenantProjectNumber")
    __properties: ClassVar[List[str]] = ["appId", "authFlowType", "clientId", "context", "continueUri", "customParameter", "hostedDomain", "identifier", "oauthConsumerKey", "oauthScope", "openidRealm", "otaApp", "providerId", "sessionId", "tenantId", "tenantProjectNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentitytoolkitRelyingpartyCreateAuthUriRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentitytoolkitRelyingpartyCreateAuthUriRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appId": obj.get("appId"),
            "authFlowType": obj.get("authFlowType"),
            "clientId": obj.get("clientId"),
            "context": obj.get("context"),
            "continueUri": obj.get("continueUri"),
            "customParameter": obj.get("customParameter"),
            "hostedDomain": obj.get("hostedDomain"),
            "identifier": obj.get("identifier"),
            "oauthConsumerKey": obj.get("oauthConsumerKey"),
            "oauthScope": obj.get("oauthScope"),
            "openidRealm": obj.get("openidRealm"),
            "otaApp": obj.get("otaApp"),
            "providerId": obj.get("providerId"),
            "sessionId": obj.get("sessionId"),
            "tenantId": obj.get("tenantId"),
            "tenantProjectNumber": obj.get("tenantProjectNumber")
        })
        return _obj



# coding: utf-8

"""
    Google Identity Toolkit API

    Help the third party sites to implement federated login.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IdentitytoolkitRelyingpartySetAccountInfoRequest(BaseModel):
    """
    Request to set the account information.
    """ # noqa: E501
    captcha_challenge: Optional[StrictStr] = Field(default=None, description="The captcha challenge.", alias="captchaChallenge")
    captcha_response: Optional[StrictStr] = Field(default=None, description="Response to the captcha.", alias="captchaResponse")
    created_at: Optional[StrictStr] = Field(default=None, description="The timestamp when the account is created.", alias="createdAt")
    custom_attributes: Optional[StrictStr] = Field(default=None, description="The custom attributes to be set in the user's id token.", alias="customAttributes")
    delegated_project_number: Optional[StrictStr] = Field(default=None, description="GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.", alias="delegatedProjectNumber")
    delete_attribute: Optional[List[StrictStr]] = Field(default=None, description="The attributes users request to delete.", alias="deleteAttribute")
    delete_provider: Optional[List[StrictStr]] = Field(default=None, description="The IDPs the user request to delete.", alias="deleteProvider")
    disable_user: Optional[StrictBool] = Field(default=None, description="Whether to disable the user.", alias="disableUser")
    display_name: Optional[StrictStr] = Field(default=None, description="The name of the user.", alias="displayName")
    email: Optional[StrictStr] = Field(default=None, description="The email of the user.")
    email_verified: Optional[StrictBool] = Field(default=None, description="Mark the email as verified or not.", alias="emailVerified")
    id_token: Optional[StrictStr] = Field(default=None, description="The GITKit token of the authenticated user.", alias="idToken")
    instance_id: Optional[StrictStr] = Field(default=None, description="Instance id token of the app.", alias="instanceId")
    last_login_at: Optional[StrictStr] = Field(default=None, description="Last login timestamp.", alias="lastLoginAt")
    local_id: Optional[StrictStr] = Field(default=None, description="The local ID of the user.", alias="localId")
    oob_code: Optional[StrictStr] = Field(default=None, description="The out-of-band code of the change email request.", alias="oobCode")
    password: Optional[StrictStr] = Field(default=None, description="The new password of the user.")
    phone_number: Optional[StrictStr] = Field(default=None, description="Privileged caller can update user with specified phone number.", alias="phoneNumber")
    photo_url: Optional[StrictStr] = Field(default=None, description="The photo url of the user.", alias="photoUrl")
    provider: Optional[List[StrictStr]] = Field(default=None, description="The associated IDPs of the user.")
    return_secure_token: Optional[StrictBool] = Field(default=None, description="Whether return sts id token and refresh token instead of gitkit token.", alias="returnSecureToken")
    upgrade_to_federated_login: Optional[StrictBool] = Field(default=None, description="Mark the user to upgrade to federated login.", alias="upgradeToFederatedLogin")
    valid_since: Optional[StrictStr] = Field(default=None, description="Timestamp in seconds for valid login token.", alias="validSince")
    __properties: ClassVar[List[str]] = ["captchaChallenge", "captchaResponse", "createdAt", "customAttributes", "delegatedProjectNumber", "deleteAttribute", "deleteProvider", "disableUser", "displayName", "email", "emailVerified", "idToken", "instanceId", "lastLoginAt", "localId", "oobCode", "password", "phoneNumber", "photoUrl", "provider", "returnSecureToken", "upgradeToFederatedLogin", "validSince"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentitytoolkitRelyingpartySetAccountInfoRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentitytoolkitRelyingpartySetAccountInfoRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "captchaChallenge": obj.get("captchaChallenge"),
            "captchaResponse": obj.get("captchaResponse"),
            "createdAt": obj.get("createdAt"),
            "customAttributes": obj.get("customAttributes"),
            "delegatedProjectNumber": obj.get("delegatedProjectNumber"),
            "deleteAttribute": obj.get("deleteAttribute"),
            "deleteProvider": obj.get("deleteProvider"),
            "disableUser": obj.get("disableUser"),
            "displayName": obj.get("displayName"),
            "email": obj.get("email"),
            "emailVerified": obj.get("emailVerified"),
            "idToken": obj.get("idToken"),
            "instanceId": obj.get("instanceId"),
            "lastLoginAt": obj.get("lastLoginAt"),
            "localId": obj.get("localId"),
            "oobCode": obj.get("oobCode"),
            "password": obj.get("password"),
            "phoneNumber": obj.get("phoneNumber"),
            "photoUrl": obj.get("photoUrl"),
            "provider": obj.get("provider"),
            "returnSecureToken": obj.get("returnSecureToken"),
            "upgradeToFederatedLogin": obj.get("upgradeToFederatedLogin"),
            "validSince": obj.get("validSince")
        })
        return _obj



# coding: utf-8

"""
    Google Identity Toolkit API

    Help the third party sites to implement federated login.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IdentitytoolkitRelyingpartySignupNewUserRequest(BaseModel):
    """
    Request to signup new user, create anonymous user or anonymous user reauth.
    """ # noqa: E501
    captcha_challenge: Optional[StrictStr] = Field(default=None, description="The captcha challenge.", alias="captchaChallenge")
    captcha_response: Optional[StrictStr] = Field(default=None, description="Response to the captcha.", alias="captchaResponse")
    disabled: Optional[StrictBool] = Field(default=None, description="Whether to disable the user. Only can be used by service account.")
    display_name: Optional[StrictStr] = Field(default=None, description="The name of the user.", alias="displayName")
    email: Optional[StrictStr] = Field(default=None, description="The email of the user.")
    email_verified: Optional[StrictBool] = Field(default=None, description="Mark the email as verified or not. Only can be used by service account.", alias="emailVerified")
    id_token: Optional[StrictStr] = Field(default=None, description="The GITKit token of the authenticated user.", alias="idToken")
    instance_id: Optional[StrictStr] = Field(default=None, description="Instance id token of the app.", alias="instanceId")
    local_id: Optional[StrictStr] = Field(default=None, description="Privileged caller can create user with specified user id.", alias="localId")
    password: Optional[StrictStr] = Field(default=None, description="The new password of the user.")
    phone_number: Optional[StrictStr] = Field(default=None, description="Privileged caller can create user with specified phone number.", alias="phoneNumber")
    photo_url: Optional[StrictStr] = Field(default=None, description="The photo url of the user.", alias="photoUrl")
    tenant_id: Optional[StrictStr] = Field(default=None, description="For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.", alias="tenantId")
    tenant_project_number: Optional[StrictStr] = Field(default=None, description="Tenant project number to be used for idp discovery.", alias="tenantProjectNumber")
    __properties: ClassVar[List[str]] = ["captchaChallenge", "captchaResponse", "disabled", "displayName", "email", "emailVerified", "idToken", "instanceId", "localId", "password", "phoneNumber", "photoUrl", "tenantId", "tenantProjectNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentitytoolkitRelyingpartySignupNewUserRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentitytoolkitRelyingpartySignupNewUserRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "captchaChallenge": obj.get("captchaChallenge"),
            "captchaResponse": obj.get("captchaResponse"),
            "disabled": obj.get("disabled"),
            "displayName": obj.get("displayName"),
            "email": obj.get("email"),
            "emailVerified": obj.get("emailVerified"),
            "idToken": obj.get("idToken"),
            "instanceId": obj.get("instanceId"),
            "localId": obj.get("localId"),
            "password": obj.get("password"),
            "phoneNumber": obj.get("phoneNumber"),
            "photoUrl": obj.get("photoUrl"),
            "tenantId": obj.get("tenantId"),
            "tenantProjectNumber": obj.get("tenantProjectNumber")
        })
        return _obj



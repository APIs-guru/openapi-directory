# coding: utf-8

"""
    Identity Toolkit API

    The Google Identity Toolkit API lets you use open standards to verify a user's identity.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_identitytoolkit_admin_v2_tenant import GoogleCloudIdentitytoolkitAdminV2Tenant

class TestGoogleCloudIdentitytoolkitAdminV2Tenant(unittest.TestCase):
    """GoogleCloudIdentitytoolkitAdminV2Tenant unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudIdentitytoolkitAdminV2Tenant:
        """Test GoogleCloudIdentitytoolkitAdminV2Tenant
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudIdentitytoolkitAdminV2Tenant`
        """
        model = GoogleCloudIdentitytoolkitAdminV2Tenant()
        if include_optional:
            return GoogleCloudIdentitytoolkitAdminV2Tenant(
                allow_password_signup = True,
                autodelete_anonymous_users = True,
                client = openapi_client.models.google_cloud_identitytoolkit_admin_v2_client_permission_config.GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig(
                    permissions = openapi_client.models.google_cloud_identitytoolkit_admin_v2_client_permissions.GoogleCloudIdentitytoolkitAdminV2ClientPermissions(
                        disabled_user_deletion = True, 
                        disabled_user_signup = True, ), ),
                disable_auth = True,
                display_name = '',
                email_privacy_config = openapi_client.models.google_cloud_identitytoolkit_admin_v2_email_privacy_config.GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig(
                    enable_improved_email_privacy = True, ),
                enable_anonymous_user = True,
                enable_email_link_signin = True,
                hash_config = openapi_client.models.google_cloud_identitytoolkit_admin_v2_hash_config.GoogleCloudIdentitytoolkitAdminV2HashConfig(
                    algorithm = 'HASH_ALGORITHM_UNSPECIFIED', 
                    memory_cost = 56, 
                    rounds = 56, 
                    salt_separator = '', 
                    signer_key = '', ),
                inheritance = openapi_client.models.google_cloud_identitytoolkit_admin_v2_inheritance.GoogleCloudIdentitytoolkitAdminV2Inheritance(
                    email_sending_config = True, ),
                mfa_config = openapi_client.models.google_cloud_identitytoolkit_admin_v2_multi_factor_auth_config.GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig(
                    enabled_providers = [
                        'PROVIDER_UNSPECIFIED'
                        ], 
                    provider_configs = [
                        openapi_client.models.google_cloud_identitytoolkit_admin_v2_provider_config.GoogleCloudIdentitytoolkitAdminV2ProviderConfig(
                            state = 'MFA_STATE_UNSPECIFIED', 
                            totp_provider_config = openapi_client.models.google_cloud_identitytoolkit_admin_v2_totp_mfa_provider_config.GoogleCloudIdentitytoolkitAdminV2TotpMfaProviderConfig(
                                adjacent_intervals = 56, ), )
                        ], 
                    state = 'STATE_UNSPECIFIED', ),
                monitoring = openapi_client.models.google_cloud_identitytoolkit_admin_v2_monitoring_config.GoogleCloudIdentitytoolkitAdminV2MonitoringConfig(
                    request_logging = openapi_client.models.google_cloud_identitytoolkit_admin_v2_request_logging.GoogleCloudIdentitytoolkitAdminV2RequestLogging(
                        enabled = True, ), ),
                name = '',
                password_policy_config = openapi_client.models.google_cloud_identitytoolkit_admin_v2_password_policy_config.GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig(
                    force_upgrade_on_signin = True, 
                    last_update_time = '', 
                    password_policy_enforcement_state = 'PASSWORD_POLICY_ENFORCEMENT_STATE_UNSPECIFIED', 
                    password_policy_versions = [
                        openapi_client.models.google_cloud_identitytoolkit_admin_v2_password_policy_version.GoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersion(
                            custom_strength_options = openapi_client.models.google_cloud_identitytoolkit_admin_v2_custom_strength_options.GoogleCloudIdentitytoolkitAdminV2CustomStrengthOptions(
                                contains_lowercase_character = True, 
                                contains_non_alphanumeric_character = True, 
                                contains_numeric_character = True, 
                                contains_uppercase_character = True, 
                                max_password_length = 56, 
                                min_password_length = 56, ), 
                            schema_version = 56, )
                        ], ),
                recaptcha_config = openapi_client.models.google_cloud_identitytoolkit_admin_v2_recaptcha_config.GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig(
                    email_password_enforcement_state = 'RECAPTCHA_PROVIDER_ENFORCEMENT_STATE_UNSPECIFIED', 
                    managed_rules = [
                        openapi_client.models.google_cloud_identitytoolkit_admin_v2_recaptcha_managed_rule.GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule(
                            action = 'RECAPTCHA_ACTION_UNSPECIFIED', 
                            end_score = 1.337, )
                        ], 
                    recaptcha_keys = [
                        openapi_client.models.google_cloud_identitytoolkit_admin_v2_recaptcha_key.GoogleCloudIdentitytoolkitAdminV2RecaptchaKey(
                            key = '', 
                            type = 'CLIENT_TYPE_UNSPECIFIED', )
                        ], 
                    use_account_defender = True, ),
                sms_region_config = openapi_client.models.google_cloud_identitytoolkit_admin_v2_sms_region_config.GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig(
                    allow_by_default = openapi_client.models.google_cloud_identitytoolkit_admin_v2_allow_by_default.GoogleCloudIdentitytoolkitAdminV2AllowByDefault(
                        disallowed_regions = [
                            ''
                            ], ), 
                    allowlist_only = openapi_client.models.google_cloud_identitytoolkit_admin_v2_allowlist_only.GoogleCloudIdentitytoolkitAdminV2AllowlistOnly(
                        allowed_regions = [
                            ''
                            ], ), ),
                test_phone_numbers = {
                    'key' : ''
                    }
            )
        else:
            return GoogleCloudIdentitytoolkitAdminV2Tenant(
        )
        """

    def testGoogleCloudIdentitytoolkitAdminV2Tenant(self):
        """Test GoogleCloudIdentitytoolkitAdminV2Tenant"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

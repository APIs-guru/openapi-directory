# coding: utf-8

"""
    Identity Toolkit API

    The Google Identity Toolkit API lets you use open standards to verify a user's identity.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_identitytoolkit_admin_v2_config import GoogleCloudIdentitytoolkitAdminV2Config

class TestGoogleCloudIdentitytoolkitAdminV2Config(unittest.TestCase):
    """GoogleCloudIdentitytoolkitAdminV2Config unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudIdentitytoolkitAdminV2Config:
        """Test GoogleCloudIdentitytoolkitAdminV2Config
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudIdentitytoolkitAdminV2Config`
        """
        model = GoogleCloudIdentitytoolkitAdminV2Config()
        if include_optional:
            return GoogleCloudIdentitytoolkitAdminV2Config(
                authorized_domains = [
                    ''
                    ],
                autodelete_anonymous_users = True,
                blocking_functions = openapi_client.models.google_cloud_identitytoolkit_admin_v2_blocking_functions_config.GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig(
                    forward_inbound_credentials = openapi_client.models.google_cloud_identitytoolkit_admin_v2_forward_inbound_credentials.GoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials(
                        access_token = True, 
                        id_token = True, 
                        refresh_token = True, ), 
                    triggers = {
                        'key' : openapi_client.models.google_cloud_identitytoolkit_admin_v2_trigger.GoogleCloudIdentitytoolkitAdminV2Trigger(
                            function_uri = '', 
                            update_time = '', )
                        }, ),
                client = openapi_client.models.google_cloud_identitytoolkit_admin_v2_client_config.GoogleCloudIdentitytoolkitAdminV2ClientConfig(
                    api_key = '', 
                    firebase_subdomain = '', 
                    permissions = openapi_client.models.google_cloud_identitytoolkit_admin_v2_permissions.GoogleCloudIdentitytoolkitAdminV2Permissions(
                        disabled_user_deletion = True, 
                        disabled_user_signup = True, ), ),
                email_privacy_config = openapi_client.models.google_cloud_identitytoolkit_admin_v2_email_privacy_config.GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig(
                    enable_improved_email_privacy = True, ),
                mfa = openapi_client.models.google_cloud_identitytoolkit_admin_v2_multi_factor_auth_config.GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig(
                    enabled_providers = [
                        'PROVIDER_UNSPECIFIED'
                        ], 
                    provider_configs = [
                        openapi_client.models.google_cloud_identitytoolkit_admin_v2_provider_config.GoogleCloudIdentitytoolkitAdminV2ProviderConfig(
                            state = 'MFA_STATE_UNSPECIFIED', 
                            totp_provider_config = openapi_client.models.google_cloud_identitytoolkit_admin_v2_totp_mfa_provider_config.GoogleCloudIdentitytoolkitAdminV2TotpMfaProviderConfig(
                                adjacent_intervals = 56, ), )
                        ], 
                    state = 'STATE_UNSPECIFIED', ),
                monitoring = openapi_client.models.google_cloud_identitytoolkit_admin_v2_monitoring_config.GoogleCloudIdentitytoolkitAdminV2MonitoringConfig(
                    request_logging = openapi_client.models.google_cloud_identitytoolkit_admin_v2_request_logging.GoogleCloudIdentitytoolkitAdminV2RequestLogging(
                        enabled = True, ), ),
                multi_tenant = openapi_client.models.google_cloud_identitytoolkit_admin_v2_multi_tenant_config.GoogleCloudIdentitytoolkitAdminV2MultiTenantConfig(
                    allow_tenants = True, 
                    default_tenant_location = '', ),
                name = '',
                notification = openapi_client.models.google_cloud_identitytoolkit_admin_v2_notification_config.GoogleCloudIdentitytoolkitAdminV2NotificationConfig(
                    default_locale = '', 
                    send_email = openapi_client.models.google_cloud_identitytoolkit_admin_v2_send_email.GoogleCloudIdentitytoolkitAdminV2SendEmail(
                        callback_uri = '', 
                        change_email_template = openapi_client.models.google_cloud_identitytoolkit_admin_v2_email_template.GoogleCloudIdentitytoolkitAdminV2EmailTemplate(
                            body = '', 
                            body_format = 'BODY_FORMAT_UNSPECIFIED', 
                            customized = True, 
                            reply_to = '', 
                            sender_display_name = '', 
                            sender_local_part = '', 
                            subject = '', ), 
                        dns_info = openapi_client.models.google_cloud_identitytoolkit_admin_v2_dns_info.GoogleCloudIdentitytoolkitAdminV2DnsInfo(
                            custom_domain = '', 
                            custom_domain_state = 'VERIFICATION_STATE_UNSPECIFIED', 
                            domain_verification_request_time = '', 
                            pending_custom_domain = '', 
                            use_custom_domain = True, ), 
                        legacy_reset_password_template = openapi_client.models.google_cloud_identitytoolkit_admin_v2_email_template.GoogleCloudIdentitytoolkitAdminV2EmailTemplate(
                            body = '', 
                            body_format = 'BODY_FORMAT_UNSPECIFIED', 
                            customized = True, 
                            reply_to = '', 
                            sender_display_name = '', 
                            sender_local_part = '', 
                            subject = '', ), 
                        method = 'METHOD_UNSPECIFIED', 
                        reset_password_template = , 
                        revert_second_factor_addition_template = , 
                        smtp = openapi_client.models.google_cloud_identitytoolkit_admin_v2_smtp.GoogleCloudIdentitytoolkitAdminV2Smtp(
                            host = '', 
                            password = '', 
                            port = 56, 
                            security_mode = 'SECURITY_MODE_UNSPECIFIED', 
                            sender_email = '', 
                            username = '', ), 
                        verify_email_template = , ), 
                    send_sms = openapi_client.models.google_cloud_identitytoolkit_admin_v2_send_sms.GoogleCloudIdentitytoolkitAdminV2SendSms(
                        sms_template = openapi_client.models.google_cloud_identitytoolkit_admin_v2_sms_template.GoogleCloudIdentitytoolkitAdminV2SmsTemplate(
                            content = '', ), 
                        use_device_locale = True, ), ),
                password_policy_config = openapi_client.models.google_cloud_identitytoolkit_admin_v2_password_policy_config.GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig(
                    force_upgrade_on_signin = True, 
                    last_update_time = '', 
                    password_policy_enforcement_state = 'PASSWORD_POLICY_ENFORCEMENT_STATE_UNSPECIFIED', 
                    password_policy_versions = [
                        openapi_client.models.google_cloud_identitytoolkit_admin_v2_password_policy_version.GoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersion(
                            custom_strength_options = openapi_client.models.google_cloud_identitytoolkit_admin_v2_custom_strength_options.GoogleCloudIdentitytoolkitAdminV2CustomStrengthOptions(
                                contains_lowercase_character = True, 
                                contains_non_alphanumeric_character = True, 
                                contains_numeric_character = True, 
                                contains_uppercase_character = True, 
                                max_password_length = 56, 
                                min_password_length = 56, ), 
                            schema_version = 56, )
                        ], ),
                quota = openapi_client.models.google_cloud_identitytoolkit_admin_v2_quota_config.GoogleCloudIdentitytoolkitAdminV2QuotaConfig(
                    sign_up_quota_config = openapi_client.models.google_cloud_identitytoolkit_admin_v2_temporary_quota.GoogleCloudIdentitytoolkitAdminV2TemporaryQuota(
                        quota = '', 
                        quota_duration = '', 
                        start_time = '', ), ),
                recaptcha_config = openapi_client.models.google_cloud_identitytoolkit_admin_v2_recaptcha_config.GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig(
                    email_password_enforcement_state = 'RECAPTCHA_PROVIDER_ENFORCEMENT_STATE_UNSPECIFIED', 
                    managed_rules = [
                        openapi_client.models.google_cloud_identitytoolkit_admin_v2_recaptcha_managed_rule.GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule(
                            action = 'RECAPTCHA_ACTION_UNSPECIFIED', 
                            end_score = 1.337, )
                        ], 
                    recaptcha_keys = [
                        openapi_client.models.google_cloud_identitytoolkit_admin_v2_recaptcha_key.GoogleCloudIdentitytoolkitAdminV2RecaptchaKey(
                            key = '', 
                            type = 'CLIENT_TYPE_UNSPECIFIED', )
                        ], 
                    use_account_defender = True, ),
                sign_in = openapi_client.models.google_cloud_identitytoolkit_admin_v2_sign_in_config.GoogleCloudIdentitytoolkitAdminV2SignInConfig(
                    allow_duplicate_emails = True, 
                    anonymous = openapi_client.models.google_cloud_identitytoolkit_admin_v2_anonymous.GoogleCloudIdentitytoolkitAdminV2Anonymous(
                        enabled = True, ), 
                    email = openapi_client.models.google_cloud_identitytoolkit_admin_v2_email.GoogleCloudIdentitytoolkitAdminV2Email(
                        enabled = True, 
                        password_required = True, ), 
                    hash_config = openapi_client.models.google_cloud_identitytoolkit_admin_v2_hash_config.GoogleCloudIdentitytoolkitAdminV2HashConfig(
                        algorithm = 'HASH_ALGORITHM_UNSPECIFIED', 
                        memory_cost = 56, 
                        rounds = 56, 
                        salt_separator = '', 
                        signer_key = '', ), 
                    phone_number = openapi_client.models.google_cloud_identitytoolkit_admin_v2_phone_number.GoogleCloudIdentitytoolkitAdminV2PhoneNumber(
                        enabled = True, 
                        test_phone_numbers = {
                            'key' : ''
                            }, ), ),
                sms_region_config = openapi_client.models.google_cloud_identitytoolkit_admin_v2_sms_region_config.GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig(
                    allow_by_default = openapi_client.models.google_cloud_identitytoolkit_admin_v2_allow_by_default.GoogleCloudIdentitytoolkitAdminV2AllowByDefault(
                        disallowed_regions = [
                            ''
                            ], ), 
                    allowlist_only = openapi_client.models.google_cloud_identitytoolkit_admin_v2_allowlist_only.GoogleCloudIdentitytoolkitAdminV2AllowlistOnly(
                        allowed_regions = [
                            ''
                            ], ), ),
                subtype = 'SUBTYPE_UNSPECIFIED'
            )
        else:
            return GoogleCloudIdentitytoolkitAdminV2Config(
        )
        """

    def testGoogleCloudIdentitytoolkitAdminV2Config(self):
        """Test GoogleCloudIdentitytoolkitAdminV2Config"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Identity Toolkit API

    The Google Identity Toolkit API lets you use open standards to verify a user's identity.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_identitytoolkit_v2_finalize_mfa_phone_request_info import GoogleCloudIdentitytoolkitV2FinalizeMfaPhoneRequestInfo
from openapi_client.models.google_cloud_identitytoolkit_v2_finalize_mfa_totp_enrollment_request_info import GoogleCloudIdentitytoolkitV2FinalizeMfaTotpEnrollmentRequestInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentRequest(BaseModel):
    """
    Finishes enrolling a second factor for the user.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="Display name which is entered by users to distinguish between different second factors with same type or different type.", alias="displayName")
    id_token: Optional[StrictStr] = Field(default=None, description="Required. ID token.", alias="idToken")
    phone_verification_info: Optional[GoogleCloudIdentitytoolkitV2FinalizeMfaPhoneRequestInfo] = Field(default=None, alias="phoneVerificationInfo")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The ID of the Identity Platform tenant that the user enrolling MFA belongs to. If not set, the user belongs to the default Identity Platform project.", alias="tenantId")
    totp_verification_info: Optional[GoogleCloudIdentitytoolkitV2FinalizeMfaTotpEnrollmentRequestInfo] = Field(default=None, alias="totpVerificationInfo")
    __properties: ClassVar[List[str]] = ["displayName", "idToken", "phoneVerificationInfo", "tenantId", "totpVerificationInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of phone_verification_info
        if self.phone_verification_info:
            _dict['phoneVerificationInfo'] = self.phone_verification_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of totp_verification_info
        if self.totp_verification_info:
            _dict['totpVerificationInfo'] = self.totp_verification_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "idToken": obj.get("idToken"),
            "phoneVerificationInfo": GoogleCloudIdentitytoolkitV2FinalizeMfaPhoneRequestInfo.from_dict(obj["phoneVerificationInfo"]) if obj.get("phoneVerificationInfo") is not None else None,
            "tenantId": obj.get("tenantId"),
            "totpVerificationInfo": GoogleCloudIdentitytoolkitV2FinalizeMfaTotpEnrollmentRequestInfo.from_dict(obj["totpVerificationInfo"]) if obj.get("totpVerificationInfo") is not None else None
        })
        return _obj



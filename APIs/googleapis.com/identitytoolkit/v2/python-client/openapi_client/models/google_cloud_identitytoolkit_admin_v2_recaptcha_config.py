# coding: utf-8

"""
    Identity Toolkit API

    The Google Identity Toolkit API lets you use open standards to verify a user's identity.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_recaptcha_key import GoogleCloudIdentitytoolkitAdminV2RecaptchaKey
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_recaptcha_managed_rule import GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig(BaseModel):
    """
    The reCAPTCHA Enterprise integration config.
    """ # noqa: E501
    email_password_enforcement_state: Optional[StrictStr] = Field(default=None, description="The reCAPTCHA config for email/password provider, containing the enforcement status. The email/password provider contains all related user flows protected by reCAPTCHA.", alias="emailPasswordEnforcementState")
    managed_rules: Optional[List[GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule]] = Field(default=None, description="The managed rules for authentication action based on reCAPTCHA scores. The rules are shared across providers for a given tenant project.", alias="managedRules")
    recaptcha_keys: Optional[List[GoogleCloudIdentitytoolkitAdminV2RecaptchaKey]] = Field(default=None, description="Output only. The reCAPTCHA keys.", alias="recaptchaKeys")
    use_account_defender: Optional[StrictBool] = Field(default=None, description="Whether to use the account defender for reCAPTCHA assessment. Defaults to `false`.", alias="useAccountDefender")
    __properties: ClassVar[List[str]] = ["emailPasswordEnforcementState", "managedRules", "recaptchaKeys", "useAccountDefender"]

    @field_validator('email_password_enforcement_state')
    def email_password_enforcement_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RECAPTCHA_PROVIDER_ENFORCEMENT_STATE_UNSPECIFIED', 'false', 'AUDIT', 'ENFORCE']):
            raise ValueError("must be one of enum values ('RECAPTCHA_PROVIDER_ENFORCEMENT_STATE_UNSPECIFIED', 'false', 'AUDIT', 'ENFORCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "recaptcha_keys",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in managed_rules (list)
        _items = []
        if self.managed_rules:
            for _item_managed_rules in self.managed_rules:
                if _item_managed_rules:
                    _items.append(_item_managed_rules.to_dict())
            _dict['managedRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in recaptcha_keys (list)
        _items = []
        if self.recaptcha_keys:
            for _item_recaptcha_keys in self.recaptcha_keys:
                if _item_recaptcha_keys:
                    _items.append(_item_recaptcha_keys.to_dict())
            _dict['recaptchaKeys'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "emailPasswordEnforcementState": obj.get("emailPasswordEnforcementState"),
            "managedRules": [GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule.from_dict(_item) for _item in obj["managedRules"]] if obj.get("managedRules") is not None else None,
            "recaptchaKeys": [GoogleCloudIdentitytoolkitAdminV2RecaptchaKey.from_dict(_item) for _item in obj["recaptchaKeys"]] if obj.get("recaptchaKeys") is not None else None,
            "useAccountDefender": obj.get("useAccountDefender")
        })
        return _obj



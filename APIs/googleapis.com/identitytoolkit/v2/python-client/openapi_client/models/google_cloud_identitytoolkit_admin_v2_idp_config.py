# coding: utf-8

"""
    Identity Toolkit API

    The Google Identity Toolkit API lets you use open standards to verify a user's identity.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_idp_certificate import GoogleCloudIdentitytoolkitAdminV2IdpCertificate
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIdentitytoolkitAdminV2IdpConfig(BaseModel):
    """
    The SAML IdP (Identity Provider) configuration when the project acts as the relying party.
    """ # noqa: E501
    idp_certificates: Optional[List[GoogleCloudIdentitytoolkitAdminV2IdpCertificate]] = Field(default=None, description="IDP's public keys for verifying signature in the assertions.", alias="idpCertificates")
    idp_entity_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for all SAML entities.", alias="idpEntityId")
    sign_request: Optional[StrictBool] = Field(default=None, description="Indicates if outbounding SAMLRequest should be signed.", alias="signRequest")
    sso_url: Optional[StrictStr] = Field(default=None, description="URL to send Authentication request to.", alias="ssoUrl")
    __properties: ClassVar[List[str]] = ["idpCertificates", "idpEntityId", "signRequest", "ssoUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2IdpConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in idp_certificates (list)
        _items = []
        if self.idp_certificates:
            for _item_idp_certificates in self.idp_certificates:
                if _item_idp_certificates:
                    _items.append(_item_idp_certificates.to_dict())
            _dict['idpCertificates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2IdpConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "idpCertificates": [GoogleCloudIdentitytoolkitAdminV2IdpCertificate.from_dict(_item) for _item in obj["idpCertificates"]] if obj.get("idpCertificates") is not None else None,
            "idpEntityId": obj.get("idpEntityId"),
            "signRequest": obj.get("signRequest"),
            "ssoUrl": obj.get("ssoUrl")
        })
        return _obj



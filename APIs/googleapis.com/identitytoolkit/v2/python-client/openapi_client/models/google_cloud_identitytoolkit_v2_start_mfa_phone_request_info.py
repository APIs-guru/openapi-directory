# coding: utf-8

"""
    Identity Toolkit API

    The Google Identity Toolkit API lets you use open standards to verify a user's identity.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_identitytoolkit_v2_auto_retrieval_info import GoogleCloudIdentitytoolkitV2AutoRetrievalInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIdentitytoolkitV2StartMfaPhoneRequestInfo(BaseModel):
    """
    App Verification info for a StartMfa request.
    """ # noqa: E501
    auto_retrieval_info: Optional[GoogleCloudIdentitytoolkitV2AutoRetrievalInfo] = Field(default=None, alias="autoRetrievalInfo")
    ios_receipt: Optional[StrictStr] = Field(default=None, description="iOS only. Receipt of successful app token validation with APNS.", alias="iosReceipt")
    ios_secret: Optional[StrictStr] = Field(default=None, description="iOS only. Secret delivered to iOS app via APNS.", alias="iosSecret")
    phone_number: Optional[StrictStr] = Field(default=None, description="Required for enrollment. Phone number to be enrolled as MFA.", alias="phoneNumber")
    play_integrity_token: Optional[StrictStr] = Field(default=None, description="Android only. Used to assert application identity in place of a recaptcha token (or safety net token). A Play Integrity Token can be generated via the [PlayIntegrity API] (https://developer.android.com/google/play/integrity) with applying SHA256 to the `phone_number` field as the nonce.", alias="playIntegrityToken")
    recaptcha_token: Optional[StrictStr] = Field(default=None, description="Web only. Recaptcha solution.", alias="recaptchaToken")
    safety_net_token: Optional[StrictStr] = Field(default=None, description="Android only. Used to assert application identity in place of a recaptcha token. A SafetyNet Token can be generated via the [SafetyNet Android Attestation API](https://developer.android.com/training/safetynet/attestation.html), with the Base64 encoding of the `phone_number` field as the nonce.", alias="safetyNetToken")
    __properties: ClassVar[List[str]] = ["autoRetrievalInfo", "iosReceipt", "iosSecret", "phoneNumber", "playIntegrityToken", "recaptchaToken", "safetyNetToken"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitV2StartMfaPhoneRequestInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auto_retrieval_info
        if self.auto_retrieval_info:
            _dict['autoRetrievalInfo'] = self.auto_retrieval_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitV2StartMfaPhoneRequestInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoRetrievalInfo": GoogleCloudIdentitytoolkitV2AutoRetrievalInfo.from_dict(obj["autoRetrievalInfo"]) if obj.get("autoRetrievalInfo") is not None else None,
            "iosReceipt": obj.get("iosReceipt"),
            "iosSecret": obj.get("iosSecret"),
            "phoneNumber": obj.get("phoneNumber"),
            "playIntegrityToken": obj.get("playIntegrityToken"),
            "recaptchaToken": obj.get("recaptchaToken"),
            "safetyNetToken": obj.get("safetyNetToken")
        })
        return _obj



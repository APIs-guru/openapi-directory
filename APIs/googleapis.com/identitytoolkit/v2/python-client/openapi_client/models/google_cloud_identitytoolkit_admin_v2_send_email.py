# coding: utf-8

"""
    Identity Toolkit API

    The Google Identity Toolkit API lets you use open standards to verify a user's identity.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_dns_info import GoogleCloudIdentitytoolkitAdminV2DnsInfo
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_email_template import GoogleCloudIdentitytoolkitAdminV2EmailTemplate
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_smtp import GoogleCloudIdentitytoolkitAdminV2Smtp
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIdentitytoolkitAdminV2SendEmail(BaseModel):
    """
    Options for email sending.
    """ # noqa: E501
    callback_uri: Optional[StrictStr] = Field(default=None, description="action url in email template.", alias="callbackUri")
    change_email_template: Optional[GoogleCloudIdentitytoolkitAdminV2EmailTemplate] = Field(default=None, alias="changeEmailTemplate")
    dns_info: Optional[GoogleCloudIdentitytoolkitAdminV2DnsInfo] = Field(default=None, alias="dnsInfo")
    legacy_reset_password_template: Optional[GoogleCloudIdentitytoolkitAdminV2EmailTemplate] = Field(default=None, alias="legacyResetPasswordTemplate")
    method: Optional[StrictStr] = Field(default=None, description="The method used for sending an email.")
    reset_password_template: Optional[GoogleCloudIdentitytoolkitAdminV2EmailTemplate] = Field(default=None, alias="resetPasswordTemplate")
    revert_second_factor_addition_template: Optional[GoogleCloudIdentitytoolkitAdminV2EmailTemplate] = Field(default=None, alias="revertSecondFactorAdditionTemplate")
    smtp: Optional[GoogleCloudIdentitytoolkitAdminV2Smtp] = None
    verify_email_template: Optional[GoogleCloudIdentitytoolkitAdminV2EmailTemplate] = Field(default=None, alias="verifyEmailTemplate")
    __properties: ClassVar[List[str]] = ["callbackUri", "changeEmailTemplate", "dnsInfo", "legacyResetPasswordTemplate", "method", "resetPasswordTemplate", "revertSecondFactorAdditionTemplate", "smtp", "verifyEmailTemplate"]

    @field_validator('method')
    def method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['METHOD_UNSPECIFIED', 'DEFAULT', 'CUSTOM_SMTP']):
            raise ValueError("must be one of enum values ('METHOD_UNSPECIFIED', 'DEFAULT', 'CUSTOM_SMTP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2SendEmail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of change_email_template
        if self.change_email_template:
            _dict['changeEmailTemplate'] = self.change_email_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dns_info
        if self.dns_info:
            _dict['dnsInfo'] = self.dns_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of legacy_reset_password_template
        if self.legacy_reset_password_template:
            _dict['legacyResetPasswordTemplate'] = self.legacy_reset_password_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reset_password_template
        if self.reset_password_template:
            _dict['resetPasswordTemplate'] = self.reset_password_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of revert_second_factor_addition_template
        if self.revert_second_factor_addition_template:
            _dict['revertSecondFactorAdditionTemplate'] = self.revert_second_factor_addition_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of smtp
        if self.smtp:
            _dict['smtp'] = self.smtp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of verify_email_template
        if self.verify_email_template:
            _dict['verifyEmailTemplate'] = self.verify_email_template.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2SendEmail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callbackUri": obj.get("callbackUri"),
            "changeEmailTemplate": GoogleCloudIdentitytoolkitAdminV2EmailTemplate.from_dict(obj["changeEmailTemplate"]) if obj.get("changeEmailTemplate") is not None else None,
            "dnsInfo": GoogleCloudIdentitytoolkitAdminV2DnsInfo.from_dict(obj["dnsInfo"]) if obj.get("dnsInfo") is not None else None,
            "legacyResetPasswordTemplate": GoogleCloudIdentitytoolkitAdminV2EmailTemplate.from_dict(obj["legacyResetPasswordTemplate"]) if obj.get("legacyResetPasswordTemplate") is not None else None,
            "method": obj.get("method"),
            "resetPasswordTemplate": GoogleCloudIdentitytoolkitAdminV2EmailTemplate.from_dict(obj["resetPasswordTemplate"]) if obj.get("resetPasswordTemplate") is not None else None,
            "revertSecondFactorAdditionTemplate": GoogleCloudIdentitytoolkitAdminV2EmailTemplate.from_dict(obj["revertSecondFactorAdditionTemplate"]) if obj.get("revertSecondFactorAdditionTemplate") is not None else None,
            "smtp": GoogleCloudIdentitytoolkitAdminV2Smtp.from_dict(obj["smtp"]) if obj.get("smtp") is not None else None,
            "verifyEmailTemplate": GoogleCloudIdentitytoolkitAdminV2EmailTemplate.from_dict(obj["verifyEmailTemplate"]) if obj.get("verifyEmailTemplate") is not None else None
        })
        return _obj



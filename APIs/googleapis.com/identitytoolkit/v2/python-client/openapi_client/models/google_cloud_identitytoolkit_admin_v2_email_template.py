# coding: utf-8

"""
    Identity Toolkit API

    The Google Identity Toolkit API lets you use open standards to verify a user's identity.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIdentitytoolkitAdminV2EmailTemplate(BaseModel):
    """
    Email template. The subject and body fields can contain the following placeholders which will be replaced with the appropriate values: %LINK% - The link to use to redeem the send OOB code. %EMAIL% - The email where the email is being sent. %NEW_EMAIL% - The new email being set for the account (when applicable). %APP_NAME% - The GCP project's display name. %DISPLAY_NAME% - The user's display name.
    """ # noqa: E501
    body: Optional[StrictStr] = Field(default=None, description="Email body")
    body_format: Optional[StrictStr] = Field(default=None, description="Email body format", alias="bodyFormat")
    customized: Optional[StrictBool] = Field(default=None, description="Output only. Whether the body or subject of the email is customized.")
    reply_to: Optional[StrictStr] = Field(default=None, description="Reply-to address", alias="replyTo")
    sender_display_name: Optional[StrictStr] = Field(default=None, description="Sender display name", alias="senderDisplayName")
    sender_local_part: Optional[StrictStr] = Field(default=None, description="Local part of From address", alias="senderLocalPart")
    subject: Optional[StrictStr] = Field(default=None, description="Subject of the email")
    __properties: ClassVar[List[str]] = ["body", "bodyFormat", "customized", "replyTo", "senderDisplayName", "senderLocalPart", "subject"]

    @field_validator('body_format')
    def body_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BODY_FORMAT_UNSPECIFIED', 'PLAIN_TEXT', 'HTML']):
            raise ValueError("must be one of enum values ('BODY_FORMAT_UNSPECIFIED', 'PLAIN_TEXT', 'HTML')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2EmailTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "customized",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2EmailTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "body": obj.get("body"),
            "bodyFormat": obj.get("bodyFormat"),
            "customized": obj.get("customized"),
            "replyTo": obj.get("replyTo"),
            "senderDisplayName": obj.get("senderDisplayName"),
            "senderLocalPart": obj.get("senderLocalPart"),
            "subject": obj.get("subject")
        })
        return _obj



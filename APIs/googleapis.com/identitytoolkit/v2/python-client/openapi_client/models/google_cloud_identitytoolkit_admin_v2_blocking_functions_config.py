# coding: utf-8

"""
    Identity Toolkit API

    The Google Identity Toolkit API lets you use open standards to verify a user's identity.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_forward_inbound_credentials import GoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_trigger import GoogleCloudIdentitytoolkitAdminV2Trigger
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig(BaseModel):
    """
    Configuration related to Blocking Functions.
    """ # noqa: E501
    forward_inbound_credentials: Optional[GoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials] = Field(default=None, alias="forwardInboundCredentials")
    triggers: Optional[Dict[str, GoogleCloudIdentitytoolkitAdminV2Trigger]] = Field(default=None, description="Map of Trigger to event type. Key should be one of the supported event types: \"beforeCreate\", \"beforeSignIn\"")
    __properties: ClassVar[List[str]] = ["forwardInboundCredentials", "triggers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of forward_inbound_credentials
        if self.forward_inbound_credentials:
            _dict['forwardInboundCredentials'] = self.forward_inbound_credentials.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in triggers (dict)
        _field_dict = {}
        if self.triggers:
            for _key_triggers in self.triggers:
                if self.triggers[_key_triggers]:
                    _field_dict[_key_triggers] = self.triggers[_key_triggers].to_dict()
            _dict['triggers'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "forwardInboundCredentials": GoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials.from_dict(obj["forwardInboundCredentials"]) if obj.get("forwardInboundCredentials") is not None else None,
            "triggers": dict(
                (_k, GoogleCloudIdentitytoolkitAdminV2Trigger.from_dict(_v))
                for _k, _v in obj["triggers"].items()
            )
            if obj.get("triggers") is not None
            else None
        })
        return _obj



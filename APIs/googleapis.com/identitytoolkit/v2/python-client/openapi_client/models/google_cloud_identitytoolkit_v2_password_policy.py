# coding: utf-8

"""
    Identity Toolkit API

    The Google Identity Toolkit API lets you use open standards to verify a user's identity.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_identitytoolkit_v2_custom_strength_options import GoogleCloudIdentitytoolkitV2CustomStrengthOptions
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIdentitytoolkitV2PasswordPolicy(BaseModel):
    """
    Configuration for password policy.
    """ # noqa: E501
    allowed_non_alphanumeric_characters: Optional[List[StrictStr]] = Field(default=None, description="Output only. Allowed characters which satisfy the non_alphanumeric requirement.", alias="allowedNonAlphanumericCharacters")
    custom_strength_options: Optional[GoogleCloudIdentitytoolkitV2CustomStrengthOptions] = Field(default=None, alias="customStrengthOptions")
    enforcement_state: Optional[StrictStr] = Field(default=None, description="Output only. Which enforcement mode to use for the password policy.", alias="enforcementState")
    force_upgrade_on_signin: Optional[StrictBool] = Field(default=None, description="Users must have a password compliant with the password policy to sign-in.", alias="forceUpgradeOnSignin")
    schema_version: Optional[StrictInt] = Field(default=None, description="Output only. schema version number for the password policy", alias="schemaVersion")
    __properties: ClassVar[List[str]] = ["allowedNonAlphanumericCharacters", "customStrengthOptions", "enforcementState", "forceUpgradeOnSignin", "schemaVersion"]

    @field_validator('enforcement_state')
    def enforcement_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENFORCEMENT_STATE_UNSPECIFIED', 'false', 'ENFORCE']):
            raise ValueError("must be one of enum values ('ENFORCEMENT_STATE_UNSPECIFIED', 'false', 'ENFORCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitV2PasswordPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "allowed_non_alphanumeric_characters",
            "enforcement_state",
            "schema_version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_strength_options
        if self.custom_strength_options:
            _dict['customStrengthOptions'] = self.custom_strength_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitV2PasswordPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedNonAlphanumericCharacters": obj.get("allowedNonAlphanumericCharacters"),
            "customStrengthOptions": GoogleCloudIdentitytoolkitV2CustomStrengthOptions.from_dict(obj["customStrengthOptions"]) if obj.get("customStrengthOptions") is not None else None,
            "enforcementState": obj.get("enforcementState"),
            "forceUpgradeOnSignin": obj.get("forceUpgradeOnSignin"),
            "schemaVersion": obj.get("schemaVersion")
        })
        return _obj



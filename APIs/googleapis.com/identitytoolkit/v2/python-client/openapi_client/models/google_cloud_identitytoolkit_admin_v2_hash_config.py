# coding: utf-8

"""
    Identity Toolkit API

    The Google Identity Toolkit API lets you use open standards to verify a user's identity.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIdentitytoolkitAdminV2HashConfig(BaseModel):
    """
    History information of the hash algorithm and key. Different accounts' passwords may be generated by different version.
    """ # noqa: E501
    algorithm: Optional[StrictStr] = Field(default=None, description="Output only. Different password hash algorithms used in Identity Toolkit.")
    memory_cost: Optional[StrictInt] = Field(default=None, description="Output only. Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.", alias="memoryCost")
    rounds: Optional[StrictInt] = Field(default=None, description="Output only. How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms.")
    salt_separator: Optional[StrictStr] = Field(default=None, description="Output only. Non-printable character to be inserted between the salt and plain text password in base64.", alias="saltSeparator")
    signer_key: Optional[StrictStr] = Field(default=None, description="Output only. Signer key in base64.", alias="signerKey")
    __properties: ClassVar[List[str]] = ["algorithm", "memoryCost", "rounds", "saltSeparator", "signerKey"]

    @field_validator('algorithm')
    def algorithm_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HASH_ALGORITHM_UNSPECIFIED', 'HMAC_SHA256', 'HMAC_SHA1', 'HMAC_MD5', 'SCRYPT', 'PBKDF_SHA1', 'MD5', 'HMAC_SHA512', 'SHA1', 'BCRYPT', 'PBKDF2_SHA256', 'SHA256', 'SHA512', 'STANDARD_SCRYPT']):
            raise ValueError("must be one of enum values ('HASH_ALGORITHM_UNSPECIFIED', 'HMAC_SHA256', 'HMAC_SHA1', 'HMAC_MD5', 'SCRYPT', 'PBKDF_SHA1', 'MD5', 'HMAC_SHA512', 'SHA1', 'BCRYPT', 'PBKDF2_SHA256', 'SHA256', 'SHA512', 'STANDARD_SCRYPT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2HashConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "algorithm",
            "memory_cost",
            "rounds",
            "salt_separator",
            "signer_key",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2HashConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algorithm": obj.get("algorithm"),
            "memoryCost": obj.get("memoryCost"),
            "rounds": obj.get("rounds"),
            "saltSeparator": obj.get("saltSeparator"),
            "signerKey": obj.get("signerKey")
        })
        return _obj



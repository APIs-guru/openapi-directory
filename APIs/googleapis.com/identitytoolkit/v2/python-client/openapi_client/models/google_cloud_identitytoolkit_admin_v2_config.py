# coding: utf-8

"""
    Identity Toolkit API

    The Google Identity Toolkit API lets you use open standards to verify a user's identity.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_blocking_functions_config import GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_client_config import GoogleCloudIdentitytoolkitAdminV2ClientConfig
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_email_privacy_config import GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_monitoring_config import GoogleCloudIdentitytoolkitAdminV2MonitoringConfig
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_multi_factor_auth_config import GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_multi_tenant_config import GoogleCloudIdentitytoolkitAdminV2MultiTenantConfig
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_notification_config import GoogleCloudIdentitytoolkitAdminV2NotificationConfig
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_password_policy_config import GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_quota_config import GoogleCloudIdentitytoolkitAdminV2QuotaConfig
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_recaptcha_config import GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_sign_in_config import GoogleCloudIdentitytoolkitAdminV2SignInConfig
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_sms_region_config import GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIdentitytoolkitAdminV2Config(BaseModel):
    """
    Represents an Identity Toolkit project.
    """ # noqa: E501
    authorized_domains: Optional[List[StrictStr]] = Field(default=None, description="List of domains authorized for OAuth redirects", alias="authorizedDomains")
    autodelete_anonymous_users: Optional[StrictBool] = Field(default=None, description="Whether anonymous users will be auto-deleted after a period of 30 days.", alias="autodeleteAnonymousUsers")
    blocking_functions: Optional[GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig] = Field(default=None, alias="blockingFunctions")
    client: Optional[GoogleCloudIdentitytoolkitAdminV2ClientConfig] = None
    email_privacy_config: Optional[GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig] = Field(default=None, alias="emailPrivacyConfig")
    mfa: Optional[GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig] = None
    monitoring: Optional[GoogleCloudIdentitytoolkitAdminV2MonitoringConfig] = None
    multi_tenant: Optional[GoogleCloudIdentitytoolkitAdminV2MultiTenantConfig] = Field(default=None, alias="multiTenant")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of the Config resource. Example: \"projects/my-awesome-project/config\"")
    notification: Optional[GoogleCloudIdentitytoolkitAdminV2NotificationConfig] = None
    password_policy_config: Optional[GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig] = Field(default=None, alias="passwordPolicyConfig")
    quota: Optional[GoogleCloudIdentitytoolkitAdminV2QuotaConfig] = None
    recaptcha_config: Optional[GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig] = Field(default=None, alias="recaptchaConfig")
    sign_in: Optional[GoogleCloudIdentitytoolkitAdminV2SignInConfig] = Field(default=None, alias="signIn")
    sms_region_config: Optional[GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig] = Field(default=None, alias="smsRegionConfig")
    subtype: Optional[StrictStr] = Field(default=None, description="Output only. The subtype of this config.")
    __properties: ClassVar[List[str]] = ["authorizedDomains", "autodeleteAnonymousUsers", "blockingFunctions", "client", "emailPrivacyConfig", "mfa", "monitoring", "multiTenant", "name", "notification", "passwordPolicyConfig", "quota", "recaptchaConfig", "signIn", "smsRegionConfig", "subtype"]

    @field_validator('subtype')
    def subtype_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SUBTYPE_UNSPECIFIED', 'IDENTITY_PLATFORM', 'FIREBASE_AUTH']):
            raise ValueError("must be one of enum values ('SUBTYPE_UNSPECIFIED', 'IDENTITY_PLATFORM', 'FIREBASE_AUTH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "subtype",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of blocking_functions
        if self.blocking_functions:
            _dict['blockingFunctions'] = self.blocking_functions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email_privacy_config
        if self.email_privacy_config:
            _dict['emailPrivacyConfig'] = self.email_privacy_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mfa
        if self.mfa:
            _dict['mfa'] = self.mfa.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monitoring
        if self.monitoring:
            _dict['monitoring'] = self.monitoring.to_dict()
        # override the default output from pydantic by calling `to_dict()` of multi_tenant
        if self.multi_tenant:
            _dict['multiTenant'] = self.multi_tenant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notification
        if self.notification:
            _dict['notification'] = self.notification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of password_policy_config
        if self.password_policy_config:
            _dict['passwordPolicyConfig'] = self.password_policy_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quota
        if self.quota:
            _dict['quota'] = self.quota.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recaptcha_config
        if self.recaptcha_config:
            _dict['recaptchaConfig'] = self.recaptcha_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sign_in
        if self.sign_in:
            _dict['signIn'] = self.sign_in.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sms_region_config
        if self.sms_region_config:
            _dict['smsRegionConfig'] = self.sms_region_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorizedDomains": obj.get("authorizedDomains"),
            "autodeleteAnonymousUsers": obj.get("autodeleteAnonymousUsers"),
            "blockingFunctions": GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig.from_dict(obj["blockingFunctions"]) if obj.get("blockingFunctions") is not None else None,
            "client": GoogleCloudIdentitytoolkitAdminV2ClientConfig.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "emailPrivacyConfig": GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig.from_dict(obj["emailPrivacyConfig"]) if obj.get("emailPrivacyConfig") is not None else None,
            "mfa": GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.from_dict(obj["mfa"]) if obj.get("mfa") is not None else None,
            "monitoring": GoogleCloudIdentitytoolkitAdminV2MonitoringConfig.from_dict(obj["monitoring"]) if obj.get("monitoring") is not None else None,
            "multiTenant": GoogleCloudIdentitytoolkitAdminV2MultiTenantConfig.from_dict(obj["multiTenant"]) if obj.get("multiTenant") is not None else None,
            "name": obj.get("name"),
            "notification": GoogleCloudIdentitytoolkitAdminV2NotificationConfig.from_dict(obj["notification"]) if obj.get("notification") is not None else None,
            "passwordPolicyConfig": GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig.from_dict(obj["passwordPolicyConfig"]) if obj.get("passwordPolicyConfig") is not None else None,
            "quota": GoogleCloudIdentitytoolkitAdminV2QuotaConfig.from_dict(obj["quota"]) if obj.get("quota") is not None else None,
            "recaptchaConfig": GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.from_dict(obj["recaptchaConfig"]) if obj.get("recaptchaConfig") is not None else None,
            "signIn": GoogleCloudIdentitytoolkitAdminV2SignInConfig.from_dict(obj["signIn"]) if obj.get("signIn") is not None else None,
            "smsRegionConfig": GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig.from_dict(obj["smsRegionConfig"]) if obj.get("smsRegionConfig") is not None else None,
            "subtype": obj.get("subtype")
        })
        return _obj



# coding: utf-8

"""
    Identity Toolkit API

    The Google Identity Toolkit API lets you use open standards to verify a user's identity.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_client_permission_config import GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_email_privacy_config import GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_hash_config import GoogleCloudIdentitytoolkitAdminV2HashConfig
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_inheritance import GoogleCloudIdentitytoolkitAdminV2Inheritance
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_monitoring_config import GoogleCloudIdentitytoolkitAdminV2MonitoringConfig
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_multi_factor_auth_config import GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_password_policy_config import GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_recaptcha_config import GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_sms_region_config import GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIdentitytoolkitAdminV2Tenant(BaseModel):
    """
    A Tenant contains configuration for the tenant in a multi-tenant project.
    """ # noqa: E501
    allow_password_signup: Optional[StrictBool] = Field(default=None, description="Whether to allow email/password user authentication.", alias="allowPasswordSignup")
    autodelete_anonymous_users: Optional[StrictBool] = Field(default=None, description="Whether anonymous users will be auto-deleted after a period of 30 days.", alias="autodeleteAnonymousUsers")
    client: Optional[GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig] = None
    disable_auth: Optional[StrictBool] = Field(default=None, description="Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to sign-in. Admins of the disabled tenant are not able to manage its users.", alias="disableAuth")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name of the tenant.", alias="displayName")
    email_privacy_config: Optional[GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig] = Field(default=None, alias="emailPrivacyConfig")
    enable_anonymous_user: Optional[StrictBool] = Field(default=None, description="Whether to enable anonymous user authentication.", alias="enableAnonymousUser")
    enable_email_link_signin: Optional[StrictBool] = Field(default=None, description="Whether to enable email link user authentication.", alias="enableEmailLinkSignin")
    hash_config: Optional[GoogleCloudIdentitytoolkitAdminV2HashConfig] = Field(default=None, alias="hashConfig")
    inheritance: Optional[GoogleCloudIdentitytoolkitAdminV2Inheritance] = None
    mfa_config: Optional[GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig] = Field(default=None, alias="mfaConfig")
    monitoring: Optional[GoogleCloudIdentitytoolkitAdminV2MonitoringConfig] = None
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of a tenant. For example: \"projects/{project-id}/tenants/{tenant-id}\"")
    password_policy_config: Optional[GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig] = Field(default=None, alias="passwordPolicyConfig")
    recaptcha_config: Optional[GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig] = Field(default=None, alias="recaptchaConfig")
    sms_region_config: Optional[GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig] = Field(default=None, alias="smsRegionConfig")
    test_phone_numbers: Optional[Dict[str, StrictStr]] = Field(default=None, description="A map of pairs that can be used for MFA. The phone number should be in E.164 format (https://www.itu.int/rec/T-REC-E.164/) and a maximum of 10 pairs can be added (error will be thrown once exceeded).", alias="testPhoneNumbers")
    __properties: ClassVar[List[str]] = ["allowPasswordSignup", "autodeleteAnonymousUsers", "client", "disableAuth", "displayName", "emailPrivacyConfig", "enableAnonymousUser", "enableEmailLinkSignin", "hashConfig", "inheritance", "mfaConfig", "monitoring", "name", "passwordPolicyConfig", "recaptchaConfig", "smsRegionConfig", "testPhoneNumbers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2Tenant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email_privacy_config
        if self.email_privacy_config:
            _dict['emailPrivacyConfig'] = self.email_privacy_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hash_config
        if self.hash_config:
            _dict['hashConfig'] = self.hash_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inheritance
        if self.inheritance:
            _dict['inheritance'] = self.inheritance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mfa_config
        if self.mfa_config:
            _dict['mfaConfig'] = self.mfa_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monitoring
        if self.monitoring:
            _dict['monitoring'] = self.monitoring.to_dict()
        # override the default output from pydantic by calling `to_dict()` of password_policy_config
        if self.password_policy_config:
            _dict['passwordPolicyConfig'] = self.password_policy_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recaptcha_config
        if self.recaptcha_config:
            _dict['recaptchaConfig'] = self.recaptcha_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sms_region_config
        if self.sms_region_config:
            _dict['smsRegionConfig'] = self.sms_region_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2Tenant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowPasswordSignup": obj.get("allowPasswordSignup"),
            "autodeleteAnonymousUsers": obj.get("autodeleteAnonymousUsers"),
            "client": GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "disableAuth": obj.get("disableAuth"),
            "displayName": obj.get("displayName"),
            "emailPrivacyConfig": GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig.from_dict(obj["emailPrivacyConfig"]) if obj.get("emailPrivacyConfig") is not None else None,
            "enableAnonymousUser": obj.get("enableAnonymousUser"),
            "enableEmailLinkSignin": obj.get("enableEmailLinkSignin"),
            "hashConfig": GoogleCloudIdentitytoolkitAdminV2HashConfig.from_dict(obj["hashConfig"]) if obj.get("hashConfig") is not None else None,
            "inheritance": GoogleCloudIdentitytoolkitAdminV2Inheritance.from_dict(obj["inheritance"]) if obj.get("inheritance") is not None else None,
            "mfaConfig": GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.from_dict(obj["mfaConfig"]) if obj.get("mfaConfig") is not None else None,
            "monitoring": GoogleCloudIdentitytoolkitAdminV2MonitoringConfig.from_dict(obj["monitoring"]) if obj.get("monitoring") is not None else None,
            "name": obj.get("name"),
            "passwordPolicyConfig": GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig.from_dict(obj["passwordPolicyConfig"]) if obj.get("passwordPolicyConfig") is not None else None,
            "recaptchaConfig": GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.from_dict(obj["recaptchaConfig"]) if obj.get("recaptchaConfig") is not None else None,
            "smsRegionConfig": GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig.from_dict(obj["smsRegionConfig"]) if obj.get("smsRegionConfig") is not None else None,
            "testPhoneNumbers": obj.get("testPhoneNumbers")
        })
        return _obj



# coding: utf-8

"""
    Identity Toolkit API

    The Google Identity Toolkit API lets you use open standards to verify a user's identity.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_password_policy_version import GoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersion
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig(BaseModel):
    """
    The configuration for the password policy on the project.
    """ # noqa: E501
    force_upgrade_on_signin: Optional[StrictBool] = Field(default=None, description="Users must have a password compliant with the password policy to sign-in.", alias="forceUpgradeOnSignin")
    last_update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last time the password policy on the project was updated.", alias="lastUpdateTime")
    password_policy_enforcement_state: Optional[StrictStr] = Field(default=None, description="Which enforcement mode to use for the password policy.", alias="passwordPolicyEnforcementState")
    password_policy_versions: Optional[List[GoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersion]] = Field(default=None, description="Must be of length 1. Contains the strength attributes for the password policy.", alias="passwordPolicyVersions")
    __properties: ClassVar[List[str]] = ["forceUpgradeOnSignin", "lastUpdateTime", "passwordPolicyEnforcementState", "passwordPolicyVersions"]

    @field_validator('password_policy_enforcement_state')
    def password_policy_enforcement_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PASSWORD_POLICY_ENFORCEMENT_STATE_UNSPECIFIED', 'false', 'ENFORCE']):
            raise ValueError("must be one of enum values ('PASSWORD_POLICY_ENFORCEMENT_STATE_UNSPECIFIED', 'false', 'ENFORCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in password_policy_versions (list)
        _items = []
        if self.password_policy_versions:
            for _item_password_policy_versions in self.password_policy_versions:
                if _item_password_policy_versions:
                    _items.append(_item_password_policy_versions.to_dict())
            _dict['passwordPolicyVersions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "forceUpgradeOnSignin": obj.get("forceUpgradeOnSignin"),
            "lastUpdateTime": obj.get("lastUpdateTime"),
            "passwordPolicyEnforcementState": obj.get("passwordPolicyEnforcementState"),
            "passwordPolicyVersions": [GoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersion.from_dict(_item) for _item in obj["passwordPolicyVersions"]] if obj.get("passwordPolicyVersions") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Identity Toolkit API

    The Google Identity Toolkit API lets you use open standards to verify a user's identity.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_sp_certificate import GoogleCloudIdentitytoolkitAdminV2SpCertificate
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIdentitytoolkitAdminV2SpConfig(BaseModel):
    """
    The SAML SP (Service Provider) configuration when the project acts as the relying party to receive and accept an authentication assertion issued by a SAML identity provider.
    """ # noqa: E501
    callback_uri: Optional[StrictStr] = Field(default=None, description="Callback URI where responses from IDP are handled.", alias="callbackUri")
    sp_certificates: Optional[List[GoogleCloudIdentitytoolkitAdminV2SpCertificate]] = Field(default=None, description="Output only. Public certificates generated by the server to verify the signature in SAMLRequest in the SP-initiated flow.", alias="spCertificates")
    sp_entity_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for all SAML entities.", alias="spEntityId")
    __properties: ClassVar[List[str]] = ["callbackUri", "spCertificates", "spEntityId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2SpConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "sp_certificates",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sp_certificates (list)
        _items = []
        if self.sp_certificates:
            for _item_sp_certificates in self.sp_certificates:
                if _item_sp_certificates:
                    _items.append(_item_sp_certificates.to_dict())
            _dict['spCertificates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2SpConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callbackUri": obj.get("callbackUri"),
            "spCertificates": [GoogleCloudIdentitytoolkitAdminV2SpCertificate.from_dict(_item) for _item in obj["spCertificates"]] if obj.get("spCertificates") is not None else None,
            "spEntityId": obj.get("spEntityId")
        })
        return _obj



# coding: utf-8

"""
    Identity Toolkit API

    The Google Identity Toolkit API lets you use open standards to verify a user's identity.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_anonymous import GoogleCloudIdentitytoolkitAdminV2Anonymous
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_email import GoogleCloudIdentitytoolkitAdminV2Email
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_hash_config import GoogleCloudIdentitytoolkitAdminV2HashConfig
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_phone_number import GoogleCloudIdentitytoolkitAdminV2PhoneNumber
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIdentitytoolkitAdminV2SignInConfig(BaseModel):
    """
    Configuration related to local sign in methods.
    """ # noqa: E501
    allow_duplicate_emails: Optional[StrictBool] = Field(default=None, description="Whether to allow more than one account to have the same email.", alias="allowDuplicateEmails")
    anonymous: Optional[GoogleCloudIdentitytoolkitAdminV2Anonymous] = None
    email: Optional[GoogleCloudIdentitytoolkitAdminV2Email] = None
    hash_config: Optional[GoogleCloudIdentitytoolkitAdminV2HashConfig] = Field(default=None, alias="hashConfig")
    phone_number: Optional[GoogleCloudIdentitytoolkitAdminV2PhoneNumber] = Field(default=None, alias="phoneNumber")
    __properties: ClassVar[List[str]] = ["allowDuplicateEmails", "anonymous", "email", "hashConfig", "phoneNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2SignInConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of anonymous
        if self.anonymous:
            _dict['anonymous'] = self.anonymous.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email
        if self.email:
            _dict['email'] = self.email.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hash_config
        if self.hash_config:
            _dict['hashConfig'] = self.hash_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phone_number
        if self.phone_number:
            _dict['phoneNumber'] = self.phone_number.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2SignInConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowDuplicateEmails": obj.get("allowDuplicateEmails"),
            "anonymous": GoogleCloudIdentitytoolkitAdminV2Anonymous.from_dict(obj["anonymous"]) if obj.get("anonymous") is not None else None,
            "email": GoogleCloudIdentitytoolkitAdminV2Email.from_dict(obj["email"]) if obj.get("email") is not None else None,
            "hashConfig": GoogleCloudIdentitytoolkitAdminV2HashConfig.from_dict(obj["hashConfig"]) if obj.get("hashConfig") is not None else None,
            "phoneNumber": GoogleCloudIdentitytoolkitAdminV2PhoneNumber.from_dict(obj["phoneNumber"]) if obj.get("phoneNumber") is not None else None
        })
        return _obj



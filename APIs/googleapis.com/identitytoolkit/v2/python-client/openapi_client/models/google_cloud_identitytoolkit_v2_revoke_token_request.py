# coding: utf-8

"""
    Identity Toolkit API

    The Google Identity Toolkit API lets you use open standards to verify a user's identity.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIdentitytoolkitV2RevokeTokenRequest(BaseModel):
    """
    Request message for RevokeToken.
    """ # noqa: E501
    id_token: Optional[StrictStr] = Field(default=None, description="Required. A valid Identity Platform ID token to link the account. If there was a successful token revocation request on the account and no tokens are generated after the revocation, the duplicate requests will be ignored and returned immediately.", alias="idToken")
    provider_id: Optional[StrictStr] = Field(default=None, description="Required. The idp provider for the token. Currently only supports Apple Idp. The format should be \"apple.com\".", alias="providerId")
    redirect_uri: Optional[StrictStr] = Field(default=None, description="The redirect URI provided in the initial authorization request made by the client to the IDP. The URI must use the HTTPS protocol, include a domain name, and can't contain an IP address or localhost. Required if token_type is CODE.", alias="redirectUri")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The ID of the Identity Platform tenant the user is signing in to. If not set, the user will sign in to the default Identity Platform project.", alias="tenantId")
    token: Optional[StrictStr] = Field(default=None, description="Required. The token to be revoked. If an authorization_code is passed in, the API will first exchange the code for access token and then revoke the token exchanged.")
    token_type: Optional[StrictStr] = Field(default=None, description="Required. The type of the token to be revoked.", alias="tokenType")
    __properties: ClassVar[List[str]] = ["idToken", "providerId", "redirectUri", "tenantId", "token", "tokenType"]

    @field_validator('token_type')
    def token_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TOKEN_TYPE_UNSPECIFIED', 'REFRESH_TOKEN', 'ACCESS_TOKEN', 'CODE']):
            raise ValueError("must be one of enum values ('TOKEN_TYPE_UNSPECIFIED', 'REFRESH_TOKEN', 'ACCESS_TOKEN', 'CODE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitV2RevokeTokenRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitV2RevokeTokenRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "idToken": obj.get("idToken"),
            "providerId": obj.get("providerId"),
            "redirectUri": obj.get("redirectUri"),
            "tenantId": obj.get("tenantId"),
            "token": obj.get("token"),
            "tokenType": obj.get("tokenType")
        })
        return _obj



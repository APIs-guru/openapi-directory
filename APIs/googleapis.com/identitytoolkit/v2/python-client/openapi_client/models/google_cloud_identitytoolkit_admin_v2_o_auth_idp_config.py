# coding: utf-8

"""
    Identity Toolkit API

    The Google Identity Toolkit API lets you use open standards to verify a user's identity.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_identitytoolkit_admin_v2_o_auth_response_type import GoogleCloudIdentitytoolkitAdminV2OAuthResponseType
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig(BaseModel):
    """
    Configuration options for authenticating with an OAuth IDP.
    """ # noqa: E501
    client_id: Optional[StrictStr] = Field(default=None, description="The client id of an OAuth client.", alias="clientId")
    client_secret: Optional[StrictStr] = Field(default=None, description="The client secret of the OAuth client, to enable OIDC code flow.", alias="clientSecret")
    display_name: Optional[StrictStr] = Field(default=None, description="The config's display name set by developers.", alias="displayName")
    enabled: Optional[StrictBool] = Field(default=None, description="True if allows the user to sign in with the provider.")
    issuer: Optional[StrictStr] = Field(default=None, description="For OIDC Idps, the issuer identifier.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the OAuthIdpConfig resource, for example: 'projects/my-awesome-project/oauthIdpConfigs/oauth-config-id'. Ignored during create requests.")
    response_type: Optional[GoogleCloudIdentitytoolkitAdminV2OAuthResponseType] = Field(default=None, alias="responseType")
    __properties: ClassVar[List[str]] = ["clientId", "clientSecret", "displayName", "enabled", "issuer", "name", "responseType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of response_type
        if self.response_type:
            _dict['responseType'] = self.response_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientId": obj.get("clientId"),
            "clientSecret": obj.get("clientSecret"),
            "displayName": obj.get("displayName"),
            "enabled": obj.get("enabled"),
            "issuer": obj.get("issuer"),
            "name": obj.get("name"),
            "responseType": GoogleCloudIdentitytoolkitAdminV2OAuthResponseType.from_dict(obj["responseType"]) if obj.get("responseType") is not None else None
        })
        return _obj



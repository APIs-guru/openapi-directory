# coding: utf-8

"""
    On-Demand Scanning API

    A service to scan container images for vulnerabilities.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.vulnerability_occurrence import VulnerabilityOccurrence

class TestVulnerabilityOccurrence(unittest.TestCase):
    """VulnerabilityOccurrence unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VulnerabilityOccurrence:
        """Test VulnerabilityOccurrence
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VulnerabilityOccurrence`
        """
        model = VulnerabilityOccurrence()
        if include_optional:
            return VulnerabilityOccurrence(
                cvss_score = 1.337,
                cvss_v2 = openapi_client.models.cvss.CVSS(
                    attack_complexity = 'ATTACK_COMPLEXITY_UNSPECIFIED', 
                    attack_vector = 'ATTACK_VECTOR_UNSPECIFIED', 
                    authentication = 'AUTHENTICATION_UNSPECIFIED', 
                    availability_impact = 'IMPACT_UNSPECIFIED', 
                    base_score = 1.337, 
                    confidentiality_impact = 'IMPACT_UNSPECIFIED', 
                    exploitability_score = 1.337, 
                    impact_score = 1.337, 
                    integrity_impact = 'IMPACT_UNSPECIFIED', 
                    privileges_required = 'PRIVILEGES_REQUIRED_UNSPECIFIED', 
                    scope = 'SCOPE_UNSPECIFIED', 
                    user_interaction = 'USER_INTERACTION_UNSPECIFIED', ),
                cvss_version = 'CVSS_VERSION_UNSPECIFIED',
                cvssv3 = openapi_client.models.cvss.CVSS(
                    attack_complexity = 'ATTACK_COMPLEXITY_UNSPECIFIED', 
                    attack_vector = 'ATTACK_VECTOR_UNSPECIFIED', 
                    authentication = 'AUTHENTICATION_UNSPECIFIED', 
                    availability_impact = 'IMPACT_UNSPECIFIED', 
                    base_score = 1.337, 
                    confidentiality_impact = 'IMPACT_UNSPECIFIED', 
                    exploitability_score = 1.337, 
                    impact_score = 1.337, 
                    integrity_impact = 'IMPACT_UNSPECIFIED', 
                    privileges_required = 'PRIVILEGES_REQUIRED_UNSPECIFIED', 
                    scope = 'SCOPE_UNSPECIFIED', 
                    user_interaction = 'USER_INTERACTION_UNSPECIFIED', ),
                effective_severity = 'SEVERITY_UNSPECIFIED',
                extra_details = '',
                fix_available = True,
                long_description = '',
                package_issue = [
                    openapi_client.models.package_issue.PackageIssue(
                        affected_cpe_uri = '', 
                        affected_package = '', 
                        affected_version = openapi_client.models.version.Version(
                            epoch = 56, 
                            full_name = '', 
                            inclusive = True, 
                            kind = 'VERSION_KIND_UNSPECIFIED', 
                            name = '', 
                            revision = '', ), 
                        effective_severity = 'SEVERITY_UNSPECIFIED', 
                        file_location = [
                            openapi_client.models.grafeas_v1_file_location.GrafeasV1FileLocation(
                                file_path = '', )
                            ], 
                        fix_available = True, 
                        fixed_cpe_uri = '', 
                        fixed_package = '', 
                        fixed_version = openapi_client.models.version.Version(
                            epoch = 56, 
                            full_name = '', 
                            inclusive = True, 
                            kind = 'VERSION_KIND_UNSPECIFIED', 
                            name = '', 
                            revision = '', ), 
                        package_type = '', )
                    ],
                related_urls = [
                    openapi_client.models.related_url.RelatedUrl(
                        label = '', 
                        url = '', )
                    ],
                severity = 'SEVERITY_UNSPECIFIED',
                short_description = '',
                type = '',
                vex_assessment = openapi_client.models.vex_assessment.VexAssessment(
                    cve = '', 
                    impacts = [
                        ''
                        ], 
                    justification = openapi_client.models.justification.Justification(
                        details = '', 
                        justification_type = 'JUSTIFICATION_TYPE_UNSPECIFIED', ), 
                    note_name = '', 
                    related_uris = [
                        openapi_client.models.related_url.RelatedUrl(
                            label = '', 
                            url = '', )
                        ], 
                    remediations = [
                        openapi_client.models.remediation.Remediation(
                            details = '', 
                            remediation_type = 'REMEDIATION_TYPE_UNSPECIFIED', 
                            remediation_uri = openapi_client.models.related_url.RelatedUrl(
                                label = '', 
                                url = '', ), )
                        ], 
                    state = 'STATE_UNSPECIFIED', 
                    vulnerability_id = '', )
            )
        else:
            return VulnerabilityOccurrence(
        )
        """

    def testVulnerabilityOccurrence(self):
        """Test VulnerabilityOccurrence"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    On-Demand Scanning API

    A service to scan container images for vulnerabilities.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.dsse_attestation_occurrence import DSSEAttestationOccurrence

class TestDSSEAttestationOccurrence(unittest.TestCase):
    """DSSEAttestationOccurrence unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DSSEAttestationOccurrence:
        """Test DSSEAttestationOccurrence
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DSSEAttestationOccurrence`
        """
        model = DSSEAttestationOccurrence()
        if include_optional:
            return DSSEAttestationOccurrence(
                envelope = openapi_client.models.envelope.Envelope(
                    payload = 'YQ==', 
                    payload_type = '', 
                    signatures = [
                        openapi_client.models.envelope_signature.EnvelopeSignature(
                            keyid = '', 
                            sig = 'YQ==', )
                        ], ),
                statement = openapi_client.models.in_toto_statement.InTotoStatement(
                    _type = '', 
                    predicate_type = '', 
                    provenance = openapi_client.models.in_toto_provenance.InTotoProvenance(
                        builder_config = openapi_client.models.builder_config.BuilderConfig(
                            id = '', ), 
                        materials = [
                            ''
                            ], 
                        metadata = openapi_client.models.metadata.Metadata(
                            build_finished_on = '', 
                            build_invocation_id = '', 
                            build_started_on = '', 
                            completeness = openapi_client.models.completeness.Completeness(
                                arguments = True, 
                                environment = True, ), 
                            reproducible = True, ), 
                        recipe = openapi_client.models.recipe.Recipe(
                            arguments = [
                                {
                                    'key' : null
                                    }
                                ], 
                            defined_in_material = '', 
                            entry_point = '', 
                            environment = [
                                {
                                    'key' : null
                                    }
                                ], 
                            type = '', ), ), 
                    slsa_provenance = openapi_client.models.slsa_provenance.SlsaProvenance(
                        builder = openapi_client.models.slsa_builder.SlsaBuilder(
                            id = '', ), ), 
                    slsa_provenance_zero_two = openapi_client.models.slsa_provenance_zero_two.SlsaProvenanceZeroTwo(
                        build_config = {
                            'key' : null
                            }, 
                        build_type = '', 
                        invocation = openapi_client.models.grafeas_v1_slsa_provenance_zero_two_slsa_invocation.GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation(
                            config_source = openapi_client.models.grafeas_v1_slsa_provenance_zero_two_slsa_config_source.GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource(
                                digest = {
                                    'key' : ''
                                    }, 
                                entry_point = '', 
                                uri = '', ), 
                            parameters = {
                                'key' : null
                                }, ), ), 
                    subject = [
                        openapi_client.models.subject.Subject(
                            name = '', )
                        ], )
            )
        else:
            return DSSEAttestationOccurrence(
        )
        """

    def testDSSEAttestationOccurrence(self):
        """Test DSSEAttestationOccurrence"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

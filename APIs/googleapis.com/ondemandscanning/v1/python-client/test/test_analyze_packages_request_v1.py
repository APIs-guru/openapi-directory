# coding: utf-8

"""
    On-Demand Scanning API

    A service to scan container images for vulnerabilities.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.analyze_packages_request_v1 import AnalyzePackagesRequestV1

class TestAnalyzePackagesRequestV1(unittest.TestCase):
    """AnalyzePackagesRequestV1 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AnalyzePackagesRequestV1:
        """Test AnalyzePackagesRequestV1
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AnalyzePackagesRequestV1`
        """
        model = AnalyzePackagesRequestV1()
        if include_optional:
            return AnalyzePackagesRequestV1(
                include_osv_data = True,
                packages = [
                    openapi_client.models.package_data.PackageData(
                        architecture = '', 
                        binary_source_info = [
                            openapi_client.models.binary_source_info.BinarySourceInfo(
                                binary_version = openapi_client.models.package_version.PackageVersion(
                                    licenses = [
                                        ''
                                        ], 
                                    name = '', 
                                    version = '', ), 
                                source_version = openapi_client.models.package_version.PackageVersion(
                                    name = '', 
                                    version = '', ), )
                            ], 
                        binary_version = , 
                        cpe_uri = '', 
                        dependency_chain = [
                            openapi_client.models.language_package_dependency.LanguagePackageDependency(
                                package = '', 
                                version = '', )
                            ], 
                        file_location = [
                            openapi_client.models.file_location.FileLocation(
                                file_path = '', )
                            ], 
                        hash_digest = '', 
                        licenses = [
                            ''
                            ], 
                        maintainer = openapi_client.models.maintainer.Maintainer(
                            email = '', 
                            kind = '', 
                            name = '', 
                            url = '', ), 
                        os = '', 
                        os_version = '', 
                        package = '', 
                        package_type = 'PACKAGE_TYPE_UNSPECIFIED', 
                        patched_cve = [
                            ''
                            ], 
                        source_version = , 
                        unused = '', 
                        version = '', )
                    ],
                resource_uri = ''
            )
        else:
            return AnalyzePackagesRequestV1(
        )
        """

    def testAnalyzePackagesRequestV1(self):
        """Test AnalyzePackagesRequestV1"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

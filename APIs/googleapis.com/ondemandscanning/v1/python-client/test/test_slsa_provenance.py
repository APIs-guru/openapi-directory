# coding: utf-8

"""
    On-Demand Scanning API

    A service to scan container images for vulnerabilities.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.slsa_provenance import SlsaProvenance

class TestSlsaProvenance(unittest.TestCase):
    """SlsaProvenance unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SlsaProvenance:
        """Test SlsaProvenance
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SlsaProvenance`
        """
        model = SlsaProvenance()
        if include_optional:
            return SlsaProvenance(
                builder = openapi_client.models.slsa_builder.SlsaBuilder(
                    id = '', ),
                materials = [
                    openapi_client.models.material.Material(
                        digest = {
                            'key' : ''
                            }, 
                        uri = '', )
                    ],
                metadata = openapi_client.models.slsa_metadata.SlsaMetadata(
                    build_finished_on = '', 
                    build_invocation_id = '', 
                    build_started_on = '', 
                    completeness = openapi_client.models.slsa_completeness.SlsaCompleteness(
                        arguments = True, 
                        environment = True, 
                        materials = True, ), 
                    reproducible = True, ),
                recipe = openapi_client.models.slsa_recipe.SlsaRecipe(
                    arguments = {
                        'key' : null
                        }, 
                    defined_in_material = '', 
                    entry_point = '', 
                    environment = {
                        'key' : null
                        }, 
                    type = '', )
            )
        else:
            return SlsaProvenance(
        )
        """

    def testSlsaProvenance(self):
        """Test SlsaProvenance"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

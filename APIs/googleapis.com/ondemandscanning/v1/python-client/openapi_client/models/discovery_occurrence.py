# coding: utf-8

"""
    On-Demand Scanning API

    A service to scan container images for vulnerabilities.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.analysis_completed import AnalysisCompleted
from openapi_client.models.sbom_status import SBOMStatus
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class DiscoveryOccurrence(BaseModel):
    """
    Provides information about the analysis status of a discovered resource.
    """ # noqa: E501
    analysis_completed: Optional[AnalysisCompleted] = Field(default=None, alias="analysisCompleted")
    analysis_error: Optional[List[Status]] = Field(default=None, description="Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.", alias="analysisError")
    analysis_status: Optional[StrictStr] = Field(default=None, description="The status of discovery for the resource.", alias="analysisStatus")
    analysis_status_error: Optional[Status] = Field(default=None, alias="analysisStatusError")
    archive_time: Optional[StrictStr] = Field(default=None, description="Output only. The time occurrences related to this discovery occurrence were archived.", alias="archiveTime")
    continuous_analysis: Optional[StrictStr] = Field(default=None, description="Whether the resource is continuously analyzed.", alias="continuousAnalysis")
    cpe: Optional[StrictStr] = Field(default=None, description="The CPE of the resource being scanned.")
    last_scan_time: Optional[StrictStr] = Field(default=None, description="The last time this resource was scanned.", alias="lastScanTime")
    sbom_status: Optional[SBOMStatus] = Field(default=None, alias="sbomStatus")
    __properties: ClassVar[List[str]] = ["analysisCompleted", "analysisError", "analysisStatus", "analysisStatusError", "archiveTime", "continuousAnalysis", "cpe", "lastScanTime", "sbomStatus"]

    @field_validator('analysis_status')
    def analysis_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ANALYSIS_STATUS_UNSPECIFIED', 'PENDING', 'SCANNING', 'FINISHED_SUCCESS', 'COMPLETE', 'FINISHED_FAILED', 'FINISHED_UNSUPPORTED']):
            raise ValueError("must be one of enum values ('ANALYSIS_STATUS_UNSPECIFIED', 'PENDING', 'SCANNING', 'FINISHED_SUCCESS', 'COMPLETE', 'FINISHED_FAILED', 'FINISHED_UNSUPPORTED')")
        return value

    @field_validator('continuous_analysis')
    def continuous_analysis_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONTINUOUS_ANALYSIS_UNSPECIFIED', 'ACTIVE', 'INACTIVE']):
            raise ValueError("must be one of enum values ('CONTINUOUS_ANALYSIS_UNSPECIFIED', 'ACTIVE', 'INACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DiscoveryOccurrence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "archive_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of analysis_completed
        if self.analysis_completed:
            _dict['analysisCompleted'] = self.analysis_completed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in analysis_error (list)
        _items = []
        if self.analysis_error:
            for _item_analysis_error in self.analysis_error:
                if _item_analysis_error:
                    _items.append(_item_analysis_error.to_dict())
            _dict['analysisError'] = _items
        # override the default output from pydantic by calling `to_dict()` of analysis_status_error
        if self.analysis_status_error:
            _dict['analysisStatusError'] = self.analysis_status_error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sbom_status
        if self.sbom_status:
            _dict['sbomStatus'] = self.sbom_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DiscoveryOccurrence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "analysisCompleted": AnalysisCompleted.from_dict(obj["analysisCompleted"]) if obj.get("analysisCompleted") is not None else None,
            "analysisError": [Status.from_dict(_item) for _item in obj["analysisError"]] if obj.get("analysisError") is not None else None,
            "analysisStatus": obj.get("analysisStatus"),
            "analysisStatusError": Status.from_dict(obj["analysisStatusError"]) if obj.get("analysisStatusError") is not None else None,
            "archiveTime": obj.get("archiveTime"),
            "continuousAnalysis": obj.get("continuousAnalysis"),
            "cpe": obj.get("cpe"),
            "lastScanTime": obj.get("lastScanTime"),
            "sbomStatus": SBOMStatus.from_dict(obj["sbomStatus"]) if obj.get("sbomStatus") is not None else None
        })
        return _obj



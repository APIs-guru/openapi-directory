# coding: utf-8

"""
    On-Demand Scanning API

    A service to scan container images for vulnerabilities.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.in_toto_provenance import InTotoProvenance
from openapi_client.models.slsa_provenance import SlsaProvenance
from openapi_client.models.slsa_provenance_zero_two import SlsaProvenanceZeroTwo
from openapi_client.models.subject import Subject
from typing import Optional, Set
from typing_extensions import Self

class InTotoStatement(BaseModel):
    """
    Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always \"application/vnd.in-toto+json\".
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="Always `https://in-toto.io/Statement/v0.1`.", alias="_type")
    predicate_type: Optional[StrictStr] = Field(default=None, description="`https://slsa.dev/provenance/v0.1` for SlsaProvenance.", alias="predicateType")
    provenance: Optional[InTotoProvenance] = None
    slsa_provenance: Optional[SlsaProvenance] = Field(default=None, alias="slsaProvenance")
    slsa_provenance_zero_two: Optional[SlsaProvenanceZeroTwo] = Field(default=None, alias="slsaProvenanceZeroTwo")
    subject: Optional[List[Subject]] = None
    __properties: ClassVar[List[str]] = ["_type", "predicateType", "provenance", "slsaProvenance", "slsaProvenanceZeroTwo", "subject"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InTotoStatement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of provenance
        if self.provenance:
            _dict['provenance'] = self.provenance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of slsa_provenance
        if self.slsa_provenance:
            _dict['slsaProvenance'] = self.slsa_provenance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of slsa_provenance_zero_two
        if self.slsa_provenance_zero_two:
            _dict['slsaProvenanceZeroTwo'] = self.slsa_provenance_zero_two.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subject (list)
        _items = []
        if self.subject:
            for _item_subject in self.subject:
                if _item_subject:
                    _items.append(_item_subject.to_dict())
            _dict['subject'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InTotoStatement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_type": obj.get("_type"),
            "predicateType": obj.get("predicateType"),
            "provenance": InTotoProvenance.from_dict(obj["provenance"]) if obj.get("provenance") is not None else None,
            "slsaProvenance": SlsaProvenance.from_dict(obj["slsaProvenance"]) if obj.get("slsaProvenance") is not None else None,
            "slsaProvenanceZeroTwo": SlsaProvenanceZeroTwo.from_dict(obj["slsaProvenanceZeroTwo"]) if obj.get("slsaProvenanceZeroTwo") is not None else None,
            "subject": [Subject.from_dict(_item) for _item in obj["subject"]] if obj.get("subject") is not None else None
        })
        return _obj



# coding: utf-8

"""
    On-Demand Scanning API

    A service to scan container images for vulnerabilities.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.upgrade_distribution import UpgradeDistribution
from openapi_client.models.version import Version
from openapi_client.models.windows_update import WindowsUpdate
from typing import Optional, Set
from typing_extensions import Self

class UpgradeOccurrence(BaseModel):
    """
    An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.
    """ # noqa: E501
    distribution: Optional[UpgradeDistribution] = None
    package: Optional[StrictStr] = Field(default=None, description="Required for non-Windows OS. The package this Upgrade is for.")
    parsed_version: Optional[Version] = Field(default=None, alias="parsedVersion")
    windows_update: Optional[WindowsUpdate] = Field(default=None, alias="windowsUpdate")
    __properties: ClassVar[List[str]] = ["distribution", "package", "parsedVersion", "windowsUpdate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpgradeOccurrence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of distribution
        if self.distribution:
            _dict['distribution'] = self.distribution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parsed_version
        if self.parsed_version:
            _dict['parsedVersion'] = self.parsed_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of windows_update
        if self.windows_update:
            _dict['windowsUpdate'] = self.windows_update.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpgradeOccurrence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "distribution": UpgradeDistribution.from_dict(obj["distribution"]) if obj.get("distribution") is not None else None,
            "package": obj.get("package"),
            "parsedVersion": Version.from_dict(obj["parsedVersion"]) if obj.get("parsedVersion") is not None else None,
            "windowsUpdate": WindowsUpdate.from_dict(obj["windowsUpdate"]) if obj.get("windowsUpdate") is not None else None
        })
        return _obj



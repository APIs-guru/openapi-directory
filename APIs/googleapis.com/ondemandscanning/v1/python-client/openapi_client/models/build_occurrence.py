# coding: utf-8

"""
    On-Demand Scanning API

    A service to scan container images for vulnerabilities.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.build_provenance import BuildProvenance
from openapi_client.models.in_toto_provenance import InTotoProvenance
from openapi_client.models.in_toto_slsa_provenance_v1 import InTotoSlsaProvenanceV1
from openapi_client.models.in_toto_statement import InTotoStatement
from typing import Optional, Set
from typing_extensions import Self

class BuildOccurrence(BaseModel):
    """
    Details of a build occurrence.
    """ # noqa: E501
    in_toto_slsa_provenance_v1: Optional[InTotoSlsaProvenanceV1] = Field(default=None, alias="inTotoSlsaProvenanceV1")
    intoto_provenance: Optional[InTotoProvenance] = Field(default=None, alias="intotoProvenance")
    intoto_statement: Optional[InTotoStatement] = Field(default=None, alias="intotoStatement")
    provenance: Optional[BuildProvenance] = None
    provenance_bytes: Optional[StrictStr] = Field(default=None, description="Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.", alias="provenanceBytes")
    __properties: ClassVar[List[str]] = ["inTotoSlsaProvenanceV1", "intotoProvenance", "intotoStatement", "provenance", "provenanceBytes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildOccurrence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of in_toto_slsa_provenance_v1
        if self.in_toto_slsa_provenance_v1:
            _dict['inTotoSlsaProvenanceV1'] = self.in_toto_slsa_provenance_v1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of intoto_provenance
        if self.intoto_provenance:
            _dict['intotoProvenance'] = self.intoto_provenance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of intoto_statement
        if self.intoto_statement:
            _dict['intotoStatement'] = self.intoto_statement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provenance
        if self.provenance:
            _dict['provenance'] = self.provenance.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildOccurrence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inTotoSlsaProvenanceV1": InTotoSlsaProvenanceV1.from_dict(obj["inTotoSlsaProvenanceV1"]) if obj.get("inTotoSlsaProvenanceV1") is not None else None,
            "intotoProvenance": InTotoProvenance.from_dict(obj["intotoProvenance"]) if obj.get("intotoProvenance") is not None else None,
            "intotoStatement": InTotoStatement.from_dict(obj["intotoStatement"]) if obj.get("intotoStatement") is not None else None,
            "provenance": BuildProvenance.from_dict(obj["provenance"]) if obj.get("provenance") is not None else None,
            "provenanceBytes": obj.get("provenanceBytes")
        })
        return _obj



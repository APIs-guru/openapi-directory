# coding: utf-8

"""
    On-Demand Scanning API

    A service to scan container images for vulnerabilities.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.category import Category
from openapi_client.models.identity import Identity
from typing import Optional, Set
from typing_extensions import Self

class WindowsUpdate(BaseModel):
    """
    Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.
    """ # noqa: E501
    categories: Optional[List[Category]] = Field(default=None, description="The list of categories to which the update belongs.")
    description: Optional[StrictStr] = Field(default=None, description="The localized description of the update.")
    identity: Optional[Identity] = None
    kb_article_ids: Optional[List[StrictStr]] = Field(default=None, description="The Microsoft Knowledge Base article IDs that are associated with the update.", alias="kbArticleIds")
    last_published_timestamp: Optional[StrictStr] = Field(default=None, description="The last published timestamp of the update.", alias="lastPublishedTimestamp")
    support_url: Optional[StrictStr] = Field(default=None, description="The hyperlink to the support information for the update.", alias="supportUrl")
    title: Optional[StrictStr] = Field(default=None, description="The localized title of the update.")
    __properties: ClassVar[List[str]] = ["categories", "description", "identity", "kbArticleIds", "lastPublishedTimestamp", "supportUrl", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WindowsUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item_categories in self.categories:
                if _item_categories:
                    _items.append(_item_categories.to_dict())
            _dict['categories'] = _items
        # override the default output from pydantic by calling `to_dict()` of identity
        if self.identity:
            _dict['identity'] = self.identity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WindowsUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categories": [Category.from_dict(_item) for _item in obj["categories"]] if obj.get("categories") is not None else None,
            "description": obj.get("description"),
            "identity": Identity.from_dict(obj["identity"]) if obj.get("identity") is not None else None,
            "kbArticleIds": obj.get("kbArticleIds"),
            "lastPublishedTimestamp": obj.get("lastPublishedTimestamp"),
            "supportUrl": obj.get("supportUrl"),
            "title": obj.get("title")
        })
        return _obj



# coding: utf-8

"""
    Google Civic Information API

    Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.contest import Contest

class TestContest(unittest.TestCase):
    """Contest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Contest:
        """Test Contest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Contest`
        """
        model = Contest()
        if include_optional:
            return Contest(
                ballot_placement = '',
                ballot_title = '',
                candidates = [
                    openapi_client.models.candidate.Candidate(
                        candidate_url = '', 
                        channels = [
                            openapi_client.models.channel.Channel(
                                id = '', 
                                type = '', )
                            ], 
                        email = '', 
                        name = '', 
                        order_on_ballot = '', 
                        party = '', 
                        phone = '', 
                        photo_url = '', )
                    ],
                district = openapi_client.models.electoral_district.ElectoralDistrict(
                    id = '', 
                    name = '', 
                    scope = 'statewide', ),
                electorate_specifications = '',
                level = [
                    'international'
                    ],
                number_elected = '',
                number_voting_for = '',
                office = '',
                primary_parties = [
                    ''
                    ],
                referendum_ballot_responses = [
                    ''
                    ],
                referendum_brief = '',
                referendum_con_statement = '',
                referendum_effect_of_abstain = '',
                referendum_passage_threshold = '',
                referendum_pro_statement = '',
                referendum_subtitle = '',
                referendum_text = '',
                referendum_title = '',
                referendum_url = '',
                roles = [
                    'headOfState'
                    ],
                sources = [
                    openapi_client.models.source.Source(
                        name = '', 
                        official = True, )
                    ],
                special = '',
                type = ''
            )
        else:
            return Contest(
        )
        """

    def testContest(self):
        """Test Contest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

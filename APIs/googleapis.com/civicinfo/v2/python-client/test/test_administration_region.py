# coding: utf-8

"""
    Google Civic Information API

    Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.administration_region import AdministrationRegion

class TestAdministrationRegion(unittest.TestCase):
    """AdministrationRegion unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AdministrationRegion:
        """Test AdministrationRegion
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AdministrationRegion`
        """
        model = AdministrationRegion()
        if include_optional:
            return AdministrationRegion(
                election_administration_body = openapi_client.models.administrative_body.AdministrativeBody(
                    absentee_voting_info_url = '', 
                    ballot_info_url = '', 
                    correspondence_address = openapi_client.models.simple_address_type.SimpleAddressType(
                        city = '', 
                        line1 = '', 
                        line2 = '', 
                        line3 = '', 
                        location_name = '', 
                        state = '', 
                        zip = '', ), 
                    election_info_url = '', 
                    election_notice_text = '', 
                    election_notice_url = '', 
                    election_officials = [
                        openapi_client.models.election_official.ElectionOfficial(
                            email_address = '', 
                            fax_number = '', 
                            name = '', 
                            office_phone_number = '', 
                            title = '', )
                        ], 
                    election_registration_confirmation_url = '', 
                    election_registration_url = '', 
                    election_rules_url = '', 
                    hours_of_operation = '', 
                    name = '', 
                    physical_address = openapi_client.models.simple_address_type.SimpleAddressType(
                        city = '', 
                        line1 = '', 
                        line2 = '', 
                        line3 = '', 
                        location_name = '', 
                        state = '', 
                        zip = '', ), 
                    voter_services = [
                        ''
                        ], 
                    voting_location_finder_url = '', ),
                local_jurisdiction = openapi_client.models.administration_region.AdministrationRegion(
                    election_administration_body = openapi_client.models.administrative_body.AdministrativeBody(
                        absentee_voting_info_url = '', 
                        ballot_info_url = '', 
                        correspondence_address = openapi_client.models.simple_address_type.SimpleAddressType(
                            city = '', 
                            line1 = '', 
                            line2 = '', 
                            line3 = '', 
                            location_name = '', 
                            state = '', 
                            zip = '', ), 
                        election_info_url = '', 
                        election_notice_text = '', 
                        election_notice_url = '', 
                        election_officials = [
                            openapi_client.models.election_official.ElectionOfficial(
                                email_address = '', 
                                fax_number = '', 
                                name = '', 
                                office_phone_number = '', 
                                title = '', )
                            ], 
                        election_registration_confirmation_url = '', 
                        election_registration_url = '', 
                        election_rules_url = '', 
                        hours_of_operation = '', 
                        name = '', 
                        physical_address = openapi_client.models.simple_address_type.SimpleAddressType(
                            city = '', 
                            line1 = '', 
                            line2 = '', 
                            line3 = '', 
                            location_name = '', 
                            state = '', 
                            zip = '', ), 
                        voter_services = [
                            ''
                            ], 
                        voting_location_finder_url = '', ), 
                    local_jurisdiction = openapi_client.models.administration_region.AdministrationRegion(
                        name = '', 
                        sources = [
                            openapi_client.models.source.Source(
                                name = '', 
                                official = True, )
                            ], ), 
                    name = '', 
                    sources = [
                        openapi_client.models.source.Source(
                            name = '', 
                            official = True, )
                        ], ),
                name = '',
                sources = [
                    openapi_client.models.source.Source(
                        name = '', 
                        official = True, )
                    ]
            )
        else:
            return AdministrationRegion(
        )
        """

    def testAdministrationRegion(self):
        """Test AdministrationRegion"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Google Civic Information API

    Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.voter_info_response import VoterInfoResponse

class TestVoterInfoResponse(unittest.TestCase):
    """VoterInfoResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VoterInfoResponse:
        """Test VoterInfoResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VoterInfoResponse`
        """
        model = VoterInfoResponse()
        if include_optional:
            return VoterInfoResponse(
                contests = [
                    openapi_client.models.contest.Contest(
                        ballot_placement = '', 
                        ballot_title = '', 
                        candidates = [
                            openapi_client.models.candidate.Candidate(
                                candidate_url = '', 
                                channels = [
                                    openapi_client.models.channel.Channel(
                                        id = '', 
                                        type = '', )
                                    ], 
                                email = '', 
                                name = '', 
                                order_on_ballot = '', 
                                party = '', 
                                phone = '', 
                                photo_url = '', )
                            ], 
                        district = openapi_client.models.electoral_district.ElectoralDistrict(
                            id = '', 
                            name = '', 
                            scope = 'statewide', ), 
                        electorate_specifications = '', 
                        level = [
                            'international'
                            ], 
                        number_elected = '', 
                        number_voting_for = '', 
                        office = '', 
                        primary_parties = [
                            ''
                            ], 
                        referendum_ballot_responses = [
                            ''
                            ], 
                        referendum_brief = '', 
                        referendum_con_statement = '', 
                        referendum_effect_of_abstain = '', 
                        referendum_passage_threshold = '', 
                        referendum_pro_statement = '', 
                        referendum_subtitle = '', 
                        referendum_text = '', 
                        referendum_title = '', 
                        referendum_url = '', 
                        roles = [
                            'headOfState'
                            ], 
                        sources = [
                            openapi_client.models.source.Source(
                                name = '', 
                                official = True, )
                            ], 
                        special = '', 
                        type = '', )
                    ],
                drop_off_locations = [
                    openapi_client.models.polling_location.PollingLocation(
                        address = openapi_client.models.simple_address_type.SimpleAddressType(
                            city = '', 
                            line1 = '', 
                            line2 = '', 
                            line3 = '', 
                            location_name = '', 
                            state = '', 
                            zip = '', ), 
                        end_date = '', 
                        latitude = 1.337, 
                        longitude = 1.337, 
                        name = '', 
                        notes = '', 
                        polling_hours = '', 
                        sources = [
                            openapi_client.models.source.Source(
                                name = '', 
                                official = True, )
                            ], 
                        start_date = '', 
                        voter_services = '', )
                    ],
                early_vote_sites = [
                    openapi_client.models.polling_location.PollingLocation(
                        address = openapi_client.models.simple_address_type.SimpleAddressType(
                            city = '', 
                            line1 = '', 
                            line2 = '', 
                            line3 = '', 
                            location_name = '', 
                            state = '', 
                            zip = '', ), 
                        end_date = '', 
                        latitude = 1.337, 
                        longitude = 1.337, 
                        name = '', 
                        notes = '', 
                        polling_hours = '', 
                        sources = [
                            openapi_client.models.source.Source(
                                name = '', 
                                official = True, )
                            ], 
                        start_date = '', 
                        voter_services = '', )
                    ],
                election = openapi_client.models.election.Election(
                    election_day = '', 
                    id = '', 
                    name = '', 
                    ocd_division_id = '', 
                    shape_lookup_behavior = 'shapeLookupDefault', ),
                kind = 'civicinfo#voterInfoResponse',
                mail_only = True,
                normalized_input = openapi_client.models.simple_address_type.SimpleAddressType(
                    city = '', 
                    line1 = '', 
                    line2 = '', 
                    line3 = '', 
                    location_name = '', 
                    state = '', 
                    zip = '', ),
                other_elections = [
                    openapi_client.models.election.Election(
                        election_day = '', 
                        id = '', 
                        name = '', 
                        ocd_division_id = '', 
                        shape_lookup_behavior = 'shapeLookupDefault', )
                    ],
                polling_locations = [
                    openapi_client.models.polling_location.PollingLocation(
                        address = openapi_client.models.simple_address_type.SimpleAddressType(
                            city = '', 
                            line1 = '', 
                            line2 = '', 
                            line3 = '', 
                            location_name = '', 
                            state = '', 
                            zip = '', ), 
                        end_date = '', 
                        latitude = 1.337, 
                        longitude = 1.337, 
                        name = '', 
                        notes = '', 
                        polling_hours = '', 
                        sources = [
                            openapi_client.models.source.Source(
                                name = '', 
                                official = True, )
                            ], 
                        start_date = '', 
                        voter_services = '', )
                    ],
                precinct_id = '',
                precincts = [
                    openapi_client.models.precinct.Precinct(
                        administration_region_id = '', 
                        contest_id = [
                            ''
                            ], 
                        dataset_id = '', 
                        early_vote_site_id = [
                            ''
                            ], 
                        electoral_district_id = [
                            ''
                            ], 
                        id = '', 
                        mail_only = True, 
                        name = '', 
                        number = '', 
                        ocd_id = [
                            ''
                            ], 
                        polling_location_id = [
                            ''
                            ], 
                        spatial_boundary_id = [
                            ''
                            ], 
                        split_name = '', 
                        ward = '', )
                    ],
                state = [
                    openapi_client.models.administration_region.AdministrationRegion(
                        election_administration_body = openapi_client.models.administrative_body.AdministrativeBody(
                            absentee_voting_info_url = '', 
                            ballot_info_url = '', 
                            correspondence_address = openapi_client.models.simple_address_type.SimpleAddressType(
                                city = '', 
                                line1 = '', 
                                line2 = '', 
                                line3 = '', 
                                location_name = '', 
                                state = '', 
                                zip = '', ), 
                            election_info_url = '', 
                            election_notice_text = '', 
                            election_notice_url = '', 
                            election_officials = [
                                openapi_client.models.election_official.ElectionOfficial(
                                    email_address = '', 
                                    fax_number = '', 
                                    name = '', 
                                    office_phone_number = '', 
                                    title = '', )
                                ], 
                            election_registration_confirmation_url = '', 
                            election_registration_url = '', 
                            election_rules_url = '', 
                            hours_of_operation = '', 
                            name = '', 
                            physical_address = openapi_client.models.simple_address_type.SimpleAddressType(
                                city = '', 
                                line1 = '', 
                                line2 = '', 
                                line3 = '', 
                                location_name = '', 
                                state = '', 
                                zip = '', ), 
                            voter_services = [
                                ''
                                ], 
                            voting_location_finder_url = '', ), 
                        local_jurisdiction = openapi_client.models.administration_region.AdministrationRegion(
                            name = '', 
                            sources = [
                                openapi_client.models.source.Source(
                                    name = '', 
                                    official = True, )
                                ], ), 
                        name = '', 
                        sources = [
                            openapi_client.models.source.Source(
                                name = '', 
                                official = True, )
                            ], )
                    ]
            )
        else:
            return VoterInfoResponse(
        )
        """

    def testVoterInfoResponse(self):
        """Test VoterInfoResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

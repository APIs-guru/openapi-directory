# coding: utf-8

"""
    Google Civic Information API

    Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.channel import Channel
from typing import Optional, Set
from typing_extensions import Self

class Candidate(BaseModel):
    """
    Information about a candidate running for elected office.
    """ # noqa: E501
    candidate_url: Optional[StrictStr] = Field(default=None, description="The URL for the candidate's campaign web site.", alias="candidateUrl")
    channels: Optional[List[Channel]] = Field(default=None, description="A list of known (social) media channels for this candidate.")
    email: Optional[StrictStr] = Field(default=None, description="The email address for the candidate's campaign.")
    name: Optional[StrictStr] = Field(default=None, description="The candidate's name. If this is a joint ticket it will indicate the name of the candidate at the top of a ticket followed by a / and that name of candidate at the bottom of the ticket. e.g. \"Mitt Romney / Paul Ryan\"")
    order_on_ballot: Optional[StrictStr] = Field(default=None, description="The order the candidate appears on the ballot for this contest.", alias="orderOnBallot")
    party: Optional[StrictStr] = Field(default=None, description="The full name of the party the candidate is a member of.")
    phone: Optional[StrictStr] = Field(default=None, description="The voice phone number for the candidate's campaign office.")
    photo_url: Optional[StrictStr] = Field(default=None, description="A URL for a photo of the candidate.", alias="photoUrl")
    __properties: ClassVar[List[str]] = ["candidateUrl", "channels", "email", "name", "orderOnBallot", "party", "phone", "photoUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Candidate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in channels (list)
        _items = []
        if self.channels:
            for _item_channels in self.channels:
                if _item_channels:
                    _items.append(_item_channels.to_dict())
            _dict['channels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Candidate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "candidateUrl": obj.get("candidateUrl"),
            "channels": [Channel.from_dict(_item) for _item in obj["channels"]] if obj.get("channels") is not None else None,
            "email": obj.get("email"),
            "name": obj.get("name"),
            "orderOnBallot": obj.get("orderOnBallot"),
            "party": obj.get("party"),
            "phone": obj.get("phone"),
            "photoUrl": obj.get("photoUrl")
        })
        return _obj



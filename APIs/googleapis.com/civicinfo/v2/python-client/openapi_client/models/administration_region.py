# coding: utf-8

"""
    Google Civic Information API

    Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.administrative_body import AdministrativeBody
from openapi_client.models.source import Source
from typing import Optional, Set
from typing_extensions import Self

class AdministrationRegion(BaseModel):
    """
    Describes information about a regional election administrative area.
    """ # noqa: E501
    election_administration_body: Optional[AdministrativeBody] = Field(default=None, alias="electionAdministrationBody")
    local_jurisdiction: Optional[AdministrationRegion] = None
    name: Optional[StrictStr] = Field(default=None, description="The name of the jurisdiction.")
    sources: Optional[List[Source]] = Field(default=None, description="A list of sources for this area. If multiple sources are listed the data has been aggregated from those sources.")
    __properties: ClassVar[List[str]] = ["electionAdministrationBody", "local_jurisdiction", "name", "sources"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdministrationRegion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of election_administration_body
        if self.election_administration_body:
            _dict['electionAdministrationBody'] = self.election_administration_body.to_dict()
        # override the default output from pydantic by calling `to_dict()` of local_jurisdiction
        if self.local_jurisdiction:
            _dict['local_jurisdiction'] = self.local_jurisdiction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sources (list)
        _items = []
        if self.sources:
            for _item_sources in self.sources:
                if _item_sources:
                    _items.append(_item_sources.to_dict())
            _dict['sources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdministrationRegion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "electionAdministrationBody": AdministrativeBody.from_dict(obj["electionAdministrationBody"]) if obj.get("electionAdministrationBody") is not None else None,
            "local_jurisdiction": AdministrationRegion.from_dict(obj["local_jurisdiction"]) if obj.get("local_jurisdiction") is not None else None,
            "name": obj.get("name"),
            "sources": [Source.from_dict(_item) for _item in obj["sources"]] if obj.get("sources") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
AdministrationRegion.model_rebuild(raise_errors=False)


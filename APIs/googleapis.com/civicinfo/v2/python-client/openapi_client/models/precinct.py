# coding: utf-8

"""
    Google Civic Information API

    Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Precinct(BaseModel):
    """
    Precinct
    """ # noqa: E501
    administration_region_id: Optional[StrictStr] = Field(default=None, description="ID of the AdministrationRegion message for this precinct. Corresponds to LocalityId xml tag.", alias="administrationRegionId")
    contest_id: Optional[List[StrictStr]] = Field(default=None, description="ID(s) of the Contest message(s) for this precinct.", alias="contestId")
    dataset_id: Optional[StrictStr] = Field(default=None, description="Required. Dataset ID. What datasets our Precincts come from.", alias="datasetId")
    early_vote_site_id: Optional[List[StrictStr]] = Field(default=None, description="ID(s) of the PollingLocation message(s) for this precinct.", alias="earlyVoteSiteId")
    electoral_district_id: Optional[List[StrictStr]] = Field(default=None, description="ID(s) of the ElectoralDistrict message(s) for this precinct.", alias="electoralDistrictId")
    id: Optional[StrictStr] = Field(default=None, description="Required. A unique identifier for this precinct.")
    mail_only: Optional[StrictBool] = Field(default=None, description="Specifies if the precinct runs mail-only elections.", alias="mailOnly")
    name: Optional[StrictStr] = Field(default=None, description="Required. The name of the precinct.")
    number: Optional[StrictStr] = Field(default=None, description="The number of the precinct.")
    ocd_id: Optional[List[StrictStr]] = Field(default=None, description="Encouraged. The OCD ID of the precinct", alias="ocdId")
    polling_location_id: Optional[List[StrictStr]] = Field(default=None, description="ID(s) of the PollingLocation message(s) for this precinct.", alias="pollingLocationId")
    spatial_boundary_id: Optional[List[StrictStr]] = Field(default=None, description="ID(s) of the SpatialBoundary message(s) for this precinct. Used to specify a geometrical boundary of the precinct.", alias="spatialBoundaryId")
    split_name: Optional[StrictStr] = Field(default=None, description="If present, this proto corresponds to one portion of split precinct. Other portions of this precinct are guaranteed to have the same `name`. If not present, this proto represents a full precicnt.", alias="splitName")
    ward: Optional[StrictStr] = Field(default=None, description="Specifies the ward the precinct is contained within.")
    __properties: ClassVar[List[str]] = ["administrationRegionId", "contestId", "datasetId", "earlyVoteSiteId", "electoralDistrictId", "id", "mailOnly", "name", "number", "ocdId", "pollingLocationId", "spatialBoundaryId", "splitName", "ward"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Precinct from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Precinct from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "administrationRegionId": obj.get("administrationRegionId"),
            "contestId": obj.get("contestId"),
            "datasetId": obj.get("datasetId"),
            "earlyVoteSiteId": obj.get("earlyVoteSiteId"),
            "electoralDistrictId": obj.get("electoralDistrictId"),
            "id": obj.get("id"),
            "mailOnly": obj.get("mailOnly"),
            "name": obj.get("name"),
            "number": obj.get("number"),
            "ocdId": obj.get("ocdId"),
            "pollingLocationId": obj.get("pollingLocationId"),
            "spatialBoundaryId": obj.get("spatialBoundaryId"),
            "splitName": obj.get("splitName"),
            "ward": obj.get("ward")
        })
        return _obj



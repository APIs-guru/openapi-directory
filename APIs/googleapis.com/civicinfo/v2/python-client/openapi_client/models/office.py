# coding: utf-8

"""
    Google Civic Information API

    Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.source import Source
from typing import Optional, Set
from typing_extensions import Self

class Office(BaseModel):
    """
    Information about an Office held by one or more Officials.
    """ # noqa: E501
    division_id: Optional[StrictStr] = Field(default=None, description="The OCD ID of the division with which this office is associated.", alias="divisionId")
    levels: Optional[List[StrictStr]] = Field(default=None, description="The levels of government of which this office is part. There may be more than one in cases where a jurisdiction effectively acts at two different levels of government; for example, the mayor of the District of Columbia acts at \"locality\" level, but also effectively at both \"administrative-area-2\" and \"administrative-area-1\".")
    name: Optional[StrictStr] = Field(default=None, description="The human-readable name of the office.")
    official_indices: Optional[List[StrictInt]] = Field(default=None, description="List of indices in the officials array of people who presently hold this office.", alias="officialIndices")
    roles: Optional[List[StrictStr]] = Field(default=None, description="The roles which this office fulfills. Roles are not meant to be exhaustive, or to exactly specify the entire set of responsibilities of a given office, but are meant to be rough categories that are useful for general selection from or sorting of a list of offices.")
    sources: Optional[List[Source]] = Field(default=None, description="A list of sources for this office. If multiple sources are listed, the data has been aggregated from those sources.")
    __properties: ClassVar[List[str]] = ["divisionId", "levels", "name", "officialIndices", "roles", "sources"]

    @field_validator('levels')
    def levels_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['international', 'country', 'administrativeArea1', 'regional', 'administrativeArea2', 'locality', 'subLocality1', 'subLocality2', 'special']):
                raise ValueError("each list item must be one of ('international', 'country', 'administrativeArea1', 'regional', 'administrativeArea2', 'locality', 'subLocality1', 'subLocality2', 'special')")
        return value

    @field_validator('roles')
    def roles_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['headOfState', 'headOfGovernment', 'deputyHeadOfGovernment', 'governmentOfficer', 'executiveCouncil', 'legislatorUpperBody', 'legislatorLowerBody', 'highestCourtJudge', 'judge', 'schoolBoard', 'specialPurposeOfficer', 'otherRole']):
                raise ValueError("each list item must be one of ('headOfState', 'headOfGovernment', 'deputyHeadOfGovernment', 'governmentOfficer', 'executiveCouncil', 'legislatorUpperBody', 'legislatorLowerBody', 'highestCourtJudge', 'judge', 'schoolBoard', 'specialPurposeOfficer', 'otherRole')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Office from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sources (list)
        _items = []
        if self.sources:
            for _item_sources in self.sources:
                if _item_sources:
                    _items.append(_item_sources.to_dict())
            _dict['sources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Office from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "divisionId": obj.get("divisionId"),
            "levels": obj.get("levels"),
            "name": obj.get("name"),
            "officialIndices": obj.get("officialIndices"),
            "roles": obj.get("roles"),
            "sources": [Source.from_dict(_item) for _item in obj["sources"]] if obj.get("sources") is not None else None
        })
        return _obj



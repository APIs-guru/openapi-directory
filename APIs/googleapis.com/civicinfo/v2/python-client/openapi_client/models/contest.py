# coding: utf-8

"""
    Google Civic Information API

    Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.candidate import Candidate
from openapi_client.models.electoral_district import ElectoralDistrict
from openapi_client.models.source import Source
from typing import Optional, Set
from typing_extensions import Self

class Contest(BaseModel):
    """
    Information about a contest that appears on a voter's ballot.
    """ # noqa: E501
    ballot_placement: Optional[StrictStr] = Field(default=None, description="A number specifying the position of this contest on the voter's ballot.", alias="ballotPlacement")
    ballot_title: Optional[StrictStr] = Field(default=None, description="The official title on the ballot for this contest, only where available.", alias="ballotTitle")
    candidates: Optional[List[Candidate]] = Field(default=None, description="The candidate choices for this contest.")
    district: Optional[ElectoralDistrict] = None
    electorate_specifications: Optional[StrictStr] = Field(default=None, description="A description of any additional eligibility requirements for voting in this contest.", alias="electorateSpecifications")
    level: Optional[List[StrictStr]] = Field(default=None, description="The levels of government of the office for this contest. There may be more than one in cases where a jurisdiction effectively acts at two different levels of government; for example, the mayor of the District of Columbia acts at \"locality\" level, but also effectively at both \"administrative-area-2\" and \"administrative-area-1\".")
    number_elected: Optional[StrictStr] = Field(default=None, description="The number of candidates that will be elected to office in this contest.", alias="numberElected")
    number_voting_for: Optional[StrictStr] = Field(default=None, description="The number of candidates that a voter may vote for in this contest.", alias="numberVotingFor")
    office: Optional[StrictStr] = Field(default=None, description="The name of the office for this contest.")
    primary_parties: Optional[List[StrictStr]] = Field(default=None, description="If this is a partisan election, the name of the party/parties it is for.", alias="primaryParties")
    referendum_ballot_responses: Optional[List[StrictStr]] = Field(default=None, description="The set of ballot responses for the referendum. A ballot response represents a line on the ballot. Common examples might include \"yes\" or \"no\" for referenda. This field is only populated for contests of type 'Referendum'.", alias="referendumBallotResponses")
    referendum_brief: Optional[StrictStr] = Field(default=None, description="Specifies a short summary of the referendum that is typically on the ballot below the title but above the text. This field is only populated for contests of type 'Referendum'.", alias="referendumBrief")
    referendum_con_statement: Optional[StrictStr] = Field(default=None, description="A statement in opposition to the referendum. It does not necessarily appear on the ballot. This field is only populated for contests of type 'Referendum'.", alias="referendumConStatement")
    referendum_effect_of_abstain: Optional[StrictStr] = Field(default=None, description="Specifies what effect abstaining (not voting) on the proposition will have (i.e. whether abstaining is considered a vote against it). This field is only populated for contests of type 'Referendum'.", alias="referendumEffectOfAbstain")
    referendum_passage_threshold: Optional[StrictStr] = Field(default=None, description="The threshold of votes that the referendum needs in order to pass, e.g. \"two-thirds\". This field is only populated for contests of type 'Referendum'.", alias="referendumPassageThreshold")
    referendum_pro_statement: Optional[StrictStr] = Field(default=None, description="A statement in favor of the referendum. It does not necessarily appear on the ballot. This field is only populated for contests of type 'Referendum'.", alias="referendumProStatement")
    referendum_subtitle: Optional[StrictStr] = Field(default=None, description="A brief description of the referendum. This field is only populated for contests of type 'Referendum'.", alias="referendumSubtitle")
    referendum_text: Optional[StrictStr] = Field(default=None, description="The full text of the referendum. This field is only populated for contests of type 'Referendum'.", alias="referendumText")
    referendum_title: Optional[StrictStr] = Field(default=None, description="The title of the referendum (e.g. 'Proposition 42'). This field is only populated for contests of type 'Referendum'.", alias="referendumTitle")
    referendum_url: Optional[StrictStr] = Field(default=None, description="A link to the referendum. This field is only populated for contests of type 'Referendum'.", alias="referendumUrl")
    roles: Optional[List[StrictStr]] = Field(default=None, description="The roles which this office fulfills.")
    sources: Optional[List[Source]] = Field(default=None, description="A list of sources for this contest. If multiple sources are listed, the data has been aggregated from those sources.")
    special: Optional[StrictStr] = Field(default=None, description="\"Yes\" or \"No\" depending on whether this a contest being held outside the normal election cycle.")
    type: Optional[StrictStr] = Field(default=None, description="The type of contest. Usually this will be 'General', 'Primary', or 'Run-off' for contests with candidates. For referenda this will be 'Referendum'. For Retention contests this will typically be 'Retention'.")
    __properties: ClassVar[List[str]] = ["ballotPlacement", "ballotTitle", "candidates", "district", "electorateSpecifications", "level", "numberElected", "numberVotingFor", "office", "primaryParties", "referendumBallotResponses", "referendumBrief", "referendumConStatement", "referendumEffectOfAbstain", "referendumPassageThreshold", "referendumProStatement", "referendumSubtitle", "referendumText", "referendumTitle", "referendumUrl", "roles", "sources", "special", "type"]

    @field_validator('level')
    def level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['international', 'country', 'administrativeArea1', 'regional', 'administrativeArea2', 'locality', 'subLocality1', 'subLocality2', 'special']):
                raise ValueError("each list item must be one of ('international', 'country', 'administrativeArea1', 'regional', 'administrativeArea2', 'locality', 'subLocality1', 'subLocality2', 'special')")
        return value

    @field_validator('roles')
    def roles_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['headOfState', 'headOfGovernment', 'deputyHeadOfGovernment', 'governmentOfficer', 'executiveCouncil', 'legislatorUpperBody', 'legislatorLowerBody', 'highestCourtJudge', 'judge', 'schoolBoard', 'specialPurposeOfficer', 'otherRole']):
                raise ValueError("each list item must be one of ('headOfState', 'headOfGovernment', 'deputyHeadOfGovernment', 'governmentOfficer', 'executiveCouncil', 'legislatorUpperBody', 'legislatorLowerBody', 'highestCourtJudge', 'judge', 'schoolBoard', 'specialPurposeOfficer', 'otherRole')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Contest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in candidates (list)
        _items = []
        if self.candidates:
            for _item_candidates in self.candidates:
                if _item_candidates:
                    _items.append(_item_candidates.to_dict())
            _dict['candidates'] = _items
        # override the default output from pydantic by calling `to_dict()` of district
        if self.district:
            _dict['district'] = self.district.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sources (list)
        _items = []
        if self.sources:
            for _item_sources in self.sources:
                if _item_sources:
                    _items.append(_item_sources.to_dict())
            _dict['sources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Contest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ballotPlacement": obj.get("ballotPlacement"),
            "ballotTitle": obj.get("ballotTitle"),
            "candidates": [Candidate.from_dict(_item) for _item in obj["candidates"]] if obj.get("candidates") is not None else None,
            "district": ElectoralDistrict.from_dict(obj["district"]) if obj.get("district") is not None else None,
            "electorateSpecifications": obj.get("electorateSpecifications"),
            "level": obj.get("level"),
            "numberElected": obj.get("numberElected"),
            "numberVotingFor": obj.get("numberVotingFor"),
            "office": obj.get("office"),
            "primaryParties": obj.get("primaryParties"),
            "referendumBallotResponses": obj.get("referendumBallotResponses"),
            "referendumBrief": obj.get("referendumBrief"),
            "referendumConStatement": obj.get("referendumConStatement"),
            "referendumEffectOfAbstain": obj.get("referendumEffectOfAbstain"),
            "referendumPassageThreshold": obj.get("referendumPassageThreshold"),
            "referendumProStatement": obj.get("referendumProStatement"),
            "referendumSubtitle": obj.get("referendumSubtitle"),
            "referendumText": obj.get("referendumText"),
            "referendumTitle": obj.get("referendumTitle"),
            "referendumUrl": obj.get("referendumUrl"),
            "roles": obj.get("roles"),
            "sources": [Source.from_dict(_item) for _item in obj["sources"]] if obj.get("sources") is not None else None,
            "special": obj.get("special"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Google Civic Information API

    Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.administration_region import AdministrationRegion
from openapi_client.models.contest import Contest
from openapi_client.models.election import Election
from openapi_client.models.polling_location import PollingLocation
from openapi_client.models.precinct import Precinct
from openapi_client.models.simple_address_type import SimpleAddressType
from typing import Optional, Set
from typing_extensions import Self

class VoterInfoResponse(BaseModel):
    """
    The result of a voter info lookup query.
    """ # noqa: E501
    contests: Optional[List[Contest]] = Field(default=None, description="Contests that will appear on the voter's ballot.")
    drop_off_locations: Optional[List[PollingLocation]] = Field(default=None, description="Locations where a voter is eligible to drop off a completed ballot. The voter must have received and completed a ballot prior to arriving at the location. The location may not have ballots available on the premises. These locations could be open on or before election day as indicated in the pollingHours field.", alias="dropOffLocations")
    early_vote_sites: Optional[List[PollingLocation]] = Field(default=None, description="Locations where the voter is eligible to vote early, prior to election day.", alias="earlyVoteSites")
    election: Optional[Election] = None
    kind: Optional[StrictStr] = Field(default='civicinfo#voterInfoResponse', description="Identifies what kind of resource this is. Value: the fixed string \"civicinfo#voterInfoResponse\".")
    mail_only: Optional[StrictBool] = Field(default=None, description="Specifies whether voters in the precinct vote only by mailing their ballots (with the possible option of dropping off their ballots as well).", alias="mailOnly")
    normalized_input: Optional[SimpleAddressType] = Field(default=None, alias="normalizedInput")
    other_elections: Optional[List[Election]] = Field(default=None, description="When there are multiple elections for a voter address, the otherElections field is populated in the API response and there are two possibilities: 1. If the earliest election is not the intended election, specify the election ID of the desired election in a second API request using the electionId field. 2. If these elections occur on the same day, the API doesn?t return any polling location, contest, or election official information to ensure that an additional query is made. For user-facing applications, we recommend displaying these elections to the user to disambiguate. A second API request using the electionId field should be made for the election that is relevant to the user.", alias="otherElections")
    polling_locations: Optional[List[PollingLocation]] = Field(default=None, description="Locations where the voter is eligible to vote on election day.", alias="pollingLocations")
    precinct_id: Optional[StrictStr] = Field(default=None, alias="precinctId")
    precincts: Optional[List[Precinct]] = Field(default=None, description="The precincts that match this voter's address. Will only be returned for project IDs which have been allowlisted as \"partner projects\".")
    state: Optional[List[AdministrationRegion]] = Field(default=None, description="Local Election Information for the state that the voter votes in. For the US, there will only be one element in this array.")
    __properties: ClassVar[List[str]] = ["contests", "dropOffLocations", "earlyVoteSites", "election", "kind", "mailOnly", "normalizedInput", "otherElections", "pollingLocations", "precinctId", "precincts", "state"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VoterInfoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contests (list)
        _items = []
        if self.contests:
            for _item_contests in self.contests:
                if _item_contests:
                    _items.append(_item_contests.to_dict())
            _dict['contests'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in drop_off_locations (list)
        _items = []
        if self.drop_off_locations:
            for _item_drop_off_locations in self.drop_off_locations:
                if _item_drop_off_locations:
                    _items.append(_item_drop_off_locations.to_dict())
            _dict['dropOffLocations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in early_vote_sites (list)
        _items = []
        if self.early_vote_sites:
            for _item_early_vote_sites in self.early_vote_sites:
                if _item_early_vote_sites:
                    _items.append(_item_early_vote_sites.to_dict())
            _dict['earlyVoteSites'] = _items
        # override the default output from pydantic by calling `to_dict()` of election
        if self.election:
            _dict['election'] = self.election.to_dict()
        # override the default output from pydantic by calling `to_dict()` of normalized_input
        if self.normalized_input:
            _dict['normalizedInput'] = self.normalized_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in other_elections (list)
        _items = []
        if self.other_elections:
            for _item_other_elections in self.other_elections:
                if _item_other_elections:
                    _items.append(_item_other_elections.to_dict())
            _dict['otherElections'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in polling_locations (list)
        _items = []
        if self.polling_locations:
            for _item_polling_locations in self.polling_locations:
                if _item_polling_locations:
                    _items.append(_item_polling_locations.to_dict())
            _dict['pollingLocations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in precincts (list)
        _items = []
        if self.precincts:
            for _item_precincts in self.precincts:
                if _item_precincts:
                    _items.append(_item_precincts.to_dict())
            _dict['precincts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in state (list)
        _items = []
        if self.state:
            for _item_state in self.state:
                if _item_state:
                    _items.append(_item_state.to_dict())
            _dict['state'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VoterInfoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contests": [Contest.from_dict(_item) for _item in obj["contests"]] if obj.get("contests") is not None else None,
            "dropOffLocations": [PollingLocation.from_dict(_item) for _item in obj["dropOffLocations"]] if obj.get("dropOffLocations") is not None else None,
            "earlyVoteSites": [PollingLocation.from_dict(_item) for _item in obj["earlyVoteSites"]] if obj.get("earlyVoteSites") is not None else None,
            "election": Election.from_dict(obj["election"]) if obj.get("election") is not None else None,
            "kind": obj.get("kind") if obj.get("kind") is not None else 'civicinfo#voterInfoResponse',
            "mailOnly": obj.get("mailOnly"),
            "normalizedInput": SimpleAddressType.from_dict(obj["normalizedInput"]) if obj.get("normalizedInput") is not None else None,
            "otherElections": [Election.from_dict(_item) for _item in obj["otherElections"]] if obj.get("otherElections") is not None else None,
            "pollingLocations": [PollingLocation.from_dict(_item) for _item in obj["pollingLocations"]] if obj.get("pollingLocations") is not None else None,
            "precinctId": obj.get("precinctId"),
            "precincts": [Precinct.from_dict(_item) for _item in obj["precincts"]] if obj.get("precincts") is not None else None,
            "state": [AdministrationRegion.from_dict(_item) for _item in obj["state"]] if obj.get("state") is not None else None
        })
        return _obj



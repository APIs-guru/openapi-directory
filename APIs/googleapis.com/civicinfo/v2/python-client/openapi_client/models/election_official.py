# coding: utf-8

"""
    Google Civic Information API

    Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ElectionOfficial(BaseModel):
    """
    Information about individual election officials.
    """ # noqa: E501
    email_address: Optional[StrictStr] = Field(default=None, description="The email address of the election official.", alias="emailAddress")
    fax_number: Optional[StrictStr] = Field(default=None, description="The fax number of the election official.", alias="faxNumber")
    name: Optional[StrictStr] = Field(default=None, description="The full name of the election official.")
    office_phone_number: Optional[StrictStr] = Field(default=None, description="The office phone number of the election official.", alias="officePhoneNumber")
    title: Optional[StrictStr] = Field(default=None, description="The title of the election official.")
    __properties: ClassVar[List[str]] = ["emailAddress", "faxNumber", "name", "officePhoneNumber", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ElectionOfficial from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ElectionOfficial from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "emailAddress": obj.get("emailAddress"),
            "faxNumber": obj.get("faxNumber"),
            "name": obj.get("name"),
            "officePhoneNumber": obj.get("officePhoneNumber"),
            "title": obj.get("title")
        })
        return _obj



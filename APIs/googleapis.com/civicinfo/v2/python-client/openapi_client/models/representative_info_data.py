# coding: utf-8

"""
    Google Civic Information API

    Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.geographic_division import GeographicDivision
from openapi_client.models.office import Office
from openapi_client.models.official import Official
from typing import Optional, Set
from typing_extensions import Self

class RepresentativeInfoData(BaseModel):
    """
    RepresentativeInfoData
    """ # noqa: E501
    divisions: Optional[Dict[str, GeographicDivision]] = Field(default=None, description="A map of political geographic divisions that contain the requested address, keyed by the unique Open Civic Data identifier for this division.")
    offices: Optional[List[Office]] = Field(default=None, description="Elected offices referenced by the divisions listed above. Will only be present if includeOffices was true in the request.")
    officials: Optional[List[Official]] = Field(default=None, description="Officials holding the offices listed above. Will only be present if includeOffices was true in the request.")
    __properties: ClassVar[List[str]] = ["divisions", "offices", "officials"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RepresentativeInfoData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in divisions (dict)
        _field_dict = {}
        if self.divisions:
            for _key_divisions in self.divisions:
                if self.divisions[_key_divisions]:
                    _field_dict[_key_divisions] = self.divisions[_key_divisions].to_dict()
            _dict['divisions'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in offices (list)
        _items = []
        if self.offices:
            for _item_offices in self.offices:
                if _item_offices:
                    _items.append(_item_offices.to_dict())
            _dict['offices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in officials (list)
        _items = []
        if self.officials:
            for _item_officials in self.officials:
                if _item_officials:
                    _items.append(_item_officials.to_dict())
            _dict['officials'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RepresentativeInfoData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "divisions": dict(
                (_k, GeographicDivision.from_dict(_v))
                for _k, _v in obj["divisions"].items()
            )
            if obj.get("divisions") is not None
            else None,
            "offices": [Office.from_dict(_item) for _item in obj["offices"]] if obj.get("offices") is not None else None,
            "officials": [Official.from_dict(_item) for _item in obj["officials"]] if obj.get("officials") is not None else None
        })
        return _obj



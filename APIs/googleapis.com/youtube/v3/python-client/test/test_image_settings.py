# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.image_settings import ImageSettings

class TestImageSettings(unittest.TestCase):
    """ImageSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ImageSettings:
        """Test ImageSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ImageSettings`
        """
        model = ImageSettings()
        if include_optional:
            return ImageSettings(
                background_image_url = openapi_client.models.localized_property.LocalizedProperty(
                    default_language = openapi_client.models.language_tag.LanguageTag(
                        value = '', ), 
                    localized = [
                        openapi_client.models.localized_string.LocalizedString(
                            language = '', 
                            value = '', )
                        ], ),
                banner_external_url = '',
                banner_image_url = '',
                banner_mobile_extra_hd_image_url = '',
                banner_mobile_hd_image_url = '',
                banner_mobile_image_url = '',
                banner_mobile_low_image_url = '',
                banner_mobile_medium_hd_image_url = '',
                banner_tablet_extra_hd_image_url = '',
                banner_tablet_hd_image_url = '',
                banner_tablet_image_url = '',
                banner_tablet_low_image_url = '',
                banner_tv_high_image_url = '',
                banner_tv_image_url = '',
                banner_tv_low_image_url = '',
                banner_tv_medium_image_url = '',
                large_branded_banner_image_imap_script = openapi_client.models.localized_property.LocalizedProperty(
                    default_language = openapi_client.models.language_tag.LanguageTag(
                        value = '', ), 
                    localized = [
                        openapi_client.models.localized_string.LocalizedString(
                            language = '', 
                            value = '', )
                        ], ),
                large_branded_banner_image_url = openapi_client.models.localized_property.LocalizedProperty(
                    default_language = openapi_client.models.language_tag.LanguageTag(
                        value = '', ), 
                    localized = [
                        openapi_client.models.localized_string.LocalizedString(
                            language = '', 
                            value = '', )
                        ], ),
                small_branded_banner_image_imap_script = openapi_client.models.localized_property.LocalizedProperty(
                    default_language = openapi_client.models.language_tag.LanguageTag(
                        value = '', ), 
                    localized = [
                        openapi_client.models.localized_string.LocalizedString(
                            language = '', 
                            value = '', )
                        ], ),
                small_branded_banner_image_url = openapi_client.models.localized_property.LocalizedProperty(
                    default_language = openapi_client.models.language_tag.LanguageTag(
                        value = '', ), 
                    localized = [
                        openapi_client.models.localized_string.LocalizedString(
                            language = '', 
                            value = '', )
                        ], ),
                tracking_image_url = '',
                watch_icon_image_url = ''
            )
        else:
            return ImageSettings(
        )
        """

    def testImageSettings(self):
        """Test ImageSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.activity_list_response import ActivityListResponse

class TestActivityListResponse(unittest.TestCase):
    """ActivityListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ActivityListResponse:
        """Test ActivityListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ActivityListResponse`
        """
        model = ActivityListResponse()
        if include_optional:
            return ActivityListResponse(
                etag = '',
                event_id = '',
                items = [
                    openapi_client.models.activity.Activity(
                        content_details = openapi_client.models.activity_content_details.ActivityContentDetails(
                            bulletin = openapi_client.models.activity_content_details_bulletin.ActivityContentDetailsBulletin(
                                resource_id = openapi_client.models.resource_id.ResourceId(
                                    channel_id = '', 
                                    kind = '', 
                                    playlist_id = '', 
                                    video_id = '', ), ), 
                            channel_item = openapi_client.models.activity_content_details_channel_item.ActivityContentDetailsChannelItem(), 
                            comment = openapi_client.models.activity_content_details_comment.ActivityContentDetailsComment(), 
                            favorite = openapi_client.models.activity_content_details_favorite.ActivityContentDetailsFavorite(), 
                            like = openapi_client.models.activity_content_details_like.ActivityContentDetailsLike(), 
                            playlist_item = openapi_client.models.activity_content_details_playlist_item.ActivityContentDetailsPlaylistItem(
                                playlist_id = '', 
                                playlist_item_id = '', ), 
                            promoted_item = openapi_client.models.activity_content_details_promoted_item.ActivityContentDetailsPromotedItem(
                                ad_tag = '', 
                                click_tracking_url = '', 
                                creative_view_url = '', 
                                cta_type = 'ctaTypeUnspecified', 
                                custom_cta_button_text = '', 
                                description_text = '', 
                                destination_url = '', 
                                forecasting_url = [
                                    ''
                                    ], 
                                impression_url = [
                                    ''
                                    ], 
                                video_id = '', ), 
                            recommendation = openapi_client.models.activity_content_details_recommendation.ActivityContentDetailsRecommendation(
                                reason = 'reasonUnspecified', 
                                seed_resource_id = openapi_client.models.resource_id.ResourceId(
                                    channel_id = '', 
                                    kind = '', 
                                    playlist_id = '', 
                                    video_id = '', ), ), 
                            social = openapi_client.models.activity_content_details_social.ActivityContentDetailsSocial(
                                author = '', 
                                image_url = '', 
                                reference_url = '', 
                                type = 'unspecified', ), 
                            subscription = openapi_client.models.activity_content_details_subscription.ActivityContentDetailsSubscription(), 
                            upload = openapi_client.models.activity_content_details_upload.ActivityContentDetailsUpload(
                                video_id = '', ), ), 
                        etag = '', 
                        id = '', 
                        kind = 'youtube#activity', 
                        snippet = openapi_client.models.activity_snippet.ActivitySnippet(
                            channel_id = '', 
                            channel_title = '', 
                            description = '', 
                            group_id = '', 
                            published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            thumbnails = openapi_client.models.thumbnail_details.ThumbnailDetails(
                                high = openapi_client.models.thumbnail.Thumbnail(
                                    height = 56, 
                                    url = '', 
                                    width = 56, ), 
                                maxres = openapi_client.models.thumbnail.Thumbnail(
                                    height = 56, 
                                    url = '', 
                                    width = 56, ), 
                                medium = , 
                                standard = , ), 
                            title = '', 
                            type = 'typeUnspecified', ), )
                    ],
                kind = 'youtube#activityListResponse',
                next_page_token = '',
                page_info = openapi_client.models.page_info.PageInfo(
                    results_per_page = 56, 
                    total_results = 56, ),
                prev_page_token = '',
                token_pagination = None,
                visitor_id = ''
            )
        else:
            return ActivityListResponse(
        )
        """

    def testActivityListResponse(self):
        """Test ActivityListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

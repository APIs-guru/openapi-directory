# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.live_chat_message_list_response import LiveChatMessageListResponse

class TestLiveChatMessageListResponse(unittest.TestCase):
    """LiveChatMessageListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LiveChatMessageListResponse:
        """Test LiveChatMessageListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LiveChatMessageListResponse`
        """
        model = LiveChatMessageListResponse()
        if include_optional:
            return LiveChatMessageListResponse(
                etag = '',
                event_id = '',
                items = [
                    openapi_client.models.live_chat_message.LiveChatMessage(
                        author_details = openapi_client.models.live_chat_message_author_details.LiveChatMessageAuthorDetails(
                            channel_id = '', 
                            channel_url = '', 
                            display_name = '', 
                            is_chat_moderator = True, 
                            is_chat_owner = True, 
                            is_chat_sponsor = True, 
                            is_verified = True, 
                            profile_image_url = '', ), 
                        etag = '', 
                        id = '', 
                        kind = 'youtube#liveChatMessage', 
                        snippet = openapi_client.models.live_chat_message_snippet.LiveChatMessageSnippet(
                            author_channel_id = '', 
                            display_message = '', 
                            fan_funding_event_details = openapi_client.models.live_chat_fan_funding_event_details.LiveChatFanFundingEventDetails(
                                amount_display_string = '', 
                                amount_micros = '', 
                                currency = '', 
                                user_comment = '', ), 
                            gift_membership_received_details = openapi_client.models.live_chat_gift_membership_received_details.LiveChatGiftMembershipReceivedDetails(
                                associated_membership_gifting_message_id = '', 
                                gifter_channel_id = '', 
                                member_level_name = '', ), 
                            has_display_content = True, 
                            live_chat_id = '', 
                            member_milestone_chat_details = openapi_client.models.live_chat_member_milestone_chat_details.LiveChatMemberMilestoneChatDetails(
                                member_level_name = '', 
                                member_month = 56, 
                                user_comment = '', ), 
                            membership_gifting_details = openapi_client.models.live_chat_membership_gifting_details.LiveChatMembershipGiftingDetails(
                                gift_memberships_count = 56, 
                                gift_memberships_level_name = '', ), 
                            message_deleted_details = openapi_client.models.live_chat_message_deleted_details.LiveChatMessageDeletedDetails(
                                deleted_message_id = '', ), 
                            message_retracted_details = openapi_client.models.live_chat_message_retracted_details.LiveChatMessageRetractedDetails(
                                retracted_message_id = '', ), 
                            new_sponsor_details = openapi_client.models.live_chat_new_sponsor_details.LiveChatNewSponsorDetails(
                                is_upgrade = True, 
                                member_level_name = '', ), 
                            poll_details = openapi_client.models.live_chat_poll_details.LiveChatPollDetails(
                                metadata = openapi_client.models.live_chat_poll_details_poll_metadata.LiveChatPollDetailsPollMetadata(
                                    options = [
                                        openapi_client.models.live_chat_poll_details_poll_metadata_poll_option.LiveChatPollDetailsPollMetadataPollOption(
                                            option_text = '', 
                                            tally = '', )
                                        ], 
                                    question_text = '', ), 
                                status = 'unknown', ), 
                            published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            super_chat_details = openapi_client.models.live_chat_super_chat_details.LiveChatSuperChatDetails(
                                amount_display_string = '', 
                                amount_micros = '', 
                                currency = '', 
                                tier = 56, 
                                user_comment = '', ), 
                            super_sticker_details = openapi_client.models.live_chat_super_sticker_details.LiveChatSuperStickerDetails(
                                amount_display_string = '', 
                                amount_micros = '', 
                                currency = '', 
                                super_sticker_metadata = openapi_client.models.super_sticker_metadata.SuperStickerMetadata(
                                    alt_text = '', 
                                    alt_text_language = '', 
                                    sticker_id = '', ), 
                                tier = 56, ), 
                            text_message_details = openapi_client.models.live_chat_text_message_details.LiveChatTextMessageDetails(
                                message_text = '', ), 
                            type = 'invalidType', 
                            user_banned_details = openapi_client.models.live_chat_user_banned_message_details.LiveChatUserBannedMessageDetails(
                                ban_duration_seconds = '', 
                                ban_type = 'permanent', 
                                banned_user_details = openapi_client.models.channel_profile_details.ChannelProfileDetails(
                                    channel_id = '', 
                                    channel_url = '', 
                                    display_name = '', 
                                    profile_image_url = '', ), ), ), )
                    ],
                kind = 'youtube#liveChatMessageListResponse',
                next_page_token = '',
                offline_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                page_info = openapi_client.models.page_info.PageInfo(
                    results_per_page = 56, 
                    total_results = 56, ),
                polling_interval_millis = 56,
                token_pagination = None,
                visitor_id = ''
            )
        else:
            return LiveChatMessageListResponse(
        )
        """

    def testLiveChatMessageListResponse(self):
        """Test LiveChatMessageListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

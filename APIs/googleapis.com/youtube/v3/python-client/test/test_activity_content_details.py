# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.activity_content_details import ActivityContentDetails

class TestActivityContentDetails(unittest.TestCase):
    """ActivityContentDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ActivityContentDetails:
        """Test ActivityContentDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ActivityContentDetails`
        """
        model = ActivityContentDetails()
        if include_optional:
            return ActivityContentDetails(
                bulletin = openapi_client.models.activity_content_details_bulletin.ActivityContentDetailsBulletin(
                    resource_id = openapi_client.models.resource_id.ResourceId(
                        channel_id = '', 
                        kind = '', 
                        playlist_id = '', 
                        video_id = '', ), ),
                channel_item = openapi_client.models.activity_content_details_channel_item.ActivityContentDetailsChannelItem(
                    resource_id = openapi_client.models.resource_id.ResourceId(
                        channel_id = '', 
                        kind = '', 
                        playlist_id = '', 
                        video_id = '', ), ),
                comment = openapi_client.models.activity_content_details_comment.ActivityContentDetailsComment(
                    resource_id = openapi_client.models.resource_id.ResourceId(
                        channel_id = '', 
                        kind = '', 
                        playlist_id = '', 
                        video_id = '', ), ),
                favorite = openapi_client.models.activity_content_details_favorite.ActivityContentDetailsFavorite(
                    resource_id = openapi_client.models.resource_id.ResourceId(
                        channel_id = '', 
                        kind = '', 
                        playlist_id = '', 
                        video_id = '', ), ),
                like = openapi_client.models.activity_content_details_like.ActivityContentDetailsLike(
                    resource_id = openapi_client.models.resource_id.ResourceId(
                        channel_id = '', 
                        kind = '', 
                        playlist_id = '', 
                        video_id = '', ), ),
                playlist_item = openapi_client.models.activity_content_details_playlist_item.ActivityContentDetailsPlaylistItem(
                    playlist_id = '', 
                    playlist_item_id = '', 
                    resource_id = openapi_client.models.resource_id.ResourceId(
                        channel_id = '', 
                        kind = '', 
                        playlist_id = '', 
                        video_id = '', ), ),
                promoted_item = openapi_client.models.activity_content_details_promoted_item.ActivityContentDetailsPromotedItem(
                    ad_tag = '', 
                    click_tracking_url = '', 
                    creative_view_url = '', 
                    cta_type = 'ctaTypeUnspecified', 
                    custom_cta_button_text = '', 
                    description_text = '', 
                    destination_url = '', 
                    forecasting_url = [
                        ''
                        ], 
                    impression_url = [
                        ''
                        ], 
                    video_id = '', ),
                recommendation = openapi_client.models.activity_content_details_recommendation.ActivityContentDetailsRecommendation(
                    reason = 'reasonUnspecified', 
                    resource_id = openapi_client.models.resource_id.ResourceId(
                        channel_id = '', 
                        kind = '', 
                        playlist_id = '', 
                        video_id = '', ), 
                    seed_resource_id = openapi_client.models.resource_id.ResourceId(
                        channel_id = '', 
                        kind = '', 
                        playlist_id = '', 
                        video_id = '', ), ),
                social = openapi_client.models.activity_content_details_social.ActivityContentDetailsSocial(
                    author = '', 
                    image_url = '', 
                    reference_url = '', 
                    resource_id = openapi_client.models.resource_id.ResourceId(
                        channel_id = '', 
                        kind = '', 
                        playlist_id = '', 
                        video_id = '', ), 
                    type = 'unspecified', ),
                subscription = openapi_client.models.activity_content_details_subscription.ActivityContentDetailsSubscription(
                    resource_id = openapi_client.models.resource_id.ResourceId(
                        channel_id = '', 
                        kind = '', 
                        playlist_id = '', 
                        video_id = '', ), ),
                upload = openapi_client.models.activity_content_details_upload.ActivityContentDetailsUpload(
                    video_id = '', )
            )
        else:
            return ActivityContentDetails(
        )
        """

    def testActivityContentDetails(self):
        """Test ActivityContentDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

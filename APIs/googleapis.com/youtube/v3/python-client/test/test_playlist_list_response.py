# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.playlist_list_response import PlaylistListResponse

class TestPlaylistListResponse(unittest.TestCase):
    """PlaylistListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PlaylistListResponse:
        """Test PlaylistListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PlaylistListResponse`
        """
        model = PlaylistListResponse()
        if include_optional:
            return PlaylistListResponse(
                etag = '',
                event_id = '',
                items = [
                    openapi_client.models.playlist.Playlist(
                        content_details = openapi_client.models.playlist_content_details.PlaylistContentDetails(
                            item_count = 56, ), 
                        etag = '', 
                        id = '', 
                        kind = 'youtube#playlist', 
                        localizations = {
                            'key' : openapi_client.models.playlist_localization.PlaylistLocalization(
                                description = '', 
                                title = '', )
                            }, 
                        player = openapi_client.models.playlist_player.PlaylistPlayer(
                            embed_html = '', ), 
                        snippet = openapi_client.models.playlist_snippet.PlaylistSnippet(
                            channel_id = '', 
                            channel_title = '', 
                            default_language = '', 
                            description = '', 
                            localized = openapi_client.models.playlist_localization.PlaylistLocalization(
                                description = '', 
                                title = '', ), 
                            published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            tags = [
                                ''
                                ], 
                            thumbnail_video_id = '', 
                            thumbnails = openapi_client.models.thumbnail_details.ThumbnailDetails(
                                high = openapi_client.models.thumbnail.Thumbnail(
                                    height = 56, 
                                    url = '', 
                                    width = 56, ), 
                                maxres = openapi_client.models.thumbnail.Thumbnail(
                                    height = 56, 
                                    url = '', 
                                    width = 56, ), 
                                medium = , 
                                standard = , ), 
                            title = '', ), 
                        status = openapi_client.models.playlist_status.PlaylistStatus(
                            privacy_status = 'public', ), )
                    ],
                kind = 'youtube#playlistListResponse',
                next_page_token = '',
                page_info = openapi_client.models.page_info.PageInfo(
                    results_per_page = 56, 
                    total_results = 56, ),
                prev_page_token = '',
                token_pagination = None,
                visitor_id = ''
            )
        else:
            return PlaylistListResponse(
        )
        """

    def testPlaylistListResponse(self):
        """Test PlaylistListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

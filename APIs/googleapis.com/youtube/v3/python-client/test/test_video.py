# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.video import Video

class TestVideo(unittest.TestCase):
    """Video unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Video:
        """Test Video
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Video`
        """
        model = Video()
        if include_optional:
            return Video(
                age_gating = openapi_client.models.video_age_gating.VideoAgeGating(
                    alcohol_content = True, 
                    restricted = True, 
                    video_game_rating = 'anyone', ),
                content_details = openapi_client.models.video_content_details.VideoContentDetails(
                    caption = 'true', 
                    content_rating = openapi_client.models.content_rating.ContentRating(
                        acb_rating = 'acbUnspecified', 
                        agcom_rating = 'agcomUnspecified', 
                        anatel_rating = 'anatelUnspecified', 
                        bbfc_rating = 'bbfcUnspecified', 
                        bfvc_rating = 'bfvcUnspecified', 
                        bmukk_rating = 'bmukkUnspecified', 
                        catv_rating = 'catvUnspecified', 
                        catvfr_rating = 'catvfrUnspecified', 
                        cbfc_rating = 'cbfcUnspecified', 
                        ccc_rating = 'cccUnspecified', 
                        cce_rating = 'cceUnspecified', 
                        chfilm_rating = 'chfilmUnspecified', 
                        chvrs_rating = 'chvrsUnspecified', 
                        cicf_rating = 'cicfUnspecified', 
                        cna_rating = 'cnaUnspecified', 
                        cnc_rating = 'cncUnspecified', 
                        csa_rating = 'csaUnspecified', 
                        cscf_rating = 'cscfUnspecified', 
                        czfilm_rating = 'czfilmUnspecified', 
                        djctq_rating = 'djctqUnspecified', 
                        djctq_rating_reasons = [
                            'djctqRatingReasonUnspecified'
                            ], 
                        ecbmct_rating = 'ecbmctUnspecified', 
                        eefilm_rating = 'eefilmUnspecified', 
                        egfilm_rating = 'egfilmUnspecified', 
                        eirin_rating = 'eirinUnspecified', 
                        fcbm_rating = 'fcbmUnspecified', 
                        fco_rating = 'fcoUnspecified', 
                        fmoc_rating = 'fmocUnspecified', 
                        fpb_rating = 'fpbUnspecified', 
                        fpb_rating_reasons = [
                            'fpbRatingReasonUnspecified'
                            ], 
                        fsk_rating = 'fskUnspecified', 
                        grfilm_rating = 'grfilmUnspecified', 
                        icaa_rating = 'icaaUnspecified', 
                        ifco_rating = 'ifcoUnspecified', 
                        ilfilm_rating = 'ilfilmUnspecified', 
                        incaa_rating = 'incaaUnspecified', 
                        kfcb_rating = 'kfcbUnspecified', 
                        kijkwijzer_rating = 'kijkwijzerUnspecified', 
                        kmrb_rating = 'kmrbUnspecified', 
                        lsf_rating = 'lsfUnspecified', 
                        mccaa_rating = 'mccaaUnspecified', 
                        mccyp_rating = 'mccypUnspecified', 
                        mcst_rating = 'mcstUnspecified', 
                        mda_rating = 'mdaUnspecified', 
                        medietilsynet_rating = 'medietilsynetUnspecified', 
                        meku_rating = 'mekuUnspecified', 
                        mena_mpaa_rating = 'menaMpaaUnspecified', 
                        mibac_rating = 'mibacUnspecified', 
                        moc_rating = 'mocUnspecified', 
                        moctw_rating = 'moctwUnspecified', 
                        mpaa_rating = 'mpaaUnspecified', 
                        mpaat_rating = 'mpaatUnspecified', 
                        mtrcb_rating = 'mtrcbUnspecified', 
                        nbc_rating = 'nbcUnspecified', 
                        nbcpl_rating = 'nbcplUnspecified', 
                        nfrc_rating = 'nfrcUnspecified', 
                        nfvcb_rating = 'nfvcbUnspecified', 
                        nkclv_rating = 'nkclvUnspecified', 
                        nmc_rating = 'nmcUnspecified', 
                        oflc_rating = 'oflcUnspecified', 
                        pefilm_rating = 'pefilmUnspecified', 
                        rcnof_rating = 'rcnofUnspecified', 
                        resorteviolencia_rating = 'resorteviolenciaUnspecified', 
                        rtc_rating = 'rtcUnspecified', 
                        rte_rating = 'rteUnspecified', 
                        russia_rating = 'russiaUnspecified', 
                        skfilm_rating = 'skfilmUnspecified', 
                        smais_rating = 'smaisUnspecified', 
                        smsa_rating = 'smsaUnspecified', 
                        tvpg_rating = 'tvpgUnspecified', 
                        yt_rating = 'ytUnspecified', ), 
                    country_restriction = openapi_client.models.access_policy.AccessPolicy(
                        allowed = True, 
                        exception = [
                            ''
                            ], ), 
                    definition = 'sd', 
                    dimension = '', 
                    duration = '', 
                    has_custom_thumbnail = True, 
                    licensed_content = True, 
                    projection = 'rectangular', 
                    region_restriction = openapi_client.models.video_content_details_region_restriction.VideoContentDetailsRegionRestriction(
                        allowed = [
                            ''
                            ], 
                        blocked = [
                            ''
                            ], ), ),
                etag = '',
                file_details = openapi_client.models.video_file_details.VideoFileDetails(
                    audio_streams = [
                        openapi_client.models.video_file_details_audio_stream.VideoFileDetailsAudioStream(
                            bitrate_bps = '', 
                            channel_count = 56, 
                            codec = '', 
                            vendor = '', )
                        ], 
                    bitrate_bps = '', 
                    container = '', 
                    creation_time = '', 
                    duration_ms = '', 
                    file_name = '', 
                    file_size = '', 
                    file_type = 'video', 
                    video_streams = [
                        openapi_client.models.video_file_details_video_stream.VideoFileDetailsVideoStream(
                            aspect_ratio = 1.337, 
                            bitrate_bps = '', 
                            codec = '', 
                            frame_rate_fps = 1.337, 
                            height_pixels = 56, 
                            rotation = 'none', 
                            vendor = '', 
                            width_pixels = 56, )
                        ], ),
                id = '',
                kind = 'youtube#video',
                live_streaming_details = openapi_client.models.video_live_streaming_details.VideoLiveStreamingDetails(
                    active_live_chat_id = '', 
                    actual_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    actual_start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    concurrent_viewers = '', 
                    scheduled_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    scheduled_start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                localizations = {
                    'key' : openapi_client.models.video_localization.VideoLocalization(
                        description = '', 
                        title = '', )
                    },
                monetization_details = openapi_client.models.video_monetization_details.VideoMonetizationDetails(
                    access = openapi_client.models.access_policy.AccessPolicy(
                        allowed = True, 
                        exception = [
                            ''
                            ], ), ),
                player = openapi_client.models.video_player.VideoPlayer(
                    embed_height = '', 
                    embed_html = '', 
                    embed_width = '', ),
                processing_details = openapi_client.models.video_processing_details.VideoProcessingDetails(
                    editor_suggestions_availability = '', 
                    file_details_availability = '', 
                    processing_failure_reason = 'uploadFailed', 
                    processing_issues_availability = '', 
                    processing_progress = openapi_client.models.video_processing_details_processing_progress.VideoProcessingDetailsProcessingProgress(
                        parts_processed = '', 
                        parts_total = '', 
                        time_left_ms = '', ), 
                    processing_status = 'processing', 
                    tag_suggestions_availability = '', 
                    thumbnails_availability = '', ),
                project_details = None,
                recording_details = openapi_client.models.video_recording_details.VideoRecordingDetails(
                    location = openapi_client.models.geo_point.GeoPoint(
                        altitude = 1.337, 
                        latitude = 1.337, 
                        longitude = 1.337, ), 
                    location_description = '', 
                    recording_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                snippet = openapi_client.models.video_snippet.VideoSnippet(
                    category_id = '', 
                    channel_id = '', 
                    channel_title = '', 
                    default_audio_language = '', 
                    default_language = '', 
                    description = '', 
                    live_broadcast_content = 'none', 
                    localized = openapi_client.models.video_localization.VideoLocalization(
                        description = '', 
                        title = '', ), 
                    published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    tags = [
                        ''
                        ], 
                    thumbnails = openapi_client.models.thumbnail_details.ThumbnailDetails(
                        high = openapi_client.models.thumbnail.Thumbnail(
                            height = 56, 
                            url = '', 
                            width = 56, ), 
                        maxres = openapi_client.models.thumbnail.Thumbnail(
                            height = 56, 
                            url = '', 
                            width = 56, ), 
                        medium = , 
                        standard = , ), 
                    title = '', ),
                statistics = openapi_client.models.video_statistics.VideoStatistics(
                    comment_count = '', 
                    dislike_count = '', 
                    favorite_count = '', 
                    like_count = '', 
                    view_count = '', ),
                status = openapi_client.models.video_status.VideoStatus(
                    embeddable = True, 
                    failure_reason = 'conversion', 
                    license = 'youtube', 
                    made_for_kids = True, 
                    privacy_status = 'public', 
                    public_stats_viewable = True, 
                    publish_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    rejection_reason = 'copyright', 
                    self_declared_made_for_kids = True, 
                    upload_status = 'uploaded', ),
                suggestions = openapi_client.models.video_suggestions.VideoSuggestions(
                    editor_suggestions = [
                        'videoAutoLevels'
                        ], 
                    processing_errors = [
                        'audioFile'
                        ], 
                    processing_hints = [
                        'nonStreamableMov'
                        ], 
                    processing_warnings = [
                        'unknownContainer'
                        ], 
                    tag_suggestions = [
                        openapi_client.models.video_suggestions_tag_suggestion.VideoSuggestionsTagSuggestion(
                            category_restricts = [
                                ''
                                ], 
                            tag = '', )
                        ], ),
                topic_details = openapi_client.models.video_topic_details.VideoTopicDetails(
                    relevant_topic_ids = [
                        ''
                        ], 
                    topic_categories = [
                        ''
                        ], 
                    topic_ids = [
                        ''
                        ], )
            )
        else:
            return Video(
        )
        """

    def testVideo(self):
        """Test Video"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

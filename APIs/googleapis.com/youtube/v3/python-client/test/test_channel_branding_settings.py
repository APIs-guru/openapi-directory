# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.channel_branding_settings import ChannelBrandingSettings

class TestChannelBrandingSettings(unittest.TestCase):
    """ChannelBrandingSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChannelBrandingSettings:
        """Test ChannelBrandingSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChannelBrandingSettings`
        """
        model = ChannelBrandingSettings()
        if include_optional:
            return ChannelBrandingSettings(
                channel = openapi_client.models.channel_settings.ChannelSettings(
                    country = '', 
                    default_language = '', 
                    default_tab = '', 
                    description = '', 
                    featured_channels_title = '', 
                    featured_channels_urls = [
                        ''
                        ], 
                    keywords = '', 
                    moderate_comments = True, 
                    profile_color = '', 
                    show_browse_view = True, 
                    show_related_channels = True, 
                    title = '', 
                    tracking_analytics_account_id = '', 
                    unsubscribed_trailer = '', ),
                hints = [
                    openapi_client.models.property_value.PropertyValue(
                        property = '', 
                        value = '', )
                    ],
                image = openapi_client.models.image_settings.ImageSettings(
                    background_image_url = openapi_client.models.localized_property.LocalizedProperty(
                        default_language = openapi_client.models.language_tag.LanguageTag(
                            value = '', ), 
                        localized = [
                            openapi_client.models.localized_string.LocalizedString(
                                language = '', 
                                value = '', )
                            ], ), 
                    banner_external_url = '', 
                    banner_image_url = '', 
                    banner_mobile_extra_hd_image_url = '', 
                    banner_mobile_hd_image_url = '', 
                    banner_mobile_image_url = '', 
                    banner_mobile_low_image_url = '', 
                    banner_mobile_medium_hd_image_url = '', 
                    banner_tablet_extra_hd_image_url = '', 
                    banner_tablet_hd_image_url = '', 
                    banner_tablet_image_url = '', 
                    banner_tablet_low_image_url = '', 
                    banner_tv_high_image_url = '', 
                    banner_tv_image_url = '', 
                    banner_tv_low_image_url = '', 
                    banner_tv_medium_image_url = '', 
                    large_branded_banner_image_imap_script = openapi_client.models.localized_property.LocalizedProperty(), 
                    large_branded_banner_image_url = , 
                    small_branded_banner_image_imap_script = , 
                    small_branded_banner_image_url = , 
                    tracking_image_url = '', 
                    watch_icon_image_url = '', ),
                watch = openapi_client.models.watch_settings.WatchSettings(
                    background_color = '', 
                    featured_playlist_id = '', 
                    text_color = '', )
            )
        else:
            return ChannelBrandingSettings(
        )
        """

    def testChannelBrandingSettings(self):
        """Test ChannelBrandingSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

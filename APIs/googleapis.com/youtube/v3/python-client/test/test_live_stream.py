# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.live_stream import LiveStream

class TestLiveStream(unittest.TestCase):
    """LiveStream unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LiveStream:
        """Test LiveStream
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LiveStream`
        """
        model = LiveStream()
        if include_optional:
            return LiveStream(
                cdn = openapi_client.models.cdn_settings.CdnSettings(
                    format = '', 
                    frame_rate = '30fps', 
                    ingestion_info = openapi_client.models.ingestion_info.IngestionInfo(
                        backup_ingestion_address = '', 
                        ingestion_address = '', 
                        rtmps_backup_ingestion_address = '', 
                        rtmps_ingestion_address = '', 
                        stream_name = '', ), 
                    ingestion_type = 'rtmp', 
                    resolution = '240p', ),
                content_details = openapi_client.models.live_stream_content_details.LiveStreamContentDetails(
                    closed_captions_ingestion_url = '', 
                    is_reusable = True, ),
                etag = '',
                id = '',
                kind = 'youtube#liveStream',
                snippet = openapi_client.models.live_stream_snippet.LiveStreamSnippet(
                    channel_id = '', 
                    description = '', 
                    is_default_stream = True, 
                    published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    title = '', ),
                status = openapi_client.models.live_stream_status.LiveStreamStatus(
                    health_status = openapi_client.models.live_stream_health_status.LiveStreamHealthStatus(
                        configuration_issues = [
                            openapi_client.models.live_stream_configuration_issue.LiveStreamConfigurationIssue(
                                description = '', 
                                reason = '', 
                                severity = 'info', 
                                type = 'gopSizeOver', )
                            ], 
                        last_update_time_seconds = '', 
                        status = 'good', ), 
                    stream_status = 'created', )
            )
        else:
            return LiveStream(
        )
        """

    def testLiveStream(self):
        """Test LiveStream"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

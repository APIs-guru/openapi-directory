# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.live_broadcast import LiveBroadcast

class TestLiveBroadcast(unittest.TestCase):
    """LiveBroadcast unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LiveBroadcast:
        """Test LiveBroadcast
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LiveBroadcast`
        """
        model = LiveBroadcast()
        if include_optional:
            return LiveBroadcast(
                content_details = openapi_client.models.live_broadcast_content_details.LiveBroadcastContentDetails(
                    bound_stream_id = '', 
                    bound_stream_last_update_time_ms = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    closed_captions_type = 'closedCaptionsTypeUnspecified', 
                    enable_auto_start = True, 
                    enable_auto_stop = True, 
                    enable_closed_captions = True, 
                    enable_content_encryption = True, 
                    enable_dvr = True, 
                    enable_embed = True, 
                    enable_low_latency = True, 
                    latency_preference = 'latencyPreferenceUnspecified', 
                    mesh = 'YQ==', 
                    monitor_stream = openapi_client.models.monitor_stream_info.MonitorStreamInfo(
                        broadcast_stream_delay_ms = 56, 
                        embed_html = '', 
                        enable_monitor_stream = True, ), 
                    projection = 'projectionUnspecified', 
                    record_from_start = True, 
                    start_with_slate = True, 
                    stereo_layout = 'stereoLayoutUnspecified', ),
                etag = '',
                id = '',
                kind = 'youtube#liveBroadcast',
                monetization_details = openapi_client.models.live_broadcast_monetization_details.LiveBroadcastMonetizationDetails(
                    cuepoint_schedule = openapi_client.models.cuepoint_schedule.CuepointSchedule(
                        enabled = True, 
                        pause_ads_until = '', 
                        repeat_interval_secs = 56, 
                        schedule_strategy = 'scheduleStrategyUnspecified', ), ),
                snippet = openapi_client.models.live_broadcast_snippet.LiveBroadcastSnippet(
                    actual_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    actual_start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    channel_id = '', 
                    description = '', 
                    is_default_broadcast = True, 
                    live_chat_id = '', 
                    published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    scheduled_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    scheduled_start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    thumbnails = openapi_client.models.thumbnail_details.ThumbnailDetails(
                        high = openapi_client.models.thumbnail.Thumbnail(
                            height = 56, 
                            url = '', 
                            width = 56, ), 
                        maxres = openapi_client.models.thumbnail.Thumbnail(
                            height = 56, 
                            url = '', 
                            width = 56, ), 
                        medium = , 
                        standard = , ), 
                    title = '', ),
                statistics = openapi_client.models.live_broadcast_statistics.LiveBroadcastStatistics(
                    concurrent_viewers = '', ),
                status = openapi_client.models.live_broadcast_status.LiveBroadcastStatus(
                    life_cycle_status = 'lifeCycleStatusUnspecified', 
                    live_broadcast_priority = 'liveBroadcastPriorityUnspecified', 
                    made_for_kids = True, 
                    privacy_status = 'public', 
                    recording_status = 'liveBroadcastRecordingStatusUnspecified', 
                    self_declared_made_for_kids = True, )
            )
        else:
            return LiveBroadcast(
        )
        """

    def testLiveBroadcast(self):
        """Test LiveBroadcast"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

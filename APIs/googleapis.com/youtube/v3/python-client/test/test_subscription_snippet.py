# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.subscription_snippet import SubscriptionSnippet

class TestSubscriptionSnippet(unittest.TestCase):
    """SubscriptionSnippet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SubscriptionSnippet:
        """Test SubscriptionSnippet
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SubscriptionSnippet`
        """
        model = SubscriptionSnippet()
        if include_optional:
            return SubscriptionSnippet(
                channel_id = '',
                channel_title = '',
                description = '',
                published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                resource_id = openapi_client.models.resource_id.ResourceId(
                    channel_id = '', 
                    kind = '', 
                    playlist_id = '', 
                    video_id = '', ),
                thumbnails = openapi_client.models.thumbnail_details.ThumbnailDetails(
                    high = openapi_client.models.thumbnail.Thumbnail(
                        height = 56, 
                        url = '', 
                        width = 56, ), 
                    maxres = openapi_client.models.thumbnail.Thumbnail(
                        height = 56, 
                        url = '', 
                        width = 56, ), 
                    medium = , 
                    standard = , ),
                title = ''
            )
        else:
            return SubscriptionSnippet(
        )
        """

    def testSubscriptionSnippet(self):
        """Test SubscriptionSnippet"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

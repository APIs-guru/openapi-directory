# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.channel_section_localization import ChannelSectionLocalization
from typing import Optional, Set
from typing_extensions import Self

class ChannelSectionSnippet(BaseModel):
    """
    Basic details about a channel section, including title, style and position.
    """ # noqa: E501
    channel_id: Optional[StrictStr] = Field(default=None, description="The ID that YouTube uses to uniquely identify the channel that published the channel section.", alias="channelId")
    default_language: Optional[StrictStr] = Field(default=None, description="The language of the channel section's default title and description.", alias="defaultLanguage")
    localized: Optional[ChannelSectionLocalization] = None
    position: Optional[StrictInt] = Field(default=None, description="The position of the channel section in the channel.")
    style: Optional[StrictStr] = Field(default=None, description="The style of the channel section.")
    title: Optional[StrictStr] = Field(default=None, description="The channel section's title for multiple_playlists and multiple_channels.")
    type: Optional[StrictStr] = Field(default=None, description="The type of the channel section.")
    __properties: ClassVar[List[str]] = ["channelId", "defaultLanguage", "localized", "position", "style", "title", "type"]

    @field_validator('style')
    def style_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['channelsectionStyleUnspecified', 'horizontalRow', 'verticalList']):
            raise ValueError("must be one of enum values ('channelsectionStyleUnspecified', 'horizontalRow', 'verticalList')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['channelsectionTypeUndefined', 'singlePlaylist', 'multiplePlaylists', 'popularUploads', 'recentUploads', 'likes', 'allPlaylists', 'likedPlaylists', 'recentPosts', 'recentActivity', 'liveEvents', 'upcomingEvents', 'completedEvents', 'multipleChannels', 'postedVideos', 'postedPlaylists', 'subscriptions']):
            raise ValueError("must be one of enum values ('channelsectionTypeUndefined', 'singlePlaylist', 'multiplePlaylists', 'popularUploads', 'recentUploads', 'likes', 'allPlaylists', 'likedPlaylists', 'recentPosts', 'recentActivity', 'liveEvents', 'upcomingEvents', 'completedEvents', 'multipleChannels', 'postedVideos', 'postedPlaylists', 'subscriptions')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChannelSectionSnippet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of localized
        if self.localized:
            _dict['localized'] = self.localized.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChannelSectionSnippet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channelId": obj.get("channelId"),
            "defaultLanguage": obj.get("defaultLanguage"),
            "localized": ChannelSectionLocalization.from_dict(obj["localized"]) if obj.get("localized") is not None else None,
            "position": obj.get("position"),
            "style": obj.get("style"),
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj



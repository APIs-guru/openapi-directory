# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.live_broadcast_content_details import LiveBroadcastContentDetails
from openapi_client.models.live_broadcast_monetization_details import LiveBroadcastMonetizationDetails
from openapi_client.models.live_broadcast_snippet import LiveBroadcastSnippet
from openapi_client.models.live_broadcast_statistics import LiveBroadcastStatistics
from openapi_client.models.live_broadcast_status import LiveBroadcastStatus
from typing import Optional, Set
from typing_extensions import Self

class LiveBroadcast(BaseModel):
    """
    A *liveBroadcast* resource represents an event that will be streamed, via live video, on YouTube.
    """ # noqa: E501
    content_details: Optional[LiveBroadcastContentDetails] = Field(default=None, alias="contentDetails")
    etag: Optional[StrictStr] = Field(default=None, description="Etag of this resource.")
    id: Optional[StrictStr] = Field(default=None, description="The ID that YouTube assigns to uniquely identify the broadcast.")
    kind: Optional[StrictStr] = Field(default='youtube#liveBroadcast', description="Identifies what kind of resource this is. Value: the fixed string \"youtube#liveBroadcast\".")
    monetization_details: Optional[LiveBroadcastMonetizationDetails] = Field(default=None, alias="monetizationDetails")
    snippet: Optional[LiveBroadcastSnippet] = None
    statistics: Optional[LiveBroadcastStatistics] = None
    status: Optional[LiveBroadcastStatus] = None
    __properties: ClassVar[List[str]] = ["contentDetails", "etag", "id", "kind", "monetizationDetails", "snippet", "statistics", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LiveBroadcast from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content_details
        if self.content_details:
            _dict['contentDetails'] = self.content_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monetization_details
        if self.monetization_details:
            _dict['monetizationDetails'] = self.monetization_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of snippet
        if self.snippet:
            _dict['snippet'] = self.snippet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of statistics
        if self.statistics:
            _dict['statistics'] = self.statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LiveBroadcast from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentDetails": LiveBroadcastContentDetails.from_dict(obj["contentDetails"]) if obj.get("contentDetails") is not None else None,
            "etag": obj.get("etag"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'youtube#liveBroadcast',
            "monetizationDetails": LiveBroadcastMonetizationDetails.from_dict(obj["monetizationDetails"]) if obj.get("monetizationDetails") is not None else None,
            "snippet": LiveBroadcastSnippet.from_dict(obj["snippet"]) if obj.get("snippet") is not None else None,
            "statistics": LiveBroadcastStatistics.from_dict(obj["statistics"]) if obj.get("statistics") is not None else None,
            "status": LiveBroadcastStatus.from_dict(obj["status"]) if obj.get("status") is not None else None
        })
        return _obj



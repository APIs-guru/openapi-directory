# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.memberships_duration import MembershipsDuration
from openapi_client.models.memberships_duration_at_level import MembershipsDurationAtLevel
from typing import Optional, Set
from typing_extensions import Self

class MembershipsDetails(BaseModel):
    """
    MembershipsDetails
    """ # noqa: E501
    accessible_levels: Optional[List[StrictStr]] = Field(default=None, description="Ids of all levels that the user has access to. This includes the currently active level and all other levels that are included because of a higher purchase.", alias="accessibleLevels")
    highest_accessible_level: Optional[StrictStr] = Field(default=None, description="Id of the highest level that the user has access to at the moment.", alias="highestAccessibleLevel")
    highest_accessible_level_display_name: Optional[StrictStr] = Field(default=None, description="Display name for the highest level that the user has access to at the moment.", alias="highestAccessibleLevelDisplayName")
    memberships_duration: Optional[MembershipsDuration] = Field(default=None, alias="membershipsDuration")
    memberships_duration_at_levels: Optional[List[MembershipsDurationAtLevel]] = Field(default=None, description="Data about memberships duration on particular pricing levels.", alias="membershipsDurationAtLevels")
    __properties: ClassVar[List[str]] = ["accessibleLevels", "highestAccessibleLevel", "highestAccessibleLevelDisplayName", "membershipsDuration", "membershipsDurationAtLevels"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MembershipsDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of memberships_duration
        if self.memberships_duration:
            _dict['membershipsDuration'] = self.memberships_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in memberships_duration_at_levels (list)
        _items = []
        if self.memberships_duration_at_levels:
            for _item_memberships_duration_at_levels in self.memberships_duration_at_levels:
                if _item_memberships_duration_at_levels:
                    _items.append(_item_memberships_duration_at_levels.to_dict())
            _dict['membershipsDurationAtLevels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MembershipsDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessibleLevels": obj.get("accessibleLevels"),
            "highestAccessibleLevel": obj.get("highestAccessibleLevel"),
            "highestAccessibleLevelDisplayName": obj.get("highestAccessibleLevelDisplayName"),
            "membershipsDuration": MembershipsDuration.from_dict(obj["membershipsDuration"]) if obj.get("membershipsDuration") is not None else None,
            "membershipsDurationAtLevels": [MembershipsDurationAtLevel.from_dict(_item) for _item in obj["membershipsDurationAtLevels"]] if obj.get("membershipsDurationAtLevels") is not None else None
        })
        return _obj



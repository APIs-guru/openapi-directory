# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.channel_profile_details import ChannelProfileDetails
from openapi_client.models.super_sticker_metadata import SuperStickerMetadata
from typing import Optional, Set
from typing_extensions import Self

class SuperChatEventSnippet(BaseModel):
    """
    SuperChatEventSnippet
    """ # noqa: E501
    amount_micros: Optional[StrictStr] = Field(default=None, description="The purchase amount, in micros of the purchase currency. e.g., 1 is represented as 1000000.", alias="amountMicros")
    channel_id: Optional[StrictStr] = Field(default=None, description="Channel id where the event occurred.", alias="channelId")
    comment_text: Optional[StrictStr] = Field(default=None, description="The text contents of the comment left by the user.", alias="commentText")
    created_at: Optional[datetime] = Field(default=None, description="The date and time when the event occurred.", alias="createdAt")
    currency: Optional[StrictStr] = Field(default=None, description="The currency in which the purchase was made. ISO 4217.")
    display_string: Optional[StrictStr] = Field(default=None, description="A rendered string that displays the purchase amount and currency (e.g., \"$1.00\"). The string is rendered for the given language.", alias="displayString")
    is_super_sticker_event: Optional[StrictBool] = Field(default=None, description="True if this event is a Super Sticker event.", alias="isSuperStickerEvent")
    message_type: Optional[StrictInt] = Field(default=None, description="The tier for the paid message, which is based on the amount of money spent to purchase the message.", alias="messageType")
    super_sticker_metadata: Optional[SuperStickerMetadata] = Field(default=None, alias="superStickerMetadata")
    supporter_details: Optional[ChannelProfileDetails] = Field(default=None, alias="supporterDetails")
    __properties: ClassVar[List[str]] = ["amountMicros", "channelId", "commentText", "createdAt", "currency", "displayString", "isSuperStickerEvent", "messageType", "superStickerMetadata", "supporterDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SuperChatEventSnippet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of super_sticker_metadata
        if self.super_sticker_metadata:
            _dict['superStickerMetadata'] = self.super_sticker_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of supporter_details
        if self.supporter_details:
            _dict['supporterDetails'] = self.supporter_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SuperChatEventSnippet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amountMicros": obj.get("amountMicros"),
            "channelId": obj.get("channelId"),
            "commentText": obj.get("commentText"),
            "createdAt": obj.get("createdAt"),
            "currency": obj.get("currency"),
            "displayString": obj.get("displayString"),
            "isSuperStickerEvent": obj.get("isSuperStickerEvent"),
            "messageType": obj.get("messageType"),
            "superStickerMetadata": SuperStickerMetadata.from_dict(obj["superStickerMetadata"]) if obj.get("superStickerMetadata") is not None else None,
            "supporterDetails": ChannelProfileDetails.from_dict(obj["supporterDetails"]) if obj.get("supporterDetails") is not None else None
        })
        return _obj



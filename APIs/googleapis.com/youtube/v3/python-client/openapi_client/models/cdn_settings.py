# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ingestion_info import IngestionInfo
from typing import Optional, Set
from typing_extensions import Self

class CdnSettings(BaseModel):
    """
    Brief description of the live stream cdn settings.
    """ # noqa: E501
    format: Optional[StrictStr] = Field(default=None, description="The format of the video stream that you are sending to Youtube. ")
    frame_rate: Optional[StrictStr] = Field(default=None, description="The frame rate of the inbound video data.", alias="frameRate")
    ingestion_info: Optional[IngestionInfo] = Field(default=None, alias="ingestionInfo")
    ingestion_type: Optional[StrictStr] = Field(default=None, description=" The method or protocol used to transmit the video stream.", alias="ingestionType")
    resolution: Optional[StrictStr] = Field(default=None, description="The resolution of the inbound video data.")
    __properties: ClassVar[List[str]] = ["format", "frameRate", "ingestionInfo", "ingestionType", "resolution"]

    @field_validator('frame_rate')
    def frame_rate_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['30fps', '60fps', 'variable']):
            raise ValueError("must be one of enum values ('30fps', '60fps', 'variable')")
        return value

    @field_validator('ingestion_type')
    def ingestion_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['rtmp', 'dash', 'webrtc', 'hls']):
            raise ValueError("must be one of enum values ('rtmp', 'dash', 'webrtc', 'hls')")
        return value

    @field_validator('resolution')
    def resolution_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['240p', '360p', '480p', '720p', '1080p', '1440p', '2160p', 'variable']):
            raise ValueError("must be one of enum values ('240p', '360p', '480p', '720p', '1080p', '1440p', '2160p', 'variable')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CdnSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ingestion_info
        if self.ingestion_info:
            _dict['ingestionInfo'] = self.ingestion_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CdnSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "format": obj.get("format"),
            "frameRate": obj.get("frameRate"),
            "ingestionInfo": IngestionInfo.from_dict(obj["ingestionInfo"]) if obj.get("ingestionInfo") is not None else None,
            "ingestionType": obj.get("ingestionType"),
            "resolution": obj.get("resolution")
        })
        return _obj



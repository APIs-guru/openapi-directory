# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.thumbnail_details import ThumbnailDetails
from typing import Optional, Set
from typing_extensions import Self

class ActivitySnippet(BaseModel):
    """
    Basic details about an activity, including title, description, thumbnails, activity type and group. Next ID: 12
    """ # noqa: E501
    channel_id: Optional[StrictStr] = Field(default=None, description="The ID that YouTube uses to uniquely identify the channel associated with the activity.", alias="channelId")
    channel_title: Optional[StrictStr] = Field(default=None, description="Channel title for the channel responsible for this activity", alias="channelTitle")
    description: Optional[StrictStr] = Field(default=None, description="The description of the resource primarily associated with the activity. @mutable youtube.activities.insert")
    group_id: Optional[StrictStr] = Field(default=None, description="The group ID associated with the activity. A group ID identifies user events that are associated with the same user and resource. For example, if a user rates a video and marks the same video as a favorite, the entries for those events would have the same group ID in the user's activity feed. In your user interface, you can avoid repetition by grouping events with the same groupId value.", alias="groupId")
    published_at: Optional[datetime] = Field(default=None, description="The date and time that the video was uploaded.", alias="publishedAt")
    thumbnails: Optional[ThumbnailDetails] = None
    title: Optional[StrictStr] = Field(default=None, description="The title of the resource primarily associated with the activity.")
    type: Optional[StrictStr] = Field(default=None, description="The type of activity that the resource describes.")
    __properties: ClassVar[List[str]] = ["channelId", "channelTitle", "description", "groupId", "publishedAt", "thumbnails", "title", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['typeUnspecified', 'upload', 'like', 'favorite', 'comment', 'subscription', 'playlistItem', 'recommendation', 'bulletin', 'social', 'channelItem', 'promotedItem']):
            raise ValueError("must be one of enum values ('typeUnspecified', 'upload', 'like', 'favorite', 'comment', 'subscription', 'playlistItem', 'recommendation', 'bulletin', 'social', 'channelItem', 'promotedItem')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivitySnippet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of thumbnails
        if self.thumbnails:
            _dict['thumbnails'] = self.thumbnails.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivitySnippet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channelId": obj.get("channelId"),
            "channelTitle": obj.get("channelTitle"),
            "description": obj.get("description"),
            "groupId": obj.get("groupId"),
            "publishedAt": obj.get("publishedAt"),
            "thumbnails": ThumbnailDetails.from_dict(obj["thumbnails"]) if obj.get("thumbnails") is not None else None,
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj



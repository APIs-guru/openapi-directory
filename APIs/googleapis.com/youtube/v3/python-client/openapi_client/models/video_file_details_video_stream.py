# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class VideoFileDetailsVideoStream(BaseModel):
    """
    Information about a video stream.
    """ # noqa: E501
    aspect_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The video content's display aspect ratio, which specifies the aspect ratio in which the video should be displayed.", alias="aspectRatio")
    bitrate_bps: Optional[StrictStr] = Field(default=None, description="The video stream's bitrate, in bits per second.", alias="bitrateBps")
    codec: Optional[StrictStr] = Field(default=None, description="The video codec that the stream uses.")
    frame_rate_fps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The video stream's frame rate, in frames per second.", alias="frameRateFps")
    height_pixels: Optional[StrictInt] = Field(default=None, description="The encoded video content's height in pixels.", alias="heightPixels")
    rotation: Optional[StrictStr] = Field(default=None, description="The amount that YouTube needs to rotate the original source content to properly display the video.")
    vendor: Optional[StrictStr] = Field(default=None, description="A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.")
    width_pixels: Optional[StrictInt] = Field(default=None, description="The encoded video content's width in pixels. You can calculate the video's encoding aspect ratio as width_pixels / height_pixels.", alias="widthPixels")
    __properties: ClassVar[List[str]] = ["aspectRatio", "bitrateBps", "codec", "frameRateFps", "heightPixels", "rotation", "vendor", "widthPixels"]

    @field_validator('rotation')
    def rotation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['none', 'clockwise', 'upsideDown', 'counterClockwise', 'other']):
            raise ValueError("must be one of enum values ('none', 'clockwise', 'upsideDown', 'counterClockwise', 'other')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VideoFileDetailsVideoStream from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VideoFileDetailsVideoStream from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aspectRatio": obj.get("aspectRatio"),
            "bitrateBps": obj.get("bitrateBps"),
            "codec": obj.get("codec"),
            "frameRateFps": obj.get("frameRateFps"),
            "heightPixels": obj.get("heightPixels"),
            "rotation": obj.get("rotation"),
            "vendor": obj.get("vendor"),
            "widthPixels": obj.get("widthPixels")
        })
        return _obj



# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IngestionInfo(BaseModel):
    """
    Describes information necessary for ingesting an RTMP, HTTP, or SRT stream.
    """ # noqa: E501
    backup_ingestion_address: Optional[StrictStr] = Field(default=None, description="The backup ingestion URL that you should use to stream video to YouTube. You have the option of simultaneously streaming the content that you are sending to the ingestionAddress to this URL.", alias="backupIngestionAddress")
    ingestion_address: Optional[StrictStr] = Field(default=None, description="The primary ingestion URL that you should use to stream video to YouTube. You must stream video to this URL. Depending on which application or tool you use to encode your video stream, you may need to enter the stream URL and stream name separately or you may need to concatenate them in the following format: *STREAM_URL/STREAM_NAME* ", alias="ingestionAddress")
    rtmps_backup_ingestion_address: Optional[StrictStr] = Field(default=None, description="This ingestion url may be used instead of backupIngestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.", alias="rtmpsBackupIngestionAddress")
    rtmps_ingestion_address: Optional[StrictStr] = Field(default=None, description="This ingestion url may be used instead of ingestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.", alias="rtmpsIngestionAddress")
    stream_name: Optional[StrictStr] = Field(default=None, description="The stream name that YouTube assigns to the video stream.", alias="streamName")
    __properties: ClassVar[List[str]] = ["backupIngestionAddress", "ingestionAddress", "rtmpsBackupIngestionAddress", "rtmpsIngestionAddress", "streamName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IngestionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IngestionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupIngestionAddress": obj.get("backupIngestionAddress"),
            "ingestionAddress": obj.get("ingestionAddress"),
            "rtmpsBackupIngestionAddress": obj.get("rtmpsBackupIngestionAddress"),
            "rtmpsIngestionAddress": obj.get("rtmpsIngestionAddress"),
            "streamName": obj.get("streamName")
        })
        return _obj



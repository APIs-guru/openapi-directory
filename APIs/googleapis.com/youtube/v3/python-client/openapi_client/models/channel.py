# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.channel_audit_details import ChannelAuditDetails
from openapi_client.models.channel_branding_settings import ChannelBrandingSettings
from openapi_client.models.channel_content_details import ChannelContentDetails
from openapi_client.models.channel_content_owner_details import ChannelContentOwnerDetails
from openapi_client.models.channel_conversion_pings import ChannelConversionPings
from openapi_client.models.channel_localization import ChannelLocalization
from openapi_client.models.channel_snippet import ChannelSnippet
from openapi_client.models.channel_statistics import ChannelStatistics
from openapi_client.models.channel_status import ChannelStatus
from openapi_client.models.channel_topic_details import ChannelTopicDetails
from typing import Optional, Set
from typing_extensions import Self

class Channel(BaseModel):
    """
    A *channel* resource contains information about a YouTube channel.
    """ # noqa: E501
    audit_details: Optional[ChannelAuditDetails] = Field(default=None, alias="auditDetails")
    branding_settings: Optional[ChannelBrandingSettings] = Field(default=None, alias="brandingSettings")
    content_details: Optional[ChannelContentDetails] = Field(default=None, alias="contentDetails")
    content_owner_details: Optional[ChannelContentOwnerDetails] = Field(default=None, alias="contentOwnerDetails")
    conversion_pings: Optional[ChannelConversionPings] = Field(default=None, alias="conversionPings")
    etag: Optional[StrictStr] = Field(default=None, description="Etag of this resource.")
    id: Optional[StrictStr] = Field(default=None, description="The ID that YouTube uses to uniquely identify the channel.")
    kind: Optional[StrictStr] = Field(default='youtube#channel', description="Identifies what kind of resource this is. Value: the fixed string \"youtube#channel\".")
    localizations: Optional[Dict[str, ChannelLocalization]] = Field(default=None, description="Localizations for different languages")
    snippet: Optional[ChannelSnippet] = None
    statistics: Optional[ChannelStatistics] = None
    status: Optional[ChannelStatus] = None
    topic_details: Optional[ChannelTopicDetails] = Field(default=None, alias="topicDetails")
    __properties: ClassVar[List[str]] = ["auditDetails", "brandingSettings", "contentDetails", "contentOwnerDetails", "conversionPings", "etag", "id", "kind", "localizations", "snippet", "statistics", "status", "topicDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Channel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audit_details
        if self.audit_details:
            _dict['auditDetails'] = self.audit_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of branding_settings
        if self.branding_settings:
            _dict['brandingSettings'] = self.branding_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_details
        if self.content_details:
            _dict['contentDetails'] = self.content_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_owner_details
        if self.content_owner_details:
            _dict['contentOwnerDetails'] = self.content_owner_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conversion_pings
        if self.conversion_pings:
            _dict['conversionPings'] = self.conversion_pings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in localizations (dict)
        _field_dict = {}
        if self.localizations:
            for _key_localizations in self.localizations:
                if self.localizations[_key_localizations]:
                    _field_dict[_key_localizations] = self.localizations[_key_localizations].to_dict()
            _dict['localizations'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of snippet
        if self.snippet:
            _dict['snippet'] = self.snippet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of statistics
        if self.statistics:
            _dict['statistics'] = self.statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of topic_details
        if self.topic_details:
            _dict['topicDetails'] = self.topic_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Channel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auditDetails": ChannelAuditDetails.from_dict(obj["auditDetails"]) if obj.get("auditDetails") is not None else None,
            "brandingSettings": ChannelBrandingSettings.from_dict(obj["brandingSettings"]) if obj.get("brandingSettings") is not None else None,
            "contentDetails": ChannelContentDetails.from_dict(obj["contentDetails"]) if obj.get("contentDetails") is not None else None,
            "contentOwnerDetails": ChannelContentOwnerDetails.from_dict(obj["contentOwnerDetails"]) if obj.get("contentOwnerDetails") is not None else None,
            "conversionPings": ChannelConversionPings.from_dict(obj["conversionPings"]) if obj.get("conversionPings") is not None else None,
            "etag": obj.get("etag"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'youtube#channel',
            "localizations": dict(
                (_k, ChannelLocalization.from_dict(_v))
                for _k, _v in obj["localizations"].items()
            )
            if obj.get("localizations") is not None
            else None,
            "snippet": ChannelSnippet.from_dict(obj["snippet"]) if obj.get("snippet") is not None else None,
            "statistics": ChannelStatistics.from_dict(obj["statistics"]) if obj.get("statistics") is not None else None,
            "status": ChannelStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "topicDetails": ChannelTopicDetails.from_dict(obj["topicDetails"]) if obj.get("topicDetails") is not None else None
        })
        return _obj



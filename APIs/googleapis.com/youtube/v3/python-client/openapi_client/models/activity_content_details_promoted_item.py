# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ActivityContentDetailsPromotedItem(BaseModel):
    """
    Details about a resource which is being promoted.
    """ # noqa: E501
    ad_tag: Optional[StrictStr] = Field(default=None, description="The URL the client should fetch to request a promoted item.", alias="adTag")
    click_tracking_url: Optional[StrictStr] = Field(default=None, description="The URL the client should ping to indicate that the user clicked through on this promoted item.", alias="clickTrackingUrl")
    creative_view_url: Optional[StrictStr] = Field(default=None, description="The URL the client should ping to indicate that the user was shown this promoted item.", alias="creativeViewUrl")
    cta_type: Optional[StrictStr] = Field(default=None, description="The type of call-to-action, a message to the user indicating action that can be taken.", alias="ctaType")
    custom_cta_button_text: Optional[StrictStr] = Field(default=None, description="The custom call-to-action button text. If specified, it will override the default button text for the cta_type.", alias="customCtaButtonText")
    description_text: Optional[StrictStr] = Field(default=None, description="The text description to accompany the promoted item.", alias="descriptionText")
    destination_url: Optional[StrictStr] = Field(default=None, description="The URL the client should direct the user to, if the user chooses to visit the advertiser's website.", alias="destinationUrl")
    forecasting_url: Optional[List[StrictStr]] = Field(default=None, description="The list of forecasting URLs. The client should ping all of these URLs when a promoted item is not available, to indicate that a promoted item could have been shown.", alias="forecastingUrl")
    impression_url: Optional[List[StrictStr]] = Field(default=None, description="The list of impression URLs. The client should ping all of these URLs to indicate that the user was shown this promoted item.", alias="impressionUrl")
    video_id: Optional[StrictStr] = Field(default=None, description="The ID that YouTube uses to uniquely identify the promoted video.", alias="videoId")
    __properties: ClassVar[List[str]] = ["adTag", "clickTrackingUrl", "creativeViewUrl", "ctaType", "customCtaButtonText", "descriptionText", "destinationUrl", "forecastingUrl", "impressionUrl", "videoId"]

    @field_validator('cta_type')
    def cta_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ctaTypeUnspecified', 'visitAdvertiserSite']):
            raise ValueError("must be one of enum values ('ctaTypeUnspecified', 'visitAdvertiserSite')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivityContentDetailsPromotedItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivityContentDetailsPromotedItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adTag": obj.get("adTag"),
            "clickTrackingUrl": obj.get("clickTrackingUrl"),
            "creativeViewUrl": obj.get("creativeViewUrl"),
            "ctaType": obj.get("ctaType"),
            "customCtaButtonText": obj.get("customCtaButtonText"),
            "descriptionText": obj.get("descriptionText"),
            "destinationUrl": obj.get("destinationUrl"),
            "forecastingUrl": obj.get("forecastingUrl"),
            "impressionUrl": obj.get("impressionUrl"),
            "videoId": obj.get("videoId")
        })
        return _obj



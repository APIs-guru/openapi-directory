# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.playlist_localization import PlaylistLocalization
from openapi_client.models.thumbnail_details import ThumbnailDetails
from typing import Optional, Set
from typing_extensions import Self

class PlaylistSnippet(BaseModel):
    """
    Basic details about a playlist, including title, description and thumbnails.
    """ # noqa: E501
    channel_id: Optional[StrictStr] = Field(default=None, description="The ID that YouTube uses to uniquely identify the channel that published the playlist.", alias="channelId")
    channel_title: Optional[StrictStr] = Field(default=None, description="The channel title of the channel that the video belongs to.", alias="channelTitle")
    default_language: Optional[StrictStr] = Field(default=None, description="The language of the playlist's default title and description.", alias="defaultLanguage")
    description: Optional[StrictStr] = Field(default=None, description="The playlist's description.")
    localized: Optional[PlaylistLocalization] = None
    published_at: Optional[datetime] = Field(default=None, description="The date and time that the playlist was created.", alias="publishedAt")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Keyword tags associated with the playlist.")
    thumbnail_video_id: Optional[StrictStr] = Field(default=None, description="Note: if the playlist has a custom thumbnail, this field will not be populated. The video id selected by the user that will be used as the thumbnail of this playlist. This field defaults to the first publicly viewable video in the playlist, if: 1. The user has never selected a video to be the thumbnail of the playlist. 2. The user selects a video to be the thumbnail, and then removes that video from the playlist. 3. The user selects a non-owned video to be the thumbnail, but that video becomes private, or gets deleted.", alias="thumbnailVideoId")
    thumbnails: Optional[ThumbnailDetails] = None
    title: Optional[StrictStr] = Field(default=None, description="The playlist's title.")
    __properties: ClassVar[List[str]] = ["channelId", "channelTitle", "defaultLanguage", "description", "localized", "publishedAt", "tags", "thumbnailVideoId", "thumbnails", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlaylistSnippet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of localized
        if self.localized:
            _dict['localized'] = self.localized.to_dict()
        # override the default output from pydantic by calling `to_dict()` of thumbnails
        if self.thumbnails:
            _dict['thumbnails'] = self.thumbnails.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlaylistSnippet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channelId": obj.get("channelId"),
            "channelTitle": obj.get("channelTitle"),
            "defaultLanguage": obj.get("defaultLanguage"),
            "description": obj.get("description"),
            "localized": PlaylistLocalization.from_dict(obj["localized"]) if obj.get("localized") is not None else None,
            "publishedAt": obj.get("publishedAt"),
            "tags": obj.get("tags"),
            "thumbnailVideoId": obj.get("thumbnailVideoId"),
            "thumbnails": ThumbnailDetails.from_dict(obj["thumbnails"]) if obj.get("thumbnails") is not None else None,
            "title": obj.get("title")
        })
        return _obj



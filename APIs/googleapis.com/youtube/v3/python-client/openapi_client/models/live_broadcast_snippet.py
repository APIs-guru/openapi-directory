# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.thumbnail_details import ThumbnailDetails
from typing import Optional, Set
from typing_extensions import Self

class LiveBroadcastSnippet(BaseModel):
    """
    Basic broadcast information.
    """ # noqa: E501
    actual_end_time: Optional[datetime] = Field(default=None, description="The date and time that the broadcast actually ended. This information is only available once the broadcast's state is complete.", alias="actualEndTime")
    actual_start_time: Optional[datetime] = Field(default=None, description="The date and time that the broadcast actually started. This information is only available once the broadcast's state is live.", alias="actualStartTime")
    channel_id: Optional[StrictStr] = Field(default=None, description="The ID that YouTube uses to uniquely identify the channel that is publishing the broadcast.", alias="channelId")
    description: Optional[StrictStr] = Field(default=None, description="The broadcast's description. As with the title, you can set this field by modifying the broadcast resource or by setting the description field of the corresponding video resource.")
    is_default_broadcast: Optional[StrictBool] = Field(default=None, description="Indicates whether this broadcast is the default broadcast. Internal only.", alias="isDefaultBroadcast")
    live_chat_id: Optional[StrictStr] = Field(default=None, description="The id of the live chat for this broadcast.", alias="liveChatId")
    published_at: Optional[datetime] = Field(default=None, description="The date and time that the broadcast was added to YouTube's live broadcast schedule.", alias="publishedAt")
    scheduled_end_time: Optional[datetime] = Field(default=None, description="The date and time that the broadcast is scheduled to end.", alias="scheduledEndTime")
    scheduled_start_time: Optional[datetime] = Field(default=None, description="The date and time that the broadcast is scheduled to start.", alias="scheduledStartTime")
    thumbnails: Optional[ThumbnailDetails] = None
    title: Optional[StrictStr] = Field(default=None, description="The broadcast's title. Note that the broadcast represents exactly one YouTube video. You can set this field by modifying the broadcast resource or by setting the title field of the corresponding video resource.")
    __properties: ClassVar[List[str]] = ["actualEndTime", "actualStartTime", "channelId", "description", "isDefaultBroadcast", "liveChatId", "publishedAt", "scheduledEndTime", "scheduledStartTime", "thumbnails", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LiveBroadcastSnippet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of thumbnails
        if self.thumbnails:
            _dict['thumbnails'] = self.thumbnails.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LiveBroadcastSnippet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actualEndTime": obj.get("actualEndTime"),
            "actualStartTime": obj.get("actualStartTime"),
            "channelId": obj.get("channelId"),
            "description": obj.get("description"),
            "isDefaultBroadcast": obj.get("isDefaultBroadcast"),
            "liveChatId": obj.get("liveChatId"),
            "publishedAt": obj.get("publishedAt"),
            "scheduledEndTime": obj.get("scheduledEndTime"),
            "scheduledStartTime": obj.get("scheduledStartTime"),
            "thumbnails": ThumbnailDetails.from_dict(obj["thumbnails"]) if obj.get("thumbnails") is not None else None,
            "title": obj.get("title")
        })
        return _obj



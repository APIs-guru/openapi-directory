# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LiveChatMessageAuthorDetails(BaseModel):
    """
    LiveChatMessageAuthorDetails
    """ # noqa: E501
    channel_id: Optional[StrictStr] = Field(default=None, description="The YouTube channel ID.", alias="channelId")
    channel_url: Optional[StrictStr] = Field(default=None, description="The channel's URL.", alias="channelUrl")
    display_name: Optional[StrictStr] = Field(default=None, description="The channel's display name.", alias="displayName")
    is_chat_moderator: Optional[StrictBool] = Field(default=None, description="Whether the author is a moderator of the live chat.", alias="isChatModerator")
    is_chat_owner: Optional[StrictBool] = Field(default=None, description="Whether the author is the owner of the live chat.", alias="isChatOwner")
    is_chat_sponsor: Optional[StrictBool] = Field(default=None, description="Whether the author is a sponsor of the live chat.", alias="isChatSponsor")
    is_verified: Optional[StrictBool] = Field(default=None, description="Whether the author's identity has been verified by YouTube.", alias="isVerified")
    profile_image_url: Optional[StrictStr] = Field(default=None, description="The channels's avatar URL.", alias="profileImageUrl")
    __properties: ClassVar[List[str]] = ["channelId", "channelUrl", "displayName", "isChatModerator", "isChatOwner", "isChatSponsor", "isVerified", "profileImageUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LiveChatMessageAuthorDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LiveChatMessageAuthorDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channelId": obj.get("channelId"),
            "channelUrl": obj.get("channelUrl"),
            "displayName": obj.get("displayName"),
            "isChatModerator": obj.get("isChatModerator"),
            "isChatOwner": obj.get("isChatOwner"),
            "isChatSponsor": obj.get("isChatSponsor"),
            "isVerified": obj.get("isVerified"),
            "profileImageUrl": obj.get("profileImageUrl")
        })
        return _obj



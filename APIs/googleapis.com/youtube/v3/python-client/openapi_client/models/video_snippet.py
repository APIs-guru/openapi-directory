# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.thumbnail_details import ThumbnailDetails
from openapi_client.models.video_localization import VideoLocalization
from typing import Optional, Set
from typing_extensions import Self

class VideoSnippet(BaseModel):
    """
    Basic details about a video, including title, description, uploader, thumbnails and category.
    """ # noqa: E501
    category_id: Optional[StrictStr] = Field(default=None, description="The YouTube video category associated with the video.", alias="categoryId")
    channel_id: Optional[StrictStr] = Field(default=None, description="The ID that YouTube uses to uniquely identify the channel that the video was uploaded to.", alias="channelId")
    channel_title: Optional[StrictStr] = Field(default=None, description="Channel title for the channel that the video belongs to.", alias="channelTitle")
    default_audio_language: Optional[StrictStr] = Field(default=None, description="The default_audio_language property specifies the language spoken in the video's default audio track.", alias="defaultAudioLanguage")
    default_language: Optional[StrictStr] = Field(default=None, description="The language of the videos's default snippet.", alias="defaultLanguage")
    description: Optional[StrictStr] = Field(default=None, description="The video's description. @mutable youtube.videos.insert youtube.videos.update")
    live_broadcast_content: Optional[StrictStr] = Field(default=None, description="Indicates if the video is an upcoming/active live broadcast. Or it's \"none\" if the video is not an upcoming/active live broadcast.", alias="liveBroadcastContent")
    localized: Optional[VideoLocalization] = None
    published_at: Optional[datetime] = Field(default=None, description="The date and time when the video was uploaded.", alias="publishedAt")
    tags: Optional[List[StrictStr]] = Field(default=None, description="A list of keyword tags associated with the video. Tags may contain spaces.")
    thumbnails: Optional[ThumbnailDetails] = None
    title: Optional[StrictStr] = Field(default=None, description="The video's title. @mutable youtube.videos.insert youtube.videos.update")
    __properties: ClassVar[List[str]] = ["categoryId", "channelId", "channelTitle", "defaultAudioLanguage", "defaultLanguage", "description", "liveBroadcastContent", "localized", "publishedAt", "tags", "thumbnails", "title"]

    @field_validator('live_broadcast_content')
    def live_broadcast_content_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['none', 'upcoming', 'live', 'completed']):
            raise ValueError("must be one of enum values ('none', 'upcoming', 'live', 'completed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VideoSnippet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of localized
        if self.localized:
            _dict['localized'] = self.localized.to_dict()
        # override the default output from pydantic by calling `to_dict()` of thumbnails
        if self.thumbnails:
            _dict['thumbnails'] = self.thumbnails.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VideoSnippet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categoryId": obj.get("categoryId"),
            "channelId": obj.get("channelId"),
            "channelTitle": obj.get("channelTitle"),
            "defaultAudioLanguage": obj.get("defaultAudioLanguage"),
            "defaultLanguage": obj.get("defaultLanguage"),
            "description": obj.get("description"),
            "liveBroadcastContent": obj.get("liveBroadcastContent"),
            "localized": VideoLocalization.from_dict(obj["localized"]) if obj.get("localized") is not None else None,
            "publishedAt": obj.get("publishedAt"),
            "tags": obj.get("tags"),
            "thumbnails": ThumbnailDetails.from_dict(obj["thumbnails"]) if obj.get("thumbnails") is not None else None,
            "title": obj.get("title")
        })
        return _obj



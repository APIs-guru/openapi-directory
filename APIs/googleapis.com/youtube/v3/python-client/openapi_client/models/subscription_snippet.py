# coding: utf-8

"""
    YouTube Data API v3

    The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource_id import ResourceId
from openapi_client.models.thumbnail_details import ThumbnailDetails
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionSnippet(BaseModel):
    """
    Basic details about a subscription, including title, description and thumbnails of the subscribed item.
    """ # noqa: E501
    channel_id: Optional[StrictStr] = Field(default=None, description="The ID that YouTube uses to uniquely identify the subscriber's channel.", alias="channelId")
    channel_title: Optional[StrictStr] = Field(default=None, description="Channel title for the channel that the subscription belongs to.", alias="channelTitle")
    description: Optional[StrictStr] = Field(default=None, description="The subscription's details.")
    published_at: Optional[datetime] = Field(default=None, description="The date and time that the subscription was created.", alias="publishedAt")
    resource_id: Optional[ResourceId] = Field(default=None, alias="resourceId")
    thumbnails: Optional[ThumbnailDetails] = None
    title: Optional[StrictStr] = Field(default=None, description="The subscription's title.")
    __properties: ClassVar[List[str]] = ["channelId", "channelTitle", "description", "publishedAt", "resourceId", "thumbnails", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionSnippet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of resource_id
        if self.resource_id:
            _dict['resourceId'] = self.resource_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of thumbnails
        if self.thumbnails:
            _dict['thumbnails'] = self.thumbnails.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionSnippet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channelId": obj.get("channelId"),
            "channelTitle": obj.get("channelTitle"),
            "description": obj.get("description"),
            "publishedAt": obj.get("publishedAt"),
            "resourceId": ResourceId.from_dict(obj["resourceId"]) if obj.get("resourceId") is not None else None,
            "thumbnails": ThumbnailDetails.from_dict(obj["thumbnails"]) if obj.get("thumbnails") is not None else None,
            "title": obj.get("title")
        })
        return _obj



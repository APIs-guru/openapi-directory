# coding: utf-8

"""
    Cloud Trace API

    Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.module import Module
from openapi_client.models.truncatable_string import TruncatableString
from typing import Optional, Set
from typing_extensions import Self

class StackFrame(BaseModel):
    """
    Represents a single stack frame in a stack trace.
    """ # noqa: E501
    column_number: Optional[StrictStr] = Field(default=None, description="The column number where the function call appears, if available. This is important in JavaScript because of its anonymous functions.", alias="columnNumber")
    file_name: Optional[TruncatableString] = Field(default=None, alias="fileName")
    function_name: Optional[TruncatableString] = Field(default=None, alias="functionName")
    line_number: Optional[StrictStr] = Field(default=None, description="The line number in `file_name` where the function call appears.", alias="lineNumber")
    load_module: Optional[Module] = Field(default=None, alias="loadModule")
    original_function_name: Optional[TruncatableString] = Field(default=None, alias="originalFunctionName")
    source_version: Optional[TruncatableString] = Field(default=None, alias="sourceVersion")
    __properties: ClassVar[List[str]] = ["columnNumber", "fileName", "functionName", "lineNumber", "loadModule", "originalFunctionName", "sourceVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StackFrame from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of file_name
        if self.file_name:
            _dict['fileName'] = self.file_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of function_name
        if self.function_name:
            _dict['functionName'] = self.function_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of load_module
        if self.load_module:
            _dict['loadModule'] = self.load_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of original_function_name
        if self.original_function_name:
            _dict['originalFunctionName'] = self.original_function_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_version
        if self.source_version:
            _dict['sourceVersion'] = self.source_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StackFrame from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "columnNumber": obj.get("columnNumber"),
            "fileName": TruncatableString.from_dict(obj["fileName"]) if obj.get("fileName") is not None else None,
            "functionName": TruncatableString.from_dict(obj["functionName"]) if obj.get("functionName") is not None else None,
            "lineNumber": obj.get("lineNumber"),
            "loadModule": Module.from_dict(obj["loadModule"]) if obj.get("loadModule") is not None else None,
            "originalFunctionName": TruncatableString.from_dict(obj["originalFunctionName"]) if obj.get("originalFunctionName") is not None else None,
            "sourceVersion": TruncatableString.from_dict(obj["sourceVersion"]) if obj.get("sourceVersion") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Trace API

    Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.time_event import TimeEvent
from typing import Optional, Set
from typing_extensions import Self

class TimeEvents(BaseModel):
    """
    A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation on the span, consisting of either user-supplied key:value pairs, or details of a message sent/received between Spans.
    """ # noqa: E501
    dropped_annotations_count: Optional[StrictInt] = Field(default=None, description="The number of dropped annotations in all the included time events. If the value is 0, then no annotations were dropped.", alias="droppedAnnotationsCount")
    dropped_message_events_count: Optional[StrictInt] = Field(default=None, description="The number of dropped message events in all the included time events. If the value is 0, then no message events were dropped.", alias="droppedMessageEventsCount")
    time_event: Optional[List[TimeEvent]] = Field(default=None, description="A collection of `TimeEvent`s.", alias="timeEvent")
    __properties: ClassVar[List[str]] = ["droppedAnnotationsCount", "droppedMessageEventsCount", "timeEvent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimeEvents from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in time_event (list)
        _items = []
        if self.time_event:
            for _item_time_event in self.time_event:
                if _item_time_event:
                    _items.append(_item_time_event.to_dict())
            _dict['timeEvent'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimeEvents from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "droppedAnnotationsCount": obj.get("droppedAnnotationsCount"),
            "droppedMessageEventsCount": obj.get("droppedMessageEventsCount"),
            "timeEvent": [TimeEvent.from_dict(_item) for _item in obj["timeEvent"]] if obj.get("timeEvent") is not None else None
        })
        return _obj



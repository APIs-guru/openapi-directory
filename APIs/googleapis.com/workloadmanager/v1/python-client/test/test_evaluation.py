# coding: utf-8

"""
    Workload Manager API

    Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.evaluation import Evaluation

class TestEvaluation(unittest.TestCase):
    """Evaluation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Evaluation:
        """Test Evaluation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Evaluation`
        """
        model = Evaluation()
        if include_optional:
            return Evaluation(
                big_query_destination = openapi_client.models.big_query_destination.BigQueryDestination(
                    create_new_results_table = True, 
                    destination_dataset = '', ),
                create_time = '',
                custom_rules_bucket = '',
                description = '',
                labels = {
                    'key' : ''
                    },
                name = '',
                resource_filter = openapi_client.models.resource_filter.ResourceFilter(
                    gce_instance_filter = openapi_client.models.gce_instance_filter.GceInstanceFilter(
                        service_accounts = [
                            ''
                            ], ), 
                    inclusion_labels = {
                        'key' : ''
                        }, 
                    resource_id_patterns = [
                        ''
                        ], 
                    scopes = [
                        ''
                        ], ),
                resource_status = openapi_client.models.resource_status.ResourceStatus(
                    rules_newer_versions = [
                        ''
                        ], 
                    state = 'STATE_UNSPECIFIED', ),
                rule_names = [
                    ''
                    ],
                rule_versions = [
                    ''
                    ],
                schedule = '',
                update_time = ''
            )
        else:
            return Evaluation(
        )
        """

    def testEvaluation(self):
        """Test Evaluation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

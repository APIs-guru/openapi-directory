# coding: utf-8

"""
    Workload Manager API

    Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.insight import Insight

class TestInsight(unittest.TestCase):
    """Insight unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Insight:
        """Test Insight
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Insight`
        """
        model = Insight()
        if include_optional:
            return Insight(
                instance_id = '',
                sap_discovery = openapi_client.models.sap_discovery.SapDiscovery(
                    application_layer = openapi_client.models.sap_discovery_component.SapDiscoveryComponent(
                        application_properties = openapi_client.models.sap_discovery_component_application_properties.SapDiscoveryComponentApplicationProperties(
                            abap = True, 
                            application_type = 'APPLICATION_TYPE_UNSPECIFIED', 
                            ascs_uri = '', 
                            kernel_version = '', 
                            nfs_uri = '', ), 
                        database_properties = openapi_client.models.sap_discovery_component_database_properties.SapDiscoveryComponentDatabaseProperties(
                            database_type = 'DATABASE_TYPE_UNSPECIFIED', 
                            database_version = '', 
                            primary_instance_uri = '', 
                            shared_nfs_uri = '', ), 
                        ha_hosts = [
                            ''
                            ], 
                        host_project = '', 
                        resources = [
                            openapi_client.models.sap_discovery_resource.SapDiscoveryResource(
                                instance_properties = openapi_client.models.sap_discovery_resource_instance_properties.SapDiscoveryResourceInstanceProperties(
                                    cluster_instances = [
                                        ''
                                        ], 
                                    virtual_hostname = '', ), 
                                related_resources = [
                                    ''
                                    ], 
                                resource_kind = 'RESOURCE_KIND_UNSPECIFIED', 
                                resource_type = 'RESOURCE_TYPE_UNSPECIFIED', 
                                resource_uri = '', 
                                update_time = '', )
                            ], 
                        sid = '', 
                        topology_type = 'TOPOLOGY_TYPE_UNSPECIFIED', ), 
                    database_layer = openapi_client.models.sap_discovery_component.SapDiscoveryComponent(
                        host_project = '', 
                        sid = '', 
                        topology_type = 'TOPOLOGY_TYPE_UNSPECIFIED', ), 
                    metadata = openapi_client.models.sap_discovery_metadata.SapDiscoveryMetadata(
                        customer_region = '', 
                        defined_system = '', 
                        environment_type = '', 
                        sap_product = '', ), 
                    project_number = '', 
                    system_id = '', 
                    update_time = '', 
                    workload_properties = openapi_client.models.sap_discovery_workload_properties.SapDiscoveryWorkloadProperties(
                        product_versions = [
                            openapi_client.models.sap_discovery_workload_properties_product_version.SapDiscoveryWorkloadPropertiesProductVersion(
                                name = '', 
                                version = '', )
                            ], 
                        software_component_versions = [
                            openapi_client.models.sap_discovery_workload_properties_software_component_properties.SapDiscoveryWorkloadPropertiesSoftwareComponentProperties(
                                ext_version = '', 
                                name = '', 
                                type = '', 
                                version = '', )
                            ], ), ),
                sap_validation = openapi_client.models.sap_validation.SapValidation(
                    project_id = '', 
                    validation_details = [
                        openapi_client.models.sap_validation_validation_detail.SapValidationValidationDetail(
                            details = {
                                'key' : ''
                                }, 
                            is_present = True, 
                            sap_validation_type = 'SAP_VALIDATION_TYPE_UNSPECIFIED', )
                        ], 
                    zone = '', ),
                sent_time = '',
                sqlserver_validation = openapi_client.models.sqlserver_validation.SqlserverValidation(
                    agent_version = '', 
                    instance = '', 
                    project_id = '', 
                    validation_details = [
                        openapi_client.models.sqlserver_validation_validation_detail.SqlserverValidationValidationDetail(
                            details = [
                                openapi_client.models.sqlserver_validation_details.SqlserverValidationDetails(
                                    fields = {
                                        'key' : ''
                                        }, )
                                ], 
                            type = 'SQLSERVER_VALIDATION_TYPE_UNSPECIFIED', )
                        ], )
            )
        else:
            return Insight(
        )
        """

    def testInsight(self):
        """Test Insight"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

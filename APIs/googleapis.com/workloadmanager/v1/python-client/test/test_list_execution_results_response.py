# coding: utf-8

"""
    Workload Manager API

    Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_execution_results_response import ListExecutionResultsResponse

class TestListExecutionResultsResponse(unittest.TestCase):
    """ListExecutionResultsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListExecutionResultsResponse:
        """Test ListExecutionResultsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListExecutionResultsResponse`
        """
        model = ListExecutionResultsResponse()
        if include_optional:
            return ListExecutionResultsResponse(
                execution_results = [
                    openapi_client.models.execution_result.ExecutionResult(
                        documentation_url = '', 
                        resource = openapi_client.models.resource.Resource(
                            name = '', 
                            service_account = '', 
                            type = '', ), 
                        rule = '', 
                        severity = '', 
                        violation_details = openapi_client.models.violation_details.ViolationDetails(
                            asset = '', 
                            observed = {
                                'key' : ''
                                }, 
                            service_account = '', ), 
                        violation_message = '', )
                    ],
                next_page_token = ''
            )
        else:
            return ListExecutionResultsResponse(
        )
        """

    def testListExecutionResultsResponse(self):
        """Test ListExecutionResultsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

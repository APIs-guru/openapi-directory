# coding: utf-8

"""
    Workload Manager API

    Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.sap_discovery import SapDiscovery

class TestSapDiscovery(unittest.TestCase):
    """SapDiscovery unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SapDiscovery:
        """Test SapDiscovery
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SapDiscovery`
        """
        model = SapDiscovery()
        if include_optional:
            return SapDiscovery(
                application_layer = openapi_client.models.sap_discovery_component.SapDiscoveryComponent(
                    application_properties = openapi_client.models.sap_discovery_component_application_properties.SapDiscoveryComponentApplicationProperties(
                        abap = True, 
                        application_type = 'APPLICATION_TYPE_UNSPECIFIED', 
                        ascs_uri = '', 
                        kernel_version = '', 
                        nfs_uri = '', ), 
                    database_properties = openapi_client.models.sap_discovery_component_database_properties.SapDiscoveryComponentDatabaseProperties(
                        database_type = 'DATABASE_TYPE_UNSPECIFIED', 
                        database_version = '', 
                        primary_instance_uri = '', 
                        shared_nfs_uri = '', ), 
                    ha_hosts = [
                        ''
                        ], 
                    host_project = '', 
                    resources = [
                        openapi_client.models.sap_discovery_resource.SapDiscoveryResource(
                            instance_properties = openapi_client.models.sap_discovery_resource_instance_properties.SapDiscoveryResourceInstanceProperties(
                                cluster_instances = [
                                    ''
                                    ], 
                                virtual_hostname = '', ), 
                            related_resources = [
                                ''
                                ], 
                            resource_kind = 'RESOURCE_KIND_UNSPECIFIED', 
                            resource_type = 'RESOURCE_TYPE_UNSPECIFIED', 
                            resource_uri = '', 
                            update_time = '', )
                        ], 
                    sid = '', 
                    topology_type = 'TOPOLOGY_TYPE_UNSPECIFIED', ),
                database_layer = openapi_client.models.sap_discovery_component.SapDiscoveryComponent(
                    application_properties = openapi_client.models.sap_discovery_component_application_properties.SapDiscoveryComponentApplicationProperties(
                        abap = True, 
                        application_type = 'APPLICATION_TYPE_UNSPECIFIED', 
                        ascs_uri = '', 
                        kernel_version = '', 
                        nfs_uri = '', ), 
                    database_properties = openapi_client.models.sap_discovery_component_database_properties.SapDiscoveryComponentDatabaseProperties(
                        database_type = 'DATABASE_TYPE_UNSPECIFIED', 
                        database_version = '', 
                        primary_instance_uri = '', 
                        shared_nfs_uri = '', ), 
                    ha_hosts = [
                        ''
                        ], 
                    host_project = '', 
                    resources = [
                        openapi_client.models.sap_discovery_resource.SapDiscoveryResource(
                            instance_properties = openapi_client.models.sap_discovery_resource_instance_properties.SapDiscoveryResourceInstanceProperties(
                                cluster_instances = [
                                    ''
                                    ], 
                                virtual_hostname = '', ), 
                            related_resources = [
                                ''
                                ], 
                            resource_kind = 'RESOURCE_KIND_UNSPECIFIED', 
                            resource_type = 'RESOURCE_TYPE_UNSPECIFIED', 
                            resource_uri = '', 
                            update_time = '', )
                        ], 
                    sid = '', 
                    topology_type = 'TOPOLOGY_TYPE_UNSPECIFIED', ),
                metadata = openapi_client.models.sap_discovery_metadata.SapDiscoveryMetadata(
                    customer_region = '', 
                    defined_system = '', 
                    environment_type = '', 
                    sap_product = '', ),
                project_number = '',
                system_id = '',
                update_time = '',
                workload_properties = openapi_client.models.sap_discovery_workload_properties.SapDiscoveryWorkloadProperties(
                    product_versions = [
                        openapi_client.models.sap_discovery_workload_properties_product_version.SapDiscoveryWorkloadPropertiesProductVersion(
                            name = '', 
                            version = '', )
                        ], 
                    software_component_versions = [
                        openapi_client.models.sap_discovery_workload_properties_software_component_properties.SapDiscoveryWorkloadPropertiesSoftwareComponentProperties(
                            ext_version = '', 
                            name = '', 
                            type = '', 
                            version = '', )
                        ], )
            )
        else:
            return SapDiscovery(
        )
        """

    def testSapDiscovery(self):
        """Test SapDiscovery"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

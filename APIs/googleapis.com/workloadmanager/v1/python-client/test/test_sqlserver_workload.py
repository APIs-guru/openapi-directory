# coding: utf-8

"""
    Workload Manager API

    Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.sqlserver_workload import SqlserverWorkload

class TestSqlserverWorkload(unittest.TestCase):
    """SqlserverWorkload unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SqlserverWorkload:
        """Test SqlserverWorkload
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SqlserverWorkload`
        """
        model = SqlserverWorkload()
        if include_optional:
            return SqlserverWorkload(
                ags = [
                    openapi_client.models.availability_group.AvailabilityGroup(
                        databases = [
                            ''
                            ], 
                        name = '', 
                        primary_server = '', 
                        secondary_servers = [
                            ''
                            ], )
                    ],
                cluster = openapi_client.models.cluster.Cluster(
                    nodes = [
                        ''
                        ], 
                    witness_server = '', ),
                databases = [
                    openapi_client.models.database.Database(
                        backup_file = '', 
                        backup_schedule = '', 
                        host_vm = '', 
                        name = '', )
                    ],
                load_balancer_server = openapi_client.models.load_balancer_server.LoadBalancerServer(
                    ip = '', 
                    vm = '', )
            )
        else:
            return SqlserverWorkload(
        )
        """

    def testSqlserverWorkload(self):
        """Test SqlserverWorkload"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Workload Manager API

    Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.workload_profile import WorkloadProfile

class TestWorkloadProfile(unittest.TestCase):
    """WorkloadProfile unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WorkloadProfile:
        """Test WorkloadProfile
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WorkloadProfile`
        """
        model = WorkloadProfile()
        if include_optional:
            return WorkloadProfile(
                application = openapi_client.models.layer.Layer(
                    application_type = '', 
                    database_type = '', 
                    instances = [
                        openapi_client.models.instance.Instance(
                            name = '', 
                            region = '', 
                            status = 'INSTANCESTATE_UNSPECIFIED', )
                        ], 
                    sid = '', ),
                ascs = openapi_client.models.layer.Layer(
                    application_type = '', 
                    database_type = '', 
                    instances = [
                        openapi_client.models.instance.Instance(
                            name = '', 
                            region = '', 
                            status = 'INSTANCESTATE_UNSPECIFIED', )
                        ], 
                    sid = '', ),
                database = openapi_client.models.layer.Layer(
                    application_type = '', 
                    database_type = '', 
                    instances = [
                        openapi_client.models.instance.Instance(
                            name = '', 
                            region = '', 
                            status = 'INSTANCESTATE_UNSPECIFIED', )
                        ], 
                    sid = '', ),
                labels = {
                    'key' : ''
                    },
                name = '',
                refreshed_time = '',
                sap_workload = openapi_client.models.sap_workload.SapWorkload(
                    application = openapi_client.models.sap_component.SapComponent(
                        resources = [
                            openapi_client.models.cloud_resource.CloudResource(
                                kind = 'RESOURCE_KIND_UNSPECIFIED', 
                                name = '', )
                            ], 
                        sid = '', ), 
                    database = openapi_client.models.sap_component.SapComponent(
                        sid = '', ), 
                    metadata = {
                        'key' : ''
                        }, ),
                sqlserver_workload = openapi_client.models.sqlserver_workload.SqlserverWorkload(
                    ags = [
                        openapi_client.models.availability_group.AvailabilityGroup(
                            databases = [
                                ''
                                ], 
                            name = '', 
                            primary_server = '', 
                            secondary_servers = [
                                ''
                                ], )
                        ], 
                    cluster = openapi_client.models.cluster.Cluster(
                        nodes = [
                            ''
                            ], 
                        witness_server = '', ), 
                    databases = [
                        openapi_client.models.database.Database(
                            backup_file = '', 
                            backup_schedule = '', 
                            host_vm = '', 
                            name = '', )
                        ], 
                    load_balancer_server = openapi_client.models.load_balancer_server.LoadBalancerServer(
                        ip = '', 
                        vm = '', ), ),
                state = 'STATE_UNSPECIFIED',
                three_tier_workload = openapi_client.models.three_tier_workload.ThreeTierWorkload(
                    api_layer = openapi_client.models.api_layer_server.APILayerServer(
                        name = '', 
                        os_version = '', 
                        resources = [
                            openapi_client.models.cloud_resource.CloudResource(
                                kind = 'RESOURCE_KIND_UNSPECIFIED', 
                                name = '', )
                            ], ), 
                    backend = openapi_client.models.backend_server.BackendServer(
                        backup_file = '', 
                        backup_schedule = '', 
                        name = '', 
                        os_version = '', ), 
                    endpoint = '', 
                    frontend = openapi_client.models.front_end_server.FrontEndServer(
                        name = '', 
                        os_version = '', ), ),
                workload_type = 'WORKLOAD_TYPE_UNSPECIFIED'
            )
        else:
            return WorkloadProfile(
        )
        """

    def testWorkloadProfile(self):
        """Test WorkloadProfile"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

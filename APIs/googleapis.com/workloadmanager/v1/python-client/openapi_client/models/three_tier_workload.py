# coding: utf-8

"""
    Workload Manager API

    Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_layer_server import APILayerServer
from openapi_client.models.backend_server import BackendServer
from openapi_client.models.front_end_server import FrontEndServer
from typing import Optional, Set
from typing_extensions import Self

class ThreeTierWorkload(BaseModel):
    """
    The body of three tier workload
    """ # noqa: E501
    api_layer: Optional[APILayerServer] = Field(default=None, alias="apiLayer")
    backend: Optional[BackendServer] = None
    endpoint: Optional[StrictStr] = Field(default=None, description="Output only. the workload endpoint")
    frontend: Optional[FrontEndServer] = None
    __properties: ClassVar[List[str]] = ["apiLayer", "backend", "endpoint", "frontend"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ThreeTierWorkload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "endpoint",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of api_layer
        if self.api_layer:
            _dict['apiLayer'] = self.api_layer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of backend
        if self.backend:
            _dict['backend'] = self.backend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of frontend
        if self.frontend:
            _dict['frontend'] = self.frontend.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ThreeTierWorkload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiLayer": APILayerServer.from_dict(obj["apiLayer"]) if obj.get("apiLayer") is not None else None,
            "backend": BackendServer.from_dict(obj["backend"]) if obj.get("backend") is not None else None,
            "endpoint": obj.get("endpoint"),
            "frontend": FrontEndServer.from_dict(obj["frontend"]) if obj.get("frontend") is not None else None
        })
        return _obj



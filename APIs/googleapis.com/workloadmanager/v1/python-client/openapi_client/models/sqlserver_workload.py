# coding: utf-8

"""
    Workload Manager API

    Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.availability_group import AvailabilityGroup
from openapi_client.models.cluster import Cluster
from openapi_client.models.database import Database
from openapi_client.models.load_balancer_server import LoadBalancerServer
from typing import Optional, Set
from typing_extensions import Self

class SqlserverWorkload(BaseModel):
    """
    The body of sqlserver workload
    """ # noqa: E501
    ags: Optional[List[AvailabilityGroup]] = Field(default=None, description="Output only. The availability groups for sqlserver")
    cluster: Optional[Cluster] = None
    databases: Optional[List[Database]] = Field(default=None, description="Output only. The databases for sqlserver")
    load_balancer_server: Optional[LoadBalancerServer] = Field(default=None, alias="loadBalancerServer")
    __properties: ClassVar[List[str]] = ["ags", "cluster", "databases", "loadBalancerServer"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SqlserverWorkload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "ags",
            "databases",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ags (list)
        _items = []
        if self.ags:
            for _item_ags in self.ags:
                if _item_ags:
                    _items.append(_item_ags.to_dict())
            _dict['ags'] = _items
        # override the default output from pydantic by calling `to_dict()` of cluster
        if self.cluster:
            _dict['cluster'] = self.cluster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in databases (list)
        _items = []
        if self.databases:
            for _item_databases in self.databases:
                if _item_databases:
                    _items.append(_item_databases.to_dict())
            _dict['databases'] = _items
        # override the default output from pydantic by calling `to_dict()` of load_balancer_server
        if self.load_balancer_server:
            _dict['loadBalancerServer'] = self.load_balancer_server.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SqlserverWorkload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ags": [AvailabilityGroup.from_dict(_item) for _item in obj["ags"]] if obj.get("ags") is not None else None,
            "cluster": Cluster.from_dict(obj["cluster"]) if obj.get("cluster") is not None else None,
            "databases": [Database.from_dict(_item) for _item in obj["databases"]] if obj.get("databases") is not None else None,
            "loadBalancerServer": LoadBalancerServer.from_dict(obj["loadBalancerServer"]) if obj.get("loadBalancerServer") is not None else None
        })
        return _obj



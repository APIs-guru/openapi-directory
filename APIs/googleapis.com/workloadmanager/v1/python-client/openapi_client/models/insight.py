# coding: utf-8

"""
    Workload Manager API

    Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sap_discovery import SapDiscovery
from openapi_client.models.sap_validation import SapValidation
from openapi_client.models.sqlserver_validation import SqlserverValidation
from typing import Optional, Set
from typing_extensions import Self

class Insight(BaseModel):
    """
    A presentation of host resource usage where the workload runs.
    """ # noqa: E501
    instance_id: Optional[StrictStr] = Field(default=None, description="Required. The instance id where the insight is generated from", alias="instanceId")
    sap_discovery: Optional[SapDiscovery] = Field(default=None, alias="sapDiscovery")
    sap_validation: Optional[SapValidation] = Field(default=None, alias="sapValidation")
    sent_time: Optional[StrictStr] = Field(default=None, description="Output only. [Output only] Create time stamp", alias="sentTime")
    sqlserver_validation: Optional[SqlserverValidation] = Field(default=None, alias="sqlserverValidation")
    __properties: ClassVar[List[str]] = ["instanceId", "sapDiscovery", "sapValidation", "sentTime", "sqlserverValidation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Insight from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "sent_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sap_discovery
        if self.sap_discovery:
            _dict['sapDiscovery'] = self.sap_discovery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sap_validation
        if self.sap_validation:
            _dict['sapValidation'] = self.sap_validation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sqlserver_validation
        if self.sqlserver_validation:
            _dict['sqlserverValidation'] = self.sqlserver_validation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Insight from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "instanceId": obj.get("instanceId"),
            "sapDiscovery": SapDiscovery.from_dict(obj["sapDiscovery"]) if obj.get("sapDiscovery") is not None else None,
            "sapValidation": SapValidation.from_dict(obj["sapValidation"]) if obj.get("sapValidation") is not None else None,
            "sentTime": obj.get("sentTime"),
            "sqlserverValidation": SqlserverValidation.from_dict(obj["sqlserverValidation"]) if obj.get("sqlserverValidation") is not None else None
        })
        return _obj



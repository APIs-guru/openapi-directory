# coding: utf-8

"""
    Workload Manager API

    Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.big_query_destination import BigQueryDestination
from openapi_client.models.resource_filter import ResourceFilter
from openapi_client.models.resource_status import ResourceStatus
from typing import Optional, Set
from typing_extensions import Self

class Evaluation(BaseModel):
    """
    LINT.IfChange Message describing Evaluation object
    """ # noqa: E501
    big_query_destination: Optional[BigQueryDestination] = Field(default=None, alias="bigQueryDestination")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. [Output only] Create time stamp", alias="createTime")
    custom_rules_bucket: Optional[StrictStr] = Field(default=None, description="The Cloud Storage bucket name for custom rules.", alias="customRulesBucket")
    description: Optional[StrictStr] = Field(default=None, description="Description of the Evaluation")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels as key value pairs")
    name: Optional[StrictStr] = Field(default=None, description="name of resource names have the form 'projects/{project_id}/locations/{location_id}/evaluations/{evaluation_id}'")
    resource_filter: Optional[ResourceFilter] = Field(default=None, alias="resourceFilter")
    resource_status: Optional[ResourceStatus] = Field(default=None, alias="resourceStatus")
    rule_names: Optional[List[StrictStr]] = Field(default=None, description="the name of the rule", alias="ruleNames")
    rule_versions: Optional[List[StrictStr]] = Field(default=None, description="Output only. [Output only] The updated rule ids if exist.", alias="ruleVersions")
    schedule: Optional[StrictStr] = Field(default=None, description="crontab format schedule for scheduled evaluation, currently only support the following schedule: \"0 */1 * * *\", \"0 */6 * * *\", \"0 */12 * * *\", \"0 0 */1 * *\", \"0 0 */7 * *\",")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. [Output only] Update time stamp", alias="updateTime")
    __properties: ClassVar[List[str]] = ["bigQueryDestination", "createTime", "customRulesBucket", "description", "labels", "name", "resourceFilter", "resourceStatus", "ruleNames", "ruleVersions", "schedule", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Evaluation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "rule_versions",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of big_query_destination
        if self.big_query_destination:
            _dict['bigQueryDestination'] = self.big_query_destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_filter
        if self.resource_filter:
            _dict['resourceFilter'] = self.resource_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_status
        if self.resource_status:
            _dict['resourceStatus'] = self.resource_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Evaluation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bigQueryDestination": BigQueryDestination.from_dict(obj["bigQueryDestination"]) if obj.get("bigQueryDestination") is not None else None,
            "createTime": obj.get("createTime"),
            "customRulesBucket": obj.get("customRulesBucket"),
            "description": obj.get("description"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "resourceFilter": ResourceFilter.from_dict(obj["resourceFilter"]) if obj.get("resourceFilter") is not None else None,
            "resourceStatus": ResourceStatus.from_dict(obj["resourceStatus"]) if obj.get("resourceStatus") is not None else None,
            "ruleNames": obj.get("ruleNames"),
            "ruleVersions": obj.get("ruleVersions"),
            "schedule": obj.get("schedule"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



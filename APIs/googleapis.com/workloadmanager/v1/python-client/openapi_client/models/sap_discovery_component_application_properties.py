# coding: utf-8

"""
    Workload Manager API

    Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SapDiscoveryComponentApplicationProperties(BaseModel):
    """
    A set of properties describing an SAP Application layer.
    """ # noqa: E501
    abap: Optional[StrictBool] = Field(default=None, description="Optional. Indicates whether this is a Java or ABAP Netweaver instance. true means it is ABAP, false means it is Java.")
    application_type: Optional[StrictStr] = Field(default=None, description="Required. Type of the application. Netweaver, etc.", alias="applicationType")
    ascs_uri: Optional[StrictStr] = Field(default=None, description="Optional. Resource URI of the recognized ASCS host of the application.", alias="ascsUri")
    kernel_version: Optional[StrictStr] = Field(default=None, description="Optional. Kernel version for Netweaver running in the system.", alias="kernelVersion")
    nfs_uri: Optional[StrictStr] = Field(default=None, description="Optional. Resource URI of the recognized shared NFS of the application. May be empty if the application server has only a single node.", alias="nfsUri")
    __properties: ClassVar[List[str]] = ["abap", "applicationType", "ascsUri", "kernelVersion", "nfsUri"]

    @field_validator('application_type')
    def application_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APPLICATION_TYPE_UNSPECIFIED', 'NETWEAVER']):
            raise ValueError("must be one of enum values ('APPLICATION_TYPE_UNSPECIFIED', 'NETWEAVER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SapDiscoveryComponentApplicationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SapDiscoveryComponentApplicationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "abap": obj.get("abap"),
            "applicationType": obj.get("applicationType"),
            "ascsUri": obj.get("ascsUri"),
            "kernelVersion": obj.get("kernelVersion"),
            "nfsUri": obj.get("nfsUri")
        })
        return _obj



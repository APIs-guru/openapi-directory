# coding: utf-8

"""
    Workload Manager API

    Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sap_discovery_component_application_properties import SapDiscoveryComponentApplicationProperties
from openapi_client.models.sap_discovery_component_database_properties import SapDiscoveryComponentDatabaseProperties
from openapi_client.models.sap_discovery_resource import SapDiscoveryResource
from typing import Optional, Set
from typing_extensions import Self

class SapDiscoveryComponent(BaseModel):
    """
    Message describing the system component.
    """ # noqa: E501
    application_properties: Optional[SapDiscoveryComponentApplicationProperties] = Field(default=None, alias="applicationProperties")
    database_properties: Optional[SapDiscoveryComponentDatabaseProperties] = Field(default=None, alias="databaseProperties")
    ha_hosts: Optional[List[StrictStr]] = Field(default=None, description="Optional. A list of host URIs that are part of the HA configuration if present. An empty list indicates the component is not configured for HA.", alias="haHosts")
    host_project: Optional[StrictStr] = Field(default=None, description="Required. Pantheon Project in which the resources reside.", alias="hostProject")
    resources: Optional[List[SapDiscoveryResource]] = Field(default=None, description="Optional. The resources in a component.")
    sid: Optional[StrictStr] = Field(default=None, description="Optional. The SAP identifier, used by the SAP software and helps differentiate systems for customers.")
    topology_type: Optional[StrictStr] = Field(default=None, description="Optional. The detected topology of the component.", alias="topologyType")
    __properties: ClassVar[List[str]] = ["applicationProperties", "databaseProperties", "haHosts", "hostProject", "resources", "sid", "topologyType"]

    @field_validator('topology_type')
    def topology_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TOPOLOGY_TYPE_UNSPECIFIED', 'TOPOLOGY_SCALE_UP', 'TOPOLOGY_SCALE_OUT']):
            raise ValueError("must be one of enum values ('TOPOLOGY_TYPE_UNSPECIFIED', 'TOPOLOGY_SCALE_UP', 'TOPOLOGY_SCALE_OUT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SapDiscoveryComponent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of application_properties
        if self.application_properties:
            _dict['applicationProperties'] = self.application_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of database_properties
        if self.database_properties:
            _dict['databaseProperties'] = self.database_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item_resources in self.resources:
                if _item_resources:
                    _items.append(_item_resources.to_dict())
            _dict['resources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SapDiscoveryComponent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationProperties": SapDiscoveryComponentApplicationProperties.from_dict(obj["applicationProperties"]) if obj.get("applicationProperties") is not None else None,
            "databaseProperties": SapDiscoveryComponentDatabaseProperties.from_dict(obj["databaseProperties"]) if obj.get("databaseProperties") is not None else None,
            "haHosts": obj.get("haHosts"),
            "hostProject": obj.get("hostProject"),
            "resources": [SapDiscoveryResource.from_dict(_item) for _item in obj["resources"]] if obj.get("resources") is not None else None,
            "sid": obj.get("sid"),
            "topologyType": obj.get("topologyType")
        })
        return _obj



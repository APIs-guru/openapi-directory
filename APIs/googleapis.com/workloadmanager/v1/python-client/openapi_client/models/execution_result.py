# coding: utf-8

"""
    Workload Manager API

    Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource import Resource
from openapi_client.models.violation_details import ViolationDetails
from typing import Optional, Set
from typing_extensions import Self

class ExecutionResult(BaseModel):
    """
    Message describing the result of an execution
    """ # noqa: E501
    documentation_url: Optional[StrictStr] = Field(default=None, description="the document url of the rule", alias="documentationUrl")
    resource: Optional[Resource] = None
    rule: Optional[StrictStr] = Field(default=None, description="the rule which violate in execution")
    severity: Optional[StrictStr] = Field(default=None, description="severity of violation")
    violation_details: Optional[ViolationDetails] = Field(default=None, alias="violationDetails")
    violation_message: Optional[StrictStr] = Field(default=None, description="the violation message of an execution", alias="violationMessage")
    __properties: ClassVar[List[str]] = ["documentationUrl", "resource", "rule", "severity", "violationDetails", "violationMessage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExecutionResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of resource
        if self.resource:
            _dict['resource'] = self.resource.to_dict()
        # override the default output from pydantic by calling `to_dict()` of violation_details
        if self.violation_details:
            _dict['violationDetails'] = self.violation_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExecutionResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "documentationUrl": obj.get("documentationUrl"),
            "resource": Resource.from_dict(obj["resource"]) if obj.get("resource") is not None else None,
            "rule": obj.get("rule"),
            "severity": obj.get("severity"),
            "violationDetails": ViolationDetails.from_dict(obj["violationDetails"]) if obj.get("violationDetails") is not None else None,
            "violationMessage": obj.get("violationMessage")
        })
        return _obj



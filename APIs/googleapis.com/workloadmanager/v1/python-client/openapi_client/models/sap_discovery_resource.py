# coding: utf-8

"""
    Workload Manager API

    Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sap_discovery_resource_instance_properties import SapDiscoveryResourceInstanceProperties
from typing import Optional, Set
from typing_extensions import Self

class SapDiscoveryResource(BaseModel):
    """
    Message describing a resource.
    """ # noqa: E501
    instance_properties: Optional[SapDiscoveryResourceInstanceProperties] = Field(default=None, alias="instanceProperties")
    related_resources: Optional[List[StrictStr]] = Field(default=None, description="Optional. A list of resource URIs related to this resource.", alias="relatedResources")
    resource_kind: Optional[StrictStr] = Field(default=None, description="Required. ComputeInstance, ComputeDisk, VPC, Bare Metal server, etc.", alias="resourceKind")
    resource_type: Optional[StrictStr] = Field(default=None, description="Required. The type of this resource.", alias="resourceType")
    resource_uri: Optional[StrictStr] = Field(default=None, description="Required. URI of the resource, includes project, location, and name.", alias="resourceUri")
    update_time: Optional[StrictStr] = Field(default=None, description="Required. Unix timestamp of when this resource last had its discovery data updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["instanceProperties", "relatedResources", "resourceKind", "resourceType", "resourceUri", "updateTime"]

    @field_validator('resource_kind')
    def resource_kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESOURCE_KIND_UNSPECIFIED', 'RESOURCE_KIND_INSTANCE', 'RESOURCE_KIND_DISK', 'RESOURCE_KIND_ADDRESS', 'RESOURCE_KIND_FILESTORE', 'RESOURCE_KIND_HEALTH_CHECK', 'RESOURCE_KIND_FORWARDING_RULE', 'RESOURCE_KIND_BACKEND_SERVICE', 'RESOURCE_KIND_SUBNETWORK', 'RESOURCE_KIND_NETWORK', 'RESOURCE_KIND_PUBLIC_ADDRESS', 'RESOURCE_KIND_INSTANCE_GROUP']):
            raise ValueError("must be one of enum values ('RESOURCE_KIND_UNSPECIFIED', 'RESOURCE_KIND_INSTANCE', 'RESOURCE_KIND_DISK', 'RESOURCE_KIND_ADDRESS', 'RESOURCE_KIND_FILESTORE', 'RESOURCE_KIND_HEALTH_CHECK', 'RESOURCE_KIND_FORWARDING_RULE', 'RESOURCE_KIND_BACKEND_SERVICE', 'RESOURCE_KIND_SUBNETWORK', 'RESOURCE_KIND_NETWORK', 'RESOURCE_KIND_PUBLIC_ADDRESS', 'RESOURCE_KIND_INSTANCE_GROUP')")
        return value

    @field_validator('resource_type')
    def resource_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESOURCE_TYPE_UNSPECIFIED', 'RESOURCE_TYPE_COMPUTE', 'RESOURCE_TYPE_STORAGE', 'RESOURCE_TYPE_NETWORK']):
            raise ValueError("must be one of enum values ('RESOURCE_TYPE_UNSPECIFIED', 'RESOURCE_TYPE_COMPUTE', 'RESOURCE_TYPE_STORAGE', 'RESOURCE_TYPE_NETWORK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SapDiscoveryResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of instance_properties
        if self.instance_properties:
            _dict['instanceProperties'] = self.instance_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SapDiscoveryResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "instanceProperties": SapDiscoveryResourceInstanceProperties.from_dict(obj["instanceProperties"]) if obj.get("instanceProperties") is not None else None,
            "relatedResources": obj.get("relatedResources"),
            "resourceKind": obj.get("resourceKind"),
            "resourceType": obj.get("resourceType"),
            "resourceUri": obj.get("resourceUri"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



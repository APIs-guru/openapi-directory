# coding: utf-8

"""
    Workload Manager API

    Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sap_discovery_component import SapDiscoveryComponent
from openapi_client.models.sap_discovery_metadata import SapDiscoveryMetadata
from openapi_client.models.sap_discovery_workload_properties import SapDiscoveryWorkloadProperties
from typing import Optional, Set
from typing_extensions import Self

class SapDiscovery(BaseModel):
    """
    The schema of SAP system discovery data.
    """ # noqa: E501
    application_layer: Optional[SapDiscoveryComponent] = Field(default=None, alias="applicationLayer")
    database_layer: Optional[SapDiscoveryComponent] = Field(default=None, alias="databaseLayer")
    metadata: Optional[SapDiscoveryMetadata] = None
    project_number: Optional[StrictStr] = Field(default=None, description="Optional. The GCP project number that this SapSystem belongs to.", alias="projectNumber")
    system_id: Optional[StrictStr] = Field(default=None, description="Output only. A combination of database SID, database instance URI and tenant DB name to make a unique identifier per-system.", alias="systemId")
    update_time: Optional[StrictStr] = Field(default=None, description="Required. Unix timestamp this system has been updated last.", alias="updateTime")
    workload_properties: Optional[SapDiscoveryWorkloadProperties] = Field(default=None, alias="workloadProperties")
    __properties: ClassVar[List[str]] = ["applicationLayer", "databaseLayer", "metadata", "projectNumber", "systemId", "updateTime", "workloadProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SapDiscovery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "system_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of application_layer
        if self.application_layer:
            _dict['applicationLayer'] = self.application_layer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of database_layer
        if self.database_layer:
            _dict['databaseLayer'] = self.database_layer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workload_properties
        if self.workload_properties:
            _dict['workloadProperties'] = self.workload_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SapDiscovery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationLayer": SapDiscoveryComponent.from_dict(obj["applicationLayer"]) if obj.get("applicationLayer") is not None else None,
            "databaseLayer": SapDiscoveryComponent.from_dict(obj["databaseLayer"]) if obj.get("databaseLayer") is not None else None,
            "metadata": SapDiscoveryMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "projectNumber": obj.get("projectNumber"),
            "systemId": obj.get("systemId"),
            "updateTime": obj.get("updateTime"),
            "workloadProperties": SapDiscoveryWorkloadProperties.from_dict(obj["workloadProperties"]) if obj.get("workloadProperties") is not None else None
        })
        return _obj



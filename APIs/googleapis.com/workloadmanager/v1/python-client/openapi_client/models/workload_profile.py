# coding: utf-8

"""
    Workload Manager API

    Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.layer import Layer
from openapi_client.models.sap_workload import SapWorkload
from openapi_client.models.sqlserver_workload import SqlserverWorkload
from openapi_client.models.three_tier_workload import ThreeTierWorkload
from typing import Optional, Set
from typing_extensions import Self

class WorkloadProfile(BaseModel):
    """
    workload resource
    """ # noqa: E501
    application: Optional[Layer] = None
    ascs: Optional[Layer] = None
    database: Optional[Layer] = None
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. such as name, description, version. More example can be found in deployment")
    name: Optional[StrictStr] = Field(default=None, description="Identifier. name of resource names have the form 'projects/{project_id}/workloads/{workload_id}'")
    refreshed_time: Optional[StrictStr] = Field(default=None, description="Required. time when the workload data was refreshed", alias="refreshedTime")
    sap_workload: Optional[SapWorkload] = Field(default=None, alias="sapWorkload")
    sqlserver_workload: Optional[SqlserverWorkload] = Field(default=None, alias="sqlserverWorkload")
    state: Optional[StrictStr] = Field(default=None, description="Output only. [output only] the current state if a a workload")
    three_tier_workload: Optional[ThreeTierWorkload] = Field(default=None, alias="threeTierWorkload")
    workload_type: Optional[StrictStr] = Field(default=None, description="Required. The type of the workload", alias="workloadType")
    __properties: ClassVar[List[str]] = ["application", "ascs", "database", "labels", "name", "refreshedTime", "sapWorkload", "sqlserverWorkload", "state", "threeTierWorkload", "workloadType"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'DEPLOYING', 'DESTROYING', 'MAINTENANCE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'DEPLOYING', 'DESTROYING', 'MAINTENANCE')")
        return value

    @field_validator('workload_type')
    def workload_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WORKLOAD_TYPE_UNSPECIFIED', 'S4_HANA', 'SQL_SERVER', 'THREE_TIER_WEB_APP']):
            raise ValueError("must be one of enum values ('WORKLOAD_TYPE_UNSPECIFIED', 'S4_HANA', 'SQL_SERVER', 'THREE_TIER_WEB_APP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkloadProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of application
        if self.application:
            _dict['application'] = self.application.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ascs
        if self.ascs:
            _dict['ascs'] = self.ascs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of database
        if self.database:
            _dict['database'] = self.database.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sap_workload
        if self.sap_workload:
            _dict['sapWorkload'] = self.sap_workload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sqlserver_workload
        if self.sqlserver_workload:
            _dict['sqlserverWorkload'] = self.sqlserver_workload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of three_tier_workload
        if self.three_tier_workload:
            _dict['threeTierWorkload'] = self.three_tier_workload.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkloadProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "application": Layer.from_dict(obj["application"]) if obj.get("application") is not None else None,
            "ascs": Layer.from_dict(obj["ascs"]) if obj.get("ascs") is not None else None,
            "database": Layer.from_dict(obj["database"]) if obj.get("database") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "refreshedTime": obj.get("refreshedTime"),
            "sapWorkload": SapWorkload.from_dict(obj["sapWorkload"]) if obj.get("sapWorkload") is not None else None,
            "sqlserverWorkload": SqlserverWorkload.from_dict(obj["sqlserverWorkload"]) if obj.get("sqlserverWorkload") is not None else None,
            "state": obj.get("state"),
            "threeTierWorkload": ThreeTierWorkload.from_dict(obj["threeTierWorkload"]) if obj.get("threeTierWorkload") is not None else None,
            "workloadType": obj.get("workloadType")
        })
        return _obj



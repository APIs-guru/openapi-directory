# coding: utf-8

"""
    Workload Manager API

    Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.gce_instance_filter import GceInstanceFilter
from typing import Optional, Set
from typing_extensions import Self

class ResourceFilter(BaseModel):
    """
    Message describing resource filters
    """ # noqa: E501
    gce_instance_filter: Optional[GceInstanceFilter] = Field(default=None, alias="gceInstanceFilter")
    inclusion_labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The label used for filter resource", alias="inclusionLabels")
    resource_id_patterns: Optional[List[StrictStr]] = Field(default=None, description="The id pattern for filter resource", alias="resourceIdPatterns")
    scopes: Optional[List[StrictStr]] = Field(default=None, description="The scopes of evaluation resource")
    __properties: ClassVar[List[str]] = ["gceInstanceFilter", "inclusionLabels", "resourceIdPatterns", "scopes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gce_instance_filter
        if self.gce_instance_filter:
            _dict['gceInstanceFilter'] = self.gce_instance_filter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gceInstanceFilter": GceInstanceFilter.from_dict(obj["gceInstanceFilter"]) if obj.get("gceInstanceFilter") is not None else None,
            "inclusionLabels": obj.get("inclusionLabels"),
            "resourceIdPatterns": obj.get("resourceIdPatterns"),
            "scopes": obj.get("scopes")
        })
        return _obj



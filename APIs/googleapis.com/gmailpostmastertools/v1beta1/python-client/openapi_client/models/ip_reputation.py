# coding: utf-8

"""
    Gmail Postmaster Tools API

    The Postmaster Tools API is a RESTful API that provides programmatic access to email traffic metrics (like spam reports, delivery errors etc) otherwise available through the Gmail Postmaster Tools UI currently.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IpReputation(BaseModel):
    """
    IP Reputation information for a set of IPs in a specific reputation category.
    """ # noqa: E501
    ip_count: Optional[StrictStr] = Field(default=None, description="Total number of unique IPs in this reputation category. This metric only pertains to traffic that passed [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/).", alias="ipCount")
    num_ips: Optional[StrictStr] = Field(default=None, description="Total number of unique IPs in this reputation category. This metric only pertains to traffic that passed [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/). Deprecated to be complied with ApiLinter for Quantities. Use ip_count instead.", alias="numIps")
    reputation: Optional[StrictStr] = Field(default=None, description="The reputation category this IP reputation represents.")
    sample_ips: Optional[List[StrictStr]] = Field(default=None, description="A sample of IPs in this reputation category.", alias="sampleIps")
    __properties: ClassVar[List[str]] = ["ipCount", "numIps", "reputation", "sampleIps"]

    @field_validator('reputation')
    def reputation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REPUTATION_CATEGORY_UNSPECIFIED', 'HIGH', 'MEDIUM', 'LOW', 'BAD']):
            raise ValueError("must be one of enum values ('REPUTATION_CATEGORY_UNSPECIFIED', 'HIGH', 'MEDIUM', 'LOW', 'BAD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IpReputation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IpReputation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ipCount": obj.get("ipCount"),
            "numIps": obj.get("numIps"),
            "reputation": obj.get("reputation"),
            "sampleIps": obj.get("sampleIps")
        })
        return _obj



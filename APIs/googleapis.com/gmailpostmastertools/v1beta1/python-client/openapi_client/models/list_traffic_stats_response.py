# coding: utf-8

"""
    Gmail Postmaster Tools API

    The Postmaster Tools API is a RESTful API that provides programmatic access to email traffic metrics (like spam reports, delivery errors etc) otherwise available through the Gmail Postmaster Tools UI currently.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.traffic_stats import TrafficStats
from typing import Optional, Set
from typing_extensions import Self

class ListTrafficStatsResponse(BaseModel):
    """
    Response message for ListTrafficStats.
    """ # noqa: E501
    next_page_token: Optional[StrictStr] = Field(default=None, description="Token to retrieve the next page of results, or empty if there are no more results in the list.", alias="nextPageToken")
    traffic_stats: Optional[List[TrafficStats]] = Field(default=None, description="The list of TrafficStats.", alias="trafficStats")
    __properties: ClassVar[List[str]] = ["nextPageToken", "trafficStats"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListTrafficStatsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in traffic_stats (list)
        _items = []
        if self.traffic_stats:
            for _item_traffic_stats in self.traffic_stats:
                if _item_traffic_stats:
                    _items.append(_item_traffic_stats.to_dict())
            _dict['trafficStats'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListTrafficStatsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nextPageToken": obj.get("nextPageToken"),
            "trafficStats": [TrafficStats.from_dict(_item) for _item in obj["trafficStats"]] if obj.get("trafficStats") is not None else None
        })
        return _obj



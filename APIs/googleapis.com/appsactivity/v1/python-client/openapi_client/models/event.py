# coding: utf-8

"""
    Drive Activity API

    Provides a historical view of activity.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.move import Move
from openapi_client.models.permission_change import PermissionChange
from openapi_client.models.rename import Rename
from openapi_client.models.target import Target
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class Event(BaseModel):
    """
    Represents the changes associated with an action taken by a user.
    """ # noqa: E501
    additional_event_types: Optional[List[StrictStr]] = Field(default=None, description="Additional event types. Some events may have multiple types when multiple actions are part of a single event. For example, creating a document, renaming it, and sharing it may be part of a single file-creation event.", alias="additionalEventTypes")
    event_time_millis: Optional[StrictStr] = Field(default=None, description="The time at which the event occurred formatted as Unix time in milliseconds.", alias="eventTimeMillis")
    from_user_deletion: Optional[StrictBool] = Field(default=None, description="Whether this event is caused by a user being deleted.", alias="fromUserDeletion")
    move: Optional[Move] = None
    permission_changes: Optional[List[PermissionChange]] = Field(default=None, description="Extra information for permissionChange type events, such as the user or group the new permission applies to.", alias="permissionChanges")
    primary_event_type: Optional[StrictStr] = Field(default=None, description="The main type of event that occurred.", alias="primaryEventType")
    rename: Optional[Rename] = None
    target: Optional[Target] = None
    user: Optional[User] = None
    __properties: ClassVar[List[str]] = ["additionalEventTypes", "eventTimeMillis", "fromUserDeletion", "move", "permissionChanges", "primaryEventType", "rename", "target", "user"]

    @field_validator('additional_event_types')
    def additional_event_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['comment', 'create', 'edit', 'emptyTrash', 'move', 'permissionChange', 'rename', 'trash', 'unknown', 'untrash', 'upload']):
                raise ValueError("each list item must be one of ('comment', 'create', 'edit', 'emptyTrash', 'move', 'permissionChange', 'rename', 'trash', 'unknown', 'untrash', 'upload')")
        return value

    @field_validator('primary_event_type')
    def primary_event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['comment', 'create', 'edit', 'emptyTrash', 'move', 'permissionChange', 'rename', 'trash', 'unknown', 'untrash', 'upload']):
            raise ValueError("must be one of enum values ('comment', 'create', 'edit', 'emptyTrash', 'move', 'permissionChange', 'rename', 'trash', 'unknown', 'untrash', 'upload')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Event from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of move
        if self.move:
            _dict['move'] = self.move.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in permission_changes (list)
        _items = []
        if self.permission_changes:
            for _item_permission_changes in self.permission_changes:
                if _item_permission_changes:
                    _items.append(_item_permission_changes.to_dict())
            _dict['permissionChanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of rename
        if self.rename:
            _dict['rename'] = self.rename.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Event from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalEventTypes": obj.get("additionalEventTypes"),
            "eventTimeMillis": obj.get("eventTimeMillis"),
            "fromUserDeletion": obj.get("fromUserDeletion"),
            "move": Move.from_dict(obj["move"]) if obj.get("move") is not None else None,
            "permissionChanges": [PermissionChange.from_dict(_item) for _item in obj["permissionChanges"]] if obj.get("permissionChanges") is not None else None,
            "primaryEventType": obj.get("primaryEventType"),
            "rename": Rename.from_dict(obj["rename"]) if obj.get("rename") is not None else None,
            "target": Target.from_dict(obj["target"]) if obj.get("target") is not None else None,
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Contact Center AI Insights API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_contactcenterinsights_v1_annotation_boundary import GoogleCloudContactcenterinsightsV1AnnotationBoundary
from openapi_client.models.google_cloud_contactcenterinsights_v1_answer_feedback import GoogleCloudContactcenterinsightsV1AnswerFeedback
from openapi_client.models.google_cloud_contactcenterinsights_v1_article_suggestion_data import GoogleCloudContactcenterinsightsV1ArticleSuggestionData
from openapi_client.models.google_cloud_contactcenterinsights_v1_conversation_summarization_suggestion_data import GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData
from openapi_client.models.google_cloud_contactcenterinsights_v1_dialogflow_interaction_data import GoogleCloudContactcenterinsightsV1DialogflowInteractionData
from openapi_client.models.google_cloud_contactcenterinsights_v1_faq_answer_data import GoogleCloudContactcenterinsightsV1FaqAnswerData
from openapi_client.models.google_cloud_contactcenterinsights_v1_smart_compose_suggestion_data import GoogleCloudContactcenterinsightsV1SmartComposeSuggestionData
from openapi_client.models.google_cloud_contactcenterinsights_v1_smart_reply_data import GoogleCloudContactcenterinsightsV1SmartReplyData
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudContactcenterinsightsV1RuntimeAnnotation(BaseModel):
    """
    An annotation that was generated during the customer and agent interaction.
    """ # noqa: E501
    annotation_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the annotation. Format: projects/{project}/locations/{location}/conversationDatasets/{dataset}/conversationDataItems/{data_item}/conversationAnnotations/{annotation}", alias="annotationId")
    answer_feedback: Optional[GoogleCloudContactcenterinsightsV1AnswerFeedback] = Field(default=None, alias="answerFeedback")
    article_suggestion: Optional[GoogleCloudContactcenterinsightsV1ArticleSuggestionData] = Field(default=None, alias="articleSuggestion")
    conversation_summarization_suggestion: Optional[GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData] = Field(default=None, alias="conversationSummarizationSuggestion")
    create_time: Optional[StrictStr] = Field(default=None, description="The time at which this annotation was created.", alias="createTime")
    dialogflow_interaction: Optional[GoogleCloudContactcenterinsightsV1DialogflowInteractionData] = Field(default=None, alias="dialogflowInteraction")
    end_boundary: Optional[GoogleCloudContactcenterinsightsV1AnnotationBoundary] = Field(default=None, alias="endBoundary")
    faq_answer: Optional[GoogleCloudContactcenterinsightsV1FaqAnswerData] = Field(default=None, alias="faqAnswer")
    smart_compose_suggestion: Optional[GoogleCloudContactcenterinsightsV1SmartComposeSuggestionData] = Field(default=None, alias="smartComposeSuggestion")
    smart_reply: Optional[GoogleCloudContactcenterinsightsV1SmartReplyData] = Field(default=None, alias="smartReply")
    start_boundary: Optional[GoogleCloudContactcenterinsightsV1AnnotationBoundary] = Field(default=None, alias="startBoundary")
    __properties: ClassVar[List[str]] = ["annotationId", "answerFeedback", "articleSuggestion", "conversationSummarizationSuggestion", "createTime", "dialogflowInteraction", "endBoundary", "faqAnswer", "smartComposeSuggestion", "smartReply", "startBoundary"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1RuntimeAnnotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of answer_feedback
        if self.answer_feedback:
            _dict['answerFeedback'] = self.answer_feedback.to_dict()
        # override the default output from pydantic by calling `to_dict()` of article_suggestion
        if self.article_suggestion:
            _dict['articleSuggestion'] = self.article_suggestion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conversation_summarization_suggestion
        if self.conversation_summarization_suggestion:
            _dict['conversationSummarizationSuggestion'] = self.conversation_summarization_suggestion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dialogflow_interaction
        if self.dialogflow_interaction:
            _dict['dialogflowInteraction'] = self.dialogflow_interaction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_boundary
        if self.end_boundary:
            _dict['endBoundary'] = self.end_boundary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of faq_answer
        if self.faq_answer:
            _dict['faqAnswer'] = self.faq_answer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of smart_compose_suggestion
        if self.smart_compose_suggestion:
            _dict['smartComposeSuggestion'] = self.smart_compose_suggestion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of smart_reply
        if self.smart_reply:
            _dict['smartReply'] = self.smart_reply.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_boundary
        if self.start_boundary:
            _dict['startBoundary'] = self.start_boundary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1RuntimeAnnotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotationId": obj.get("annotationId"),
            "answerFeedback": GoogleCloudContactcenterinsightsV1AnswerFeedback.from_dict(obj["answerFeedback"]) if obj.get("answerFeedback") is not None else None,
            "articleSuggestion": GoogleCloudContactcenterinsightsV1ArticleSuggestionData.from_dict(obj["articleSuggestion"]) if obj.get("articleSuggestion") is not None else None,
            "conversationSummarizationSuggestion": GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.from_dict(obj["conversationSummarizationSuggestion"]) if obj.get("conversationSummarizationSuggestion") is not None else None,
            "createTime": obj.get("createTime"),
            "dialogflowInteraction": GoogleCloudContactcenterinsightsV1DialogflowInteractionData.from_dict(obj["dialogflowInteraction"]) if obj.get("dialogflowInteraction") is not None else None,
            "endBoundary": GoogleCloudContactcenterinsightsV1AnnotationBoundary.from_dict(obj["endBoundary"]) if obj.get("endBoundary") is not None else None,
            "faqAnswer": GoogleCloudContactcenterinsightsV1FaqAnswerData.from_dict(obj["faqAnswer"]) if obj.get("faqAnswer") is not None else None,
            "smartComposeSuggestion": GoogleCloudContactcenterinsightsV1SmartComposeSuggestionData.from_dict(obj["smartComposeSuggestion"]) if obj.get("smartComposeSuggestion") is not None else None,
            "smartReply": GoogleCloudContactcenterinsightsV1SmartReplyData.from_dict(obj["smartReply"]) if obj.get("smartReply") is not None else None,
            "startBoundary": GoogleCloudContactcenterinsightsV1AnnotationBoundary.from_dict(obj["startBoundary"]) if obj.get("startBoundary") is not None else None
        })
        return _obj



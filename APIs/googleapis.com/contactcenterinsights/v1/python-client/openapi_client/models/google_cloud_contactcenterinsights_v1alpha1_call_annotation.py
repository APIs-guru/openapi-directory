# coding: utf-8

"""
    Contact Center AI Insights API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_annotation_boundary import GoogleCloudContactcenterinsightsV1alpha1AnnotationBoundary
from openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_entity_mention_data import GoogleCloudContactcenterinsightsV1alpha1EntityMentionData
from openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_intent_match_data import GoogleCloudContactcenterinsightsV1alpha1IntentMatchData
from openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_issue_match_data import GoogleCloudContactcenterinsightsV1alpha1IssueMatchData
from openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_phrase_match_data import GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData
from openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_sentiment_data import GoogleCloudContactcenterinsightsV1alpha1SentimentData
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudContactcenterinsightsV1alpha1CallAnnotation(BaseModel):
    """
    A piece of metadata that applies to a window of a call.
    """ # noqa: E501
    annotation_end_boundary: Optional[GoogleCloudContactcenterinsightsV1alpha1AnnotationBoundary] = Field(default=None, alias="annotationEndBoundary")
    annotation_start_boundary: Optional[GoogleCloudContactcenterinsightsV1alpha1AnnotationBoundary] = Field(default=None, alias="annotationStartBoundary")
    channel_tag: Optional[StrictInt] = Field(default=None, description="The channel of the audio where the annotation occurs. For single-channel audio, this field is not populated.", alias="channelTag")
    entity_mention_data: Optional[GoogleCloudContactcenterinsightsV1alpha1EntityMentionData] = Field(default=None, alias="entityMentionData")
    hold_data: Optional[Dict[str, Any]] = Field(default=None, description="The data for a hold annotation.", alias="holdData")
    intent_match_data: Optional[GoogleCloudContactcenterinsightsV1alpha1IntentMatchData] = Field(default=None, alias="intentMatchData")
    interruption_data: Optional[Dict[str, Any]] = Field(default=None, description="The data for an interruption annotation.", alias="interruptionData")
    issue_match_data: Optional[GoogleCloudContactcenterinsightsV1alpha1IssueMatchData] = Field(default=None, alias="issueMatchData")
    phrase_match_data: Optional[GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData] = Field(default=None, alias="phraseMatchData")
    sentiment_data: Optional[GoogleCloudContactcenterinsightsV1alpha1SentimentData] = Field(default=None, alias="sentimentData")
    silence_data: Optional[Dict[str, Any]] = Field(default=None, description="The data for a silence annotation.", alias="silenceData")
    __properties: ClassVar[List[str]] = ["annotationEndBoundary", "annotationStartBoundary", "channelTag", "entityMentionData", "holdData", "intentMatchData", "interruptionData", "issueMatchData", "phraseMatchData", "sentimentData", "silenceData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1alpha1CallAnnotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of annotation_end_boundary
        if self.annotation_end_boundary:
            _dict['annotationEndBoundary'] = self.annotation_end_boundary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of annotation_start_boundary
        if self.annotation_start_boundary:
            _dict['annotationStartBoundary'] = self.annotation_start_boundary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity_mention_data
        if self.entity_mention_data:
            _dict['entityMentionData'] = self.entity_mention_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of intent_match_data
        if self.intent_match_data:
            _dict['intentMatchData'] = self.intent_match_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of issue_match_data
        if self.issue_match_data:
            _dict['issueMatchData'] = self.issue_match_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phrase_match_data
        if self.phrase_match_data:
            _dict['phraseMatchData'] = self.phrase_match_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sentiment_data
        if self.sentiment_data:
            _dict['sentimentData'] = self.sentiment_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1alpha1CallAnnotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotationEndBoundary": GoogleCloudContactcenterinsightsV1alpha1AnnotationBoundary.from_dict(obj["annotationEndBoundary"]) if obj.get("annotationEndBoundary") is not None else None,
            "annotationStartBoundary": GoogleCloudContactcenterinsightsV1alpha1AnnotationBoundary.from_dict(obj["annotationStartBoundary"]) if obj.get("annotationStartBoundary") is not None else None,
            "channelTag": obj.get("channelTag"),
            "entityMentionData": GoogleCloudContactcenterinsightsV1alpha1EntityMentionData.from_dict(obj["entityMentionData"]) if obj.get("entityMentionData") is not None else None,
            "holdData": obj.get("holdData"),
            "intentMatchData": GoogleCloudContactcenterinsightsV1alpha1IntentMatchData.from_dict(obj["intentMatchData"]) if obj.get("intentMatchData") is not None else None,
            "interruptionData": obj.get("interruptionData"),
            "issueMatchData": GoogleCloudContactcenterinsightsV1alpha1IssueMatchData.from_dict(obj["issueMatchData"]) if obj.get("issueMatchData") is not None else None,
            "phraseMatchData": GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData.from_dict(obj["phraseMatchData"]) if obj.get("phraseMatchData") is not None else None,
            "sentimentData": GoogleCloudContactcenterinsightsV1alpha1SentimentData.from_dict(obj["sentimentData"]) if obj.get("sentimentData") is not None else None,
            "silenceData": obj.get("silenceData")
        })
        return _obj



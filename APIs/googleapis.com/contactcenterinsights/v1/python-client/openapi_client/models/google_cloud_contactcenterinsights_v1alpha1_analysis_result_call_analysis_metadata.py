# coding: utf-8

"""
    Contact Center AI Insights API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_call_annotation import GoogleCloudContactcenterinsightsV1alpha1CallAnnotation
from openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_conversation_level_sentiment import GoogleCloudContactcenterinsightsV1alpha1ConversationLevelSentiment
from openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_entity import GoogleCloudContactcenterinsightsV1alpha1Entity
from openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_intent import GoogleCloudContactcenterinsightsV1alpha1Intent
from openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_issue_model_result import GoogleCloudContactcenterinsightsV1alpha1IssueModelResult
from openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_phrase_match_data import GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata(BaseModel):
    """
    Call-specific metadata created during analysis.
    """ # noqa: E501
    annotations: Optional[List[GoogleCloudContactcenterinsightsV1alpha1CallAnnotation]] = Field(default=None, description="A list of call annotations that apply to this call.")
    entities: Optional[Dict[str, GoogleCloudContactcenterinsightsV1alpha1Entity]] = Field(default=None, description="All the entities in the call.")
    intents: Optional[Dict[str, GoogleCloudContactcenterinsightsV1alpha1Intent]] = Field(default=None, description="All the matched intents in the call.")
    issue_model_result: Optional[GoogleCloudContactcenterinsightsV1alpha1IssueModelResult] = Field(default=None, alias="issueModelResult")
    phrase_matchers: Optional[Dict[str, GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData]] = Field(default=None, description="All the matched phrase matchers in the call.", alias="phraseMatchers")
    sentiments: Optional[List[GoogleCloudContactcenterinsightsV1alpha1ConversationLevelSentiment]] = Field(default=None, description="Overall conversation-level sentiment for each channel of the call.")
    __properties: ClassVar[List[str]] = ["annotations", "entities", "intents", "issueModelResult", "phraseMatchers", "sentiments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in annotations (list)
        _items = []
        if self.annotations:
            for _item_annotations in self.annotations:
                if _item_annotations:
                    _items.append(_item_annotations.to_dict())
            _dict['annotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in entities (dict)
        _field_dict = {}
        if self.entities:
            for _key_entities in self.entities:
                if self.entities[_key_entities]:
                    _field_dict[_key_entities] = self.entities[_key_entities].to_dict()
            _dict['entities'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in intents (dict)
        _field_dict = {}
        if self.intents:
            for _key_intents in self.intents:
                if self.intents[_key_intents]:
                    _field_dict[_key_intents] = self.intents[_key_intents].to_dict()
            _dict['intents'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of issue_model_result
        if self.issue_model_result:
            _dict['issueModelResult'] = self.issue_model_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in phrase_matchers (dict)
        _field_dict = {}
        if self.phrase_matchers:
            for _key_phrase_matchers in self.phrase_matchers:
                if self.phrase_matchers[_key_phrase_matchers]:
                    _field_dict[_key_phrase_matchers] = self.phrase_matchers[_key_phrase_matchers].to_dict()
            _dict['phraseMatchers'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in sentiments (list)
        _items = []
        if self.sentiments:
            for _item_sentiments in self.sentiments:
                if _item_sentiments:
                    _items.append(_item_sentiments.to_dict())
            _dict['sentiments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": [GoogleCloudContactcenterinsightsV1alpha1CallAnnotation.from_dict(_item) for _item in obj["annotations"]] if obj.get("annotations") is not None else None,
            "entities": dict(
                (_k, GoogleCloudContactcenterinsightsV1alpha1Entity.from_dict(_v))
                for _k, _v in obj["entities"].items()
            )
            if obj.get("entities") is not None
            else None,
            "intents": dict(
                (_k, GoogleCloudContactcenterinsightsV1alpha1Intent.from_dict(_v))
                for _k, _v in obj["intents"].items()
            )
            if obj.get("intents") is not None
            else None,
            "issueModelResult": GoogleCloudContactcenterinsightsV1alpha1IssueModelResult.from_dict(obj["issueModelResult"]) if obj.get("issueModelResult") is not None else None,
            "phraseMatchers": dict(
                (_k, GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData.from_dict(_v))
                for _k, _v in obj["phraseMatchers"].items()
            )
            if obj.get("phraseMatchers") is not None
            else None,
            "sentiments": [GoogleCloudContactcenterinsightsV1alpha1ConversationLevelSentiment.from_dict(_item) for _item in obj["sentiments"]] if obj.get("sentiments") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Contact Center AI Insights API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_contactcenterinsights_v1_redaction_config import GoogleCloudContactcenterinsightsV1RedactionConfig
from openapi_client.models.google_cloud_contactcenterinsights_v1_settings_analysis_config import GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig
from openapi_client.models.google_cloud_contactcenterinsights_v1_speech_config import GoogleCloudContactcenterinsightsV1SpeechConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudContactcenterinsightsV1Settings(BaseModel):
    """
    The settings resource.
    """ # noqa: E501
    analysis_config: Optional[GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig] = Field(default=None, alias="analysisConfig")
    conversation_ttl: Optional[StrictStr] = Field(default=None, description="The default TTL for newly-created conversations. If a conversation has a specified expiration, that value will be used instead. Changing this value will not change the expiration of existing conversations. Conversations with no expire time persist until they are deleted.", alias="conversationTtl")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the settings was created.", alias="createTime")
    language_code: Optional[StrictStr] = Field(default=None, description="A language code to be applied to each transcript segment unless the segment already specifies a language code. Language code defaults to \"en-US\" if it is neither specified on the segment nor here.", alias="languageCode")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the settings resource. Format: projects/{project}/locations/{location}/settings")
    pubsub_notification_settings: Optional[Dict[str, StrictStr]] = Field(default=None, description="A map that maps a notification trigger to a Pub/Sub topic. Each time a specified trigger occurs, Insights will notify the corresponding Pub/Sub topic. Keys are notification triggers. Supported keys are: * \"all-triggers\": Notify each time any of the supported triggers occurs. * \"create-analysis\": Notify each time an analysis is created. * \"create-conversation\": Notify each time a conversation is created. * \"export-insights-data\": Notify each time an export is complete. * \"update-conversation\": Notify each time a conversation is updated via UpdateConversation. * \"upload-conversation\": Notify when an UploadConversation LRO completes. Values are Pub/Sub topics. The format of each Pub/Sub topic is: projects/{project}/topics/{topic}", alias="pubsubNotificationSettings")
    redaction_config: Optional[GoogleCloudContactcenterinsightsV1RedactionConfig] = Field(default=None, alias="redactionConfig")
    speech_config: Optional[GoogleCloudContactcenterinsightsV1SpeechConfig] = Field(default=None, alias="speechConfig")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the settings were last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["analysisConfig", "conversationTtl", "createTime", "languageCode", "name", "pubsubNotificationSettings", "redactionConfig", "speechConfig", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1Settings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of analysis_config
        if self.analysis_config:
            _dict['analysisConfig'] = self.analysis_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of redaction_config
        if self.redaction_config:
            _dict['redactionConfig'] = self.redaction_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of speech_config
        if self.speech_config:
            _dict['speechConfig'] = self.speech_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1Settings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "analysisConfig": GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig.from_dict(obj["analysisConfig"]) if obj.get("analysisConfig") is not None else None,
            "conversationTtl": obj.get("conversationTtl"),
            "createTime": obj.get("createTime"),
            "languageCode": obj.get("languageCode"),
            "name": obj.get("name"),
            "pubsubNotificationSettings": obj.get("pubsubNotificationSettings"),
            "redactionConfig": GoogleCloudContactcenterinsightsV1RedactionConfig.from_dict(obj["redactionConfig"]) if obj.get("redactionConfig") is not None else None,
            "speechConfig": GoogleCloudContactcenterinsightsV1SpeechConfig.from_dict(obj["speechConfig"]) if obj.get("speechConfig") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



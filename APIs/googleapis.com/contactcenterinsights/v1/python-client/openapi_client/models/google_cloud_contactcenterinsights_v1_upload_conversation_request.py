# coding: utf-8

"""
    Contact Center AI Insights API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_contactcenterinsights_v1_conversation import GoogleCloudContactcenterinsightsV1Conversation
from openapi_client.models.google_cloud_contactcenterinsights_v1_redaction_config import GoogleCloudContactcenterinsightsV1RedactionConfig
from openapi_client.models.google_cloud_contactcenterinsights_v1_speech_config import GoogleCloudContactcenterinsightsV1SpeechConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudContactcenterinsightsV1UploadConversationRequest(BaseModel):
    """
    Request to upload a conversation.
    """ # noqa: E501
    conversation: Optional[GoogleCloudContactcenterinsightsV1Conversation] = None
    conversation_id: Optional[StrictStr] = Field(default=None, description="Optional. A unique ID for the new conversation. This ID will become the final component of the conversation's resource name. If no ID is specified, a server-generated ID will be used. This value should be 4-64 characters and must match the regular expression `^[a-z0-9-]{4,64}$`. Valid characters are `a-z-`", alias="conversationId")
    parent: Optional[StrictStr] = Field(default=None, description="Required. The parent resource of the conversation.")
    redaction_config: Optional[GoogleCloudContactcenterinsightsV1RedactionConfig] = Field(default=None, alias="redactionConfig")
    speech_config: Optional[GoogleCloudContactcenterinsightsV1SpeechConfig] = Field(default=None, alias="speechConfig")
    __properties: ClassVar[List[str]] = ["conversation", "conversationId", "parent", "redactionConfig", "speechConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1UploadConversationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conversation
        if self.conversation:
            _dict['conversation'] = self.conversation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of redaction_config
        if self.redaction_config:
            _dict['redactionConfig'] = self.redaction_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of speech_config
        if self.speech_config:
            _dict['speechConfig'] = self.speech_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1UploadConversationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conversation": GoogleCloudContactcenterinsightsV1Conversation.from_dict(obj["conversation"]) if obj.get("conversation") is not None else None,
            "conversationId": obj.get("conversationId"),
            "parent": obj.get("parent"),
            "redactionConfig": GoogleCloudContactcenterinsightsV1RedactionConfig.from_dict(obj["redactionConfig"]) if obj.get("redactionConfig") is not None else None,
            "speechConfig": GoogleCloudContactcenterinsightsV1SpeechConfig.from_dict(obj["speechConfig"]) if obj.get("speechConfig") is not None else None
        })
        return _obj



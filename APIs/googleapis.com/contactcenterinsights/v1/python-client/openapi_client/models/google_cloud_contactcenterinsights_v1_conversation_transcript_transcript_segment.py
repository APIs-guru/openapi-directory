# coding: utf-8

"""
    Contact Center AI Insights API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_contactcenterinsights_v1_conversation_participant import GoogleCloudContactcenterinsightsV1ConversationParticipant
from openapi_client.models.google_cloud_contactcenterinsights_v1_conversation_transcript_transcript_segment_dialogflow_segment_metadata import GoogleCloudContactcenterinsightsV1ConversationTranscriptTranscriptSegmentDialogflowSegmentMetadata
from openapi_client.models.google_cloud_contactcenterinsights_v1_conversation_transcript_transcript_segment_word_info import GoogleCloudContactcenterinsightsV1ConversationTranscriptTranscriptSegmentWordInfo
from openapi_client.models.google_cloud_contactcenterinsights_v1_sentiment_data import GoogleCloudContactcenterinsightsV1SentimentData
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudContactcenterinsightsV1ConversationTranscriptTranscriptSegment(BaseModel):
    """
    A segment of a full transcript.
    """ # noqa: E501
    channel_tag: Optional[StrictInt] = Field(default=None, description="For conversations derived from multi-channel audio, this is the channel number corresponding to the audio from that channel. For audioChannelCount = N, its output values can range from '1' to 'N'. A channel tag of 0 indicates that the audio is mono.", alias="channelTag")
    confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A confidence estimate between 0.0 and 1.0 of the fidelity of this segment. A default value of 0.0 indicates that the value is unset.")
    dialogflow_segment_metadata: Optional[GoogleCloudContactcenterinsightsV1ConversationTranscriptTranscriptSegmentDialogflowSegmentMetadata] = Field(default=None, alias="dialogflowSegmentMetadata")
    language_code: Optional[StrictStr] = Field(default=None, description="The language code of this segment as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: \"en-US\".", alias="languageCode")
    message_time: Optional[StrictStr] = Field(default=None, description="The time that the message occurred, if provided.", alias="messageTime")
    segment_participant: Optional[GoogleCloudContactcenterinsightsV1ConversationParticipant] = Field(default=None, alias="segmentParticipant")
    sentiment: Optional[GoogleCloudContactcenterinsightsV1SentimentData] = None
    text: Optional[StrictStr] = Field(default=None, description="The text of this segment.")
    words: Optional[List[GoogleCloudContactcenterinsightsV1ConversationTranscriptTranscriptSegmentWordInfo]] = Field(default=None, description="A list of the word-specific information for each word in the segment.")
    __properties: ClassVar[List[str]] = ["channelTag", "confidence", "dialogflowSegmentMetadata", "languageCode", "messageTime", "segmentParticipant", "sentiment", "text", "words"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1ConversationTranscriptTranscriptSegment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dialogflow_segment_metadata
        if self.dialogflow_segment_metadata:
            _dict['dialogflowSegmentMetadata'] = self.dialogflow_segment_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of segment_participant
        if self.segment_participant:
            _dict['segmentParticipant'] = self.segment_participant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sentiment
        if self.sentiment:
            _dict['sentiment'] = self.sentiment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in words (list)
        _items = []
        if self.words:
            for _item_words in self.words:
                if _item_words:
                    _items.append(_item_words.to_dict())
            _dict['words'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1ConversationTranscriptTranscriptSegment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channelTag": obj.get("channelTag"),
            "confidence": obj.get("confidence"),
            "dialogflowSegmentMetadata": GoogleCloudContactcenterinsightsV1ConversationTranscriptTranscriptSegmentDialogflowSegmentMetadata.from_dict(obj["dialogflowSegmentMetadata"]) if obj.get("dialogflowSegmentMetadata") is not None else None,
            "languageCode": obj.get("languageCode"),
            "messageTime": obj.get("messageTime"),
            "segmentParticipant": GoogleCloudContactcenterinsightsV1ConversationParticipant.from_dict(obj["segmentParticipant"]) if obj.get("segmentParticipant") is not None else None,
            "sentiment": GoogleCloudContactcenterinsightsV1SentimentData.from_dict(obj["sentiment"]) if obj.get("sentiment") is not None else None,
            "text": obj.get("text"),
            "words": [GoogleCloudContactcenterinsightsV1ConversationTranscriptTranscriptSegmentWordInfo.from_dict(_item) for _item in obj["words"]] if obj.get("words") is not None else None
        })
        return _obj



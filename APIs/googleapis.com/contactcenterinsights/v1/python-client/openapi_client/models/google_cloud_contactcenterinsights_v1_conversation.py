# coding: utf-8

"""
    Contact Center AI Insights API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_contactcenterinsights_v1_analysis import GoogleCloudContactcenterinsightsV1Analysis
from openapi_client.models.google_cloud_contactcenterinsights_v1_conversation_call_metadata import GoogleCloudContactcenterinsightsV1ConversationCallMetadata
from openapi_client.models.google_cloud_contactcenterinsights_v1_conversation_data_source import GoogleCloudContactcenterinsightsV1ConversationDataSource
from openapi_client.models.google_cloud_contactcenterinsights_v1_conversation_quality_metadata import GoogleCloudContactcenterinsightsV1ConversationQualityMetadata
from openapi_client.models.google_cloud_contactcenterinsights_v1_conversation_summarization_suggestion_data import GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData
from openapi_client.models.google_cloud_contactcenterinsights_v1_conversation_transcript import GoogleCloudContactcenterinsightsV1ConversationTranscript
from openapi_client.models.google_cloud_contactcenterinsights_v1_dialogflow_intent import GoogleCloudContactcenterinsightsV1DialogflowIntent
from openapi_client.models.google_cloud_contactcenterinsights_v1_runtime_annotation import GoogleCloudContactcenterinsightsV1RuntimeAnnotation
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudContactcenterinsightsV1Conversation(BaseModel):
    """
    The conversation resource.
    """ # noqa: E501
    agent_id: Optional[StrictStr] = Field(default=None, description="An opaque, user-specified string representing the human agent who handled the conversation.", alias="agentId")
    call_metadata: Optional[GoogleCloudContactcenterinsightsV1ConversationCallMetadata] = Field(default=None, alias="callMetadata")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the conversation was created.", alias="createTime")
    data_source: Optional[GoogleCloudContactcenterinsightsV1ConversationDataSource] = Field(default=None, alias="dataSource")
    dialogflow_intents: Optional[Dict[str, GoogleCloudContactcenterinsightsV1DialogflowIntent]] = Field(default=None, description="Output only. All the matched Dialogflow intents in the call. The key corresponds to a Dialogflow intent, format: projects/{project}/agent/{agent}/intents/{intent}", alias="dialogflowIntents")
    duration: Optional[StrictStr] = Field(default=None, description="Output only. The duration of the conversation.")
    expire_time: Optional[StrictStr] = Field(default=None, description="The time at which this conversation should expire. After this time, the conversation data and any associated analyses will be deleted.", alias="expireTime")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="A map for the user to specify any custom fields. A maximum of 20 labels per conversation is allowed, with a maximum of 256 characters per entry.")
    language_code: Optional[StrictStr] = Field(default=None, description="A user-specified language code for the conversation.", alias="languageCode")
    latest_analysis: Optional[GoogleCloudContactcenterinsightsV1Analysis] = Field(default=None, alias="latestAnalysis")
    latest_summary: Optional[GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData] = Field(default=None, alias="latestSummary")
    medium: Optional[StrictStr] = Field(default=None, description="Immutable. The conversation medium, if unspecified will default to PHONE_CALL.")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the conversation. Format: projects/{project}/locations/{location}/conversations/{conversation}")
    obfuscated_user_id: Optional[StrictStr] = Field(default=None, description="Obfuscated user ID which the customer sent to us.", alias="obfuscatedUserId")
    quality_metadata: Optional[GoogleCloudContactcenterinsightsV1ConversationQualityMetadata] = Field(default=None, alias="qualityMetadata")
    runtime_annotations: Optional[List[GoogleCloudContactcenterinsightsV1RuntimeAnnotation]] = Field(default=None, description="Output only. The annotations that were generated during the customer and agent interaction.", alias="runtimeAnnotations")
    start_time: Optional[StrictStr] = Field(default=None, description="The time at which the conversation started.", alias="startTime")
    transcript: Optional[GoogleCloudContactcenterinsightsV1ConversationTranscript] = None
    ttl: Optional[StrictStr] = Field(default=None, description="Input only. The TTL for this resource. If specified, then this TTL will be used to calculate the expire time.")
    turn_count: Optional[StrictInt] = Field(default=None, description="Output only. The number of turns in the conversation.", alias="turnCount")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The most recent time at which the conversation was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["agentId", "callMetadata", "createTime", "dataSource", "dialogflowIntents", "duration", "expireTime", "labels", "languageCode", "latestAnalysis", "latestSummary", "medium", "name", "obfuscatedUserId", "qualityMetadata", "runtimeAnnotations", "startTime", "transcript", "ttl", "turnCount", "updateTime"]

    @field_validator('medium')
    def medium_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MEDIUM_UNSPECIFIED', 'PHONE_CALL', 'CHAT']):
            raise ValueError("must be one of enum values ('MEDIUM_UNSPECIFIED', 'PHONE_CALL', 'CHAT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1Conversation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "dialogflow_intents",
            "duration",
            "runtime_annotations",
            "turn_count",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of call_metadata
        if self.call_metadata:
            _dict['callMetadata'] = self.call_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_source
        if self.data_source:
            _dict['dataSource'] = self.data_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in dialogflow_intents (dict)
        _field_dict = {}
        if self.dialogflow_intents:
            for _key_dialogflow_intents in self.dialogflow_intents:
                if self.dialogflow_intents[_key_dialogflow_intents]:
                    _field_dict[_key_dialogflow_intents] = self.dialogflow_intents[_key_dialogflow_intents].to_dict()
            _dict['dialogflowIntents'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of latest_analysis
        if self.latest_analysis:
            _dict['latestAnalysis'] = self.latest_analysis.to_dict()
        # override the default output from pydantic by calling `to_dict()` of latest_summary
        if self.latest_summary:
            _dict['latestSummary'] = self.latest_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quality_metadata
        if self.quality_metadata:
            _dict['qualityMetadata'] = self.quality_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in runtime_annotations (list)
        _items = []
        if self.runtime_annotations:
            for _item_runtime_annotations in self.runtime_annotations:
                if _item_runtime_annotations:
                    _items.append(_item_runtime_annotations.to_dict())
            _dict['runtimeAnnotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of transcript
        if self.transcript:
            _dict['transcript'] = self.transcript.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1Conversation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentId": obj.get("agentId"),
            "callMetadata": GoogleCloudContactcenterinsightsV1ConversationCallMetadata.from_dict(obj["callMetadata"]) if obj.get("callMetadata") is not None else None,
            "createTime": obj.get("createTime"),
            "dataSource": GoogleCloudContactcenterinsightsV1ConversationDataSource.from_dict(obj["dataSource"]) if obj.get("dataSource") is not None else None,
            "dialogflowIntents": dict(
                (_k, GoogleCloudContactcenterinsightsV1DialogflowIntent.from_dict(_v))
                for _k, _v in obj["dialogflowIntents"].items()
            )
            if obj.get("dialogflowIntents") is not None
            else None,
            "duration": obj.get("duration"),
            "expireTime": obj.get("expireTime"),
            "labels": obj.get("labels"),
            "languageCode": obj.get("languageCode"),
            "latestAnalysis": GoogleCloudContactcenterinsightsV1Analysis.from_dict(obj["latestAnalysis"]) if obj.get("latestAnalysis") is not None else None,
            "latestSummary": GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.from_dict(obj["latestSummary"]) if obj.get("latestSummary") is not None else None,
            "medium": obj.get("medium"),
            "name": obj.get("name"),
            "obfuscatedUserId": obj.get("obfuscatedUserId"),
            "qualityMetadata": GoogleCloudContactcenterinsightsV1ConversationQualityMetadata.from_dict(obj["qualityMetadata"]) if obj.get("qualityMetadata") is not None else None,
            "runtimeAnnotations": [GoogleCloudContactcenterinsightsV1RuntimeAnnotation.from_dict(_item) for _item in obj["runtimeAnnotations"]] if obj.get("runtimeAnnotations") is not None else None,
            "startTime": obj.get("startTime"),
            "transcript": GoogleCloudContactcenterinsightsV1ConversationTranscript.from_dict(obj["transcript"]) if obj.get("transcript") is not None else None,
            "ttl": obj.get("ttl"),
            "turnCount": obj.get("turnCount"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



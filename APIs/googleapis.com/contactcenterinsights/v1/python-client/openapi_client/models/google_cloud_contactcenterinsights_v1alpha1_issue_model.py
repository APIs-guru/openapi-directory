# coding: utf-8

"""
    Contact Center AI Insights API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_issue_model_input_data_config import GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig
from openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_issue_model_label_stats import GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudContactcenterinsightsV1alpha1IssueModel(BaseModel):
    """
    The issue model resource.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this issue model was created.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="The representative name for the issue model.", alias="displayName")
    input_data_config: Optional[GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig] = Field(default=None, alias="inputDataConfig")
    issue_count: Optional[StrictStr] = Field(default=None, description="Output only. Number of issues in this issue model.", alias="issueCount")
    language_code: Optional[StrictStr] = Field(default=None, description="Language of the model.", alias="languageCode")
    model_type: Optional[StrictStr] = Field(default=None, description="Type of the model.", alias="modelType")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the issue model. Format: projects/{project}/locations/{location}/issueModels/{issue_model}")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the model.")
    training_stats: Optional[GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats] = Field(default=None, alias="trainingStats")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The most recent time at which the issue model was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "displayName", "inputDataConfig", "issueCount", "languageCode", "modelType", "name", "state", "trainingStats", "updateTime"]

    @field_validator('model_type')
    def model_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MODEL_TYPE_UNSPECIFIED', 'TYPE_V1', 'TYPE_V2']):
            raise ValueError("must be one of enum values ('MODEL_TYPE_UNSPECIFIED', 'TYPE_V1', 'TYPE_V2')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'UNDEPLOYED', 'DEPLOYING', 'DEPLOYED', 'UNDEPLOYING', 'DELETING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'UNDEPLOYED', 'DEPLOYING', 'DEPLOYED', 'UNDEPLOYING', 'DELETING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1alpha1IssueModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "issue_count",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of input_data_config
        if self.input_data_config:
            _dict['inputDataConfig'] = self.input_data_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of training_stats
        if self.training_stats:
            _dict['trainingStats'] = self.training_stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1alpha1IssueModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "inputDataConfig": GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig.from_dict(obj["inputDataConfig"]) if obj.get("inputDataConfig") is not None else None,
            "issueCount": obj.get("issueCount"),
            "languageCode": obj.get("languageCode"),
            "modelType": obj.get("modelType"),
            "name": obj.get("name"),
            "state": obj.get("state"),
            "trainingStats": GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats.from_dict(obj["trainingStats"]) if obj.get("trainingStats") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



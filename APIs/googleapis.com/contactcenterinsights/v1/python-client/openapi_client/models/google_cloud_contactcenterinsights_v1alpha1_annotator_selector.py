# coding: utf-8

"""
    Contact Center AI Insights API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_annotator_selector_summarization_config import GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector(BaseModel):
    """
    Selector of all available annotators and phrase matchers to run.
    """ # noqa: E501
    issue_models: Optional[List[StrictStr]] = Field(default=None, description="The issue model to run. If not provided, the most recently deployed topic model will be used. The provided issue model will only be used for inference if the issue model is deployed and if run_issue_model_annotator is set to true. If more than one issue model is provided, only the first provided issue model will be used for inference.", alias="issueModels")
    phrase_matchers: Optional[List[StrictStr]] = Field(default=None, description="The list of phrase matchers to run. If not provided, all active phrase matchers will be used. If inactive phrase matchers are provided, they will not be used. Phrase matchers will be run only if run_phrase_matcher_annotator is set to true. Format: projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}", alias="phraseMatchers")
    run_entity_annotator: Optional[StrictBool] = Field(default=None, description="Whether to run the entity annotator.", alias="runEntityAnnotator")
    run_intent_annotator: Optional[StrictBool] = Field(default=None, description="Whether to run the intent annotator.", alias="runIntentAnnotator")
    run_interruption_annotator: Optional[StrictBool] = Field(default=None, description="Whether to run the interruption annotator.", alias="runInterruptionAnnotator")
    run_issue_model_annotator: Optional[StrictBool] = Field(default=None, description="Whether to run the issue model annotator. A model should have already been deployed for this to take effect.", alias="runIssueModelAnnotator")
    run_phrase_matcher_annotator: Optional[StrictBool] = Field(default=None, description="Whether to run the active phrase matcher annotator(s).", alias="runPhraseMatcherAnnotator")
    run_sentiment_annotator: Optional[StrictBool] = Field(default=None, description="Whether to run the sentiment annotator.", alias="runSentimentAnnotator")
    run_silence_annotator: Optional[StrictBool] = Field(default=None, description="Whether to run the silence annotator.", alias="runSilenceAnnotator")
    run_summarization_annotator: Optional[StrictBool] = Field(default=None, description="Whether to run the summarization annotator.", alias="runSummarizationAnnotator")
    summarization_config: Optional[GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig] = Field(default=None, alias="summarizationConfig")
    __properties: ClassVar[List[str]] = ["issueModels", "phraseMatchers", "runEntityAnnotator", "runIntentAnnotator", "runInterruptionAnnotator", "runIssueModelAnnotator", "runPhraseMatcherAnnotator", "runSentimentAnnotator", "runSilenceAnnotator", "runSummarizationAnnotator", "summarizationConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of summarization_config
        if self.summarization_config:
            _dict['summarizationConfig'] = self.summarization_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "issueModels": obj.get("issueModels"),
            "phraseMatchers": obj.get("phraseMatchers"),
            "runEntityAnnotator": obj.get("runEntityAnnotator"),
            "runIntentAnnotator": obj.get("runIntentAnnotator"),
            "runInterruptionAnnotator": obj.get("runInterruptionAnnotator"),
            "runIssueModelAnnotator": obj.get("runIssueModelAnnotator"),
            "runPhraseMatcherAnnotator": obj.get("runPhraseMatcherAnnotator"),
            "runSentimentAnnotator": obj.get("runSentimentAnnotator"),
            "runSilenceAnnotator": obj.get("runSilenceAnnotator"),
            "runSummarizationAnnotator": obj.get("runSummarizationAnnotator"),
            "summarizationConfig": GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig.from_dict(obj["summarizationConfig"]) if obj.get("summarizationConfig") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Contact Center AI Insights API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource(BaseModel):
    """
    Configuration for Cloud Storage bucket sources.
    """ # noqa: E501
    bucket_object_type: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the type of the objects in `bucket_uri`.", alias="bucketObjectType")
    bucket_uri: Optional[StrictStr] = Field(default=None, description="Required. The Cloud Storage bucket containing source objects.", alias="bucketUri")
    custom_metadata_keys: Optional[List[StrictStr]] = Field(default=None, description="Optional. Custom keys to extract as conversation labels from metadata files in `metadata_bucket_uri`. Keys not included in this field will be ignored. Note that there is a limit of 20 labels per conversation.", alias="customMetadataKeys")
    metadata_bucket_uri: Optional[StrictStr] = Field(default=None, description="Optional. The Cloud Storage path to the source object metadata. Note that: [1] metadata files are expected to be in JSON format [2] metadata and source objects must be in separate buckets [3] a source object's metadata object must share the same name to be properly ingested", alias="metadataBucketUri")
    __properties: ClassVar[List[str]] = ["bucketObjectType", "bucketUri", "customMetadataKeys", "metadataBucketUri"]

    @field_validator('bucket_object_type')
    def bucket_object_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BUCKET_OBJECT_TYPE_UNSPECIFIED', 'TRANSCRIPT', 'AUDIO']):
            raise ValueError("must be one of enum values ('BUCKET_OBJECT_TYPE_UNSPECIFIED', 'TRANSCRIPT', 'AUDIO')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bucketObjectType": obj.get("bucketObjectType"),
            "bucketUri": obj.get("bucketUri"),
            "customMetadataKeys": obj.get("customMetadataKeys"),
            "metadataBucketUri": obj.get("metadataBucketUri")
        })
        return _obj



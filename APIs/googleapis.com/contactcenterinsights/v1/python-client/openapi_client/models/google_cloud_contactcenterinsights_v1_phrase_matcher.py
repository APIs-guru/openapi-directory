# coding: utf-8

"""
    Contact Center AI Insights API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_contactcenterinsights_v1_phrase_match_rule_group import GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroup
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudContactcenterinsightsV1PhraseMatcher(BaseModel):
    """
    The phrase matcher resource.
    """ # noqa: E501
    activation_update_time: Optional[StrictStr] = Field(default=None, description="Output only. The most recent time at which the activation status was updated.", alias="activationUpdateTime")
    active: Optional[StrictBool] = Field(default=None, description="Applies the phrase matcher only when it is active.")
    display_name: Optional[StrictStr] = Field(default=None, description="The human-readable name of the phrase matcher.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the phrase matcher. Format: projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}")
    phrase_match_rule_groups: Optional[List[GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroup]] = Field(default=None, description="A list of phase match rule groups that are included in this matcher.", alias="phraseMatchRuleGroups")
    revision_create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp of when the revision was created. It is also the create time when a new matcher is added.", alias="revisionCreateTime")
    revision_id: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. The revision ID of the phrase matcher. A new revision is committed whenever the matcher is changed, except when it is activated or deactivated. A server generated random ID will be used. Example: locations/global/phraseMatchers/my-first-matcher@1234567", alias="revisionId")
    role_match: Optional[StrictStr] = Field(default=None, description="The role whose utterances the phrase matcher should be matched against. If the role is ROLE_UNSPECIFIED it will be matched against any utterances in the transcript.", alias="roleMatch")
    type: Optional[StrictStr] = Field(default=None, description="Required. The type of this phrase matcher.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The most recent time at which the phrase matcher was updated.", alias="updateTime")
    version_tag: Optional[StrictStr] = Field(default=None, description="The customized version tag to use for the phrase matcher. If not specified, it will default to `revision_id`.", alias="versionTag")
    __properties: ClassVar[List[str]] = ["activationUpdateTime", "active", "displayName", "name", "phraseMatchRuleGroups", "revisionCreateTime", "revisionId", "roleMatch", "type", "updateTime", "versionTag"]

    @field_validator('role_match')
    def role_match_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ROLE_UNSPECIFIED', 'HUMAN_AGENT', 'AUTOMATED_AGENT', 'END_USER', 'ANY_AGENT']):
            raise ValueError("must be one of enum values ('ROLE_UNSPECIFIED', 'HUMAN_AGENT', 'AUTOMATED_AGENT', 'END_USER', 'ANY_AGENT')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PHRASE_MATCHER_TYPE_UNSPECIFIED', 'ALL_OF', 'ANY_OF']):
            raise ValueError("must be one of enum values ('PHRASE_MATCHER_TYPE_UNSPECIFIED', 'ALL_OF', 'ANY_OF')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1PhraseMatcher from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "activation_update_time",
            "revision_create_time",
            "revision_id",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in phrase_match_rule_groups (list)
        _items = []
        if self.phrase_match_rule_groups:
            for _item_phrase_match_rule_groups in self.phrase_match_rule_groups:
                if _item_phrase_match_rule_groups:
                    _items.append(_item_phrase_match_rule_groups.to_dict())
            _dict['phraseMatchRuleGroups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1PhraseMatcher from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activationUpdateTime": obj.get("activationUpdateTime"),
            "active": obj.get("active"),
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "phraseMatchRuleGroups": [GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroup.from_dict(_item) for _item in obj["phraseMatchRuleGroups"]] if obj.get("phraseMatchRuleGroups") is not None else None,
            "revisionCreateTime": obj.get("revisionCreateTime"),
            "revisionId": obj.get("revisionId"),
            "roleMatch": obj.get("roleMatch"),
            "type": obj.get("type"),
            "updateTime": obj.get("updateTime"),
            "versionTag": obj.get("versionTag")
        })
        return _obj



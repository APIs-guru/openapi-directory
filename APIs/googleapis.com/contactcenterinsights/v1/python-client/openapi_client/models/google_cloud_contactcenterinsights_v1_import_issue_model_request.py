# coding: utf-8

"""
    Contact Center AI Insights API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_contactcenterinsights_v1_import_issue_model_request_gcs_source import GoogleCloudContactcenterinsightsV1ImportIssueModelRequestGcsSource
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudContactcenterinsightsV1ImportIssueModelRequest(BaseModel):
    """
    Request to import an issue model.
    """ # noqa: E501
    create_new_model: Optional[StrictBool] = Field(default=None, description="Optional. If set to true, will create a new issue model from the imported file with randomly generated IDs for the issue model and corresponding issues. Otherwise, replaces an existing model with the same ID as the file.", alias="createNewModel")
    gcs_source: Optional[GoogleCloudContactcenterinsightsV1ImportIssueModelRequestGcsSource] = Field(default=None, alias="gcsSource")
    parent: Optional[StrictStr] = Field(default=None, description="Required. The parent resource of the issue model.")
    __properties: ClassVar[List[str]] = ["createNewModel", "gcsSource", "parent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1ImportIssueModelRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gcs_source
        if self.gcs_source:
            _dict['gcsSource'] = self.gcs_source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1ImportIssueModelRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createNewModel": obj.get("createNewModel"),
            "gcsSource": GoogleCloudContactcenterinsightsV1ImportIssueModelRequestGcsSource.from_dict(obj["gcsSource"]) if obj.get("gcsSource") is not None else None,
            "parent": obj.get("parent")
        })
        return _obj



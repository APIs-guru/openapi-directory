# coding: utf-8

"""
    Contact Center AI Insights API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_contactcenterinsights_v1_calculate_stats_response_time_series import GoogleCloudContactcenterinsightsV1CalculateStatsResponseTimeSeries
from openapi_client.models.google_cloud_contactcenterinsights_v1_issue_model_label_stats_issue_stats import GoogleCloudContactcenterinsightsV1IssueModelLabelStatsIssueStats
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudContactcenterinsightsV1CalculateStatsResponse(BaseModel):
    """
    The response for calculating conversation statistics.
    """ # noqa: E501
    average_duration: Optional[StrictStr] = Field(default=None, description="The average duration of all conversations. The average is calculated using only conversations that have a time duration.", alias="averageDuration")
    average_turn_count: Optional[StrictInt] = Field(default=None, description="The average number of turns per conversation.", alias="averageTurnCount")
    conversation_count: Optional[StrictInt] = Field(default=None, description="The total number of conversations.", alias="conversationCount")
    conversation_count_time_series: Optional[GoogleCloudContactcenterinsightsV1CalculateStatsResponseTimeSeries] = Field(default=None, alias="conversationCountTimeSeries")
    custom_highlighter_matches: Optional[Dict[str, StrictInt]] = Field(default=None, description="A map associating each custom highlighter resource name with its respective number of matches in the set of conversations.", alias="customHighlighterMatches")
    issue_matches: Optional[Dict[str, StrictInt]] = Field(default=None, description="A map associating each issue resource name with its respective number of matches in the set of conversations. Key has the format: `projects//locations//issueModels//issues/` Deprecated, use `issue_matches_stats` field instead.", alias="issueMatches")
    issue_matches_stats: Optional[Dict[str, GoogleCloudContactcenterinsightsV1IssueModelLabelStatsIssueStats]] = Field(default=None, description="A map associating each issue resource name with its respective number of matches in the set of conversations. Key has the format: `projects//locations//issueModels//issues/`", alias="issueMatchesStats")
    smart_highlighter_matches: Optional[Dict[str, StrictInt]] = Field(default=None, description="A map associating each smart highlighter display name with its respective number of matches in the set of conversations.", alias="smartHighlighterMatches")
    __properties: ClassVar[List[str]] = ["averageDuration", "averageTurnCount", "conversationCount", "conversationCountTimeSeries", "customHighlighterMatches", "issueMatches", "issueMatchesStats", "smartHighlighterMatches"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1CalculateStatsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conversation_count_time_series
        if self.conversation_count_time_series:
            _dict['conversationCountTimeSeries'] = self.conversation_count_time_series.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in issue_matches_stats (dict)
        _field_dict = {}
        if self.issue_matches_stats:
            for _key_issue_matches_stats in self.issue_matches_stats:
                if self.issue_matches_stats[_key_issue_matches_stats]:
                    _field_dict[_key_issue_matches_stats] = self.issue_matches_stats[_key_issue_matches_stats].to_dict()
            _dict['issueMatchesStats'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudContactcenterinsightsV1CalculateStatsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "averageDuration": obj.get("averageDuration"),
            "averageTurnCount": obj.get("averageTurnCount"),
            "conversationCount": obj.get("conversationCount"),
            "conversationCountTimeSeries": GoogleCloudContactcenterinsightsV1CalculateStatsResponseTimeSeries.from_dict(obj["conversationCountTimeSeries"]) if obj.get("conversationCountTimeSeries") is not None else None,
            "customHighlighterMatches": obj.get("customHighlighterMatches"),
            "issueMatches": obj.get("issueMatches"),
            "issueMatchesStats": dict(
                (_k, GoogleCloudContactcenterinsightsV1IssueModelLabelStatsIssueStats.from_dict(_v))
                for _k, _v in obj["issueMatchesStats"].items()
            )
            if obj.get("issueMatchesStats") is not None
            else None,
            "smartHighlighterMatches": obj.get("smartHighlighterMatches")
        })
        return _obj



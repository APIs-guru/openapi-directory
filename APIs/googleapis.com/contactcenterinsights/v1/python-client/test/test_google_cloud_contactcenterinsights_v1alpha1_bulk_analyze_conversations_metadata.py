# coding: utf-8

"""
    Contact Center AI Insights API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_bulk_analyze_conversations_metadata import GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsMetadata

class TestGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsMetadata(unittest.TestCase):
    """GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsMetadata:
        """Test GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsMetadata`
        """
        model = GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsMetadata()
        if include_optional:
            return GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsMetadata(
                completed_analyses_count = 56,
                create_time = '',
                end_time = '',
                failed_analyses_count = 56,
                partial_errors = [
                    openapi_client.models.google_rpc_status.GoogleRpcStatus(
                        code = 56, 
                        details = [
                            {
                                'key' : null
                                }
                            ], 
                        message = '', )
                    ],
                request = openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_bulk_analyze_conversations_request.GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest(
                    analysis_percentage = 1.337, 
                    annotator_selector = openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_annotator_selector.GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector(
                        issue_models = [
                            ''
                            ], 
                        phrase_matchers = [
                            ''
                            ], 
                        run_entity_annotator = True, 
                        run_intent_annotator = True, 
                        run_interruption_annotator = True, 
                        run_issue_model_annotator = True, 
                        run_phrase_matcher_annotator = True, 
                        run_sentiment_annotator = True, 
                        run_silence_annotator = True, 
                        run_summarization_annotator = True, 
                        summarization_config = openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_annotator_selector_summarization_config.GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig(
                            conversation_profile = '', 
                            summarization_model = 'SUMMARIZATION_MODEL_UNSPECIFIED', ), ), 
                    filter = '', 
                    parent = '', ),
                total_requested_analyses_count = 56
            )
        else:
            return GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsMetadata(
        )
        """

    def testGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsMetadata(self):
        """Test GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

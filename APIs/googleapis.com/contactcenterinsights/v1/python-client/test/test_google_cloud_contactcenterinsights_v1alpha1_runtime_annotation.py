# coding: utf-8

"""
    Contact Center AI Insights API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_runtime_annotation import GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation

class TestGoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation(unittest.TestCase):
    """GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation:
        """Test GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation`
        """
        model = GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation()
        if include_optional:
            return GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation(
                annotation_id = '',
                answer_feedback = openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_answer_feedback.GoogleCloudContactcenterinsightsV1alpha1AnswerFeedback(
                    clicked = True, 
                    correctness_level = 'CORRECTNESS_LEVEL_UNSPECIFIED', 
                    displayed = True, ),
                article_suggestion = openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_article_suggestion_data.GoogleCloudContactcenterinsightsV1alpha1ArticleSuggestionData(
                    confidence_score = 1.337, 
                    metadata = {
                        'key' : ''
                        }, 
                    query_record = '', 
                    source = '', 
                    title = '', 
                    uri = '', ),
                conversation_summarization_suggestion = openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_conversation_summarization_suggestion_data.GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData(
                    answer_record = '', 
                    confidence = 1.337, 
                    conversation_model = '', 
                    metadata = {
                        'key' : ''
                        }, 
                    text = '', 
                    text_sections = {
                        'key' : ''
                        }, ),
                create_time = '',
                dialogflow_interaction = openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_dialogflow_interaction_data.GoogleCloudContactcenterinsightsV1alpha1DialogflowInteractionData(
                    confidence = 1.337, 
                    dialogflow_intent_id = '', ),
                end_boundary = openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_annotation_boundary.GoogleCloudContactcenterinsightsV1alpha1AnnotationBoundary(
                    transcript_index = 56, 
                    word_index = 56, ),
                faq_answer = openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_faq_answer_data.GoogleCloudContactcenterinsightsV1alpha1FaqAnswerData(
                    answer = '', 
                    confidence_score = 1.337, 
                    metadata = {
                        'key' : ''
                        }, 
                    query_record = '', 
                    question = '', 
                    source = '', ),
                smart_compose_suggestion = openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_smart_compose_suggestion_data.GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData(
                    confidence_score = 1.337, 
                    metadata = {
                        'key' : ''
                        }, 
                    query_record = '', 
                    suggestion = '', ),
                smart_reply = openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_smart_reply_data.GoogleCloudContactcenterinsightsV1alpha1SmartReplyData(
                    confidence_score = 1.337, 
                    metadata = {
                        'key' : ''
                        }, 
                    query_record = '', 
                    reply = '', ),
                start_boundary = openapi_client.models.google_cloud_contactcenterinsights_v1alpha1_annotation_boundary.GoogleCloudContactcenterinsightsV1alpha1AnnotationBoundary(
                    transcript_index = 56, 
                    word_index = 56, )
            )
        else:
            return GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation(
        )
        """

    def testGoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation(self):
        """Test GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

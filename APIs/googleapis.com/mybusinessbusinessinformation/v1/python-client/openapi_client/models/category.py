# coding: utf-8

"""
    My Business Business Information API

    The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.more_hours_type import MoreHoursType
from openapi_client.models.service_type import ServiceType
from typing import Optional, Set
from typing_extensions import Self

class Category(BaseModel):
    """
    A category describing what this business is (not what it does). For a list of valid category IDs, and the mappings to their human-readable names, see `categories.list`.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. The human-readable name of the category. This is set when reading the location. When modifying the location, `category_id` must be set.", alias="displayName")
    more_hours_types: Optional[List[MoreHoursType]] = Field(default=None, description="Output only. More hours types that are available for this business category.", alias="moreHoursTypes")
    name: Optional[StrictStr] = Field(default=None, description="Required. A stable ID (provided by Google) for this category. The value must be specified when modifying the category (when creating or updating a location).")
    service_types: Optional[List[ServiceType]] = Field(default=None, description="Output only. A list of all the service types that are available for this business category.", alias="serviceTypes")
    __properties: ClassVar[List[str]] = ["displayName", "moreHoursTypes", "name", "serviceTypes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Category from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "display_name",
            "more_hours_types",
            "service_types",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in more_hours_types (list)
        _items = []
        if self.more_hours_types:
            for _item_more_hours_types in self.more_hours_types:
                if _item_more_hours_types:
                    _items.append(_item_more_hours_types.to_dict())
            _dict['moreHoursTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_types (list)
        _items = []
        if self.service_types:
            for _item_service_types in self.service_types:
                if _item_service_types:
                    _items.append(_item_service_types.to_dict())
            _dict['serviceTypes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Category from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "moreHoursTypes": [MoreHoursType.from_dict(_item) for _item in obj["moreHoursTypes"]] if obj.get("moreHoursTypes") is not None else None,
            "name": obj.get("name"),
            "serviceTypes": [ServiceType.from_dict(_item) for _item in obj["serviceTypes"]] if obj.get("serviceTypes") is not None else None
        })
        return _obj



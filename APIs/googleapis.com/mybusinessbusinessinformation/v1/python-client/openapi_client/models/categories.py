# coding: utf-8

"""
    My Business Business Information API

    The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.category import Category
from typing import Optional, Set
from typing_extensions import Self

class Categories(BaseModel):
    """
    A collection of categories that describes the business. During updates, both fields must be set. Clients are prohibited from individually updating the primary or additional categories using the update mask.
    """ # noqa: E501
    additional_categories: Optional[List[Category]] = Field(default=None, description="Optional. Additional categories to describe your business. Categories help your customers find accurate, specific results for services they're interested in. To keep your business information accurate and live, make sure that you use as few categories as possible to describe your overall core business. Choose categories that are as specific as possible, but representative of your main business.", alias="additionalCategories")
    primary_category: Optional[Category] = Field(default=None, alias="primaryCategory")
    __properties: ClassVar[List[str]] = ["additionalCategories", "primaryCategory"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Categories from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_categories (list)
        _items = []
        if self.additional_categories:
            for _item_additional_categories in self.additional_categories:
                if _item_additional_categories:
                    _items.append(_item_additional_categories.to_dict())
            _dict['additionalCategories'] = _items
        # override the default output from pydantic by calling `to_dict()` of primary_category
        if self.primary_category:
            _dict['primaryCategory'] = self.primary_category.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Categories from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalCategories": [Category.from_dict(_item) for _item in obj["additionalCategories"]] if obj.get("additionalCategories") is not None else None,
            "primaryCategory": Category.from_dict(obj["primaryCategory"]) if obj.get("primaryCategory") is not None else None
        })
        return _obj



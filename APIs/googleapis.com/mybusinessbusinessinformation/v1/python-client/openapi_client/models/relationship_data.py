# coding: utf-8

"""
    My Business Business Information API

    The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.relevant_location import RelevantLocation
from typing import Optional, Set
from typing_extensions import Self

class RelationshipData(BaseModel):
    """
    Information of all parent and children locations related to this one.
    """ # noqa: E501
    children_locations: Optional[List[RelevantLocation]] = Field(default=None, description="The list of children locations that this location has relations with.", alias="childrenLocations")
    parent_chain: Optional[StrictStr] = Field(default=None, description="The resource name of the Chain that this location is member of. How to find Chain ID", alias="parentChain")
    parent_location: Optional[RelevantLocation] = Field(default=None, alias="parentLocation")
    __properties: ClassVar[List[str]] = ["childrenLocations", "parentChain", "parentLocation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RelationshipData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in children_locations (list)
        _items = []
        if self.children_locations:
            for _item_children_locations in self.children_locations:
                if _item_children_locations:
                    _items.append(_item_children_locations.to_dict())
            _dict['childrenLocations'] = _items
        # override the default output from pydantic by calling `to_dict()` of parent_location
        if self.parent_location:
            _dict['parentLocation'] = self.parent_location.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RelationshipData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "childrenLocations": [RelevantLocation.from_dict(_item) for _item in obj["childrenLocations"]] if obj.get("childrenLocations") is not None else None,
            "parentChain": obj.get("parentChain"),
            "parentLocation": RelevantLocation.from_dict(obj["parentLocation"]) if obj.get("parentLocation") is not None else None
        })
        return _obj



# coding: utf-8

"""
    My Business Business Information API

    The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.free_form_service_item import FreeFormServiceItem
from openapi_client.models.money import Money
from openapi_client.models.structured_service_item import StructuredServiceItem
from typing import Optional, Set
from typing_extensions import Self

class ServiceItem(BaseModel):
    """
    A message that describes a single service item. It is used to describe the type of service that the merchant provides. For example, haircut can be a service.
    """ # noqa: E501
    free_form_service_item: Optional[FreeFormServiceItem] = Field(default=None, alias="freeFormServiceItem")
    price: Optional[Money] = None
    structured_service_item: Optional[StructuredServiceItem] = Field(default=None, alias="structuredServiceItem")
    __properties: ClassVar[List[str]] = ["freeFormServiceItem", "price", "structuredServiceItem"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of free_form_service_item
        if self.free_form_service_item:
            _dict['freeFormServiceItem'] = self.free_form_service_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of structured_service_item
        if self.structured_service_item:
            _dict['structuredServiceItem'] = self.structured_service_item.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "freeFormServiceItem": FreeFormServiceItem.from_dict(obj["freeFormServiceItem"]) if obj.get("freeFormServiceItem") is not None else None,
            "price": Money.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "structuredServiceItem": StructuredServiceItem.from_dict(obj["structuredServiceItem"]) if obj.get("structuredServiceItem") is not None else None
        })
        return _obj



# coding: utf-8

"""
    My Business Business Information API

    The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Metadata(BaseModel):
    """
    Additional non-user-editable information about the location.
    """ # noqa: E501
    can_delete: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the location can be deleted using the API.", alias="canDelete")
    can_have_business_calls: Optional[StrictBool] = Field(default=None, description="Output only. Indicates if the listing is eligible for business calls.", alias="canHaveBusinessCalls")
    can_have_food_menus: Optional[StrictBool] = Field(default=None, description="Output only. Indicates if the listing is eligible for food menu.", alias="canHaveFoodMenus")
    can_modify_service_list: Optional[StrictBool] = Field(default=None, description="Output only. Indicates if the listing can modify the service list.", alias="canModifyServiceList")
    can_operate_health_data: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the location can operate on Health data.", alias="canOperateHealthData")
    can_operate_local_post: Optional[StrictBool] = Field(default=None, description="Output only. Indicates if the listing can manage local posts.", alias="canOperateLocalPost")
    can_operate_lodging_data: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the location can operate on Lodging data.", alias="canOperateLodgingData")
    duplicate_location: Optional[StrictStr] = Field(default=None, description="Output only. The location resource that this location duplicates.", alias="duplicateLocation")
    has_google_updated: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the place ID associated with this location has updates that need to be updated or rejected by the client. If this boolean is set, you should call the `getGoogleUpdated` method to lookup information that's needs to be verified.", alias="hasGoogleUpdated")
    has_pending_edits: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether any of this Location's properties are in the edit pending state.", alias="hasPendingEdits")
    has_voice_of_merchant: Optional[StrictBool] = Field(default=None, description="Output only. Indicates if the listing has Voice of Merchant. If this boolean is false, you should call the locations.getVoiceOfMerchantState API to get details as to why they do not have Voice of Merchant.", alias="hasVoiceOfMerchant")
    maps_uri: Optional[StrictStr] = Field(default=None, description="Output only. A link to the location on Maps.", alias="mapsUri")
    new_review_uri: Optional[StrictStr] = Field(default=None, description="Output only. A link to the page on Google Search where a customer can leave a review for the location.", alias="newReviewUri")
    place_id: Optional[StrictStr] = Field(default=None, description="Output only. If this locationappears on Google Maps, this field is populated with the place ID for the location. This ID can be used in various Places APIs. This field can be set during Create calls, but not for Update.", alias="placeId")
    __properties: ClassVar[List[str]] = ["canDelete", "canHaveBusinessCalls", "canHaveFoodMenus", "canModifyServiceList", "canOperateHealthData", "canOperateLocalPost", "canOperateLodgingData", "duplicateLocation", "hasGoogleUpdated", "hasPendingEdits", "hasVoiceOfMerchant", "mapsUri", "newReviewUri", "placeId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Metadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "can_delete",
            "can_have_business_calls",
            "can_have_food_menus",
            "can_modify_service_list",
            "can_operate_health_data",
            "can_operate_local_post",
            "can_operate_lodging_data",
            "duplicate_location",
            "has_google_updated",
            "has_pending_edits",
            "has_voice_of_merchant",
            "maps_uri",
            "new_review_uri",
            "place_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Metadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "canDelete": obj.get("canDelete"),
            "canHaveBusinessCalls": obj.get("canHaveBusinessCalls"),
            "canHaveFoodMenus": obj.get("canHaveFoodMenus"),
            "canModifyServiceList": obj.get("canModifyServiceList"),
            "canOperateHealthData": obj.get("canOperateHealthData"),
            "canOperateLocalPost": obj.get("canOperateLocalPost"),
            "canOperateLodgingData": obj.get("canOperateLodgingData"),
            "duplicateLocation": obj.get("duplicateLocation"),
            "hasGoogleUpdated": obj.get("hasGoogleUpdated"),
            "hasPendingEdits": obj.get("hasPendingEdits"),
            "hasVoiceOfMerchant": obj.get("hasVoiceOfMerchant"),
            "mapsUri": obj.get("mapsUri"),
            "newReviewUri": obj.get("newReviewUri"),
            "placeId": obj.get("placeId")
        })
        return _obj



# coding: utf-8

"""
    My Business Business Information API

    The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ad_words_location_extensions import AdWordsLocationExtensions
from openapi_client.models.business_hours import BusinessHours
from openapi_client.models.categories import Categories
from openapi_client.models.lat_lng import LatLng
from openapi_client.models.metadata import Metadata
from openapi_client.models.more_hours import MoreHours
from openapi_client.models.open_info import OpenInfo
from openapi_client.models.phone_numbers import PhoneNumbers
from openapi_client.models.postal_address import PostalAddress
from openapi_client.models.profile import Profile
from openapi_client.models.relationship_data import RelationshipData
from openapi_client.models.service_area_business import ServiceAreaBusiness
from openapi_client.models.service_item import ServiceItem
from openapi_client.models.special_hours import SpecialHours
from typing import Optional, Set
from typing_extensions import Self

class Location(BaseModel):
    """
    A location. See the [help center article] (https://support.google.com/business/answer/3038177) for a detailed description of these fields, or the [category endpoint](/my-business/reference/rest/v4/categories) for a list of valid business categories.
    """ # noqa: E501
    ad_words_location_extensions: Optional[AdWordsLocationExtensions] = Field(default=None, alias="adWordsLocationExtensions")
    categories: Optional[Categories] = None
    labels: Optional[List[StrictStr]] = Field(default=None, description="Optional. A collection of free-form strings to allow you to tag your business. These labels are NOT user facing; only you can see them. Must be between 1-255 characters per label.")
    language_code: Optional[StrictStr] = Field(default=None, description="Immutable. The language of the location. Set during creation and not updateable.", alias="languageCode")
    latlng: Optional[LatLng] = None
    metadata: Optional[Metadata] = None
    more_hours: Optional[List[MoreHours]] = Field(default=None, description="Optional. More hours for a business's different departments or specific customers.", alias="moreHours")
    name: Optional[StrictStr] = Field(default=None, description="Google identifier for this location in the form: `locations/{location_id}`.")
    open_info: Optional[OpenInfo] = Field(default=None, alias="openInfo")
    phone_numbers: Optional[PhoneNumbers] = Field(default=None, alias="phoneNumbers")
    profile: Optional[Profile] = None
    regular_hours: Optional[BusinessHours] = Field(default=None, alias="regularHours")
    relationship_data: Optional[RelationshipData] = Field(default=None, alias="relationshipData")
    service_area: Optional[ServiceAreaBusiness] = Field(default=None, alias="serviceArea")
    service_items: Optional[List[ServiceItem]] = Field(default=None, description="Optional. List of services supported by merchants. A service can be haircut, install water heater, etc. Duplicated service items will be removed automatically.", alias="serviceItems")
    special_hours: Optional[SpecialHours] = Field(default=None, alias="specialHours")
    store_code: Optional[StrictStr] = Field(default=None, description="Optional. External identifier for this location, which must be unique within a given account. This is a means of associating the location with your own records.", alias="storeCode")
    storefront_address: Optional[PostalAddress] = Field(default=None, alias="storefrontAddress")
    title: Optional[StrictStr] = Field(default=None, description="Required. Location name should reflect your business's real-world name, as used consistently on your storefront, website, and stationery, and as known to customers. Any additional information, when relevant, can be included in other fields of the resource (for example, `Address`, `Categories`). Don't add unnecessary information to your name (for example, prefer \"Google\" over \"Google Inc. - Mountain View Corporate Headquarters\"). Don't include marketing taglines, store codes, special characters, hours or closed/open status, phone numbers, website URLs, service/product information, location/address or directions, or containment information (for example, \"Chase ATM in Duane Reade\").")
    website_uri: Optional[StrictStr] = Field(default=None, description="Optional. A URL for this business. If possible, use a URL that represents this individual business location instead of a generic website/URL that represents all locations, or the brand.", alias="websiteUri")
    __properties: ClassVar[List[str]] = ["adWordsLocationExtensions", "categories", "labels", "languageCode", "latlng", "metadata", "moreHours", "name", "openInfo", "phoneNumbers", "profile", "regularHours", "relationshipData", "serviceArea", "serviceItems", "specialHours", "storeCode", "storefrontAddress", "title", "websiteUri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Location from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ad_words_location_extensions
        if self.ad_words_location_extensions:
            _dict['adWordsLocationExtensions'] = self.ad_words_location_extensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of categories
        if self.categories:
            _dict['categories'] = self.categories.to_dict()
        # override the default output from pydantic by calling `to_dict()` of latlng
        if self.latlng:
            _dict['latlng'] = self.latlng.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in more_hours (list)
        _items = []
        if self.more_hours:
            for _item_more_hours in self.more_hours:
                if _item_more_hours:
                    _items.append(_item_more_hours.to_dict())
            _dict['moreHours'] = _items
        # override the default output from pydantic by calling `to_dict()` of open_info
        if self.open_info:
            _dict['openInfo'] = self.open_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phone_numbers
        if self.phone_numbers:
            _dict['phoneNumbers'] = self.phone_numbers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of regular_hours
        if self.regular_hours:
            _dict['regularHours'] = self.regular_hours.to_dict()
        # override the default output from pydantic by calling `to_dict()` of relationship_data
        if self.relationship_data:
            _dict['relationshipData'] = self.relationship_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_area
        if self.service_area:
            _dict['serviceArea'] = self.service_area.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in service_items (list)
        _items = []
        if self.service_items:
            for _item_service_items in self.service_items:
                if _item_service_items:
                    _items.append(_item_service_items.to_dict())
            _dict['serviceItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of special_hours
        if self.special_hours:
            _dict['specialHours'] = self.special_hours.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storefront_address
        if self.storefront_address:
            _dict['storefrontAddress'] = self.storefront_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Location from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adWordsLocationExtensions": AdWordsLocationExtensions.from_dict(obj["adWordsLocationExtensions"]) if obj.get("adWordsLocationExtensions") is not None else None,
            "categories": Categories.from_dict(obj["categories"]) if obj.get("categories") is not None else None,
            "labels": obj.get("labels"),
            "languageCode": obj.get("languageCode"),
            "latlng": LatLng.from_dict(obj["latlng"]) if obj.get("latlng") is not None else None,
            "metadata": Metadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "moreHours": [MoreHours.from_dict(_item) for _item in obj["moreHours"]] if obj.get("moreHours") is not None else None,
            "name": obj.get("name"),
            "openInfo": OpenInfo.from_dict(obj["openInfo"]) if obj.get("openInfo") is not None else None,
            "phoneNumbers": PhoneNumbers.from_dict(obj["phoneNumbers"]) if obj.get("phoneNumbers") is not None else None,
            "profile": Profile.from_dict(obj["profile"]) if obj.get("profile") is not None else None,
            "regularHours": BusinessHours.from_dict(obj["regularHours"]) if obj.get("regularHours") is not None else None,
            "relationshipData": RelationshipData.from_dict(obj["relationshipData"]) if obj.get("relationshipData") is not None else None,
            "serviceArea": ServiceAreaBusiness.from_dict(obj["serviceArea"]) if obj.get("serviceArea") is not None else None,
            "serviceItems": [ServiceItem.from_dict(_item) for _item in obj["serviceItems"]] if obj.get("serviceItems") is not None else None,
            "specialHours": SpecialHours.from_dict(obj["specialHours"]) if obj.get("specialHours") is not None else None,
            "storeCode": obj.get("storeCode"),
            "storefrontAddress": PostalAddress.from_dict(obj["storefrontAddress"]) if obj.get("storefrontAddress") is not None else None,
            "title": obj.get("title"),
            "websiteUri": obj.get("websiteUri")
        })
        return _obj



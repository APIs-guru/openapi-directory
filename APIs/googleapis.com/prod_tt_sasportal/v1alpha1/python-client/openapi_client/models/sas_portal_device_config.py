# coding: utf-8

"""
    SAS Portal API (Testing)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sas_portal_device_air_interface import SasPortalDeviceAirInterface
from openapi_client.models.sas_portal_device_model import SasPortalDeviceModel
from openapi_client.models.sas_portal_installation_params import SasPortalInstallationParams
from typing import Optional, Set
from typing_extensions import Self

class SasPortalDeviceConfig(BaseModel):
    """
    Information about the device configuration.
    """ # noqa: E501
    air_interface: Optional[SasPortalDeviceAirInterface] = Field(default=None, alias="airInterface")
    call_sign: Optional[StrictStr] = Field(default=None, description="The call sign of the device operator.", alias="callSign")
    category: Optional[StrictStr] = Field(default=None, description="FCC category of the device.")
    installation_params: Optional[SasPortalInstallationParams] = Field(default=None, alias="installationParams")
    is_signed: Optional[StrictBool] = Field(default=None, description="Output only. Whether the configuration has been signed by a CPI.", alias="isSigned")
    measurement_capabilities: Optional[List[StrictStr]] = Field(default=None, description="Measurement reporting capabilities of the device.", alias="measurementCapabilities")
    model: Optional[SasPortalDeviceModel] = None
    state: Optional[StrictStr] = Field(default=None, description="State of the configuration.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last time the device configuration was edited.", alias="updateTime")
    user_id: Optional[StrictStr] = Field(default=None, description="The identifier of a device user.", alias="userId")
    __properties: ClassVar[List[str]] = ["airInterface", "callSign", "category", "installationParams", "isSigned", "measurementCapabilities", "model", "state", "updateTime", "userId"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEVICE_CATEGORY_UNSPECIFIED', 'DEVICE_CATEGORY_A', 'DEVICE_CATEGORY_B']):
            raise ValueError("must be one of enum values ('DEVICE_CATEGORY_UNSPECIFIED', 'DEVICE_CATEGORY_A', 'DEVICE_CATEGORY_B')")
        return value

    @field_validator('measurement_capabilities')
    def measurement_capabilities_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['MEASUREMENT_CAPABILITY_UNSPECIFIED', 'MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITH_GRANT', 'MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITHOUT_GRANT']):
                raise ValueError("each list item must be one of ('MEASUREMENT_CAPABILITY_UNSPECIFIED', 'MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITH_GRANT', 'MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITHOUT_GRANT')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEVICE_CONFIG_STATE_UNSPECIFIED', 'DRAFT', 'FINAL']):
            raise ValueError("must be one of enum values ('DEVICE_CONFIG_STATE_UNSPECIFIED', 'DRAFT', 'FINAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SasPortalDeviceConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of air_interface
        if self.air_interface:
            _dict['airInterface'] = self.air_interface.to_dict()
        # override the default output from pydantic by calling `to_dict()` of installation_params
        if self.installation_params:
            _dict['installationParams'] = self.installation_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SasPortalDeviceConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "airInterface": SasPortalDeviceAirInterface.from_dict(obj["airInterface"]) if obj.get("airInterface") is not None else None,
            "callSign": obj.get("callSign"),
            "category": obj.get("category"),
            "installationParams": SasPortalInstallationParams.from_dict(obj["installationParams"]) if obj.get("installationParams") is not None else None,
            "isSigned": obj.get("isSigned"),
            "measurementCapabilities": obj.get("measurementCapabilities"),
            "model": SasPortalDeviceModel.from_dict(obj["model"]) if obj.get("model") is not None else None,
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime"),
            "userId": obj.get("userId")
        })
        return _obj



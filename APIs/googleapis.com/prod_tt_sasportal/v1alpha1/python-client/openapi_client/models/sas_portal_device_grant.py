# coding: utf-8

"""
    SAS Portal API (Testing)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.sas_portal_dpa_move_list import SasPortalDpaMoveList
from openapi_client.models.sas_portal_frequency_range import SasPortalFrequencyRange
from typing import Optional, Set
from typing_extensions import Self

class SasPortalDeviceGrant(BaseModel):
    """
    Device grant. It is an authorization provided by the Spectrum Access System to a device to transmit using specified operating parameters after a successful heartbeat by the device.
    """ # noqa: E501
    channel_type: Optional[StrictStr] = Field(default=None, description="Type of channel used.", alias="channelType")
    expire_time: Optional[StrictStr] = Field(default=None, description="The expiration time of the grant.", alias="expireTime")
    frequency_range: Optional[SasPortalFrequencyRange] = Field(default=None, alias="frequencyRange")
    grant_id: Optional[StrictStr] = Field(default=None, description="Grant Id.", alias="grantId")
    last_heartbeat_transmit_expire_time: Optional[StrictStr] = Field(default=None, description="The transmit expiration time of the last heartbeat.", alias="lastHeartbeatTransmitExpireTime")
    max_eirp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum Equivalent Isotropically Radiated Power (EIRP) permitted by the grant. The maximum EIRP is in units of dBm/MHz. The value of `maxEirp` represents the average (RMS) EIRP that would be measured by the procedure defined in FCC part 96.41(e)(3).", alias="maxEirp")
    move_list: Optional[List[SasPortalDpaMoveList]] = Field(default=None, description="The DPA move lists on which this grant appears.", alias="moveList")
    state: Optional[StrictStr] = Field(default=None, description="State of the grant.")
    suspension_reason: Optional[List[StrictStr]] = Field(default=None, description="If the grant is suspended, the reason(s) for suspension.", alias="suspensionReason")
    __properties: ClassVar[List[str]] = ["channelType", "expireTime", "frequencyRange", "grantId", "lastHeartbeatTransmitExpireTime", "maxEirp", "moveList", "state", "suspensionReason"]

    @field_validator('channel_type')
    def channel_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHANNEL_TYPE_UNSPECIFIED', 'CHANNEL_TYPE_GAA', 'CHANNEL_TYPE_PAL']):
            raise ValueError("must be one of enum values ('CHANNEL_TYPE_UNSPECIFIED', 'CHANNEL_TYPE_GAA', 'CHANNEL_TYPE_PAL')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GRANT_STATE_UNSPECIFIED', 'GRANT_STATE_GRANTED', 'GRANT_STATE_TERMINATED', 'GRANT_STATE_SUSPENDED', 'GRANT_STATE_AUTHORIZED', 'GRANT_STATE_EXPIRED']):
            raise ValueError("must be one of enum values ('GRANT_STATE_UNSPECIFIED', 'GRANT_STATE_GRANTED', 'GRANT_STATE_TERMINATED', 'GRANT_STATE_SUSPENDED', 'GRANT_STATE_AUTHORIZED', 'GRANT_STATE_EXPIRED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SasPortalDeviceGrant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of frequency_range
        if self.frequency_range:
            _dict['frequencyRange'] = self.frequency_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in move_list (list)
        _items = []
        if self.move_list:
            for _item_move_list in self.move_list:
                if _item_move_list:
                    _items.append(_item_move_list.to_dict())
            _dict['moveList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SasPortalDeviceGrant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channelType": obj.get("channelType"),
            "expireTime": obj.get("expireTime"),
            "frequencyRange": SasPortalFrequencyRange.from_dict(obj["frequencyRange"]) if obj.get("frequencyRange") is not None else None,
            "grantId": obj.get("grantId"),
            "lastHeartbeatTransmitExpireTime": obj.get("lastHeartbeatTransmitExpireTime"),
            "maxEirp": obj.get("maxEirp"),
            "moveList": [SasPortalDpaMoveList.from_dict(_item) for _item in obj["moveList"]] if obj.get("moveList") is not None else None,
            "state": obj.get("state"),
            "suspensionReason": obj.get("suspensionReason")
        })
        return _obj



# coding: utf-8

"""
    AdSense Host API

    Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.

    The version of the OpenAPI document: v4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ad_style import AdStyle
from openapi_client.models.ad_unit_content_ads_settings import AdUnitContentAdsSettings
from openapi_client.models.ad_unit_mobile_content_ads_settings import AdUnitMobileContentAdsSettings
from typing import Optional, Set
from typing_extensions import Self

class AdUnit(BaseModel):
    """
    AdUnit
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, description="Identity code of this ad unit, not necessarily unique across ad clients.")
    content_ads_settings: Optional[AdUnitContentAdsSettings] = Field(default=None, alias="contentAdsSettings")
    custom_style: Optional[AdStyle] = Field(default=None, alias="customStyle")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of this ad unit. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.")
    kind: Optional[StrictStr] = Field(default='adsensehost#adUnit', description="Kind of resource this is, in this case adsensehost#adUnit.")
    mobile_content_ads_settings: Optional[AdUnitMobileContentAdsSettings] = Field(default=None, alias="mobileContentAdsSettings")
    name: Optional[StrictStr] = Field(default=None, description="Name of this ad unit.")
    status: Optional[StrictStr] = Field(default=None, description="Status of this ad unit. Possible values are: NEW: Indicates that the ad unit was created within the last seven days and does not yet have any activity associated with it.  ACTIVE: Indicates that there has been activity on this ad unit in the last seven days.  INACTIVE: Indicates that there has been no activity on this ad unit in the last seven days.")
    __properties: ClassVar[List[str]] = ["code", "contentAdsSettings", "customStyle", "id", "kind", "mobileContentAdsSettings", "name", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdUnit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content_ads_settings
        if self.content_ads_settings:
            _dict['contentAdsSettings'] = self.content_ads_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_style
        if self.custom_style:
            _dict['customStyle'] = self.custom_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mobile_content_ads_settings
        if self.mobile_content_ads_settings:
            _dict['mobileContentAdsSettings'] = self.mobile_content_ads_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdUnit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "contentAdsSettings": AdUnitContentAdsSettings.from_dict(obj["contentAdsSettings"]) if obj.get("contentAdsSettings") is not None else None,
            "customStyle": AdStyle.from_dict(obj["customStyle"]) if obj.get("customStyle") is not None else None,
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'adsensehost#adUnit',
            "mobileContentAdsSettings": AdUnitMobileContentAdsSettings.from_dict(obj["mobileContentAdsSettings"]) if obj.get("mobileContentAdsSettings") is not None else None,
            "name": obj.get("name"),
            "status": obj.get("status")
        })
        return _obj



# coding: utf-8

"""
    AdSense Host API

    Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.

    The version of the OpenAPI document: v4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.report_headers_inner import ReportHeadersInner
from typing import Optional, Set
from typing_extensions import Self

class Report(BaseModel):
    """
    Report
    """ # noqa: E501
    averages: Optional[List[StrictStr]] = Field(default=None, description="The averages of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.")
    headers: Optional[List[ReportHeadersInner]] = Field(default=None, description="The header information of the columns requested in the report. This is a list of headers; one for each dimension in the request, followed by one for each metric in the request.")
    kind: Optional[StrictStr] = Field(default='adsensehost#report', description="Kind this is, in this case adsensehost#report.")
    rows: Optional[List[List[StrictStr]]] = Field(default=None, description="The output rows of the report. Each row is a list of cells; one for each dimension in the request, followed by one for each metric in the request. The dimension cells contain strings, and the metric cells contain numbers.")
    total_matched_rows: Optional[StrictStr] = Field(default=None, description="The total number of rows matched by the report request. Fewer rows may be returned in the response due to being limited by the row count requested or the report row limit.", alias="totalMatchedRows")
    totals: Optional[List[StrictStr]] = Field(default=None, description="The totals of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.")
    warnings: Optional[List[StrictStr]] = Field(default=None, description="Any warnings associated with generation of the report.")
    __properties: ClassVar[List[str]] = ["averages", "headers", "kind", "rows", "totalMatchedRows", "totals", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Report from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in headers (list)
        _items = []
        if self.headers:
            for _item_headers in self.headers:
                if _item_headers:
                    _items.append(_item_headers.to_dict())
            _dict['headers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Report from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "averages": obj.get("averages"),
            "headers": [ReportHeadersInner.from_dict(_item) for _item in obj["headers"]] if obj.get("headers") is not None else None,
            "kind": obj.get("kind") if obj.get("kind") is not None else 'adsensehost#report',
            "rows": obj.get("rows"),
            "totalMatchedRows": obj.get("totalMatchedRows"),
            "totals": obj.get("totals"),
            "warnings": obj.get("warnings")
        })
        return _obj



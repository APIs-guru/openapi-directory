# coding: utf-8

"""
    Cloud Pub/Sub API

    Provides reliable, many-to-many, asynchronous messaging between applications. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ModelSchema(BaseModel):
    """
    A schema resource.
    """ # noqa: E501
    definition: Optional[StrictStr] = Field(default=None, description="The definition of the schema. This should contain a string representing the full definition of the schema that is a valid schema definition of the type specified in `type`.")
    name: Optional[StrictStr] = Field(default=None, description="Required. Name of the schema. Format is `projects/{project}/schemas/{schema}`.")
    revision_create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp that the revision was created.", alias="revisionCreateTime")
    revision_id: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. The revision ID of the schema.", alias="revisionId")
    type: Optional[StrictStr] = Field(default=None, description="The type of the schema definition.")
    __properties: ClassVar[List[str]] = ["definition", "name", "revisionCreateTime", "revisionId", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'PROTOCOL_BUFFER', 'AVRO']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'PROTOCOL_BUFFER', 'AVRO')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "revision_create_time",
            "revision_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "definition": obj.get("definition"),
            "name": obj.get("name"),
            "revisionCreateTime": obj.get("revisionCreateTime"),
            "revisionId": obj.get("revisionId"),
            "type": obj.get("type")
        })
        return _obj



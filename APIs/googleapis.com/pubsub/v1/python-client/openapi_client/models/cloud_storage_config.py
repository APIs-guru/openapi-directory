# coding: utf-8

"""
    Cloud Pub/Sub API

    Provides reliable, many-to-many, asynchronous messaging between applications. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.avro_config import AvroConfig
from typing import Optional, Set
from typing_extensions import Self

class CloudStorageConfig(BaseModel):
    """
    Configuration for a Cloud Storage subscription.
    """ # noqa: E501
    avro_config: Optional[AvroConfig] = Field(default=None, alias="avroConfig")
    bucket: Optional[StrictStr] = Field(default=None, description="Required. User-provided name for the Cloud Storage bucket. The bucket must be created by the user. The bucket name must be without any prefix like \"gs://\". See the [bucket naming requirements] (https://cloud.google.com/storage/docs/buckets#naming).")
    filename_prefix: Optional[StrictStr] = Field(default=None, description="Optional. User-provided prefix for Cloud Storage filename. See the [object naming requirements](https://cloud.google.com/storage/docs/objects#naming).", alias="filenamePrefix")
    filename_suffix: Optional[StrictStr] = Field(default=None, description="Optional. User-provided suffix for Cloud Storage filename. See the [object naming requirements](https://cloud.google.com/storage/docs/objects#naming). Must not end in \"/\".", alias="filenameSuffix")
    max_bytes: Optional[StrictStr] = Field(default=None, description="Optional. The maximum bytes that can be written to a Cloud Storage file before a new file is created. Min 1 KB, max 10 GiB. The max_bytes limit may be exceeded in cases where messages are larger than the limit.", alias="maxBytes")
    max_duration: Optional[StrictStr] = Field(default=None, description="Optional. The maximum duration that can elapse before a new Cloud Storage file is created. Min 1 minute, max 10 minutes, default 5 minutes. May not exceed the subscription's acknowledgement deadline.", alias="maxDuration")
    service_account_email: Optional[StrictStr] = Field(default=None, description="Optional. The service account to use to write to Cloud Storage. The subscription creator or updater that specifies this field must have `iam.serviceAccounts.actAs` permission on the service account. If not specified, the Pub/Sub [service agent](https://cloud.google.com/iam/docs/service-agents), service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com, is used.", alias="serviceAccountEmail")
    state: Optional[StrictStr] = Field(default=None, description="Output only. An output-only field that indicates whether or not the subscription can receive messages.")
    text_config: Optional[Dict[str, Any]] = Field(default=None, description="Configuration for writing message data in text format. Message payloads will be written to files as raw text, separated by a newline.", alias="textConfig")
    __properties: ClassVar[List[str]] = ["avroConfig", "bucket", "filenamePrefix", "filenameSuffix", "maxBytes", "maxDuration", "serviceAccountEmail", "state", "textConfig"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'PERMISSION_DENIED', 'NOT_FOUND', 'IN_TRANSIT_LOCATION_RESTRICTION']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'PERMISSION_DENIED', 'NOT_FOUND', 'IN_TRANSIT_LOCATION_RESTRICTION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudStorageConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of avro_config
        if self.avro_config:
            _dict['avroConfig'] = self.avro_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudStorageConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avroConfig": AvroConfig.from_dict(obj["avroConfig"]) if obj.get("avroConfig") is not None else None,
            "bucket": obj.get("bucket"),
            "filenamePrefix": obj.get("filenamePrefix"),
            "filenameSuffix": obj.get("filenameSuffix"),
            "maxBytes": obj.get("maxBytes"),
            "maxDuration": obj.get("maxDuration"),
            "serviceAccountEmail": obj.get("serviceAccountEmail"),
            "state": obj.get("state"),
            "textConfig": obj.get("textConfig")
        })
        return _obj



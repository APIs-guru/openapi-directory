# coding: utf-8

"""
    Cloud Pub/Sub API

    Provides reliable, many-to-many, asynchronous messaging between applications. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ingestion_data_source_settings import IngestionDataSourceSettings
from openapi_client.models.message_storage_policy import MessageStoragePolicy
from openapi_client.models.schema_settings import SchemaSettings
from typing import Optional, Set
from typing_extensions import Self

class Topic(BaseModel):
    """
    A topic resource.
    """ # noqa: E501
    ingestion_data_source_settings: Optional[IngestionDataSourceSettings] = Field(default=None, alias="ingestionDataSourceSettings")
    kms_key_name: Optional[StrictStr] = Field(default=None, description="Optional. The resource name of the Cloud KMS CryptoKey to be used to protect access to messages published on this topic. The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`.", alias="kmsKeyName")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. See [Creating and managing labels] (https://cloud.google.com/pubsub/docs/labels).")
    message_retention_duration: Optional[StrictStr] = Field(default=None, description="Optional. Indicates the minimum duration to retain a message after it is published to the topic. If this field is set, messages published to the topic in the last `message_retention_duration` are always available to subscribers. For instance, it allows any attached subscription to [seek to a timestamp](https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time) that is up to `message_retention_duration` in the past. If this field is not set, message retention is controlled by settings on individual subscriptions. Cannot be more than 31 days or less than 10 minutes.", alias="messageRetentionDuration")
    message_storage_policy: Optional[MessageStoragePolicy] = Field(default=None, alias="messageStoragePolicy")
    name: Optional[StrictStr] = Field(default=None, description="Required. The name of the topic. It must have the format `\"projects/{project}/topics/{topic}\"`. `{topic}` must start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in length, and it must not start with `\"goog\"`.")
    satisfies_pzs: Optional[StrictBool] = Field(default=None, description="Optional. Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.", alias="satisfiesPzs")
    schema_settings: Optional[SchemaSettings] = Field(default=None, alias="schemaSettings")
    state: Optional[StrictStr] = Field(default=None, description="Output only. An output-only field indicating the state of the topic.")
    __properties: ClassVar[List[str]] = ["ingestionDataSourceSettings", "kmsKeyName", "labels", "messageRetentionDuration", "messageStoragePolicy", "name", "satisfiesPzs", "schemaSettings", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'INGESTION_RESOURCE_ERROR']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'INGESTION_RESOURCE_ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Topic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ingestion_data_source_settings
        if self.ingestion_data_source_settings:
            _dict['ingestionDataSourceSettings'] = self.ingestion_data_source_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of message_storage_policy
        if self.message_storage_policy:
            _dict['messageStoragePolicy'] = self.message_storage_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schema_settings
        if self.schema_settings:
            _dict['schemaSettings'] = self.schema_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Topic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ingestionDataSourceSettings": IngestionDataSourceSettings.from_dict(obj["ingestionDataSourceSettings"]) if obj.get("ingestionDataSourceSettings") is not None else None,
            "kmsKeyName": obj.get("kmsKeyName"),
            "labels": obj.get("labels"),
            "messageRetentionDuration": obj.get("messageRetentionDuration"),
            "messageStoragePolicy": MessageStoragePolicy.from_dict(obj["messageStoragePolicy"]) if obj.get("messageStoragePolicy") is not None else None,
            "name": obj.get("name"),
            "satisfiesPzs": obj.get("satisfiesPzs"),
            "schemaSettings": SchemaSettings.from_dict(obj["schemaSettings"]) if obj.get("schemaSettings") is not None else None,
            "state": obj.get("state")
        })
        return _obj



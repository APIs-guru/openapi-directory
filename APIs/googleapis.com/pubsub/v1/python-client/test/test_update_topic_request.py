# coding: utf-8

"""
    Cloud Pub/Sub API

    Provides reliable, many-to-many, asynchronous messaging between applications. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.update_topic_request import UpdateTopicRequest

class TestUpdateTopicRequest(unittest.TestCase):
    """UpdateTopicRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateTopicRequest:
        """Test UpdateTopicRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateTopicRequest`
        """
        model = UpdateTopicRequest()
        if include_optional:
            return UpdateTopicRequest(
                topic = openapi_client.models.topic.Topic(
                    ingestion_data_source_settings = openapi_client.models.ingestion_data_source_settings.IngestionDataSourceSettings(
                        aws_kinesis = openapi_client.models.aws_kinesis.AwsKinesis(
                            aws_role_arn = '', 
                            consumer_arn = '', 
                            gcp_service_account = '', 
                            state = 'STATE_UNSPECIFIED', 
                            stream_arn = '', ), ), 
                    kms_key_name = '', 
                    labels = {
                        'key' : ''
                        }, 
                    message_retention_duration = '', 
                    message_storage_policy = openapi_client.models.message_storage_policy.MessageStoragePolicy(
                        allowed_persistence_regions = [
                            ''
                            ], 
                        enforce_in_transit = True, ), 
                    name = '', 
                    satisfies_pzs = True, 
                    schema_settings = openapi_client.models.schema_settings.SchemaSettings(
                        encoding = 'ENCODING_UNSPECIFIED', 
                        first_revision_id = '', 
                        last_revision_id = '', 
                        schema = '', ), 
                    state = 'STATE_UNSPECIFIED', ),
                update_mask = ''
            )
        else:
            return UpdateTopicRequest(
        )
        """

    def testUpdateTopicRequest(self):
        """Test UpdateTopicRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Firebase App Distribution API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_firebase_appdistro_v1alpha_release import GoogleFirebaseAppdistroV1alphaRelease
from typing import Optional, Set
from typing_extensions import Self

class GoogleFirebaseAppdistroV1alphaGetUploadStatusResponse(BaseModel):
    """
    GoogleFirebaseAppdistroV1alphaGetUploadStatusResponse
    """ # noqa: E501
    error_code: Optional[StrictStr] = Field(default=None, description="The error code associated with (only set on \"FAILURE\")", alias="errorCode")
    message: Optional[StrictStr] = Field(default=None, description="Any additional context for the given upload status (e.g. error message) Meant to be displayed to the client")
    release: Optional[GoogleFirebaseAppdistroV1alphaRelease] = None
    status: Optional[StrictStr] = Field(default=None, description="The status of the upload")
    __properties: ClassVar[List[str]] = ["errorCode", "message", "release", "status"]

    @field_validator('error_code')
    def error_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ERROR_UNSPECIFIED', 'INVALID_ZIP', 'MISSING_PLIST', 'MISSING_PROFILE', 'VERSION_TOO_LONG', 'MISSING_UUIDS', 'MISSING_RESOURCES', 'MISSING_MANIFEST', 'IOS_METADATA_ERROR', 'ANDROID_METADATA_ERROR', 'UNSUPPORTED_PLATFORM_TYPE', 'BUNDLE_ID_MISMATCH', 'APK_NOT_ZIP_ALIGNED', 'INVALID_CERTIFICATE', 'APK_TOO_LARGE', 'AAB_NOT_PUBLISHED', 'INVALID_PLIST_DEVICE_FAMILIES', 'AAB_TOS_NOT_ACCEPTED', 'APP_NAME_TOO_LONG', 'AAB_DEVELOPER_ACCOUNT_NOT_LINKED', 'AAB_NO_APP_WITH_GIVEN_PACKAGE_NAME_IN_ACCOUNT', 'AAB_UPLOAD_ERROR']):
            raise ValueError("must be one of enum values ('ERROR_UNSPECIFIED', 'INVALID_ZIP', 'MISSING_PLIST', 'MISSING_PROFILE', 'VERSION_TOO_LONG', 'MISSING_UUIDS', 'MISSING_RESOURCES', 'MISSING_MANIFEST', 'IOS_METADATA_ERROR', 'ANDROID_METADATA_ERROR', 'UNSUPPORTED_PLATFORM_TYPE', 'BUNDLE_ID_MISMATCH', 'APK_NOT_ZIP_ALIGNED', 'INVALID_CERTIFICATE', 'APK_TOO_LARGE', 'AAB_NOT_PUBLISHED', 'INVALID_PLIST_DEVICE_FAMILIES', 'AAB_TOS_NOT_ACCEPTED', 'APP_NAME_TOO_LONG', 'AAB_DEVELOPER_ACCOUNT_NOT_LINKED', 'AAB_NO_APP_WITH_GIVEN_PACKAGE_NAME_IN_ACCOUNT', 'AAB_UPLOAD_ERROR')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATUS_UNSPECIFIED', 'IN_PROGRESS', 'ALREADY_UPLOADED', 'SUCCESS', 'ERROR']):
            raise ValueError("must be one of enum values ('STATUS_UNSPECIFIED', 'IN_PROGRESS', 'ALREADY_UPLOADED', 'SUCCESS', 'ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppdistroV1alphaGetUploadStatusResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of release
        if self.release:
            _dict['release'] = self.release.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppdistroV1alphaGetUploadStatusResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorCode": obj.get("errorCode"),
            "message": obj.get("message"),
            "release": GoogleFirebaseAppdistroV1alphaRelease.from_dict(obj["release"]) if obj.get("release") is not None else None,
            "status": obj.get("status")
        })
        return _obj



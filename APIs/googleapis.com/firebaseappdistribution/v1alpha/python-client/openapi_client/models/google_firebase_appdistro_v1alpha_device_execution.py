# coding: utf-8

"""
    Firebase App Distribution API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_firebase_appdistro_v1alpha_app_crash import GoogleFirebaseAppdistroV1alphaAppCrash
from openapi_client.models.google_firebase_appdistro_v1alpha_robo_stats import GoogleFirebaseAppdistroV1alphaRoboStats
from openapi_client.models.google_firebase_appdistro_v1alpha_test_device import GoogleFirebaseAppdistroV1alphaTestDevice
from typing import Optional, Set
from typing_extensions import Self

class GoogleFirebaseAppdistroV1alphaDeviceExecution(BaseModel):
    """
    The results of running an automated test on a particular device.
    """ # noqa: E501
    app_crash: Optional[GoogleFirebaseAppdistroV1alphaAppCrash] = Field(default=None, alias="appCrash")
    crawl_graph_uri: Optional[StrictStr] = Field(default=None, description="Output only. A URI to an image of the Robo crawl graph.", alias="crawlGraphUri")
    device: Optional[GoogleFirebaseAppdistroV1alphaTestDevice] = None
    failed_reason: Optional[StrictStr] = Field(default=None, description="Output only. The reason why the test failed.", alias="failedReason")
    inconclusive_reason: Optional[StrictStr] = Field(default=None, description="Output only. The reason why the test was inconclusive.", alias="inconclusiveReason")
    results_storage_path: Optional[StrictStr] = Field(default=None, description="Output only. The path to a directory in Cloud Storage that will eventually contain the results for this execution. For example, gs://bucket/Nexus5-18-en-portrait.", alias="resultsStoragePath")
    robo_stats: Optional[GoogleFirebaseAppdistroV1alphaRoboStats] = Field(default=None, alias="roboStats")
    screenshot_uris: Optional[List[StrictStr]] = Field(default=None, description="Output only. A list of screenshot image URIs taken from the Robo crawl. The file names are numbered by the order in which they were taken.", alias="screenshotUris")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the test.")
    video_uri: Optional[StrictStr] = Field(default=None, description="Output only. A URI to a video of the test run.", alias="videoUri")
    __properties: ClassVar[List[str]] = ["appCrash", "crawlGraphUri", "device", "failedReason", "inconclusiveReason", "resultsStoragePath", "roboStats", "screenshotUris", "state", "videoUri"]

    @field_validator('failed_reason')
    def failed_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FAILED_REASON_UNSPECIFIED', 'CRASHED', 'NOT_INSTALLED', 'UNABLE_TO_CRAWL', 'DEVICE_OUT_OF_MEMORY']):
            raise ValueError("must be one of enum values ('FAILED_REASON_UNSPECIFIED', 'CRASHED', 'NOT_INSTALLED', 'UNABLE_TO_CRAWL', 'DEVICE_OUT_OF_MEMORY')")
        return value

    @field_validator('inconclusive_reason')
    def inconclusive_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INCONCLUSIVE_REASON_UNSPECIFIED', 'QUOTA_EXCEEDED', 'INFRASTRUCTURE_FAILURE', 'SERVICE_NOT_ACTIVATED', 'NO_SIGNATURE', 'NO_LAUNCHER_ACTIVITY', 'FORBIDDEN_PERMISSIONS', 'DEVICE_ADMIN_RECEIVER', 'NO_CODE_APK', 'INVALID_APK_PREVIEW_SDK']):
            raise ValueError("must be one of enum values ('INCONCLUSIVE_REASON_UNSPECIFIED', 'QUOTA_EXCEEDED', 'INFRASTRUCTURE_FAILURE', 'SERVICE_NOT_ACTIVATED', 'NO_SIGNATURE', 'NO_LAUNCHER_ACTIVITY', 'FORBIDDEN_PERMISSIONS', 'DEVICE_ADMIN_RECEIVER', 'NO_CODE_APK', 'INVALID_APK_PREVIEW_SDK')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TEST_STATE_UNSPECIFIED', 'IN_PROGRESS', 'PASSED', 'FAILED', 'INCONCLUSIVE']):
            raise ValueError("must be one of enum values ('TEST_STATE_UNSPECIFIED', 'IN_PROGRESS', 'PASSED', 'FAILED', 'INCONCLUSIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppdistroV1alphaDeviceExecution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "crawl_graph_uri",
            "failed_reason",
            "inconclusive_reason",
            "results_storage_path",
            "screenshot_uris",
            "state",
            "video_uri",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_crash
        if self.app_crash:
            _dict['appCrash'] = self.app_crash.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device
        if self.device:
            _dict['device'] = self.device.to_dict()
        # override the default output from pydantic by calling `to_dict()` of robo_stats
        if self.robo_stats:
            _dict['roboStats'] = self.robo_stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppdistroV1alphaDeviceExecution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appCrash": GoogleFirebaseAppdistroV1alphaAppCrash.from_dict(obj["appCrash"]) if obj.get("appCrash") is not None else None,
            "crawlGraphUri": obj.get("crawlGraphUri"),
            "device": GoogleFirebaseAppdistroV1alphaTestDevice.from_dict(obj["device"]) if obj.get("device") is not None else None,
            "failedReason": obj.get("failedReason"),
            "inconclusiveReason": obj.get("inconclusiveReason"),
            "resultsStoragePath": obj.get("resultsStoragePath"),
            "roboStats": GoogleFirebaseAppdistroV1alphaRoboStats.from_dict(obj["roboStats"]) if obj.get("roboStats") is not None else None,
            "screenshotUris": obj.get("screenshotUris"),
            "state": obj.get("state"),
            "videoUri": obj.get("videoUri")
        })
        return _obj



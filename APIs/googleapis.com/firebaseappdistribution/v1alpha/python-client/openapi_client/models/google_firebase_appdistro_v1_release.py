# coding: utf-8

"""
    Firebase App Distribution API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_firebase_appdistro_v1_release_notes import GoogleFirebaseAppdistroV1ReleaseNotes
from typing import Optional, Set
from typing_extensions import Self

class GoogleFirebaseAppdistroV1Release(BaseModel):
    """
    A release of a Firebase app.
    """ # noqa: E501
    binary_download_uri: Optional[StrictStr] = Field(default=None, description="Output only. A signed link (which expires in one hour) to directly download the app binary (IPA/APK/AAB) file.", alias="binaryDownloadUri")
    build_version: Optional[StrictStr] = Field(default=None, description="Output only. Build version of the release. For an Android release, the build version is the `versionCode`. For an iOS release, the build version is the `CFBundleVersion`.", alias="buildVersion")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the release was created.", alias="createTime")
    display_version: Optional[StrictStr] = Field(default=None, description="Output only. Display version of the release. For an Android release, the display version is the `versionName`. For an iOS release, the display version is the `CFBundleShortVersionString`.", alias="displayVersion")
    firebase_console_uri: Optional[StrictStr] = Field(default=None, description="Output only. A link to the Firebase console displaying a single release.", alias="firebaseConsoleUri")
    name: Optional[StrictStr] = Field(default=None, description="The name of the release resource. Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}`")
    release_notes: Optional[GoogleFirebaseAppdistroV1ReleaseNotes] = Field(default=None, alias="releaseNotes")
    testing_uri: Optional[StrictStr] = Field(default=None, description="Output only. A link to the release in the tester web clip or Android app that lets testers (which were granted access to the app) view release notes and install the app onto their devices.", alias="testingUri")
    __properties: ClassVar[List[str]] = ["binaryDownloadUri", "buildVersion", "createTime", "displayVersion", "firebaseConsoleUri", "name", "releaseNotes", "testingUri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppdistroV1Release from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "binary_download_uri",
            "build_version",
            "create_time",
            "display_version",
            "firebase_console_uri",
            "testing_uri",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of release_notes
        if self.release_notes:
            _dict['releaseNotes'] = self.release_notes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppdistroV1Release from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "binaryDownloadUri": obj.get("binaryDownloadUri"),
            "buildVersion": obj.get("buildVersion"),
            "createTime": obj.get("createTime"),
            "displayVersion": obj.get("displayVersion"),
            "firebaseConsoleUri": obj.get("firebaseConsoleUri"),
            "name": obj.get("name"),
            "releaseNotes": GoogleFirebaseAppdistroV1ReleaseNotes.from_dict(obj["releaseNotes"]) if obj.get("releaseNotes") is not None else None,
            "testingUri": obj.get("testingUri")
        })
        return _obj



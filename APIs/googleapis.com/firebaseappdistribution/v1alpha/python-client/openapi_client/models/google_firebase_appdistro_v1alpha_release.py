# coding: utf-8

"""
    Firebase App Distribution API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleFirebaseAppdistroV1alphaRelease(BaseModel):
    """
    Proto defining a release object
    """ # noqa: E501
    build_version: Optional[StrictStr] = Field(default=None, description="Release build version", alias="buildVersion")
    display_version: Optional[StrictStr] = Field(default=None, description="Release version", alias="displayVersion")
    distributed_at: Optional[StrictStr] = Field(default=None, description="Timestamp when the release was created", alias="distributedAt")
    id: Optional[StrictStr] = Field(default=None, description="Release Id")
    instance_id: Optional[StrictStr] = Field(default=None, description="Instance id of the release", alias="instanceId")
    last_activity_at: Optional[StrictStr] = Field(default=None, description="Last activity timestamp", alias="lastActivityAt")
    open_invitation_count: Optional[StrictInt] = Field(default=None, description="Number of testers who have open invitations for the release", alias="openInvitationCount")
    received_at: Optional[StrictStr] = Field(default=None, description="unused. ", alias="receivedAt")
    release_notes_summary: Optional[StrictStr] = Field(default=None, description="Release notes summary", alias="releaseNotesSummary")
    tester_count: Optional[StrictInt] = Field(default=None, description="Count of testers added to the release", alias="testerCount")
    tester_with_install_count: Optional[StrictInt] = Field(default=None, description="Number of testers who have installed the release", alias="testerWithInstallCount")
    __properties: ClassVar[List[str]] = ["buildVersion", "displayVersion", "distributedAt", "id", "instanceId", "lastActivityAt", "openInvitationCount", "receivedAt", "releaseNotesSummary", "testerCount", "testerWithInstallCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppdistroV1alphaRelease from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppdistroV1alphaRelease from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buildVersion": obj.get("buildVersion"),
            "displayVersion": obj.get("displayVersion"),
            "distributedAt": obj.get("distributedAt"),
            "id": obj.get("id"),
            "instanceId": obj.get("instanceId"),
            "lastActivityAt": obj.get("lastActivityAt"),
            "openInvitationCount": obj.get("openInvitationCount"),
            "receivedAt": obj.get("receivedAt"),
            "releaseNotesSummary": obj.get("releaseNotesSummary"),
            "testerCount": obj.get("testerCount"),
            "testerWithInstallCount": obj.get("testerWithInstallCount")
        })
        return _obj



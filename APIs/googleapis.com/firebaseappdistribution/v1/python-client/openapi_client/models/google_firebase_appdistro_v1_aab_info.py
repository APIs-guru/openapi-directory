# coding: utf-8

"""
    Firebase App Distribution API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_firebase_appdistro_v1_test_certificate import GoogleFirebaseAppdistroV1TestCertificate
from typing import Optional, Set
from typing_extensions import Self

class GoogleFirebaseAppdistroV1AabInfo(BaseModel):
    """
    Android App Bundle (AAB) information for a Firebase app.
    """ # noqa: E501
    integration_state: Optional[StrictStr] = Field(default=None, description="App bundle integration state. Only valid for android apps.", alias="integrationState")
    name: Optional[StrictStr] = Field(default=None, description="The name of the `AabInfo` resource. Format: `projects/{project_number}/apps/{app}/aabInfo`")
    test_certificate: Optional[GoogleFirebaseAppdistroV1TestCertificate] = Field(default=None, alias="testCertificate")
    __properties: ClassVar[List[str]] = ["integrationState", "name", "testCertificate"]

    @field_validator('integration_state')
    def integration_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AAB_INTEGRATION_STATE_UNSPECIFIED', 'INTEGRATED', 'PLAY_ACCOUNT_NOT_LINKED', 'NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT', 'APP_NOT_PUBLISHED', 'AAB_STATE_UNAVAILABLE', 'PLAY_IAS_TERMS_NOT_ACCEPTED']):
            raise ValueError("must be one of enum values ('AAB_INTEGRATION_STATE_UNSPECIFIED', 'INTEGRATED', 'PLAY_ACCOUNT_NOT_LINKED', 'NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT', 'APP_NOT_PUBLISHED', 'AAB_STATE_UNAVAILABLE', 'PLAY_IAS_TERMS_NOT_ACCEPTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppdistroV1AabInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of test_certificate
        if self.test_certificate:
            _dict['testCertificate'] = self.test_certificate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppdistroV1AabInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "integrationState": obj.get("integrationState"),
            "name": obj.get("name"),
            "testCertificate": GoogleFirebaseAppdistroV1TestCertificate.from_dict(obj["testCertificate"]) if obj.get("testCertificate") is not None else None
        })
        return _obj



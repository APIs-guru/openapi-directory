# coding: utf-8

"""
    Firebase App Distribution API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleFirebaseAppdistroV1Tester(BaseModel):
    """
    A person that can be invited to test apps in a Firebase project.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="The name of the tester associated with the Google account used to accept the tester invitation.", alias="displayName")
    groups: Optional[List[StrictStr]] = Field(default=None, description="The resource names of the groups this tester belongs to.")
    last_activity_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the tester was last active. This is the most recent time the tester installed one of the apps. If they've never installed one or if the release no longer exists, this is the time the tester was added to the project.", alias="lastActivityTime")
    name: Optional[StrictStr] = Field(default=None, description="The name of the tester resource. Format: `projects/{project_number}/testers/{email_address}`")
    __properties: ClassVar[List[str]] = ["displayName", "groups", "lastActivityTime", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppdistroV1Tester from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_activity_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppdistroV1Tester from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "groups": obj.get("groups"),
            "lastActivityTime": obj.get("lastActivityTime"),
            "name": obj.get("name")
        })
        return _obj



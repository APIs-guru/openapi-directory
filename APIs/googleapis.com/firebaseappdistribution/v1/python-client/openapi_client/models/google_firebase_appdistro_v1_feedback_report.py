# coding: utf-8

"""
    Firebase App Distribution API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleFirebaseAppdistroV1FeedbackReport(BaseModel):
    """
    A feedback report submitted by a tester for a release.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the feedback report was created.", alias="createTime")
    firebase_console_uri: Optional[StrictStr] = Field(default=None, description="Output only. A link to the Firebase console displaying the feedback report.", alias="firebaseConsoleUri")
    name: Optional[StrictStr] = Field(default=None, description="The name of the feedback report resource. Format: `projects/{project_number}/apps/{app}/releases/{release}/feedbackReports/{feedback_report}`")
    screenshot_uri: Optional[StrictStr] = Field(default=None, description="Output only. A signed link (which expires in one hour) that lets you directly download the screenshot.", alias="screenshotUri")
    tester: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the tester who submitted the feedback report.")
    text: Optional[StrictStr] = Field(default=None, description="Output only. The text of the feedback report.")
    __properties: ClassVar[List[str]] = ["createTime", "firebaseConsoleUri", "name", "screenshotUri", "tester", "text"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppdistroV1FeedbackReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "firebase_console_uri",
            "screenshot_uri",
            "tester",
            "text",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFirebaseAppdistroV1FeedbackReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "firebaseConsoleUri": obj.get("firebaseConsoleUri"),
            "name": obj.get("name"),
            "screenshotUri": obj.get("screenshotUri"),
            "tester": obj.get("tester"),
            "text": obj.get("text")
        })
        return _obj


